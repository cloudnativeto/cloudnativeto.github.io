<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Istio 兴趣小组 | 云原生社区（中国）</title>
    <link>https://cloudnative.to/community/sig/istio/</link>
      <atom:link href="https://cloudnative.to/community/sig/istio/index.xml" rel="self" type="application/rss+xml" />
    <description>Istio 兴趣小组</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Sat, 16 Jul 2022 00:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>Istio 兴趣小组</title>
      <link>https://cloudnative.to/community/sig/istio/</link>
    </image>
    
    <item>
      <title>Istio 名称的来历</title>
      <link>https://cloudnative.to/community/sig/istio/how-istio-got-its-name/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/community/sig/istio/how-istio-got-its-name/</guid>
      <description>&lt;p&gt;Istio（ISS-tee-oh）是由 &lt;a href=&#34;https://tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt; 创始人 Varun Talwar 和谷歌首席工程师 Louis Ryan 在 2017 年命名的，当时他们都在谷歌工作。&lt;/p&gt;
&lt;p&gt;Istio 在希腊语中是 “sail” 的意思，它（ιστίο）延用了 Kubernetes（在希腊语中是飞行员或舵手的意思）建立的希腊航海主题。Istio 和它的表亲 Istos（ιστός）（意思是桅杆、网）都来自古希腊词根 Istimi（ἵστημι），意思是 “to make stand”。&lt;/p&gt;
&lt;p&gt;“为了取名，我们翻阅了三个小时希腊字典”Varun 说，“最终我们两人想到一起去了。帆船的理念不仅在于谁在控制船，而是没有船你哪儿也去不了。“&lt;/p&gt;
&lt;p&gt;Varun 回忆说 10 个候选名称最后被缩减到 3 个，但命名 Istio Github 仓库的实际需求要求他们快速做出最终决定。&lt;/p&gt;
&lt;p&gt;Istio 现在的网址是 &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio.io&lt;/a&gt;，“io” 的重复是值得商榷。就其本身而言，“io” 有很多&lt;a href=&#34;https://en.wikipedia.org/wiki/Io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;含义&lt;/a&gt;，包括 ionium（锾元素）的缩写、以古代宙斯的情人命名的木星卫星，以及得名于印度洋的互联网顶级域名。我们也注意到 io 是 Ino（奥德赛中的人名）的另一种拼法，Ino 给了 Odysseus（奥德赛中的人名）一个神奇的面纱，让他在五级海洋风暴中顺利航行。Istio 不正是那件法器吗？&lt;/p&gt;
&lt;p&gt;最后说明一下：Istio 并不是首字母缩写，但如果一定要说它代表着什么，也许会是 “I Secure, Then I Observe”（我保护，我观察），或者 &amp;ldquo;I’m Sexy To Infrastructure Operators.&amp;quot;（我对基础设施运营商富有吸引力）。&lt;/p&gt;
&lt;p&gt;语言学家 Efthymia Lixourgioti 为 Istio 项目的取名提供了希腊语翻译和词源学的咨询。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio 官方文档翻译活动</title>
      <link>https://cloudnative.to/community/sig/istio/istio-doc-translation/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/community/sig/istio/istio-doc-translation/</guid>
      <description>&lt;p&gt;在此之前，Istio 官方文档已经进行了两轮中文翻译活动，第一轮是在 2018 年，基于 Istio 0.8，第二轮是在 2020 年，基于 Istio 1.5，截止目前 Istio 已发布了 1.9 版本，Istio 中文文档已经有长达一年的时间疏于维护，现在云原生社区 Istio SIG 决定重启中文文档的维护。&lt;/p&gt;
&lt;h2 id=&#34;常用链接&#34;&gt;常用链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Istio 中文文档地址：&lt;a href=&#34;https://istio.io/zh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://istio.io/zh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;登记及任务认领表：&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1ihJTww4q1FArD50TerRLyi210LD64gHTIEQM43dBwb0/edit?usp=sharing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Spreadsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Istio 官网 GitHub 仓库：&lt;a href=&#34;https://github.com/istio/istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/istio/istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;负责人&#34;&gt;负责人&lt;/h2&gt;
&lt;p&gt;下面是云原生社区 Istio Doc WG 的负责人：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rootsongjc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宋净超（@rootsongjc）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kebe7jun&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;刘齐均（@kebe7jun）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/loverto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;殷龙飞（@loverto）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SataQiu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;邱世达（@SataQiu）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xunzhuo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;刘训灼（@Xunzhuo）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在参与过程中有任何问题可以与他们联系。&lt;/p&gt;
&lt;h2 id=&#34;如何参与&#34;&gt;如何参与&lt;/h2&gt;
&lt;p&gt;本次活动由云原生社区 Istio Doc WG 主办，参与活动需要你准备以下内容。&lt;/p&gt;
&lt;h3 id=&#34;准备-github&#34;&gt;准备 GitHub&lt;/h3&gt;
&lt;p&gt;你需要一个 GitHub 账号，翻译文档需要通过 GitHub 提交 PR，需要你熟悉 Git 命令和 GitHub 的基本操作；&lt;/p&gt;
&lt;h3 id=&#34;登记和任务认领&#34;&gt;登记和任务认领&lt;/h3&gt;
&lt;p&gt;报名参与和认领任务都在 &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1ihJTww4q1FArD50TerRLyi210LD64gHTIEQM43dBwb0/edit?usp=sharing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Spreadsheet&lt;/a&gt; 中（&lt;strong&gt;请务必在表格中登记信息&lt;/strong&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;翻译流程&#34;&gt;翻译流程&lt;/h2&gt;
&lt;p&gt;在你完成登记和认领任务之后就可以开始翻译了，下面是翻译流程。&lt;/p&gt;
&lt;h3 id=&#34;构建本地环境&#34;&gt;构建本地环境&lt;/h3&gt;
&lt;p&gt;在克隆了 &lt;a href=&#34;https://github.com/istio/istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档的仓库&lt;/a&gt;后，有两种方式可以将 Istio 的网站在本地运行起来。&lt;/p&gt;
&lt;h4 id=&#34;通过本地运行-hugo-启动&#34;&gt;通过本地运行 hugo 启动&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; 提供了一个本地的 web 服务器，可以启动网站。如果您本地没有安装 hugo，可以去&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;查看如何安装。&lt;/p&gt;
&lt;p&gt;然后，在 Istio.io 仓库的&lt;a href=&#34;https://github.com/istio/istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;根目录&lt;/a&gt;下，运行 &lt;code&gt;hugo server&lt;/code&gt; 在本地启动 web 服务器，通过 &lt;code&gt;http://localhost:1313/latest/zh&lt;/code&gt; 进行中文网站的预览。如看到类似下面的输出，则表示 web 服务器已经启动成功：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;                   | EN  | ZH
+------------------+-----+-----+
  Pages            | 545 | 545
  Paginator pages  |   0 |   0
  Non-page files   | 164 | 164
  Static files     |  54 |  54
  Processed images |   0 |   0
  Aliases          |   1 |   0
  Sitemaps         |   2 |   1
  Cleaned          |   0 |   0

Total in 47355 ms
Watching for changes in /work/{archetypes,assets,content,data,generated,i18n,layouts,static}
Watching for config changes in /work/config.toml
Environment: &amp;#34;development&amp;#34;
Serving pages from memory
Web Server is available at http://localhost:1313/ (bind address 0.0.0.0)
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;通过-docker-启动&#34;&gt;通过 Docker 启动&lt;/h4&gt;
&lt;p&gt;另外一种是直接使用 Docker 镜像启动。&lt;/p&gt;
&lt;p&gt;在正确安装 Docker 后，运行下面的命令下载镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull gcr.io/istio-testing/build-tools:master-2021-04-12T17-40-14
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您的网络环境无法访问此资源，可以执行下面的命令下载镜像的镜像：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull jimmysong/istio-testing-build-tools:master-2021-04-12T17-40-14
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker tag jimmysong/istio-testing-build-tools:master-2021-04-12T17-40-14 gcr.io/build-tools:master-2021-04-12T17-40-14
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在 &lt;a href=&#34;https://github.com/istio/istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio.io 仓库的根目录&lt;/a&gt;下，执行下面的命令启动 web 服务：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;make serve 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启动成功后通过 &lt;code&gt;http://localhost:1313/latest/zh&lt;/code&gt; 进行网站的预览。&lt;/p&gt;
&lt;p&gt;如果你想通过局域网访问该页面，可以将 &lt;code&gt;Makefile.core.mk&lt;/code&gt; 文件中的 &lt;code&gt;ISTIO_SERVE_DOMAIN ?= localhost&lt;/code&gt; 修改为 &lt;code&gt;ISTIO_SERVE_DOMAIN ?= 局域网 IP&lt;/code&gt;，然后再启动 web 服务：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;make serve 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这可以让局域网中的其它计算机访问该页面（以及物理机访问虚拟机），注意：不要将该文件的改动提交至 PR。&lt;/p&gt;
&lt;p&gt;启动成功后通过 &lt;code&gt;http://局域网 IP:1313/latest/zh&lt;/code&gt; 进行网站的预览。&lt;/p&gt;
&lt;h3 id=&#34;提交-pr&#34;&gt;提交 PR&lt;/h3&gt;
&lt;p&gt;如果检查通过，就可以向 &lt;a href=&#34;https://github.com/istio/istio.github.io/pulls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 官方网站提交 PR&lt;/a&gt;，PR 被合并后就可以通过 &lt;a href=&#34;https://preliminary.istio.io/zh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 网站预览页面&lt;/a&gt;看到被合并后的页面。为方便管理和辨识，请遵守下面的模板定义您的 PR：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;标题：
zh-translation:&amp;lt;file_full_path&amp;gt;
内容：
ref: https://github.com/servicemesher/istio-official-translation/issues/&amp;lt;issueID&amp;gt;
[ ] Configuration Infrastructure
[x] Docs
[ ] Installation
[ ] Networking
[ ] Performance and Scalability
[ ] Policies and Telemetry
[ ] Security
[ ] Test and Release
[ ] User Experience
[ ] Developer Infrastructure
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，标题中的 &amp;lt;file_full_path&amp;gt; 是翻译的源文件路径；内容中的 ref 是当前翻译任务的 issue 链接。&lt;/p&gt;
&lt;h3 id=&#34;校对&#34;&gt;校对&lt;/h3&gt;
&lt;p&gt;校对工作由没有翻译过当前文档的其他翻译人员执行，即翻译人员互为校对人员。为保证质量，我们设置了两轮 Review：&lt;/p&gt;
&lt;p&gt;所有翻译人员互为校对人员，分配一个翻译任务同时要确定校对任务；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初审：负责对翻译的内容和原文较为精细的进行对比，保证语句通顺，无明显翻译错误；&lt;/li&gt;
&lt;li&gt;终审：负责对翻译的文档做概要性的检查，聚焦在行文的通顺性、一致性、符合中文语言习惯，词汇、术语准确。终审通过后由管理员 approve 当前 PR，就可以进行合并了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;review-的基本流程&#34;&gt;Review 的基本流程&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;认领 Review&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新提交的 PR 每天会在协作群发布，供大家认领；&lt;/li&gt;
&lt;li&gt;进入要认领的 PR，回复 /review，并在 &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1ihJTww4q1FArD50TerRLyi210LD64gHTIEQM43dBwb0/edit?usp=sharing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Spreadsheet&lt;/a&gt; 对应的任务中登记 reviewer；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Review 重点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开 PR 提交的中文翻译，并找到对应 issue 中指定的源文件，逐段进行走查；&lt;/li&gt;
&lt;li&gt;词汇检查：检查译文中出现的术语、常用词汇是否遵照了术语表的要求进行翻译；&lt;/li&gt;
&lt;li&gt;格式检查：对照原文，检查译文中的标题和层次是否对应；代码块是否指定了语言；标点符号是否正确且无英文标点；超链接、图片链接是否可达；是否有错别字；&lt;/li&gt;
&lt;li&gt;语句检查：分段落通读一遍，检查是否有不通顺、语病、或者不符合中文习惯的译文（啰嗦、重复、过多的助词等）&lt;/li&gt;
&lt;li&gt;提交 comment：根据发现的问题，在 PR 提交文件的对应行添加 comment，格式为&lt;code&gt;原译文=&amp;gt;修改后译文&lt;/code&gt;；不确定的地方可加建议或询问，或发到协作群求助。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;更新任务表&#34;&gt;更新任务表&lt;/h3&gt;
&lt;p&gt;通过终审后的任务会被负责人 approve，并合并到 Istio 的官方仓库中。需要您在 &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1ihJTww4q1FArD50TerRLyi210LD64gHTIEQM43dBwb0/edit?usp=sharing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Spreadsheet&lt;/a&gt; 的任务列表中更新所认领的任务的状态。整个翻译任务就算正式完成了。您可以继续领取新的任务进行翻译，或参与校对工作。&lt;/p&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;h4 id=&#34;初次使用-hugo-启动找不到静态资源问题&#34;&gt;初次使用 hugo 启动找不到静态资源问题&lt;/h4&gt;
&lt;p&gt;初次使用 &lt;code&gt;hugo server&lt;/code&gt; 在本地启动 web 服务，web 页面会出现如下问题，找不到静态资源。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Failed to load resource: the server responded with a status of 404 (Not Found)
Refused to apply style from &amp;#39;http://localhost:1313/css/all.css&amp;#39; because its MIME type (&amp;#39;text/plain&amp;#39;) is not a supported stylesheet MIME type, and strict MIME checking is enabled.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在项目根目录下执行 &lt;code&gt;sh scripts/build_site.sh&lt;/code&gt; 命令，即可生成所需静态文件。但是这种方式需要安装比较多 &lt;code&gt;node&lt;/code&gt; 的命令行工具，例如：&lt;code&gt;sass&lt;/code&gt;、&lt;code&gt;tsc&lt;/code&gt;、&lt;code&gt;babel&lt;/code&gt;、&lt;code&gt;svgstore&lt;/code&gt;，安装起来比较繁琐。&lt;/li&gt;
&lt;li&gt;这里建议首次可以采用 &lt;code&gt;docker&lt;/code&gt; 方式启动，参考 docker 启动教程，在 Istio &lt;a href=&#34;https://github.com/istio/istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网站仓库的根目录&lt;/a&gt;运行 &lt;code&gt;make serve&lt;/code&gt; 启动，如果您的网络环境无法访问此资源，请使用 &lt;code&gt;make serve IMG=jimmysong/istio-testing-build-tools:master-2021-03-01T22-30-49&lt;/code&gt; 命令，启动时 docker 镜像会在项目目录中生成 &lt;code&gt;generated&lt;/code&gt;、&lt;code&gt;tmp&lt;/code&gt; 和 &lt;code&gt;resources&lt;/code&gt; 静态资源目录。&lt;/li&gt;
&lt;li&gt;在初次生成静态资源目录后，就可以正常使用 &lt;code&gt;hugo server&lt;/code&gt; 来启动项目了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;定义的锚点报拼写错误&#34;&gt;定义的锚点报拼写错误&lt;/h4&gt;
&lt;p&gt;给标题添加的锚点完全和官方英文的一致，报类似如下错误：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-错误截图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/e6c9d24ely1go5rvst4d0j21he0p8tec.jpg&#34; alt=&#34;错误截图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      错误截图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;主要的原因是在对于这些专有名词在&lt;code&gt;.spelling&lt;/code&gt; 文件中只定义了大写而没有定义小写导致。此时，请参考上文锚点规范书写锚点。&lt;/p&gt;
&lt;h4 id=&#34;ci-deploynetlify-报错&#34;&gt;CI deploy/netlify 报错&lt;/h4&gt;
&lt;p&gt;本地 make serve 没问题，但官方的 deploy/netlify 报如下错误：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;10:07:37 AM: added 35 packages from 9 contributors and audited 43 packages in 1.553s
10:07:37 AM: found 0 vulnerabilities
10:07:41 AM: TypeError: Cannot set property inList of [object Object] which has only a getter
10:07:41 AM:     at PluginPass.exit (/opt/build/repo/node_modules/babel-plugin-minify-simplify/lib/index.js:549:40)
10:07:41 AM:     at newFn (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/visitors.js:179:21)
10:07:41 AM:     at NodePath._call (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/path/context.js:55:20)
10:07:41 AM:     at NodePath.call (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/path/context.js:42:17)
10:07:41 AM:     at NodePath.visit (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/path/context.js:99:8)
10:07:41 AM:     at TraversalContext.visitQueue (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/context.js:112:16)
10:07:41 AM:     at TraversalContext.visitSingle (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/context.js:84:19)
10:07:41 AM:     at TraversalContext.visit (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/context.js:140:19)
10:07:41 AM:     at Function.traverse.node (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/index.js:84:17)
10:07:41 AM:     at NodePath.visit (/opt/buildhome/.nvm/versions/node/v12.8.0/lib/node_modules/@babel/core/node_modules/@babel/traverse/lib/path/context.js:97:18)
10:07:41 AM: Makefile.core.mk:49: recipe for target &amp;#39;netlify&amp;#39; failed
10:07:41 AM: make: *** [netlify] Error 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是官方的一个 &lt;a href=&#34;https://github.com/istio/istio.io/pull/5379&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bug&lt;/a&gt;，已经解决。&lt;/p&gt;
&lt;h4 id=&#34;cla-检测不通过&#34;&gt;CLA 检测不通过&lt;/h4&gt;
&lt;p&gt;如果你在设置 cla 之前提交了 PR，CI 里的 cla check 会失败。可以先在 PR 中回复 &lt;code&gt;@googlebot I signed it.&lt;/code&gt;。如果还失败尝试回复 &lt;code&gt;@googlebot I fixed it.&lt;/code&gt;。如果还不行，所以最好的办法是关闭当前 PR，重新用一个新的 branch 拷贝相应文件，再提交全新的 PR 即可。&lt;/p&gt;
&lt;h4 id=&#34;error-unexpected-end-tag--p&#34;&gt;ERROR: Unexpected end tag : p&lt;/h4&gt;
&lt;p&gt;如果遇到此错误，说明还没有完全修复 markdown 的 lint 问题。需要先修复完即可通过 CI 检查。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio 大咖说</title>
      <link>https://cloudnative.to/community/sig/istio/istio-big-talk/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/community/sig/istio/istio-big-talk/</guid>
      <description>&lt;p&gt;《Istio 大咖说》是由企业级服务网格提供商 &lt;a href=&#34;https://tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt; 冠名的以 &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 和服务网格为主题的在全球性直播节目《&lt;a href=&#34;https://github.com/tetratelabs/istio-weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Weekly&lt;/a&gt;》的一部分。《Istio 大咖说》旨在分享 Istio 相关的开源技术及实践，开播于 Istio 开源四周年之际（2021 年 5 月 25 日），本节目定期邀请 Istio 和服务网格领域的专家参加直播与观众互动。&lt;/p&gt;
&lt;h2 id=&#34;资源&#34;&gt;资源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直播间地址：&lt;a href=&#34;https://live.bilibili.com/23095515&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bilibili - 《Istio 大咖说》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;历史视频回看：&lt;a href=&#34;https://space.bilibili.com/1698576814&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bilibili - IstioServiceMesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;幻灯片归档地址：&lt;a href=&#34;https://github.com/tetratelabs/istio-weekly/blob/main/istio-big-talk/playlist.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第一期-istio-开源四周年回顾与展望&#34;&gt;第一期: Istio 开源四周年回顾与展望&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;时间：2021 年 5 月 25 日晚 8 点&lt;/li&gt;
&lt;li&gt;嘉宾：马若飞（FreeWheel）&lt;/li&gt;
&lt;li&gt;嘉宾介绍：《Istio 实战指南》作者、极客时间《Service Mesh 实战》专栏作者、AWS Container Hero&lt;/li&gt;
&lt;li&gt;视频回放：&lt;a href=&#34;https://www.bilibili.com/video/BV1jK4y1R7Tk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Istio 大咖说》第 1 期：Istio 开源四周年回顾与展望&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想了解 Istio 的来历吗？想知道 Istio 自我救赎般的架构重构吗？想窥探 Istio 开发背后的趣事吗？想一起解读最新版本的新特性吗？北京时间 5 月 25 日晚上 8 点，相约 B 站，让我们一起回顾 Istio 发布四周年的点点滴滴，&lt;a href=&#34;https://live.bilibili.com/23095515&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B 站直播间&lt;/a&gt;不见不散！&lt;/p&gt;
&lt;h2 id=&#34;第二期从微服务架构到-istio-架构升级实践分享&#34;&gt;第二期：从微服务架构到 Istio ——架构升级实践分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;时间：2021 年 6 月 2 日晚 8 点&lt;/li&gt;
&lt;li&gt;嘉宾：潘天颖（小电科技）&lt;/li&gt;
&lt;li&gt;嘉宾介绍：小电科技工程师，云原生爱好者，Kubernetes contributor，Apache committer。&lt;/li&gt;
&lt;li&gt;视频回放：https://www.bilibili.com/video/BV1QQ4y1X7hP/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;云原生赛场已经进入了下半场的比拼，Istio 作为服务网格赛道上的明星选手，社区活跃度和用户知名度都位列前茅。但是国内环境下 Istio 的落地实践却并不多。是什么阻碍了 Istio 的落地，到底 Istio 好不好用？到底什么情况下使用 Istio 利大于弊？本次我们将站在企业用户角度上，邀请了潘天颖分享 Istio 在小电科技的完整落地经验，讲述为什么要从传统微服务架构迁移至服务网格架构，其中遇到的困难与解决方法，以及针对 Istio 的改进方案。&lt;/p&gt;
&lt;h3 id=&#34;问答&#34;&gt;问答&lt;/h3&gt;
&lt;p&gt;请问刚参加工作的应届生，工作涉及istio中的envoy，请问应届生应该如何提前学习Envoy？&lt;/p&gt;
&lt;p&gt;答：需要多了解下网络知识，还有云原生社区的Envoy中文文档可以学习，也可以参加社区的翻译活动。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在 service 特别多的时候，比如几万个 service，sidecar 是否会占用过多内存？如果是的话，可以有什么解决思路？&lt;/p&gt;
&lt;p&gt;答：可以通过将应用按业务组进行分组，将相互依赖的应用分开部署到不同的namespace中，然后配置sidecar配置进行配置收拢，使应用只关心特定namespace中的服务配置，个别服务通过网关调用。毕竟很难有应用会依赖几万个svc的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我们想上Istio，请教下有什么坑？Istio1.10版本。建议上吗？架构为 SpringCloud。&lt;/p&gt;
&lt;p&gt;答：本次分享应该回答了问题，这里很难回答。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;请问针对使用dubbo框架开发的应用来说，上Istio有什么建议？老师对aeraki这个项目怎么看？Istio对于支持dubbo以及其它协议这块有什么好的支持方式？&lt;/p&gt;
&lt;p&gt;答：可以考虑升级下dubbo 3.0.0，istio目前已经支持dubbo协议，但是由于dubbo数据包attachment在整个数据体的最后，反序列化成本较高，需要关注下性能。还有一点是一般dubbo服务sdk比较难去掉，和 Istio功能重合太大了。不太了解aeraki这个项目。社区可以邀请项目的人来分享。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;IRA开源吗？&lt;/p&gt;
&lt;p&gt;答：这个服务通过istio的configController机制完成，代码量不大，目前还没开源。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Mesh外的服务怎么访问Mesh内的服务？走Mesh的Ingess gateway 吗？&lt;/p&gt;
&lt;p&gt;答：分享中已经提到，我们通过register-helper sidecar容器，保留了迁移过程中mesh外服务通过注册中心访问网格内服务的能力。完成迁移后可以将该sidecar去掉。当然网格外的服务通过ingress也是能够访问网格内的服务的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;请问接入Istio需要开发介入什么操作变更，当前架构为Spring Cloud，注册中心为nacos/eureka，95%应用在Kubernetes上，现在需要用到流量控制，ingress gateway，熔断，限流等功能。&lt;/p&gt;
&lt;p&gt;答：如果迁移设计的比较完美，其实可以做到开发零介入。比如我们的实践，大多数java服务只需要引入一个java jar包就可以。这个包中你可以将原来java服务底层的register sdk屏蔽，并且去除loadbalace逻辑，保留上层的接口。减少开发的接入成本，也方便Istio的推广。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;上网格后springcloud consumer是否需要手动修改每个provider地址为Kubernetes service name?&lt;/p&gt;
&lt;p&gt;答：这个建议是要替换的。但是有很多比较优雅的方式，详细见分享。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;能分享下目前用wasm主要做了哪些事么？稳定性和性能方面怎么样？&lt;/p&gt;
&lt;p&gt;答：对流量打标处理，方便后续进行route分发。由于是使用在sidecar而不是ingress上，性能上面并没有问题。稳定性需要使用者来保证了，wasm插件切不可出错，否则会影响所有流量。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;目前Istio控制面管理不友好，如果不通过自研方案的话有什么推荐么？yaml方面，目前看没有很好的gui配置。&lt;/p&gt;
&lt;p&gt;答：社区比较主流的有kiali，如果企业支持，可以参考下一些企业支持版的Istio版本，比如&lt;a href=&#34;https://tetrate.io/tetrate-service-bridge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TSB&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;什么样的业务或者场景适合上Istio，运维工程师该注意那些点，是否有很好的方案供参考，运维如何和开发配合完善推进上Istio，我们的业务是支付打款相关的，目前是.Net。&lt;/p&gt;
&lt;p&gt;答：Istio适不适合其实和业务关系不大，和历史技术架构关系比较大。运维工程师和开发接受Istio架构需要比较大的学习成本。如果对这个有信心，那么并没有大问题。至于.Net还是其他语言关系并不大，毕竟Istio是语言无关的。&lt;/p&gt;
&lt;h2 id=&#34;第三期如何让-istio-变得更为高效和智能&#34;&gt;第三期：如何让 Istio 变得更为高效和智能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;时间：6 月 9 日（星期三）晚 8 点 - 9 点&lt;/li&gt;
&lt;li&gt;嘉宾：杨笛航（网易数帆）&lt;/li&gt;
&lt;li&gt;话题：如何让 Istio 变得更为高效和智能&lt;/li&gt;
&lt;li&gt;直播回放：https://www.bilibili.com/video/BV18o4y1y75e/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;讲师简介&#34;&gt;讲师简介&lt;/h3&gt;
&lt;p&gt;杨笛航，Istio 社区成员，网易数帆架构师，负责网易轻舟 Service Mesh 配置管理，并主导 Slime 组件设计与研发，参与网易严选和网易传媒的 Service Mesh 建设。具有三年 Istio 控制面功能拓展和性能优化经验。&lt;/p&gt;
&lt;p&gt;Istio 作为当前最火的 Service Mesh 框架，既有大厂背书，也有优秀的设计，及活跃的社区。但是随着 Mixer 组件的移除，我们无法通过扩展 mixer adapter 的方式实现高阶的流量管理功能，Istio 的接口扩展性成为亟待解决的问题。本次直播将分享本次分享将介绍网易自研的智能网格管理器 Slime，借助它，我们实现了配置懒加载，自适应限流，HTTP 插件管理等扩展功能，从而更为高效的使用 Istio。&lt;/p&gt;
&lt;h3 id=&#34;问答-1&#34;&gt;问答&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Slime 兼容什么版本的 Istio？&lt;/p&gt;
&lt;p&gt;答：1.3 以后的版本都可以，网易内部使用 1.3 和 1.7 版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请问对于 Slime 的懒加载功能，在初始的时候是否可能存在 “冷启动”（刚开始 fence 里的服务较少，大多数依赖如果需要从兜底路由拉取需两次代理）。a) 能不能在刚开始的时候在 fence 里把所有 service 都写上（相当于配置信息全量下发），每次被调用到的服务放到 fence 的前面，等几轮全量下发配置之后将 fence 里排在后面的 service，类似于 LRU 算法）删除，这样可不可以减少两次代理的次数。b) 或者在开始前分析最近的流量关系，得到一个初始的 fence 状态。&lt;/p&gt;
&lt;p&gt;答：a) 可以在 fence 里手动配置，也可以当做 SidecarScope 资源来用，例如已经确定了 a 到 b 的调用关系，那么可以使用如下配置作为 a 的 servicefence：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;microservice.netease.com/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceFence&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;b.test1.svc.cluster.local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;stable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;b) 可以有类似的做法，例如可以开启配置懒加载在测试环境运行一段时间，得到 fence 的初始状态然后放到线上环境去使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果想给 Istio 添加更多的负载均衡策略，能否通过添加 CRD 的方式，或者通过 wasm 拓展 envoy？&lt;/p&gt;
&lt;p&gt;答：Slime 主要是做控制平面的扩展，负载均衡策略可能要通过 Envoy 来扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有什么办法能让两个服务均在网格之中，但在他们双发调用时流量不经过 proxy 而直接访问？&lt;/p&gt;
&lt;p&gt;答：动态修改 iptables。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;协议：有什么办法能实现满足支持其他 RPC 协议，如 thrift 和其他私有 RPC？&lt;/p&gt;
&lt;p&gt;答：Envoy 已经支持 Thrift 和 Dubbo 协议，但是不能比较好的路由和流量管理，可以研究下开源项目 Aeraki。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写 SmartLimiter CRD 时，ratelimite 是如何渲染成 EnvoyFilter 的，在数据面要做些什么工作？&lt;/p&gt;
&lt;p&gt;答：EnvoyFilter 的作用是将某一段配置插入到 xds 中的某块位置，实现 ratelimite 的功能就是要把 ratelimite 的相关配置插入到 rds 中 host 级别 /route 级别的 perfilterconfig 中。因而我们可以基于一个固定的模版去渲染 EnvoyFilter。目前自适应限流是基于 envoy 官方的限流插件的，不需要数据面做额外的工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第一次访问为什么会走到 global sidecar？&lt;/p&gt;
&lt;p&gt;答：第一次访问还没有服务依赖拓扑，调用者没用被调用者的服务发现和路由信息，需要 global sidecar 作为兜底代理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EnvoyFilter 有执行顺序吗，比如设置了 RequestAuthentication 和 AuthorizationPolicy，在 filter 里面有执行顺序吗？&lt;/p&gt;
&lt;p&gt;答：LDS 中的插件次序就是执行顺序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sidecar 和 应用容器的启动顺序，一定是 sidecar 先启动吗？&lt;/p&gt;
&lt;p&gt;答：在安装时开启 holdApplicationUntilProxyStarts 可以确保 sidecar 容器先启动（Istio 1.7 +）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第四期如何让-istio-在大规模生产环境落地&#34;&gt;第四期：如何让 Istio 在大规模生产环境落地&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分享时间：2021 年 6 月 23 日（周三）晚 8 点到 9 点&lt;/li&gt;
&lt;li&gt;议题名称：如何让 Istio 在大规模生产环境落地&lt;/li&gt;
&lt;li&gt;分享嘉宾：陈鹏（百度）&lt;/li&gt;
&lt;li&gt;回放地址：https://www.bilibili.com/video/BV18M4y1u76t/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;讲师简介-1&#34;&gt;讲师简介&lt;/h3&gt;
&lt;p&gt;陈鹏，百度研发工程师，现就职于百度基础架构部云原生团队，主导和参与了服务网格在百度内部多个核心业务的大规模落地，对云原生、Service Mesh、Isito 等方向有深入的研究和实践经验。&lt;/p&gt;
&lt;h3 id=&#34;分享大纲&#34;&gt;分享大纲&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;百度服务治理现状 &amp;amp; Istio 落地挑战&lt;/li&gt;
&lt;li&gt;深入解读如何让 Isito 在大规模生产环境落地&lt;/li&gt;
&lt;li&gt;实践经验总结 &amp;amp; 思考&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过本次分享你将了解当前 Isito 落地的困境和解决思路。&lt;/p&gt;
&lt;h3 id=&#34;问答-2&#34;&gt;问答&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;请问，Istio 组件，包括数据面和控制面发生故障时，有哪些快速 fallback 的方案，之前阅读了大佬的相关文章，这块好像没有细讲，谢谢！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相对来说， 数据面 fallback 更重要一些，因为它直接接流量。最好是能结合流量劫持环节，让 sidecar 故障时，系统能自动感知到，流量自动 fallback 到直连模式，具体思路可以参考分享内容，其次 sidecar 的监控也是必要的，用来辅助感知和处理故障。控制面故障短时间内不会对流量转发造成影响，也可以通过部署多副本来应对故障。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有些服务 QoS 想设置 guaranteed，但是 istio 的 sidecar 不是 request 和 litmit 一样的。要 guaranteed 的话必须 sidecar 的 QoS 相关配置也要改。你们是怎么做的？如果改，建议设置为多少？感谢大佬！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们通常 sidecar 内存 limit 200M，cpu limit 是业务的 10% 到 20%，但我觉得这个没有通用的参考数据，需要结合业务场景压测拿到数据，更为科学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你好。作为业务方的技术负责人，被中间件团队推动上 Istio，目前带来的收益主要是服务治理方向的。从业务迭代效率的角度看，上 Istio 的增量收益抵不上迁移成本的代价；另外还降低了业务方工作的技术含量。请问有没有实践中，业务方在 Mesh 化的过程中获得显著收益的例子？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不能只关注 mesh 自身的能力，还要深入了解业务，最好是能挖掘业务最痛点的问题，比如原有框架治理能力比较弱，或者可视化能力弱，或者变更效率低等，业务最痛点的问题对于 mesh 来说可能是普通的能力，但却会给业务线带来很大的提升。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么没有采用 mcp over xds 的方案？ 而是独立搭建了 API server 和 etcd？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;api server + etcd 可以比较容易的独立部署，能复用尽量复用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pilot 的多业务方案是怎么做的？ 如果是多个 pilot 的话，那独立的 Kubernetes API server 和 etcd 也要多个么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们目前的实践是 api server + etcd 是一套，pilot 根据业务线多套，当然 api server + etcd 也可以是多套，可以根据系统性能以及数据隔离等需求灵活部署。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy 的 brpc 改造方案，会考虑开源么？ 怎么 follow 后续社区 Envoy 的最新代码呢&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;brpc 本身也是开源的，Envoy 只是做了集成。社区版本更新很快，具体多久更新一次其实很难抉择，需要考虑架构升级成本，以及社区版本的成熟度，这块我也没有太好的建议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内部的 mesh 方案，考虑通过百度云的方式对外输出么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一些高级策略能力会逐步输出到公有云产品。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随着 istio 新版本的不断发布，内部使用的版本是否跟进了开源新版本，跟进社区版本升级有什么经验分享？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同上，社区版本更新很快，具体多久更新一次其实很难抉择，需要考虑架构升级成本，以及社区版本的成熟度，这块需要结合团队现实情况考虑升级时机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy filter 管理麻烦的话，nshead、dubbo 等多协议支持是怎么实现的？在 pilot 中是如何管理的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们内部是直接在 pilot 内部实现支持，类似于 http 的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入两个 sidecar 后问题定位的成本和难度会大福增加，这块有什么经验可以分享&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一方面 Envoy 自身提供了丰富的接口，可以暴露内部很多的状态，另一方面也需要和自有监控基础设施对接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sidecar 带来的额外成本问题谁来买单？业务认可吗&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个其实需要和业务团队明确，额外的资源成本是需要业务买单的，但对于内部业务，具体的成本可以比较低，业务普遍是能接受的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sidecar 可以使用的的资源配额是怎么分配管理的，动态的还是静态的，有什么经验&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同的业务场景可能不太一样，内存大概在几百 M，CPU 一般是是业务的 10% 到 20%，但最好是要根据业务场景进行压测，得到数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sidecar 的监控是怎么做的？ 权限，成本方面可能都有一些疑问&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Envoy 本身会暴露自身指标，对接相关的监控即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Naming 这个 agent 和框架非常不错，请问 Naming 可以支持负载均衡么， 也就是 PodX 访问 PodY 的时候，naming 不要返回 PodY 真实 IP，而是返回负载均衡的 VIP 给 PodX; 十分感谢 - Ken&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前没有这么做，直接返回了 Envoy 的 loopback ip 来做流量劫持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这种架构的话，PodX 主动出公网的逻辑是怎样的呢，也是通过 ip-masq 做 NAT 吗？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前主要做内网服务的 mesh，这块没有太多经验，十分抱歉～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Naming agent 是部署在哪个容器？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是一个主机部署一个的单机 agent，工作在主机网络上的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pliot 在落地过程中部署模型，大规模 Envoy 注册后，是否存在一些性能瓶颈，有什么优化的经验？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以增加 pilot 的副本数，来应对大规模 Envoy 的链接，另外控制面处理逻辑也有很多可以优化的地方，来优化从 API server 拿到数据之后的计算过程，这部分需要对 pilot 代码有一定开发经验和熟悉程度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虽然老师不一定有关注这一块，但也提个问题看看吧。 Envoy 流量劫持是在 userSpace 还要经 TCP 协议栈其实损耗非常大的，后续 Envoy 有考虑 byPass Kernel，直接传包给网卡驱动提速么（例如 DPDK、SPDK）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个一方面要考虑成本问题，比如内核和硬件是否满足，另一方面也要评估收益，比如流量劫持这一部分虽然优化了，但是缩减的耗时对于整个请求链路的占比是否足够明显。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量都经过 sidecar 后，sidecar 在 trace 这方面是怎么考虑和设计的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Envoy 本身支持 trace 相关的功能，这块其实是需要业务 sdk 中来进行支持，必须要透传 trace 相关的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于 inbound 流量的限流是如何设计的呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以使用 EnvoyFilter CRD，给被调用方 inbound listener 插入 LocalRateLimiter 对应的 filter 来实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私有协议如果要变更的时候，是不是要级联更新？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;抱歉，这个问题没太看明白～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持服务治理的配置灰度下发吗？可以简单说下实现方案吗&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内部其实是实现了，方案比较复杂，简单来说就是控制面自己控制 xds 下发，会先挑选部分实例生效，然后再给全部实例下发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你们 内部对于 istio deployment 里的 version 字段在落地时有大规模使用吗？我们最近在基于 istio 做灰度发布，但是每次灰度都要给他一个版本号，导致完成之后 deployment 名称就从 v1 变成 v2 以此累加，这样还会导致 deployment 本身的回滚功能失效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我理解是不是只需要 v1 和 v2 就够了，先灰度给 v1，没问题的话 v2 也生效，这时候 v1 和 v2 策略就打平了。下次恢复依然还是这个流程，好像不需要一直叠加版本好吧，不确定我理解的对不对～&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy 对于我司来说技术储备其实不是很够， 请问贵司刚上线的时候， Envoy 有没有遇到哪些问题。 特别是稳定性和故障方面。 如果能建议一下 Envoy 应该如何监控，那就 perfect.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Envoy 本身比较复杂，上线初期一定会遇到问题，最好是能结合流量劫持方案，做到 Envoy 故障自动 fallback，思路可以参考分享内容。监控的话，Envoy 自身会暴露 stats 接口，比较容易接入监控系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于 dubbo 的泛化调用，探针会实时检测调用关系的变化么？如果 sidecar 还没有被生成，这个时候流量请求阻塞怎么处理呢？一直等待还是直接拒绝？如果服务是新的请求呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;泛化调用这种比较灵活的方式，我们目前也没有很好的支持，一个思路是可以提前手动配置好调用关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;link 模型解决 xDS 问题，可以再详细介绍一下整个逻辑链路么？例如 consumer 和 provider 的 link 数据是怎么获得的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前内部大规模落地的方案中，是需要用户在产品上显示定义的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2ms 的 Envoy 额外消耗，请问是怎么查看的呢？curl endpoint 跟 curl Envoy 做一次对比么&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官方的测试方法没有详细研究过，自己测试的话，可以用经过 Envoy 和 没经过 Envoy 的耗时 diff，也可以在程序里打点来看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy 注入后业务 pod 会存在 2 个 container， 那么 Envoy 的配额是怎么限制的呢？ 比如限制 4 核心可能就是 2 个容器（1 个 pod）里面的配额了；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以参见上面的回答&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就是我们在落地的时候，会遇到部分服务有 sidecar，部分没有 (服务 A 会被其他 10 个服务调用)，一般如何去判断配置设置在哪里，是在 outbound（其他 10 个服务部署 sidecar）处还是 inbound 处（服务 A 部署 sidecar）。这个有没有什么比较好的实践？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个需要结合流量劫持方案，做到有 sidecar 就过 sidecar，没有就走直连，具体思路可以参考分享内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy 如何实现长连接的动态开关的？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个问题比较好，我们是通过让 Envoy 重新生成一个 listener，更改了 listen 的地址，让调用 Enovy 的 SDK 感知到，并重新链接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第五期腾讯云服务网格生产落地最佳实践&#34;&gt;第五期：腾讯云服务网格生产落地最佳实践&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分享时间：2021 年 6 月 30 日（周三）晚 8 点到 9 点&lt;/li&gt;
&lt;li&gt;议题名称：腾讯云服务网格生产落地最佳实践&lt;/li&gt;
&lt;li&gt;分享嘉宾：钟华（腾讯云）&lt;/li&gt;
&lt;li&gt;回放地址：https://www.bilibili.com/video/BV1th411h7Zr/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;讲师简介-2&#34;&gt;讲师简介&lt;/h3&gt;
&lt;p&gt;钟华，腾讯云高级工程师，Istio contributor，Dapr contributor, Tencent Cloud Mesh 技术负责人。专注于容器和服务网格，在容器化、服务网格生产落地和性能调优方面具有丰富经验。&lt;/p&gt;
&lt;p&gt;通过本次分享了解大规模场景下，Istio 性能调优和最佳实践，包括 xDS 懒加载，控制面负载平衡，控制面灰度升级，Ingress gateway 优化等。&lt;/p&gt;
&lt;h3 id=&#34;分享大纲-1&#34;&gt;分享大纲&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Istio 生产落地挑战&lt;/li&gt;
&lt;li&gt;腾讯云服务网格全托管架构介绍&lt;/li&gt;
&lt;li&gt;大规模服务网格性能优化&lt;/li&gt;
&lt;li&gt;Istio 生产落地最佳实践&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;问答-3&#34;&gt;问答&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Istio 的 gateway 对比 ambassador 的差异在哪？是否在 Istio 的基础上增加 api 网关这一层？增加后能填补哪些缺陷？&lt;/p&gt;
&lt;p&gt;答：Ambassador 本身也是基于 envoy 之上的一个云原生网关产品， 本身包括控制平面；api gateway 范畴包括一些 Istio ingress gateway 不具备的功能，比如 api 生命周期管理，api 计费，限速，监控，认证等。所以 api gateway 本身有存在的必要，不过 API Gateway 需求中很大一部分需要根据不同的应用系统进行定制。&lt;/p&gt;
&lt;p&gt;我们有客户将 kong， openresty 等 api gateway 和 Istio ingress gateway 结合起来用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于多集群 Istio 部署了解到架构图如下所示，由单个控制平面管控所有集群，这里如果有 k8s 集群间网络不通，pod 与 pilot 交互链路是？&lt;/p&gt;
&lt;p&gt;答：数据面 k8s 间不互通，不会影响 控制面和数据面的通信。&lt;/p&gt;
&lt;p&gt;Istio 多集群的前提是：多 k8s 之间要互通，可以是 pod 扁平互通，或者通过 Istio gateway 互通。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Istio Envoy Sidecar 使用 iptables 劫持流量，一定规模环境下性能损耗较大，排障复杂，很多大厂都是自研 Envoy，比如蚂蚁金服、新浪、腾讯、华为等，自研的 Envoy 是使用什么来劫持流量呢，亦或者说自研的 envoy 解决了原生的 envoy 哪些缺陷呢？&lt;/p&gt;
&lt;p&gt;答：常见的有三种：&lt;/p&gt;
&lt;p&gt;1）uds：数据包不过协议栈，性能高，但只适合私有 mesh，因为需要应用面向 uds 编程。不适合公有云。比如美团，字节在使用这种方案。&lt;/p&gt;
&lt;p&gt;2）localhost+port：使用 port 代表不同的服务，通常需要拦截服务发现流量，再重新规划服务到端口映射，有一定管理成本，比如百度在使用这种方案。&lt;/p&gt;
&lt;p&gt;3）ebpf：在内核 socket ops 挂载 ebpf 程序，应用流量和 envoy 流量在 这个互通，流量不经过协议栈，性能高，对用户透明，但技术门槛高，对内核有版本要求。目前腾讯云 TCM 在小范围推广。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;长连接的情景下懒加载又是如何实现的？Workload 流量如何重定向到 egress，通过 passthrough？&lt;/p&gt;
&lt;p&gt;1）目前 lazy xds 对长连接没有特殊处理，用户需要权衡一下，首跳长连接性能 vs 数据面内存开销，以此决定是否使用长连接，大家如果对长连接 lazy xds 有想法，欢迎联系我。&lt;/p&gt;
&lt;p&gt;2）没有走 passthrough，请看 lazyxds 架构图上第二步，是会给 workload 2 下发具体的重定向规则，也就是指明哪些服务流量要到 lazy egress。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;钟老师您好， Istio 属于较新的技术，能否推荐一下监控应该怎么做， 或具体监控哪些指标？ 另外，下图步骤 10， Istiod 更新的时候是全量所有 workload 都更新吗， 还是只更新 wordload1 ?&lt;/p&gt;
&lt;p&gt;1）mesh 监控包括三个方面：metric, tracing，logging, TCM 技术选型偏云原生：metric 使用 prometheus, tracing 使用 jaeger collector， logging 是自研的技术。另外也用到了腾讯云上的监控服务。&lt;/p&gt;
&lt;p&gt;2）只更新 workload1，注意架构图上的第八，sidecar 里会指定具体的 workload。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Istio 目前的性能优化有什么实践经验吗&lt;/p&gt;
&lt;p&gt;答：TCM 团队之前在 kubeconf 上有数据面性能分享，请参考：&lt;a href=&#34;https://cloud.tencent.com/developer/article/1685873&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入了解服务网格数据平面性能和调优&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请问 isitod 的稳定性有什么实践经验可以分享吗，failback，failover 容错机制是怎么实现的？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本次分享包括 2 个 Istiod 稳定性实践：如何保证 Istiod 负载平衡，如何对 Istiod 做灰度升级&lt;/li&gt;
&lt;li&gt;数据面 failback，failover 本身是 envoy 的能力，Istio 会给 eds 设置 priority， 这个值表示和当前 pod 的亲和度（地域和区域），（如果开启就近访问）服务访问会优先访问 priority 为 0 的 endpoint， 如果为 0 的 endpoint 都失效了，访问会 failover 到 priority 为 1 的 endpoint，接下来是 priority 为 2 的，逐级失效转移。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Istio 与已有的基础设施 (注册中心等) 如何整合，是使用 mcp 还是 k8s api server 实现&lt;/p&gt;
&lt;p&gt;答：之前我们尝试过 mcp，不过比较难调试，目前我们更推荐使用扩展 service entry 方式，参考我们开源的 &lt;a href=&#34;https://github.com/aeraki-framework/dubbo2istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dubbo2istio&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/aeraki-framework/consul2istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;consul2istio&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TKE 注入 sidecar pod 会从 1 个容器升级为 2 个容器，请问 pod 对集群内其他 pod 访问的链路是怎么走的呢？ 20:28 说到控制面板资源 HPA 后依然会紧张，能否建议下 ISTIOD 的资源应该如何设计么， 比如 n 个 pod 对应 1 个 Istiod。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;client 业务容器 -&amp;gt;client pod iptables-&amp;gt;client envoy （将 service ip 转成 pod ip） -&amp;gt; node (iptables 不做 service nat 了) -&amp;gt; server pod iptables-&amp;gt; server envoy -&amp;gt; server 业务容器&lt;/li&gt;
&lt;li&gt;需要结合业务做压测，通常建议可以把 request 设小一点，把 limit 设大一点。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isito 的部署模型是怎么样的？是每个业务部署一个 isitod 集群，还是多个业务共享？&lt;/p&gt;
&lt;p&gt;答：TCM 托管场景下，每个 mesh 有一个 Istiod。Istiod 按照 namespace 隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;namespace 是如何划分的，是按照业务来划分吗？&lt;/p&gt;
&lt;p&gt;答：TCM 场景下，是的，通过 namespace 隔离多租户的控制面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Istio 使用 envoyFilter 做限流，可以在 inbound 上根据 url 前缀匹配或者接口级别的维度做限流么？目前看只能在 outbound 上引用 virtualService 里面的配置，inbound 只能限制总流量。&lt;/p&gt;
&lt;p&gt;答：目前社区应该不支持 url 级别的限流，需要自研。这个需求是刚需，我们可以一起调研下解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CRD 托管的原理能详细介绍下吗？&lt;/p&gt;
&lt;p&gt;答：核心使用的是 kubernetes aggregation 技术，把 Istio CRD 作为 kubernetes 的外部扩展。&lt;/p&gt;
&lt;p&gt;当用户读写 Istio crd 时， api server 会将流量路由到我们指定的外部服务，我们这外部服务实现了 crd 的托管。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy 如何做热更新？怎么在容器内注入新版本的 Envoy？&lt;/p&gt;
&lt;p&gt;答：热更新核心是通过 UDS（UNIX Domain Socket），可以参考下 openkruise 解决方案，不过该方案只能解决仅有镜像版本变化的更新，对于 yaml 变化太大的更新，目前不好处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;业务容器已经启动接收流量了，而 envoy 还没完成 eds 的下发，出现流量损失？Istio 是否会出现这种情况？&lt;/p&gt;
&lt;p&gt;答：会的，所以需要遵循 make before break，核心原因在于：目前 Istio 实现中，没法知道 规则下发是否完全生效。&lt;/p&gt;
&lt;p&gt;目前的姑息办法是 make before break + 等待一定时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何支持 &lt;code&gt;subdomain-*.domain.com&lt;/code&gt; 这样的 host 规则？Envoy 是不支持的，有没有方法可以扩展&lt;/p&gt;
&lt;p&gt;答：目前的确不支持，建议去社区提 issue，参与共建。不过 Istio 的 header match 支持正则，可以尝试使用 host header，或者 authority 属性，需要验证一下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Istio 可否实现类似于 dubbo 服务的 warmup 机制，动态调整新注册 pod 的流量权重由低到正常值？ZPerling&lt;/p&gt;
&lt;p&gt;答：Envoy 社区有提案，目前没有完成：&lt;a href=&#34;https://github.com/envoyproxy/envoy/issues/11050&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue #11050&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/envoyproxy/envoy/pull/13176&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue 13176&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mysql 和 mq 可以做版本流量控制吗？他们的流量识别怎么做呢？&lt;/p&gt;
&lt;p&gt;答：目前不行，这是 Istio 的软肋，envoy mysql filter 功能比较基础，关注下 Dapr 这个项目。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原来的 SpringCloud 项目 服务注册发现 &amp;amp; 配置中心用的 consul，如果切换 Istio 的话，服务发现和配置中心要怎么支持？&lt;/p&gt;
&lt;p&gt;答：注册发现考虑下 &lt;a href=&#34;https://github.com/aeraki-framework/consul2istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;consul2istio&lt;/a&gt;，另外 SpringCloud 组件可能需要做一些减法，去掉一些 Istio 支持的流控能力组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SpringCloud 项目 通过 K8s 集群部署，切换到 Istio，原来业务依赖的中间件通信方式需要改变？原本的流量如果直接切换到 Istio 风险较高，有没有一键下掉 Istio 的开关或者这种机制：降低有问题流量降级切换到原来的部署架构？&lt;/p&gt;
&lt;p&gt;1）可能改变的通信方式：主要是服务发现过程改变。Istio 支持透明接入，通常中间件的通信方式不会受影响。&lt;/p&gt;
&lt;p&gt;2）这个能力的确会给刚开始 mesh 化的业务带来信心，开源 Istio 没有这个能力，参考之前百度陈鹏的分享。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 traefik 作为边缘代理，Istio 来管理服务内部的流量。traefik 转发策略是直连 pod，而不是走 k8s 的 service，如何使用 Istio 来管理到达服务的流量？&lt;/p&gt;
&lt;p&gt;答：抱歉我对 traefik 并不熟悉，不过大概看了这篇&lt;a href=&#34;https://cloudnative.to/blog/using-traefik-ingress-controller-with-istio-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Istio 服务网格中使用 Traefik Ingress Controller&lt;/a&gt;，流量从 traefik 出来是经过了 envoy，在这里应该还可以做服务治理，后面我再研究下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目前 Istio 版本缺失限流功能，这部分要怎么支持？&lt;/p&gt;
&lt;p&gt;答：目前 Istio 支持 local 和 global 两种方式，不过 local 无法多 pod 共享限频次数，global 性能可能不一定满足用户需求。&lt;/p&gt;
&lt;p&gt;目前社区应该不支持 url 级别的限流，需要自研。这个需求是刚需，我们可以一起调研下解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现有 K8S 集群业务切换到腾讯云 Istio 部署需要做哪些操作？成本高？&lt;/p&gt;
&lt;p&gt;答：看当前业务的技术特征，如果是 http、grpc+ k8s 服务发现，迁移成本比较低，如果有私有协议，会有一定难度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是一套 k8s 对应一套 Istio，还是一套 Istio 对应多个 k8s 集群？多集群是怎么做的？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主要看业务需求，如果有跨集群业务互访，或者跨集群容灾，就可以考虑使用 Istio 多集群方案。&lt;/li&gt;
&lt;li&gt;多集群实现可以参考我之前的分享：&lt;a href=&#34;https://zhonghua.io/2019/07/29/istio-analysis-5/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 庖丁解牛 (五) 多集群网格实现分析&lt;/a&gt; 和 &lt;a href=&#34;https://zhonghua.io/2019/08/01/istio-analysis-6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio 庖丁解牛 (六) 多集群网格应用场景&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Istio 下的服务限流方案？&lt;/p&gt;
&lt;p&gt;答：目前支持 local 和 global 两种方式，参考 &lt;a href=&#34;https://istio.io/latest/docs/tasks/policy-enforcement/rate-limit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Enabling Rate Limits using Envoy&lt;/a&gt;，另外网易 slime 中有动态的限流方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Istio 到现在都不支持 path rewrite 的正则，这块是否有一些社区的方案支持，因为这个策略在实际的业务中还是很常见的&lt;/p&gt;
&lt;p&gt;答：目前的确不支持，建议去社区提 issue，参与共建。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多网络单控制平面的情况下，从集群如果没有某服务的 Pod 的话，该集群其他 Pod 通过域名访问主集群 pod 的话从集群必须有空的 svc 吗，有其他什么方案实现吗 智能 dns 方案成熟了吗？Pilot Agent 不是有 DNS Proxy 么&lt;/p&gt;
&lt;p&gt;答：Istio 1.8 提供的 智能 DNS 可以解决这个问题，1.8 里有 bug， 1.9 修复了，目前我们有生产客户在用了，目前看起来生产可用，可以尝试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切换到 istio, 原来业务依赖的中间件通信方式需要改变？MySQL Redis Consul Kafka&lt;/p&gt;
&lt;p&gt;答：Istio 对 db mesh 支持功能不多，通信方式不需要改变。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐使用哪个版本的 Istio？&lt;/p&gt;
&lt;p&gt;答：建议使用次新版本，比如现在 1.10 发布了，建议使用 1.9；未来 1.11 发布了，就要着手升级到 1.10。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第六期envoy-proxy-在线答疑&#34;&gt;第六期：Envoy Proxy 在线答疑&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分享时间：2021 年 8 月 3 日（周二）中午 12:30 到 14:00&lt;/li&gt;
&lt;li&gt;议题名称：Envoy Proxy 在线答疑&lt;/li&gt;
&lt;li&gt;分享嘉宾：周礼赞（Tetrate）&lt;/li&gt;
&lt;li&gt;回放地址：https://www.bilibili.com/video/BV1d64y1x7yn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们在过去两个月内已经陆续举办了 5 期《&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649385244&amp;amp;idx=1&amp;amp;sn=c03da04686c82d75a62c214f851da48b&amp;amp;chksm=f224e373c5536a655f5f7270da8ed66f3f92d55f9a3a92d26125d14699fd40e3112db397cedf&amp;amp;scene=21#wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 大咖说&lt;/a&gt;》，直播过程中很多观众反馈想要了解下 Envoy，有很多关于 Envoy 的问题却没有人可以来解答，而 Envoy 作为 Istio 中默认的数据平面，可以说如果你搞懂了 Envoy 就算把 Istio 搞懂 80%了。这次我们邀请了来自企业级服务网格提供商 Tetrate 公司的周礼赞，他是 Envoy 的核心 maintainer，之前也在云原生社区中分享过一次&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzI1NTE2NDE2MA==&amp;amp;mid=2649383202&amp;amp;idx=1&amp;amp;sn=aec41575106a2b039900b0dfe963231e&amp;amp;chksm=f224eb4dc553625bf39d153a55fcc7ce59f25779ca9f8c4d5f7e2b2ae1edd684168c2e041301&amp;amp;scene=21#wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《云原生学院第 17 期：Envoy 调试流量的常用技巧》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;第七期基于-envoyistio-的云原生-api-网关--开源项目-hango-的设计与实现&#34;&gt;第七期：基于 Envoy/Istio 的云原生 API 网关 —— 开源项目 Hango 的设计与实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分享时间：2021 年 8 月 25 日（周三）晚上 8:00 到 9:00&lt;/li&gt;
&lt;li&gt;议题名称：基于 Envoy/Istio 的云原生 API 网关 —— 开源项目 Hango 的设计与实现&lt;/li&gt;
&lt;li&gt;分享嘉宾：韩佳浩（网易轻舟）&lt;/li&gt;
&lt;li&gt;回放地址：https://www.bilibili.com/video/BV1YL411b7e6/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;讲师简介-3&#34;&gt;讲师简介&lt;/h3&gt;
&lt;p&gt;韩佳浩，网易数帆资深研发工程师，主导 Hango 网关开源研发及设计，负责网易数帆轻舟 API 网关集团内部大规模落地及产品化建设。具有三年网关相关研发及大规模实践经验。&lt;/p&gt;
&lt;h3 id=&#34;话题介绍&#34;&gt;话题介绍&lt;/h3&gt;
&lt;p&gt;云原生架构演进下，更多的业务着重于 API 的统一暴露，API 网关便成为 API 统一接入的必备组件。本次分享主要从云原生概念出发，探讨云原生模式下 API 网关的选型之道；介绍网易研发的高性能、可扩展，功能丰富的云原生 API 网关 Hango 的设计之道以及落地实践。&lt;/p&gt;
&lt;h3 id=&#34;问答-4&#34;&gt;问答&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Envoy体系学习图谱，现在是整体文档都看完有用到时再翻文档&lt;/p&gt;
&lt;p&gt;答：可以关注社区动态，学习思路路线上可以根据自己想对 Envoy了解的程度按照以下线路进行：了解 Envoy 基本架构 -&amp;gt; 使用 Envoy 常用特性 -&amp;gt; 尝试扩展 envoy -&amp;gt; 对 Envoy 做深度定制，另外 Tetrate 即将推出免费的 Envoy 教程，敬请关注。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hango项目与网易轻舟项目是什么关系？开源版么？&lt;/p&gt;
&lt;p&gt;答：网易轻舟项目包含轻舟微服务、轻舟API网关、轻舟容器等产品，轻舟API网关是Hango项目的商业版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ingress Controller与API Management是否有必要合为一个产品？ 就是 k8s 资源，意思两个产品位置是否需要合一？&lt;/p&gt;
&lt;p&gt;答：具体需要看网关的定位，如果作为微服务网关的话，不建议合为一个产品；如果承担ingress功能，可以合一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 Envoy 以网关的形式和以 Sidecar 的形式做服务治理有什么区别，使用场景分别是什么呢？以网关的形式做东西南北向流量的服务治理的方案可行吗？&lt;/p&gt;
&lt;p&gt;答：网关主要做南北流量治理；Sidecar承担集群东西流量治理。在大规模场景下，不建议网关作为东西流量治理；服务调用关系简单，API规模有限可以。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hango必须配合Istio一起使用吗？&lt;/p&gt;
&lt;p&gt;答：推荐使用Istio, 仅单独使用网关数据面丧失网关动态配置能力，自身静态配置复杂度也大大提高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接问题5，如果是可以独立使用，在k8s内额外创建一个网关，这个网关目的是什么，这在集群内服务之间互访的时候等于破坏了Kubernetes本身的svc特性，consumer服务找这个网关所注册的服务？能否举例一个具体的场景。&lt;/p&gt;
&lt;p&gt;答：不推荐独立使用，网关的功能对外统一暴露集群内API。网关暴露的意义，一部分是代理，另一部分是丰富的治理功能以及多维度的指标监控。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加载 Lua后性能有下降吗？&lt;/p&gt;
&lt;p&gt;答：简单的插件，性能基本在20%损失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边缘网关有哪些场景？看到ppt里有写，但是没有讲。&lt;/p&gt;
&lt;p&gt;答：类似集群中的统一API暴露，只是不需要额外的用户配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能没太看懂，9wqps是几台机器？几c？&lt;/p&gt;
&lt;p&gt;答：容器：8c8g 物理机：56c256g&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lua 怎么保证脚本安全？隔离性怎么样？写个while true 会不会把整个网关搞崩？&lt;/p&gt;
&lt;p&gt;答：lua的插件链的异常不会导致主线程crash，异常后跳过逻辑，执行之后的插件链。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大规模场景下，踩过哪些坑&lt;/p&gt;
&lt;p&gt;答：升级的平滑度以及线上规模的预估。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以认为是在Istio gateway + virtualservice的一个升级版么？ 是不是用了这个网关我就可以不用Istio gateway了？&lt;/p&gt;
&lt;p&gt;答：是的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第七期基于-envoyistio-的云原生-api-网关开源项目-hango-的设计与实现&#34;&gt;第七期：基于 Envoy/Istio 的云原生 API 网关——开源项目 Hango 的设计与实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分享时间：2021 年 8 月 25 日（周三）晚上 8:00 到 9:00&lt;/li&gt;
&lt;li&gt;议题名称：基于 Envoy/Istio 的云原生 API 网关 —— 开源项目 Hango 的设计与实现&lt;/li&gt;
&lt;li&gt;分享嘉宾：韩佳浩（网易轻舟）&lt;/li&gt;
&lt;li&gt;回放地址：https://www.bilibili.com/video/BV1YL411b7e6/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;讲师简介-4&#34;&gt;讲师简介&lt;/h3&gt;
&lt;p&gt;韩佳浩，网易数帆资深研发工程师，主导 Hango 网关开源研发及设计，负责网易数帆轻舟 API 网关集团内部大规模落地及产品化建设。具有三年网关相关研&lt;/p&gt;
&lt;h3 id=&#34;话题介绍-1&#34;&gt;话题介绍&lt;/h3&gt;
&lt;p&gt;云原生架构演进下，更多的业务着重于 API 的统一暴露，API 网关便成为 API 统一接入的必备组件。本次分享主要从云原生概念出发，探讨云原生模式下 API 网关的选型之道；介绍网易研发的高性能、可扩展，功能丰富的云原生 API 网关 Hango 的设计之道以及落地实践。&lt;/p&gt;
&lt;h3 id=&#34;问答-5&#34;&gt;问答&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Envoy体系学习图谱，现在是整体文档都看完有用到时再翻文档&lt;/p&gt;
&lt;p&gt;答：可以关注社区动态，学习思路路线上可以根据自己想对 Envoy了解的程度按照以下线路进行：了解 Envoy 基本架构 -&amp;gt; 使用 Envoy 常用特性 -&amp;gt; 尝试扩展 envoy -&amp;gt; 对 Envoy 做深度定制，另外 Tetrate 即将推出免费的 Envoy 教程，敬请关注。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hango项目与网易轻舟项目是什么关系？开源版么？&lt;/p&gt;
&lt;p&gt;答：网易轻舟项目包含轻舟微服务、轻舟API网关、轻舟容器等产品，轻舟API网关是Hango项目的商业版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ingress Controller与API Management是否有必要合为一个产品？ 就是 k8s 资源，意思两个产品位置是否需要合一？&lt;/p&gt;
&lt;p&gt;答：具体需要看网关的定位，如果作为微服务网关的话，不建议合为一个产品；如果承担ingress功能，可以合一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 Envoy 以网关的形式和以 Sidecar 的形式做服务治理有什么区别，使用场景分别是什么呢？以网关的形式做东西南北向流量的服务治理的方案可行吗？&lt;/p&gt;
&lt;p&gt;答：网关主要做南北流量治理；Sidecar承担集群东西流量治理。在大规模场景下，不建议网关作为东西流量治理；服务调用关系简单，API规模有限可以。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hango必须配合Istio一起使用吗？&lt;/p&gt;
&lt;p&gt;答：推荐使用Istio, 仅单独使用网关数据面丧失网关动态配置能力，自身静态配置复杂度也大大提高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接问题5，如果是可以独立使用，在k8s内额外创建一个网关，这个网关目的是什么，这在集群内服务之间互访的时候等于破坏了Kubernetes本身的svc特性，consumer服务找这个网关所注册的服务？能否举例一个具体的场景。&lt;/p&gt;
&lt;p&gt;答：不推荐独立使用，网关的功能对外统一暴露集群内API。网关暴露的意义，一部分是代理，另一部分是丰富的治理功能以及多维度的指标监控。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加载 Lua后性能有下降吗？&lt;/p&gt;
&lt;p&gt;答：简单的插件，性能基本在20%损失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边缘网关有哪些场景？看到ppt里有写，但是没有讲。&lt;/p&gt;
&lt;p&gt;答：类似集群中的统一API暴露，只是不需要额外的用户配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能没太看懂，9wqps是几台机器？几c？&lt;/p&gt;
&lt;p&gt;答：容器：8c8g 物理机：56c256g&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lua 怎么保证脚本安全？隔离性怎么样？写个while true 会不会把整个网关搞崩？&lt;/p&gt;
&lt;p&gt;答：lua的插件链的异常不会导致主线程crash，异常后跳过逻辑，执行之后的插件链。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大规模场景下，踩过哪些坑&lt;/p&gt;
&lt;p&gt;答：升级的平滑度以及线上规模的预估。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以认为是在Istio gateway + virtualservice的一个升级版么？ 是不是用了这个网关我就可以不用Istio gateway了？&lt;/p&gt;
&lt;p&gt;答：是的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第八期小红书服务网格大规模落地实践&#34;&gt;第八期：小红书服务网格大规模落地实践&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;分享时间：2021 年 11 月 9 日（周二）晚上 8:00 到 9:30&lt;/li&gt;
&lt;li&gt;议题名称：小红书服务网格大规模落地经验分享&lt;/li&gt;
&lt;li&gt;分享嘉宾：贾建云（小红书）&lt;/li&gt;
&lt;li&gt;回放地址：https://www.bilibili.com/video/BV12b4y187ae/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;讲师简介-5&#34;&gt;讲师简介&lt;/h3&gt;
&lt;p&gt;贾建云，小红书 Kubernetes 云原生工程师，负责小红书服务网格相关工作。主导设计了小红书服务网格落地方案，对于大规模服务网格落地、调优有丰富的经验。&lt;/p&gt;
&lt;h3 id=&#34;话题介绍-2&#34;&gt;话题介绍&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;小红书基于 Istio 的服务网格方案和架构设计&lt;/li&gt;
&lt;li&gt;小红书对于 Pilot、Envoy 做的特性增强&lt;/li&gt;
&lt;li&gt;小红书落地服务网格碰到的性能/Bug 问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;听众收获&#34;&gt;听众收获&lt;/h3&gt;
&lt;p&gt;了解小红书服务网格关于流量拦截、thrift 协议、懒加载等做的特性增强，同时了解在大规模落地服务网格过程中碰到的控制面性能问题，以及 ServiceEntry 场景下 pilot 存在的 Bug。&lt;/p&gt;
&lt;h3 id=&#34;问答-6&#34;&gt;问答&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我们在落地Istio 中碰到一个坑是 envoy 的 connection idleTime 和各种语言的 keepalive 时间不同，在大量使用长连接（http1.1）的情况下，可能会出现客户端用现有的长连接发起请求，但是服务端连接刚好超时回收了，导致会有部分请求 503（报错是 connection reset），在 Istio 社区也看到了这类的 issue，但是都没发现一个合适的解决方案。Istio 默认内置的重试条件中不包括 connection reset 这种情况，可能是害怕对非幂等请求的重试。不知道小红书内部有没有类似的问题？&lt;/p&gt;
&lt;p&gt;答：这个问题可以参考Envoy官网关于超时时间设置的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.17.1/faq/configuration/timeouts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最佳实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy是否考虑降级，以应对envoy异常时跳过sidecar直接访问服务，不知道是否有类似经验？&lt;/p&gt;
&lt;p&gt;答：我们目前是通过监听实际端口来做流量拦截的，这样当出现问题之后我们会让sdk把流量切换到中央sidecar。这种流量回滚方式与我们的流量拦截方式强相关，同时也对sdk有一定入侵，可以看一下小红书关于流量拦截方案的介绍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xds 和 eds 分开会不会有数据不一致的问题？&lt;/p&gt;
&lt;p&gt;答：不会有问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有没有使用webassembly开发扩展？&lt;/p&gt;
&lt;p&gt;答：小红书暂时没有使用wasm，扩展是直接开发envoy filter。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置灰度下发解决思路是什么？&lt;/p&gt;
&lt;p&gt;答：跟我们sidecar灰度升级的思路比较一致，通过创建cluster/ns/service粒度的升级任务，由pilot决定配置要下发给哪些sidecar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy引入brpc是替换了Envoy哪些部分？&lt;/p&gt;
&lt;p&gt;答：不算事替换吧，是想做到自由切换线程模型，引入bthread。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚机服务（通过域名+nginx+tomcat）如何解决服务网格的灰度上线？&lt;/p&gt;
&lt;p&gt;答：虚拟机跟pod应该是一样的，通过创建dr维护版本信息，然后配置流量配比。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手动维护服务依赖的话还算懒加载吗？&lt;/p&gt;
&lt;p&gt;答：严格意义上面不算了。但是本质上都是为了做服务可见性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;懒加载中hosts依赖的serviceEntry信息是不是依然要全局envoy下发？&lt;/p&gt;
&lt;p&gt;答：特定服务的所有实例/流控配置是全量的，这个跟pilot实现有关，目前社区的新版本已经在开发增量推送了，可以关注一下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不拦截入流量的话要做 inbound 的策略怎么办？&lt;/p&gt;
&lt;p&gt;答：原生的方案inbound本身也没有什么流量治理的特性，就是流量转发，所以我们不担心不拦截inbound会有流量治理能力的缺失。主要是担心可观察性会有影响，目前期望通过SDK补齐丢失的指标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对 Istio multi-tenancy有支持增强吗？&lt;/p&gt;
&lt;p&gt;答：小红书内部对多租户没有什么诉求，这个应该是公有云比较关心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thrift Proxy 的路由变化后会导致重建 Listener，线上业务可以接受客户端存量链接在路由规则变化后被断开吗？&lt;/p&gt;
&lt;p&gt;答：目前业务方可以接受，我们是告知过这个事情的。另外就是社区已经有envoy thrift filter支持rds的pr，合并到主干之后我们会升级，届时就没有问题了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用的下游过多的情况下，端口的冲突怎么解决？&lt;/p&gt;
&lt;p&gt;答：端口不会冲突，一个Pod内部依赖的服务不会重复，每个服务都有唯一的端口。但是主机网络会存在端口冲突的情况，目前我们的方案就是让用户改为非主机网络。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;懒加载中serviceEntry+sidecar中如何支持按照route等方式配置http路由信息，就像virtualserver中支持的httproute功能？&lt;/p&gt;
&lt;p&gt;答：使用serviceEntry+sidecar不影响vs等的使用。两个东西没有太大关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;老师提到了小红书用到了开源项目 Aeraki 来管理 Thrift 协议，请问这部分后续的开源计划？&lt;/p&gt;
&lt;p&gt;答：后续会有团队小伙伴小红书分享关于aeraki做的扩展，但是应该不会合并到aeraki，内容偏小红书定制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流量拦截中还是用到了iptables(tproxy)模式，性能上会不会依然受影响？&lt;/p&gt;
&lt;p&gt;答：会有影响的，但是用了tproxy模式会好一些。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有没有Envoy数据面性能的参考数据，总体上和业务容器的平均占比会是怎样的，cpu 和内存呢？&lt;/p&gt;
&lt;p&gt;答：按照我们内部一个业务的压测，单跳Envoy延迟增加2ms。Envoy大概占用0.5核，300m左右内存。后续我们会压测高QPS业务，届时我再补充数据。整体来看配置了懒加载envoy资源吃的不多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;灰度下发的方案，不同sidecar配置的diff是保存在那个地方？&lt;/p&gt;
&lt;p&gt;答：存储在mysql。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Istio 通过 virtualservice 做灰度的话，基于流量比例的灰度无法做到 session sticky，这个有最佳实践吗？&lt;/p&gt;
&lt;p&gt;答：这个没有。目前小红书的灰度是通过注册中心来实现的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能测试数据如何？&lt;/p&gt;
&lt;p&gt;答：参考问题17。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么不用 service 而用 serviceentry 呀？小红书内部没有使用 k8s service 吗？&lt;/p&gt;
&lt;p&gt;答：小红书内部不用service，而且serviceentry可以支持虚机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;老师能否介绍下小红书的Service Mesh发展到现在的程度，大概是多少人的团队，做了多久？&lt;/p&gt;
&lt;p&gt;答：目前4个人，大概做了半年。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Envoy延迟的长尾情况呢？&lt;/p&gt;
&lt;p&gt;答：还是比较明显的，这个跟Envoy线程模型有关吧。但是引入backuprequest会好很多，来自百度的内部实践。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大佬微信发下？&lt;/p&gt;
&lt;p&gt;答：请加入云原生社区 Istio SIG 交流，大佬在群里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原生 Istio 自动注入会跳过主机模式host的pod？&lt;/p&gt;
&lt;p&gt;答：出于安全考虑 Istio一般也不敢直接在虚机上面拦，比较危险，最好还是不要用主机网络吧。非要用的话只能修改webhook吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大佬服务注册这边是什么方案注册的&lt;/p&gt;
&lt;p&gt;答：公司内部自研的注册中心，细节不太清楚，后续可能有同事分享小红书注册中心。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请问sidecar热升级前后，通过istioctl ps 查看proxy的版本有变化吗？&lt;/p&gt;
&lt;p&gt;答：不会有变化。版本号是我们自己在Envoy开发的api，跟istioctl ps哪个版本没关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
