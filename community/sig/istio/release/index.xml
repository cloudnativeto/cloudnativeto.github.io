<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Istio 版本变更 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/community/sig/istio/release/</link>
      <atom:link href="https://cloudnativecn.com/community/sig/istio/release/index.xml" rel="self" type="application/rss+xml" />
    <description>Istio 版本变更</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 16 Dec 2021 00:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>Istio 版本变更</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/</link>
    </image>
    
    <item>
      <title>Istio 0.1——开启 Service Mesh 的新纪元</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/01/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/01/</guid>
      <description>&lt;p&gt;在用户将应用部署到 Kubernetes 上之后，如何管理容器之间的流量及确保应用的安全性，就成了突出问题，Service Mesh 的出现就是为了解决这一问题。在 Istio 开源之前，市场上只有创业公司 Buoyant 一家的 Service Mesh 产品 &lt;a href=&#34;https://linkerd.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt;，2017 年正值 Kubernetes 赢得容器编排之战，云原生社区中急需找到新的增长点，有人开始叫嚣“Kubernetes is becoming boring”，Service Mesh 开始抬头，Istio 的推出更使得该领域急剧升温。&lt;/p&gt;
&lt;p&gt;2017 年 5 月 24 日，Google、IBM 和 Lyft 发布了 Istio 0.1。Istio 基于 Envoy 构建，在开源之初就确立的链接、保护、控制和观测”&lt;strong&gt;微服务&lt;/strong&gt;”的使命。（注意，“微服务”后来在 Istio 的官网描述中被改成了服务，）该版本&lt;strong&gt;只支持 Kubernetes 环境&lt;/strong&gt;，并计划在接下来的几个月添加诸如虚拟机和 Cloud Foundry 等环境的支持。计划每三个月发布一个大版本。&lt;/p&gt;
&lt;p&gt;该版本发布时仅一个命令行工具 &lt;code&gt;istioctl&lt;/code&gt;，但是它的意义是划时代的，它确立了 Service Mesh 的 sidecar 模式，即在应用容器 pod 中注入一个 proxy 来管理服务间通信，再通过控制平面统一管控这些 sidecar，后续的所有声称为 Service Mesh 的产品都应用了该模式。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/0.x/announcing-0.1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初次了解 Istio - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 0.2——开始支持虚拟机</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/02/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/02/</guid>
      <description>&lt;p&gt;在等待了近 5 个月之久，Istio 0.2 版本终于面世。Istio 从 0.2 版本的发布开始支持虚拟机负载。初步支持将非 Kubernetes 服务（以 VM 或物理机的形式）添加到网格中。这是此功能的早期版本，存在一些限制（例如，要求在容器和 VM 之间建立扁平网络）。&lt;/p&gt;
&lt;p&gt;其他改进主要是关于可用性方面，例如支持 TCP，利用 Kubernetes 的 &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;admission webhook&lt;/a&gt;（alpha 特性）支持自动注入 sidecar，支持自定义 mixer 扩展，支持自定义秘钥和证书给 Istio CA，支持 WebSocket、MongoDB 和 Redis 协议。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/0.x/announcing-0.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布 Istio 0.2——改善网格并支持多种环境 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 0.3——改进发布节奏</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/03/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/03/</guid>
      <description>&lt;p&gt;也许 Istio 团队意识到了从 0.1 到 0.2 版本的发布之间的时间跨度太久（近 5 个月），本次版本发布距离 0.2 版本仅 1 个多月时间，Istio 团队承诺接下来将每月发布一个版本，实际上在接下来的 8 个月里，Istio 一共发布了 6 个版本，基本实现了承诺。&lt;/p&gt;
&lt;p&gt;本次版本发布并没有什么重大更新。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/0.x/announcing-0.3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 0.3 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 0.4——新增平台支持</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/04/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/04/</guid>
      <description>&lt;p&gt;距离上个版本发布仅 2 个多周，无重大更新，主要在平台和安装方式上增加了更多选项。支持 Helm Chart 安装和 Cloud Foundry 平台。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/0.x/announcing-0.4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 0.4 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 0.5——对用户采用更友好</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/05/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/05/</guid>
      <description>&lt;p&gt;该版本主要增强易用性，相对于 Istio 初期一键安装所有组件的情况，现在 Istio 用户渐渐式采用，可以只安装 Istio 的部分组件。Istio 利用 Kubernetes 1.9 及以上版本的 muting webhook 特性，支持自动注入 sidecar。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/0.x/announcing-0.5/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 0.5 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 0.6——常规更新</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/06/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/06/</guid>
      <description>&lt;p&gt;该版本主要是常规更新，无重大变更。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/0.x/announcing-0.6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 0.6 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 0.7——改进测试质量</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/07/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/07/</guid>
      <description>&lt;p&gt;该版本主要改进构建和测试基础架构并提高测试质量，并预告了 0.8 版本的重大更新，且是 API 层面的更新。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/0.x/announcing-0.7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 0.7 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 0.8——1.0 的前奏</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/08/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/08/</guid>
      <description>&lt;p&gt;该版本带来了重大的 API 级别的变更，新引进了 &lt;a href=&#34;https://istio.io/latest/zh/blog/2018/v1alpha3-routing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;v1alpha3 路由 API&lt;/a&gt;，该 API 不向前兼容！确立了沿用至今的 Gateway（新引入，不在支持 ingress、egress 代理）、VirtualService（取代了原先的 RouteRule）、DestinationRule（取代了 DestinationPolicy）、ServiceEntry（取代了 EgressRule）等资源类型。重命名了安全模块，以前的 Istio-Auth 或者 Istio-CA 现在被统称为 Citadel。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/0.x/announcing-0.8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 0.8 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.0——生产就绪</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/10/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/10/</guid>
      <description>&lt;p&gt;2 个月前发布的 0.8 版本已经为 1.0 的发布做好大量的前置工作，经过这 2 个月的时间，0.8 版本的众多 alpha 功能现在变成了 beta，新增了支持将多个 Kubernetes 集群添加到单个 mesh 集群中。&lt;/p&gt;
&lt;p&gt;在此之前社区对于 Istio 的性能质疑声不断，本版本对 Istio 的性能做了大量优化，虽然号称生产就绪，但是此时还没有充足的生产案例。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.0.x/announcing-1.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.0 发布公告——Service Mesh 生产就绪 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.1——企业就绪</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/11/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/11/</guid>
      <description>&lt;p&gt;距离 1.0 版本发布已经过去快 7 个月了，虽然越来越多的公司在生产中使用 Istio，但是一些大型公司在尝试使用 Istio 的过程中，遇到了一些瓶颈。此版本主要是优化性能，新增配置管理组件 Galley，新增了 sidecar 资源，可以更精细地控制附加到命名空间中工作负载的 sidecar 代理的行为。使用 RedHat 开发的 Kiali 替换了 Istio 原先使用的 ServiceGraph 插件。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.1.x/announcing-1.1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.1 发布公告——Service Mesh 生产就绪 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.2——改进发布机制</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/12/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/12/</guid>
      <description>&lt;p&gt;该版本属于常规发布，主要在测试和发布机制上进行了优化，重组了团队，新建了 GitHub Workflow、Source Organization、Testing Methodology 和 Build &amp;amp; Release Automation 团队，以方便度量每个团队的指标。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.2.x/announcing-1.2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.2 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.3——改善用户体验</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/13/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/13/</guid>
      <description>&lt;p&gt;Istio 1.3 主要着重于改善新用户使用 Istio 的体验，包括为 &lt;code&gt;istioctl&lt;/code&gt; 增加更多调试功能，支持更多应用程序，无需任何其他配置。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.3.x/announcing-1.3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.3 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.4——简化 Istio 的使用</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/14/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/14/</guid>
      <description>&lt;p&gt;常规发布，继续致力于改善 Istio 的用户体验，并着重于简化使用方式，提高 Istio 的运行性能。&lt;/p&gt;
&lt;p&gt;新增了 Istio Operator 的安装方式。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.4.x/announcing-1.4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.4 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.5——拥抱变化，回归单体</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/15/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/15/</guid>
      <description>&lt;p&gt;作者：马若飞，审校：罗广明&lt;/p&gt;
&lt;p&gt;Istio 1.5 是一个具有重大变革的版本。长久以来，面对社区对 Istio 的性能和易用性的诟病，Istio 团队终于正视自身的问题，在当前版本中彻底推翻了原有控制平面的架构，完成了重建。正如 &lt;a href=&#34;https://docs.google.com/document/d/1v8BxI07u-mby5f5rCruwF7odSXgb9G8-C9W5hQtSIAg/edit#heading=h.xw1gqgyqs5b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Simplified Istio&lt;/a&gt; 文中所说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复杂是万恶之源，让我们停止焦虑，爱上单体。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Istio 1.5 回归单体，无论架构和使用方式都发生了巨大变化。因此笔者决定对 1.5 的变化内容做深入解读，以便开发者可以更好的理解和学习新版本，为使用和升级提供参考。&lt;/p&gt;
&lt;h2 id=&#34;架构调整&#34;&gt;架构调整&lt;/h2&gt;
&lt;p&gt;这部分主要分析 Istio 1.5 在架构上的调整，这也是该版本最核心的变化。主要包括重建了控制平面，将原有的多个组件整合为一个单体结构 &lt;code&gt;istiod&lt;/code&gt;；同时废弃了被诟病已久的 Mixer 组件。还对是否向后兼容的部分也做了说明，如果你要从 1.4.x 版本升级到 1.5 必须知道这些变化。&lt;/p&gt;
&lt;h3 id=&#34;重建控制平面&#34;&gt;重建控制平面&lt;/h3&gt;
&lt;p&gt;官方使用的是重建（Restructuring）而不是重构（Refactoring）一词，可见其变化之大。在 Istio 1.5 中，控制平面将使用新的部署模式，将原有的各个组件整合在一起。&lt;/p&gt;
&lt;h4 id=&#34;istiod&#34;&gt;Istiod&lt;/h4&gt;
&lt;p&gt;Istio 1.5 中会使用一个全新的部署模式：&lt;code&gt;istiod&lt;/code&gt;。这个组件是控制平面的核心，负责处理配置、证书分发、sidecar 注入等各种功能。&lt;code&gt;istiod&lt;/code&gt; 是新版本中最大的变化，以一个单体组件替代了原有的架构，在降低复杂度和维护难度的同时，也让易用性得到提升。需要注意的一点是，原有的多组件并不是被完全移除，而是在重构后以模块的形式整合在一起组成了 &lt;code&gt;istiod&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;sidecar-注入&#34;&gt;Sidecar 注入&lt;/h4&gt;
&lt;p&gt;以前版本的 sidecar 注入是由 &lt;code&gt;istio-sidecar-injector&lt;/code&gt; webhook 实现的。在新版本中 webhook 保留了下来，但整合进了 &lt;code&gt;istiod&lt;/code&gt; 中，注入逻辑保持不变。&lt;/p&gt;
&lt;h4 id=&#34;galley&#34;&gt;Galley&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;配置验证 - 功能保留，并入 &lt;code&gt;istiod&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;MCP Server - 改为默认关闭。对于大多数用户来说只是一个实现细节。如果确定依赖它，需要部署 &lt;code&gt;istio-galley&lt;/code&gt; 并启动其进程。&lt;/li&gt;
&lt;li&gt;实验特性（例如配置分析）- 也需要部署 &lt;code&gt;istio-galley&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;citadel&#34;&gt;Citadel&lt;/h4&gt;
&lt;p&gt;以前 Citadel 的 2 个功能是生成证书以及 SDS 开启时以 &lt;code&gt;gRPC&lt;/code&gt; 方式向 &lt;code&gt;nodeagent&lt;/code&gt; 提供密钥。1.5 版本中密钥不再写入每个命名空间，只通过 gRPC 提供。这一功能也被并入 &lt;code&gt;istiod&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;sds-节点代理&#34;&gt;SDS 节点代理&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;nodeagent&lt;/code&gt; 被移除。&lt;/p&gt;
&lt;h4 id=&#34;sidecar&#34;&gt;Sidecar&lt;/h4&gt;
&lt;p&gt;以前，sidecar 能以两种方式访问证书：以文件挂载的密钥；SDS。新版本中所有密钥都存在本地运行的 SDS 服务器上。对绝大部分用户来说只需要从 &lt;code&gt;istiod&lt;/code&gt; 中获取。对于自定义 CA 的用户，仍然可以挂载文件密钥，不过仍然由本地 SDS 服务器提供。这意味着证书轮询将不再需要 Envoy 重启。&lt;/p&gt;
&lt;h4 id=&#34;cni&#34;&gt;CNI&lt;/h4&gt;
&lt;p&gt;CNI 没有改变，仍在 &lt;code&gt;istio-cni&lt;/code&gt; 中。&lt;/p&gt;
&lt;h4 id=&#34;pilot&#34;&gt;Pilot&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;istio-pilot&lt;/code&gt; 的独立组件和进程被移除，由包含了它全部功能的 &lt;code&gt;istiod&lt;/code&gt; 取而代之。为了向后兼容，仍有少许对 Pilot 的引用。&lt;/p&gt;
&lt;h3 id=&#34;废弃-mixer&#34;&gt;废弃 Mixer&lt;/h3&gt;
&lt;p&gt;在 Istio 1.5 中 Mixer 被废弃了。默认情况下 &lt;code&gt;mixer&lt;/code&gt; 完全关闭。遥测的 V2 版本在新版本中是默认特性且不需要 &lt;code&gt;mixer&lt;/code&gt;。如果你对 Mixer 的特殊功能有依赖，比如进程外适配器，需要重新开启 Mixer。Mixer 还会持续修复 bug 和安全漏洞直到 Istio 1.7 版本。&lt;code&gt;mixer&lt;/code&gt; 的许多功能在 &lt;a href=&#34;https://tinyurl.com/mixer-deprecation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mixer Deprecation&lt;/a&gt; 文档中都描述了替代方案，包括基于 Wasm sandbox API 的 &lt;a href=&#34;https://github.com/istio/proxy/tree/master/extensions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in-proxy 扩展&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;新版本中 HTTP 遥测默认基于 in-proxy Stats filter。这节省了 50% 的 CPU 使用量。1.5 中的遥测 V2 和老版本主要有以下几点不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量的来源和目标如果没有注入 sidecar，部分遥测信息将无法收集。&lt;/li&gt;
&lt;li&gt;Egress 遥测不再支持。&lt;/li&gt;
&lt;li&gt;Histogram bucketization 和 V1 版本有很大不同。&lt;/li&gt;
&lt;li&gt;TCP 遥测只支持 mTLS。&lt;/li&gt;
&lt;li&gt;需要更多的 Prometheus 实例来收集所有代理的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果开发者之前使用的是 Istio 默认的 HTTP 遥测，迁移到新版本是没问题的。可以直接通过 &lt;code&gt;istioctl upgrade&lt;/code&gt; 自动升级到 V2。&lt;/p&gt;
&lt;p&gt;最被社区开发者唾弃的 Mixer 终于被废弃，可以说它是影响老版本性能的罪魁祸首。现在皆大欢喜，甚至呼声最高的 Wasm 方案也提上日程。当然我们也能看出 Istio 团队为了保证老版本的升级依赖并没有一刀切的干掉 Mixer，持续修复 bug 到 1.7 版本的深层含义是它会在 1.7 的时候被彻底移除？&lt;/p&gt;
&lt;h3 id=&#34;控制平面安全&#34;&gt;控制平面安全&lt;/h3&gt;
&lt;p&gt;老版本中，当设置了 &lt;code&gt;values.global.controlPlaneSecurityEnabled=true&lt;/code&gt; 时，代理将安全地与控制平面交互，这是 1.4 版本的默认配置。每个控制平面组件都有一个带有 Citadel 证书的 sidecar，代理通过端口 15011 连接到 Pilot。&lt;/p&gt;
&lt;p&gt;新版本中，不再推荐或以默认方式将代理连接到控制平面。作为替代，使用由 Kubernetes 或 Istiod 签发的 DNS 证书。代理通过端口 15012 连接到 Pilot。&lt;/p&gt;
&lt;h2 id=&#34;功能更新&#34;&gt;功能更新&lt;/h2&gt;
&lt;p&gt;Istio 1.5 不仅仅做了减法，也做了很多加法，包括添加了新的功能，性能优化和 Bug 修复。这一部分列举了新版本中在流量管理、安全、遥测等多个功能方面的改进。&lt;/p&gt;
&lt;h3 id=&#34;流量管理&#34;&gt;流量管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提升了 &lt;code&gt;ServiceEntry&lt;/code&gt; 的性能。&lt;/li&gt;
&lt;li&gt;修复了 readiness 探针不一致问题。&lt;/li&gt;
&lt;li&gt;通过定向局部更新的方式改善了配置更新的性能。&lt;/li&gt;
&lt;li&gt;添加了为 host 设置所在负载均衡器设置的选项。&lt;/li&gt;
&lt;li&gt;修复了 Pod 崩溃会触发过度配置推送的问题。&lt;/li&gt;
&lt;li&gt;修复了应用调用自己的问题。&lt;/li&gt;
&lt;li&gt;添加了使用 Istio CNI 时对 &lt;code&gt;iptables&lt;/code&gt; 的探测。&lt;/li&gt;
&lt;li&gt;添加了 &lt;code&gt;consecutive_5xx&lt;/code&gt; 和 &lt;code&gt;gateway_errors&lt;/code&gt; 作为离群值探测选项。&lt;/li&gt;
&lt;li&gt;提升了 &lt;code&gt;EnvoyFilter&lt;/code&gt; 匹配性能优化。&lt;/li&gt;
&lt;li&gt;添加了对 &lt;code&gt;HTTP_PROXY&lt;/code&gt; 协议的支持。&lt;/li&gt;
&lt;li&gt;改进了 &lt;code&gt;iptables&lt;/code&gt; 设置，默认使用 &lt;code&gt;iptables-restore&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;默认开启&lt;a href=&#34;https://istio.io/docs/ops/configuration/traffic-management/protocol-selection/#automatic-protocol-selection-experimental&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动协议探测&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全&#34;&gt;安全&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;添加 Beta 认证 API。新 API 分为 &lt;code&gt;PeerAuthentication&lt;/code&gt; 和 &lt;code&gt;RequestAuthenticaiton&lt;/code&gt;，面向工作负载。&lt;/li&gt;
&lt;li&gt;添加认证策略，支持 deny 操作和语义排除。&lt;/li&gt;
&lt;li&gt;Beta 版本默认开启自动 mTLS。&lt;/li&gt;
&lt;li&gt;稳定版添加 SDS。&lt;/li&gt;
&lt;li&gt;Node agent 和 Pilot agent 合并，移除了 Pod 安全策略的需要，提升了安全性。&lt;/li&gt;
&lt;li&gt;合并 Citadel 证书发放功能到 Pilot。&lt;/li&gt;
&lt;li&gt;支持 Kubernetes &lt;code&gt;first-party-jwt&lt;/code&gt; 作为集群中 CSR 认证的备用 token。&lt;/li&gt;
&lt;li&gt;通过 Istio Agent 向 Prometheus 提供密钥和证书。&lt;/li&gt;
&lt;li&gt;支持 Citadel 提供证书给控制平面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;遥测&#34;&gt;遥测&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为 v2 版本的遥测添加 TCP 协议支持。&lt;/li&gt;
&lt;li&gt;在指标和日志中支持添加 gRPC 响应状态码。&lt;/li&gt;
&lt;li&gt;支持 Istio Canonical Service&lt;/li&gt;
&lt;li&gt;改进 v2 遥测流程的稳定性。&lt;/li&gt;
&lt;li&gt;为 v2 遥测的可配置性提供 alpha 级别的支持。&lt;/li&gt;
&lt;li&gt;支持在 Envoy 节点的元数据中添加 AWS 平台的元数据。&lt;/li&gt;
&lt;li&gt;更新了 Mixer 的 Stackdriver 适配器，以支持可配置的刷新间隔来跟踪数据。&lt;/li&gt;
&lt;li&gt;支持对 Jaeger 插件的 headless 收集服务。&lt;/li&gt;
&lt;li&gt;修复了 &lt;code&gt;kubernetesenv&lt;/code&gt; 适配器以提供对名字中有&lt;code&gt;.&lt;/code&gt;的 Pod 的支持。&lt;/li&gt;
&lt;li&gt;改进了 Fluentd 适配器，在导出的时间戳中提供毫秒级输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;operator&#34;&gt;Operator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;IstioOperator&lt;/code&gt; API 替代了 &lt;code&gt;IstioControlPlane&lt;/code&gt; API。&lt;/li&gt;
&lt;li&gt;添加了 &lt;code&gt;istioctl operator init&lt;/code&gt; 和 &lt;code&gt;istioctl operator remove&lt;/code&gt; 命令。&lt;/li&gt;
&lt;li&gt;添加缓存改善了调和速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;性能和扩展性&#34;&gt;性能和扩展性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为网关生成集群时忽略没用的服务。&lt;/li&gt;
&lt;li&gt;为 headless 服务略过调用 &lt;code&gt;updateEDS&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在 ingress 网关中默认关闭 &lt;code&gt;SNI-DNAT&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;错误覆盖声明。&lt;/li&gt;
&lt;li&gt;容量已知时，基于容量创建切片。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试和发布&#34;&gt;测试和发布&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为 &lt;code&gt;istioctl&lt;/code&gt; 创建了 Docker 镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;istioctl&#34;&gt;istioctl&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;添加 mTLS 分析器。&lt;/li&gt;
&lt;li&gt;添加 JwtAnalyzer。&lt;/li&gt;
&lt;li&gt;添加 ServiceAssociationAnalyzer。&lt;/li&gt;
&lt;li&gt;添加 SercretAnalyaer。&lt;/li&gt;
&lt;li&gt;添加 sidecar ImageAnalyzer。&lt;/li&gt;
&lt;li&gt;添加 PortNameAnalyzer。&lt;/li&gt;
&lt;li&gt;添加 Policy DeprecatedAnalyzer。&lt;/li&gt;
&lt;li&gt;为 &lt;code&gt;RequestAuthentication&lt;/code&gt; 添加了更多的验证规则。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istioctl analyze&lt;/code&gt; 从实验特性转为正式特性。&lt;/li&gt;
&lt;li&gt;添加新标记 &lt;code&gt;-A|--all-namespaces&lt;/code&gt; 给 &lt;code&gt;istioctl analyze&lt;/code&gt;，来分析整个集群。&lt;/li&gt;
&lt;li&gt;添加通过 &lt;code&gt;stdin&lt;/code&gt; 到 &lt;code&gt;istioctl analyze&lt;/code&gt; 的内容分析。&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;istioctl analyze -L&lt;/code&gt; 显示所有可用分析列表。&lt;/li&gt;
&lt;li&gt;添加从 &lt;code&gt;istioctl analyze&lt;/code&gt; 抑制信息的能力。&lt;/li&gt;
&lt;li&gt;为 &lt;code&gt;istioctl analyze&lt;/code&gt; 添加结构化格式选项。&lt;/li&gt;
&lt;li&gt;为 &lt;code&gt;istioctl analyze&lt;/code&gt; 的输出添加对应的文档链接。&lt;/li&gt;
&lt;li&gt;通过 Istio API 在分析器中提供标注方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istioctl analyze&lt;/code&gt; 可以基于目录加载文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istioctl analyze&lt;/code&gt; 尝试将消息与它们的源文件名关联。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istioctl analyze&lt;/code&gt; 可打印命名空间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;istioctl analyze&lt;/code&gt; 默认分析集群内资源。&lt;/li&gt;
&lt;li&gt;修复分析器抑制集群级别资源消息的 bug。&lt;/li&gt;
&lt;li&gt;为 &lt;code&gt;istioctl manifest&lt;/code&gt; 添加多文件支持。&lt;/li&gt;
&lt;li&gt;替换 &lt;code&gt;IstioControlPlane&lt;/code&gt; API 为 &lt;code&gt;IstioOperator&lt;/code&gt; API。&lt;/li&gt;
&lt;li&gt;为 &lt;code&gt;istioctl dashboard&lt;/code&gt; 添加选择器。&lt;/li&gt;
&lt;li&gt;为 &lt;code&gt;istioctl manifest --set&lt;/code&gt; 标记添加切片和列表支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio 1.5 是全面拥抱变化的一个版本。重建整个控制平面，打造了全新的部署模式 &lt;code&gt;istiod&lt;/code&gt;；摒弃了拖累系统性能的 Mixer；保证兼容性也不忘持续优化和引入新的功能。在彻底抛弃历史包袱的同时，Istio 团队也用他们的勇气践行了敏捷开发的真谛。随着稳定的季度发布，相信未来的 Istio 会越加成熟。让我们拭目以待。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.5.x/announcing-1.5/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.5 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.6——迈向极简主义</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/16/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/16/</guid>
      <description>&lt;p&gt;作者：马若飞，审校：罗广明&lt;/p&gt;
&lt;p&gt;从 1.2 版本开始，Istio 进入季度发布的节奏。5 月 21 日发布的 1.6 版本可以说是最准时的一次。我们是否可以理解 Istio 架构简化后的开发工作已经步入了正轨？这次的更新是否会带给我们惊喜？亦或是还有遗憾？让我们一一道来。&lt;/p&gt;
&lt;h2 id=&#34;加法和减法&#34;&gt;加法和减法&lt;/h2&gt;
&lt;p&gt;Istio 1.6 的 Release note 开篇的标题用三个巨大的 Simplify 来表明态度：我们要把极简主义进行到底！其中最大的简化就是将原有组件的功能完全整合入 &lt;strong&gt;Istiod&lt;/strong&gt; ，完成了悟天克斯们的合体过程，让 Istiod 更加完整，也彻底移除了 Citadel、Sidecar Injector 和 Galley。当然，你也可以理解为，这其实是对 1.5 版本未完成工作的收尾。&lt;/p&gt;
&lt;p&gt;第二项简化工作是添加 &lt;code&gt;istioctl install&lt;/code&gt; 命令来替代 &lt;code&gt;manifest apply&lt;/code&gt; 的安装过程，用更直观、更精简的命令改善安装过程的体验。当然，&lt;code&gt;manifest&lt;/code&gt; 子命令依然保留，你还是可以通过清单方式进行部署。在 Change Notes 的三十多项更新中，有七个是&lt;code&gt;removed&lt;/code&gt;，基本上都和安装有关，比如移除已经废弃的 Helm charts、&lt;code&gt;istio-pilot&lt;/code&gt;的配置等。可以看出，Istio 团队在极力的通过优化安装流程和部署形态来提升用户的体验。互联网产品有一个很重要的指标叫留存率，安装过程导致的用户流失是非常不值得的，需要花大力气进行流程的优化和调整。毕竟，第一印象的重要性毋庸置疑，以一个干练清爽的年轻人形象去相亲，还是扮演一个拖泥带水的油腻大叔？成功率高下立判。看来 Istio 团队终于醍醐灌顶，要努力做一个干练的奶油小生了。&lt;/p&gt;
&lt;p&gt;再来说说加法。Change Note 中的新增项主要来自四个方面：虚拟机的支持，遥测（Telemetry）的改进，升级，&lt;code&gt;istioctl&lt;/code&gt; 命令行。&lt;/p&gt;
&lt;p&gt;Istio 通过添加了一个叫 &lt;code&gt;WorkloadEntry&lt;/code&gt;  的自定义资源完成了对虚拟机的支持。它可以将非 Kubernetes 的工作负载添加到网格中，这使得你有能力为 VM 定义和 Pod 同级的 Service。而在以前，你不得不通过 ServiceEntry 里的 address 等字段，以曲线救国的方式去实现对非 Pod 工作负载的支持，丑陋又低效。&lt;code&gt;WorkloadEntry&lt;/code&gt; 的引入让非 Kubernetes 服务接入网格成为现实。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;WorkloadEntry&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;details-svc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;details-legacy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vm1.vpc01.corp.net&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;details-legacy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;instance-id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vm1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;遥测方面，增加了两个实验性的功能，一个是请求类别过滤器，主要用来对不同 API 方法的请求进行标记和分类；另一个是追踪配置 API，可以控制采用率等。除此之前，添加了 Prometheus 标准的抓取标注（annotation），提升了集成的体验。Grafana 的 Dashboard 也有&lt;a href=&#34;https://grafana.com/orgs/istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更新&lt;/a&gt;，对终端用户来说这倒是可以期待一下。然而，我们最关心的 WASM 只字未提！笔者猜测它在可用性方面还有很多问题。ServiceMesher 社区有成员对 Istio 各个版本的遥测做了 benchmark，横向对比的结果是 WASM 方式下性能垫底！甚至还不如 1.3 版本。这让人不禁感慨，WASM 之于 Envoy，会不会只是一次看上去很美好的邂逅呢？&lt;/p&gt;
&lt;p&gt;为了能让升级过程更平滑，Istio 提供了一种叫金丝雀升级（Canary upgrades）的策略，可以安装一个金丝雀版本的控制平面，与老版本同时存在。金丝雀升级可以让你逐渐的切换流量以验证新版本的可用性，同时也保留了回滚的能力。当然，如果你足够自信，依然可以原地升级（In place upgrade)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl install --set &lt;span class=&#34;nv&#34;&gt;revision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;canary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                    READY   STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istiod-786779888b-p9s5n                 1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          114m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istiod-canary-6956db645c-vwhsk          1/1     Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          1m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;令笔者惊奇的是，Istio 居然提供了降级（Downgrade）功能！这是因为开发团队对新版本不自信吗？如果说金丝雀升级已经提供了回滚的能力，那又何必为原地升级提供降级能力呢？而且降级也是有限制条件的：必须是 1.5 以上的版本；必须是使用 &lt;code&gt;istioctl&lt;/code&gt;安装的；必须使用老版本的 &lt;code&gt;istioctl&lt;/code&gt; 执行降级操作。笔者很难想象出它的适用场景，如果你知道，请一定告知我。&lt;/p&gt;
&lt;h2 id=&#34;向市场妥协&#34;&gt;向市场妥协&lt;/h2&gt;
&lt;p&gt;在虚拟机支持方面，Release Note 中有这样一句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Expanding our support for workloads not running in Kubernetes was one of the our major areas of investment for 2020&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Istio 为什么要花大力气支持 VM 这种即将过气的部署载体？而且要作为 2020 年开发的重中之重？在理解这一举措之前，让我们先来看看 Google 的老对手 Amazon，在自家产品 AWS App Mesh 上的布局。&lt;/p&gt;
&lt;p&gt;，AWS App Mesh 支持了自家的各种工作负载，当然也包括虚拟机和实体机。Amazon CTO Werner Vogers 在&lt;a href=&#34;https://www.allthingsdistributed.com/2019/03/redefining-application-communications-with-aws-app-mesh.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 AWS App Mesh 重新定义服务通信&lt;/a&gt; 一文中写到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our goal is to remove the undifferentiated heavy lifting of operating complex applications. We provide the tools, services, and observability to ensure that you can maintain high standards for your own architectures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种全方位部署形态的支持，其主要目的就是消除不同，给用户统一的接入体验。而这种不得已为之的策略，其实本质上是云原生应用落地的现状造成的。如果你多了解下身边不同公司的情况，你就会发现现实远比我们想象的要骨感。大量的中小企业都刚刚把上云提上日程，还有很多是实体机 / VM 和部分迁移到云的业务组成的混合体，其部署形态的复杂性可想而知。而 App Mesh 这种远瞻性的策略就是通过覆盖用户现有的各种部署形态，提前将未来全面上云的市场揽入怀中。当你的网格接入层无需变更时，只需要将 VM 之类的负载一一替换即可，最终完成云上的纯粹形态。&lt;/p&gt;
&lt;p&gt;我们再来看看 Istio 的同门师弟，Google Cloud Traffic Director 的情况。其&lt;a href=&#34;https://cloud.google.com/traffic-director/docs/traffic-director-concepts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;中有如下描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;按您的节奏进行现代化改造&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Traffic Director 既适用于基于虚拟机 (Compute Engine) 的应用，也适用于容器化应用（Google Kubernetes Engine 或自行管理的 Kubernetes），并能分阶段逐步运用于您的服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看到这里我想你应该很清楚了，两大云厂商的网格产品无一例外地选择对 VM 支持，主要原因就是综合 Kubernetes、Service Mesh 落地现状，以及市场策略的考量。Istio 选择跟进无可厚非，且可以和自家产品互取所长，共享资源。我们是否可以大胆猜测一下：未来 Istio 可能会和 Traffic Director 兼容甚至合并？&lt;/p&gt;
&lt;p&gt;1.6 版本的最大变化，就是提供对虚拟机的支持，也是本年度的重点，其原因我们梳理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于云原生落地现状的考虑：无论是 Kubernetes、Service Mesh，还是云迁移，整个业界依然处于参差不齐的状态，部署形态复杂多变。对 VM 的支持可以为用户提供统一的接入体验，并平滑接入网格技术。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对抗（蚕食）竞争对手的市场：在收费的云平台，两大高手的策略旗鼓相当；而在开源方面，Istio 无疑是绝对的主角。同时在付费和免费两个层面统一战线，Istio 的这一神补刀，可以说击中了 AWS 的要害，这可能让本来摇摆不定的技术选型者改变主意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回归平台中立的理念：Istio 一经推出就宣称具有多平台支持的能力，但两年下来大家都心照不宣，知道它对 Kubernetes 的强依赖性。提供 VM 支持正是去平台化的良机，为自己曾经立的 Flag 正名。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个很可能属于市场宣传的行为就是高调宣称支持 Kubernetes Service APIs。对于一个还处于 alpha 版本的功能，如此大力地进行支持，再想想 Istio 与 Kubernetes 网络组的关系，不得不让人感觉有广告嫌疑。都是老熟人，互推一下也是应该的。不过亮相的略显刺眼，些许尴尬。&lt;/p&gt;
&lt;p&gt;第三个值得一说的是：开始提供新特性预览。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Added&lt;/strong&gt; a new profile, called &lt;code&gt;preview&lt;/code&gt;, allowing users to try out new experimental features that include WASM enabled telemetry v2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔者看到这一项的第一反应：这不就是 AWS Preview 吗？AWS 通过这种方式把新功能提前释放给用户使用，以收集使用数据和建议，来改进功能，可以认为是一种 alpha 测试。Istio 的这一举动可以理解为终于要开始践行 MVP（最小化可行产品）理论了，毕竟从前脱离市场和用户，闭门造车的跟头栽得有点大，痛定思痛，终于选择和用户站在一边。&lt;/p&gt;
&lt;h2 id=&#34;重要的生态圈&#34;&gt;重要的生态圈&lt;/h2&gt;
&lt;p&gt;就在 1.6 发布不久前，一直致力于 Service Mesh 生态链产品开发的 solo.io 公司推出了第一个 Istio 开发者门户（&lt;a href=&#34;https://www.solo.io/blog/introducing-the-first-developer-portal-for-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Developer portal&lt;/a&gt;）。它可以对网格中运行的 API 进行分类，通过 webUI 提供 API 管理的可视化用户体验，同时还能自动地生成 Istio Gateway、VirtualService 这些自定义资源。&lt;/p&gt;
&lt;p&gt;solo.io 和 Google Cloud 是&lt;a href=&#34;https://www.solo.io/company/partners/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;商业伙伴&lt;/a&gt;关系，旗下的产品 Gloo 和 Service Mesh Hub 都已经整合进了 GCP 和 GKE 中。而这一次发布 Portal 无疑又是一次双赢。&lt;/p&gt;
&lt;p&gt;Service Mesh 目前的市场格局并不明朗，依然是硝烟弥漫，产品都尚未定型，更不要说生态圈了。对 Goolge 而言，能提前将 solo.io 这样有实力的小弟招入麾下，围绕 Istio 打造一整套生态链产品，无疑会让 Istio 如虎添翼，也极有可能在市场竞争中增加重量级的砝码。&lt;/p&gt;
&lt;p&gt;而对于 solo.io 而言，作为初创公司，能和 Envoy 一样抱着 Service Mesh 头号网红的粗腿，既能持续地获得大量的曝光机会，又能为自己的产品带来持续增长的用户群体。这又让我想起在当年在游戏行业的一对 CP，Facebook 和 Zynga。Facebook 为 Zynga 输送了大量的用户，而 Zynga 的社交游戏又为 Facebook 的用户留存和黏性做出了贡献。至于后来的相爱相杀，那又是另外的故事了。我们回归正题，别说是 solo，换做是笔者本人，估计早都高喊着“土豪求做友”跪舔着不放手了。无论如何，solo.io 的一步妙棋，很可能会搅动整个棋局的变化，让我们拭目以待。&lt;/p&gt;
&lt;p&gt;生态圈的重要性无需多言，即便如 AWS 这种闭环生态的巨鳄，每年 Summit 也会把最大的展台留给众多 vendor，所谓一个好汉三个帮，谁都不会拒绝有实力的伙伴补强你的实力，玩 LOL 的的朋友会感慨，辅助是多么的重要！Java 叱咤风云二十五年，全靠以 Spring 为首的大将们强力补刀；Golang 若不是没有一个强大的、统一的标准化的生态，估计早把 Java 按在地上摩擦了。再反观日本的动漫产业，再优秀的作品，如果没有丰富的周边和产业链，GDP 要小上几个数量级，恐怕二次元的小弟弟小妹妹们都会少了很多精神寄托吧。&lt;/p&gt;
&lt;h2 id=&#34;期许和无奈&#34;&gt;期许和无奈&lt;/h2&gt;
&lt;p&gt;在 InfoQ 最新发布的“技术采用生命周期”调查报告中，将 Istio、Service Mesh 放入了早期采用者这一列，这其实也从应用和市场层面反映出了它们仍处在产品发展的前期，任重道远。产品有限的成熟度制约了技术选型的空间，反过来市场的谨小慎微又让产品缺少了来自实践端的经验和积累。&lt;/p&gt;
&lt;p&gt;本次 1.6 版本的发布我个人认为是惊喜不足，失望有余。Mixer 的寿终正寝让中心化的限流、黑白名单这样有用的功能也跟着陪了葬，还未看到要弥补它们的打算。而期待的 Envoy 与 WebAssembly 的强强联手也在本次更新中只字未提。当然了，产品迭代哪能一蹴而就，时间、成本、质量三要素缺一不可。一统江山的 Kubernetes 到了 1.8 才算是稳定版本，何况现在的 1.18，而我们的 Istio 才刚刚到 1.6 而已，还需要更多的时间来沉淀。&lt;/p&gt;
&lt;p&gt;前路漫长，但仍可期许，让我们未来见分晓。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.6.x/announcing-1.6/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.6 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.7——进击的追风少年</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/17/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/17/</guid>
      <description>&lt;p&gt;作者：马若飞，审校：宋净超&lt;/p&gt;
&lt;p&gt;2020 年 8 月 21 日，Istio 发布了 1.7 版本。除了介绍新版本的主要更新内容外，本文会重点分析 Istio 团队在产品更新策略上的激进态度和举措。是稳扎稳打做好向后兼容，带给用户所承诺的易用性；还是快刀斩乱麻，做进击的追风少年，且听笔者慢慢道来。&lt;/p&gt;
&lt;h2 id=&#34;如约而至istio-170-发布&#34;&gt;如约而至——Istio 1.7.0 发布&lt;/h2&gt;
&lt;p&gt;就在几天前，Istio 发布了 1.7 版本，和 1.6 版本的发布时间正好间隔三个月，完美的实现了季度发布的诺言。本次发布的口号是“伟大的 Istio 社区（Istio’s great community）”，因为有来自 40 多个公司的 200 多个开发者做出了贡献。Istio 官方是这样描述的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正是因为有如此令人惊羡（amazing）的社区，才让 Istio 能够在每个季度有如此多的改进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Istio 团队已经从上个月倒卖商标的麻烦中走了出来，看上去是想通过强调 &lt;code&gt;Istio&#39;s great community&lt;/code&gt; 这个理念来抚平社区开发者受伤的心灵？笔者认为，作为开发者和用户不必太在意 Google 的商业行为，至少现阶段 Istio 还在以开源的身份持续演进，还能为我所用，这就足够了。&lt;/p&gt;
&lt;p&gt;1.7 版本中重要的更新主要有以下四个方面。&lt;/p&gt;
&lt;h3 id=&#34;安全增强&#34;&gt;安全增强&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;确认了使用安全发现服务（SDS）作为证书分发的优势，并把它作为一个重要的安全最佳实践。现在这一特性也被使用在出口网关上。&lt;/li&gt;
&lt;li&gt;信任域验证除了支持 HTTP，现在也可以验证 TCP 流量了，并且还支持在 MeshConfig 中进行配置，提供了更多灵活性。&lt;/li&gt;
&lt;li&gt;可以使用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Elliptic-curve_cryptography&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ECC&lt;/a&gt; 进行 CA 通信，提高了安全性和效率。&lt;/li&gt;
&lt;li&gt;网关默认使用非根（non-root）用户部署，这主要是基于一条最佳实践：不要让运行的进程有多于它所需的权限，这会导致不必要的混淆。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;提升易用性&#34;&gt;提升易用性&lt;/h3&gt;
&lt;p&gt;在易用性方面主要的改进依然是对 &lt;code&gt;istioctl&lt;/code&gt; 命令行工具的增强：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;analysis 支持
&lt;ul&gt;
&lt;li&gt;对可能不安全的 &lt;code&gt;DestinationRule&lt;/code&gt; 配置发出警告&lt;/li&gt;
&lt;li&gt;对使用废弃的 Mixer 资源发出警告&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;ISTIOCONFIG&lt;/code&gt; 设置自定义配置&lt;/li&gt;
&lt;li&gt;使用助记符来标识端口号&lt;/li&gt;
&lt;li&gt;添加了 &lt;code&gt;istioctl x uninstall&lt;/code&gt; 来方便卸载 Istio&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生产运维改进&#34;&gt;生产运维改进&lt;/h3&gt;
&lt;p&gt;在运维方面也有些许改进，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以支持让 Sidecar 启动后才启动你的应用容器。如果你的应用需要在启动时通过 Sidecar 代理来访问资源，这项修改可以让部署变的更稳定（避免因为 Sidecar 没启动而应用访问不到资源的情况）。&lt;/li&gt;
&lt;li&gt;Istio Operator 作为最佳安装方式。Operator 在之前的版本就已经提供了，看上去 Istio 想主推 Operator 以替代其他的安装形式。但笔者必须要吐槽一下官方发布文档对这一条的描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;https://istio.io/latest/docs/setup/install/operator/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Operator&lt;/a&gt; is a great way to install Istio, as it automates a fair amount of toil. Canary control plane deployments are also important; they allow ultra-safe upgrades of Istio. Unfortunately, you couldn’t use them together - &lt;a href=&#34;https://istio.io/latest/docs/setup/upgrade/#canary-upgrades&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;until now&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;吹了一大堆，其实翻译成人话就是：Operator 目前还不支持金丝雀更新。真是佩服这段文案编写者拐弯抹角的能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供了 istio-agent 的指标，可以观察它的运行情况&lt;/li&gt;
&lt;li&gt;Prometheus 指标收集方面的改进&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vm-安全性&#34;&gt;VM 安全性&lt;/h3&gt;
&lt;p&gt;持续对虚拟机相关功能的开发是本年度的重点，这是 Istio 多次强调的。这是因为目前客户应用部署环境的复杂性和混合性，VM 依然是一种主要的部署选择。和一些托管的竞品（比如 AWS APP Mesh）相比，Istio 缺失了这方面的能力，使得这些客户不得不观望而无法落地。对 VM 的支持就成为了重中之重，这也是商业上的考量。&lt;/p&gt;
&lt;p&gt;然而本次更新没有太多的重量级功能发布，只是做了小的改进，且还在 alpha 阶段。比如为 VM 也增加了安全特性，支持证书自动轮转；&lt;code&gt;istioctl&lt;/code&gt; 现在可以验证 VM 的代理状态；增加了 RPM 安装包等。&lt;/p&gt;
&lt;h2 id=&#34;温柔一刀升级的伤痛&#34;&gt;温柔一刀——升级的伤痛&lt;/h2&gt;
&lt;p&gt;客观的讲，以上官方的发布文档大部分内容都不痛不痒，对使用层面的用户影响不大。而真正和用户息息相关是安装和升级的变化。Istio 团队并没有在发布首页强调这一点，这引起了笔者的强烈不适并严重怀疑 Istio 有刻意规避问题的嫌疑。我们先来看笔者认为最重要的一条变更：&lt;/p&gt;
&lt;h3 id=&#34;过分严格的平台版本限制&#34;&gt;过分严格的平台版本限制&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Require Kubernetes 1.16+&lt;/p&gt;
&lt;p&gt;Kubernetes 1.16+ is now required for installation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是 Istio 官方第一次在新版本的 Release Note 中明确的说明了 Kubernetes 的版本限制问题。尽管以前老版本的 Istio 也会对平台版本有要求，但通常是这样的口吻：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Istio 1.5 has been tested with these Kubernetes releases: 1.14, 1.15, 1.16.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种描述隐含的意思就是：我们在这几个版本测试过兼容性，但我们并没有说 Istio 不兼容其他版本，可能、也许、大概是兼容的，我们只是没有测试过而已。而这一次是描述是“required”，请仔细体会这两种说法的区别。&lt;/p&gt;
&lt;p&gt;为了验证 1.7 真实的兼容性（required 只是骇人听闻？），笔者做了一次安装测试，测试环境为 Docker 桌面版内置的 Kubernetes，版本 v1.15.5。&lt;/p&gt;
&lt;p&gt;首先，使用预检命令验证集群环境是否合法（新版本已经取消了 &lt;code&gt;istioctl verify-install&lt;/code&gt; 命令）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bin/istioctl x precheck
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Error: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; error occurred:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; * The Kubernetes API version: v1.15.5 is lower than the minimum version: 1.16
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;果然，预检没有通过，出现了版本过低的错误。笔者忽略预检结果，尝试强行安装，想看看预检是否也只是吓唬人而已：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bin/istioctl install
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;This will install the default Istio profile into the cluster. Proceed? &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;y/N&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The Kubernetes version v1.15.5 is not supported by Istio 1.7.0. The minimum supported Kubernetes version is 1.16.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Proceeding with the installation, but you might experience problems. See https://istio.io/latest/docs/setup/platform-setup/ &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; a list of supported versions.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;✘ Istio core encountered an error: failed to &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; resource: failed to verify CRD creation: the server could not find the requested resource
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;验证结果被现实啪啪打脸。除了对版本限制的说明，Istio 还非常严谨的告知安装过程会继续，但你可能会遇到各种问题。果然，在 Istio core 的安装步骤中就报了错，安装过程被卡住无法继续进行。看来这一次 Istio 的 required 是来真的了。&lt;/p&gt;
&lt;p&gt;为什么说这个强制性的版本限制会对用户造成最大的困扰？其根本原因就是当前绝大部分企业和用户所使用的 Kubernetes 根本没有达到 1.16+ 版本，大部分都是基于 1.14、1.12，甚至更低。目前两大云厂商的 Kubernetes 服务（AWS EKS 和 GCloud GKE）也都是兼容 1.14+，这也能从一个侧面说明有一大批老用户很可能都使用的是 1.14 版本。然而 Istio 并没有遵循这一规则，这等于直接将很大一部分用户踢出了场外，Istio 1.7 不带你们玩了。&lt;/p&gt;
&lt;p&gt;另一个潜在的问题是为想要升级的用户带来了极大的困惑。举一个例子：某企业的运维团队正在打算将 1.14 版本的 Kubernetes 升级到 1.16，而架构团队正打算将安装在其上的 Istio 1.2 升级到 1.7。这个团队所面临的问题是，要升级到 Istio 1.7 必须先升级 Kubernetes 到 1.16；但是一旦升级了 1.16，原本的 1.2 版本很可能有兼容问题，因为 Istio 1.2 宣称只在 Kubernetes 1.12~1.14 测试过。Istio 1.7 过分严格的的平台版本限制给了这些用户致命一刀，升级之路充满荆棘。他们只能退而求其次选择老版本进行升级。&lt;/p&gt;
&lt;p&gt;从 1.5 版本开始，Istio 一方面不断的强调易用性和用户体验，一方面又武断的放弃向下兼容，将大量用户拒之门外。其自相矛盾的行为令人匪夷所思。&lt;/p&gt;
&lt;h3 id=&#34;资源版本号的变更&#34;&gt;资源版本号的变更&lt;/h3&gt;
&lt;p&gt;这一问题出现在 Change Note 安装部分的一条，很可能成为升级用户新的痛点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Upgraded the CRD and Webhook versions to v1. (&lt;a href=&#34;https://github.com/istio/istio/issues/18771&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Issue #18771&lt;/a&gt;),(&lt;a href=&#34;https://github.com/istio/istio/issues/18838&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Issue #18838&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从 Issue 可以看出，因为 Kubernetes 在 1.16 中将 webhook 的 API 版本改为 v1，并会在 1.19 版本中删除老的 v1beta 版本。这一激进行为导致 Istio 不得不在自己的 1.8 版本之前完成对应的迁移。笔者在 Istio 官方 Slack 中也验证了这一问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes this is a hard requirement. Most specifically CRDs, and other apis use APIs that were promoted to v1 in 1.16 are being used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Istio 开发团队也在 Issue 中抱怨对方太激进（aggressive），留给他们的开发周期太短（pretty tight window），有很多工作要做（probably a lot of work），一副巧妇难为无米之炊的委屈样。笔者不由得感叹：本是同门师兄弟，相煎太急！&lt;/p&gt;
&lt;p&gt;而对于用户而言，意味着你不得不将自己的 mesh 配置文件的版本号进行更新，如果集群比较庞大，很可能有不少的工作量（主要是测试、验证方面）。你很可能还需要通过金丝雀升级的方式进行，因为无论是先升级 Istio，还是先修改配置，都可能出现兼容问题（说好的易用性和用户体验呢？）。&lt;/p&gt;
&lt;h3 id=&#34;短暂的-lts&#34;&gt;短暂的 LTS&lt;/h3&gt;
&lt;p&gt;在 Istio 的&lt;a href=&#34;https://istio.io/latest/news/support/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;版本支持公告页面&lt;/a&gt;，你可以发现以前的老版本都逐渐的停止了维护，特别是具有里程碑意义的 1.5 版本，在发布 6 个月后即停止维护，几乎成为了 Istio 史上最短命的版本。Istio 在&lt;a href=&#34;https://istio.io/latest/about/release-cadence/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建和发布节奏页面&lt;/a&gt;中这样定义 LTS（long term support）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Support is provided until 3 months after the next LTS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即上一个版本会在新版本发布后的 3 个月就停止维护（包括更新、修复 bug 等），算上它自己的发布日期，也只有半年时间。我们再来对比一下 Ubuntu 对 LTS 的定义，下面是 Ubuntu 20.04 LTS 的一段说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;下载专为桌面 PC 和笔记本精心打造的 Ubuntu 长期支持 (LTS) 版本。LTS 意为“长期支持”，一般为 5 年。LTS 版本将提供免费安全和维护更新至 2025 年 4 月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5 年对 3 个月。对于操作系统来说，因为处在整个软件架构的最底层，理应保证长期稳定的维护。Service Mesh 比不了操作系统，但好歹也是基础设施，也应该对上层建筑提供更多稳定性。这个所谓的长期是不是有点过于短暂？追风少年你是要赶着去投胎吗？Istio 对 LTS 的定义让我开始怀疑人生。&lt;/p&gt;
&lt;h2 id=&#34;路在何方稳定是永恒的童话&#34;&gt;路在何方——稳定是永恒的童话？&lt;/h2&gt;
&lt;p&gt;Service Mesh 领域的权威人士 Christian Posta 在公开采访中表示：Istio 1.7 将会是真正意义上的稳定、可用于生产环境的版本。笔者对此不敢苟同。本次更新表现平平，并无亮点，反倒是对 Kubernetes 的版本限制会导致用户在安装、升级环节增加成本和不确定性，是一次用户体验上的倒退。Istio 1.0 版本就宣称是生成环境可用（Production ready），恐怕这一次也依然会变成川建国金句的翻版：Make Istio production ready again!&lt;/p&gt;
&lt;p&gt;经过了 3 年多的迭代，Istio 依然像个毛头小子，随性而为。稳定和可靠，在这里成了骗人的童话故事。笔者曾分析 Istio 1.8 将会是第一个稳定版本，希望下一次不要让我们失望。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.7.x/announcing-1.7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.7 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.8——用户至上的选择</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/18/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/18/</guid>
      <description>&lt;p&gt;作者：宋净超，审校：马若飞&lt;/p&gt;
&lt;p&gt;今天 &lt;a href=&#34;https://istio.io/latest/news/releases/1.8.x/announcing-1.8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.8&lt;/a&gt; 发布了，这是 Istio 在 2020 年发布的最后一个版本，按照 Istio 社区在&lt;a href=&#34;https://istio.io/latest/blog/2020/tradewinds-2020/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;今年初设定的目标&lt;/a&gt;继续推进，该版本主要有以下更新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持使用 Helm 3 进行安装和升级&lt;/li&gt;
&lt;li&gt;正式移除了 Mixer&lt;/li&gt;
&lt;li&gt;新增了 Istio DNS proxy，透明地拦截应用程序的 DNS 查询，实现智能应答&lt;/li&gt;
&lt;li&gt;新增了 &lt;code&gt;WorkloadGroup&lt;/code&gt; 以简化对虚拟机的引入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;WorkloadGroup &lt;/code&gt;是一个新的 API 对象，旨在与虚拟机等非 Kubernetes 工作负载一起使用，模仿现有的用于 Kubernetes 工作负载的 sidecar 注入和部署规范模型来引导 Istio 代理。&lt;/p&gt;
&lt;h2 id=&#34;安装与升级&#34;&gt;安装与升级&lt;/h2&gt;
&lt;p&gt;Istio 从 1.5 版本开始弃用了 Helm，使用 &lt;code&gt;istioctl manifest&lt;/code&gt; 方式安装，后来又改成了 &lt;code&gt;istioctl install&lt;/code&gt;，现在又重新回归了 Helm，Helm 作为 Kubernetes 环境下最常用的应用安装管理组件，此次回归也是倾听用户声音，优化安装体验的的反应吧，不过 Istio Operator 依然将是 Istio 安装的最终形式，从 1.8 版本开始 Istio 支持使用 &lt;a href=&#34;https://istio.io/latest/docs/setup/install/helm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm&lt;/a&gt; 进行 in-place 升级和 canary 升级。&lt;/p&gt;
&lt;h2 id=&#34;增强-istio-的易用性&#34;&gt;增强 Istio 的易用性&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;istioctl&lt;/code&gt; 命令行工具新的了 bug reporting 功能（&lt;code&gt;istioctl bug-report&lt;/code&gt;），可以用来收集调试信息和获取集群状态。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/blog/2020/addon-rework/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装 add-on&lt;/a&gt; 的方式变了，在 1.7 中已经不推荐使用 istioctl 来安装，在 1.8 中直接被移除了，这样有利于解决 add-on 落后于上游及难以维护的问题。&lt;/p&gt;
&lt;p&gt;正式移除了 Mixer，推荐使用 &lt;a href=&#34;https://istio.io/latest/blog/2020/wasm-announce/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly&lt;/a&gt; 通过扩展 Envoy 的方式来扩展 Istio，也推荐大家使用 &lt;a href=&#34;https://www.getenvoy.io/reference/getenvoy_extension_toolkit_reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GetEnvoy Toolkit&lt;/a&gt; 来进行 Envoy 的扩展开发。&lt;/p&gt;
&lt;h2 id=&#34;对虚拟机的支持&#34;&gt;对虚拟机的支持&lt;/h2&gt;
&lt;p&gt;在我&lt;a href=&#34;https://thenewstack.io/how-to-integrate-virtual-machines-into-istio-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;之前的博客&lt;/a&gt;中谈到 Istio 1.7 如何支持虚拟机，在 Istio 1.8 中新增了&lt;a href=&#34;https://istio.io/latest/blog/2020/dns-proxy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;智能 DNS 代理&lt;/a&gt;，它是由 Go 编写的 Istio sidecar 代理，sidecar 上的 Istio agent 将附带一个由 Istiod 动态编程的缓存 DNS 代理。来自应用程序的 DNS 查询会被 pod 或 VM 中的 Istio 代理透明地拦截和服务，该代理会智能地响应 DNS 查询请求，可以实现虚拟机到服务网格的无缝多集群访问。&lt;/p&gt;
&lt;p&gt;新增了 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/workload-group/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WorkloadGroup&lt;/a&gt; ，它描述了工作负载实例的集合。提供了一个规范，工作负载实例可以用来引导它们的代理，包括元数据和身份。它只打算与虚拟机等非 Kubernetes 工作负载一起使用，旨在模仿现有的用于 Kubernetes 工作负载的 sidecar 注入和部署规范模型来引导 Istio 代理。&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate&lt;/a&gt;，我们在客户的多集群部署中广泛使用这种机制，以使 sidecar 能够为暴露在网格中所有集群的入口网关的主机解析 DNS，并通过 mTLS 访问。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;总而言之，Istio 团队履行了&lt;a href=&#34;https://istio.io/latest/blog/2020/tradewinds-2020/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;年初的承诺&lt;/a&gt;，自 2018 年发布 1.1 版本发布起，保持了固定的发布节奏，每 3 个月发布一个版本，在性能、用户体验上持续优化，以满足 brownfiled 应用与 greenfield 应用在 Istio 上的无缝体验。我们期待 Istio 在 2021 年可以给我们带来更多惊喜。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/zh/news/releases/1.8.x/announcing-1.8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.8 发布公告——重大更新 - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.9——提升 Day2 体验</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/19/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/19/</guid>
      <description>&lt;p&gt;2 月 9 日，Istio 宣布发布 &lt;a href=&#34;https://istio.io/latest/news/releases/1.9.x/announcing-1.9/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.9&lt;/a&gt; 版本。在这个版本中，我们可以看到虚拟机更广泛地被采用到服务服务网格中，而且对虚拟机的支持、对虚拟机的 cert 发放、对工作负载入口的健康检查也更加完善。Istio 最新的 1.7 和 1.8 两个版本，在让 VM 成为服务网格中一流的工作负载方面取得了很多进展，而 cert 发放则是最后需要弥补的缺口。&lt;/p&gt;
&lt;h2 id=&#34;服务网格中的虚拟机集成&#34;&gt;服务网格中的虚拟机集成&lt;/h2&gt;
&lt;p&gt;虚拟机集成是 Istio 的&lt;a href=&#34;https://istio.io/latest/about/feature-stages/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;核心功能&lt;/a&gt;之一，在这个版本中，它升级到了测试版，这意味着它可以用于生产，不再是玩具。&lt;/p&gt;
&lt;p&gt;在 Istio 服务网格中运行 Kubernetes 工作负载已经有一段时间了，在过去的几个 Istio 版本中，运行虚拟机工作负载也是如此。最新发布的 Istio 使得在服务服务网格中混合 Kubernetes 和 VM 工作负载更加容易。&lt;/p&gt;
&lt;p&gt;常见的用例包括在数据中心的虚拟机或云环境中的虚拟机上运行应用程序。这些虚拟机要么运行传统的，要么运行第三方应用 / 服务。其中一些应用 / 服务不会在短时间内消失–或者在某些情况下，永远不会消失！其中一些虚拟机工作负载是应用现代化历程的一部分，包括转向微服务或 RESTful 服务，部署为分布式服务，其中一些在容器中运行。在这个应用现代化历程中，其中一些虚拟机运行单体工作负载，直到它们被分解为微服务：在虚拟机中运行这些应用提供了一条通往目标 RESTful 服务或 API 的路径，并使过渡更加平稳。&lt;/p&gt;
&lt;p&gt;通过这样的渐进式方法，您可以开始将运行在虚拟机中的现有应用程序上岗到服务网格中。然后，随着你建立起你的服务服务网格实践，你可以逐渐将这些单体应用分解为服务，并更轻松地将它们部署在多个集群、云和混合环境中。Istio 可以使用 &lt;code&gt;WorkloadEntry&lt;/code&gt;、WorkloadSelector 和 &lt;code&gt;WorkloadGroup&lt;/code&gt; 来帮助您实现这一点，管理服务网格中的虚拟机，以促进您的应用现代化历程中更有保障的过渡。&lt;/p&gt;
&lt;h2 id=&#34;与-kubernetes-service-api-保持一致&#34;&gt;与 Kubernetes Service API 保持一致&lt;/h2&gt;
&lt;p&gt;通过 Kubernetes 服务 API，基础设施提供商和平台运营商可以为不同的目的设置多个 Controller。因此，它将 Gateway 与 Envoy 解耦，方便了 Istio 中不同反向代理后端的使用。&lt;/p&gt;
&lt;p&gt;Istio 从 1.6 版本开始就积极与 &lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes SIG-NETWORK&lt;/a&gt; 组合作，使用 &lt;a href=&#34;https://github.com/kubernetes-sigs/gateway-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API&lt;/a&gt; 来替代现有的 Gateway 声明，并将服务网格中的服务对外暴露。以前，你需要创建一个 VirtualService 来绑定到 Gateway 上，以便将服务暴露在服务网格之外。现在，您可以使用 GatewayClass、Gateway 和 Route。GatewayClass 定义了一组共享共同配置和行为的 Gateways。这类似于 &lt;a href=&#34;https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/20190125-ingress-api-group.md#ingress-class&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IngressClass&lt;/a&gt; 的 Ingress 和 &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StorageClass&lt;/a&gt; 的 PersistentVolumes。Route 类似于 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/virtual-service/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VirtualService&lt;/a&gt; 中的 Route 配置。你可以参考 &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/ingress/service-apis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档&lt;/a&gt;来尝试这个功能，但要注意这个功能还处于实验阶段。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Istio 1.9 让每个功能的状态更加清晰，这也有助于增强用户使用的信心。经过最近几次大的改动，相信 Istio 的 API 会在进一步的发展中变得更加稳定。&lt;/p&gt;
&lt;p&gt;将服务服务网格扩展到虚拟机，一直是 Tetrate 成立的重要使命之一。Tetrate 提供 Istio 支持，以及为多集群、多租户和多云构建的基于 Istio 的优质服务网状管理平台。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.10——继续改善 Day2 操作并改版了官网</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/20/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/20/</guid>
      <description>&lt;p&gt;北京时间 5 月 19 日，我们很高兴地宣布 Istio 1.10 的发布！我们要特别感谢我们的发布经理 &lt;a href=&#34;https://github.com/Monkeyanator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sam Naser&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/ZhiHanZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;张之晗&lt;/a&gt;，以及整个测试和发布工作组在 1.10 中的工作。&lt;/p&gt;
&lt;p&gt;这是我们 2021 年的第二个版本，和过去几个版本一样，我们继续为 Istio 用户改善 Day 2 操作。&lt;/p&gt;
&lt;p&gt;该版本的亮点如下。&lt;/p&gt;
&lt;h2 id=&#34;发现选择器&#34;&gt;发现选择器&lt;/h2&gt;
&lt;p&gt;在以前的 Istio 版本中，Istio 的控制平面一直在观察和处理集群中它所关心的所有 Kubernetes 资源的更新。这在大型集群或配置快速变化的集群中可能是一个可扩展性瓶颈。发现选择器（Discovery Selector）限制了 Istiod 监视的资源集，所以你可以很容易地忽略那些与网格无关的命名空间的变化（例如一组 Spark Job）。&lt;/p&gt;
&lt;p&gt;你可以认为它们有点像 Istio 的 Sidecar API 资源，但对于 Istiod 本身来说：Sidecar 资源限制了 Istiod 将发送至 Envoy 的配置集。发现选择器限制了 Istio 从 Kubernetes 接收和处理的配置集。&lt;/p&gt;
&lt;p&gt;请看 Lin、Christian 和 Harvey 的&lt;a href=&#34;https://istio.io/latest/blog/2021/discovery-selectors/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;精彩文章&lt;/a&gt;，深入了解这项新功能的情况。&lt;/p&gt;
&lt;h2 id=&#34;稳定的修订版标签&#34;&gt;稳定的修订版标签&lt;/h2&gt;
&lt;p&gt;早在 &lt;a href=&#34;https://istio.io/latest/blog/2020/multiple-control-planes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.6 版本&lt;/a&gt;中，Istio 就增加了对安全部署多个控制平面的支持，并且我们一直在稳步提高支持度。关于修订版的一个主要的可用性抱怨是需要大量的命名空间重新标记来改变修订版（revision），因为一个标签（label）直接映射到一个特定的 Istio 控制平面部署。&lt;/p&gt;
&lt;p&gt;有了修订版标签，现在有了一个间接层：你可以创建像 &lt;code&gt;canary&lt;/code&gt; 和 &lt;code&gt;prod&lt;/code&gt; 这样的标签，把使用这些标签的命名空间标记为修订版（即 &lt;code&gt;istio.io/rev=prod&lt;/code&gt;），并把特定的 Istiod 修订版与该标签联系起来。&lt;/p&gt;
&lt;p&gt;例如，假设你有两个修订版，&lt;code&gt;1-7-6&lt;/code&gt; 和 &lt;code&gt;1-8-0&lt;/code&gt;。你创建一个指向 &lt;code&gt;1-7-6&lt;/code&gt; 版本的修订标签 &lt;code&gt;prod&lt;/code&gt;，并创建一个指向较新的 &lt;code&gt;1-8-0&lt;/code&gt; 版本的修订标签 &lt;code&gt;canary&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gr418ba8ngj30wu0p0dh1.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;命名空间 A 和 B 指向 &lt;code&gt;1-7-6&lt;/code&gt;，命名空间 C 指向 &lt;code&gt;1-8-0&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;现在，当你准备将 &lt;code&gt;1-8-0&lt;/code&gt; 修订版从 &lt;code&gt;canary&lt;/code&gt; 推到 &lt;code&gt;prod&lt;/code&gt; 时，你可以将 &lt;code&gt;prod&lt;/code&gt; 标签与 &lt;code&gt;1-8-0&lt;/code&gt; Istiod 修订版重新关联。现在，所有使用 &lt;code&gt;istio.io/rev=prod&lt;/code&gt; 的命名空间将使用较新的 &lt;code&gt;1-8-0&lt;/code&gt; 版本进行注入。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gr418atyzpj30vm0ougmt.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;命名空间 A、B 和 C 指向 &lt;code&gt;1-8-0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;请查看&lt;a href=&#34;https://istio.io/latest/docs/setup/upgrade/canary/#stable-revision-labels-experimental&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更新后的 Canary 升级指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-网络变化&#34;&gt;Sidecar 网络变化&lt;/h2&gt;
&lt;p&gt;在以前的 Istio 版本中，Istio 已经重写了 pod 网络，从 &lt;code&gt;eth0&lt;/code&gt; 捕获流量，并将其发送到 &lt;code&gt;lo&lt;/code&gt; 上的应用程序。大多数应用程序都绑定了这两个接口，并没有注意到任何区别；但有些应用程序被特别编写为只期望在其中一个接口上获得特定的流量（例如，通常只在 &lt;code&gt;lo&lt;/code&gt; 上暴露管理端点，而从不通过 &lt;code&gt;eth0&lt;/code&gt;，或者有状态的应用程序只绑定 &lt;code&gt;eth0&lt;/code&gt;）。这些应用程序的行为可能会受到 Istio 引导流量进入 pod 的影响。&lt;/p&gt;
&lt;p&gt;在 1.10 版本中，Istio 正在更新 Envoy，默认在 &lt;code&gt;eth0&lt;/code&gt; 而不是 &lt;code&gt;lo&lt;/code&gt; 上向应用程序发送流量。对于新用户来说，这应该只是一个改进。对于现有的用户，&lt;code&gt;istioctl experimental precheck&lt;/code&gt; 将识别出监听 localhost 的 pod，并可能受到影响，如 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/analysis/ist0143/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IST0143&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;请参阅 John Howard 的&lt;a href=&#34;https://istio.io/latest/blog/2021/upcoming-networking-changes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文章&lt;/a&gt;，以更深入地了解这一变化，如何以及为什么它可能会影响你，以及如何实现无缝迁移。&lt;/p&gt;
&lt;h2 id=&#34;istioio-改版&#34;&gt;Istio.io 改版&lt;/h2&gt;
&lt;p&gt;我们对 Istio.io 进行了改造，采用了全新的外观！这是 Istio 项目启动近四年以来，网站的第一个重大变化（我们将在 5 月 24 日，北京时间 5 月 25 日，庆祝这个周年纪念日！）。我们希望这些变化有助于使网站更方便用户，更容易浏览，总体上更有可读性。&lt;/p&gt;
&lt;p&gt;Istio 官网全新改版，效果如图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gr418c9tc9j31m30u0djz.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;网站左下角有中英文切换功能。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gr418bu545j30vm0ougmt.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;感谢云原生社区 Istio SIG 翻译和维护了 Istio 官网中文文档。&lt;/p&gt;
&lt;p&gt;这项工作由 Google Cloud 赞助，我们要特别感谢 &lt;a href=&#34;https://twitter.com/craigbox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Craig Box&lt;/a&gt;、&lt;a href=&#34;https://twitter.com/iamaijamal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aizhamal Nurmamat kyzy&lt;/a&gt; 和 Srinath Padmanabhan 推动这项工作，并感谢所有帮助审查和提供早期修订反馈的人们。&lt;/p&gt;
&lt;p&gt;请在 &lt;a href=&#34;https://github.com/istio/istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio.io 资源库&lt;/a&gt;上提交问题，给我们任何反馈。&lt;/p&gt;
&lt;h2 id=&#34;开放我们的设计文件&#34;&gt;开放我们的设计文件&lt;/h2&gt;
&lt;p&gt;从 2021 年 5 月 20 日开始，Istio 的设计和规划文件将向互联网上的所有人开放，无需登录。此前，查看这些文件需要谷歌登录和群组成员资格。这一变化将使技术文件的分享更容易、更开放。文件将保持在与以前相同的 URL，但 Community Drive 及其文件夹将改变位置。我们将在本周内联系所有的贡献者和 Drive 成员，并告知新的细节。&lt;/p&gt;
&lt;h2 id=&#34;弃用&#34;&gt;弃用&lt;/h2&gt;
&lt;p&gt;在 1.10 版本中，有两个功能将被废弃。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 第一方 JWT 支持（&lt;code&gt;values.global.jwtPolicy=first-party-jwt&lt;/code&gt;）将被删除；它的安全性较低，仅用于向后兼容旧版 Kubernetes。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;values.global.arch&lt;/code&gt; 选项已经被 Kubernetes 配置中的 Affinity 设置所取代。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请参阅 1.10 &lt;a href=&#34;https://istio.io/latest/news/releases/1.10.x/announcing-1.10/change-notes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更说明&lt;/a&gt;以了解这些废弃的详细情况。&lt;/p&gt;
&lt;h2 id=&#34;反馈&#34;&gt;反馈&lt;/h2&gt;
&lt;p&gt;如果你已经将你的服务网格升级到 Istio 1.10，我们想听听你的意见！请考虑参加这个简短的（约 2 分钟）&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSfzonL4euvGgUM7kyXjsucP4UV8mH9M2snKVFQnT-L7eIXp_g/viewform?resourcekey=0-pWz7V0MsuFrdfJ_-NTQwXQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;调查&lt;/a&gt;，以帮助我们了解我们在哪些方面做得好，以及在哪些方面还需要改进。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Isito 1.11——使用 CNI 取代 Istio Init 容器</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/21/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/21/</guid>
      <description>&lt;p&gt;2021 年 8 月 12 日发布，本年度的第三个版本。&lt;/p&gt;
&lt;h3 id=&#34;cni-插件beta&#34;&gt;CNI 插件（Beta）&lt;/h3&gt;
&lt;p&gt;默认情况下，Istio 会在部署在网格的 pod 中注入一个 &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;init 容器&lt;/a&gt;。&lt;code&gt;istio-init&lt;/code&gt; 容器使用 &lt;code&gt;iptables&lt;/code&gt; 设置 pod 网络流量重定向到（来自）Istio sidecar 代理。这需要网格中部署 pod 的用户或服务账户有足够的权限来部署 &lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;具有 &lt;code&gt;NET_ADMIN&lt;/code&gt; 和 &lt;code&gt;NET_RAW&lt;/code&gt; 功能的容器&lt;/a&gt;。要求 Istio 用户拥有较高的 Kubernetes 权限，对于组织内的安全合规性来说是有问题的。Istio CNI 插件是 &lt;code&gt;istio-init&lt;/code&gt; 容器的替代品，它执行相同的网络功能，但不要求 Istio 用户启用更高的 Kubernetes 权限。&lt;/p&gt;
&lt;p&gt;CNI 插件可以与其他插件同时使用，并支持大多数托管的 Kubernetes 实现。&lt;/p&gt;
&lt;p&gt;在这个版本中，我们通过改进文档和测试，将 CNI 插件功能提升为 Beta 版，以确保用户能够在生产中安全地启用这一功能。&lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/cni/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;了解如何用 CNI 插件安装 Istio&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;外部控制平面beta&#34;&gt;外部控制平面（Beta）&lt;/h3&gt;
&lt;p&gt;去年，我们为 Istio 引入了一种 &lt;a href=&#34;https://istio.io/latest/blog/2020/new-deployment-model/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;新的部署模式&lt;/a&gt;，即集群的控制平面是在该集群之外管理的。这就解决了这样一个问题 —— 将管理控制平面的 Mesh 所有者和在 Mesh 中部署和配置服务的 Mesh 用户之间分离。运行在独立集群中的外部控制平面可以控制单个数据平面集群或多集群网格的多个集群。&lt;/p&gt;
&lt;p&gt;在 1.11 版本中，该功能已被提升为 Beta 版。&lt;a href=&#34;https://istio.io/latest/docs/setup/install/external-controlplane/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;了解如何设置带有外部控制平面的网格&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;网关注入&#34;&gt;网关注入&lt;/h3&gt;
&lt;p&gt;Istio 提供了网关作为与外部世界连接的方式。你可以部署 &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入口网关&lt;/a&gt; 和 &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/egress/egress-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;出口网关&lt;/a&gt;，前者用于接收来自集群外的流量，后者用于从你的应用程序向集群外部署的服务输出流量。&lt;/p&gt;
&lt;p&gt;在过去，Istio 版本会将网关部署为一个 Deployment，它的代理配置与集群中所有其他的 Sidecar 代理完全分开。这使得网关的管理和升级变得复杂，特别是当集群中部署了多个网关时。一个常见的问题是，从控制平面传到 sidecar 代理的设置和网关可能会漂移，导致意外的问题。&lt;/p&gt;
&lt;p&gt;网关注入将对网关的管理变得与一般的 sidecar 代理相同。在代理上设置的全局配置将适用于网关，以前不可能的复杂配置（例如，将网关作为 DaemonSet 运行）现在很容易。在集群升级后，你也可以简单地通过重启 pod 将网关更新到最新版本。&lt;/p&gt;
&lt;p&gt;除了这些变化之外，我们还发布了新的 &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安装网关&lt;/a&gt; 文档，其中包括安装、管理和升级网关的最佳做法。&lt;/p&gt;
&lt;h3 id=&#34;对修订和标签部署的更新&#34;&gt;对修订和标签部署的更新&lt;/h3&gt;
&lt;p&gt;在 Istio 1.6 中，我们增加了对同时运行多个控制平面的支持，这使得你可以 &lt;a href=&#34;https://istio.io/latest/blog/2020/multiple-control-planes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;对新的 Istio 版本进行金丝雀式部署&lt;/a&gt;。在 1.10 版本中，我们引入了 &lt;a href=&#34;https://istio.io/latest/blog/2021/revision-tags/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;修订标签（revision tag）&lt;/a&gt;，这让你可以将一个修订版标记为 &lt;code&gt;production&lt;/code&gt; 或 &lt;code&gt;testing&lt;/code&gt;，并在升级时将出错的机会降到最低。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;istioctl tag&lt;/code&gt; 命令在 1.11 中已经不再是实验性了。你现在也可以为控制平面指定一个默认的修订版。这有助于进一步简化从无修订版的控制平面到新版本的金丝雀升级。&lt;/p&gt;
&lt;p&gt;我们还修复了一个关于升级的 &lt;a href=&#34;https://github.com/istio/istio/issues/28880&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;悬而未决的问题&lt;/a&gt;—— 你可以安全地对你的控制平面进行金丝雀升级，不管它是否使用修订版安装。&lt;/p&gt;
&lt;p&gt;为了改善 sidecar 的注入体验，引入了 &lt;code&gt;istio-injection&lt;/code&gt; 和 &lt;code&gt;sidecar.istio.io/inject&lt;/code&gt; 标签。我们建议你使用注入标签，因为比注入注解的性能更好。我们打算在未来的版本中弃用注入注解。&lt;/p&gt;
&lt;h3 id=&#34;支持-kubernetes-多集群服务mcs实验性&#34;&gt;支持 Kubernetes 多集群服务（MCS）（实验性）&lt;/h3&gt;
&lt;p&gt;Kubernetes 项目正在建立 &lt;a href=&#34;https://github.com/kubernetes/enhancements/tree/master/keps/sig-multicluster/1645-multi-cluster-services-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一个多集群服务 API&lt;/a&gt;，允许服务所有者或网格管理员控制整个网格的服务及其端点的输出。&lt;/p&gt;
&lt;p&gt;Istio 1.11 增加了对多集群服务的实验性支持。一旦启用，服务端点的可发现性将由客户端位置和服务是否被导出决定。驻留在与客户端相同的集群中的端点将总是可被发现。然而，在不同集群内的端点，只有当它们被导出到网格时，才会被客户端发现。&lt;/p&gt;
&lt;p&gt;注意，Istio 还不支持 MCS 规范所定义的 &lt;code&gt;cluster.local&lt;/code&gt; 和 &lt;code&gt;clusterset.local&lt;/code&gt; 主机的行为。客户应该继续使用 &lt;code&gt;cluster.local&lt;/code&gt; 或 &lt;code&gt;svc.namespace&lt;/code&gt; 来称呼服务。&lt;/p&gt;
&lt;p&gt;这是我们 &lt;a href=&#34;https://docs.google.com/document/d/1K8hvQ83UcJ9a7U8oqXIefwr6pFJn-VBEi40Ak-fwQtk/edit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;支持 MCS 计划&lt;/a&gt; 第一阶段。请继续关注！### 预告：新的 API&lt;/p&gt;
&lt;p&gt;Istio 的一些功能只能通过 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/envoy-filter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;EnvoyFilter&lt;/code&gt;&lt;/a&gt; 来配置，它允许你设置代理配置。我们正在为常见的用例开发新的 API—— 比如配置遥测和 WebAssembly（Wasm）扩展部署，在 1.12 版本中你可以看到这些功能。如果你有兴趣帮助我们测试这些实现，&lt;a href=&#34;https://github.com/istio/community/blob/master/WORKING-GROUPS.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请加入工作组会议&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio 1.12 —— 支持 WebAssembly 插件管理</title>
      <link>https://cloudnativecn.com/community/sig/istio/release/22/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/community/sig/istio/release/22/</guid>
      <description>&lt;p&gt;这是 Istio 在 2021 年发布的最后一个版本，也是本年度发布的第四个版本，Istio 依然在按照它既定的发布节奏发展。&lt;/p&gt;
&lt;h2 id=&#34;webassembly-api&#34;&gt;WebAssembly API&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/concepts/wasm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly&lt;/a&gt; 是一个重要的项目，开发了 &lt;a href=&#34;https://istio.io/latest/blog/2020/wasm-announce/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3 年多&lt;/a&gt;，为 Istio 带来了先进的可扩展性，允许用户在运行时动态加载自定义构建的扩展。然而，直到现在，配置 WebAssembly 插件一直是实验性的，而且很难使用。&lt;/p&gt;
&lt;p&gt;在 Istio 1.12 中，我们通过增加一个 API 来配置 WebAssembly 插件 ——&lt;a href=&#34;https://istio.io/latest/docs/reference/config/proxy_extensions/wasm-plugin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WasmPlugin&lt;/a&gt; 来改善这种体验。&lt;/p&gt;
&lt;p&gt;有了 WasmPlugin，你可以轻松地将自定义插件部署到单个代理，甚至是整个网格。&lt;/p&gt;
&lt;p&gt;该 API 目前处于 Alpha 阶段，正在不断发展。我们非常感谢 &lt;a href=&#34;https://istio.io/latest/get-involved/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;您的反馈意见&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;遥测-api&#34;&gt;遥测 API&lt;/h2&gt;
&lt;p&gt;在 Istio 1.11 中，我们引入了全新的 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/telemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Telemetry API&lt;/a&gt;，为 Istio 中配置追踪、日志和指标带来了标准化的 API。在 1.12 版本中，我们继续朝这个方向努力，扩大了对配置指标和访问日志 API 的支持。&lt;/p&gt;
&lt;p&gt;要想开始，请查看文档。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/tasks/observability/telemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;遥测 API 概述&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/tasks/observability/distributed-tracing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;追踪&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/tasks/observability/metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Metrics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/tasks/observability/logs/access-log/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;访问记录&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该 API 目前处于 Alpha 阶段，正在不断发展。我们非常感谢 &lt;a href=&#34;https://istio.io/latest/get-involved/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;您的反馈意见&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&#34;支持-helm&#34;&gt;支持 Helm&lt;/h2&gt;
&lt;p&gt;Istio 1.12 对我们的 &lt;a href=&#34;https://istio.io/latest/docs/setup/install/helm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm 安装支持&lt;/a&gt; 进行了一些改进，并为该功能在未来升级为测试版铺平了道路。&lt;/p&gt;
&lt;p&gt;为了进一步简化使用流程，解决 &lt;a href=&#34;https://github.com/istio/istio/issues/7505&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最受欢迎的 GitHub 功能请求&lt;/a&gt; 之一，官方 Helm 资源库已经发布。请查看新的 &lt;a href=&#34;https://istio.io/latest/docs/setup/install/helm/#prerequisites&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入门&lt;/a&gt; 指南以了解更多信息。&lt;/p&gt;
&lt;p&gt;这些 Chart 也可以在 &lt;a href=&#34;https://artifacthub.io/packages/search?org=istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ArtifactHub&lt;/a&gt; 上找到。&lt;/p&gt;
&lt;p&gt;此外，还发布了一个新的精心制作的 &lt;a href=&#34;https://artifacthub.io/packages/helm/istio-official/gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gateway chart&lt;/a&gt;。该 chart 取代了旧的 &lt;code&gt;istio-ingressgateway&lt;/code&gt; 和 &lt;code&gt;istio-egressgateway&lt;/code&gt; chart，大大简化了网关的管理，并遵循 Helm 最佳实践。请访问网关注入页面，了解迁移到新 Helm chart 的说明。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-gateway-api&#34;&gt;Kubernetes Gateway API&lt;/h2&gt;
&lt;p&gt;Istio 已经增加了对 &lt;a href=&#34;http://gateway-api.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API&lt;/a&gt; v1alpha2 版本的全面支持。该 API 旨在统一 Istio、Kubernetes Ingress 和其他代理使用的各种 API，以定义一个强大的、可扩展的 API 来配置流量路由。&lt;/p&gt;
&lt;p&gt;虽然该 API 尚未针对生产工作负载，但该 API 和 Istio 的实现正在迅速发展。要尝试它，请查看 &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/ingress/gateway-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API&lt;/a&gt; 文档。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;默认重试策略已被添加到 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mesh Config&lt;/a&gt; 中，允许用户在同一位置配置默认重试策略，而不是在每个 VirtualService 中重复配置。&lt;/li&gt;
&lt;li&gt;一个新的 failoverPriority 配置已经被添加到 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/destination-rule/#LocalityLoadBalancerSetting&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;定位负载均衡配置&lt;/a&gt; 中，允许自定义 pod 的优先级。例如，同一网络内的 pod 可以被赋予额外的优先级。&lt;/li&gt;
&lt;li&gt;增加了新的配置，使 &lt;a href=&#34;https://istio.io/latest/docs/ops/best-practices/security/#configure-tls-verification-in-destination-rule-when-using-tls-origination&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;发起安全 TLS 更简单&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;回顾：对 &lt;a href=&#34;https://istio.io/latest/blog/2021/proxyless-grpc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC 原生 &amp;ldquo;无代理&amp;rdquo; 服务网格&lt;/a&gt; 的初步支持。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/istio/istio/wiki/Experimental-QUIC-and-HTTP-3-support-in-Istio-gateways&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;增加了&lt;/a&gt; 对 HTTP/3 网关的实验性支持。&lt;/li&gt;
&lt;li&gt;有关完整的变更清单，请参见 &lt;a href=&#34;https://istio.io/latest/news/releases/1.12.x/announcing-1.12/change-notes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变更说明&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
