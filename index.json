[{"content":"成员须知\n 好的社区环境需要我们大家共同维护，请你在加入云原生社区后阅读本指南，将有助于你参与到社区中来。  社区指南   如何加入社区\n  参与社区的方式\n  社区守则\n  云原生学院直播间\n  投稿指南\n  联系我们\n   加入社区   ","relpermalink":"/community/","summary":"本指南将指导你如何参与云原生社区。","title":"社区参与指南"},{"content":"云原生学院是云原生社区旗下的学研机构。\n","relpermalink":"/community/academy/","summary":"云原生学院是云原生社区旗下的学研机构。","title":"云原生学院直播间"},{"content":"文章收录来源分为三类：原创、翻译、转载。\n 原创：管理员会对投稿文章质量做一定的考察，必要的情况下，作者需要联系社区管理员提供相关个人背景信息；对于长期投稿或知名度较高的作者，我们将邀请成为社区的特邀作者，审核和评审流程时间会相应减短。 翻译：鼓励多提供高质量文章线索，管理员会简要浏览全文考察文章质量和讨论的话题，辨别并过滤掉低质量文章和广告软文；另外，管理员会尽量同原文作者取得联系，通知作者我们翻译了他的文章；避免翻译来自其它社区或科技媒体发表的文章，除非获得官方授权。 转载：个人博客博主和公众号可以对我们的微信公众号开通白名单，管理员会定期挑选转载相关文章；也可以通过PR提出相关文章转载请求。  向社区投稿前请先阅读下面的贡献者协议，一旦向社区提交 PR 代表您已同意该协议。\n贡献者协议 定义  “社区”是指云原生社区。 “文章”是指向云原生社区投稿的文章。 “作者”是指文章署名的作者。 “读者”是指阅读社区发布的文章的人。 “社区官网”是指 https://cloudnative.to。 “官网 Github”是指 cloudnativeto/cloudnative.to。  投 …","relpermalink":"/community/contribute/","summary":"向社区投稿指南。","title":"投稿指南"},{"content":"你有很多种方式（详见 参与社区的方式）参与社区，最直接的方式就是加入云原生社区微信群，本文将知道你如何加入社区群。\n加入社区微信群 入群须知\n 加入社区，意味着您同意遵守 社区守则。  云原生社区微信群采取注册制，请转到腾讯问卷申请，或直接填写下面的问卷，进行实名登记 1 。\n腾讯问卷 请仔细填写下面的腾讯问卷，一次只能选择加入一个群。\n 入群助手 填写问卷后请添加入群助手微信，微信搜索 jimmysongio 或扫描下面的二维码添加。\n  入群助手二维码  期待在社区群里与你相遇。\n备注   我们建议您实名登记，成员名单仅管理员可见，社区承诺不会将您的个人信息公开给任何第三方。 ↩︎\n   ","relpermalink":"/community/join/","summary":"本文将指导你加入云原生社区微信群。","title":"如何加入社区"},{"content":"云原生学院定期举办线上直播，邀请云原生技术大咖为大家分享。\n直播历史归档 以下是云原生社区在 B 站直播的历史视频回放。\n   期数 日期 标题 讲师 回放     33 2022-07-12 新一代云原生分布式存储 Curve 李小翠 视频   32 2022-06-08 云原生日志采集系统 Loggie 设计与实现 郭琪文 视频   31 2022-05-27 eBPF 技术在云原生的应用 狄卫华 视频   30 2022-05-11 MetaFlow 高度自动化的可观测性平台 向阳 视频   29 2022-01-20 PPIO 边缘云的云原生应用实践 蒋鑫 视频   28 2022-01-19 云原生事件网格 Apache EventMesh（Incubating）入门 薛炜明 视频   27 2021-12-22 云原生产品与架构系列讲座第 4 讲：云原生赋能 AIoT 和边缘计算、云形态以及成熟度模型之道 高磊 视频   26 2021-12-21 FreeWheel 云原生应用实践 马若飞 视频   25 2021-12-08 云原生应用可观测性实践 向阳 视频   24 …","relpermalink":"/community/academy/webinar/","summary":"云原生学院是线上直播日程表。","title":"直播日程表"},{"content":"本指南为云原生社区博客风格指南。主要目的为：\n 提高中文文案可读性 统一文档风格，保证社区投稿对外输出风格一致 避免不同的文档作者对同一问题反复作出决策，降低与文档相关的沟通成本  文件头 所有投稿文章都需要在投稿文件的头部添加文件头（文件头前后使用三个短横线“-”），例如：\n--- title: \u0026#34;文章标题\u0026#34; date: 2020-06-09T06:00:00+08:00 summary: \u0026#34;对本文的摘要或者描述。\u0026#34; authors: [\u0026#34;张三\u0026#34;,\u0026#34;李四\u0026#34;] translators: [\u0026#34;张三\u0026#34;,\u0026#34;李四\u0026#34;] categories: [\u0026#34;Kubernetes\u0026#34;] tags: [\u0026#34;Kubernetes\u0026#34;, \u0026#34;源码分析\u0026#34;] --- 其中：\n title: 表示投稿的标题，例如：社区投稿风格指南。 date: 表示投稿的时间，使用 RFC3999 格式，例如：2020-06-09T06:00:00+08:00。 sumnary: 表示对投稿内容的简要描述，尽量控制在 100 字以内，例如：本指南为技术文档的编写提供了一套风格指南规范。。 authors: 表示投稿作者，数组。 …","relpermalink":"/community/contribute/style/","summary":"本指南为社区投稿提供了一套风格指南规范。","title":"社区投稿风格指南"},{"content":"你有很多种方式参与社区，例如：\n 浏览云原生社区官网（即本网站），评论 1 或转发到社交媒体； 加入社区微信群，选择你感兴趣的领域，与社区成员交流； 关注「云原生社区动态」微信公众号，点赞、评论、转发，让更多人看到我们社区； 关注云原生社区 B 站，观看直播和视频回放，点赞、评论、转发； 参与云原生社区组织的线下活动； 参与云原生社区组织的线上活动，例如征稿、翻译等； 成为云原生社区志愿者，一起参与到社区建设中来； 将云原生社区告诉你的同事、好友，一起参与进来；  备注   社区官网使用 giscus 评论系统，你需要使用 GitHub 账号登录才可以评论。 ↩︎\n   ","relpermalink":"/community/involve/","summary":"本文将指导你通过多种方式参与社区。","title":"参与社区的方式"},{"content":"云原生学院定期举办线上直播，邀请云原生技术大咖为大家分享。\n本文面向直播间主持人及直播操作人员，将指导你如何在云原生社区中开展直播。\n准备 你需要准备以下设备、资源或账号：\n 电脑 耳机 腾讯会议软件及账号（可以用微信登录） canva.cn 账号（用于编辑设计资源） OBS：用来做推流，到官网下载最新的版本 音频插件 Sunflower：点击跳转到下载页面，如果安装时遇到系统权限问题，在 macOS 中请在命令行中执行 sudo spctl --master-disable 并在电脑的 系统首选项 的 安全与隐私 中批准来自任意途径的软件安装，如果看到有详情页面，点击进去批准软件发行商  设计资源 直播前需要设置直播间封面，发送公众号直播预告推文。以下是所需的设计资源地址：\n 公众号、B 站、直播预告推文、PPT 封面及封底 视频号直播间封面 OBS 直播底板  常用链接  云原生社区 B 站主页 视频号登录页面 互动问答腾讯文档 直播 PPT 归档地址  注意事项  关于 B 站、视频号的权限请联系 Jimmy 获取 在直播开始前需要设置好 B …","relpermalink":"/community/academy/manual/","summary":"云原生学院直播操作手册。","title":"直播操作手册"},{"content":"本指南为云原生社区成员参与官网投稿 Review 提供统一规范。主要目的为保证投稿质量，本规范主要从以下几方面规范投稿内容：\n 专业性 准确性 可读性 排版统一  Reviewer 标准  所有投稿稿件的 Reviewer 需要为相关专业资深人士。 Reviewer 需要具备一定的技术写作经验，深谙技术文档规范，语言功底比较好。 Reviewer 具备了相应的经验、能力和意识。  当投稿人对 Reviewer 提出的评论有异议时，有权要求审查 Reviewer 的资格。\nReview 标准 稿件拒绝范围 云原生社区接受的文章投稿需要是与云原生技术相关的专业文章，不约束具体细分领域。\n除以下文章不接受投稿外，原则上不拒绝其他投稿：\n 其他技术文章内容洗稿。 文章无实质内容，东拼西凑。  内容组织  正文内容是否与标题相符 结构上是否符合逻辑 结构上是否清晰明确、用户友好 结构上是否缺失必要的内容 结构上是否存在赘余 某部分正文是否可重新组织以更易用 不能包含明显的技术歧视和偏向，侧重阐述客观事实 提出引起思考的观点，回避可能引起争论的点  专业术语  专业术语符合行业通用准则 翻译文章的 …","relpermalink":"/community/contribute/review/","summary":"本指南为参与云原生社区投稿审阅提供统一规范。","title":"社区投稿审阅指南"},{"content":"欢迎作为云原生社区的参与者，为了建立一个开放和受欢迎的社区，我们保证尊重所有通过报告问题、发布功能请求、更新文档、提交拉取请求或补丁以及其他活动做出贡献的人员。\n我们致力于让参与此社区的每个人都不受骚扰，无论其经验水平、性别、性别认同和表达、性取向、残疾、个人外貌、体型、人种、种族、年龄、宗教或国籍等。\n社区行为规范 您需要阅读并同意相关政策条款方可以加入社区，即加入社区意味着您同意本条款。\n您不得发布、传播含有下列内容的信息：\n 反对宪法所确定的基本原则的； 危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的； 损害国家荣誉和利益的； 煽动民族仇恨、民族歧视，破坏民族团结的； 破坏国家宗教政策，宣扬邪教和封建迷信的； 散布谣言，扰乱社会秩序，破坏社会稳定的； 散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪的； 侮辱或者诽谤他人，未经他人同意泄露他人隐私或个人信息，侵害他人合法权益的； 以侮辱、诽谤或者其他方式侵害英雄烈士的姓名、肖像、名誉、荣誉，歪曲、丑化、亵渎、否定英雄烈士事迹和精神的； 煽动非法集会、结社、游行、示威、聚众扰乱社会秩序的； 违反国家有关规定，发布系统漏 …","relpermalink":"/community/policy/","summary":"云原生社区成员行为规范。","title":"社区守则"},{"content":"对云原生社区有任何建议或意见，请与我们联系。\n读者 你可以通过以下方式云原生社区联系：\n 在云原生社区动态公众号后台留言； 发送邮件给 jimmysong@jimmysong.io；  商务合作 如果您想与云原生社区合作，请联系云原生社区创始人 Jimmy，并说明来意。\n","relpermalink":"/community/contact/","summary":"与云原生社区联系。","title":"联系我们"},{"content":"KubeEdge介绍 KubeEdge 是一个致力于解决边缘场景问题的开源系统，在 Kubernetes原生的容器编排和调度能力之上，实现了云边协同、计算下沉、海量边缘设备管理、边缘自治等能力。KubeEdge架构如下图所示，包括云端和边缘端两部分。\n   KubeEdge架构图  ​\n其中：\nCloudHub：WebSocket服务器，负责监控云端的变化、缓存并发送消息到EdgeHub。\nEdgeController：扩展的Kubernetes控制器：负责管理边缘节点和pods 的元数据，因此数据才能被发送到指定的边缘节点。\nDeviceController：扩展的Kubernetes控制器，负责管理边缘设备, 实现边缘设备元数据/状态数据在云端与边缘端的同步。\nEdgeHub：WebSocket客户端，负责与云边服务交互实现边缘计算。其中包括将云边资源同步更新到边缘端以及将边端主机、设备状态变化广播至云端。\nEdged：负责pod生命周期的管理，可以看成一个简易版的kubelet。\nEventBus：EventBus 是一个MQTT客户端负责与MQTT服务器mosquitto的交 …","relpermalink":"/blog/cloud-edge-collaboration-mechanism/","summary":"本文从边缘设备管理和云边自定义消息传递两个方面，来介绍KubeEdge的云边协同机制。","title":"边缘计算平台 KubeEdge 云边协同机制解析"},{"content":"前言 外部存储接入 Kubernetes 的方式主要有两种：In-Tree 和 Out-of-Tree。其中 In-Tree 是指存储驱动的源码都在 Kubernetes 代码库中，与 Kubernetes 一起发布、迭代、管理，这种方式灵活性较差，且门槛较高。Out-of-Tree 是指存储插件由第三方编写、发布、管理，作为一种扩展与 Kubernetes 配合使用。Out-of-Tree 主要有 FlexVolume 和 CSI 两种实现方式，其中，FlexVolume 因为其命令式的特点，不易维护和管理，从 Kubernetes v1.23 版本开始已被弃用。因此 CSI 已经成为 Kubernetes 存储扩展（ Out-of-Tree ）的唯一方式。\nCSI 组成    csi-architecture  参考上图（图片出处），通常情况下：CSI Driver = DaemonSet + Deployment(StatefuleSet)。\n其中：\n 绿色部分：Identity、Node、Controller 是需要开发者自己实现的，被称为 Custom Components。 …","relpermalink":"/blog/develop-a-csi-driver/","summary":"本文将介绍 Kubernetes 中的 CSI 驱动如何开发。","title":"CSI 驱动开发指南"},{"content":"背景 在生产环境使用 Istio 的时候，可能最需要考虑的问题一个是安全问题一个是性能问题，在这里和大家一起探讨下一个安全问题，如何在 Istio 网格中访问外部服务。Istio 提供了两种模式来配置对外部请求的访问策略，并通过配置项 outboundTrafficPolicy.mode 来指定。 默认的模式是 ALLOW_ANY，也就是允许在网格内请求所有外部的未知服务；另外一个模式是 REGISTRY_ONLY，表示只允许请求注册到服务网格注册表中的服务。默认的 ALLOW_ANY 模式虽然使用方便，但是存在一定的安全隐患，建议的做法是切换到 REGISTRY_ONLY 模式。那么在 REGISTRY_ONLY 模式下如何访问外部服务？实现机制是什么呢？在这里针对这两个问题和大家一起探讨下。\n方案调研 目前我们安装部署 Istio 使用的是helm，可以在安装中添加相应的配置 --set meshConfig.outboundTrafficPolicy.mode=REGISTRY_ONLY 修改 outboundTrafficPolicy.mode 的值；如果 Istio 已经安装 …","relpermalink":"/blog/istio-access-external-services/","summary":"作者在本文将和大家一起探讨下 Istio 访问外部服务的两种方法，介绍 Istio 访问外部服务的原理。","title":"Istio 网格中访问外部服务方法"},{"content":"前言 可观测性一词诞生于几十年前的控制理论，指系统可以由其外部输出推断其内部状态的程度。近年来，随着微服务、容器化、serverless 等多种技术架构的出现，应用的构建部署与实施运行都发生了巨大转变，服务链路错综复杂、微服务与分布式趋势增强、环境容器化等一系列变化促使可观测性在云原生体系中占据着重要的作用。通常，可观测性分为 Metrics (指标)、Tracing (追踪)、Logging (日志)三部分。\nLogging 是在特定时间发生的事件的文本记录，包括说明事件发生时间的时间戳和提供上下⽂的有效负载。Metrics 是通过数据的聚合，对特定时间内的行为进行衡量，指标数据是可累加的，可以观察系统的状态和趋势。Tracing面向请求，表示请求通过分布式系统的端到端的调用旅程，可以分析出请求中的异常点或故障的原因。\nIstio 为网格内所有的服务通信生成详细的遥测数据。这种遥测技术让 Isito 提供了服务行为的可观察性，使运维人员能够排查故障、维护和优化应用程序，而不会给服务的开发人员带来任何额外的负担。 在 Istio1.7 版本之前，安装 Istio 时也会默认安装可观测性 …","relpermalink":"/blog/istio-observability/","summary":"作者在本文将和大家一起探讨下 Istio 的路由管理，介绍使用 Istio 灰度发布的过程中，有哪些需要注意的地方。","title":"浅析 Istio——可观测性"},{"content":"前言 在浅析 Istio系列的上篇文章中，我们介绍了Istio的流量路由管理相关内容，并基于此实践了灰度发布相关技术。本篇文章，我们继续扩展探讨Istio服务治理的相关技术和原理。\n服务治理概念 应用从单体架构向微服务架构演进的过程中，由于细粒度的微服务应用数量大幅增长，微服务之间的服务发现、负载均衡、熔断限流等服务治理需求显著提高。\n在微服务场景下，每个服务有多个服务实例，需要一种机制将请求的服务名解析到服务实例地址上，这就需要服务发现和负载均衡机制。负载均衡一般和服务发现配合使用，服务发现负责从服务名中解析一组服务实例的列表，负载均衡负责从中选择一个实例发起请求。\n传统架构下负载均衡一般由服务端提供的，比如访问一个Web网站时，一般在网站入口处有一个负载均衡器来做请求的汇聚和转发（也称作反向代理）。服务的虚拟IP和后端实例映射通过配置文件维护，负载均衡器通过健康检查保证客户端的请求被路由到健康的服务实例。\n   concept-1  微服务架构下，服务发现和负载均衡相关功能包含以下工作流程： 服务注册：各服务将服务名和服务实例的对应信息注册到服务注册中心。 服务发现：发起服务调用 …","relpermalink":"/blog/istio-traffic-management-series-service-management-concept-theory/","summary":"作者在本文将和大家一起探讨下 Istio 的服务治理，介绍服务治理相关概念和实现原理。","title":"浅析 Istio——服务治理之概念和原理"},{"content":"端午节前夕，Istio 1.14 发布。\n这是 2022 年的第二个 Istio 版本。我们要感谢整个 Istio 社区对 Istio 1.14.0 发布的帮助。特别感谢发布经理 Lei Tang（谷歌）和 Greg Hanson（Solo.io），以及测试和发布工作组负责人 Eric Van Norman（IBM）的持续帮助和指导。\nIstio 1.14.0 正式支持 Kubernetes 1.21 至 1.24 版本。\n以下是该版本的一些亮点。\n对 SPIRE 运行时的支持 SPIRE 是 SPIFFE 规范的一个生产就绪的实现，它提供可插拔的多因子验证和 SPIFFE 联邦。我们使用 Envoy SDS API 对与外部证书颁发机构的集成方式进行了修改，以实现对 SPIRE 的支持。感谢惠普企业的团队对这项工作的贡献！SPIRE 通过使用不同的认证机制的组合，实现了强认证身份的引入。它为在 Kubernetes、AWS、GCP、Azure、Docker 中运行的工作负载提供了各种节点和工作负载证明，并通过面向插件的架构，它还可以使用自定义证明。该项目与定制的密钥管理系统有一个可插 …","relpermalink":"/blog/istio-1-14-release/","summary":"这是 Istio 在 2022 年发布的第二个版本。","title":"Istio 1.14 发布"},{"content":"背景 我们团队对 Istio 进行相关研究与探索，并在生产环境进行了相应的应用，初期我们使用 Istio 主要做产品的灰度发布，同时我们团队也有相关研发人员基于 Istio，进行生产环境业务流量管理及可观测性追踪的研究。在做 Istio 灰度发布的实践中，遇到的第一个问题就是怎么在已经大规模部署产品的 Kubernetes 集群里，选择性的注入 Sidecar。下面详细的介绍下我们遇到的问题以及解决思路，供大家参考。\n遇到的问题 我们知道如果想把一个服务纳入 Istio 的网格中，需要在 pod 中注入 Sidecar 进行流量的劫持处理，通用的做法就是在 namespace 上打上 istio-injection=enabled 标签，这样只要在此 namespace 下创建或重启 pod 都会导致 pod 被注入 Sidecar，当然为了不让指定 pod 注入 Sidecar，可以在 pod 的 annotations 里加上 sidecar.istio.io/inject: \u0026#34;false\u0026#34;。线上产品是以 namespace 进行隔离的，并且产品 namespace …","relpermalink":"/blog/istio-sidecar-injection-method/","summary":"作者在本文将和大家一起探讨下 Istio 在满足什么条件的时候进行 Sidecar 的注入，介绍使用 Istio 进行 Sidecar 注入时的一些配置及生产应用","title":"一种灵活注入 Istio Sidecar 的方案探索"},{"content":"经常会有人问 “当你们说可编程代理的时候，那么什么是可编程代理，为什么需要可编程代理”？本文从不同角度回答这个问题。首先会简单地介绍代理；然后讨论下代理在发展过程中的阶段划分；基于这些阶段的划分，讨论每一个阶段相比于上一个阶段的改进之处，以及为什么需要这些改进，同时我们讨论下 “可编程” 所包含的几个层面；最后我们总结下 “为什么需要可编程代理”。\n什么是代理及代理的功能 代理是代理服务器的简称，代理服务器通常部署在两个互相隔离的网络的中间处，既能访问一侧网络也能访问另一侧网络，通过把一侧的数据搬运到另一侧，实现了网络的连通。代理是一种串路网络设备，自从计算机网络诞生，代理就存在了。由于代理是串路的，因此代理在实现网络连通功能的同时也衍生出新的功能和使用场景：\n 路由：代理在转发数据的时候，根据数据的特征，转发到不同的目的地 负载均衡：在转发过程中，通过把数据分发到不同的目的地，提高吞吐量、避免目的地单点故障。负载均衡逐渐成为代理细分功能的一个领域 故障迁移：在转发过程中，当目的地出现故障时候，代理可以把数据转发到备用的目标，对请求方提供不间断的服务 访问控制：代理可以决定某些流量可以 …","relpermalink":"/blog/what-and-why-programmable-proxy/","summary":"经常会有人问“当你们说可编程代理的时候，那么什么是可编程代理，为什么需要可编程代理”？本文从不同角度回答这个问题。","title":"为什么需要可编程代理"},{"content":"前言 本文将和大家一起探讨下 Istio 的路由管理，介绍使用 Istio 灰度发布的过程中，有哪些需要注意的地方。\n流量治理用于控制服务之间的流量和接口调用。Istio 可以通过服务级别的配置，实现蓝绿发布、灰度发布以及百分比流量策略发布等，Istio 还可以实现诸如故障注入、熔断限流、超时重试等流量治理功能。 那么 Istio 如何具有如此强大的功能，它的路由管理是如何实现的，生产中使用 Istio 需要注意的要点有哪些呢？\nIstio 为什么可以实现流量治理 Istio 中路由策略的转发处理都是通过 Envoy 实现，Envoy 作为 Sidecar 和每个服务容器部署在同一个 pod 中，Sidecar 在注入到 pod 之后，将原有服务调用从源容器 -\u0026gt; 目标容器的通信方式改变为源容器 -\u0026gt; Sidecar (源端) -\u0026gt; Sidecar (目的端) -\u0026gt; 目的容器，只要我们配置了正确的流量策略，通过 pilot 与 Envoy 之间建立的长连接，Envoy 可以实时获取最新的网络路由策略，这样 Envoy 接管了流入流出用户服务的流量，持有流量策略。并且 Istio 会自动 …","relpermalink":"/blog/istio-traffic-management-series-route-management/","summary":"作者在本文将和大家一起探讨下 Istio 的路由管理，介绍使用 Istio 灰度发布的过程中，有哪些需要注意的地方。","title":"浅析 Istio——流量治理之路由管理"},{"content":"什么是 Wasm 插件？ 你可以使用 Wasm 插件在数据路径上添加自定义代码，轻松地扩展服务网格的功能。可以用你选择的语言编写插件。目前，有 AssemblyScript（TypeScript-ish）、C++、Rust、Zig 和 Go 语言的 Proxy-Wasm SDK。\n在这篇博文中，我们描述了如何使用 Wasm 插件来验证一个请求的有效载荷。这是 Wasm 与 Istio 的一个重要用例，也是你可以使用 Wasm 扩展 Istio 的许多方法的一个例子。您可能有兴趣阅读我们关于在 Istio 中使用 Wasm 的博文，并观看我们关于在 Istio 和 Envoy 中使用 Wasm 的免费研讨会的录音。\n何时使用 Wasm 插件？ 当你需要添加 Envoy 或 Istio 不支持的自定义功能时，你应该使用 Wasm 插件。使用 Wasm 插件来添加自定义验证、认证、日志或管理配额。\n在这个例子中，我们将构建和运行一个 Wasm 插件，验证请求 body 是 JSON，并包含两个必要的键 ——id 和 token。\n编写 Wasm 插件 这个示例使用 tinygo …","relpermalink":"/blog/validating-a-request-payload-with-wasm/","summary":"本文是一个开发 Wasm 插件验证请求负载的教程。","title":"使用 WebAssembly 验证请求负载"},{"content":"本文译自 Migrating Millions of Concurrent Websockets to Envoy，原文发布于 2021 年。作者是 Ariane van der Steldt Staff Software Engineer, Site Reliability，Radha Kumari Sr. Software Engineer, Site Reliability。\nSlack 有一个全球客户群，在高峰期有数百万同时连接的用户。用户之间的大部分通信涉及到向对方发送大量的微小信息。在 Slack 的大部分历史中，我们一直使用 HAProxy 作为所有传入流量的负载均衡器。今天，我们将讨论我们在使用 HAProxy 时所面临的问题，我们如何用 Envoy Proxy 来解决这些问题，迁移所涉及的步骤，以及结果是什么。让我们开始吧！\nSlack 的 Websockets 为了即时传递信息，我们使用 websocket 连接，这是一种双向的通信链接，负责让你看到 “有几个人在打字……\u0026#34;，然后是他们打的东西，速度几乎是光速的。websocket …","relpermalink":"/blog/migrating-millions-of-concurrent-websockets-to-envoy/","summary":"本文是 Slack 花半年时间从 HAProxy 迁移到 Envoy上的经验分享。","title":"Slack 将数百万个并发的 Websockets 迁移到 Envoy 上经验分享"},{"content":"我是 Vrun Talwar，Tetrate 公司的联合创始人。我们是一家企业级服务网格公司。我要谈的是弹性，更准确地说，是运行时的弹性，是内置于你的网络中的东西。我喜欢从历史上的一个技术话题开始谈起。Cloud 1.0 是云的第一个时代。当时我们看到了虚拟化的浪潮，人们基本上从他们的硬件中获得更多。在我们进入当前的云时代之前，这已经持续了好几年，也就是 Cloud 2.0 时代，这基本上是从别人那里获得计算资源。你不需要在数据中心运行机器，别人为你更有效地运行它们。你刷一下信用卡，就可以得到他们管理的资源。这对配置灵活性和在我们想要的任何地方提供计算有很大的帮助。实际上，下一阶段就是 Cloud 3.0，这是一个更加动态和分布式的计算。从容器和自动伸缩的意义上讲，动态的，通过 Kubernetes 这样的协调器进行调度。分布式是指不同的区域：私有云、公有云、混合云等等。以及在应用组件分布的意义上的分布式。在一个计算如此动态的世界里，我们的网络和安全堆栈是滞后的。这些都是需要迎头赶上的。\nCloud 3.0 转型 —— 网络的创新 在创办 Tetrate 之前，我曾有机会在谷歌工作了大 …","relpermalink":"/blog/resiliency-app-aware-network/","summary":"本文是作者在 Qcon 上的分享，主要谈及服务网格及其引申出来的应用感知网络。","title":"利用服务网格和智能应用感知网络增强应用弹性"},{"content":"本文译自 7 Ways to Fail at Microservices，作者总结了她见过的导致微服务落地失败的一些情况，并提出了 7 个重要的关注点以引导大家来尽量避免。译者是在工作闲暇时间完成的翻译，其中难免有不当之处，请读者指正。\n 本文主要观点：\n 微服务是一种手段，而不是目标 分布式并不能保证解耦性 合约测试（Contract Testing）是任何微服务架构的重要组成部分 分解（Decomposition）需要发生在前端、后端和集成层，以及业务逻辑中 如果企业没有能力快速、独立地发布微服务，那么微服务的许多好处就会丧失  我（Holly Cummins）是 IBM 的一名 技术顾问，我的一部分工作是帮助企业实现云原生。在去年 11 月的 QCon Plus 上，我介绍了 一些不正确的微服务使用方式。这些问题是基于我的经验来整理的，它们是我在客户现场反复看到的一些问题。\n我看到的第一个问题是，我们有时甚至不知道问题出在哪里。人们觉得我们应该做 微服务，但我们并没有真正花足够的时间来定义我们为什么要做微服务。\n我们要解决的是什么问题？现在是什么问题在困扰我们？我们做了微服务之 …","relpermalink":"/blog/7-ways-to-fail-at-microservices/","summary":"作者总结了她经历的一些导致微服务落地失败的情况，并提出了 7 个重要的关注点以引导大家来尽量避免。","title":"避免在微服务上失败的 7 个关注点"},{"content":"WasmPlugin API 最近被添加到 Istio 项目中，作为一种新改进的可扩展性机制。在 Tetrate，我们最近成功举办了一个名为 Istio Wasm workshop 的研讨会。点击这里观看研讨会的录音，并加入 Slack 上的对话。\n我们谈论了 WebAssembly 及其在 Istio 和 Envoy 项目中的重要性，并通过使用 Proxy-Wasm Go SDK 和 func-e 进行了多个演示。\n我们在 Tetrate 关注 Istio 的可扩展性已经有很长一段时间了。Tetrate 的工程师 Takeshi Yoneda 和周礼赞在为此做出了巨大的贡献，我们非常高兴地看到 Istio 的可扩展性因此而得到了极大的改善。\n在这篇博文中，我描述了在引入 WasmPlugin API 之前 Istio 和 Envoy 可扩展性的状况；目前大为改善的情况；以及将或多或少完成这条可扩展性改进弧线的变化，我们预计这些变化将在即将到来的版本中出现。\nIstio 和 Wasm 的历史    Istio 1.4 之前 Istio 1.5 Istio 1.12 …","relpermalink":"/blog/importance-of-wasm-in-istio/","summary":"本文回顾了 Istio 和 Envoy 中引入 Wasm 的历史并介绍了其重要性。","title":"在 Istio 中引入 Wasm 意味着什么？"},{"content":"编者按 本文译自 How To Add eBPF Observability To Your Product，原文发布于 2021 年 7月 3 日。本文作者 Brendan Gregg 是 eBPF 领域的专家，出版过多本相关书籍，本文是他给想要在产品中引入 eBPF 增加可观察性人员的忠告。\n正文 现在有一场军备竞赛，即增加 eBPF 的军备竞赛，在这篇文章中，我将介绍如何快速做到这一点。这也适用于人们将其添加到自己的内部监测系统中。\n人们喜欢在他们建立了原型或构建了产品之后向我展示他们的 BPF 可观察性产品，但我常常在他们开始之前给出建议。作为 BPF 可观察性的领导者，这是我在最近的谈话中一直包含的建议，现在我把它纳入这篇文章中。\n首先，我知道你很忙。你甚至可能不喜欢 BPF。为了务实起见，我将描述如何花最少的精力来获得最大的价值。把这看成是 “第一版”。一个相当有用的出发点。无论你是否遵循这个建议，至少请你理解它，以避免以后的遗憾和痛苦。\n如果你正在使用开源监控平台，首先检查它是否已经有一个 BPF 代理。这篇文章假设它没有，而且你将首次添加一些东西。\n1. …","relpermalink":"/blog/how-to-add-bpf-observability/","summary":"本文是给想要在产品中引入 eBPF 增加可观察性人员的忠告。","title":"如何在产品中引入 eBPF 以增加可观察性"},{"content":"GitOps 是一种方法，通过声明式清单来管理 Kubernetes 集群，以强制执行自我修复和自我调整，达到你所期望的状态。\n与传统的 CI/CD 管道相比，GitOps 采用了拉与推的模式。这意味着开发人员和运维人员不需要调用管道来推送变更到集群中。开发人员只需在源控制中更新他们的 Kubernetes 清单，在集群上运行的 GitOps 控制器将拉取这些变更，并应用所需的状态。因此，Git 成为环境中的唯一的事实来源。\n为什么要实施 GitOps？ 在过去 11 年的行业观察中，我发现了从 TeamCity 到 Jenkins 到 Gitlab 等众多 CI/CD 系统的好处和陷阱。我在各组织中看到的一个共同模式是共享 CI/CD 基础设施。一台或几台构建服务器被几十个团队共享，这往往导致服务器方面的资源争夺，间歇性的网络问题，频繁的中断，这些都成为开发团队无法推送构建的瓶颈。当然，这些系统有许多好处，但肯定有更好的方法。\n很多时候，团队由于对共享服务的依赖而退步。\nGitOps 允许我们横向扩展集群的数量，因为每个集群都支持自我调节和自我修复。 …","relpermalink":"/blog/accelerating-developer-productivity-via-gitops/","summary":"本文介绍了什么是 GitOps 及其架构。","title":"GitOps 如何提高开发人员的工作效率"},{"content":" 编者按\n本博客将向您介绍零信任网络及其基本要素，这是 CISO（首席信息安全官）必须考虑的，以使网络强大，在当今的数字转型中没有安全漏洞，并减少潜在的财务损失。\n 当今所有主要组织都在经历大规模的数字化转型，采用云、移动、微服务和容器技术来高效地提供服务，满足关键业务需求，赶上市场预期。企业的平台和 DevOps 团队必须对分布式和多云的应用程序和服务进行建模，以便随时随地进行访问，从而实现敏捷性。这在组织内部产生了两个重要的趋势：\n 随着越来越多的组织采用多云，他们将其应用程序部署到公有云（谷歌、亚马逊、Azure 等），这意味着数据离开了他们所认为的安全的内部数据中心。 企业使用微服务和分布式架构来实现大规模和敏捷。  然而，应用程序开发人员现在需要解决一系列新的可靠性和安全性问题，因为越来越多的依赖性是通过网络调用消耗的。当集中式系统在使用时，网络和端点安全在十年前很容易实现和管理。安全团队可以利用防火墙充分保障周边的安全。随着多云中的分散数据和微服务导致的分布式工作负载的新趋势，IT 安全组织需要评估他们的安全态势，并重新思考他们的网络架构。当然，安全不是一个人或一个部门的工 …","relpermalink":"/blog/zero-trust-network-for-microservices/","summary":"本博客将向您介绍零信任网络及其基本要素，这是CISO（首席信息安全官）必须考虑的，以使网络强大，在当今的数字转型中没有安全漏洞，并减少潜在的财务损失。","title":"零信任网络的微服务基本要素概述"},{"content":"本文译自知名出版商 O’Reilly 创始人 Tim O’Reilly 的文章 Why it’s too early to get excited about Web3，原文发布于 2021 年 12 月 13 日。\n最近有很多关于 Web3 的讨论，作为 17 年前定义 “Web2.0” 的人，我经常被要求发表评论。我通常避免这样做，因为大多数关于未来的预言都是错误的。不过，我们可以做的是问自己一些问题，帮助我们更深入地看到现在，也就是未来的土壤。正如 William Gibson 的名言：\u0026#34; [未来已来，只是还没有被平均分配](https://quoteinvestigator.com/2012/01/24/future-has-arrived/#:~:text=The Future Has Arrived — It’s,Evenly Distributed Yet – Quote Investigator) “。我们还可以审视经济和社会模式和周期，把马克・吐温的观点作为镜头，即 “历史不会重复，但总会惊人的相似”。\n抛开这些噪音，我们可以对 Web3 说些什么？ …","relpermalink":"/blog/why-its-too-early-to-get-excited-about-web3/","summary":"现在谈论 Web 3.0 还为时尚早。","title":"为什么现在对 Web3 感到兴奋还为时过早？"},{"content":"本文译自 eBPF and Wasm: Exploring the Future of the Service Mesh Data Plane，作者 Vivian Hu，发布于 2022 年 1 月 10 日。\n编者按 前段时间，有人提出使用 eBPF 取代服务网格中的 sidecar 代理，该观点已经发出，就在服务网格和云原生社区中引起了“轩然大波”。后来也有不少人指出该方案实属武断，不切实际。本文就总结了 eBPF 在服务网格数据平面中的作用，以及使用 Wasm 这种新的方案。\n正文 2021 年 12 月 2 日，Cilium 项目宣布了 Cilium Service Mesh 的 beta 测试计划。在谷歌云基于 eBPF 的 Google Cloud Kubernetes Service（GKS）Dataplane V2（于 2020 年 8 月发布）所开创的概念基础上，Cilium Service Mesh 提倡 “无 sidecar 服务网格 \u0026#34; 的理念。它扩展了 Cilium eBPF 产品，以处理服务网格中的大部分 sidecar 代理功能，包括 L7 路由和负载均 …","relpermalink":"/blog/ebpf-wasm-service-mesh/","summary":"eBPF 和 Wasm 是服务网格应用在数据平面上实现高性能的新生力量。它们仍然是新生的技术，但有可能成为今天微服务生态系统中 Linux 容器的替代品或补充。","title":"eBPF 和 Wasm：探索服务网格数据平面的未来"},{"content":"本文译自 Are Cloud-Based IDEs the Future of Software Engineering，原文发布于 2022 年 1 月 7 日。\n编者按\n 本文主要对比了云端 IDE 的优缺点，就像云端 Office 一样，云端 IDE 迟早也会变得流行起来。\n 传统上，软件开发是（而且在很大程度上仍然是）在个人机器上使用集成开发环境（IDE）工具，如 VSCode、JetBrains、Eclipse 等完成。虽然这种 “离线” 开发的模式在早期运作得非常好，但人们很快就注意到，这种方法并非完美。\n首先，合作起来很麻烦，因为写好的代码必须上传到网上供进一步审查。这样写出来的代码的可移植性也并不总是有保证，因为有各种各样的操作系统和其他限制条件，需要它来实现最佳的功能。\n正如开发者和技术记者 Owen Williams 去年 在他的博客 Charged 上写道：“在设备之间同步你的文档和照片是微不足道的…… 这样你就可以在任何地方把它们调出来，但开发者工具仍然停留在过去 —— 每台笔记本电脑或 PC 都要单独配置，使你的环境设置得恰到好处。”\n随着大流行期间越来越多的 …","relpermalink":"/blog/are-cloud-based-ides-the-future-of-software-engineering/","summary":"本文主要对比了云端 IDE 的优缺点，就像云端 Office 一样，云端 IDE 迟早也会变得流行起来。","title":"云端 IDE 是软件工程的未来吗？"},{"content":"译者注：本文作者是 Isovalent 联合创始人\u0026amp;CTO，原文标题 How eBPF will solve Service Mesh - Goodbye Sidecars，作者回顾了Linux 内核的连接性，实现服务网格的几种模式，以及如何使用 eBPF 实现无 Sidecar 的服务网格。\n 什么是服务网格？ 随着分布式应用的引入，额外的可见性、连接性和安全性要求也浮出水面。应用程序组件通过不受信任的网络跨越云和集群边界进行通信，负载均衡、弹性变得至关重要，安全必须发展到发送者和接收者都可以验证彼此的身份的模式。在分布式应用的早期，这些要求是通过直接将所需的逻辑嵌入到应用中来解决的。服务网格将这些功能从应用程序中提取出来，作为基础设施的一部分提供给所有应用程序使用，因此不再需要修改每个应用程序。\n   服务网格示意图  纵观今天服务网格的功能设置，可以总结为以下几点：\n 弹性连接：服务与服务之间的通信必须能够跨越边界，如云、集群和场所。通信必须是有弹性的和容错的。 L7 流量管理：负载均衡、速率限制和弹性必须是 L7 感知的（HTTP、REST、gRPC、WebSocket 等）。 …","relpermalink":"/blog/ebpf-solve-service-mesh-sidecar/","summary":"本文回顾了Linux 内核的连接性，实现服务网格的几种模式，以及如何使用 eBPF 实现无 Sidecar 的服务网格。","title":"告别 Sidecar——使用 eBPF 解锁内核级服务网格"},{"content":"最近我在研究 Istio 生态中的开源项目，Slime 这个项目开源与 2021 年初，是由网易数帆微服务团队开源的一款基于 Istio 的智能网格管理器。Slime 基于 Kubernetes Operator 实现，可作为 Istio 的 CRD 管理器，无须对 Istio 做任何定制化改造，就可以定义动态的服务治理策略，从而达到自动便捷使用 Istio 和 Envoy 高阶功能的目的。\nSlime 试图解决的问题 Slime 项目的诞生主要为了解决以下问题：\n 网格内所有服务配置全量下到所有 Sidecar Proxy，导致其消耗大量资源使得应用性能变差的问题 如何在 Istio 中实现高阶扩展的问题：比如扩展 HTTP 插件；根据服务的资源使用率做到自适应限流  Slime 解决以上问题的答案是构建 Istio 的控制平面，具体做法是：\n 构建可拔插控制器 数据平面监控 CRD 转换  通过以上方式 Slime 可以实现配置懒加载和插件管理器。\nSlime 架构 Slime 内部分为三大模块，其架构图如下所示。\n   Slime 内部架构图  Slime 内部三大组件为： …","relpermalink":"/blog/smart-istio-management-plane-slime/","summary":"本文介绍的是由网易数帆微服务团队开源的一款基于 Istio 的智能网格管理器 Slime。","title":"网易开源 Istio 扩展项目 Slime 简介——基于 Istio 的智能服务网格管理器"},{"content":"Istio 1.12 中新的 WebAssembly 基础设施使其能够轻松地将额外的功能注入网格部署中。\n经过三年的努力，Istio 现在有了一个强大的扩展机制，可以将自定义和第三方 Wasm 模块添加到网格中的 sidecar。Tetrate 工程师米田武（Takeshi Yoneda）和周礼赞（Lizan Zhou）在实现这一目标方面发挥了重要作用。这篇文章将介绍 Istio 中 Wasm 的基础知识，以及为什么它很重要，然后是关于建立自己的 Wasm 插件并将其部署到网格的简短教程。\n为什么 Istio 中的 Wasm 很重要 使用 Wasm，开发人员可以更容易的扩展网格和网关。在 Tetrate，我们相信这项技术正在迅速成熟，因此我们一直在投资上游的 Istio，使配置 API、分发机制和从 Go 开始的可扩展性体验更加容易。我们认为这将使 Istio 有一个全新的方向。\n有何期待：新的插件配置 API，可靠的获取和安装机制 有一个新的顶级 API，叫做 WasmPlugin，可以让你配置要安装哪些插件，从哪里获取它们（OCI 镜像、容器本地文件或远程 HTTP 资源），在哪里 …","relpermalink":"/blog/istio-wasm-extensions-and-ecosystem/","summary":"Istio 1.12 中新的 WebAssembly 基础设施使其能够轻松地将额外的功能注入网格部署中。","title":"Istio 1.12 引入 Wasm 插件配置 API 用于扩展 Istio 生态"},{"content":"本文根据 2021 年 11 月 22 日晚我应极客邦邀请在「极客时间训练营」的直播分享《云原生漫谈：聊聊 Service Mesh 的现状》整理而成，赵化冰参与了本文的审校。\n本来极客时间是想邀请我分享云原生的，但我觉得那个范围太大，在一次分享中只能泛泛而谈，无法聚焦到一个具体的点，因此我想还是先聚焦在服务网格这一个专题上吧。云原生社区最近倒是在做一个云原生系列的分享，大家可以关注下。\n这是我今天分享的大纲：\n 第一探讨下服务网格跟云原生的关系 第二是给大家陈述下我观察到的目前社区里关于服务网格有哪些争论 第三是给大家介绍几个服务网格的相关的开源项目 最后是畅想下服务网格未来的发展  服务网格与云原生的关系 首先我们将探讨下服务网格与云原生的关系。\n服务网格——容器编排大战后的产物    Docker Swarm vs Kubernetes vs Mesos  如果你关注云原生领域足够早的话，应该还会对 2015 到 2017 年间的容器编排大战记忆犹新。关于服务网格的起源已经无需多言。2017 年 Kubernetes 获得了容器大战的胜利，微服务的理念已经深入人心，容器化的趋势可 …","relpermalink":"/blog/jimmy-service-mesh-talk/","summary":"本文探讨了服务网格和云原生的关系，社区发展现状，开源生态，及未来发展。","title":"都 2021 年了，对于服务网格，社区到底在讨论什么？"},{"content":"译者注：本文译自 Istio 官方博客，博客原标题 gRPC Proxyless Service Mesh，其实是 Istio 1.11 版本中支持的实验特性，可以直接将 gRPC 服务添加到 Istio 中，而不需要再向 Pod 中注入 Envoy 代理。本文中还给出了一个 Demo 性能测试数据，这种做法可以极大的提升应用性能，降低网络延迟。\n Istio 使用一组发现 API（统称为 xDS API 来动态配置其 Envoy sidecar 代理。这些 API 的目标是成为一个 通用的数据平面 API。gRPC 项目对 xDS API 有很好的支持，也就是说你可以管理 gRPC 工作负载，而不需要同时部署 Envoy sidecar。你可以在 Megan Yahya 的 KubeCon EU 2021 演讲中了解更多关于该集成的信息。关于 gRPC 支持的最新情况，可以在他们的提案中找到，还有实现状态。\nIstio 1.11 增加了实验性支持，可以直接将 gRPC 服务添加到网格中。我们支持基本的服务发现，一些基于 VirtualService 的流量策略，以及双向 TLS。\n支 …","relpermalink":"/blog/grpc-proxyless-service-mesh/","summary":"本文介绍了 Istio 对 gRPC 的无代理服务网格功能的支持。","title":"基于 gRPC 和 Istio 的无 sidecar 代理的服务网格"},{"content":"本文译自 Istio 官方博客。这是 Istio 在 2021 年发布的最后一个版本，也是本年度发布的第四个版本，Istio 依然在按照它既定的发布节奏发展。\nWebAssembly API WebAssembly 是一个重要的项目，开发了 3 年多，为 Istio 带来了先进的可扩展性，允许用户在运行时动态加载自定义构建的扩展。然而，直到现在，配置 WebAssembly 插件一直是实验性的，而且很难使用。\n在 Istio 1.12 中，我们通过增加一个 API 来配置 WebAssembly 插件 ——WasmPlugin 来改善这种体验。\n有了 WasmPlugin，你可以轻松地将自定义插件部署到单个代理，甚至是整个网格。\n该 API 目前处于 Alpha 阶段，正在不断发展。我们非常感谢 您的反馈意见 !\n遥测 API 在 Istio 1.11 中，我们引入了全新的 Telemetry API，为 Istio 中配置追踪、日志和指标带来了标准化的 API。在 1.12 版本中，我们继续朝这个方向努力，扩大了对配置指标和访问日志 API 的支持。\n要想开始，请查看文档。 …","relpermalink":"/blog/istio-1-12-release/","summary":"这是 Istio 在 2021 年发布的最后一个版本，也是本年度发布的第四个版本，Istio 依然在按照它既定的发布节奏发展。","title":"Isto 1.12 发布——支持 WebAssembly 插件管理"},{"content":"作者：Carlos Santana (IBM)、Omer Bensaadon (VMware)、Maria Cruz (Google)，原文发布于 Knative 官方博客。\n今天我们发布了 Knative 1.0，达到了一个重要的里程碑，这要归功于 600 多名开发者的贡献和合作。Knative 项目是由谷歌在 2018 年 7 月发布的，并与 VMWare、IBM、Red Hat 和 SAP 紧密合作开发的。在过去 3 年中，Knative 已经成为 Kubernetes 上最广泛安装的无服务器层。\n最新动态 如果你没有密切关注 Knative 的发展，自从我们在 2018 年 7 月首次发布以来，已经有很多变化。\n除了无数的错误修复、稳定性和性能增强之外，我们的社区还按时间顺序进行了以下改进：\n 支持多个 HTTP 路由层（包括 Istio、Contour、Kourier 和 Ambassador） 支持多个存储层的事件概念与常见的订阅方法（包括 Kafka、GCP PubSub 和 RabbitMQ） “鸭子类型 \u0026#34; 的抽象，允许处理具有共同字段（ …","relpermalink":"/blog/knative-1-0-ga/","summary":"今天我们发布了Knative 1.0，达到了一个重要的里程碑，这要归功于600多名开发者的贡献和合作。","title":"Knative 1.0 发布了！"},{"content":"编者按 本文英文原文发布在 CNCF 官方博客 Dapr (Distributed Application Runtime) joins CNCF Incubator 上，译者敖小剑，宋净超参与了审校。另外云原生社区中也成立了 Dapr 小组，欢迎各位爱好者加入。\n正文 CNCF 技术监督委员会（TOC）已经投票决定接受 Dapr 作为 CNCF 的孵化项目。\nDapr 是一套使开发者能够轻松编写分布式应用的 API。无论是在 Kubernetes 还是其他环境中，Dapr 都是以 Sidecar 进程运行在应用程序旁边，为开发者提供了一套形式为 pub/sub、状态管理、秘密管理、事件触发器和服务间调用的安全而可靠的原语。在 Dapr 的帮助下，开发人员可以专注于构建业务逻辑而不是基础设施。\nDapr 维护者和指导委员会成员 Mark Fussell 说：“我听到开发者说 Dapr 如何缩短了他们在 Kubernetes 和其他托管平台上构建可扩展的分布式应用的时间，并解决了他们的业务需求，这对我产生了巨大的鼓舞。现在，随着 Dapr 成为 CNCF 的一部分，开发人员能够更容易地构 …","relpermalink":"/blog/dapr-distributed-application-runtime-joins-cncf-incubator/","summary":"CNCF 技术监督委员会（TOC）已经投票决定接受 Dapr 作为CNCF的孵化项目。","title":"Dapr（分布式应用运行时）加入 CNCF 孵化器"},{"content":"本文译自 How eBPF Streamlines the Service Mesh。\n今天有几个服务网格的产品和项目，承诺简化应用微服务之间的连接，同时提供额外的功能，如安全连接、可观察性和流量管理。但正如我们在过去几年中反复看到的那样，对服务网格的兴奋已经被对额外的复杂性和开销的实际担忧所抑制。让我们来探讨一下 eBPF 是如何让我们精简服务网格，使服务网格的数据平面更有效率，更容易部署。\nSidecar 问题 今天的 Kubernetes 服务网格解决方案要求你在每一个应用 pod 上添加一个代理 sidecar 容器，如 Envoy 或 Linkerd-proxy。这是正确的：即使在一个非常小的环境中，比如说有 20 个服务，每个服务运行五个 pod，分布在三个节点上，你也有 100 个代理容器。无论代理的实现多么小和有效，这种纯粹的重复都会耗费资源。\n每个代理使用的内存与它需要能够通信的服务数量有关。Pranay Singhal 写了他配置 Istio 的经验，将每个代理的消耗从 1GB 左右减少到更合理的 60-70MB。但是，即使在我们的小环境中，在三个节点上有 100  …","relpermalink":"/blog/how-ebpf-streamlines-the-service-mesh/","summary":"本文探讨一下eBPF是如何让我们精简服务网格，使服务网格的数据平面更有效率，更容易部署。","title":"eBPF 如何简化服务网格"},{"content":"本文基于 APISIX 2.6 版本进行源码分析，源码阅读注释仓库: review，分析主要流程以及核心机制。\n1. APISIX 概述 APISIX 与 Kong 类似，是一个基于 OpenResty 构建的 API 网关，如果你熟悉 OpenResty，你大概能猜到本文会讲述 APISIX 在 OpenResty 的几大生命周期中， 做了什么动作来进行路由匹配、服务发现、负载均衡以及加载插件。 如果你还想了解 Kong 网关是如何运作的，可以查看我的另一篇文章 Kong 源码分析。 当然，APISIX 不同于 Kong 的地方，例如 etcd 数据变化监听、强大的缓存机制、以及在性能优化上做的尝试，本文也会一一阐述。\n1.1. 项目概述 APISIX 是基于 OpenResty 开发的 API 网关，与 OpenResty 的请求生命周期一致，APISIX 利用 Lua Nginx Module 提供的 *_by_lua 添加 Hook。\n   API Gateway traffic  APISIX …","relpermalink":"/blog/apisix-source-code-reading/","summary":"本文针对云原生网关 APISIX 的核心流程以源码分析的方式剖析其工作原理，并对于网关未来的发展方向进行了思考。","title":"云原生网关 APISIX 核心流程源码分析与进化方向思考"},{"content":"讲师分享  云原生社区 meetup 第八期上海站开场，郭旭东 云原生 2.0 华为云赋能 “新云原生企业”，张凯豪 蚂蚁万级规模 K8s 集群 etcd 架构优化实践 —ETCD on OceanBase，宣超 新一代开源 HCI 底层原理剖析，胡凯 攀登规模化的高峰 —— 蚂蚁集团大规模 Sigma 集群 ApiServer 优化实践，唐博，谭崇康 云原生分布式存储 Rook 及其在企业中应用的未来，林文炜  ","relpermalink":"/event/cloud-native-meetup-shanghai-08/","summary":"本次活动聚焦于 OceanBase、Rook、Sigma 等。","title":"云原生社区 meetup 第八期上海站"},{"content":"Chaos Mesh 是由 TiDB 背后的 PingCAP 公司开发，运行在 Kubernetes 上的混沌工程（Chaos Engineering）系统。简而言之，Chaos Mesh 通过运行在 K8s 集群中的“特权”容器，依据 CRD 资源中的测试场景，在集群中制造浑沌（模拟故障）1。\n本文探索混沌工程在 Kubernetes 集群上的实践，基于源码分析了解 Chaos Mesh 的工作原理，以代码示例阐述如何开发 Chaos Mesh 的控制平面。 如果你缺乏基础知识，要想对 Chaos Mesh 的架构有宏观上的认识，请参阅文末尾注中的链接。\n本文试验代码位于 mayocream/chaos-mesh-controlpanel-demo 仓库。\n如何制造混沌 Chaos Mesh 是在 Kubernetes 上实施混沌工程的利器，那它是如何工作的呢？\n特权模式 上面提到 Chaos Mesh 运行 Kubernetes 特权容器来制造故障。Daemon Set 方式运行的 Pod 授权了容器运行时的权能字（Capabilities）。 …","relpermalink":"/blog/chaos-engineering-with-kubernetes/","summary":"本文探索混沌工程在 Kubernetes 集群上的实践，基于源码分析了解 Chaos Mesh 的工作原理，以代码示例阐述如何开发 Chaos Mesh 的控制平面。","title":"在 Kubernetes 实施混沌工程——Chaos Mesh 原理分析与控制面开发"},{"content":"编者按 本文译自 Cloudflare 出品的白皮书 Can ZTNA replace your VPN? Compare 3 remote access approaches，本文对比了VPN和ZTNA远程访问解决方案，阐明了它们的好处和局限性，同时阐明了迁移项目的最重要考虑因素。同时给出了 Cloudflare 的解决方案及迁移到 ZTNA 的步骤建议。\n简介 安全、无缝的远程访问是一个业务促进因素——提高远程用户的生产力，减少IT团队花在入职和维护用户与应用连接的时间，并具有灵活性和弹性。然而，远程访问对许多企业来说仍然是一个挑战。\n很久以前，VPN提供了一种简单的方法，将一些远程用户短暂地连接到企业网络。然而，随着劳动力的分布越来越广——企业需要在更长时间内保持远程用户的安全连接——这种方法的缺陷变得很明显，从性能低下、安全风险增加到扩展性问题。\n随着远程访问需求的增长，企业正越来越多地从传统的VPN实施方式转向更安全、性能更高的远程访问解决方案。零信任网络访问（Zero Trust Network Access），或称ZTNA，围绕特定的应用程序、私有IP和主机名创建安全边 …","relpermalink":"/blog/can-ztna-replace-vpn/","summary":"本文对比了VPN和ZTNA远程访问解决方案，阐明了它们的好处和局限性，同时阐明了迁移项目的最重要考虑因素。同时给出了 Cloudflare 的解决方案及迁移到 ZTNA 的步骤建议。","title":"ZTNA能取代VPN吗？——三种远程访问方法对比"},{"content":"前言 前段时间我写了一篇文章《如何用研发效能搞垮一个团队》引起了业界同行大量的讨论与关注，今天想继续聊聊研发效能提升过程中另一个敏感话题：“度量”。讨论度量的目的不是争论对错，而是希望能够引发大家对这一话题的深入思考。\n度量失败的案例 首先来看一些由于度量体系设计不当而引发“内卷”等不良行为的案例。\n比如以“点击量”来度量自媒体运营的成果，那么就有可能出现点击量显著提升，但是公众号的关注人数却下降的现象。原因就是使用“标题党”等手段诱骗读者打开链接，但是实际内容名不副实，几次之后读者就不会继续关注该公众号了。\n再比如以“手术成功率”来考核医生，医生就会刻意回避疑难杂症和重症病人，医生的“手术成功率”是提高了，但重症病人却得不到救治。\n时代变了，很多事物底层逻辑都变了 今天的度量为什么容易失败呢？正如我在之前那篇文章中提到的，面对变革，最重要的并不是方法和技术的升级，而应该是思维模式的升级。我们身处数字化的变革之中，需要将工业化时代科学管理的思维彻底转为字节经济时代的全新思维。\n对于软件研发效能的度量，我们绝大多数时候还在用工业化时代形成的管理理念来试图改进字节经济下的研发模式。但时代变 …","relpermalink":"/blog/murder-case-triggered-by-rd-efficiency-measurement/","summary":"优秀的度量体系设计对目标会有很强的正向牵引作用，不恰当的度量体系往往会引发一场“腥风血雨”。","title":"研发效能度量引发的血案"},{"content":"本文译自：Service Mesh Ultimate Guide - Second Edition: Next Generation Microservices Development。\n主要收获  了解采用服务网格技术的新兴架构趋势，特别是多云、多集群和多租户模式，如何在异构基础设施（裸机、虚拟机和 Kubernetes）中部署服务网格解决方案，以及从边缘计算层到网格的应用 / 服务连接。 了解服务网格生态系统中的一些新模式，如多集群服务网格、媒体服务网格（Media Service Mesh）和混沌网格，以及经典的微服务反模式，如 “死星（Death Star） “架构。 获取最新的关于在部署领域使用服务网格的创新总结，在 Pod（K8s 集群）和 VM（非 K8s 集群）之间进行快速实验、混乱工程和金丝雀部署。 探索服务网格扩展领域的创新，包括：增强身份管理，以确保微服务连接的安全性，包括自定义证书授权插件，自适应路由功能，以提高服务的可用性和可扩展性，以及增强 sidecar 代理。 了解操作方面即将出现的情况，如配置多集群功能和将 Kubernetes 工作负载连接到托管在虚 …","relpermalink":"/blog/service-mesh-ultimate-guide-e2/","summary":"本文是 InfoQ 自 2020 年 2 月发表的服务网格终极指南后的第二版，发布于 2021 年 9 月。","title":"服务网格终极指南第二版——下一代微服务开发"},{"content":"1. 边缘计算专家长成计划 云原生社区边缘计算SIG从2021年4月成立以来，就定位为学习性边缘计算小组，为培养更多的边缘计算专家而奋斗着。到目前为止我们已经有200多位小伙伴，为KubeEdge、SuperEdge、EdgeX Foundry、Karmada等开源项目先后贡献了40多个Commits。我们的开发者也快突破30人，来自不同公司，不同岗位，贡献着不同的开源项目。我们一块在此学习 -\u0026gt; 成长 -\u0026gt; 蜕变。\n以下是我们每周六下午18:30推出的边缘计算专家长成计划*入门篇的20篇合集，跟着我们学习的小伙伴有150多位。在此汇总一篇合集，作为边缘计算专家长成计划*入门篇的小结。\n2. 边缘计算专家入门20篇   第01课：边缘计算深度调研\n 推荐语：深度调研边缘计算，让您从概念、市场、技术、玩家……对边缘计算有个全局的认识，带您走进边缘计算的大门。\n   第02课：云走向边缘，云将无处不在\n 推荐语：边缘计算需要合作共建，靠任意一家厂商拿不下来，必须靠硬件提供商、网络运营商、云厂商、内容提供商……一块干才能彻底打通云边端，实现万物互联！\n   第03课：中国信通院王哲：边缘计算 …","relpermalink":"/blog/edge-sig-learn-20/","summary":"云原生社区边缘计算SIG已经累计发布20篇边缘入门学习，欢迎跟着我们思路长成边缘计算专家！","title":"边缘计算专家长成计划入门20篇"},{"content":"前言 内部有非 K8S 环境上需要类似 SVC 的负载实现，一开始是用 NGINX 做的，所有 SVC 域名都解析成一个 dummy IP ，然后 NGINX 根据 server_name 去 proxy 不同的 upstream 。 开始还是能用的，但是后面结果后面很多服务依赖 host 这个 header ，报错签名错误，而且毕竟这样是在用户态，效率不如内核态高。于是打算搞下之前的打算：把 IPVS 的 ClusterIP 的 SVC 扣到非 K8S 环境上使用。\nkube-proxy 的 SVC 简单讲就是 node 上任何进程访问 SVC IP:SVC PORT 会被 dnat 成 endpoint ，是工作在内核态的四层负载，不会在机器上看到端口监听，而默认非集群的机器是无法访问 SVC IP 。在 K8S 里，endpoint 的 ip 无非就是 POD IP，host IP。前者就是 SVC 选中 POD ，后者例如 kubernetes 这个 SVC ，会 DNAT 成每个 kube-apiserver 的 host IP:6443 端口， …","relpermalink":"/blog/create-a-ipvs-svc-without-container/","summary":"在没有容器的环境下，靠基础的软件实现一个 IPVS 的 SVC 负载。","title":"在非容器环境上实现散装的 IPVS SVC"},{"content":"编者注：本文译自 How Unnecessary Complexity Gave the Service Mesh a Bad Name。\n主要收获  采用服务网格有巨大的价值，但必须以轻便的方式进行，以避免不必要的复杂性。 在实施服务网格时，要采取务实的方法，与技术的核心功能保持一致，并注意分散注意力的问题。 服务网格的一些核心特征包括标准化监控、自动加密和身份识别、智能路由、可靠的重试和网络可扩展性。 服务网格可以提供强大的功能，但这些功能可能会分散对核心利益的注意力，并不被视为实施服务网格的主要原因。 一些值得注意的分心，可能对你的初始实施没有必要，包括复杂的控制平面、多集群支持、Envoy、WASM和A/B测试。  服务网格是Kubernetes世界中的一个热门话题，但许多潜在的采用者已经失去了耐心。服务网格的采用受到了巨大的复杂性和似乎无穷无尽的供应商解决方案的限制。在我自己浏览了这个领域后，我发现采用服务网格有巨大的价值，但必须以轻量级的方式进行，以避免不必要的复杂性。尽管普遍存在幻灭感，但服务网格的前景依然光明。\n在工作中学习 我进入服务网格的世界，始于我在一家历史悠久的 …","relpermalink":"/blog/service-mesh-unnecessary-complexity/","summary":"服务网格是Kubernetes世界中的一个热门话题，但许多潜在的采用者已经失去了耐心。","title":"远离复杂性——服务网格需要更加务实"},{"content":"讲师分享  云原生社区 meetup 第七期深圳站开场致辞 - 宋净超 使用 IAST 构建高效的 DevSecOps 流程 - 董志勇 云原生场景下的开发和调试-汪晟杰，黄金浩 Envoy 在腾讯游戏云原生平台应用 - 田甜 使用 KubeVela 构建混合云应用管理平台 - 邓洪超  ","relpermalink":"/event/cloud-native-meetup-shenzhen-07/","summary":"本次活动关注于 DevSecOps、Envoy、KubeVela、Nocalhost 等。","title":"云原生社区 meetup 第七期深圳站"},{"content":"译者注：本文译自 Envoy 代理的创始人 Matt Klein 于昨晚在个人博客上发布的文章 5 year of Envoy OSS。他在 Twitter 因为自己的程序 bug 造成重大事故而离职，后加入 Lyft，在开源 Envoy 之前几乎没有贡献和管理开源项目的经验，这篇文章分享了他个人及 Envoy 开源的心路历程，在投身开源 Envoy 还是为雇主 Lyft 效命，该如何抉择？看完本文，相信对于开源项目的维护者、创业者及投资人都会大有收获。\n 前言 今天是 Envoy Proxy 开源的 5 周年。毫不夸张地说，在专业方面，过去的 5 年是一个史诗般的过山车，我的情绪介于兴奋、自豪、焦虑、尴尬、无聊、倦怠之间。我想分享一下这个项目的前传和历史，以及我在发展大型开源软件项目的过程中所学到的一些经验教训。\n前传和历史 前传 除了一些小的弯路，我在技术行业二十年的职业生涯一直专注于底层系统：嵌入式系统，操作系统，虚拟化，文件系统，以及最近的分布式系统网络。我的分布式系统网络之旅始于 2010 年初在亚马逊，我有幸帮助开发了第一批高性能计算（HPC）EC2 实例类型。我学到了大量 …","relpermalink":"/blog/envoy-oss-5-year/","summary":"开源网络代理 Envoy 的创始人 Matt Klein，在 Twitter 因为自己的程序 bug 造成重大事故而离职，后加入 Lyft，在开源 Envoy 之前几乎没有贡献和管理开源项目的经验，这篇文章分享了他个人及 Envoy 开源的心路历程，在投身开源 Envoy 还是为雇主 Lyft 效命，该如何抉择？","title":"网络代理 Envoy 开源五周年，创始人 Matt Klein 亲述开源心路历程及经验教训"},{"content":"8 月 22 日，在大连市腾飞园区 5 号楼一楼世达教育，云原生社区 meetup 大连站正式拉开了序幕。此次活动是大连第一次举办如此规模的云原生技术大会，现场到场人数 70+，线上观看人数 700+。来自大连多家头部公司的技术专家围绕云原生，给线上线下的观众奉献了一场精彩的技术盛会。\n让我们再次回顾一下此次 meetup！\n讲师话题 《Connecting,Contorlling and Observing Dubbo Microservices with Flomesh》 主讲人：林杨 Flomesh 首席架构师\n分享了如何使用 Flomesh 实现 Dubbo 项目的服务治理，包括可观测性、metrics、日志收集、灰度发布及限流限速等功能。\n《基于云原生技术的服务最大化可用性》 主讲人：白西原 乐天创研 架构师\n从乐天创研的实践入手，分享了如何基于云原生技术来实现服务最大化，提高服务可用性。\n《分布式系统的发展与趋势分析》 主讲人：张卫滨 金兰科技 软件设计师\n概述了分布式系统的发展过程以及相关的核心技术，展望微服务的发展趋势以及后k8s时代的分布式技术发展分析。 …","relpermalink":"/blog/cloud-native-meetup-dalian-recap/","summary":"2021 年 8 月 22 日，大连，四位讲师均围绕云原生为大家奉献了一场技术盛会。","title":"云原生社区 meetup 第六期大连站回顾"},{"content":"话题  欢迎来到云原生社区大连站 Connecting, Controlling and Observing Dubbo Microservices with Flomesh，林杨 基于云原生技术的服务最大化可用性，白西原（乐天创研） Jutopia 一站式云原生机器学习平台，何昌钦 分布式系统的发展与趋势分析，张卫滨  ","relpermalink":"/event/cloud-native-meetup-dalian-06/","summary":"本次活动关注服务网格、机器学习。","title":"云原生社区 meetup 第六期大连站"},{"content":"本文译自2021 European Tech Hiring Trends，作者The Chief I/O。\n译者评论    官方钦定:码农属于新生代农民工如今不再是程序员的调侃了  最近在社区里看到很多人在讨论国家开始不给大型互联网企业减税，互联网公司股价普跌，大部分距离年内最高点腰斩，个人所得税成为工薪税，程序员被划归为”新生代农名工“，”贫贱不能移“等话题。让我们一起来看看欧洲的IT招聘趋势还有薪资水平，是否国外的月亮就是圆呢？\n   昨天在社区群里传的一张「北京市运维工程师薪资水平」  报告解读 尽管新冠疫情正在逐渐消退，但其影响仍将持续一段时间。本文衡量了疫情对欧洲科技企业招聘的影响，展露了欧洲科技招聘的新趋势。\n 国家的经济规模不断扩大 欧洲国家的失业率保持稳定 招聘活动增加 软件开发人员、程序员的需求量更大 雇主寻求全面发展的技术人才 雇主要求软技能作为主要技能的一部分 39%的招聘信息寻求具有0-2年经验的专业人士 薪资范围从36000到90000欧元 德国和法国在科技人员招聘方面领先 信息和通信业、制造业引领科技招聘  在所有行业中，2020年是一个促进招聘的年份，迫使 …","relpermalink":"/blog/europoe-it-hiring-report-2021/","summary":"2021 年度欧洲 IT 求职报告解读。","title":"疫情期间欧洲 IT 民工招聘趋势报告解读，DevOps、AI 和平台工程师最高年薪 9 万欧"},{"content":"本文译自 Postman’s Series D Funding and the API-First World。\n译者评论 没错，这正是那个被人所熟知，在程序员中广为流传的 Postman，五年前我曾在被一个同事推荐 Chrome 中安装过一个插件，专门用来调试 API 的，这个插件就是 Postman。\n   Postman Chrome App  正文 我很高兴地宣布，今天对 Postman 来说是一个巨大的里程碑。我们已经完成了 D 轮 2.25 亿美元的融资，目前公司的估值为 56 亿美元。本轮融资由 Insight Partners 领投，并有三个新的投资者加入 ——Coatue、Battery Ventures 和 BOND。我们也得到了现有 Postman 投资者 CRV 和 Nexus Venture Partners 的热情参与。此外，DoorDash 产品负责人 Gokul Rajaram 和 Freshworks 创始人 Girish Mathrubootham 作为个人投资者加入。\n API 已经迅速成为全球每个行业、每个国家的开发者使用的软件的基本构 …","relpermalink":"/blog/postman-announces-series-d/","summary":"这就是我们熟悉的那个 API 调试和管理工具 Postman！","title":"印度 API 管理公司 Postman D 轮融资 2.25 亿美元，估值高达 56 亿美元"},{"content":"本文翻译自 gitpod 的 blog 文章 Dev environments as code。\n想象一下，仅在十年前，运维人员还在手动部署、配置和维护软件系统，这大大消耗了他们宝贵的生命和精力。\n而在今天，微服务架构时代，软件系统变得更加复杂，尝试手动维护操作和部署都变的不再可能。在我们进行 “DevOps” 或 “基础设施即代码” 的实践时，发现声明式的描述软件系统对于自动和持续地部署应用程序是必不可少的。\n   那我们的开发环境呢？ 虽然我们已经自动部署了应用程序，但我们中的大多数人还没有将相同的技术应用于开发环境。相反，在项目中招募新团队成员往往需要几个小时来配置他们的开发环境。\n这种情况通常是这样的：\n 新的开发人员接收到项目文档链接 阅读冗长且过时的 setup 说明 在开发终端上安装依赖、更新/降级版本等 尝试运行构建……等待 20 分钟 构建失败，尝试寻找哪里出了问题 询问同事。“哦是的，你还需要做 X 和 Y” 转回步骤 3  经过多次尝试，构建突然起作用了。您不知道为什么，但这现在不重要了。当然，您无法更新文档，因为您也不确定是如何完成设置的，甚至不确定现在的状态是 …","relpermalink":"/blog/dev-env-as-code/","summary":"通过将开发环境的配置，以可执行的格式保存，并将其与项目源码一起存入源码存储库，从而实现开发环境配置的自动化、可复用和版本化。","title":"开发环境即代码：可以运行在云上的开发环境"},{"content":"本文译自 Takeaways from Gartner’s 2021 Hype Cycle for Cloud Security report。\nGartner 在该集团的最新预测中称，2021 年全球公有云服务将增长 26.2%，见 Forecast: Public Cloud Services, Worldwide, 2019-2025, 2Q21 Update。\n2020 年，云计算使 IT 路线图和计划不断向前推进，同时支持不断增长的虚拟劳动力和破纪录的数字转型步伐。麦肯锡对全球高管的调查发现，数字化转型的步伐在 2020 年加快了 7 年。\n此外，61% 的企业将云计算作为其数字化转型工作的一部分，其收入增长了 25% 或更多。云基础设施还使 IT 部门能够满足新的应用程序和系统的紧迫的上市时间表。然而，当云基础设施为应对不可预测的工作负载而扩大和缩小规模时，IT 怀疑论者变成了信徒，而之前的预测数据又无法依赖。\nGartner 引述了疫情之后企业对云计算的加速采用，预计这将推动五年的复合年增长率（CAGR）达到 21.5%。因此，全球公有云服务预计将从 2021 …","relpermalink":"/blog/takeaways-from-gartners-2021-hype-cycle-for-cloud-security-report/","summary":"云原生应用保护平台（CNAPP）和安全服务边缘（SSE）在今年迎来了的云安全领域的上升周期。","title":"从 Gartner 的 2021 年云安全炒作周期报告中得到的启示"},{"content":"本文译自 The Future of Microservices? More Abstractions，作者是 Container Solutions 的主编 Charles Humble。\n微服务是在 10 年前出现的，是软件融合进化的例子之一。虽然这个词可以归功于软件咨询公司 Thoughtworks 的 James Lewis 和 Martin Fowler，Adrian Cockcroft 也曾提出类似的想法。但当时在 Netflix 和许多硅谷的其他公司，如亚马逊、Google 和 eBay 等公司大致在相同的时间内独立搭建了或多或少相同的架构模式。\n在这个词诞生后的十年里，我们看到了 Kubernetes、服务网格和无服务器的兴起，我们也开始看到微服务被应用到了前端。除了可以横向扩展，微服务还可以让开发人员更快地部署代码，有利于组件的可替换性而不是可维护性。\n无论好坏，对许多人来说，微服务已经成为默认的架构选择。对于拥有自主团队和松散耦合系统的组织来说，微服务可以很好地工作，但它们带来了所有分布式系统都无法逃避的复杂性。\n“我坚决认为公共云比私有云和数据中心更好，这些好处是 …","relpermalink":"/blog/the-future-of-microservices/","summary":"在进入微服务时代的十年里，思考一下我们已经走到了哪一步，以及我们还需要解决哪些问题是很有意思的。","title":"微服务的未来——更多层抽象"},{"content":"本文译自 Istio 官方博客。\n这是 Istio 在 2021 年发布的第三个版本，我们要感谢整个 Istio 社区，特别是来自红帽的发布经理 John Wendell、来自 Solo.io 的 Ryan King 和来自英特尔的 Steve Zhang，感谢他们帮助 Istio 1.11.0 发布。该版本正式支持 Kubernetes 1.18.0 到 1.22.x。下面是该版本的一些亮点。\nCNI 插件（Beta） 默认情况下，Istio 会在部署在网格的 pod 中注入一个 init 容器。istio-init 容器使用 iptables 设置 pod 网络流量重定向到（来自）Istio sidecar 代理。这需要网格中部署 pod 的用户或服务账户有足够的权限来部署具有 NET_ADMIN 和 NET_RAW 功能的容器。要求 Istio 用户拥有较高的 Kubernetes 权限，对于组织内的安全合规性来说是有问题的。Istio CNI 插件是 istio-init 容器的替代品，它执行相同的网络功能，但不要求 Istio 用户启用更高的 Kubernetes 权限。 …","relpermalink":"/blog/istio-111-release/","summary":"这是 Istio 在 2021 年度发布的第三个版本。","title":"Istio 1.11 发布"},{"content":"本文翻译自 Bilgin Ibryam 的文章 A Framework for Open Source Evaluation。\n如今，真假开源无处不在。最近开源项目转为闭源的案例越来越多，同时也有不少闭源项目（按照 OSI 定义）像开源一样构建社区的例子。这怎么可能，开源项目不应该始终如此吗？\n开源不是非黑即白，它具有开放性、透明、协作性和信任性的多个维度。有些开源是 Github 上的任何项目，有些必须通过 OSI 定义，有些是必须遵守不成文但普遍接受的开源规范。这里通过看一些商业和技术方面，再讨论社区管理习惯，来同大家分享一下我对评估开源项目的看法。\n免责声明  这些是我的个人观点，与我的雇主或我所属的软件基金会和项目无关。 这不是法律或专业意见（我不是律师，也不是专门从事 OSS 评估的），而是外行的意见。 更新：我收到了多位开源律师的反馈并更新了文章！ 这篇博文由订阅和分享按钮赞助，点击这些按钮表示支持。  知识产权 关于“开源”项目的第一个问题是关于知识产权的所有权。好消息是，即使不了解这些法律含义，你可以应用一个简单的 Litmus 测试。该项目是否属于你信任的信誉良好的开 …","relpermalink":"/blog/a-framework-for-open-source-evaluation/","summary":"开源不是非黑即白，它具有开放性、透明、协作性和信任性的多个维度。本文从多个维度帮你评估一个项目是否符合开源标准。","title":"开源评估框架"},{"content":"本文译自 Istio 官方博客 Security Best Practices。\nIstio 的安全功能提供了强大的身份、策略、透明的 TLS 加密以及认证、授权和审计（AAA）工具来保护你的服务和数据。然而，为了充分安全地利用这些功能，必须注意遵循最佳实践。建议在继续阅读之前，先回顾一下安全概述。\n双向 TLS Istio 将尽可能使用双向 TLS 对流量进行自动加密。然而，代理在默认情况下被配置为许可模式（Permissive Mode），这意味着他们将接受双向 TLS 和明文流量。\n虽然这是为了增量采用或允许来自没有 Istio sidecar 的客户端的流量的需要，但它也削弱了安全立场。建议在可能的情况下迁移到严格模式（Strict Mode），以强制使用双向 TLS。\n然而，仅靠双向 TLS 并不足以保证流量的安全，因为它只提供认证，而不是授权。这意味着，任何拥有有效证书的人仍然可以访问一个服务。\n为了完全锁定流量，建议配置授权策略。这允许创建细粒度的策略来允许或拒绝流量。例如，你可以只允许来自 app 命名空间的请求访问 hello-world 服务。\n授权策略 Istio …","relpermalink":"/blog/istio-security-best-practices/","summary":"本文列举了 Istio 安全的最佳实践。","title":"Istio 安全最佳实践"},{"content":"本文译自 DevSecOps: the Key to Securing Your Supply Chain in a Multi-Cloud Threatscape。\n主要收获   可以将最近的供应链攻击作为 DevSecOps 的一个试金石，我们可以看到在 DevOps 中确实需要一个改进的安全框架。\n  随着网络安全的关注度的提升以及 IT 安全支持的激增，企业应该首先评估他们的 DevOps 做法。\n  DevSecOps 是这样的：利用 CI/CD 平台和容器化，在 SDLC（软件开发生命周期）内增加测试和扫描，并且使用 AI/ML 来最大限度的减少手动安全措施。\n  安全左移或许需要整个组织在多个业务部门之间进行组织架构改变，但整体安全态势将很快得到大幅改善。\n  采用 DevSecOps 框架的企业不仅可以加强对漏洞的预防，还可以增加商业价值，因为他们可以提供更安全的产品和服务，更好地保护其业务和客户。\n  DevSecOps 恰逢其时 随着近期的供应链和云攻击，企业现在正在寻求开发人员来增强企业安全。\n由于迅速转变为远程和混合工作模式，我们看到了所有部门在云计算应用和数字 …","relpermalink":"/blog/devsecops/","summary":"本文从多个角度说明了 DevSecOps 对于供应链安全的重要性。","title":"DevSecOps——在多云环境中确保供应链安全的关键"},{"content":"本文译自 Istio 社区官方博客 Announcing the results of Istio’s first security assessment。\nIstio 服务网格已在各行各业获得广泛的生产应用。该项目的成功，以及其在基础设施中执行关键安全策略的重要用途，都需要对与该项目相关的安全风险进行公开和中立的评估。\n为了实现这一目标，Istio 社区去年与 NCC 集团签约，对该项目进行第三方安全评估。审查的目标是 “确定与 Istio 代码库有关的安全问题，突出管理员常用的高风险配置，并提供关于安全功能是否充分解决它们旨在提供的问题的观点”。\nNCC 集团在 Istio 社区的领域专家的协作下，进行了为期五周的审查。在这篇博客中，我们将研究报告的主要发现，为实施各种修复和建议而采取的行动，以及我们对 Istio 项目的持续安全评估和改进的行动计划。你可以下载并阅读安全评估报告的未删节版本。\n范围和主要发现 本次评估从整体上评估了 Istio 架构的安全相关问题，重点是 Istiod（Pilot）、Ingress/Egress 网关等关键组件，以及 Istio 作为数据平面代理的 …","relpermalink":"/blog/istio-first-security-assessment/","summary":"由 NCC 集团进行的第三方安全审查的结果。","title":"Istio 首次安全评估结果公布"},{"content":"本文译自在 CNCF 官网上发布的博客 Networking with a service mesh: use cases, best practices, and comparison of top mesh options，有删节。作者是 Amir Kaushansky，ARMO 公司的产品 VP。\n服务网格技术是随着微服务结构的普及而出现的。由于服务网格促进了网络与业务逻辑的分离，它使你能够专注于你的应用程序的核心竞争力。\n微服务应用程序分布在多个服务器、数据中心或大陆上，使它们高度依赖网络。服务网格通过用路由规则和服务间包的动态方向控制流量来管理服务间的网络流量。\n在这篇文章中，我们将研究使用案例，比较顶级网格选项，并讨论最佳做法。\n让我们从使用服务网格的最常见场景开始。\n使用案例 服务网格是一种连接微服务和管理它们之间流量的架构方法。它们在一个组织的许多层面上被大量用于生产。因此，有一些标准化的、被广泛接受的用例。\n可观察性 假设你有一个后端服务的实例响应缓慢，在你的整个堆栈中造成了一个瓶颈。然后，来自前端服务的请求将超时，并重新尝试连接到缓慢的服务实例。在服务网格的帮助下， …","relpermalink":"/blog/top-service-mesh-pk/","summary":"服务网格大 PK。","title":"服务网格联网：使用案例、最佳实践和顶级服务网格选择比较"},{"content":"本文译自 Istio 官网。\n当用户将他们的服务转移到Istio服务网格中运行时，他们通常会惊讶地发现，控制平面默认会观察和处理集群中所有命名空间中的所有Kubernetes资源。这对于拥有大量命名空间和部署的大型集群，甚至对于拥有快速流动资源（例如Spark作业）的中等规模的集群来说，都可能是一个问题。\n我们需要一种方法来动态地限制作为网格一部分的命名空间集，以便Istio控制平面只处理这些命名空间的资源。限制命名空间的能力使Istiod能够观察和推送更少的资源和相关的变化到sidecar，从而提高控制平面和数据平面的整体性能。\n背景 默认情况下，Istio监视集群中的所有命名空间、服务、端点和Pod。例如，在我的Kubernetes集群中，我把sleep服务部署在默认命名空间，把httpbin服务部署在ns-x命名空间。我已经把sleep服务添加到网格中，但我没有计划把httpbin服务添加到网格中，或者让网格中的任何服务与httpbin服务交互。\n使用 istioctl proxy-config endpoint 命令来显示 sleep 部署的所有端点。\n   Endpoints …","relpermalink":"/blog/discovery-selectors/","summary":"了解如何使用发现选择器以及它们如何与 Sidecar 资源交互。","title":"使用发现选择器来为你的 Istio 服务网格配置命名空间"},{"content":"话题  开场演讲：欢迎来到云原生社区成都站，宋净超，云原生社区创始人、Tetrate 布道师 Amazon EKS Distro 开源项目解析 \u0026amp; 演示，粟伟，亚马逊云科技资深解决方案架构师 面向量化投资的 AI 平台 ——AI 赋能投资：打造以大数据 + AI 为核心的下一代投资平台，梁举，宽邦科技 CEO 基于 TiDB 的云原生数据库实践，王天宜，TiDB 社区部门架构师 Layotto: 开启服务网格 + 应用运行时新篇章，石建伟（卓与），蚂蚁集团高级技术专家  ","relpermalink":"/event/cloud-native-meetup-chengdu-05/","summary":"本次活动关注 EKS Distro、TiDB、AI 和服务网格。","title":"云原生社区 meetup 第五期成都站"},{"content":"什么是 OPA？ 这是一个始于 2016 年的项目，旨在统一不同技术和系统的策略执行。今天，OPA 被科技行业内的巨头们所使用。例如，Netflix 使用 OPA 来控制对其内部 API 资源的访问。Chef 用它来为他们的终端用户产品提供 IAM 功能。此外，许多其他公司，如 Cloudflare、Pinterest 等，都使用 OPA 在他们的平台上执行策略（如 Kubernetes 集群）。目前，OPA 已从 CNCF 中毕业。\nOPA 有什么用？ 你可能想知道 OPA 是怎样诞生的？它试图解决什么问题？事实上，API 和微服务的策略执行就如同微服务本身一样古老。没有一个生产级别的应用程序不执行访问控制、授权和策略。为了理解 OPA 的作用，考虑以下用例：你的公司通过一个在线门户销售笔记本电脑。像所有其他类似的应用程序一样，该门户由一个首页组成，客户在这里看到最新的产品，也许还有一些限时促销活动。如果客户想买东西，他们需要登录或创建一个账户。接下来，使用信用卡或其他方法付款。为了确保客户会反复访问，需要支持客户订阅，其中可能包含特别折扣信息。另外，他们可以选择在新产品公布后立即接 …","relpermalink":"/blog/introducing-policy-as-code-the-open-policy-agent-opa/","summary":"本文将带你初步了解开放策略代理 OPA，一个平台无关的策略执行工具。","title":"策略即代码——Open Policy Agent（开放策略代理 OPA）简介"},{"content":"译者注 本文作者 Patrick Woods 是 Orbit 公司的创始人和 CEO。Orbit 是一个 SaaS 服务，可以为你的社区提供任务控制，在任何平台上发展和衡量你的社区。\n前言 有人说社区是新的护城河，这是真的：拥有一个社区有助于防止竞争对手的公司或产品进入你的领域。无论这个社区是一群强大的用户、开源贡献者、创造者，甚至只是一个品牌（或特许经营）的超级粉丝，它都能带来更大的品牌知名度、更高的转换成本和规模经济。\n在今天的市场上，买家有无尽的选择，所以公司不能只依靠功能和价格来赢得商业。这就是为什么像 Figma、Lululemon、Salesforce、Sephora 和 Twilio 这样的公司 —— 从开发者平台和 CRM 到消费者品牌 —— 都把社区放在他们战略的首位。还有无数其他公司的例子，他们也有社区，即使他们还没有积极地参与其中。\n不过，社区的好处不仅仅是捍卫自己的行业地位。在当今软件不再被出售，而是被采用的世界里，比以往任何时候都有更多的公司正在拥抱他们以前所忽视的客户、贡献者和粉丝。但是，虽然他们中的一些人确实认识到了社区在他们的 Go To Market（ …","relpermalink":"/blog/community-marketing-why-we-need-go-to-community-not-just-go-to-market/","summary":"社区是新的护城河，市场化（GTM）和社区化（GTC）战略中激励机制的关键区别可以概括为价值获取与价值创造之间的区别。","title":"社区不等于营销——为什么我们要社区化，而不仅是市场化？"},{"content":"北京时间 6 月 1 日晚，据 TechCrunch 报道，KKR和CD\u0026amp;R将以53亿美元收购Cloudera，Cloudera将被私有化。截止到本文发稿，11 点 49 分，Cloudera 股票报价 15.94 美元，涨幅 23.95%。\n   Cloudera 股价  Cloudera曾经是最热门的Hadoop初创公司之一，但是随着时间的推移，这个市场的光芒不再，今天它将被私有化，因为KKR和Clayton Dubilier \u0026amp; Rice这两家私募股权公司宣布他们打算以53亿美元收购Cloudera。目前该公司的市值约为37亿美元。\nCloudera和Hortonworks是Hadoop领域的两家重要初创公司，于2018年以52亿美元的价格合并。Cloudera可能受到激进投资者Carl Icahn的压力，他在2019年持有该公司18%的股份，现在可以从这次出售中获益，该公司表示，每股16美元的价格对股东有24%的溢价。今早开市前，该公司的股价为12.86美元。\n早在十年前，当Hadoop成为处理大数据的方式时，风险资金就涌入了这个领域。随着时间的推移，它失去了一些光辉。因为它是 …","relpermalink":"/blog/cloudera-to-go-private-as-kkr-cdr-grab-it-for-5-3b/","summary":"北京时间 6 月 1 日晚，据 TechCrunch 报道，KKR和CD\u0026R将以53亿美元收购Cloudera，Cloudera将被私有化。","title":"Hadoop时代或将落幕，Cloudera将被私有化"},{"content":"今天是六一儿童节，蚂蚁选择在今天开源 OceanBase，想必是给各位分布式数据库用户送上的儿童节礼物吧！昨日凌晨蚂蚁已将代码推送到 GitHub：https://github.com/oceanbase/oceanbase。\n本次开源的是 OceanBase 社区版，这是一款开源分布式 HTAP（Hybrid Transactional/Analytical Processing）数据库管理系统，具有原生分布式架构，支持金融级高可用、透明水平扩展、分布式事务、多租户和语法兼容等企业级特性。OceanBase 内核通过大规模商用场景的考验，已服务众多行业客户，现面向未来持续构建内核技术竞争力。\nOceanBase 社区版具有以下特点。\n   OceanBase 社区版本特点  不同版本对比。\n   OceanBase 版本对比  OceanBase 社区组织架构 OceanBase 社区治理架构借鉴 Apache 基金会的运作模式，角色分为：\n 技术委员会（Technical Oversight Committee）：是 OceanBase 社区的技术管理机构，负责 OceanBase …","relpermalink":"/blog/ant-oceanbase-open-source/","summary":"今天是六一儿童节，蚂蚁选择在今天开源 OceanBase，想必是给各位分布式数据库用户送上的儿童节礼物吧！","title":"蚂蚁开源 OceanBase，开源分布式数据库领域又迎新玩家"},{"content":"Istio 是由 Tetrate 创始人 Varun Talwar 和谷歌首席工程师 Louis Ryan 命名并在 2017 年 5 月 24 日开源。今天是 Istio 开源四周年，让我们一起来回顾一下 Istio 四年来的发展并展望一下它的未来。\nIstio 的开源历史 2017 年是 Kubernetes 结束容器编排之战的一年，Google 为了巩固在云原生领域的优势，并弥补 Kubernetes 在服务间流量管理方面的劣势，趁势开源了 Istio。下面是截止目前 Istio 历史上最重要的几次版本发布。\n   日期 版本 说明     2017-05-24 0.1 正式开源，该版本发布时仅一个命令行工具。确立了功能范围和 sidecar 部署模式，确立的 Envoy 作为默认 sidecar proxy 的地位。   2017-10-10 0.2 支持多运行时环境，如虚拟机。   2018-06-01 0.8 API 重构。   2018-07-31 1.0 生产就绪，此后 Istio 团队被大规模重组。   2019-03-19 1.1 企业就绪， …","relpermalink":"/blog/istio-4-year-birthday/","summary":"今天是 Istio 开源四周年，让我们一起来回顾一下 Istio 四年来的发展并展望一下它的未来。","title":"Istio 开源四周年回顾与展望"},{"content":"开场致辞 讲师：宋净超（Tetrate 布道师、云原生社区创始人）\n讲师介绍：Tetrate 云原生布道师，云原生社区创始人，CNCF Ambassador。\n有了 Nginx 和 Kong，为什么还需要 Apache APISIX？ 讲师：王院生\n个人介绍：支流科技联合创始人 CTO\n演讲概要\n在云原生时代，k8s 和微服务已经成为主流，在带来巨大生产力提升的同时，也增加了系统的复杂度。如何发布、管理和可视化服务，成为了一个重要的问题。每次修改配置都要 reload 的 Nginx、依赖 postgres 才能工作的 Kong，都不是云原生时代的理想之选。这正是我们创造 Apache APISIX 的原因：没有 reload、毫秒内全集群生效、不依赖数据库、极致性能、支持 Java 和 Go 开发插件。\n听众收益\n更好的理解 API 网关、服务网格，以及各个开源项目的优劣势\n云原生时代的研发效能 讲师：黄国峰\n个人介绍：腾讯 PCG 工程效能专家。10 多年的软件和互联网从业经验；现任腾讯工程效能部，负责持续集成、研发流程和构建系统等平台；曾任职唯品会高级经理，负责架构团队。在云原生 …","relpermalink":"/event/cloud-native-meetup-guangzhou-04/","summary":"本次活动关注于 Dapr 和 APISIX 等。","title":"云原生社区 meetup 第四期广州站"},{"content":"关于 Lura 项目 近日，Lura 项目，原名为 KrakenD 的开源框架，加入了 Linux 基金会，根据一份新闻声明，“它将是唯一一个在中立、开放论坛中托管的企业级 API 网关”。\nKrakenD API 网关的联合创始人兼首席执行官 Albert Lombarte 说，该项目现在每月活跃在 100 多万台服务器上。转到 Linux 基金会后，将技术放在了第一位，而不是企业公司的需求。\n“我们是真正的开源信徒，我们相信开源是这个项目的归宿，“Lombarte 说。“我们已经看到，技术与 API 网关玩得不好，所采取的做法不是技术的最佳做法，“而是为了营销或销售产品的需要，为了锁定客户。“而我们希望能解放这一点，“他指出。\nKrakenD API 网关建立在现在被称为 Lura 项目的基础上，Lombarte 解释说，KrakenD 是一个有主见的实现，即它注重速度而不是其他功能。Lura 是一个构建 API 网关的框架，可以根据企业的需求进行定制。它是为速度和可扩展性而设计的。Lombarte 说，Lura 用 Go 语言构建，是一个无状态、高性能的 API 网关框架，为云原 …","relpermalink":"/blog/krakend-api-gateway-joins-the-linux-foundation-as-the-lura-project/","summary":"这是一个 Go 语言编写的开源 API 网关，与其他 API 网关最主要的区别是它本身也是以微服务和无状态的方式工作。","title":"KrakenD API 网关更名为 Lura 项目并宣布加入了 Linux 基金会"},{"content":"本视频主要演示用 edgeadm 支持一键安装边缘 Kubernetes 集群和原生 Kubernetes 集群，让用户很简单、更灵活、无学习成本的一键化体验边缘自治、云边协同…… 能力，深刻体验 Kubernetes 扩展到边缘的强大。相应的功能是由云原生社区边缘计算SIG的同学和 SuperEdge 社区的同学一块开发的，详细操作文档见：用 edgeadm 一键化部署边缘 Kubernetes 和原生 Kubernete 集群。\n后续社区还有更多实战的活动推出，欢迎关注。\n  使用edgeadm一键化部署边缘Kubernetes和原生Kubernete集群 - bilibili  \n扫描上面的二维码观看视频，或者访问链接，欢迎点赞、评论、转发。\n","relpermalink":"/blog/edgeadm-kubernetes/","summary":"EdgeAdm 边缘计算视频教程分享。","title":"使用 edgeadm 一键化部署边缘 Kubernetes 和原生 Kubernete 集群"},{"content":"本文翻译自 A Reference Architecture for Fine-Grained Access Management on the Cloud。\n什么是访问管理？ 访问管理是识别用户或一组用户是否应该能够访问给定资源（例如主机、服务或数据库）的过程。例如，对于开发人员来说是否可以使用 SSH 登录生产应用程序服务器，如果可以，那么可以登录多长时间？如果 SRE 在非支持时间尝试访问数据库，他们这样做？如果数据工程师已转移到其他团队，他们是否应该继续访问 ETL 管道的 S3 存储桶？\n现在如何进行访问管理？ 在云上各种基础设施和数据服务激增之前，访问管理是 DevOps 和 Security 团队要解决的相对简单的问题。VPN 和堡垒主机是（现在仍然是）在网络级别封锁所有关键资源的首选机制。用户必须先通过 VPN 服务器进行身份验证，或者登录到堡垒主机，然后才能访问专用网络上的所有资源。\n   当资源是静态的并且它们的数量相对较小时，此方法效果很好。但是，随着越来越多的资源动态地涌入专用网络的各处，VPN / 堡垒主机解决方案变得站不住脚。\n具体来说，在三个方面，VPN  …","relpermalink":"/blog/access-management-reference-architecture/","summary":"本文翻译自 Manav Mital 的文章 A Reference Architecture for Fine-Grained Access Management on the Cloud。","title":"云上细粒度访问管理的参考架构"},{"content":"本文译自 ZDNet 的文章 New Relic open sources Pixie, its Kubernetes-native in-cluster observability platform，译者宋净超。\n 好消息是，云计算、Kubernetes 和云原生计算结合在一起，使软件开发比以前更快、更强大。坏消息是，保持对所有这些的关注比以往任何时候都更难。这就是为什么 New Relic 将其 Kubernetes 原生集群内观察平台 Pixie 作为一个新的开源项目，在 Apache 2.0 许可下贡献给云原生计算基金会（CNCF）的原因，这是一个好消息。\nPixie 是一个新的云原生应用程序的可观察性平台。有了它，开发人员可以通过一个 shell 命令看到他们应用程序的所有指标、事件、日志和追踪。有了 Pixie，你不需要添加度量（instrumentation ）代码，设置临时仪表板，或将数据移出集群，就能看到正在发生的事情。这将为你节省宝贵的时间，这样你就可以致力于建立更好的软件，而不是用更好的方法来监控它。\n该程序作为一组 Kubernetes 服务部署在被监控的集群 …","relpermalink":"/blog/new-relic-open-sources-pixie-its-kubernetes-native-in-cluster-observability-platform/","summary":"想知道你的 Kubernetes 集群中到底发生了什么？刚刚成为云原生计算基金会项目的 Pixie 可以提供帮助。","title":"New Relic 开源 Pixie，其 Kubernetes 原生集群内观察平台"},{"content":"译者注 这篇论文是我在翻译 Envoy 官方文档的 FAQ：Envoy 基准测试最佳实践时看到的，这篇论文学术气息非常浓厚，作者思维之缜密，态度之严谨，令人折服。这篇文章中对基准测试的一些常见误区，还有考虑问题的角度，在我们平时处理问题的时候，我觉得很有借鉴意义。所以翻译过来和大家共同学习。\n基准测试五宗罪 在审阅系统论文时（有时甚至在阅读已发表的论文时），我经常会遇到对基准测试极具误导性的使用。我并不是说作者有意误导读者，这大概率是作者能力有限。但这不是借口。\n我称这类案件为基准测试犯罪。不是因为你会为了他们入狱（但可能应该这样做），而是因为它们破坏了科学过程的完整性。请放心，如果我是论文的审稿人，并且你的论文中包含其中一项的话，那么你基本上是会被拒绝的。除非剩下的工作非常不错，以至于能让我宽恕你的基准测试犯罪（即使那样，你也将被要求在最终版本中进行修复）。\n以下列表正在处理中，当我遇到（或记起）更多基准测试犯罪的系统时，我会不断添加它。\n选择性基准测试 这是所有基准测试犯罪的源头：使用一组有偏见的基准测试（似乎）证明了这一点，这可能与更广泛的评估空间相矛盾。这清楚地表明，最好的情况 …","relpermalink":"/blog/benchmarking-crimes/","summary":"在审阅系统论文时（有时甚至在阅读已发表的论文时），我经常会遇到对基准测试极具误导性的使用。我并不是说作者有意误导读者，这大概率是作者能力有限。但这不是借口。","title":"基准测试五宗罪"},{"content":"本文译自 Tetrate 发布的《零信任架构白皮书》。\n背景介绍 传统的数据中心网络安全架构试图在一个优美的内部花园周围建立强大的围墙。这种堡垒模型长久以来存在一个固有的弱点，即当（而不是如果）入侵者渗透到周边时，他们就可以控制整个花园。虽然这个弱点早就存在，但随着进入数据中心的入口的增加及工作负载的扩展的趋势增加，这个弱点越发严重。\n零信任网络架构提供了一条前进的道路，它解决了基于周界安全的弱点，采取的立场是网络本身就是敌对的；周界背后的安全是一种幻觉，野蛮人已经撞开了大门。\n虽然零信任需要对现状进行重大反思，但它远不是一个崇高的、不可实现的目标。现在就有一些工具可以开始实施零信任网络架构。这些工具和实践可以逐步实施，以满足你的需要，而不是要求你全盘重新构建你的整个网络安全基础设施。\n传统安全模式的弱点 周边安全薄弱的原因与现代军队放弃大规模固定防御的原因类似：一旦被渗透，战斗就会失败；而周边安全最终也会被渗透。\n**单纯的周边安全提供了糟糕的控制粒度。**如果周界内的所有流量都是可信的，那么一个漏洞就会使周界内的一切都变得脆弱。当网络服务只有几十种时，这可能是可控的，而且可以通过物 …","relpermalink":"/blog/zero-trust-architecture/","summary":"本文译自 Tetrate 发布的《零信任架构白皮书》。","title":"零信任架构白皮书"},{"content":"译者注：本文译自 Evolving Kubernetes networking with the Gateway API， Gateway API 的出现解决了 Ingress 的可移植性问题，且有利于基于角色的访问设计。\nIngress 资源是 Kubernetes 众多成功案例中的一个。它创造了一个多样化的 Ingress 控制器的生态系统，这些控制器以标准化和一致的方式在数十万个集群中使用。这种标准化有助于用户采用 Kubernetes。然而，在 Ingress 创建五年后，有迹象表明它被分割成不同但惊人相似的 CRD 和 过载的注释。Ingress 普遍存在的可移植性问题也限制了它的未来。\n那是在 2019 年圣地亚哥的 Kubecon 上，一群充满激情的贡献者聚集在一起，讨论 Ingress 的发展。拥挤的人群溢出到了街对面的酒店大堂，而讨论出来的东西后来被称为 Gateway API。这次讨论是基于几个关键的假设：\n 路由匹配、流量管理和服务暴露所依据的 API 标准已经商业化，对其实施者和用户提供的定制 API 的价值很小。 可以通过共同的核心 API …","relpermalink":"/blog/evolving-kubernetes-networking-with-the-gateway-api/","summary":"Gateway API 的出现解决了 Ingress 的可移植性问题，且有利于基于角色的访问设计。","title":"利用 Gateway API 发展 Kubernetes 网络"},{"content":"开场致辞 讲师：宋净超（Tetrate 布道师、云原生社区创始人）\n讲师介绍：Tetrate 云原生布道师，云原生社区创始人，CNCF Ambassador。\n使用 Chaos Mesh 来保障云原生系统的健壮性 讲师：周强\n公司：PingCAP\n讲师介绍：周强，PingCAP 工程效率负责人，Chaos Mesh 负责人，专注稳定性和性能测试平台。在混沌工程领域有 4 年的从业经验，领导开发云原生混沌测试平台 Chaos Mesh。\n演讲概要:\n在云原生的世界中，错误无处不在，混沌工程在提高系统稳定性方面起着至关重要的作用。通过执行混沌工程实验，我们可以了解系统的弱点并主动解决。我们开发了云原生混沌工程平台 Chaos Mesh，并在内部使用 Chaos Mesh 来提升云原生分布式数据库 TiDB 的健壮性。目前 Chaos Mesh 已加入 CNCF Sandbox 项目，该平台依托于 k8s 基础设施，通过对 pod/container 进行诸如杀节点、IO 错误和延时注入、时间回退、内核分配内存失败等等来进行混沌测试。主题大纲:\n 在分布式领域会遇到的质量和稳定性问题 混沌工 …","relpermalink":"/event/cloud-native-meetup-hangzhou-03/","summary":"本次活动关注于 ChaosMesh、Envoy 和 KubeVela。","title":"云原生社区 meetup 第三期杭州站"},{"content":"网络应用性能会影响用户的留存率。如果页面加载时间过长，用户就会放弃。所以我们需要监控 Web 应用来了解性能，确保服务稳定、可用、健康。Apache SkyWalking 是一款专门为云原生和基于容器架构设计的应用性能监控（APM）工具。其 skywalking-client-js 是一个轻量级的客户端 JavaScript 异常、性能和追踪库。\n本文介绍了 skywalking-client-js 如何将其监控扩展到浏览器，为 SkyWalking 后端提供性能指标和错误收集。\n性能指标 skywalking-client-js 使用 window.performance 来收集性能数据。从 MDN 文档来看，性能接口提供了对当前页面的性能相关信息的访问。它是 High Resolution Time API 的一部分，但对 Performance Timeline API、Navigation Timing API、User Timing API 和 Resource Timing API 有所增强。\n在 skywalking-client-js 中，所有的性能指标都是根据 W3C …","relpermalink":"/blog/end-user-tracing-in-a-skywalking-observed-browser/","summary":"本文介绍了 skywalking-client-js 如何将其监控扩展到浏览器，为 SkyWalking 后端提供性能指标和错误收集。","title":"SkyWalking 前端监控的应用"},{"content":"本文译自 Using Traefik Ingress Controller with Istio Service Mesh。\nIstio 服务网格自带 ingress，但我们经常看到有要求使用非 Istio ingress 的客户。此前，我们已经介绍过将 NGINX 与 Istio 集成的情况。最近，我们一直在与使用 Traefik ingress 的客户合作。通过对我们之前建议的方法进行一些轻微调整，我将向你介绍如何实现 Traefik 作为 Istio 服务网格的入口网关。\n流量的流向如下图所示。一旦请求从 Traefik Ingress 到达服务网格，Istio 就能够对请求应用安全性、可观察性和流量引导规则。\n   传入的流量绕过 Istio sidecar，直接到达 Traefik，所以请求终止在 Traefik ingress。\nTraefik 使用 IngressRoute 配置重写 Host 头以匹配目的地，并将请求转发到目标服务，这是一个多步骤的过程。\n 从 Traefik Ingress 出来的请求被重定向到 Istio sidecar（由 iptables）。 …","relpermalink":"/blog/using-traefik-ingress-controller-with-istio-service-mesh/","summary":"本文演示了如何将 Traefik Ingress 作为 Istio 服务网格的入口点。","title":"在 Istio 服务网格中使用 Traefik Ingress Controller"},{"content":"本文翻译自 To Multicluster, or Not to Multicluster: Inter-Cluster Communication Using a Service Mesh。Istio 服务网格是解决 Kubernetes 集群间通信的一个关键，虽然翻译这篇文章距离原文发表也有快 2 年时间了，但是其中的很多观点仍不过时。\n主要观点  Kubernetes 已经成为容器编排的事实标准，许多组织都运行着多个集群。集群内的通信是一个解决了的问题，但是跨集群的通信需要更多的设计和操作开销。 在决定是否实施多集群支持之前，你应该了解你的通信用例。 你还应该确定你想要从解决方案中获得什么（单一界面的观察性、统一信任域等），然后制定一个关于如何实现这些的计划。 有几种多集群服务网格方法，如共同管理、集群感知服务通过网关路由、扁平网络和 split-horizon 端点发现服务（EDS）。 Istio 有现有的多集群支持，在 1.1 中还有额外的新功能，甚至未来还会有更多的功能出现。  Kubernetes 已经成为企业中容器编排的事实标准。这是有充分理由的 —— 它提供了一系列功 …","relpermalink":"/blog/multi-cluster-service-mesh/","summary":"是否该使用服务网格构建多集群？本文会给你答案。","title":"是否选择多集群——使用服务网格的集群间通信"},{"content":"本文译自 The Evolution of Distributed Systems on Kubernetes。\n在 3 月份的 QCon 上，我做了一个关于 Kubernetes 的分布式系统进化的演讲。首先，我想先问一个问题，微服务之后是什么？我相信大家都有各自的答案，我也有我的答案。你会在最后发现我的想法是什么。为了达到这个目的，我建议大家看看分布式系统的需求是什么？以及这些需求在过去是如何发展的，从单体应用开始到 Kubernetes，再到最近的 Dapr、Istio、Knative 等项目，它们是如何改变我们做分布式系统的方式。我们将尝试对未来做一些预测。\n现代分布式应用 为了给这个话题提供更多的背景信息，我认为的分布式系统是由数百个组件组成的系统。这些组件可以是有状态的、无状态的或者无服务器的。此外，这些组件可以用不同的语言创建，运行在混合环境上，并开发开源技术、开放标准和互操作性。我相信你可以使用闭源软件来构建这样的系统，也可以在 AWS 和其他地方构建。具体到这次演讲，我将关注 Kubernetes 生态系统，以及你如何在 Kubernetes 平台上构建这样一个系统。 …","relpermalink":"/blog/distributed-systems-kubernetes/","summary":"本文翻译自 Bilgin Ibryam 的文章 The Evolution of Distributed Systems on Kubernetes。","title":"分布式系统在 Kubernetes 上的进化"},{"content":"本文译自 Cloud-Native Is about Culture, Not Containers，文章洋洋洒洒上万字，作者总结了她见过的云原生失败的各种经验教训，还用生动的示例说明了什么不是云原生。译者是在周末闲暇时间仓促间翻译的，其中难免有不当之处，请读者指正。\n 本文主要观点：\n 不需要一味的微服务，就可以做到非常的云原生。 在开始云原生转型之前，必须明确云原生对你的团队意味着什么，以及要解决的真正问题是什么。 如果发布涉及繁琐的仪式，不经常发布，而且所有的微服务都必须同时发布，那么微服务架构的好处将无法得到落实。 持续集成和部署是你要做的事情，而不是你买的工具。 过度的治理扼杀了云的效率，但如果你对消耗的东西不够重视，就会造成严重的浪费。  在去年的伦敦 QCon 大会上，我提供了一个关于文化而非容器的云原生会议。让我开始思考文化在云原生中的作用的是 Bilgin Ibryam 一篇很棒的 InfoQ 文章。Bilgin 做的其中一件事是将云原生架构定义为很多微服务，通过智能管道连接。我看了之后，觉得它看起来完全不像我写的应用，尽管我认为我在写云原生应用。我是 IBM …","relpermalink":"/blog/cloud-native-culture-not-container/","summary":"作者总结了她见过的云原生失败的各种经验教训，还用生动的示例说明了什么不是云原生。","title":"云原生关乎文化，而不是容器"},{"content":"前言 2021 年伊始，如果你想要在生产环境中落地 Service Mesh，那 Istio 一定已经在你的考虑范围之内。\nIstio 作为目前最流行的 Service Mesh 技术之一，拥有活跃的社区和众多的落地案例。但如果你真的想在你的生产环境大规模落地 Isito，这看似壮观美好的冰山下，却是暗流涌动，潜藏着无数凶险。\n本文是笔者深度参与百亿量级流量生产环境研发和落地 Istio 两年来的经验总结和一些思考，以期读者在自己生产环境引入 Isito 前，能有所参考和启发，做好更充足的准备，能更轻松的“入坑” Istio。\n如果你对 Service Mesh 的概念还不甚了解，可先行阅读《云原生时代，你应该了解的 Service Mesh》。\n使用 Isito 前的考虑要素 使用 Istio 无法做到完全对应用透明 服务通信和治理相关的功能迁移到 Sidecar 进程中后， 应用中的 SDK 通常需要作出一些对应的改变。\n比如 SDK 需要关闭一些功能，例如重试。一个典型的场景是，SDK 重试 m 次，Sidecar 重试 n 次，这会导致 m * n 的重试风暴，从而引发风险。\n …","relpermalink":"/blog/the-facts-of-using-istio/","summary":"深度落地 Istio 两年的若干思考。","title":"在生产环境使用 Istio 前的若干考虑要素"},{"content":"Istio 是云原生世界中最受欢迎、发展最迅速的开源项目之一；虽然这种增长充分说明了用户从 Istio 中获得的价值，但其快速的发布节奏对于用户来说也是一种挑战，因为他们可能要同时管理多个不同版本的 Istio 集群，并为云平台手动配置 CA 证书。\n概述 我们今天推出了一个名为 GetIstio 的新开源项目，为用户提供了安装和升级 Istio 的最简单方法。GetIstio 提供了一个经过审核的 Istio 上游发行版–Istio 的强化镜像，并提供持续的支持，安装、管理和升级更加简单。它将与云原生和流行的 on-prem 证书管理器（如 AWS ACM、Venafi 等）进行整合。此次发布的内容包括：\n GetIstio CLI，最简单的方式来安装，操作和升级 Istio。GetIstio 提供了一个安全的、经过审核的、上游的 Istio 发行版，经过 AKS、EKS 和 GKE 的测试。 免费的 Istio 基础在线课程，现在可以在 Tetrate 学院获得。 一个新的社区，汇集了 Istio 和 Envoy 用户和技术合作伙伴。  GetIstio CLI GetIstio  …","relpermalink":"/blog/getistio-launching/","summary":"GetIstio 为用户提供了安装和升级 Istio 的最简单方法。","title":"Tetrate 开源 GetIstio：简单、安全、企业级的 Istio 发行版"},{"content":"本文来自酷家乐先进技术工程团队，作者罗宁，酷家乐资深开发工程师。\n公司背景 酷家乐公司以分布式并行计算和多媒体数据挖掘为技术核心，推出的家居云设计平台，致力于云渲染、云设计、BIM、VR、AR、AI 等技术的研发，实现“所见即所得”体验，5分钟生成装修方案，10秒生成效果图，一键生成 VR 方案的 SAAS 云端软件服务平台。\n核心问题 公司快速增长的业务需求，使得支持各开发语言的 Serverless 设施在国内外六个 Kubernetes 集群上线落地，但公司现状已有一套成熟的自研 Java 服务服务治理系统，承载了部署在 Kubernetes / KVM 平台的上千服务。这两者的服务治理体系完全不同，如何打通之间的调用顺利落地 Serverless 平台为产品功能研发增加效能呢？\n策略制定 酷家乐使用的成熟开源 Serverless 设施是依赖于 Istio 服务网格的 Knative，在 Kubernetes 集群中 Istio 提供的灵活又强大的动态路由/流量管理功能，配上一些相关的网关设施，不仅可以巧妙的解决不同体系服务相互调用的问题，且依旧保持了在酷家乐目前治理体系下的灵 …","relpermalink":"/blog/coohom-istio-practice/","summary":"酷家乐的 Istio 使用实践分享。","title":"酷家乐如何使用 Istio 解决新服务治理系统（Serverless）接入已有成熟自研 Java 服务治理体系"},{"content":"本文为我跟 Ignasi Barrera 共同创作，本文英文版首发于 TheNewStack。\n不同的公司或软件供应商已经设计了无数种方法来控制用户对功能或资源的访问，如酌情访问控制（DAC）、强制访问控制（MAC）、基于角色的访问控制（RBAC）和基于属性的访问控制（ABAC）。从本质上讲，无论何种类型的访问控制模型，都可以抽象出三个基本要素：用户、系统 / 应用和策略。\n在本文中，我们将介绍 ABAC、RBAC 以及一种新的访问控制模型 —— 下一代访问控制（NGAC），并比较三者之间的异同，以及为什么你应该考虑 NGAC。\n什么是 RBAC？ RBAC，即基于角色的访问控制，采用的方法是根据用户在组织中的角色授予（或拒绝）对资源的访问。每个角色都被分配了一系列的权限和限制，这很好，因为你不需要跟踪每个系统用户和他们的属性。你只需要更新相应的角色，将角色分配给用户，或者删除分配。但这可能很难管理和扩展。使用 RBAC 静态角色模型的企业经历了角色爆炸：大公司可能有数万个相似但不同的角色或用户，他们的角色会随着时间的推移而改变，因此很难跟踪角色或审计不需要的权限。RBAC 具有固定的 …","relpermalink":"/blog/why-you-should-choose-ngac-as-your-access-control-model/","summary":"本文将向你介绍下一代权限控制模型——NGAC，并对比 ABAC、RABC，说明为什么要选择 NGAC。","title":"为什么应该选择使用 NGAC 作为权限控制模型"},{"content":"背景 Istio 作为当前最活跃的 service mesh 项目，提供着众多的能力，流量管理，安全性，可观察性，每一项能力都是服务治理，运维所必需的。Istio 丰富的能力同时也带来一定性的复杂系统运维的挑战，但是相对于能力以及未来的扩展性，Istio 能力给服务治理带来了无限的想象，机遇同时充满着挑战。\n当前涂鸦智能前端业务 Istio 控制面版本为 1.5.0，接入 Istio 控制面 700 + 服务，1100+pod 实例，承担涂鸦智能前端最大的业务集群的流量管控和能力支撑。\n涂鸦智能在开发流程上存在的问题 前端基础团队 2018 年开始接触 Kubernetes，并基于 kubernetes 自建了发布平台服务于前端业务团队，但随着业务团队越来越大，开发发布流程上开始出现一些问题：\n 多分支并行开发的验证问题 多地域环境带来的配置复杂性导致的线上问题  最开始考虑让业务团队自己内部调整处理，但由于出现问题的团队越来越多，我们开始考虑通过灰度发布能力来解决这些开发发布流程上的问题，在日常预发环境，多个分支发布多个灰度版本，根据不同的 header 分发流量到不同版本， …","relpermalink":"/blog/tuya-istio-case/","summary":"涂鸦智能使用 Istio 的实践分享。","title":"涂鸦智能的 Istio 企业级生产环境的实践"},{"content":"本文为翻译文章，点击查看原文。\nIstio 1.9 版本的重点是改善用户在生产中运行 Istio 的 Day2 操作。在用户体验工作组收集到的反馈意见的基础上，我们希望改善用户的稳定性和整体升级体验。稳定性的一个关键是明确 Istio 核心 API 和功能发布的功能状态，并增强它们的稳定性，使用户能够放心使用 Istio 的这些功能，这是 1.9 版本的另一个重点。\n请关注我们的博客，了解我们的 2021 年路线图，我们将在那里展示我们对持续改善 Day 2 体验的关注。\n感谢我们的用户参与了用户体验调查和共鸣会，帮助我们确保 Istio 1.9 是迄今为止最稳定的版本。\n这是 2021 年的第一个 Istio 版本。我们要感谢整个 Istio 社区，特别是发布经理 Shamsher Ansari（Red Hat）、Steven Landlow（Google）和 Jacob Delgado（Aspen Mesh），感谢他们帮助我们发布 Istio 1.9.0。\nIstio 1.9.0 正式支持 Kubernetes 1.17.0 至 1.20.x 版本。\n以下是本次发布的一些亮点。\n虚 …","relpermalink":"/blog/istio-19-release/","summary":"北京时间 2021 年 2 月 10 日晨，Istio 1.9 发布，这是 2021 年的第一个版本。","title":"Istio 1.9 发布"},{"content":"2020 年是云原生社区的起步之年，感谢所有云原生社区的参与者和合作伙伴们！在此新春佳节之际，祝大家新春快乐，万事如意！\n下面我们一起回顾下云原生社区在过去一年来的进展，同时感谢社区讲师、贡献者、志愿者、SIG 负责人和城市站站长。\n城市站 云原生社区相继成立了北京站、上海站、成都站、深圳站、南京站、杭州站等 20 个城市站。\n北京站    社区由核心成员罗广明、王殿进、王福印来组织与筹划社区发展与线下活动等事宜。我们热爱开源事业，热爱云原生技术。希望有更多人加入社区，一起组织线下活动，在北京推广云原生技术。\n   2020 年 8 月 30 日，云原生社区北京站成立活动。\n   2020 年 12 月 20 日，云原生社区meetup，第二期，北京站合影。\n   在中场环节《云原生操作系统 Kubernetes》作者之一张城在签字售书。\n   本次活动由云原生社区及 Tetrate 联合举办，感谢中国信通院 CCSA、电子工业出版社博文视点赞助，Dubbo Go 社区、ServiceMesher 社区及 CNCF 的大力支持。\n上海站    云原生社区上海站成立于2020年8月，由核 …","relpermalink":"/blog/community-summary-2020/","summary":"感谢过去一年来所有云原生社区的参与者及合作伙伴们！","title":"云原生社区 2020 年度总结及证书颁发"},{"content":"Kubernetes 作为 eBay 的统一云平台，统管了在线业务、大数据、搜索后台等多种异构应用。集群数量高达上百，其中的大型集群中，单个集群运行数千个微服务，数十万 Pod。不同类型的应用，针对流量管控的需求也各有不同，如何用一套统一的模型将各种流量管控需求统一起来是 eBay 多年来一直面临的挑战。\n以云应用为例，为实现跨数据中心高可用的需求，生产应用的网络拓扑可以简要描述如下：\n eBay 采用多活数据中心的网络拓扑，因此任何生产应用都需要完成跨三个数据中心的部署。 为满足单集群的高可用，针对每个数据中心，任何应用都需进行多副本部署，并配置负载均衡。 以实现全站微服务化，但为保证高可用，服务之间的调用仍以南北流量为主。 针对核心应用，除集群本地负载均衡配置以外，还需配置跨数据中心负载均衡，并通过权重控制将 99% 的请求转入本地数据中心，将 1% 的流量转向跨地域的数据中心。该配置的主要目的是当某应用的所有本地服务实例失效时，运维可快速将跨数据中心负载均衡器上指向本地的 99% 流量的成员禁止掉，流量可在秒级转向其他数据中心从而保护业务不受影响。业务版本发布、硬件故障、防火墙、 …","relpermalink":"/blog/ebay-istio/","summary":"eBay 的 Istio 使用实践分享。","title":"eBay 基于 Istio 的统一流量管理实践"},{"content":"很荣幸收到 CSDN 的邀请，接受” 云原生人物志 “专栏采访，其实我从 2017 年起就已经在撰写 Kubernetes 和云原生年度总结和新年展望，今天在此聊抒己见，欢迎大家讨论和指正。\n云原生在演进 云原生是一种行为方式和设计理念，究其本质，凡是能够提高云上资源利用率和应用交付效率的行为或方式都是云原生的。云计算的发展史就是一部云原生化的历史。Kubernetes 开启了云原生 1.0 的序幕，服务网格 Istio 的出现，引领了后 Kubernetes 时代的微服务，serverless 的再次兴起，使得云原生从基础设施层不断向应用架构层挺进，我们正处于一个云原生 2.0 的新时代。\n业界动向 最近国内的一些云厂商，如阿里云、腾讯云、华为云陆续发布了各自的云原生相关的架构和实践白皮书。\n 2020 年 7，中国信通院发布了《云原生产业白皮书（2020）》。 2020 年 12 月 20 日，在腾讯 2020 Techo Park 开发者大会上，腾讯云正式发布了《云原生最佳实践路线图》，同时发布的还有一份 3 万多字的《腾讯云原生路线图手册》。 2020 年 12 月 23 日， …","relpermalink":"/blog/cloud-native-2021/","summary":"本文为应 CSDN《云原生人物志》栏目专访，知微见著，窥见云原生价值与趋势。","title":"“寒武纪大爆发” 之后的云原生，2021 年走向何处？"},{"content":"非常有幸参加了云原生社区 Meetup 北京站，有机会和众多业内的大牛一起讨论云原生相关的技术和应用，本次 Meetup 上我和大家分享了关于云原生下的可观测性相关的议题，相关的视频可以移步《B 站视频回放：云原生下的可观测性》回看，本篇文章主要是视频的文字性总结，欢迎大家留言讨论。\n可观测性的由来 可观测性最早来自于电气工程领域，主要原因是随着系统发展的逐步复杂，必须要有一套机制用来了解系统内部的运行状态以便更好的监控和问题修复，为此工程师们设计了很多传感器、仪表盘用于表现系统内部的状态。\n A system is said to be observable if, for any possible evolution of state and control vectors, the current state can be estimated using only the information from outputs.\n 电气工程发展了上百年，其中各个子领域的可观测性都在进行完善和升级，例如交通工具（汽车 / 飞机等）也算的是可观测性上的集大成者。抛开飞机这种超级工程不谈，一 …","relpermalink":"/blog/cloud-native-observability/","summary":"本文来自云原生社区 meetup 北京站的分享。","title":"解读：云原生下的可观测性发展方向"},{"content":"本文译自 Envoy 官方文档 HTTP connection management\nHTTP 连接管理 HTTP 是现代面向服务体系架构的重要组成部分，Envoy 实现了大量的 HTTP 特定功能。Envoy 内置了一个叫 HTTP 连接管理器 的网络层过滤器。 此过滤器将原始字节转换为 HTTP 协议的消息和事件，例如，请求头接收、请求体数据接收、请求标尾 (trailers) 接收等。 过滤器同时处理所有 HTTP 连接和请求的通用功能，例如 访问日志、 请求 ID 生成与追踪、 请求头/响应头的操作、 路由表 管理和 统计。\nHTTP 连接管理器 配置。\nHTTP 协议 Envoy 的 HTTP 连接管理器原生支持 HTTP/1.1、WebSockets 和 HTTP/2。现在还不支持 SPDY。Envoy HTTP 设计的首要目标是成为一个 HTTP/2 多路复用代理。在内部， HTTP/2 术语用于描述系统组件。例如，一个 HTTP 请求和响应发生在流上。一个编解码 API 被用来将不同的电报协议转换为流、请求、响应等协议无关的格式。 对于 HTTP/1.1 来说，编解码器 …","relpermalink":"/blog/envoy-http-connection-management/","summary":"本文翻译自 Envoy 官方文档，介绍内置网路层过滤器 HTTP 连接管理器。","title":"Envoy HTTP 连接管理"},{"content":"在任何公司，网络用户必须经过认证和授权，才能访问系统中可能导致安全漏洞的部分。获得授权的过程称为访问控制。在本指南中，我将讨论管理系统访问控制的两种主要方法 —— 基于角色的访问控制（RBAC）和基于属性的存取控制（ABAC）它们的差异，以及使用访问权限管理工具的重要性。\n认证和授权 安全的两个基本方面是认证和授权。在您输入凭证登录电脑或登录应用程序或软件后，设备或应用程序会进行身份验证，以确定您的授权级别。授权可能包括您可以使用哪些账户，您可以访问哪些资源，以及允许您执行哪些功能。\n基于角色的访问控制（RBAC）与基于属性的访问控制（ABAC） 基于角色的访问控制（RBAC）和基于属性的访问控制（ABAC）是控制认证过程和授权用户的两种方法。RBAC 和 ABAC 之间的主要区别是 RBAC 基于用户角色提供对资源或信息的访问，而 ABAC 基于用户、环境或资源属性提供访问权限。从本质上讲，当考虑 RBAC 与 ABAC 时，RBAC 控制整个组织的广泛访问，而 ABAC 则采取细粒度的方法。\n什么是 RBAC？    RBAC 是基于角色的，所以根据你在组织中的角色而拥有不同的访问 …","relpermalink":"/blog/rbac-vs-abac/","summary":"本文主要研究了 RBAC 和 ABAC 这两种访问能控制之间的异同。","title":"RBAC vs ABAC，两者有何异同？"},{"content":"直到最近，最流行的授权方法是基于角色的访问控制（RBAC）。这种解决方案涉及到创建一套角色，定义组织内所有的工作描述和功能，然后给用户分配角色，决定他们可以访问的内容（例如，文件、网络、应用程序、网页上的一个字段），以及他们可以执行的操作。\n当使用 RBAC 时，系统管理员可以控制用户可以对特定的 IT 资源做什么，以及他们可以访问哪些区域。它的实现很简单，因为只有三个基本原则需要牢记，角色是基于 “角色分配”、“角色授权 “和 “权限授权 “的。然而，RBAC 并非没有问题和局限性。其中一个主要问题是，它不是一个自动的过程，这意味着它需要进行艰苦的管理，并且经常涉及大量的人工干预。\n例如，假设你的组织结构图已经和你的员工名单以及他们的头衔一起最终确定，你已经准备好推出你的 RBAC 计划。你已经把所有的角色摆在你面前，你很自信，他们都有明确的定义，并且有正确的汇报线和控制范围。突然间，市场部副总裁提到，他们部门里有一些人需要访问某些资源、共享文件夹和专门的应用程序，而这些资源和应用程序只有其他部门的角色才能使用。你不能对副总裁说 “不”，所以你检查已有的映射，并试图找到一组额外的符合 …","relpermalink":"/blog/problem-with-rbac/","summary":"本文主要讲述了 RBAC 面临的主要挑战。","title":"基于角色的访问控制（RBAC）存在的问题"},{"content":"在 Envoy 网关和 Service Mesh 服务网格落地过程中，大部分组织和公司几乎不可避免的需要对 Envoy 做一些二次开发和功能增强，以应对自身的个性化需求，只是或多或少的问题。虽然 Envoy 本身基于 L4/L7 Filter 提供了非常灵活可扩展性，可以让开发者在各个层级对 Envoy 进行扩展。然而以现有的 Filter 开发流程太过繁琐沉重。一个简单的功能扩展都需要重新构建整个 Envoy，升级和部署也涉及到服务重启等问题。\n为此，Envoy 社区在 Envoy 中嵌入了 WASM 虚拟机以获得一个安全的沙箱环境，用于动态加载和运行可拔插的扩展代码（被编译为 WASM 字节码），简化 Envoy 二次开发和功能增强的复杂度。实际上，在 Envoy 社区将该特性合入主干之前，Istio 社区就已经在力推该特性，并基于该特性重写了部分的功能扩展。\n网易数帆旗下轻舟云原生团队也一直在关注社区的进展和动态。轻舟微服务在各个业务方落地的过程中，业务方的定制化需求往往难以避免，而随着业务方的不断增多，如何管理这些不断横向膨胀的定制化需求，避免它们成为轻舟微服务产品本身演进的负 …","relpermalink":"/blog/envoy-wasm-source-deep-dive/","summary":"本文旨在从源码角度解析 Envoy 和 WASM 沙箱是如何桥接的。希望读者通过阅读本文，能够对 Envoy WASM 的接入有一定的了解。在实践的过程之中，能够帮助读者在繁杂的类型关系和调用链路中理清思路。本文默认读者具备一定的 Envoy 知识基础并且对 Envoy Filter 机制具备一定的了解。如果仅仅是希望使用 WASM 而不需要深入了解或者二次开发 Envoy WASM，那么可以阅读 SDK 文档即可。","title":"Envoy WASM 源码抽丝剥茧"},{"content":"Istio 1.8——还是从前那个少年 讲师：宋净超（Tetrate 布道师、云原生社区创始人）\n个人介绍：Tetrate 布道师、CNCF Ambassador、云原生社区 创始人、电子工业出版社优秀译者、出品人。Kubernetes、Istio 等技术的早期使用及推广者。曾就职于科大讯飞、TalkingData 和蚂蚁集团。\n议题简介：带你回顾 Istio 的发展历程，看他是否还是从前那个少年，“没有一丝丝改变”，能够经历时间的考验。带你一起来了解 Istio 1.8 的新特性，看它是如何作为传统和现代应用的桥接器，成为云原生应用中的中流砥柱。同时也会为你分享云原生社区的规划，为了推行云原生，我们在行动。\n百度服务网格在金融行业的大规模落地实践 讲师：孙召昌（百度高级研发工程师）\n个人介绍：百度高级研发工程师，现就职于百度基础架构部云原生团队，参与了服务网格产品的研发工作和大规模落地实践，对云原生、微服务、Service Mesh等方向有深入的研究和实践经验。\n议题简介：百度服务网格技术在金融行业大规模落地过程的实践经验和思考，主要包括：\n 支持传统微服务应用的平滑迁移，兼 …","relpermalink":"/event/cloud-native-meetup-beijing-02/","summary":"本次活动关注 Istio、云原生存储、可观测性、DubboGo 等。","title":"云原生社区 meetup 第二期北京站"},{"content":"本文译自 Creating a Cloud Security Policy\n任何想要保护他们自己云资产的公司都需要云安全策略。安全策略有助于保持云数据的安全，且能赋予快速应对威胁和挑战的能力。\n文章将解释云安全策略的价值。请继续阅读来了解这些策略都包含什么、它们能够带来什么收益以及如何为你的业务作出正确的选择。\n什么是云安全策略？ 云安全策略是公司在云运营过程中的一些正式准则。这些指导定义了安全策略，对于所有对云资产安全的决策进行指导。云安全策略指：\n 能够或不能够迁移至云上的数据类型 团队如何应对每种数据类型的风险 将负载迁移至云上的决定由谁来做 谁应该被授权来对数据进行访问或者迁移 法规条款和当前合规状态 正确应对威胁，黑客攻击和数据泄漏 围绕风险优先级的规则  云安全策略是一个公司安全项目中的重要组成部分。安全策略能够保证信息的完整性和私密性，而且能够帮助团队快速作出正确的决定。\n   img  云安全策略的必要性 尽管云计算能够带来很多收益，但是云计算服务也具有一些安全隐患：\n 第三方设置中缺乏安全控制 多云环境中可见性差 有足够的空间来窃取和滥用数据 云是 DDos 攻击 的 …","relpermalink":"/blog/cloud-security-policy/","summary":"本文翻译自 Andreja Velimirovic 的文章 Creating a Cloud Security Policy","title":"云安全策略的创建"},{"content":"本文译自 Contributing to the Development Guide\n我猜大多数人提到为开源项目做贡献，他们想到的是贡献代码变更、新的功能以及修复缺陷。作为一个长期使用开源应用并贡献了很多代码的软件开发工程师来说，我也确实是这么想的。尽管我已经在同的工作流中贡献了大量的文档，但这么大的 Kubernetes 社区对我来说仍然是个新工作对象。当 Google 要求我的同胞和我在 Lion’s Way 上对《 Kubernetes 开发指南》进行急需的更新时，我还是不知道会发生什么。\n和社区合作的乐趣 作为一个专业作家，我们习惯于被雇来写一些具体的作品。我们专门从事技术服务和产品的营销、培训和文档，范围从相对宽松的营销电子邮件到针对 IT 和开发人员的深入技术白皮书。凭借这种专业服务，每一项交付成果往往都有可衡量的投资回报。我也知道，做开源文档会和之前做的项目标准不一样，但我还是预测不了它是如何改变我和项目之间的关系的。\n我们贡献开源项目文档和之前给传统客户做工作，一个主要的特点就是，我们和公司内部总会有一两个主要的负责人。有这些负责人来审阅我们的文章，并保证文章是按公司想 …","relpermalink":"/blog/contributing-to-the-development-guide/","summary":"一个新的贡献者讲述为《Kubernetes 开发指南》做贡献的经验。","title":"为《Kubernetes 开发指南》提交贡献"},{"content":"Kubernetes 不再是（只是）好玩的游戏了。它正在被用于生产；它是关键任务；所有旧有的安全和合规规则和法规都需要以某种方式加装到 Kubernetes 上。不幸的是，像 RBAC 这样的旧的访问控制工具根本无法应对挑战。\n概述  Kubernetes API 的设计与大多数现代 API 不同。 它是基于意图的，这意味着使用 API 的人考虑的是他们想要 Kubernetes 做什么，而不是如何实现。其结果是一个令人难以置信的可扩展性、弹性，和一个强大而流行的系统。 同时，其基于意图的 API 给安全带来了挑战。 标准的访问控制解决方案（基于角色的访问控制、基于属性的访问控制、访问控制列表或 IAM 策略）都不够强大，无法强制执行基本的策略，比如谁可以更改 pod 上的标签，或者哪些镜像存储库是安全的。 Kubernetes Admission Control 就是为了解决这个问题而设计的。 Kubernetes Admission Controller 并不能解决开箱即用的访问控制问题，但它们允许你使用 Webhook 来解决授权挑战与解耦策略。  Kubernetes 基于意图 …","relpermalink":"/blog/why-rbac-is-not-enough-for-kubernetes-api-security/","summary":"所有旧有的安全和合规规则和法规都需要以某种方式加装到 Kubernetes 上。不幸的是，像 RBAC 这样的旧的访问控制工具根本无法应对挑战。","title":"为什么 RBAC 不足以保障 Kubernetes 的安全？"},{"content":"本文译自 Envoy 官方文档 What is Envoy\nEnvoy 是为面向大型现代服务架构而设计的 L7 代理和通信总线。该项目源于以下理念：\n 对于应用来说网络应该是透明的。当网络和应用出现故障时，应该非常容易定位问题发生的根源。\n 事实上，实现上述的目标非常困难。Envoy 试图通过提供以下高级功能来实现这一目标：\n进程外架构：Envoy 是一个独立进程，伴随每个应用服务运行。所有的 Envoy 形成一个透明的通信网格，每个应用与 localhost 收发信息，对网络的拓扑结构无感知。在服务间通信的场景下，进程外架构对比传统软件库的方式有两大优势：\n Envoy 适用于任何应用编程语言。Envoy 部署可以在 Java、C++、Go、PHP、Python 等不同语言编写的应用之间形成一个网格。在面向服务架构中，使用多种应用框架和编程语言变得越来越普遍。Envoy 弥合了它们之间的差异。 任何与面向大型服务架构打过交道的人都知道部署和升级软件库非常的痛苦。Envoy 可以透明地在整个基础架构上快速部署和升级。  L3/L4 filter 架构：Envoy …","relpermalink":"/blog/what-is-envoy/","summary":"本文翻译自 Envoy 官方文档，从高层介绍 Envoy。","title":"Envoy 是什么？"},{"content":"今天，我们发布了 Amazon EKS Distro（EKS-D），这是一个基于 Amazon Elastic Kubernetes Service（Amazon EKS）的 Kubernetes 发行版，并由 Amazon EKS 用于创建可靠和安全的 Kubernetes 集群。通过 EKS-D，你可以依赖 EKS 部署的相同版本的 Kubernetes 及其依赖项。这包括最新的上游更新以及扩展的安全补丁支持。EKS-D 遵循与亚马逊 EKS 相同的 Kubernetes 版本发布周期，我们以 GitHub 上的开源项目的方式 提供。\n在这篇文章中，我们将介绍 EKS Distro，并使用合作伙伴生态系统中的例子来解释开始使用 EKS Distro 的不同方法。\n什么是 EKS-D？ 通过 EKS Distro，你现在可以在通过 EKS 提供的相同 Kubernetes 发行版上实现标准化。这意味着你现在可以手动部署可靠和安全的集群，而无需持续测试和跟踪 Kubernetes 更新、依赖性和安全补丁。每个 EKS Distro 版本都遵循 EKS 验证新 Kubernetes 版本 …","relpermalink":"/blog/introducing-amazon-eks-distro/","summary":"本文介绍 EKS Distro，并使用合作伙伴生态系统中的例子来解释开始使用 EKS Distro 的不同方法。","title":"亚马逊 EKS 发行版（EKS-D）介绍"},{"content":"\n 演讲幻灯片及视频回放请点击页面上方的按钮。  开场演讲 讲师：宋净超\n公司：Tetrate\n讲师介绍：Tetrate 布道师，云原生社区创始人，CNCF Ambassador。\nKubernetes 在 UCloud 内部的应用 讲师：高鹏\n公司：UCloud\n讲师介绍：高鹏 UCloud 后台研发工程师，负责内部云原生平台的建设。\n演讲概要：在 Kubernetes 的实际应用中，我们会碰到各种各样的问题，比如复杂的网络结构、持久化存储的实现、多租户的权限模型、集群的升级、Istio 的使用、镜像仓库的高可用、CI/CD、监控告警、日志、Operator 等等等等。这次分享将介绍 UCloud 内部对 Kubernetes 以及云原生生态的应用实践，和大家分析每个选择背后的原因，碰到的问题以及解决方案。\n使用 Apache SkyWalking Adapter 实现 K8s HPA 讲师：高洪涛\n公司：Tetrate\n讲师介绍：高洪涛 美国 servicemesh 服务商 Tetrate 创始工程师。原华为软件开发云技术专家，对云 APM 有深入的理解，并有丰富的 APM 产品设 …","relpermalink":"/event/cloud-native-meetup-shanghai-01/","summary":"云原生社区举办的第一届城市站 meetup。","title":"云原生社区 meetup 第一期上海站"},{"content":"1.8 是 Istio 在 2020 年发布的最后一个版本，按照 Istio 社区在今年初设定的目标继续推进，该版本主要有以下更新：\n 支持使用 Helm 3 进行安装和升级 正式移除了 Mixer 新增了 Istio DNS proxy，透明地拦截应用程序的 DNS 查询，实现智能应答 新增了 WorkloadGroup 以简化对虚拟机的引入  WorkloadGroup 是一个新的 API 对象，旨在与虚拟机等非 Kubernetes 工作负载一起使用，模仿现有的用于 Kubernetes 工作负载的 sidecar 注入和部署规范模型来引导 Istio 代理。\n安装与升级 Istio 从 1.5 版本开始弃用了 Helm，使用 istioctl manifest 方式安装，后来又改成了 istioctl install，现在又重新回归了 Helm，Helm 作为 Kubernetes 环境下最常用的应用安装管理组件，此次回归也是倾听用户声音，优化安装体验的的反应吧，不过 Istio Operator 依然将是 Istio 安装的最终形式，从 1.8 版本开始 Istio …","relpermalink":"/blog/istio-18-release/","summary":"引入了 WorkloadGroup 和 DNS proxy，对如虚拟机的非 Kubernetes 负载的支持更进了一步。","title":"Istio 1.8 发布——用户至上的选择"},{"content":"本文译自 Istio 官方博客 Expanding into New Frontiers - Smart DNS Proxying in Istio。\nDNS 解析是 Kubernetes 上任何应用基础架构的重要组成部分。当你的应用代码试图访问 Kubernetes 集群中的另一个服务，甚至是互联网上的服务时，在发起与服务的连接之前，它必须首先查找服务主机名对应的 IP 地址。这个名称查找过程通常被称为服务发现。在 Kubernetes 中，集群 DNS 服务器，无论是 kube-dns 还是 CoreDNS，如果是 ClusterIP 类型的服务，都会将服务的主机名解析成一个唯一的不可路由的虚拟 IP（VIP）。每个节点上的 kube-proxy 将这个 VIP 映射到一组服务的 pod 上，并将流量转发到随机选择的其中一个。当使用服务网格时，sidecar 的工作原理与 kube-proxy 类似，都是为了转发流量。\n下图描述了当前的 DNS 的作用。\n   Istio 中 DNS 的作用  DNS 带来的问题 虽然 DNS 在服务网格中的作用看似微不足道，但它一直阻碍着将网格扩 …","relpermalink":"/blog/istio-dns-proxy/","summary":"本文将向你介绍 Istio 1.8 中新增的智能 DNS 代理功能。","title":"Istio 中的智能 DNS 代理功能"},{"content":"由来 和我博客前一篇文章 银河麒麟 arm64 系统上 k8s 集群跨节点不通的一次排查 不一样，从来没遇到过这样的问题，这里记录下。实施在客户那边部署业务后，业务在浏览器上无法访问，我远程上去查看日志发现 pod 内部无法 DNS 无法解析，nginx 连不上 upsteam 报错而启动失败，实际上也是跨节点不通。实际排查过程也有往错误的方向浪费了一些时间和尝试，就不写进来了，以正确的角度写下排查过程。\n环境信息 OS 是 arm64 的银河麒麟系统：\n$ cat /etc/os-release NAME=\u0026#34;Kylin Linux Advanced Server\u0026#34; VERSION=\u0026#34;V10 (Tercel)\u0026#34; ID=\u0026#34;kylin\u0026#34; VERSION_ID=\u0026#34;V10\u0026#34; PRETTY_NAME=\u0026#34;Kylin Linux Advanced Server V10 (Tercel)\u0026#34; ANSI_COLOR=\u0026#34;0;31\u0026#34; $ uname -a Linux localhost.localdomain 4.19.90-17.ky10.aarch64 #1 SMP Sun Jun 28 14:27:40 …","relpermalink":"/blog/arm-kylin-clone-vxlan-error/","summary":"Arm64 的麒麟系统，克隆后网卡的 mac 不同，vxlan 的 vmac 却一样，如何解决？","title":"Arm64 银河麒麟系统克隆机器上 k8s vxlan 跨节点不通的一次排查"},{"content":"本文译自 Zero Trust Cybersecurity:‘Never Trust, Always Verify’。\n啊？什么？这是我第一次听到零信任网络安全这个词时候的反应，我是从 2018 年秋天开始在国家标准技术研究所 (NIST) 的国家网络安全中心部门 (NCCoE) 开始工作的。值得注意的是，我有了一个新的开始，同时也是一个巨大的转变，即从通常意义上讲的软件开发工程师转变为网络安全工程师。当然，在我的职业生涯中我曾经设计和开发了一些安全软件方案，甚至会做一些安全系统的平台的工作，但是零信任网络对我来讲，完全是另一回事。一方面，它没有围栏（意指防火墙之类的网络安全，后文有介绍）。\n我为什么这么说呢？传统的网络安全方式依赖的是网络屏障——防火墙——它控制着进出网络的流量。从另一个角度来讲，零信任网络是指没有这些网络屏障的情况。它通常和“消除边界”，“缩小边界”，“减小边界”，“无边界”这些词语一起提及。这些都是“去边界化”思想的常见提法，这种提法最早是在 2005 年由一个叫做 Jericho Forum 的团队首次提出的。2010 年，在 Forrester …","relpermalink":"/blog/zero-trust-cybersecurity/","summary":"本文翻译自 Alper Kerman 的文章 Zero Trust Cybersecurity: 'Never Trust, Always Verify'","title":"零信任网络安全：“从不信任，永远验证”"},{"content":"本期是 Envoy 系列分享的第一期，在本次分享开始前云原生社区中进行了关于 Envoy 的问卷调查，从问卷结果来看大多数同学都希望了解调试流量这个主题，所以就选了这个主题作为第一次分享。而且大多数同学都是刚开始看 Envoy，所以本次分享也会涉及到很多 Envoy 入门的内容，未来我也会在社区中给大家分享更多 Envoy 的内容。视频回放见 B 站。\n   Envoy 直播回放地址  此次分享由三部分组成：\n 历史和设计理念：这部分主要是 Envoy 入门，介绍为什么 Envoy 被开发出来，有哪些设计理念，扩展点。 Envoy 如何处理一个请求：这部分讲解了一下 Envoy 如何处理一个请求，在其中 Listener、Transport Socket、Filter、Cluster 这些概念分别起到什么作用。 如何用调试流量：分享了以下几种调试流量的方法：日志、stats、TAP。演示了如何用日志和 TAP 来调试流量。  Envoy AMA（Ask Me Anything）环节的问答主要围绕着：Wasm、Istio 支持、性能方面，还有一些社区相关的问题。以下是对问答内容的整理。 …","relpermalink":"/blog/envoy-ama/","summary":"云原生学院第七期分享《Envoy 调试流量的常用技巧》的视频回放及问答整理。","title":"Envoy 调试流量的常用技巧直播分享及问答整理"},{"content":"为什么写这篇文章 看到这个标题后，大家可能会问“都已经 2020 年了，Kubernetes 开源有 6 年时间了，为什么还要写一篇 Kubernetes 入门的文章？”我想说的是，Kubernetes 还远远没有达到我们想象的那么普及。众多的开发者，平时忙于各自的业务开发，学习新技术的时间有限；还有大量的学生群体，可能还仅仅停留在“知道有这门技术”的阶段，远远没有入门。这篇文章将助于各位有志于从事云原生领域工作或需要了解该领域背景的人群快速入门 Kubernetes 和云原生。\n因为云原生的知识体系过于庞杂，本文主要讲解容器、Kubernetes 及服务网格的入门概念，关于云原生的更多细节将在后续文章中推出。另外大家也可以关注云原生社区推出的 云原生知识图谱 项目，进一步了解云原生。\n引言 Kubernetes 一词来自希腊语，意思是“飞行员”或“舵手”。这个名字很贴切，Kubernetes 可以帮助你在波涛汹涌的容器海洋中航行。\nKubernetes 是做什么的？什么是 Docker？什么是容器编排？Kubernetes 是如何工作和扩展的？你可能还有很多其他的问题，本文将一一为你 …","relpermalink":"/blog/must-read-for-cloud-native-beginner/","summary":"这篇文章将助于各位有志于从事云原生领域工作或需要了解该领域背景的人群快速入门 Kubernetes 和云原生。","title":"云原生初学者入门必读"},{"content":"云原生社区邀请 RHCA Level 5，红帽资深解决方案架构师魏新宇，为大家带来分享「基于 Red Hat OpenShift 4 构建 Paas、DevOps 平台」。\nDevOps、微服务、PaaS 将成为 IT 技术发展的新趋势。越来越多的日常开发和生命周期任务正在实现自动化，通过现有数据流提供 AI 支持，通过灵活的 DevOps 管道驱动和孵化。生命周期和应用开发也会更加的智能化，越来越多的企业应用部署在 PaaS 平台上，使用微服务架构。\nOpenShift 是红帽推出的企业就绪型 Kubernetes 容器平台，可以实现全堆栈自动化运维，以管理混合云和多云部署。OpenShift 已进行过优化，可以提高开发人员的生产力并推动创新。\n如何通过 OpenShift 构建 DevOps 平台？为企业构建敏捷生态需要哪些路径？OpenShift 在 K8S 容器平台之上做了哪些增强？在微服务治理、容器安全、CI/CD 方面提供哪些创新和解决方案？\n本主题将会从容器云生态、容器安全、DevOps、微服务等领域介绍企业需求和 OpenShift 提供的企业级解决方案。\n 讲师：魏新 …","relpermalink":"/blog/academy-6/","summary":"云原生社区邀请 RHCA Level 5，红帽资深解决方案架构师魏新宇，为大家带来分享《基于 Red Hat OpenShift 4 构建 Paas、DevOps 平台》。","title":"基于 Red Hat OpenShift 4 构建 Paas、DevOps 平台"},{"content":"本文译自 Zero-Trust Security with Service Mesh\n去年，是数据安全方面充满挑战的一年。仅在前 9 个月，就报告了 5183 起违规事件，并泄露了 79 亿条记录。与 2018 年年中相比，违规总数上升了 33.3％，泄露的记录总数翻了一番多，上升了 112％。到目前为止，2020 年的数据 与这些趋势相吻合，最大的安全隐患包括保护方面的差距，降低的检测率，更长的违规影响以及增加的客户数据曝光率。\n这告诉我们，尽管进行了重大的技术投资，但是软件安全性仍然存在很大的差距。不及时打补丁或配置错误可让不法分子肆意破坏或窃取数据。对于迁移到云以及基于微服务和容器化的云原生架构公司而言，困难则会得多。除了外围设备和网络本身之外，还有一个新的网络基础设施需要保护：微服务间的无数连接。\n使用微服务，意味着可攻击面呈指数增长，使数据面临更大的风险。此外，与网络相关的问题如访问控制，负载均衡和监控对于巨大的传统单体应用只需解决一次，而现在必须针对集群中的每个服务分别进行处理。简而言之，存在更多的违规空间。\n我们如何获得零信任？ 传统上，网络安全是基于强大的边界来帮助阻止 …","relpermalink":"/blog/zero-trust-service-mesh/","summary":"本文翻译自 Rose Sawvel 的文章 Zero-Trust Security with Service Mesh。","title":"服务网格的零信任安全"},{"content":"背景 Istio 一直是服务网格产品中的佼佼者，其数据面的组件—— Envoy 也受到很多互联网厂家及 IT 行业人员的追捧和青睐。云原生社区秉承普及和推广云原生相关技术的宗旨，已经在早些时候成立了Envoy SIG。为了方便国内 IT 行业人员学习与研究 Envoy，云原生社区决定将Envoy 官网最新版本进行翻译（Envoy 有1.7中文版本，但是版本过老）。\n翻译志愿者的条件和收获 如果你满足以下几点要求：\n 热爱云原生技术，广交天下云原生同好 关注服务网格 追踪 Envoy 最新进展 喜欢翻译工作，并能够持续贡献  那就考虑加入云原生社区 Envoy 官网翻译团队吧。你能够收获：\n 云原生社区中众多志同道合的小伙伴 对 Envoy 更深刻，更全面的认知 普及云原生技术所带来的成就感  如何加入翻译志愿者团队  加入云原生社区，加入我们 加入 Envoy SIG（添加微信 jimmysongio 或者 majinghe11，备注姓名-公司，并说明加入 Envoy SIG）。  翻译的相关事项都会在 Envoy SIG 群里公布，包括成员招募，启动翻译，进度跟踪等。\nEnvoy 翻 …","relpermalink":"/blog/envoy-trans-recruit/","summary":"Envoy 官网最新版本翻译，招募翻译小组成员。","title":"云原生社区 Envoy 官网翻译小组成员招募中"},{"content":"DevOps简述 顾名思义，DevOps就是开发（Development）与运维（Operations）的结合体，其目的就是打通开发与运维之间的壁垒，促进开发、运营和质量保障（QA）等部门之间的沟通协作，以便对产品进行小规模、快速迭代式地开发和部署，快速响应客户的需求变化。它强调的是开发运维一体化，加强团队间的沟通和快速反馈，达到快速交付产品和提高交付质量的目的。\nDevOps并不是一种新的工具集，而是一种思想，一种文化，用以改变传统开发运维模式的一组最佳实践。一般做法是通过一些CI/CD（持续集成、持续部署）自动化的工具和流程来实现DevOps的思想，以流水线（pipeline）的形式改变传统开发人员和测试人员发布软件的方式。随着Docker和Kubernetes（以下简称k8s）等技术的普及，容器云平台基础设施越来越完善，加速了开发和运维角色的融合，使云原生的DevOps实践成为以后的趋势。下面我们基于混合容器云平台详细讲解下云平台下DevOps的落地方案。\n云原生DevOps特点 DevOps是PaaS平台里很关键的功能模块，包含以下重要能力：支持代码克隆、编译代码、运行脚本、构 …","relpermalink":"/blog/cloudnative-devops/","summary":"这篇文章通过对容器平台DevOps组件设计，从源码级别做了详尽介绍。","title":"云原生DevOps落地方案"},{"content":"一、简介 在kubernetes系统中，组件之间通过http协议进行通信，通过informer来做到了消息的实时性、可靠性、顺序性， 通过informer机制与api-server进行通信。\n二、架构设计    infomer  1.Reflector (1)简介 informer可以对kubernetes api server 的资源执行监控（watch）操作 ，类型可以是kubernetes内置资源也可以是crd 自定义资源 ，其中最核心的功能是Reflector，Reflector用于监控指定资源的kubernetes资源，当资源发生变化的时候，例如发生了Added 资源添加等事件 会将其资源对象存放在本地缓存DeltaFIFO中。\n(2)核心介绍（listandwatch） 第一部分首先获取资源列表数据。 第二部分通过watchhandler 来监控资源对象。\n// path: staging/src/k8s.io/client-go/tools/cache/reflector.go // ListAndWatch首先列出所有项目，并在调用时获取资源版本，然后使用资源版本进行观 …","relpermalink":"/blog/client-go-informer-arch/","summary":"这篇文章通过对informer架构中所用到的组件,分别做了不同的介绍。","title":"Kubernetes client-go informer架构介绍"},{"content":"本文是 2020 年 8 月 15 号在深圳 GIAC（GLOBAL INTERNET ARCHITECTURE CONFERENCE）全球互联网架构大会，由宋净超（Jimmy Song）出品的云原生专场中的现场实录。\n   王发康（毅松）蚂蚁集团可信原生技术部 技术专家，专注于高性能网络服务器研发，是 MOSN、Tengine 开源项目核心成员，目前关注云原生 Service Mesh、Nginx、Istio 等相关领域，喜欢开源，乐于分享，GItHub：https://github.com/wangfakang 。\n以下是分享全文。\n\n前言 MOSN 在蚂蚁集团的 Service Mesh 大规模落地后，通过对接 UDPA 打造为 Istio 的数据面之一，本文就其在演进过程中遇到的问题及思考进行展开。对接 UDPA，实现 Istio 融合，并增强 MOSN 服务治理及流量控制能力对接云原生周边组件，实现 MOSN 开箱即用。\n大家下午好，我叫王发康，来自蚂蚁集团可信云原生应用网络团队，之前几年一直从事南北向网关（接入层）的开发和维护，说来也是和流量有着别样的渊缘，现在主要做东西向 …","relpermalink":"/blog/cloud-native-mosn/","summary":"本文是王发康在 2020 年 8 月 15 号在深圳 GIAC（全球互联网架构大会）云原生专场上的分享现场实录。","title":"云原生网络代理 MOSN 的进化之路"},{"content":"本文主要根据书籍 《Kubernetes 源码剖析》的基础上，对 Client-go 部分的 Informer 机制进行了解与学习。\nInformer 机制 Kubernetes 中使用 http 进行通信，如何不依赖中间件的情况下保证消息的实时性，可靠性和顺序性等呢？答案就是利用了 Informer 机制。Informer 的机制，降低了了 Kubernetes 各个组件跟 Etcd 与 Kubernetes API Server 的通信压力。\nInformer 机制架构设计    图片源自 Client-go under the hood\n⚠️ 这张图分为两部分，黄色图标是开发者需要自行开发的部分，而其它的部分是 client-go 已经提供的，直接使用即可。\n Reflector：用于 Watch 指定的 Kubernetes 资源，当 watch 的资源发生变化时，触发变更的事件，比如 Added，Updated 和 Deleted 事件，并将资源对象存放到本地缓存 DeltaFIFO； DeltaFIFO：拆开理解，FIFO 就是一个队列，拥有队列基本方 …","relpermalink":"/blog/client-go-informer-source-code/","summary":"Kubernetes Client-go Informer 机制及源码理解","title":"深入了解 Kubernetes Informer"},{"content":"Informer原理图 为了便于理解，先上两张图。\n源码的调用流程图 可以对照着图中的代码文件及代码行数跟下代码。\n注: 图中的代码行数基于1.15版。\n   informer  数据结构图    informer-data-structure  Informer 工厂 先来看下cmd/kube-controller-manager/app/controllermanager.go:162的Run方法。\nfunc Run(c *config.CompletedConfig, stopCh \u0026lt;-chan struct{}) error { ... run := func(ctx context.Context) { rootClientBuilder := controller.SimpleControllerClientBuilder{ ClientConfig: c.Kubeconfig, } var clientBuilder controller.ControllerClientBuilder if …","relpermalink":"/blog/client-go-informer/","summary":"这篇文章从Informer的初始化调用链和事件如何流向的角度分析了Informer各个组件。","title":"Kubernetes client-go informer原理"},{"content":"引言 2020 年 8 月 21 日，Istio 发布了 1.7 版本。除了介绍新版本的主要更新内容外，本文会重点分析 Istio 团队在产品更新策略上的激进态度和举措。是稳扎稳打做好向后兼容，带给用户所承诺的易用性；还是快刀斩乱麻，做进击的追风少年，且听笔者慢慢道来。\n如约而至——Istio 1.7.0 发布 就在几天前，Istio 发布了 1.7 版本，和 1.6 版本的发布时间正好间隔三个月，完美的实现了季度发布的诺言。本次发布的口号是 “伟大的 Istio 社区（Istio’s great community）”，因为有来自 40 多个公司的 200 多个开发者做出了贡献。Istio 官方是这样描述的：\n 正是因为有如此令人惊羡（amazing）的社区，才让 Istio 能够在每个季度有如此多的改进。\n Istio 团队已经从上个月倒卖商标的麻烦中走了出来，看上去是想通过强调 Istio\u0026#39;s great community 这个理念来抚平社区开发者受伤的心灵？笔者认为，作为开发者和用户不必太在意 Google 的商业行为，至少现阶段 Istio 还在以开源的身份持续演进，还能为 …","relpermalink":"/blog/istio-1-7-explanation/","summary":"从用户角度出发，深度解读 Istio 1.7 版本。","title":"Istio 1.7 发布——进击的追风少年"},{"content":"   Linux 年内和观测技术 BPF  由范老师和我一起翻译的图书 《Linux内核观测技术BPF》 已经在 JD 上有现货，欢迎感兴趣 BPF 技术的同学选购。链接地址 https://item.jd.com/72110825905.html\n“eBPF 是我见过的 Linux 中最神奇的技术，没有之一，已成为 Linux 内核中顶级子模块，从 tcpdump 中用作网络包过滤的经典 cbpf，到成为通用 Linux 内核技术的 eBPF，已经完成华丽蜕变，为应用与神奇的内核打造了一座桥梁，在系统跟踪、观测、性能调优、安全和网络等领域发挥重要的角色。为 Service Mesh 打造了具备 API 感知和安全高效的容器网络方案 Cilium，其底层正是基于 eBPF 技术”\n1. BPF BPF（Berkeley Packet Filter ），中文翻译为伯克利包过滤器，是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。1992 年，Steven McCanne 和 Van Jacobson 写了一篇名为《BSD数据包过滤：一种新的用户级包捕获架构》的论 …","relpermalink":"/blog/bpf-intro/","summary":"eBPF 是我见过的 Linux 中最神奇的技术，没有之一，已成为 Linux 内核中顶级子模块，从 tcpdump 中用作网络包过滤的经典 cbpf，到成为通用 Linux 内核技术的 eBPF，已经完成华丽蜕变，为应用与神奇的内核打造了一座桥梁，在系统跟踪、观测、性能调优、安全和网络等领域发挥重要的角色。为 Service Mesh 打造了具备 API 感知和安全高效的容器网络方案 Cilium，其底层正是基于 eBPF 技术","title":"eBPF 技术简介"},{"content":"目前在云原生社区的 Kubernetes 源码研习社中和广大学友们共同学习郑东旭大佬的 Kubernetes 源码剖析这本书。当前正在开展第一期学习活动，第五章节 client-go 的学习。之所以从这一章节开始学习，主要是考虑到 client-go 在源码中相对比较独立，可以单独阅读。更主要的是它是 Kubernetes 的核心处理框架，基本上运用在 Kubernetes 各个组件中，因此，如果你学好了这一章节，对于后面 Kubernetes 源码的阅读，将会有很大的帮助。此外随着 Operator 的盛行，一些开源的生成框架也受到广大 Operator 开发者们的青睐。例如 kubebuilder 和 operator-SDK 等。而精通了 client-go，将对你理解这些生成框架及编写 Operator 也是有很好的帮助。\n下面内容是在学习过程中总结的相关笔记及个人见解。\n概括 client-go 是用 Golang 语言编写的官方编程式交互客户端库，提供对 Kubernetes API server 服务的交互访问。\n其源码目录结构如下：\n discovery: …","relpermalink":"/blog/client-go-study/","summary":"该篇博客是本人在学习 client-go 源码时的一些总结和个人感受，希望可以能够给后面的学者一些帮助。","title":"client-go 源码学习总结"},{"content":"TL;DR 声明：下文提到的bpf/BPF字样是泛指，包括cBPF和eBPF。\n通过文章，你能了解Linux内核代码中关于bpf程序的编译运行机制，并能学会如何基于Linux内核bpf示例环境编写你自己的bpf程序。文章涉及的实验环境和代码可以到这个git repo获取： https://github.com/nevermosby/linux-bpf-learning\n最近Kubecon 2020 China上已经有了3个关于bpf的中文分享（来自腾讯和PingCAP），也看到国内第一梯队公司越来越关心bpf这项新技术，欢迎大家都能加入bpf学习队伍。\n内核源码里的BPF示例代码概述 示例代码里基本是kern和user成对出现，也就是对于一个示例来说，分别提供了在内核空间运行的和用户空间运行的程序，绝对是良心之作了。\n下载Linux内核源代码 First thing first，第一步是下载内核代码。\n选择内核版本 目前社区维护的内核版本繁多，你需要确定下载哪个版本的代码。个人建议是下载与你的操作系统运行一致的内核版本，避免后续编译时出现不兼容问题。\n选择下载渠道 代码下载渠道也很多： …","relpermalink":"/blog/compile-bpf-examples/","summary":"Linux社区的大佬们为学习eBPF的同学们准备了福利 ，Linux内核源码里包含了大量的eBPF示例代码，几乎覆盖了所有种类的eBPF程序，非常适合学习者阅读和测试。今天为大家介绍如何编译运行这些eBPF示例代码。","title":"编译运行Linux内核源码中的eBPF示例代码"},{"content":"背景 Istio 从发布开始就使用 Envoy 作为自己的数据平面，充分利用了 Envoy 提供的服务发现、路由、熔断、负载均衡等功能。与此同时，Istio 项目也一直致力于提供一个便于灵活扩展的平台，以满足用户多样化的需求。在过去的一年半中， Google 的团队一直在努力用 WebAssembly 技术为 Envoy 代理添加动态扩展，并推出了针对 Envoy 代理的 WebAssembly (以下简称为WASM) 扩展机制，包括标准化的 ABI，SDK，以及该扩展机制的第一个重点实现：全新的、低延迟的 Istio 遥测系统。\n本文主要对 Envoy 和 WebAssembly 技术进行介绍，并使用 solo.io 团队推出的 wasme 工具完成 WASM filter 的构建、发布和部署，方便读者了解 Envoy WASM Filter 的扩展方式及其实现原理。\nEnvoy 的过滤器机制 Envoy 是 Istio 中的 Sidecar 官方标配，是一个面向服务架构的高性能网络代理，由 C++ 语言实现，拥有强大的定制化能力。Envoy 提供了进程外架构、支持L3/L4 …","relpermalink":"/blog/envoy-wasm/","summary":"本文对 WebAssembly 和 Envoy 技术进行了介绍，通过 WASM Filter 的构建、发布和部署过程，方便读者了解 Envoy WASM Filter 的扩展方式及其实现原理。","title":"Istio 进阶学习系列 - 基于 WebAssembly 实现 Envoy 与 Istio 的功能扩展"},{"content":" 作者介绍：aoho，一线码农，对云原生、微服务、Go 语言、容器化感兴趣，并做了深入研究。闲暇时间会分享一些技术思考和实践，与大家讨论交流，共同进步。\n 0 专辑概述 etcd 是云原生架构中重要的基础组件，由 CNCF 孵化托管。etcd 在微服务和 Kubernates 集群中不仅可以作为服务注册于发现，还可以作为 key-value 存储的中间件。\n《彻底搞懂 etcd 系列文章》将会从 etcd 的基本功能实践、API 接口、实现原理、源码分析，以及实现中的踩坑经验等几方面具体展开介绍 etcd。预计会有 20 篇左右的文章，笔者将会每周持续更新，欢迎关注。\n1 etcd 介绍 etcd 是 CoreOS 团队于 2013 年 6 月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。具有以下特点：\n 简单：安装配置简单，而且提供了 HTTP API 进行交互，使用也很简单 键值对存储：将数据存储在分层组织的目录中，如同在标准文件系统中 监测变更：监测特定的键或目录以进行更改，并对值的更改做出反应 安全：支持 SSL 证书验证 快速：根据官方提供 …","relpermalink":"/blog/etcd-1/","summary":"etcd 了解一下！","title":"彻底搞懂 etcd 系列文章（一）：初识 etcd"},{"content":"导言 2018年 kubecon 大会上，阿里的陈俊大佬分享 Node-operator 的主题让我印象深刻，回来之后开始着手研究 Operator。正好当时老板希望能够将公司正在使用的 Nosql 组件容器化，顺势给老板安利一波 Operator 的思想。随后以 opentsdb 的容器为开端，后续完成一系列组件容器化，一路走来不断学习和借鉴其他 operator 的先进经验。Zookeeper作为最新完成 operator 化的组件，除了可以快速部署以外，还实现了 Operator 对 scale up/down 的进度干预，控制 rolling 的重启顺序，感知组件实际运行状态等，具体实现请阅读对于相关章节。\n功能需求 目前 operator 主要实现如下功能：\n 快速部署 安全伸缩容 自动化监控 故障自愈 可视化操作  CRD Operator 设计第一步是定义声明式接口的 Item，spec 主要包含节点资源、监控组件、副本数、持久化存储。 …","relpermalink":"/blog/zookeeper-operator/","summary":"Zookeeper作为最新完成 operator 化的组件，除了可以快速部署以外，还实现了 Operator 对 scale up/down 的进度干预，控制 rolling 的重启顺序，感知组件实际运行状态等，具体实现请阅读对于相关章节。","title":"Zookeeper operator 实战"},{"content":"今天我们不讲行业和商业，讲讲2019年最热的概念——云原生（Cloud Native）。\n我认为云原生是未来10年IT发展最重要的趋势，但是它涵盖的概念非常多，需要花很多时间研究，同时浩如烟海的资料分散在网络上各个地方，缺乏系统性的梳理。今年2月我在基金内部做过一个分享，今日成文，希望让更多的人有所了解。\n本文试图解答：\n 为什么云原生概念具有革命性？ 什么是微服务？ 微服务和中台的关系 容器和微服务为什么是最佳搭档？ 容器化与虚拟化的区别 API管理与API集成的区别 Kubernetes是做什么用的？ 开源软件商业化遇到的典型问题是什么？  涉及到的概念包括云原生、DevOps、持续集成、持续交付、持续部署、微服务、API管理、iPaaS、Service Mesh、Serverless、容器、Docker、Kubernetes等等，我争取用比较形象和通俗的方式把这些技术概念讲清楚。\n本文内容较多，共分为六个章节。\n 第一部分：云原生及CNCF基金会 第二部分：DevOps与CI/CD 第三部分：微服务、API管理与集成 第四部分：容器与Docker 第五部分：Kubernetes与 …","relpermalink":"/blog/cloud-native-era/","summary":"我认为云原生是未来10年IT发展最重要的趋势，但是它涵盖的概念非常多，需要花很多时间研究，同时浩如烟海的资料分散在网络上各个地方，缺乏系统性的梳理。今年2月我在基金内部做过一个分享，今日成文，希望让更多的人有所了解。","title":"云原生时代——投资人视角下的云原生趋势思考"},{"content":"Service Mesh Virtual Meetup 是 ServiceMesher 社区和 CNCF 联合主办的线上系列直播。本期为 Service Mesh Virtual Meetup#1 ，邀请了四位来自不同公司的嘉宾，从不同角度展开了 Service Mesh 的应用实践分享，分享涵盖来自陌陌和百度的 Service Mesh 生产实践，Service Mesh 的可观察性和生产实践以及与传统微服务中可观察性的区别，还有如何使用 SkyWalking 来观测 Service Mesh。\n本文根据5月13日晚，百度高级工程师罗广明的主题分享《Service Mesh 高可用在企业级生产中的实践》整理。文末包含本次分享的视频回顾链接以及 PPT 下载地址。\n前言 Service Mesh 在企业落地中有诸多挑战，当与传统微服务应用共同部署治理时可用性挑战更为严峻。本次分享将以 Service Mesh 与 Spring Cloud 应用互联互通共同治理为前提，着重介绍基于 Consul 的注册中心高可用方案，通过各种限流、熔断策略保证后端服务的高可用，以及通过智能路由策略（负载 …","relpermalink":"/blog/baidu-service-mesh-ha-practice/","summary":"本文为百度高级研发工程师罗广明在 Service Mesh Virtual Meetup 上分享的文字整理。","title":"Service Mesh 高可用在企业级生产中的实践"},{"content":"Service Mesh Webinar 是由 ServiceMesher 社区和 CNCF 联合发起的线上直播活动，活动将不定期举行，邀请社区成员为大家带来 Service Mesh 领域的知识和实践分享。\nService Mesh Webinar#1，邀请多点生活平台架构组研发工程师陈鹏，带来分享《多点生活在 Service Mesh 上的实践——Istio + MOSN 在 Dubbo 场景下的探索之路》。\n随着多点生活的业务发展，传统微服务架构的面临升级困难的问题。在云原生的环境下，Service Mesh 能给我们带来什么好处。如何使用社区解决方案兼容现有业务场景，落地成符合自己的 Service Mesh 成为一个难点。服务之间主要通过 Dubbo 交互，本次分享将探索 Istio + MOSN 在 Dubbo 场景下的改造方案。\n 直播时间：2020年5月28日（周四）20:00-21:00 直播地址：https://live.bilibili.com/21954520（欢迎关注直播间）  分享主题 《多点生活在 Service Mesh 上的实践——Istio + …","relpermalink":"/blog/service-mesh-webinar-1/","summary":"B 站直播：多点生活在 Service Mesh 上的实践——Istio + MOSN 在 Dubbo 场景下的探索之路。","title":"Service Mesh Webinar #1"},{"content":"2020 年伊始，受新冠疫情影响，全球各地的员工开启了在家办公的模式，因此人与人之间的距离感觉被拉远了。但是云原生圈子里有我们这样一群人，因为一个共同的愿景聚集到了一起，组建了社区管理委员会，并在过去的三个月里利用业余时间，齐心协力完成了社区的筹备工作。今天我们要正式宣布云原生社区正式成立了。\n成立背景  Software is eating the world. —— Marc Andreessen\n “软件正在吞噬这个世界” 已被大家多次引用，随着云原生（Cloud Native）的崛起，我们想说的是“Cloud Native is eating the software”。随着越来越多的企业将服务迁移上云，企业原有的开发模式以及技术架构已无法适应云的应用场景，其正在被重塑，向着云原生的方向演进。\n那么什么是云原生？云原生是一系列架构、研发流程、团队文化的最佳实践组合，以此支撑更快的创新速度、极致的用户体验、稳定可靠的用户服务、高效的研发效率。开源社区与云原生的关系密不可分，正是开源社区尤其是终端用户社区的存在，极大地促进了以容器、服务网格、微服务等为代表的云原生技术的持续演进！\n …","relpermalink":"/blog/cnc-announcement/","summary":"我们很高兴地宣布，云原生社区今天正式成立了。","title":"云原生社区成立"},{"content":"因为疫情的原因，ServiceMesher 社区暂时无法举办线下 meetup，因此我们将活动改为线上，将采用 B 站直播的形式。本期为第一届 Service Mesh Virtual Meetup 线上系列直播，邀请了四位来自不同公司的嘉宾，从四个角度对 Service Mesh 的应用实践展开分享。\n本次线上 meetup 分享涵盖 Service Mesh 的可观察性和生产实践。为大家介绍 Service Mesh 中的可观察性与传统微服务中可观察性的区别，如何使用 SkyWalking 来观测 Service Mesh，还有来自百度和陌陌的 Service Mesh 生产实践。\n本系列采用线上直播的形式，从 2020 年 5 月 6 日开始到 5 月 14 日，每周三、周四晚上 19:00-20:00我们相约进行一个主题分享。\n直播信息  直播地址：https://live.bilibili.com/21954520 直播回放地址：https://space.bilibili.com/228717294/channel/detail?cid=126804 PPT下载地 …","relpermalink":"/blog/service-mesh-virtual-meetup-1/","summary":"因为疫情的原因，ServiceMesher 社区暂时无法举办线下 meetup，因此我们将活动改为线上，将采用 B 站直播的形式。","title":"Service Mesh Virtual Meetup #1"},{"content":"本文基于 Istio 1.5.1 版本，将为大家介绍以下内容：\n 什么是 sidecar 模式和它的优势在哪里。 Istio 中是如何做 sidecar 注入的？ Sidecar proxy 是如何做透明流量劫持的？ 流量是如何路由到 upstream 的？  在此之前我曾写过基于 Istio 1.1 版本的理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持，Istio 1.5 与 Istio 1.1 中的 sidecar 注入和流量劫持环节最大的变化是：\n iptables 改用命令行工具，不再使用 shell 脚本。 sidecar inbound 和 outbound 分别指定了端口，而之前是使用同一个端口（15001）。  注：本文中部分内容收录于 ServiceMesher 社区出品的 Istio Handbook。\nSidecar 模式 将应用程序的功能划分为单独的进程运行在同一个最小调度单元中（例如 Kubernetes 中的 Pod）可以被视为 sidecar 模式。如下图所示，sidecar 模式允许您在应用程序旁边添加更 …","relpermalink":"/blog/sidecar-injection-iptables-and-traffic-routing/","summary":"本文基于 Istio 1.5.1 版本，介绍了 sidecar 模式及其优势 sidecar 注入到数据平面，如何做流量劫持和转发的，以及流量是怎样路由到 upstream 的。","title":"Istio 中的 Sidecar 注入及透明流量劫持过程详解"},{"content":"本文为翻译文章，点击查看原文。\n编者按 如文章标题所示，本文通过对 Service Mesh 技术和 API 网关的对比，着重分析了两者的功能重合点和分歧点，解答了开发者的困惑，为如果进行技术选型和落地提供了指导思路。\n前言 这篇文章也许无法打破缠绕在 API 网关和服务网格周围的喧嚣。即便已经是 2020 年了，围绕这些话题仍然会存在大量的疑虑。我撰写此文是为了给出真实而具体的解释，以帮助大家理清它们之间的差异、重叠以及适用场景。如果你不同意我觉得我在添乱，或者想请我喝杯啤酒，欢迎随时在 Twitter 上@我（@christianposta）。\n 第一个曝光： 我在 Solo.io 这家公司工作，公司的业务聚焦于今天我们要讨论的主题。我提前说明一下以免你会有“你的观点是有偏见的”的反应。每个人的观点都有偏见。但可以肯定的是，我在 Solo.io 工作是因为我想看到这些想法被付诸实施并推向市场，而不是与之相反。\n第二个曝光： 我正在写一本有关服务网格的书，名为《Istio in Action》，这花了我很多时间。在本文中，不可否认我是站在 Istio 的角度来讨论“服务网格”的，但如 …","relpermalink":"/blog/do-i-need-an-api-gateway-if-i-have-a-service-mesh/","summary":"本文对 API 网关和 Service Mesh 进行了对比，指出了它们之间的异同。","title":"使用了 Service Mesh 后我还需要 API 网关吗"},{"content":"本文译自 The Future of Cloud Native Applications With OAM and Dapr。\n在2019年11月4日至8日于佛罗里达州奥兰多举办的2019年微软Ignite大会上，Azure首席技术官Mark Russinovich介绍了微软开发的两个创新和革命性的项目，旨在解决当今IT专业人士和开发人员在试图构建基于微服务的应用程序时的一系列现有问题。这场会议被命名为《基于开放应用模型（OAM）和分布式应用运行时（Dapr）的云原生应用的未来》。\n开放式应用模型（OAM） 因此，其中一个项目与开放应用模型（OAM）有关。它代表了一个开放的标准，允许我们建立云原生应用程序，与平台无关，并遵循关注点分离的原则，通过将应用程序的定义与应用程序的部署和托管基础设施的细节分离，为我们提供一些好处。\n将应用程序的定义与操作细节分开，使应用程序开发人员能够专注于其应用程序的关键要素，并将其从部署地点和方式的操作细节中抽象出来。另外，关注点的分离允许平台架构师开发可重复使用的组件，而应用开发者则专注于将这些组件与他们的代码集成，以快速、轻松地构建可靠的应用。在所有这 …","relpermalink":"/blog/the-future-of-cloud-native-applications-with-oam-and-dapr/","summary":"本文介绍了基于 OAM 和 Dapr 的云原生应用的未来。","title":"利用 OAM 和 Dapr 的云原生应用的未来"},{"content":"第九届 Service Mesh Meetup 杭州站，12 月 28 日在杭州滴滴举行，现场 150+ 参与，下面是现场合影（人太多，镜头没装下）。\n   活动现场照片  视频回放与资料下载 地址：https://tech.antfin.com/community/activities/1056\n致谢 感谢以下单位的大力支持\n 联合主办方蚂蚁金服金融科技 电子工业出版社赠书 滴滴提供场地支持  ","relpermalink":"/blog/service-mesh-meetup-hangzhou-20191228/","summary":"本期 Meetup 与滴滴联合举办，将深入 Service Mesh 的落地实践，并带领大家探索 Service Mesh 在更广阔领域的应用。","title":"第九届Service Mesh Meetup杭州站回顾"},{"content":"讲师与演讲话题 蚂蚁集团 API Gateway Mesh 的思考与实践 主讲人: 贾岛\n在 Service Mesh 微服务架构中，我们常常会听到东西流量和南北流量两个术语。蚂蚁集团开源的Service Mesh Sidecar MOSN 已经多次与大家见面交流了，以往的议题重点在东西流量的服务发现与路由，那么蚂蚁集团在南北流量上的思考是怎样的？本次分享，将从蚂蚁集团 API 网关发展历程来看，Mesh 化的网关架构是怎样的，解决了什么问题，双十一的实践表现，以及我们对未来的思考。\n酷家乐的 Istio 与 Knative 踩坑实录 主讲人: 付铖\n酷家乐在部分业务模块，自2018年使用了 Istio 进行服务治理，自2019年使用了 Knative 作为 FaaS 基础设施，在实践过程中解决了大量问题，也积累了不少第一手经验。本次分享，将重点讨论服务网格的性能损耗，存量业务迁移难题，函数计算的冷启动时间问题以及解决方案等。\n云原生开放智能网络代理 MOSN 金融级云原生架构助推器-蚂蚁集团 主讲人：肖涵（涵畅）\n圆桌环节：Service Mesh 落地的务实与创新 主讲人: …","relpermalink":"/event/service-mesh-meetup-09/","summary":"这是第七届 Service Mesh Meetup。","title":"Service Mesh Meetup #9 杭州站"},{"content":"本期为 Service Mesh Meetup#8 特别场，联合 CNCF、阿里巴巴及蚂蚁集团共同举办。\n不是任何一朵云都撑得住双 11。\n成交 2684 亿，阿里巴巴核心系统 100% 上云。\n蚂蚁集团的核心交易链路大规模上线 Service Mesh。\n这次，让双 11 狂欢继续，让云原生经得起双 11 大考，也让云原生走到开发者身边。\n你将收获 3 大经验加持：\n 双 11 洗礼下的阿里巴巴 K8s 超大规模实践经验 蚂蚁集团首次 Service Mesh 大规模落地经验 阿里巴巴超大规模神龙裸金属 K8s 集群运维实践经验  讲师与演讲话题 释放云原生价值，双 11 洗礼下的阿里巴巴 K8s 超大规模实践 主讲人：曾凡松（逐灵） 、汪萌海（木苏）\n2019 双 11 点燃了全球人民的购物热情，而阿里经济体核心系统全面上云则刷爆了国内的技术圈子，引起了众多热爱云计算、云原生技术专家的热议。阿里巴巴是首个在超大规模体量公司内大规模使用 K8s 的公司，借此机会将为大家带来阿里巴巴在生产场景中大规模应用 K8s 的实践经验，包括在大规模应用管理上的经验教训；当前如何通过云原生方式高效 …","relpermalink":"/event/service-mesh-meetup-08/","summary":"这是第八届 Service Mesh Meetup。","title":"Service Mesh Meetup #8 北京站"},{"content":"   第七届 Service Mesh Meetup 成都站  《基于5G管理网络的服务网格实践》》 主讲人：赵化冰 中兴通讯 网管软件资深专家\n在通信网络向5G演进的过程中，电信行业借鉴了IT行业的微服务架构和云原生相关技术对5G网络功能进行重构，以提供敏捷、灵活、易于扩展的业务能力。 本演讲主题将介绍在5G网络管理平台的微服务架构中落地微服务网格的产品实践，包括多网络平面支持、API网关和网格Ingress的定位、Consul Registry的性能增强等等。\n   赵化冰 Service Mesh Meetup 成都站  《蚂蚁金服网络代理的演进之路》 主讲人：肖涵（涵畅）蚂蚁金服高级技术专家\n从网络硬件设备到自研平台，从传统服务治理到 Service Mesh，本次分享将介绍蚂蚁金服网络代理在接入层以及 Service Mesh 化道路上是如何一步步支撑秒级百万支付，千万红包请求的。\n   肖涵（涵畅）Service Mesh Meetup 成都站  《进击的Traefik——云原生边缘路由探秘》 主讲人：杨川胡（阳明） 知群后台负责人\nTraefik 是一个云原生的边缘路由 …","relpermalink":"/blog/service-mesh-meetup-chengdu-20191028/","summary":"本期 Meetup 邀请社区大咖，从服务网格下微服务架构设计、在 5G 时代的应用、如何使用开源的 Traefik 构建云原生边缘路由及蚂蚁金服的服务网格代理演进角度给大家带来精彩分享。","title":"第七届Service Mesh Meetup成都站回顾"},{"content":"本期 Meetup 邀请社区大咖，从服务网格下微服务架构设计、在 5G 时代的应用、如何使用开源的 Traefik 构建云原生边缘路由及蚂蚁集团的服务网格代理演进角度给大家带来精彩分享。\n讲师与演讲话题 服务网格技术在5G网络管理平台中的落地实践 赵化冰（中兴通讯网管软件资深专家）\n在通信网络向5G演进的过程中，电信行业借鉴了IT行业的微服务架构和云原生相关技术对5G网络功能进行重构，以提供敏捷、灵活、易于扩展的业务能力。 本演讲主题将介绍在5G网络管理平台的微服务架构中落地微服务网格的产品实践，包括多网络平面支持、API网关和网格Ingress的定位、Consul Registry的性能增强等等。\n蚂蚁集团网络代理的演进之路 肖涵（蚂蚁集团高级技术专家）\n从网络硬件设备到自研平台，从传统服务治理到 Service Mesh，本次分享将介绍蚂蚁集团网络代理在接入层以及 Service Mesh 化道路上是如何一步步支撑秒级百万支付，千万红包请求的。\n进击的Traefik——云原生边缘路由探秘 杨川胡（ 知群后台负责人）\nTraefik 是一个云原生的边缘路由器，开源的反向代理和负载均衡 …","relpermalink":"/event/service-mesh-meetup-07/","summary":"这是第七届 Service Mesh Meetup。","title":"Service Mesh Meetup #7 成都站"},{"content":"本文为翻译文章，点击查看原文。\n编者按 本文作者介绍了企业组织采用服务网格面临的哪些挑战，建议企业应该从数据平面开始逐步推进，从了解它、熟悉它、再到扩大规模使用它，并且以介绍其演讲的幻灯片为切入点介绍了架构演进的步骤。\n正文 最近，我写了一篇关于在企业组织中采用服务网格的具有哪些挑战的文章，这篇文章是为DZone及其迁移到微服务的报告撰写的。在这篇文章中，我们首先要解决的问题之一是“你是否应该沿着采用服务网格的道路走下去”，我是这么说的:\n 首先回答“不”。如果您刚刚开始使用微服务架构和少量的服务，请确保您首先准备好了基础部分。微服务及其相关的基础设施是一种优化方式，可以让您更快的变更应用程序。在没有服务网格的情况下，您可以朝着更快的方向前进。你甚至可能想要一些服务网格带来的好处，而不是去关注它所有的复杂性。那么，请看看类似Gloo的产品，一个建立在Envoy代理上的API网关。\n 我认为在当前时刻，这是一个非常重要的考虑，有以下两大原因:\n 总的来看，服务网格的实现还没有准备好投入生产。 全部投入(all-in)到一个服务网络的复杂性仍然很高。  这并不意味着没有团队成功地使用了服务 …","relpermalink":"/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/","summary":"本文作者介绍了企业组织采用服务网格具有哪些挑战，并且结合自身经验给企业组织提出了推进服务网格的建议。","title":"企业组织中采用服务网格的挑战"},{"content":"作者：马若飞，lead software engineer in FreeWheel，《Istio实战指南》作者，ServiceMesher社区管委会成员。\n前言 近两年随着微服务架构的流行，服务网格（Service Mesh）技术受到了越来越多的人关注，并拥有了大批的拥趸。目前市面上比较成熟的开源服务网格主要有下面几个：Linkerd，这是第一个出现在公众视野的服务网格产品，由Twitter的finagle库衍生而来，目前由Buoyant公司负责开发和维护；Envoy，Lyft开发并且是第一个从CNCF孵化的服务网格产品，定位于通用的数据平面或者单独作为Sidecar代理使用；Istio，由Google、IBM、Lyft联合开发的所谓第二代服务网格产品，控制平面的加入使得服务网格产品的形态更加完整。\n服务网格技术作为构建云原生应用的重要一环，逐渐的被越来越多的人和厂商认可，并看好它的发展前景。在Istio大红大紫的今天，作为和Google在云服务市场竞争的Amazon来说，自然不愿错失这块巨大的蛋糕。他们在今年4月份发布了自己的服务网格产品：AWS App Mesh。本文会聚焦 …","relpermalink":"/blog/compare-appmesh-with-istio/","summary":"本文从架构和功能等方面较为全面的对比了AWS App Mesh和Istio两个服务网格产品。","title":"AWS App Mesh vs Istio"},{"content":"本文为翻译文章，点击查看原文。\n编者按 本文强调了应用程序定制指标的重要性，用代码实例演示了如何设计指标并整合Prometheus到Django项目中，为使用Django构建应用的开发者提供了参考。\n为什么自定义指标很重要？ 尽管有大量关于这一主题的讨论，但应用程序的自定义指标的重要性怎么强调都不为过。和为Django应用收集的核心服务指标（应用和web服务器统计数据、关键数据库和缓存操作指标）不同，自定义指标是业务特有的数据点，其边界和阈值只有你自己知道，这其实是很有趣的事情。\n什么样的指标才是有用的？考虑下面几点：\n 运行一个电子商务网站并追踪平均订单数量。突然间订单的数量不那么平均了。有了可靠的应用指标和监控，你就可以在损失殆尽之前捕获到Bug。 你正在写一个爬虫，它每小时从一个新闻网站抓取最新的文章。突然最近的文章并不新了。可靠的指标和监控可以更早地揭示问题所在。 我认为你已经理解了重点。  设置Django应用程序 除了明显的依赖（pip install Django）之外，我们还需要为宠物项目（译者注：demo）添加一些额外的包。继续并安装pip install …","relpermalink":"/blog/custom-application-metrics-with-django-prometheus-and-kubernetes/","summary":"本文演示如果为一个Django应用添加Prometheus自定义指标。","title":"使用Django，Prometheus，和Kubernetes定制应用指标"},{"content":"   编者按 本文从多个维度阐述了使用更少的大节点与更多的小节点来组建 Kubernetes 集群各自的优势与劣势，并结合实践经验给出了选择工作节点数量和大小的一般方法。\n引言 欢迎来到 Kubernetes 学习园地，这是一个常规专栏，收集整理了我们在线上以及线下研讨会上由 Kubernetes 专家回答的最有意思的问题。\n 今天问题的答案由 Daniel Weibel 给出。Daniel 是一名软件工程师，同时也是 Learnk8s 的讲师。\n 如果您希望在下一期中展示您的问题，请通过邮件联系我们或者在 tweet 上 @learnk8s。\n错过了前几期？点击这里查看往期内容。\n在创建 Kubernetes 集群时，您首先会想到的问题之一就是：“我应该创建何种类型的工作节点，以及应该创建多少个？”。\n如果您正在搭建内部集群，是应该购买最新一代的超级服务器，还是使用数据中心里的十几台旧机器呢？\n或者您使用的是托管 Kubernetes 服务，例如 Google Kubernetes Engine (GKE)，是应该使用 8 个 n1-standard-1 实例，还是应该使用 2 …","relpermalink":"/blog/architecting-kubernetes-clusters-choosing-a-worker-node-size/","summary":"本文从多个维度阐述了使用更少的大节点与更多的小节点来组建 Kubernetes 集群各自的优势与劣势，并结合实践经验给出了选择工作节点数量和大小的一般方法。","title":"构建 Kubernetes 集群 —— 选择工作节点数量和大小"},{"content":"编者按 本文简要介绍了AWS App Mesh的基本概念，并通过一个示例演示了如何在AWS的控制台创建一个App Mesh的服务网格。\n前言 AWS App Mesh 可以帮助你运行和监控大规模的HTTP和TCP服务。你可以用一致的方式来路由和监控流量，获得发现问题的能力，并在失败或代码更改后重新路由流量。App Mesh使用开源的Envoy代理，让你可以使用来自AWS合作伙伴和开源社区的各种工具。\n服务可以运行在AWS Fargate， Amazon EC2，Amazon ECS， Amazon Elastic Container Service for Kubernetes 或 Kubernetes上。每个服务的所有进出流量都经过Envoy代理，以便对其进行路由、可视化、测量和记录。这种额外的间接层让你可以用任何想要的语言构建服务，而不必使用一组公共的通信库。\nApp Mesh基本概念 在深入了解之前，让我们先来回顾一下App Mesh里的重要概念和组件：\n服务网格 – 网络流量在其服务之间的逻辑边界。网格可以包含虚拟服务、虚拟节点、虚拟路由器和路由。\n虚拟服务 – 直接（由虚拟节 …","relpermalink":"/blog/aws-app-mesh-application-level-networking-for-cloud-applications/","summary":"本文演示了如何在AWS控制台创建一个App Mesh","title":"AWS App Mesh - 云应用的服务网格"},{"content":"本文为翻译文章，点击查看原文。\n一篇杂烩文，虽然结构比较混乱，但是对微服务相关概念的介绍还是较为全面的。\n微服务能在企业中发挥积极作用。因此了解微服务架构（MSA）设计的一般目标或原则，以及一些微服务的设计模式，都是是很有意义的。\n 降低成本：MSA 降低了 IT 服务的设计、实现和管理的总体成本。 提高交付速度：MSA 能够提高服务的实现速度。 增强健壮性：MSA 能够增强我们服务网络的健壮性。 提供可视化支持：MSA 能够为服务和网络提供更好的可视化支持。  你需要理解微服务架构的构建原则：\n 伸缩能力 可用性 健壮性 弹性 独立的匿名服务 去中心化的治理 故障隔离 自动供给 通过 DevOps 实现持续交付  在系统建设中，坚持上述原则会遭遇很多挑战和问题。这些问题在很多解决方案中都会出现。如果能够正确的使用合适的设计模式，就能够克服这些问题。微服务的设计模式可以分为五大类，每个大类中都包含一些设计模式。\n   tree  拆分模式 根据业务能力进行分解的方式，能降低服务耦合度，实现单一职责的服务目标。这里说的业务能力是来自业务架构模型的一个概念，是企业用来创造价值的行为。业务能 …","relpermalink":"/blog/design-patterns-for-microservices/","summary":"本文详细的介绍了微服务的多种设计模式。","title":"微服务的设计模式"},{"content":"   第六届 Service Mesh Meetup  《虎牙直播在微服务改造方面的实践》 张波 虎牙基础保障部中间件团队负责人\n本次主要分享虎牙注册中心、名字服务、DNS 的改造实践，以及如何通过 Nacos 实现与 istio 打通实现，使微服务平滑过渡到 service mesh。\n   张波 虎牙基础保障部中间件团队负责人  《Service Mesh 在蚂蚁金服的生产级安全实践》 彭泽文 蚂蚁金服高级开发工程师\n介绍通过 Envoy SDS（Secret Discovery Service）实现 Sidecar 证书管理的落地方案；分享如何为可信身份服务构建敏感信息数据下发通道，以及 Service Mesh Sidecar 的 TLS 生产级落地实践。\n   彭泽文 蚂蚁金服高级开发工程师  《基于 Kubernetes 的微服务实践》 涂小刚 慧择网运维经理\n介绍如何跟据现有业务环境情况制定容器化整体解决方案，导入业务进入 K8S 平台，容器和原有业务环境互通。制订接入规范、配置中心对接 K8S 服务、网络互通方案、DNS 互通方案、jenkins-pipeline 流水 …","relpermalink":"/blog/service-mesh-meetup-guangzhou-20190811/","summary":"ServiceMesher社区和蚂蚁金服联合主办的第六届Service Mesh Meetup广州站收官，来自虎牙的张波、慧择网的涂小刚、蚂蚁金服的彭泽文、敖小剑为社区带来精彩分享。","title":"第六届Service Mesh Meetup广州站回顾"},{"content":"讲师与演讲话题 虎牙直播在微服务改造方面的实践 张波 虎牙基础保障部中间件团队负责人\n本次主要分享虎牙注册中心、名字服务、DNS 的改造实践，以及如何通过 Nacos 实现与 istio 打通实现，使微服务平滑过渡到 service mesh。\nService Mesh 在蚂蚁集团的生产级安全实践 彭泽文 蚂蚁集团高级开发工程师\n介绍通过 Envoy SDS（Secret Discovery Service）实现 Sidecar 证书管理的落地方案；分享如何为可信身份服务构建敏感信息数据下发通道，以及 Service Mesh Sidecar 的 TLS 生产级落地实践。\n基于 Kubernetes 的微服务实践 涂小刚 慧择网运维经理\n介绍如何跟据现有业务环境情况制定容器化整体解决方案，导入业务进入 K8S 平台，容器和原有业务环境互通。制订接入规范、配置中心对接 K8S 服务、网络互通方案、DNS 互通方案、jenkins-pipeline 流水线构建方案、日志采集方案、监控方案等。\nService Mesh 发展趋势（续）： …","relpermalink":"/event/service-mesh-meetup-06/","summary":"这是第六届 Service Mesh Meetup。","title":"Service Mesh Meetup #6 广州站"},{"content":" 在微服务架构中，API网关是一个十分重要的存在。一方面它为外部的流量访问提供了统一的入口，使得可以方便的进行防火墙的策略实施；另一方面，可以在网关处进行流量控制、认证、授权、灰度发布、日志收集、性能分析等各种高级功能，使得业务功能与非业务功能有效解耦，给予了系统架构更大的灵活性。本系列文章尝试分析目前主流的云原生微服务网关，并比较它们各自的优劣。\n 网关选型标准 其实kubernetes本身有一个ingress controller，基于Nginx或HAProxy等7层代理进行流量的转发。不过ingress只能进行简单的反向代理，不支持流控、灰度、认证、授权等网关必备的功能。所以一般意义认为，ingress是一个7层http代理，而非api网关。本系列主要分析Ambassador、Traefik、Kong等具备微服务所需能力的网关产品。\n什么是Ambassador？ 这里引用官网的一段描述\n Ambassador是一个基于Envoy proxy构建的，kubernetes原生的开源微服务网关。Ambassador在构建之初就致力于支持多个独立的团队，这些团队需要为最终用户快速发布、监 …","relpermalink":"/blog/cloud-native-api-gateway-part-1/","summary":"在微服务架构中，API网关是一个十分重要的存在。在云原生时代，API网关有了新的定义和发展。本系列文章尝试分析目前主流的云原生微服务网关，并比较各自的优劣。","title":"构建云原生微服务网关-篇一：Ambassador"},{"content":"在上一篇文章中，我们通过一个网上商店的示例程序学习了如何使用Opentracing在Istio服务网格中传递分布式调用跟踪的上下文，以及如何将方法级的调用信息加入到Istio/Envoy生成的调用链中。采用Opentracing可以减少应用代码中传递HTTP header的重复代码；也可以根据需要在调用链中加入更细粒度的Span，以用于对系统性能瓶颈进行在线分析。\n在实际项目中，除了同步调用之外，异步消息也是微服务架构中常见的一种通信方式。在本篇文章中，我将继续利用eshop demo程序来探讨如何通过Opentracing将Kafka异步消息也纳入到Istio的分布式调用跟踪中。\neshop 示例程序结构 如下图所示，demo程序中增加了发送和接收Kafka消息的代码。eshop微服务在调用inventory，billing，delivery服务后，发送了一个kafka消息通知，consumer接收到通知后调用notification服务的REST接口向用户发送购买成功的邮件通知。\n   将Kafka消息处理加入调用链跟踪 植入Kafka Opentracing代码 首先 …","relpermalink":"/blog/using-opentracing-with-istio-part-2/","summary":"在实际项目中，除了同步调用之外，异步消息也是微服务架构中常见的一种通信方式。在本篇文章中，我将继续利用eshop demo程序来探讨如何通过Opentracing将Kafka异步消息也纳入到Istio的分布式调用跟踪中。","title":"洞若观火：使用OpenTracing增强Istio的调用链跟踪-篇二"},{"content":"本文是对ClusterMesh（Cilium的多集群实现）的深入研究。简而言之，ClusterMesh 提供：\n 通过隧道或直接路由，以本地性能对多个Kubernetes集群进行Pod IP路由，而无需任何网关或代理。 使用标准Kubernetes服务和coredns/kube-dns的透明服务发现。 跨多个集群的网络策略实施。 策略可以指定为Kubernetes NetworkPolicy资源或扩展的CiliumNetworkPolicy CRD。 透明加密，用于本地集群中的节点之间以及跨集群边界的所有通信。     image.png  多集群功能以层为单位构建，您可以选择使用所有层，也可以仅选择和使用所需的层。\n用例 在深入研究实现细节之前，让我们回顾一下连接多个Kubernetes集群的一些用例。\n用例：高可用性    image.png  对于大多数人来说，高可用性是最明显的用例。 此用例包括在多个区域（regions）或可用区（availability zones）中运行Kubernetes集群，并在每个集群中运行相同服务的副本。 一旦失败，请求可以故障转移到其他集群。 此 …","relpermalink":"/blog/deep-dive-into-cilium-multi-cluster/","summary":"ClusterMesh是Cilium的多集群实现，可以帮助cilium实现跨数据中心、跨VPC的多K8S集群管理，本文对于ClusterMesh的实现原理进行了深入探讨，并与istio的多集群管理进行了比较。","title":"深入了解Cilium多集群"},{"content":"前言 很多人学习和使用envoy时，很容易混淆一些概念，比如把异常点驱逐和微服务熔断混为一谈，分不清最大驱逐比与恐慌阈值的区别等。本文将基于envoy官方文档(v1.10.0)，详细介绍异常点检测的类型、驱逐算法以及相关概念的解析，并且最后对易混淆的几个概念进行辨析。\n简介 异常点检测(Outlier detection)和驱逐(Ejection)是用来动态确定上游集群中是否有表现不同于其他主机的实例，并将它们从健康负载均衡集中移除的过程。性能可能会沿着不同的轴变化，如连续失败，一时的成功率，短时间内的延迟等。异常值检测是一种被动的健康检查形式。Envoy还支持主动健康检查。被动和主动健康检查功能可以一起或独立使用，它们共同构成整个上游健康检查解决方案的基础。\n驱逐算法 根据异常值检测的类型，驱逐要么以直线方式运行（例如在连续返回5xx的情况下），要么以指定的间隔运行（例如在周期性成功率的情况下）。驱逐算法的工作原理如下:\n 主机被确定为异常点。 如果没有主机被驱逐，Envoy 会立即驱逐主机。否则，它会检查以确保驱逐主机的数量低于允许的阈值（ …","relpermalink":"/blog/envoy-feature-explain-outlier-detection/","summary":"很多人把异常点驱逐和微服务熔断混为一谈，分不清最大驱逐比与恐慌阈值的区别等。本文将基于envoy官方文档(v1.10.0)，详细介绍异常点检测的类型、驱逐算法以及相关概念的解析。","title":"Envoy功能点详解之异常点检测"},{"content":"本文为翻译文章，点击查看原文。\n编者按 本文通过介绍一个构建和运行微服务的平台dotCloud的历史、容器间路由，进而阐述了它与现代服务网格的相同与不同之处；接着介绍了如何实现一个类似的服务网格以及其与Istio的区别；最后引入了SuperGloo的介绍，一个管理和编排大规模服务网格的开源项目。\n前言 有许多的材料是关于服务网格的，这是另一个。为什么呢？因为我想分享给你们一个观点：有一些人认为服务网格在10年前就已经存在，远早于Docker和Kubernetes这样的容器平台的兴起。我并不是说这个观点比其他观点更好或更差，但是由于服务网格是相当复杂的架构，所以我相信多种观点有助于更好地理解它们。\n我将讨论dotCloud平台，这是一个建立在100多个微服务之上的平台，支持数千个运行在容器中的应用程序；我将解释在构建和运行它时所面临的挑战；以及服务网格将如何(或不会)提供帮助。\ndotCloud的历史 我已经写过关于dotCloud平台的历史和它的一些设计选择，但是我没有过多讨论它的网络层。如果你不想跳进我以前的关于dotCloud的博客，所有你需要知道的是，这是一个PaaS平台，它允许 …","relpermalink":"/blog/containers-microservices-service-meshes/","summary":"本文介绍了dotCloud的历史、容器间路由，进而阐述了它与现代服务网格的相同与不同之处，如何实现一个类似的服务网格以及其与Istio的区别。","title":"容器、微服务和服务网格简史"},{"content":"本文为翻译文章，点击查看原文。\n编者按\n 作者是Banzai Cloud的工程师，文章介绍了istio环境下，如何结合Prometheus进行网络度量指标监测，给出了一些示例配置。最后，还推广了一下Banzai Cloud自家的Pipeline，天然支持跨云、混合云情况下的网络度量监测，欢迎体验。\n Istio的一个核心功能就是网络流量的可观察性。因为所有服务间的通信都通过Envoy代理，而且Istio的控制平面可以从这些代理收集日志和指标，服务网格能够让你深入了解你的网络状况。虽然Istio的基本安装就装好了收集遥测数据所需的全部组件，但是理解这些组件如何配合，并且使他们能够工作在生产环境中却不是一个容易的事情。如果服务网格扩展到跨越多个云服务提供商的多个群集时，或者在混合云情况下，甚至在边缘计算环境下，这个工作就更加困难。我们在这篇文章中，尽可能解释清楚Istio的遥测是怎么工作的，并且会完整浏览一些监控例子，包括如何配置Prometheus的目标和尝试不同可用的指标。看完这篇文章，你将会对Banzai云中新的Pipeline组件有一个提前了解-它是一个跨云和混合云管理平台，基于顶 …","relpermalink":"/blog/exploring-istio-telemetry-and-observability/","summary":"文章介绍了istio环境下，如何结合Prometheus进行网络度量指标监测，给出了一些示例配置。最后，还推广了一下Banzai Cloud自家的Pipeline，天然支持跨云、混合云情况下的网络度量监测，欢迎体验。","title":"Istio遥测和可观察性探索"},{"content":"编者按  本文介绍了使用Envoy来加速Monzo，对比了使用Linkerd和Envoy，通过试验证明Envoy拥有更小的延迟。\n 我们基础设施的一个核心组件是远程过程调用(RPC)系统。它允许微服务通过网络以可伸缩和可容错的方式彼此通信。\n每当评估RPC系统时，通常会查看以下几个关键指标：\n  高可用，服务之间的通信应该尽可能快。RPC子系统应该做到延迟开销最小化，并在路由请求时避免路由到失败的服务副本。\n  可伸缩性，平台每秒会收到数以万计的请求，随着用户基数的增长，这些请求的数量还在不断增加。所拥有的任何子系统都需要继续支持这种增长。\n  可恢复性，当服务副本宕机、发生bug或者网络不可靠时。子系统应该能检测到不可用的下游和异常值，让系统收到反馈并绕过失败进行路由。\n  可观察性，RPC子系统生成大量关于平台性能的数据。与现有的度量标准和追踪基础设施集成，以在现有的服务度量标准和追踪的同时公开服务网格信息。\n  2016年，我们写了一篇关于构建现代银行后台的博客，其中一个关键部分是服务网格，它由Linkerd 1.0提供支持。当我们在2016年选择Linkerd 1.0时，服务网 …","relpermalink":"/blog/deploying-envoy-proxy/","summary":"本文介绍了使用Envoy来加速Monzo，对比了使用Linkerd和Envoy，通过试验证明Envoy拥有更小的延迟。","title":"部署Envoy代理来为Monzo提速"},{"content":"本文为翻译文章，点击查看原文。\n编者按 本文阐述了如何使用Helm和Istio实现手动金丝雀发布。\n我近期工作的项目目标是为微服务应用的金丝雀/分阶段发布制定一套流水线。而这些微服务被部署在Azure Kubernetes集群上（AKS）。\n本文假设您熟悉Kubernetes，Helm和Istio流量管理。\n这篇文章描述了发布的基本要求，为这些要求选择的发布策略，以及每个阶段实现细节。\n在后面的文章中，我将详细介绍本文中描述的发布阶段如何对应到Azure DevOps 发布流水线。\n关键要求 高级要求是将应用程序服务通过金丝雀版本发布到生产环境中。\n基本要求/限制：   每个Micro服务都应打包为单独的Helm图表。\n  不同的团队管理不同的微服务，每个团队应该能够独立于其他微服务发布。\n  服务网格Istio安装在Kubernetes集群上\n  在项目的初始阶段，只有Helm和Istio可用于集群。在此阶段，不使用类似flagger这样的工具。\n  团队可以使用Helm chart分阶段的发布新版本应用程序：\n- 10％ 的流量路由到新版本\n- 90％ 的流量路由到新版本\n- …","relpermalink":"/blog/canary-release-strategy-using-kubernetes-istio-and-helm/","summary":"本文阐述了如何使用Helm和Istio实现手动金丝雀发布。","title":"使用Kubernetes，Istio和Helm实现金丝雀发布"},{"content":"如今，API网关经历了一系列身份认同危机：\n 它们是集中式共享资源，有助于将API暴露和维护到外部实体吗？ 它们是否为集群的ingress哨兵，严格控制用户流量在集群的进出？ 或它们是否为某类API的集成，以便更简洁地表达API，具体取决于它所具有的客户端类型？ 当然还有不愿多谈但我经常听到的一个问题：“服务网格是否会使API网关过时？”  有关背景 随着技术的快速发展，以及行业在技术和架构模式中的快速发展，你会想到\u0026#34;这一切都让我头晕目眩\u0026#34;。在这篇文章中，我希望简化\u0026#34;API网关\u0026#34;的不同身份，澄清组织中哪些组可能使用API网关（他们试图解决的问题），并重新关注第一原则。理想情况下，在本文结束时，您将更好地了解不同团队在不同层面的API架构的作用，以及如何从每个层面中获取最大价值。\n在我们深入研究之前，让我们对API这个术语非常清楚。\n我对API的定义： 一种明确且有目的地定义的接口，旨在通过网络调用，使软件开发人员能够以受控且舒适的方式对组织内的数据和功能进行编程访问。\n这些接口抽象了实现它们的技术基础结构的细节。对于这些设计好的端点，我们期望能有些一定程度的文档，例如使用指南，稳定性报 …","relpermalink":"/blog/api-gateways-are-going-through-an-identity-crisis/","summary":"本文主要向读者介绍在FAAS和微服务架构之间的区别以及如何根据自身情况选择正确的架构方案。","title":"API Gateway的身份认同危机"},{"content":" 本文通过对Google近期发布的Anthos混合云产品的核心组件 Anthos Config Management进行分析，探究其背后设计的核心理念——Infrastructure as Code 是如何推动业内一直以来非标准的混合云慢慢走向标准化、供应商无锁定化。\n 0. Anthos Config Management是什么？ Hello World Demo 大家可以看Arctiq公司搞的修改node数量Demo：https://www.arctiq.ca/our-blog/2019/4/9/gke-on-prem-and-anthos-config-management/\n简单说，当你修改某个git管理下的yaml配置文件，里面描述了某个GKE私有集群某个cluster的node数量，然后Anthos Config Management会帮你自动的发命令并让节点数量变成你想要的那个。\nAnthos是啥？ 是Google发布的混合云多云平台\n GKE：Anthos 的命令和控制核心。用户通过 GKE 的控制平面来对分散在 Google 云、私有数据中心一级其它云平台上的基础设施 …","relpermalink":"/blog/anthos-config-management-intro/","summary":"简单说，当你修改某个git管理下的yaml配置文件，里面描述了某个GKE私有集群某个cluster的node数量，然后Anthos Config Management会帮你自动的发命令并让节点数量变成你想要的那个。","title":"Google混合云多云平台Anthos Config Management产品设计分析"},{"content":"背景 昨日得到的消息，CNCF正在筹建通用数据平面API工作组（Universal Data Plane API Working Group / UDPA-WG)，以制定数据平面的标准API，为L4/L7数据平面配置提供事实上的标准，初始成员将包括 Envoy 和 gRPC 项目的代表。\n目前还处于非常早期的筹备阶段，具体内容可以见下面的文档：\nhttps://docs.google.com/document/d/1y-H-pQ2mmhBPX_U9pP3mMMUbEpZskxBdEbwd5KlivY4/edit#heading=h.fdi15bvpmxen\n方便起见，我将目前文档的内容搬运出来并简单翻译如下：\n文档内容 目标 通用数据平面API工作组（Universal Data Plane API Working Group/UDPA-WG）的目标是将对数据平面代理和负载均衡器的通用控制和配置API感兴趣的行业各方聚集在一起。\n愿景 通用数据平面API（UDPA） …","relpermalink":"/blog/cncf-udpa-wg/","summary":"CNCF正在筹建通用数据平面API工作组（Universal Data Plane API Working Group / UDPA-WG)，以制定数据平面的标准API，为L4/L7数据平面配置提供事实上的标准，初始成员将包括 Envoy 和 gRPC 项目的代表。","title":"CNCF正在筹建通用数据平面API工作组，以制定数据平面的标准API"},{"content":" 摘要： Docker Hub遭入侵，19万账号被泄露；Java 8 终于开始提供良好的容器支持；Snyk 年度安全报告出炉，容器安全问题形势空前严峻。\n 业界要闻  Docker Hub遭入侵，19万账号被泄露 : 4月25日Docker官方邮件曝露，因为Hub的一个数据库收到非授权访问，影响了约19万用户的用户名和哈希后的密码，以及用户自动构建的Github和Bitbucket Token。Docker公司建议用户修改其登录密码。如果您在公有云上的应用依赖于来自 Docker Hub的镜像，我们强烈建议您登录容器服务控制台更新相应的docker login信息或kubernetes secret。此外，阿里云容器镜像服务企业版提供网络访问控制、独享OSS Bucket加密存储等安全加固功能，最大程度保障您的镜像仓库的安全。 Java 8 终于开始提供良好的容器支持**：**长久以来，容器 和 Java 就像一对“欢喜冤家”。一方面，容器技术的“不可变基础设施”特性为开发者带来了无比宝贵的依赖与环境一致性保证；但另一方面， Linux 容器通过 Cgroups 对应用进行资源限制的方 …","relpermalink":"/blog/cloud-native-weekly-03/","summary":"这是 Cloud Native 周报第3期。","title":"云原生生态周报（Cloud Native Weekly）第3期"},{"content":"本文为翻译文章，点击查看原文。\n编者按\n Envoy 创始人 Matt Klein 分享了他对企业开始使用 Envoy 部署微服务所遇到的挑战以及可观察性的看法和选择，他认为 Service Mesh 还处于早期阶段，企业应该逐步推进，同时最好选择商业解决方案。\n Service Mesh 的受欢迎程度正在飙升，尽管它还处于初期阶段。在为部署 Envoy 的企业寻求有关服务网格和可观察性最佳实践的建议时，我与 Envoy 的创建者和云原生计算基金会（CNCF）技术监督委员会（TOC）的代表 Matt Klein 聊了聊。在下面的讨论中，Matt 分享了他对企业开始使用 Envoy 部署微服务所遇到挑战的看法，同时也谈到了可观察性，以及在与 Envoy 一起选择可观察性平台时可以做出的选择。\nStela Udovicic：您认为在采用微服务时遇到什么样的痛点表明应该去考虑 Envoy？\nMatt Klein：我认为当人们采用微服务时，他们会看到普遍存在的问题，其中很多问题都与网络和可观察性有关。有关网络稳定性的问题，有关重试和断路等相似的问题都是常见的例子。所以，这将通过用他们最终使用的 …","relpermalink":"/blog/envoy-service-mesh-and-observability-best-practices-for-enterprises/","summary":"通过对Envoy创始人Matt Klein的采访，Matt分享了他对企业开始使用微服务部署Envoy所遇到的挑战以及可观察性的看法和选择。","title":""},{"content":"本文为翻译文章，点击查看原文。\n编者按 作者是Shopify的工程师，公司在引入Istio作为服务网格的过程中发现消耗的计算成本过高。基于此问题，作者使用了公司内部开发的基准测试工具IRS对Istio和Linkerd的CPU使用情况做了测试和对比。测试结果发现Istio在CPU的使用上要比Linkerd耗费更多的资源。这为Istio的拥趸们敲响了警钟，提醒大家Istio在生产化的道路上还有很多需要优化的地方。\n背景 在Shopify，我们正在部署Istio作为服务网格。我们做的很不错但遇到了瓶颈：成本。\nIstio官方发布的基准测试情况如下：\n 在Istio 1.1中一个代理每秒处理1000个请求大约会消耗0.6个vCPU。\n 对于服务网格中的第一个边界（连接的两端各有两个代理），1200个内核的代理每秒处理100万个请求。Google的价格计算器估计对于n1-standard-64机型每月每个核需要40美元，这使得这条单边界的花费超过了5万美元/每月/每100万请求。\nIvan Sim 去年写了一个关于服务网格延迟的很棒的文章 ，并保证会持续更新CPU和内存部分，但目前还没有完成： …","relpermalink":"/blog/benchmarking-istio-and-linkerd-cpu/","summary":"本文对Istio和Linkerd的CPU使用情况做了基准测试和比较。","title":"Istio和Linkerd的CPU基准测试"},{"content":"   本周报由阿里巴巴容器平台联合蚂蚁金服共同发布\n本周作者：傅伟，敖小剑，张磊，临石，南异，心贵，王夕宁，长虑\n责任编辑：木环\n业界要闻  Kubernetes External Secrets 近日，世界上最大的域名托管公司 Godaddy公司，正式宣布并详细解读了其开源的K8s外部 Secrets 管理项目： Kubernetes External Secrets，简称KES。这个项目定义了ExternalSecrets API，让开发者可以在K8s内部以和使用内部Secret相似的方式使用外部系统提供的Secrets，大大简化了开发者为了让应用获取外部Secrets所需要的工作量。从安全的角度，这个方案降低了使用外部Secret时候的攻击面（外部Secret是通过一个K8s API暴露的，而不是之前的每个应用自己实现），也降低了应用在适配外部Secret时候的难度。另外，Kubernetes KMS plugin开源插件 ，采用信封加密的方式与密钥管理能力结合，对进行K8s secret的存储加密。建议安全相关技术人员重点关注。 CNCF 官方宣布为中国开发者提供免费的云原生技 …","relpermalink":"/blog/cloud-native-weekly-02/","summary":"这是 Cloud Native 周报第2期。","title":"云原生生态周报（Cloud Native Weekly）第2期"},{"content":"原文地址：http://wei-meilin.blogspot.com/2019/03/my2cents-eight-things-leads-to.html。\n编者按\n作者以较为嘲讽的口吻列举了在开发云原生微服务系统时可能出现的8个错误，告诫开发人员要注意避免这些问题。其观点集中在业务划分、解耦合、重复代码和过度的API交互等方面。作者以自嘲的方式把这些想法用\u0026#34;我的两分钱\u0026#34;比喻，译者意译为\u0026#34;随笔\u0026#34;以方便理解。\n大部分标注“我的两分钱”的文章只是一些想法。你只需要快速愉快的阅读，不用太深入，但值得做笔记：）\n1. 设置错误的领域边界 这是一种工作保障策略，它让参与项目的每个人在开发和测试中无休止地循环，而无法将服务投入生产环境！首先，一切都从简单开始，逐渐发现有越来越多的功能、业务逻辑被添加到微服务中，最后甚至不得不重新命名整个该死的东西。\n   1  临床症状和副作用\n 不断增长的微服务变得过于臃肿，或者域中的每个微服务都调用你的服务。（有时核心微服务具有相同的行为，但你不应该在单个域中看到如此多的这类服务）。这违反了简单、可维护和敏捷的微服务原则。 到处都是重复的微服务/代码。你可 …","relpermalink":"/blog/eight-things-leads-to-developing-catastrophic-cloud-native-microservices-system/","summary":"本文介绍了作者认为在开发云原生微服务系统时会出现的8个问题，并告诫大家避免犯错。","title":"导致云原生微服务系统开发灾难性的8件事"},{"content":" 本周作者：张磊 临石 禅鸣 至简 宋净超\n编辑：木环\n 这是 Cloud Native 周报第一期。\n业界要闻   在上周于旧金山举办的 Google Cloud Next 2019 大会上，Google Cloud正式发布了：\n Cloud Run。这是一个跟Microsoft Azure ACI，AWS Fargate 类似的容器实例服务。但与 ACI 和 Fargate 基于虚拟机技术栈的实现不同，Google 的 Cloud Run 服务则是基于 Knative 这个 Kubernetes 原生的 Serverless 基础设施项目完成的。这也是业界第一个基于 Knative + Kubernetes + gVisor 体系的Serverless 服务。此外，Cloud Run 的计费模型也颇具创新性：它不像 Fargate 那样完全按请求数目计费，而是将所有并发的请求算在一个计费单位内，这有望大大减低用户需要支付的成本。 Traffic Director。一个与AWS App Mesh对标的Service Mesh产品。Traffic Director通过xDS协议与数据平 …","relpermalink":"/blog/cloud-native-weekly-01/","summary":"这是 Cloud Native 周报第一期。","title":"云原生生态周报（Cloud Native Weekly）第1期"},{"content":"本文为翻译文章，点击查看原文。\n持续部署（Continuous delivery）符合企业软件实践，它是完善持续集成（continuous integration）原则的自然演化。 但持续部署案例却非常罕见，其中原因可能是需要复杂的管理以及担心部署失败而影响系统的可用性。\nFlagger是一个开源的Kubernetes operator，旨在解决上述复杂性。它使用Istio切换流量并通过Prometheus指标分析业务应用在更新发布期间的状态表现。\n以下是在Google Kubernetes Engine（GKE）环境安装和使用Flagger的步骤指导。\n搭建Kubernetes cluster 首先创建GKE集群和Istio组件（如果你没有GCP帐号，点击注册帐号）。 登录Google Cloud，创建项目并为其启用结算。安装gcloud命令行工具，然后使用gcloud init配置项目。 设置默认项目，计算资源区域和地区（用实际项目ID替换PROJECT_ID）：\ngcloud config set project PROJECT_ID gcloud config set …","relpermalink":"/blog/automated-canary-deployments-with-flagger-and-istio/","summary":"本文介绍如何使用Flagger和Istio实现自动化金丝雀部署。","title":"基于Flagger和Istio实现自动化金丝雀部署"},{"content":"Istio 服务网格架构的概述，通常都是从对数据面和控制面的叙述开始的。\n来自 Istio 的官方文档。\nIstio 服务网格逻辑上分为数据平面和控制平面。\n数据平面由一组以 sidecar 方式部署的智能代理（Envoy）组成。这些代理和 Mixer（一个通用的策略和遥测中心）合作，对所有微服务之间的之间所有的网络通信进行控制。\n控制平面负责管理和配置代理来路由流量。此外控制平面配置 Mixer 以实施策略和收集遥测数据。\n   Sidecar 注入到应用的过程，可以是自动的，也可以是手动的，了解这一过程是很重要的。应用的流量会被重定向进入或流出 Sidecar，开发人员无需关心。应用接入 Istio 服务网格之后，开发者可以开始使用网格功能并从中受益。然而数据平面是如何工作的，以及需要怎样的条件才能完成这种无缝工作？本文中我们会深入到 Sidecar 注入模型中，来更清晰的了解 Sidecar 的注入过程。\nSidecar 注入 简单来说，注入 Sidecar 就是把附加的容器配置插入 Pod 模板的过程。Istio 服务网格所需的附加容器是：\nistio-init 这个初始化容器 …","relpermalink":"/blog/data-plane-setup/","summary":"本文中我们会深入到 Sidecar 注入模型中，来更清晰的了解 Sidecar 的注入过程。","title":"Istio Sidecar 注入过程解密"},{"content":"本文为翻译文章，点击查看原文。\n“服务网格”是一个热点话题。似乎去年每一个与容器相关的大会都包含了一个“服务网格”议题，世界各地有影响力的业内人士都在谈论这项革命性的技术带来的好处。\n然而，截至2019年初，服务网格技术仍不成熟。主要的实现产品Istio还没有准备好进行广泛的企业级部署，只有少数成功的案例运行在生产环境中。也存在其他的服务网格产品，但并没有得到业界专家所说的广泛关注。\n我们如何协调这种不匹配呢？一方面，我们听到“你需要一个服务网格”的声音，而另一方面，企业和公司多年来一直在没有服务网格的容器平台上成功地运行着它们的应用。\n开始使用 Kubernetes 服务网格是你旅途中的一个里程碑，但它不是起点。\n在容器应用的生产环境部署中，Kubernetes已经被证明是一个可以胜任的平台。它提供了一个丰富的网络层，提供了服务发现， 负载均衡， 健康检查 和访问控制 的能力，以支持复杂的分布式系统。\n这些功能对于简单和易于理解的应用程序来说已经足够了， 遗留的应用已经被容器化。 它们允许你满怀信心地部署应用，根据需要扩容，避免意外故障，并实现简单的访问控制。\n   1  ① …","relpermalink":"/blog/do-i-need-a-service-mesh/","summary":"本文对当前的服务网格发展状况进行了分析和预测，建议在适当的时机开始使用服务网格来替代现有解决方案。","title":"你真的需要服务网格吗？"},{"content":"本文为翻译文章，点击查看原文。\n在微服务领域，各个服务需要在网络上执行大量的调用。而网络是很脆弱的，如果某个服务繁忙或者无法响应请求，将有可能引发集群的大规模级联故障，从而造成整个系统不可用，通常把这种现象称为 服务雪崩效应。为了使服务有一定的冗余，以便在系统故障期间能够保持服务能力，我们可以使用熔断机制。\n什么是熔断？ 熔断（Circuit Breaking）这一概念来源于电子工程中的断路器（Circuit Breaker）。在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。\n如果不采取熔断措施，我们的系统会怎样呢？我们来看一个栗子。\n当前系统中有 A、B、C 三个服务，服务 A 是上游，服务 B 是中游，服务 C 是下游。它们的调用链如下：\n   一旦下游服务 C 因某些原因变得不可用，积压了大量请求，服务 B 的请求线程也随之阻塞。线程资源逐渐耗尽，使得服务 B 也变得不可用。紧接着，服务 A 也变为不可用，整个调用链路被拖垮。\n   像这种调用链路的连锁故障，就是上文 …","relpermalink":"/blog/circuit-breaking-and-outlier-detection-in-istio/","summary":"通过 Istio 来窥探 Envoy 的熔断与异常检测机制。","title":"熔断与异常检测在 Istio 中的应用"},{"content":"本文为翻译文章，点击查看原文。\n编者案 Idit Levine 作为 solo.io 创始人兼首席执行官，在本系列博客中介绍了她们的产品 Gloo。这篇博客是系列中的其中一篇，这一篇的主要内容是，如果要基于 Envoy 构建一个控制平面的话，我们需要考虑哪些问题；要用什么样的解决方案来应对这些问题。作者在本文章阐述了 Envoy 的工作原理、为什么要选择 Envoy 以及在构建一个控制平面过程中要做出的技术体系结构的抉择。\n在本系列博客中，我们将分享如何为 Envoy Proxy 构建一个多用途控制平面 Gloo 的经验。本系列的第一个博客关注于 Envoy 的设计，以及在构建控制平面的第一层时需要做出的技术体系结构抉择。\nEnvoy Proxy 是由 Lyft 研发团队设计的通用数据平面。Envoy 的优势源于性能、可扩展性和动态配置的结合。然而，这种能力是以增加配置复杂性为代价的。事实上，Envoy 配置是由管理层(通常称为“控制平面”)通过机器生成的。\n为 Envoy 编写一个控制平面并不是一件容易的事情，就像 Ambassador 创建者最近在一篇文章中描述的那样，该文章详细描 …","relpermalink":"/blog/building-a-control-plane-for-envoy/","summary":"本文介绍如何利用 Gloo 提供的功能，减少自己需要编写的代码。","title":"为 Envoy 赋能——如何基于 Envoy 构建一个多用途控制平面"},{"content":"   本文为翻译文章，点击查看原文。\n这篇文章是使用Istio打造微服务的第二部分，如果没有看第一篇的话，请先看第一部分内容，因为这篇博客是以第一篇博客为基础进行进一步深入的。\n在第一篇文章中，我们建立了一个Kubernetes集群，并且在上面部署了 Istio 和示例微服务应用程序“Sentiment Analysis”，用来展示Istio的功能。\n使用Istio后，我们可以把应用层中的重试、超时、断路器、跟踪、监控内容抛弃，以保持我们的服务应用保持在一个简单专注的微型状态，（如图1所示）。此外，我们还启用了高级测试和部署技术，如A/B测试，镜像和金丝雀部署。\n   图1.微服务的形式构成  在本文中，我们将带领读者使用Istio来处理身份验证和授权！\nIstio中的认证和授权 我永远不会相信认证和授权会让我感到兴奋！但是Istio可以让这个话题变得有趣，这种情况下难道你不感到兴奋么？\n答案很简单： Istio将这些职责从我们的服务下沉到Envoy代理，当请求到达我们的服务时，它们已经经过身份验证和授权，我们只需编写提供业务价值的代码。\n听起来不错？ 让我们去瞧瞧吧！\n使用Auth0 …","relpermalink":"/blog/back-to-microservices-with-istio-part-2-authentication-authorization/","summary":"系列文章使用Istio打造微服务的第2部分。","title":"使用Istio打造微服务（第2部分）——认证和授权"},{"content":"下面这段是发布说明，来自 Istio 官方博客 https://istio.io/zh/blog/2019/announcing-1.1/，译者宋净超。\nIstio 于北京时间今日凌晨4点，太平洋时间下午1点 Istio 1.1 发布。\n自从去年 7 月份 1.0 发布以来，为了帮助人们将 Istio 投入生产我们做了很多工作。我们不出所料得发布了很多补丁（到目前为止已经发布了 6 个补丁！），但我们也在努力为产品添加新功能。\n1.1 版本的主题是”Enterprise Ready“（企业级就绪）。我们很高兴看到越来越多的公司在生产中使用 Istio，但是随着一些大公司加入进来，Istio 也遇到了一些瓶颈。\n我们关注的主要领域包括性能和可扩展性。随着人们将 Istio 逐步投入生产，使用更大的集群以更高的容量运行更多服务，可能会遇到了一些扩展和性能问题。Sidecar 占用了太多资源增加了太多的延迟。控制平面（尤其是 Pilot）过度耗费资源。\n我们投入了很多精力在使数据平面和控制平面更有效率上。在 1.1 的性能测试中，我们观察到 sidecar 处理 1000 rps …","relpermalink":"/blog/istio-11/","summary":"Istio 1.1发布了，该版本历时8个月，ServiceMesher 社区同时推出了 Istio 中文文档。","title":"Istio 1.1发布，中文文档同时释出"},{"content":"快速开始：https://micro-mesh/examples/adapter/auth源码传送门。\n研究Istio下构建简洁的微服务架构，对Istio的研究也更深入，自定义Mixer Adapter必不可少，以下结合使用场景做一个自定义适配器的实践分享。\n背景    结合https://github.com/hb-go/micro-mesh的实践场景，需要在ingressgateway与API service间加入认证\u0026amp;鉴权(JWT\u0026amp;RBAC)，自然考虑Istio提供的安全方案，但使用JWT做认证鉴权在后端是无状态的，这样在使用场景上有一定限制，如:\n 密码修改、终端连接限制等场景下无法踢除 访问控制策略无法实时生效   默认方案只是在一些场景下不合适，根据具体需求考虑。\n 基于这样的场景可以自定义Adapter来实现，目标:\n Token-JWT  服务端验证token有效性 应对密码修改、终端数量限制等场景   ACL-Casbin  服务端获取用户角色，做API访问控制 用户角色及接口授权策略实时生效    以下示例对token验证、访问控制不做具体设计，重点介绍如何自定义一 …","relpermalink":"/blog/custom-istio-mixer-adapter/","summary":"研究Istio下构建简洁的微服务架构，对Istio的研究也更深入，自定义Mixer Adapter必不可少，以下结合使用场景做一个自定义适配器的实践分享。","title":"自定义Istio Mixer Adapter示例教程（附源码）"},{"content":"本文为翻译文章，点击查看原文。\n背景 Istio发送的默认指标有助于了解流量如何在集群中流动。但是，要了解应用程序的行为，还需要应用程序指标。\nPrometheus提供了客户端库，您可以使用它来检测应用程序并发送监测指标。 这很好，但也提出了一些问题：\n 您从哪里抓取这些指标？ 您是使用Istio附带的Prometheus，还是自建新的Prometheus？ 如果使用Istio附带的Prometheus，那您需要使用什么样的配置来获取这些指标？  让我们尝试回答这些问题。\nIstio的Prometheus vs. 独立的Prometheus 在Prometheus中，有一个联邦功能，它允许一个Prometheus服务端从另一个Prometheus服务端获取指标数据。如果您想将Istio指标和应用程序指标分开，可以为应用程序指标设置一个单独的Prometheus服务端。然后，您可以使用联邦功能来获取应用程序指标以及Istio默认的观测指标。\n一种更简单的方法是直接使用Istio的Prometheus来提取应用程序的指标，这正是我在这里要重点讨论的。\n发送应用程序指标 要从应用程序发送自定 …","relpermalink":"/blog/application-metrics-in-istio/","summary":"本文介绍了在Istio环境下进行应用程序指标度量的背景知识、一般方法以及可能出现的问题。","title":"Istio中的应用程序指标度量"},{"content":"   Istio 是一个由Google，IBM和Lyft团队合作开发的开源项目，它提供了基于微服务的应用程序复杂性的解决方案，仅举几例：\n 流量管理 ：超时，重试，负载均衡， 安全性： 最终用户身份验证和授权， 可观察性： 跟踪，监控和记录。  所有这些都可以在应用程序层中解决，但是您的服务不再是“微型”，相对于提供业务价值的资源，实现这些的所有额外工作都是公司资源的压力。我们来举个例子：\n PM：添加反馈功能需要多长时间？\n  开发：两个冲刺（敏捷开发中的术语，一般一个冲刺周期30天）。\n  PM：什么……？ 那只是一个CRUD！\n  开发：创建CRUD很容易，但我们需要对用户和服务进行身份验证和授权。而且由于网络不可靠，我们需要在客户端实施重试和熔断器，并确保我们不会占用整个系统，我们需要Timeout和Bulkheads，另外还要检测我们需要监控的问题，跟踪[… ]\n  PM：那么我们就把它放在产品服务中吧。哎呀！\n 你明白了，必须满足所有形式才可以为我们添加一项巨大的服务（有很多不是业务功能的代码）。在本文中，我们将展示Istio如何从我们的服务中删除所有上述交叉问题。\n    …","relpermalink":"/blog/back-to-microservices-with-istio-p1/","summary":"使用Istio打造微服务的教程（第1部分）。","title":"使用Istio打造微服务（第1部分）"},{"content":"2019年2月15日晚，我在朋友圈里发起了 Istio 知识图谱项目。\n   Istio 知识图谱发起  而后获得 ServiceMesher 社区成员的热烈响应，在此后的一周内陆续有151参与进来。\n   istio 知识图谱参与人员  经过10天的孵化，Istio 知识图谱 v0.1发布了，该版本作为 Istio 知识图谱的启动版本，未来将会进一步细化甚至推出一本开源书籍。\nIstio 知识图谱阅览    Istio knowledge map  Istio 知识图谱提供以下格式，点击下面的链接可以查看：\n Markdown MindNode PDF PNG  参与贡献 Istio 知识图谱 v0.1 在 Google docs 上协作编辑，参与编辑请参考贡献指南。\n致谢 感谢 Istio 知识图谱工作组的全体人员，特别鸣谢以下参与贡献者（GitHub ID，按字母顺序排序）：\n dreadbird haiker2011 icyxp junxy kongbo1987 mgxian nicklv sataqiu rootsongjc wujunze xianyuluo …","relpermalink":"/blog/istio-knowledge-map-v0-1-release/","summary":"Istio知识图谱 v0.1版本发布及 Istio handbook 联署签名征集。","title":"Istio知识图谱 v0.1 发布及社区图书孵化"},{"content":"本文为翻译文章，点击查看原文。\n 编者注：原文于 2017 年 7 月 30 日发布于 Envoy 博客上。\n 关于 Envoy 代码库的底层技术文档目前相当稀少。 为了纠正这个问题，我打算做一系列关于各种子系统的博客文章。 由于这是第一篇文章，请让我知道您的想法以及您希望了解的其他主题。\n我经常看到的关于 Envoy 的最常见技术问题之一就是要求从底层描述 Envoy 使用的线程模型。这篇文章将介绍 Envoy 如何将连接映射到线程，以及内部使用的线程本地存储（TLS）系统的描述，以使代码极其并行且性能更高。\n线程模型概览    Envoy 使用三种不同类型的线程，如上图所示。\n Main：此线程负责服务器启动和关闭，所有 xDS API 处理（包括 DNS，运行状况检查 和常规 集群管理），运行时，统计刷新，管理和一般进程管理（信号，热启动 等）。 在此线程上发生的所有事情都是异步的并且是 “非阻塞的”。通常，主线程协调所有不需要大量 CPU 来完成的关键过程功能。 这允许将大多数管理代码编写为单线程编写。 Worker：默认情况下，Envoy 为系统中的每个硬件线程生成一个工作线 …","relpermalink":"/blog/envoy-threading-model/","summary":"Envoy 的架构师 Matt Klein 对 Envoy 中多线程模型的简单介绍。","title":"Envoy 架构师 Matt Klein 对 Envoy 线程模型的简介"},{"content":"   发布概述  本文为翻译文章，点击查看原文。\n我们很高兴地宣布Cilium 1.4版本。 该版本引入了几项新功能以及优化和可扩展性工作。 重点包括增加全局服务，提供跨多个集群的Kubernetes服务路由、DNS请求/响应感知授权和可见性、透明加密（beta）、IPVLAN支持以获得更好的性能和延迟（beta）、与Flannel集成、GKE在COS上支持、基于AWS元数据的策略实施（alpha）以及优化内存和CPU使用的重要工作。\n像往常一样，感谢过去4个月中在版本1.3和1.4之间贡献了1048次提交的Cilium开发人员及整个社区。\nCilium是什么？ Cilium是一个开源软件，用于透明地提供和保护使用Kubernetes、Docker和Mesos等Linux容器管理平台部署的应用程序服务之间的网络和API连接。\nCilium的基础是一种名为BPF的新Linux内核技术，它可以在Linux本身内动态插入强大的安全性、可见性和网络控制逻辑。BPF用于提供诸如多集群路由，负载均衡以取代kube-proxy，使用X.509证书的透明加密以及网络和服务安全性等功能。除了提供传统的网 …","relpermalink":"/blog/cilium-1-4/","summary":"Cilium 1.4：多集群服务路由，DNS授权，IPVLAN支持，透明加密，Flannel集成，与其他CNI的基准测试。","title":"Cilium 1.4 发布了，新功能一览"},{"content":"2019年2月初，CNCF 发布了2018年的年度报告，这是 CNCF 继2017年度报告之后，第二次发布年度报告，2017年度的报告只有区区14页，今年的报告长度增长了一倍达31页。下面我将带大家一起来深度解读下这份2018年的年度报告，一窥 CNCF 过去一年里在推广云原生的道路上取得的进展。\n注：本文最后附上了2017年和2018年度的报告下载地址。\nCNCF 年度报告涵盖的范围 在解读 CNCF 的2018年度报告之前，我们先简单回顾下2017年度的报告，因为2017年度报告是 CNCF 的首份年度报告，这样我们也能更好的了解 CNCF 的来龙去脉。\n2017年度报告已经基本确定了 CNCF 每个年度报告所包含的主题：\n 自我定位 会员参与情况 终端用户社区 项目更新 会议和活动 社区 培训和认证  以上为 CNCF 主要的市场活动，2017年时其成立的第二年，经过一年时间的筹备，这一年里各种市场活动都已经开始确立并有声有色的开展了起来，包括 KubeCon、成员单位、终端用户都已经发展起来了，以后历年里只是对其不断的发展和完善。\n2018年度报告中又新增了一些主题，这些主题是 …","relpermalink":"/blog/cncf-annual-report-2018-review/","summary":"本文是对 CNCF（云原生计算基金会）2018年年度报告的解读。","title":"CNCF年度报告解读（2018年）"},{"content":"本文为翻译文章，点击查看原文。\ngRPC-Web作为gRPC的JavaScript客户端库，使Web应用可以不用自定义HTTP服务器为中介，直接通过Envoy与gRPC服务交互。经过了约两年的活跃开发，上周（2018年10月底，译者注）gRPC团队在CNCF博客宣布gRPC-Web的GA版本正式发布。\n自从在Improbable engineering blog读到了这篇博文，我个人就对gRPC-Web很感兴趣。之前一直很看好gRPC的性能、可拓展性和IDL（接口描述语言）驱动的服务交互方式，而且特别想在服务调用链中去掉REST部分。我很高兴gRPC-Web发布正式版本，它在 Web 开发领域开辟了新的方式。\n我觉得gRPC-Web的优势就是自Web端向下构建了完整的端到端gRPC服务架构。在以前，如果你想让web端与gRPC服务交互，就必须自己开发REST接口处理HTTP和gRPC之间的转换。而使用gRPC-Web，我们不再需要自己写额外的HTTP接口，可以直接用Protocol Buffers封装所有数据接口（这里借用了Envoy，在下文我会详细解释）。\nREST 方式 下图展示了 …","relpermalink":"/blog/envoy-and-grpc-web-a-fresh-new-alternative-to-rest/","summary":"本文为大家推荐的是一种REST的替代方案 Envoy + gRPC-Web。","title":"REST的替代者：Envoy+gRPC-Web"},{"content":"这不是一篇教程，本文试图带您梳理清楚 Kubernetes、Envoy（xDS 协议）以及 Istio Service Mesh 之间的关系及内在联系。本文介绍了 Kubernetes 中的负载均衡方式，Envoy 的 xDS 协议对于 Service Mesh 的意义以及为什么说有了 Kubernetes 还需要 Istio。\nEnvoy 对于 Service Mesh 或者说 Cloud Native 最大的贡献就是定义了 xDS，Envoy 虽然本质上是一个 proxy，但是它的配置协议被众多开源软件所支持，如 Istio、Linkerd、AWS App Mesh、SOFAMesh 等。\n关于本文标题\n2018年9月1日，Bilgin Ibryam 在 InfoQ 发表了一篇文章 Microservices in a Post-Kubernetes Era，中文版见后 Kubernetes 时代的微服务（译文有些错误，仅供参考）。本文标题中虽然没有明确指明”后 Kubernetes 时代的微服务“是什么，但是从文中可以看出作者的观点是：在后 Kubernetes 时代，服务网 …","relpermalink":"/blog/service-mesh-the-microservices-in-post-kubernetes-era/","summary":"本文假定您已经对 Kubernetes 有比较全面的了解，同时还使用过 Istio service mesh，但是对于 Kubernetes、Envoy 及 Istio 之间的关系不甚了解，及 Istio 如何使用 xDS 协议控制所有的 Sidecar 有浓厚的兴趣，那么推荐您继续阅读。","title":"Service Mesh——后 Kubernetes 时代的微服务"},{"content":" 崔秀龙，HPE 软件分析师，Kubernetes 权威指南作者之一，Kubernetes、Istio 项目成员。\n本文根据崔秀龙在 2019 广州 Service Mesh Meetup#5 分享整理，完整的分享 PPT 获取方式见文章底部。\n本文内容收录在崔秀龙的新书：《深入浅出 Istio - Service Mesh 快速入门与实践》的第十章，该书将于近期由博文视点出版发行，敬请关注。\n    img  Service Mesh 概念在 Linkerd 落地之后，让一直漂浮在空中的微服务治理方案有了一个明确的落地点，给微服务架构的具体实现指出了一个清晰的方向，围绕这一概念逐步开始形成新的技术生态，在业界造成不少震动。这种震动对于企业 IT 转型工作带来的影响，甚至比容器化的影响更加深远。对于承担企业 IT 转型工作的企业服务行业来说，也自然首当其冲感觉到新概念带来的压力。\n企业服务行业和互联网行业相比，业务形态、技术积累和人员结构等方面都大相径庭，举几个常见的差异：\n 开发、运维、基础设施所属 人员结构、水平和年龄 资源使用率差别 架构和平台一致性 负载能力 … …","relpermalink":"/blog/explore-at-the-edge-of-istio-service-mesh/","summary":"本文根据崔秀龙在 2019 广州 Service Mesh Meetup#5 分享整理。","title":"在网格的边缘试探——企业服务行业如何试水 Istio"},{"content":"   2019年广州 service mesh meetup     唯品会 Service Mesh 的实践分享 郑德惠 唯品会Java资深开发工程师，内部Service Mesh框架负责人，唯品会开源项目vjtools重要开发者，10年电信与互联网后台开发经验。\n   郑德惠，唯品会     SOFAMosn 持续演进路径及实践案例 陈逸凡 花名无钩，蚂蚁金服资深开发工程师。专注于网络接入层，高性能服务器研发，SOFAMosn团队核心成员\n   陈逸凡，蚂蚁金服     在网格的边缘试探——企业 Istio 试水指南 崔秀龙 HPE 软件分析师，Kubernetes 权威指南作者之一，Kubernetes、Istio 项目成员\n   崔秀龙 service mesh     Roundtable：回顾2018，Service Mesh 蓄势待发    陈逸凡、崔秀龙、敖小剑、郑德惠共同参加的圆周讨论环节，共话 service mesh，解答观众现场提问。\n视频回放与资料下载 地址：https://tech.antfin.com/activities/72/review\n致谢 感谢以 …","relpermalink":"/blog/service-mesh-meetup-guangzhou-20190106/","summary":"ServiceMesher社区和蚂蚁金服联合主办、SOFAStack社区协办的第五届Service Mesh Meetup广州站收官，唯品会郑德惠、蚂蚁金服陈逸凡、HPE的崔秀龙给大家带来分享并增加Roundtable环节。","title":"第五届Service Mesh Meetup广州站回顾"},{"content":"Envoy 是 Istio Service Mesh 中默认的 Sidecar，Istio 在 Enovy 的基础上按照 Envoy 的 xDS 协议扩展了其控制平面，在讲到 Envoy xDS 协议之前还需要我们先熟悉下 Envoy 的基本术语。下面列举了 Envoy 里的基本术语及其数据结构解析，关于 Envoy 的详细介绍请参考 Envoy 官方文档，至于 Envoy 在 Service Mesh（不仅限于 Istio） 中是如何作为转发代理工作的请参考网易云刘超的这篇深入解读 Service Mesh 背后的技术细节 以及理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持，本文引用其中的一些观点，详细内容不再赘述。\n   Envoy proxy 架构图  基本术语 下面是您应该了解的 Enovy 里的基本术语：\n Downstream（下游）：下游主机连接到 Envoy，发送请求并接收响应，即发送请求的主机。 Upstream（上游）：上游主机接收来自 Envoy 的连接和请求，并返回响应，即接受请求的主机。 Listener（监听 …","relpermalink":"/blog/envoy-proxy-config-deep-dive/","summary":"本文介绍了 Envoy proxy 的概念，对应的 xDS 的版本以及配置的详细解析。","title":"Istio 的数据平面 Envoy Proxy 配置详解"},{"content":"讲师与演讲话题 唯品会 Service Mesh 的实践分享 郑德惠 唯品会Java资深开发工程师，内部Service Mesh框架负责人，唯品会开源项目vjtools重要开发者，10年电信与互联网后台开发经验。\nSOFAMosn 持续演进路径及实践案例 陈逸凡 花名无钩，蚂蚁集团资深开发工程师。专注于网络接入层，高性能服务器研发，SOFAMosn团队核心成员\n在网格的边缘试探——企业 Istio 试水指南 崔秀龙 HPE 软件分析师，Kubernetes 权威指南作者之一，Kubernetes、Istio 项目成员\nRoundtable：回顾2018，Service Mesh 蓄势待发 主持人：宋净超，ServiceMesher 社区联合创始人\n","relpermalink":"/event/service-mesh-meetup-05/","summary":"这是第五届 Service Mesh Meetup。","title":"Service Mesh Meetup #5 广州站"},{"content":"笔者2017年就曾注意到 solo.io 这家公司，它的创始人 Idit 曾在 KubeCon 上分享过 Squash，去年11月推出了 SuperGloo 服务网格编排器再起吸引了我的注意，但最重要的一件事是，Christian Posta 于2018年1月3号宣布加盟 solo.io，这让我很惊讶，我原以为他会加入 T 公司。\n   Idit Levine  Idit Levine 现为 solo.io 的创始人，这是一个很小的 base 在马塞诸塞州剑桥市的创业公司，这家公司致力于云原生的混合云解决方案。曾是 EMC 云管理部门的 CTO，也是其全球 CTO 办公室的成员，她专注于整个堆栈，微服务，云原生应用和 PaaS 的管理和协调（M＆O）。当她加入 DynamicOps（vCAC，现在是 VMware 的一部分）作为其首批员工之一时，Idit 对云产生了浓厚的兴趣。 随后，她参与了 Verizon Terremark 的下一代公有云的开发，并担任 Intigua 的代理 CTO，Intigua 是一家专注于容器和管理技术的创业公司。\n   Christian Posta …","relpermalink":"/blog/supergloo-a-service-mesh-orchestrator/","summary":"作为服务网格的编排器，它为用户自由组合任何服务网格开启了方便之门，SuperGloo 也承载着 Solo 这家公司的愿景，混合云环境的云原生应用管理平台。","title":"SuperGloo—服务网格编排平台"},{"content":"本文以 Istio 官方的 bookinfo 示例来讲解在进入 Pod 的流量被 iptables 转交给 Envoy sidecar 后，Envoy 是如何做路由转发的，详述了 Inbound 和 Outbound 处理过程。关于流量拦截的详细分析请参考理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持。\n下面是 Istio 官方提供的 bookinfo 的请求流程图，假设 bookinfo 应用的所有服务中没有配置 DestinationRule。\n   下面是 Istio 自身组件与 Bookinfo 示例的连接关系图，我们可以看到所有的 HTTP 连接都在 9080 端口监听。\n   可以在 Google Drive 上下载原图。\nSidecar 注入及流量劫持步骤概述 下面是从 Sidecar 注入、Pod 启动到 Sidecar proxy 拦截流量及 Envoy 处理路由的步骤概览。\n1. Kubernetes 通过 Admission Controller 自动注入，或者用户使用 istioctl …","relpermalink":"/blog/envoy-sidecar-routing-of-istio-service-mesh-deep-dive/","summary":"本文以 Istio 官方的 bookinfo 示例来讲解在进入 Pod 的流量被 iptables 转交给 Envoy sidecar 后，Envoy 是如何做路由转发的，详述了 Inbound 和 Outbound 处理过程。","title":"理解 Istio Service Mesh 中 Envoy Sidecar 代理的路由转发"},{"content":"本文介绍了 Istio 和 Kubernetes 中的一些服务和流量的抽象模型。虽然 Istio 一开始确定的抽象模型与对接的底层平台无关，但目前来看基本绑定 Kubernetes，本文仅以 Kubernetes 说明。另外在 ServiceMesher 社区中最近有很多关于 Istio、Envoy、Kubernetes 之中的服务模型关系的讨论，本文作为一个开篇说明，Kubernetes 和 Istio 之间有哪些共有的服务模型，Istio 在 Kubernetes 的服务模型之上又增加了什么。\n**服务具有多个版本。**在 CI/CD 过程中，同一个服务可能同时部署在多个环境中，如开发、生产和测试环境等，这些服务版本不一定具有不同的 API，可能只是一些小的更改导致的迭代版本。在 A/B 测试和灰度发布中经常遇到这种情况。\nKubernetes 与 Istio 中共有的模型 因为 Istio 基本就是绑定在 Kubernetes 上，下面是我们熟知的 Kubernetes 及 Istio 中共有的服务模型。\n   上图是 Kubernetes 中 iptables 代理模式（另外还 …","relpermalink":"/blog/istio-service-and-traffic-model/","summary":"本文介绍了 Kubernetes、Envoy 和 Istio 中流量管理的一些服务模型以及为什么说 Kubernetes service 存在的意义仅剩下做服务发现。","title":"Istio中的服务和流量的抽象模型"},{"content":"SOFAMosn几个月前由蚂蚁金服开源，使用Go语言实现，遵循Envoy xDS协议，既可以单独作为网络代理使用，也可以作为Istio/SOFAMesh中的数据平面Sidecar 代理。开源地址：https://github.com/alipay/sofa-mosn\nHTTP协议优化  性能优化：HTTP/1.x性能提升30%，HTTP/2.0性能提升100% IO、流处理接入MOSN自研框架，统一架构，并支持metrics收集等基础能力 支持HTTP/1.x、HTTP/2.0协议自动识别 支持GRPC  流量路由 \u0026amp; 管理  完善故障注入机制，支持基于路由匹配、后端匹配的延迟、错误响应异常注入 支持HTTP请求direct response路由机制 支持对HTTP请求添加自定义Headers，支持删除指定Headers 支持重写HTTP请求中Host、URI 支持基于计数的失败重试机制 支持基于QPS、基于速率限流 完善TCP转发功能，支持灵活的转发特性配置  遥感  支持对接Mixer上报请求/响应的基本信息  扩展性  重构、优化协议处理引擎 支持可扩展的链式路由机制  其他   …","relpermalink":"/blog/sofa-mosn-0-4-0-changelog/","summary":"本文是蚂蚁金服开源的 SOFAMosn 的0.4.0版本的发布日志。","title":"蚂蚁金服开源的Service Mesh Sidecar代理SOFAMosn发布0.4.0版本"},{"content":"如果你是初次接触服务网格和Envoy，我这里有一篇文章可以帮助你入门。\n在微服务架构中，可观测性变得越加重要。我认为这是选择微服务这条路的必要条件之一。我的一位前同事列出了一份非常棒的需求清单，如果你想做微服务，那么你需要满足提到的这些要求。\n可观测性有许多事要做：\n 监控 报警 日志集中化 分布式追踪  本文只讨论Envoy下的分布式追踪，我尽量给出一个全貌来描述分布式追踪、OpenTracing、Envoy和Jaeger是如何整合在一起工作的。在下一篇文章中，我们将讨论使用Envoy、prometheus和grafana做监控。\n分布式追踪 随着大量的服务和请求的流转，你需要能够快速发现哪里出了问题。分布式追踪最早由谷歌的Dapper普及开来，它本质上具有在微服务的整个生命周期中追踪请求的能力。\n最简单的实现方法是在前端代理生成一个唯一的请求id（x-request-id），并将该请求id传递给与其交互的所有服务。基本上可以向所有的日志追加这一请求id。因此，如果你在kibana这样的系统中搜索唯一id，你会看到针对该特定请求的所有相关的日志。\n这非常有用，但是它不能告诉你每个服务 …","relpermalink":"/blog/distributed-tracing-with-envoy-service-mesh-jaeger/","summary":"本文用实例讲解了如何利用Envoy和Jaeger实现分布式追踪。","title":"使用Envoy和Jaeger实现分布式追踪"},{"content":"这是我在Envoy架构系列中的第3篇文章。这篇文章基于以前关于Envoy的线程模型和热重启功能的帖子。如果您还没有阅读这些帖子，请先阅读。 需要指出的是，随着预演的结束，我们现在可以进入更有趣的话题！\n统计概述 到目前为止，Envoy所做的最重要的事情是为分布式系统的可观测性提供了一个健壮的平台。这包括统计数据、日志记录和分布式跟踪。这篇文章将集中在统计数据和Envoy是如何实现允许高容量的同时保持卓越性能的。Envoy目前支持三种不同的统计数据:\n Counter（计数器）：只能增加不会减少的无符号整数。 例如，总请求。 Gauge（计量）：可以同时增加和减少的无符号整数。 例如，目前有效的请求。 Timer/hitogram（计时器/直方图）：无符号整数，最终将产生汇总百分位值。Envoy不区分计时器（通常以毫秒为单位）和原始直方图（可以是任何单位）。 例如，上游请求时间（以毫秒为单位）。  Envoy目前不支持任何浮点统计数据。\n   Envoy生成很多对调试分布式系统有用的数据！ ## 统计子系统目标 Envoy统计子系统的总体目标如下：\n  粗略的线性吞吐量：可以与任意数量的 …","relpermalink":"/blog/envoy-stats/","summary":"本文讲述了Envoy数据统计系统的设计及实现原理。","title":"Envoy中的数据统计"},{"content":"   大家好，今天给大家带来的演讲主题是“蚂蚁金服Service Mesh渐进式迁移方案”，给大家介绍一下我们蚂蚁金服主站的Service Mesh迁移方案，在稍后的内容中我会给大家解释什么是“渐进式”。今天的演讲方式有些特殊，将会是两位讲师合作。我是敖小剑，来自蚂蚁金服中间件团队，另外一位讲师 龙轼 ，来自 UC 基础研发部。\n   今天的内容将会有四块主要内容：\n Service Mesh演进路线：介绍蚂蚁金服计划在主站落地Service Mesh的方案，由于涉及到大量的存量应用和超大规模，又要保证迁移过程的平滑，因此我们的落地方案相比社区方案要复杂的多。 实现平滑迁移的关键：介绍在整个迁移方案中，为了实现平滑迁移的几个关键做法，然后今天我们将详细展开其他的一个关键点：DNS寻址方案。 DNS寻址方案的演进：详细介绍Kubernetes/Istio/SOFAMesh一路演进过来的DNS寻址方式 DNS寻址方案的后续规划：介绍我们在DNS寻址方案上的后续规划  前两块内容将由我来为大家介绍，后两块内容将由我的同事 龙轼 为大家介绍。\n   在展开内容之前，先看一下背景，Service …","relpermalink":"/blog/ant-financial-service-mesh-adoption-plan/","summary":"本文是上周末Service Mesh Meetup上海站的演讲内容，前面一半内容来自蚂蚁金服的敖小剑，后一半来自阿里UC的龙轼。","title":"蚂蚁金服Service Mesh渐进式迁移方案"},{"content":"本文为翻译文章，点击查看原文。\n在我的上一篇博客中，我谈到了微服务的设计模式。现在我想更深入地探讨微服务架构中最重要的模式：微服务之间的相互通信。我仍然记得我们过去开发单一应用时通讯是一项艰巨的任务。在那时我们必须小心的设计数据库表和对象模型映射之间的关系。而现在在微服务中，我们已经将它们分解为独立的服务，并创建网格来彼此通信。让我们来谈谈迄今为止为解决这个问题而发展起来的所有通信方式和模式。\n许多架构师已经将微服务之间的通信划分为同步和异步两种模式。让我们一个一个来介绍。\n同步模式 当我们说到同步时，意思是客户端向服务端发出请求并等待其响应。线程将被阻塞，直到它接收到返回。实现同步通信最主要的协议是HTTP。HTTP可以通过REST或SOAP实现。现在REST在微服务方面发展迅速并超越了SOAP。对我而言两者都很好用。\n现在让我们讨论同步模式中的不同的工作流、用例，我们面临的问题以及如何去解决。\n  先从一个简单的例子开始。你需要一个服务A来调用服务B并等待实时数据的响应。这是实现同步的一个很好的选择，因为不会涉及到下游服务。如果使用多个实例，除了负载均衡之外，你不需要为这个用例实现 …","relpermalink":"/blog/design-patterns-for-microservice-communication/","summary":"本文详细的介绍了同步和异步模式下微服务间的通信模式。","title":"微服务通信的设计模式"},{"content":"   Observability and Istio telemetry 吴晟 Apache SkyWalking创始人、Apache Sharding-Sphere原型作者、比特大陆资深技术专家、CNCF OpenTracing标准化委员会成员\n      蚂蚁金服 Service Mesh 渐进式迁移方案 敖小剑 蚂蚁金服高级技术专家，十六年软件开发经验，微服务专家，Service Mesh布道师，Servicemesher社区联合创始人\n      张瑜标 阿里巴巴技术专家、前京东Hadoop负责人、Hadoop代码贡献者、现负责UC 基于Kubernetes自研的PaaS平台整体的稳定性\n         探讨和实践基于Istio的微服务治理事件监控 徐运元 谐云科技云平台架构师，致力于容器 PaaS 平台、企业级容器云平台的方案设计和技术落地\n         Envoy、Contour与Kubernetes实践 冯玮 七牛容器云平台产品架构师，曾在百度和华为从事公有云领域高性能分布式计算和存储平台的架构设计和产品研发\n      视频回放与资料下载 地 …","relpermalink":"/blog/service-mesh-meetup-shanghai-20181125/","summary":"ServiceMesher社区和蚂蚁金服联合主办、SOFAStack社区协办的第四届Service Mesh Meetup上海站收官，Apache Skywalking 创始人吴晟、蚂蚁金服敖小剑、阿里巴巴 UC 张瑜标(龙轼)、谐云科技徐运元、七牛云的冯玮给大家带来分享。","title":"第四届Service Mesh Meetup上海站回顾"},{"content":"讲师与演讲话题 Observability and Istio telemetry 吴晟 Apache SkyWalking创始人、Apache Sharding-Sphere原型作者、比特大陆资深技术专家、CNCF OpenTracing标准化委员会成员\n蚂蚁集团 Service Mesh 渐进式迁移方案 敖小剑 蚂蚁集团高级技术专家，十六年软件开发经验，微服务专家，Service Mesh布道师，Servicemesher社区联合创始人\n张瑜标 阿里巴巴技术专家、前京东Hadoop负责人、Hadoop代码贡献者、现负责UC 基于Kubernetes自研的PaaS平台整体的稳定性\n探讨和实践基于Isito的微服务治理事件监控 徐运元 谐云科技云平台架构师，致力于容器 PaaS 平台、企业级容器云平台的方案设计和技术落地\nEnvoy、Contour与Kubernetes实践 冯玮 七牛容器云平台产品架构师，曾在百度和华为从事公有云领域高性能分布式计算和存储平台的架构设计和产品研发\n","relpermalink":"/event/service-mesh-meetup-04/","summary":"这是第四届 Service Mesh Meetup。","title":"Service Mesh Meetup #4 上海站"},{"content":"本文为翻译文章，点击查看原文。\nEnvoy是专为Cloud Native应用设计的轻量级服务代理，也是为数不多的支持gRPC的代理之一。gRPC是一个基于HTTP/2的高性能RPC（远程过程调用）框架，支持多种语言。\n   Envoy  在这篇文章中，我们将使用gRPC和Protocol Buffers构建C++语言版本的Greeter应用，使用Go语言构建另一个gRPC应用，实现Envoy的RateLimitService接口。最后，将Envoy部署为Greeter应用的代理，使用我们的速率限制服务实现反压机制（backpressure）。\ngRPC Greeter应用 我们首先安装gRPC和Protobuf，然后构建C++语言版本的Greeter应用。您还可以通过选择文档中列出的其他语言来构建此应用程序; 但是，我将在本文中使用C++。\n以下是Greeter应用的示意图。\n   Greeter  运行Greeter应用时，终端中会有以下输出：\n$ ./greeter_server Server listening on 0.0.0.0:50051 $ …","relpermalink":"/blog/envoy-grpc-and-rate-limiting/","summary":"本文使用C++构建了客户端/服务端应用，通过Envoy代理和gPRC协议进行通信，然后使用Go语言实现了Envoy速率限制服务。","title":"Envoy，gRPC和速率限制"},{"content":"   本文为翻译文章，点击查看原文。\nRancher 1.6和Rancher 2.0底层容器编排引擎的术语和概念略微有所不同。想要了解这些差异就需要先了解Cattle和Kubernetes之间的根本区别。对于使用过Cattle或者Kubernetes的新手来说，这篇文章比较适合您。同时你也可以从这里获取到容器编排引擎 Cattle 到 Kubernetes 的对应关系词汇表cheatsheet。\n无服务器 kubernetes\n 在Pokemon Go的早期，我们都惊讶于Niantic如何在全球范围内扩展其用户群，现在看来他们应该是以无缝地向其容器集群添加额外的节点以容纳更多的玩家和环境，所有这一切都可以通过使用Kubernetes作为容器编排工具来实现。Kubernetes在扩展和管理容器基础架构中，能够从开发者角度抽象出部分过程和低级依赖关系。这使它成为一个非常有效的平台，用于开发和维护跨多个容器的应用程序服务。本文将探讨如何利用K8S的设计参数和服务编排功能，并将它们与无服务器框架和函数即服务（FaaS）结合起来。特别是，我们将深入研究其特性和功能，分析在K8s架构上构建的三个无 …","relpermalink":"/blog/evaluation-of-serverless-frameworks-for-kbe/","summary":"本文讲解了如何利用K8S的设计参数和服务编排功能，并将它们与无服务器框架和函数即服务（FaaS）结合起来。","title":"Kubernetes 的无服务器框架的评估"},{"content":"Cilium是一个纯开源软件，没有哪家公司提供商业化支持，也不是由某一公司开源，该软件用于透明地保护使用Linux容器管理平台（如Docker和Kubernetes）部署的应用程序服务之间的网络连接。\nCilium的基础是一种名为BPF的新Linux内核技术，它可以在Linux本身动态插入强大的安全可见性和控制逻辑。由于BPF在Linux内核中运行，因此可以应用和更新Cilium安全策略，而无需对应用程序代码或容器配置进行任何更改。\n   Cilium  基于微服务的应用程序分为小型独立服务，这些服务使用HTTP、gRPC、Kafka等轻量级协议通过API相互通信。但是，现有的Linux网络安全机制（例如iptables）仅在网络和传输层（即IP地址和端口）上运行，并且缺乏对微服务层的可见性。\nCilium为Linux容器框架（如Docker和Kubernetes）带来了API感知网络安全过滤。使用名为BPF的新Linux内核技术，Cilium提供了一种基于容器/容器标识定义和实施网络层和应用层安全策略的简单而有效的方法。\n注：Cilium中文意思是“纤毛“，它十分细小而又无处不在。 …","relpermalink":"/blog/cilium-intro/","summary":"Cilium是一个纯开源软件，没有哪家公司提供商业化支持，也不是由某一公司开源，该软件用于透明地保护使用Linux容器管理平台（如Docker和Kubernetes）部署的应用程序服务之间的网络连接。","title":"Cilium——具备API感知的网络和安全性管理的开源软件"},{"content":"   Cilium Kubernetes  本文为翻译文章，点击查看原文。\n我们很高兴地宣布Cilium 1.3发布了。这个版本加入了几个新特性。主要的亮点是实现了Cassandra和带有策略执行能力的Memcached协议解析器，作为Envoy的Go语言扩展包。\n和往常一样，整个Cilium社区的开发者贡献巨大，他们在1.2到1.3版本的这段时间贡献了785个提交。\n什么是Envoy的Go语言扩展？ 从1.0版本开始，我们一直依赖Envoy处理所有的HTTP、gRPC以及HTTP的派生如Elasticsearch的请求。社区讨论如何扩大支持7层协议的范围，Envoy作为推动未来协议补充的首选平台是显而易见的。焦点迅速转移到寻找简化Envoy可扩展性的方法，并且允许重用现有的开源项目，如CNCF项目Vitess。于是实现Envoy的Go扩展的想法就诞生了。\n在Cilium 1.3中，我们引入了Envoy的Go扩展作为其Beta特性。\n   Envoy Golang Extension Architecture   **扩展的透明注入：**在Cilium的帮助下，连接被透明地重定向 …","relpermalink":"/blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/","summary":"本文讲解了具备API感知的网络和安全性管理的开源软件Cilium1.3的新特性，并用示例演示新的Go扩展如何使用。","title":"Cilium 1.3：支持Envoy、Cassandra和Memcached的Go语言扩展"},{"content":"本文为翻译文章，点击查看原文。\n在服务网格系列的第一部分中，我们认为服务网格是微服务体系架构发展的必然和有益的结果。随着 Istio 1.0 的发布，我们在服务网格领域已经经过了一个重要的里程碑，在这个重要的的时间节点上，我们需要思考服务网格的未来将如何发展。\n在 VMware 我们非常愿意花时间和精力支持开源的服务网格架构。我们已经成为 Istio 和 Envoy（Istio 用来动态控制微服务的特定的开源服务代理）的贡献成员。我们在改善网络方面投入了大量的精力，同时在其他领域贡献力量。\n我们考虑到几乎每个 Istio 的演示目前都是基于一个单一的示例。保加利亚的一位 VMware 同事目前正在构建一个全新的 Istio 演示示例，用于演示如何在封闭字幕等服务之间管理视频质量，并演示 Istio 在微服务环境中的动态路由的能力。\n因为我们认为服务网格是有价值的，而且可以一直存在，所以我们一只在寻求将 VMware 自己的世界级系统管理工具集与服务网格框架进行集成。这里有一个很好的例子，我们最近创建了一个适配器，将 Istio metrics 导出到 VMware …","relpermalink":"/blog/the-future-of-service-mesh/","summary":"本文通过分析服务网格的优势，阐述了其未来的发展情况。","title":"服务网格的未来Part 2：Istio 1.0之后何去何从？"},{"content":"本文为翻译文章，点击查看原文。\n在Istio和相关技术持续获得增势之时，中间件在Service Mesh中的地位正在逐渐减弱。尽管它们都可以用来监管不同应用和服务之间的通信，但是在运维和范式方面却大不相同。在今天以容器为中心的世界里，面向服务的架构体系盛行，中间件会变得无关紧要吗？\n中间件 中间件将应用和它底层的数据库连接起来，因此常被称作“软件胶水”。它将客户端的网络请求连接到后端数据，通过将所有消息聚合到一个管道中来实现通信。中间件在这个管道中整合一些关键功能，包括安全验证、日志记录、路由、性能监控和消息转换。中间件以传统的方式整合面向服务架构（SOA）应用的通信，后者由可复用的组件组成或者是一个单体应用。\n如下图所示，中间件的工作方式，是将不同应用的消息汇总到中心化的通信节点。然后将这些消息传递到一系列功能管道，直到“用户注册”服务。消息通过企业服务总线（ESB）进行传输。这种通信方式便于隐藏分布式系统的多样性、硬件和操作系统的差异性。\n   中间件  随着企业组织持续拥抱容器化，传统中间件的一些问题开始变得愈加明显。DevOps实践鼓励基于分布式系统的现代环境，以及快速、自动化 …","relpermalink":"/blog/does-the-service-mesh-spell-the-end-for-middleware/","summary":"本文分别介绍了中间件和服务网格，以及两者之间的权衡。使用诸如Istio之类的工具，将中间件的计算能力带入到Kubernetes和基于容器的系统。如果组织架构希望使用服务网格替代某些中间件，则必须重新评估其组织流程和方法论。","title":"服务网格是中间件的终结者吗？"},{"content":"Istio 中有个 issue #9066 要求将 Istio 中默认使用的 Service Graph 替换成 Kiali。Kiali 最初是由 Red Hat 开源的，用于解决 Service Mesh 中可观察性即微服务的可视性问题。目前已获得 Istio 社区的官方支持。\n关于 Kiali 单体应用使用微服务架构拆分成了许多微服务的组合。服务的数量显著增加，就对需要了解服务之间的通信模式，例如容错（通过超时、重试、断路等）以及分布式跟踪，以便能够看到服务调用的去向。服务网格可以在平台级别上提供这些服务，并使应用程序编写者从以上繁重的通信模式中解放出来。路由决策在网格级别完成。Kiali 与Istio 合作，可视化服务网格拓扑、断路器和请求率等功能。Kiali还包括 Jaeger Tracing，可以提供开箱即用的分布式跟踪功能。\nKiali 提供的功能 Kiali 提供以下功能：\n 服务拓扑图 分布式跟踪 指标度量收集和图标 配置校验 健康检查和显示 服务发现  下图展示了 kiali 中显示的 Bookinfo 示例的服务拓扑图。 …","relpermalink":"/blog/kiali-the-istio-service-mesh-observability-tool/","summary":"本文介绍了 Istio Service Mesh 中的可观察性工具 Kiali 的功能、架构和部分代码。","title":"Kiali——Istio Service Mesh 的可观察性工具"},{"content":" 本文是SOFAMesh中的多协议通用解决方案x-protocol介绍系列文章之一。\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（1）——DNS通用寻址方案\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（2）——快速解码转发\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（3）——TCP协议扩展\n 背景 在Istio和Envoy中，对通讯协议的支持，主要体现在HTTP/1.1和HTTP/2上，这两个是Istio/Envoy中的一等公民。而基于HTTP/1.1的REST和基于HTTP/2的gRPC，一个是目前社区最主流的通讯协议，一个是未来的主流，google的宠儿，CNCF御用的RPC方案，这两个组成了目前Istio和Envoy（乃至CNCF所有项目）的黄金组合。\n而我们SOFAMesh，在第一时间就遇到和Istio/Envoy不同的情况，我们需要支持REST和gRPC之外的众多协议：\n SOFARPC：这是蚂蚁金服大量使用的RPC协议(已开源) HSF RPC：这是阿里集团内部大量使用的RPC协议(未开源) Dubbo …","relpermalink":"/blog/x-protocol-tcp-protocol-extension/","summary":"在本系列文章中，我们将详解Service Mesh中的多协议解决方案x-protocol，本文介绍的是TCP协议扩展。","title":"SOFAMesh中的多协议通用解决方案x-protocol介绍系列（3）——TCP协议扩展"},{"content":" 本文是SOFAMesh中的多协议通用解决方案x-protocol介绍系列文章之一。\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（1）——DNS通用寻址方案\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（2）——快速解码转发\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（3）——TCP协议扩展\n 前言 在Istio和Envoy中，对通讯协议的支持，主要体现在HTTP/1.1和HTTP/2上，而我们SOFAMesh，则需要支持以下几个RPC协议：\n SOFARPC：这是蚂蚁金服大量使用的RPC协议（已开源） HSF RPC：这是阿里集团内部大量使用的RPC协议（未开源） Dubbo RPC: 这是社区广泛使用的RPC协议（已开源）  更适合的平衡点：性能和功能 对于服务间通讯解决方案，性能永远是一个值得关注的点。而SOFAMesh在项目启动时就明确要求在性能上要有更高的追求，为此，我们不得不在Istio标准实现之外寻求可以获取更高性能的方式，比如支持各种RPC协议。\n期间有两个发现：\n Istio在处理所有的请求转发 …","relpermalink":"/blog/x-protocol-rapid-decode-forward/","summary":"在本系列文章中，我们将详解Service Mesh中的多协议解决方案x-protocol，本文介绍的是快速解码转发方案。","title":"SOFAMesh中的多协议通用解决方案x-protocol介绍系列（2）——快速解码转发"},{"content":"首先声明，我在RedHat工作，确切得说，是在3scale团队开发3scale API管理解决方案。最近，在跟我们的客户讨论时有个问题被越来越多的提及：使用了Istio之后，为什么还需要API管理？\n为了回答这个问题，我们首先要搞明白服务网格和API管理究竟是什么，剧透一下：3scale API Management和Istio可以共存。\n让我们聚焦于3scale API Management和Istio Service Mesh（这两者是我比较了解的），我会尽量描述清楚这两个方案的目标是解决哪些问题。\nAPI Management解决方案是什么？ 我们先看一下Wikipedia的定义：API管理的过程包括创建和发布Web API、执行调用策略、访问控制、订阅管理、收集和分析调用统计以及报告性能。\n这是一个清晰的定义。作为一家已经创建了一系列内部Service的公司，我现在希望通过向外部订阅者提供API的方式构建业务。当然，我会通过提供一些订阅计划来量化它，包括使用限制、范围，并且可以自动的给客户提供账单。\n此外，外部开发者可以很容易地发现我提供的API，并使用他们的信用卡以自服务的方 …","relpermalink":"/blog/api-management-and-service-mesh/","summary":"本文分别介绍了API Management和Service Mesh，并简单分析了它们的共同点。","title":"API管理和服务网格——为什么说服务网格无法替代API管理"},{"content":" 本文是SOFAMesh中的多协议通用解决方案x-protocol介绍系列文章之一。\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（1）——DNS通用寻址方案\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（2）——快速解码转发\nSOFAMesh中的多协议通用解决方案x-protocol介绍系列（3）——TCP协议扩展\n 前言 在2018年上半年，蚂蚁金服决定基于 Istio 订制自己的 ServiceMesh 解决方案，在6月底对外公布了 SOFAMesh，详情请见之前的文章: 大规模微服务架构下的Service Mesh探索之路 。\n在 SOFAMesh 的开发过程中，针对遇到的实际问题，我们给出了一套名为 x-protocol 的解决方案，定位是云原生、高性能、低侵入性的通用 Service Mesh 落地方案，依托 Kubernetes 基座，利用其原生的服务注册和服务发现机制，支持各种私有 RPC 协议低成本、易扩展的接入，快速享受 Service Mesh 所带来的红利。\n具体解决的问题包括：\n 多通讯协议支持问题，减少开发工作量， …","relpermalink":"/blog/x-protocol-common-address-solution/","summary":"在本系列文章中，我们将详解Service Mesh中的多协议解决方案x-protocol，首先介绍的是DNS通用寻址方案。","title":"SOFAMesh中的多协议通用解决方案x-protocol介绍系列（1）——DNS通用寻址方案"},{"content":"本文为翻译文章，点击查看原文。\nEnvoy 通过查询文件或管理服务器来动态发现资源。概括地讲，对应的发现服务及其相应的 API 被称作 xDS 。Envoy 通过订阅（ subscription ）方式来获取资源，如监控指定路径下的文件、启动 gRPC 流或轮询 REST-JSON URL。后两种方式会发送 DiscoveryRequest 请求消息，发现的对应资源则包含在响应消息 DiscoveryResponse 中。下面，我们将具体讨论每种订阅类型。\n文件订阅 发现动态资源的最简单方式就是将其保存于文件，并将路径配置在 ConfigSource 中的 path 参数中。Envoy 使用 inotify（Mac OS X 上为 kqueue）来监控文件的变化，在文件被更新时，Envoy 读取保存的 DiscoveryResponse 数据进行解析，数据格式可以为二进制 protobuf、JSON、YAML 和协议文本等。\n 译者注：core.ConfigSource 配置格式如下：\n { \u0026#34;path\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;api_config_source\u0026#34;: \u0026#34;{...}\u0026#34;, …","relpermalink":"/blog/envoy-xds-protocol/","summary":"本文翻译自 Envoy 代码库中的文档，本文通过示例详解了 Envoy 的 xDS REST 和 gPRC 协议。","title":"Envoy 中的 xDS REST 和 gRPC 协议详解"},{"content":"   本文为翻译文章，点击查看原文。\nRed Hat的OpenShift服务网格技术预览版上线，基于Istio。\n软件开发实践的进步与软件交付中的技术改进相结合导致了组织中的应用程序实例数量激增。无论它们是基于“macro”的还是单体的，“迷你”服务还是微服务，随着服务数量的增加交互的数量和复杂性都会显著增加。\n到目前为止，管理这些复杂服务交互的大部分负担都放在了应用程序开发人员身上。像Netflix Common Runtime Services \u0026amp; Libraries这样的库集的发展为应用程序弹性、流量控制等带来了许多特性和优势。但是这些库与运行时相关，比如Netflix的库是基于Java的，开发人员必须将它们集成到应用程序中。\n网格\n服务网格概念将这些责任推给了基础架构，从而消除了开发人员的负担。当底层基础架构负责流量管理、可观察性、策略实施和服务身份/安全性时，开发人员就可以专注于业务价值本身。开发人员不用再花费时间将库集成到应用程序中。然后，基础设施运营团队负责维护网格基础设施，作为日常维护和管理实践的一部分。\n几年来，Red Hat一直通过Red Hat OpenShift …","relpermalink":"/blog/istio-on-openshift-technology-preview/","summary":"技术预览计划将为现有的OpenShift Container Platform客户提供在其OpenShift集群上部署和使用Istio平台的能力。红帽正在提供此计划，旨在收集反馈和经验，同时Red Hat期望在2019自然年提供OpenShift上Istio的全面支持和全面可用性。","title":"Red Hat OpenShift发布Istio预览版"},{"content":"   第一届Kong Summit  本文为翻译文章，点击查看原文。\n图片：Kong公司员工们在庆祝第一届Kong Summit举办（来自Kong官方Twitter）\nKong公司的前身是Mashape，发布了其核心开源API网关的1.0版本，名字也为Kong 。这是包括诺基亚、纽约​时报和哈佛大学等客户近四年生产经验的结晶。\nKong 1.0是该公司构建服务控制平台愿景的基础，该平台结合了人工智能、机器学习和其他先进技术，可以促进信息流在服务之间的流动。\n   “我们相信未来所有数据都将处于运动状态，并且将从数据池转移到系统间代理信息的地方。Kong最初是一个网关，在1.0发布之后将转型为服务控制平台，“[Geoff Townsend](https://www.linkedin.com/in / geoff-townsend-25058347 /)，Kong工程副总裁。据该公司称，截至目前，该软件已被下载4500万次。\n本周在Kong Summit 2018上，在该公司的总部旧金山探讨了1.0里程碑以及企业级组件包括开发人员门户、Open API规范、自动生成和自动配置，这些功能将于 …","relpermalink":"/blog/kong-at-1-0-a-service-control-platform/","summary":"Kong 1.0是该公司构建服务控制平台愿景的基础，该平台结合了人工智能、机器学习和其他先进技术，可以促进信息流在服务之间的流动。","title":"Kong 1.0发布，从网关转型为服务控制平台"},{"content":"   Linkerd  本文为翻译文章，点击查看原文。\n今天，云原生计算基金会（CNCF）和Linkerd的维护者很高兴地宣布Linkerd 2.0 GA发布。\n2.0版本为Linkerd带来了性能、资源消耗和易用性方面的显着改进。它还将项目从集群范围的service mesh转换为可组合的 service sidecar ，旨在为开发人员和服务所有者提供在云原生环境中成功所需的关键工具。\n2016年，Linkerd 由Buoyant创始人William Morgan和Oliver Gould发布，于2017年初捐献给CNCF。从那时起，该项目经历了快速增长，现在为全球各种应用程序生态系统提供支持，从卫星成像到支付处理再到人类基因组计划。\nLinkerd 2.0的service sidecar设计使开发人员和服务所有者能够在他们的服务上运行Linkerd，提供自动可观察性、可靠性和运行时诊断，而无需更改配置或代码。通过提供轻量级的增量路径来获得平台范围的遥测、安全性和可靠性的传统service mesh功能，service sidecar方法还降低了平台所有者和系统架构师的风险。\n值得 …","relpermalink":"/blog/linkerd-2-0-in-general-availability/","summary":"Linkerd 2.0版本为Linkerd带来了性能、资源消耗和易用性方面的显着改进。它还将项目从集群范围的service mesh转换为可组合的service sidecar，旨在为开发人员和服务所有者提供在云原生环境中成功所需的关键工具。","title":"Linkerd 2.0 GA版本发布"},{"content":"本文为翻译文章，点击查看原文。\n本文将带您了解为什么服务网格和边缘代理如此重要以及它们与持续交付的关系。\n了解现代云架构如何使用微服务具有的许多优势，使开发人员能够以CI/CD方式交付业务软件。\n去年，Matt Klein写了一篇精彩的博客“服务网格中的数据平面与控制平面”。尽管我已经很熟悉“控制面板”这个术语，Matt再次加深了我对这个概念的理解以及与软件持续交付有关的重要性，特别是在入口/边缘网关和服务网格周围的部署控制（和细微差别）方面。\n我之前写过关于边缘代理和API网关在软件交付中可以发挥的作用，持续交付：API网关有什么作用？像Envoy这样的现代代理在“云原生”应用程序操作中所产生的影响，我们进行了几次讨论。我得出的结论是，尽管微服务为具有动态编排的容器和云技术的使用提供了新的机会，但是剩下的核心挑战就是控制平面必须进行调整才能跟上变化。\n控制平面和角色 在Matt的文章中，他指出服务网格控制平面“为网格中所有正在运行的数据平面提供策略和配置”，并且“控制平面将所有数据平面转变为分布式系统。”最终，控制平面的目标是设置将由数据平面制定的策略。控制平面可以通过配置文 …","relpermalink":"/blog/the-importance-of-control-planes-with-service-mesh/","summary":"本文将带您了解为什么服务网格和边缘代理如此重要以及它们与持续交付的关系。","title":"服务网格的控制平面和边缘代理的重要性"},{"content":" 本文作者：彭泽文，阿里巴巴UC事业部高级开发工程师。\n    sofamesh x-protocol dubbo  X-protocol 的定位是云原生、高性能、低侵入性的通用 Service Mesh 落地方案，依托 Kubernetes 基座，利用其原生的服务注册和服务发现机制，支持各种私有 RPC 协议低成本、易扩展的接入，快速享受 Service Mesh 所带来的红利。\n本文将以 Dubbo 为例，演示 Dubbo on x-protocol 场景下 Service Mesh 路由功能，涵盖 Version route 、Weighted route 功能。\n关于 x-protocol 的介绍请参考 蚂蚁金服开源的 SOFAMesh 的通用协议扩展解析。\n前期准备  安装 Minikube，推荐使用 Minikube v0.28 以上来体验，请参考 https://github.com/kubernetes/minikube 安装 kubectl 命令行工具， …","relpermalink":"/blog/dubbo-on-x-protocol-in-sofa-mesh/","summary":"本文将以 Dubbo 为例，演示 SOFAMesh 中 Dubbo on x-protocol 场景下 Service Mesh 路由功能，涵盖 Version route 、Weighted route 功能。","title":"Dubbo on x-protocol——SOFAMesh中的x-protocol示例演示"},{"content":" 以往有很多文章讲解 Istio 是如何做 Sidecar 注入的，但是没有讲解注入之后 Sidecar 工作的细节。本文将带大家详细了解 Istio 是如何将 Envoy 作为 Sidecar 的方式注入到应用程序 Pod 中，及 Sidecar 是如何做劫持流量的。\n 在讲解 Istio 如何将 Envoy 代理注入到应用程序 Pod 中之前，我们需要先了解以下几个概念：\n Sidecar 模式：容器应用模式之一，Service Mesh 架构的一种实现方式。 Init 容器：Pod 中的一种专用的容器，在应用程序容器启动之前运行，用来包含一些应用镜像中不存在的实用工具或安装脚本。 iptables：流量劫持是通过 iptables 转发实现的。  查看目前 productpage-v1-745ffc55b7-2l2lw Pod 中运行的容器：\n$ kubectl -n default get pod productpage-v1-745ffc55b7-2l2lw -o=jsonpath=\u0026#39;{..spec.containers[*].name}\u0026#39; productpage …","relpermalink":"/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/","summary":"以往有很多文章讲解 Istio 是如何做 Sidecar 注入的，但是没有讲解注入之后 Sidecar 工作的细节。本文将带大家详细了解 Istio 是如何将 Envoy 作为 Sidecar 的方式注入到应用程序 Pod 中，及 Sidecar 是如何做劫持流量的。","title":"理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持"},{"content":"   Aspen Mesh这家公司隶属于F5，Aspen Mesh基于Istio 1.0开发，这个周末刚发布了1.0版本，可以申请免费试用。\nAspen Mesh对比Istio 1.0有如下优势：\n 作为托管的SaaS平台 丰富的UI dashboard 更多实验特性 可获得Aspen Mesh工程师团队的支持  Aspen Mesh对比Istio 1.0有如下改进，主要集中在性能和可靠性上：\n 现在可以递增地推出双向TLS，而无需更新服务的所有客户端 在Kubernetes中创建Istio配置时就已经过验证。这是由Galley强制执行的Kubernetes准入控制器webhook 针对服务和工作负载的更精确和全面的遥测 Mixer现在支持进程外适配器，可以更轻松地与更多的后端集成  想要试用的话可以去Aspen Mesh官网上申请。\n","relpermalink":"/blog/aspen-mesh-released/","summary":"Aspen Mesh这家公司隶属于F5，Aspen Mesh基于Istio 1.0开发，上个周末刚发布了1.0版本，可以申请免费试用。","title":"F5公司Aspen Mesh 1.0发布，基于Istio 1.0"},{"content":"   Kubernetes and Istio  本文为翻译文章，点击查看原文。\n作为一名全栈开发，假如最近花了不少时间开发应用，肯定已经理解了微服务架构下要面临的一系列全新挑战。尽管应用已经从庞大的单体应用转变成了开发更快、弹性更好、更小也更聚焦的微服务，但现实是，开发者需要开始操心将这些服务集成到分布式系统中的问题了，包括服务发现、负载均衡、注册、容错、监控、路由、兼容和安全等。\n让我们更详细的拆解微服务架构下开发和运维面临的挑战吧。先来看看第一代简单的 Service Mesh 场景，如下图所示，服务 A 要和 服务 B 通信，没有采用直接通信的方式，请求是通过 NGINX 路由的。NGINX 从 Consul（服务发现工具）查找路由，并在收到 HTTP 502 响应时，自动重试。\n   图 1.0 - 一代 Service Mesh     图 1.1 - 服务增多时，级联失败演示  但随着微服务架构的到来，服务数量的增长一发不可收拾，下面列出的是开发和运维团队遇到的问题：\n 如何让日益增长的微服务们互联？ 如何为微服务提供负载均衡？ 为微服务提供基于角色的路由； 如何控制微服 …","relpermalink":"/blog/test-drive-your-first-istio-deployment-using-play-with-kubernetes-platform-cloud-computing/","summary":"在Docker提供的免费的Kubernetes试玩平台上，使用好奇心驱动的方式部署一个Istio Service Mesh。本方式适合没有测试资源又不想自己整环境的，只是想上去爽一把的人士。","title":"在Play with Kubernetes平台上以测试驱动的方式部署Istio"},{"content":"   Envoy Lyft  本文为翻译文章，点击查看原文。\n关键要点  在过去的四年中，Lyft 已从单体架构转变为数百个微服务。随着微服务数量的增加，由于级联故障或意外内部拒绝服务导致的中断次数也在增加。 今天，这些故障情况在 Lyft 基础设施中已经基本解决。Lyft 部署的每项服务都通过使用 Envoy 代理自动获得吞吐量和并发保护。 Envoy 可以作为中间件部署或仅在请求入口处部署，但最大的好处来自于在应用程序本地的入口和出口部署它。在请求的两端部署 Envoy 允许它充当服务器的智能客户端和反向代理。 在接下来的几个月里，Lyft 将与 Netflix 的并发限制库背后的团队合作，将基于其库的系统带入 Envoy L7 过滤器。  级联故障是高吞吐量分布式系统中不可用的主要原因之一。在过去的四年中，Lyft 已从单体架构转变为数百种微服务。随着微服务数量的增加，由于级联故障或意外内部拒绝服务导致的中断次数也在增加。今天，这些故障情况在 Lyft 基础设施中基本上已经解决。Lyft 部署的每项服务都会自动获得吞吐量和并发保护。通过对我们最关键的服务进行一些有针对性的配置更 …","relpermalink":"/blog/envoy-service-mesh-cascading-failure/","summary":"本文分享了Lyft对于Envoy的在服务网格领域的实践，主要为了解决级联故障的问题，以及Lyft对于Envoy的未来规划。","title":"Envoy服务网格在Lyft的实践及未来路线图"},{"content":" 本文作者：邵俊雄（熊啸），蚂蚁金服中间件团队高级技术专家，目前主要负责 SOFAMesh 的开发工作。\n本文是基于作者在 Service Mesh Meetup #3 深圳的主题分享《SOFAMesh的通用协议扩展》部分内容所整理，完整内容见文末的直播回放\n    邵俊雄 蚂蚁金服 Service Mesh SOFA MOSN  本次分享主要介绍蚂蚁金服在 SOFAMesh 上开发对 SOFARPC 与 HSF 这两个RPC框架的支持过程中总结出来的通用协议扩展方案\n   1. SOFAMesh 介绍    SOFAMesh 是蚂蚁从 ISTIO 上游克隆的开源项目，目的是在 ISTIO 的基础上进行控制平面的发展和创新，同时保持和上游 ISTIO 的同步更新，跟随 ISTIO 的发布节奏，当然也会把一些有价值能力贡献给 ISTIO 社区。\nSOFAMesh 的一个重要目标是用蚂蚁自研的 Golang 版 L4/L7 层代理服务器 SOFAMosn 作为数据平面，取代 C++ 开发的 ENVOY。之前的 Meetup 中我们已经探讨过了一个 Golang 版本的数据平面的重要性，我们 …","relpermalink":"/blog/ant-financial-sofamesh-common-protocol-extension/","summary":"本文作者是蚂蚁金服中间件团队的高级技术专家邵俊雄（熊啸），主要负责 SOFAMesh 的开发工作。本文是基于作者在 Service Mesh Meetup #3 深圳的主题分享《SOFAMesh的通用协议扩展》部分内容所整理，完整内容见文末的直播回放。","title":"蚂蚁金服开源的 SOFAMesh 的通用协议扩展解析"},{"content":"   Cilium  本文为翻译文章，点击查看原文。\n我们很高兴地宣布推出Cilium 1.2。该版本引入了几个新功能实现了Cilium用户和社区成员最迫切想要的功能。其中最吸引人的功能之一是引入基于DNS 名称的安全策略，目的是保护对集群外服务的访问。另一个最受关注的问题是加入了连接和保护多个Kubernetes集群的能力。我们将ClusterMesh功能进入Alpha版本。它可以连接和保护在多个Kubernetes集群中运行的pod。Kube-router与Cilium的集成同等重要。DigitalOcean团队的努力使kube-router提供BGP网络与Cilium提供的基于BPF的安全性和负载均衡相结合。整个Cilium开发者社区贡献者总数已增加到85个，在1.1到1.2版本内贡献了579个PR。\nCilium是什么？ Cilium是一个开源软件，用于在Kubernetes、Docker和Mesos等Linux容器管理平台部署的应用程序服务之间提供透明连接、保护网络和API。\n   Cilium是基于一种叫BPF的新内核技术，它使得能够在Linux自身内部动态插入强大的安全 …","relpermalink":"/blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/","summary":"Cilum使用Kube-router在Kubernetes Pod与集群外部运行的服务之间建立连接，再引入基于DNS 名称的安全策略保护对集群外服务的访问，再增加Cluster Mesh增加对多Kubernetes集群的支持。","title":"Cilium 1.2发布—DNS安全性策略、EKS支持、ClusterMesh、kube-router集成等"},{"content":"   Service Mesh Meetup 深圳站  ServiceMesher社区和蚂蚁金服联合主办、SOFAStack社区协办的第三届Service Mesh Meetup深圳站收官，感谢各位现场参加和通过IT大咖说观看直播的同学参与ServiceMesher社区，华为张超盟、蚂蚁金服熊啸、JEX杨文、联邦车网朱经惠的分享，深圳名堂共创空间提供场地支持，vivo的两位美女志愿者，电子工业出版社提供图书。更多活动信息和Service Mesh资讯请关注我们的微信公众号ServiceMesher。\n相关资料 本次活动的视频回放，请访问IT大咖说。\nPPT下载地址：https://github.com/servicemesher/meetup-slides\n现场照片 场地提供方，名堂共享空间。\n   来自Vivo的两位美女志愿者\n   到现场参加的有100多人。\n   通过IT大咖说在线观看的有几千人。\n张超盟（华为）——Kubernetes容器应用基于Istio的灰度发布实践    Service Mesh 张超盟 华为  现场提问的观众。\n   朱经惠 （联邦车网）——Istio控 …","relpermalink":"/blog/service-mesh-meetup-shenzhen-20180825/","summary":"ServiceMesher社区和蚂蚁金服联合主办、SOFAStack社区协办的第三届Service Mesh Meetup深圳站收官，华为张超盟、蚂蚁金服熊啸、JEX杨文、联邦车网朱经惠给大家带来分享。","title":"第三届Service Mesh Meetup深圳站回顾"},{"content":"讲师与演讲话题 张超盟（华为）——Kubernetes容器应用基于Istio的灰度发布实践\nTopic摘要：随着1.0版本在上月底的发布，标志着Istio作为最火热的ServcieMesh框架已经逐渐成熟。本次议题中将以典型的灰度发布为例，分享华为云容器服务在Istio的实践，以及Istio和Kubernetes的完美结合释放云原生应用的核心优势，加速企业微服务技术转型。\n讲师简介：华为云微服务平台架构师，现负责华为云容器服务Istio产品化工作。参与华为PaaS平台产品设计研发，在Kubernetes容器服务、微服务架构、云服务目录、大数据、APM、DevOpS工具等多个领域有深入研究与实践。曾供职于趋势科技。\n朱经惠 （联邦车网）——Istio控制平面组件原理解析\nTopic摘要：网上有很多关于Istio的介绍，但主要的关注是数据平面。所以这次独辟蹊径，给大家解密Istio里强大的控制平面：管理生命周期的Pilot-Agent，配置中心Pilot-Discovery， 生成遥测报告的Mixer以及安全证书管理的Istio_Ca。通过本次分享您将了解其工作原理和现存的问题。\n讲师简 …","relpermalink":"/event/service-mesh-meetup-03/","summary":"这是第三届 Service Mesh Meetup。","title":"Service Mesh Meetup #3 深圳站"},{"content":"我最近在讨论集成服务的演进以及服务网格的使用，特别是关于 Istio 。自从2017年1月我听说了 Istio 以来，我一直很兴奋，事实上我是为这种新技术感到兴奋，它可以帮助组织构建微服务以及原生云架构成为可能。也许你可以说，因为我已经写了很多关于它的文章（请关注 @christianposta 的动态)：\n The Hardest Part of Microservices: Calling Your Services Microservices Patterns With Envoy Sidecar Proxy: The series Application Network Functions With ESBs, API Management, and Now.. Service Mesh? Comparing Envoy and Istio Circuit Breaking With Netflix OSS Hystrix Traffic Shadowing With Istio: Reducing the Risk of Code Release Advanced …","relpermalink":"/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/","summary":"Istio和服务网格的总体目标是解决应用程序网络类问题。将这些问题的解决方案迁移到服务网格中是可操作性的优化。但这并不意味着它不再是应用程序的责任，而是意味着这些功能的实现存在于进程之外了，并且必须是可配置的。","title":"应用程序安全性和正确性的责任不能推卸给Istio和任何服务网格"},{"content":" 追本溯源，Service Mesh实际上是一种SDN，等同于OSI模型中的会话层。 每一次技术变革，必然要导致生产力和生产关系的变革，我们看到这种趋势正在加速。本书中给出了企业上Service Mesh的路径，可供广大技术和管理人员参考。\n 这是一本由Nginx赞助，O’Reilly出版社出品的关于服务网格的书籍，本书标题是 The Enterprise Path to Service Mesh ，还有个副标题 Decoupling at Layer 5 ，第一版发行于2018年8月8日。这本书一共61页，本文是我对该书的一些解读，读者可以在Nginx的网站上免费下载阅读完整内容。\n关于作者 本书作者是Lee Calcote，先后在Cisco、Seagate、Solarwind任职负责技术战略决策，参与DMTF（Distributed Management Task Foundation）、CIS（Center for Internet Security），还是CNCF Ambassador、Docker Captain。\n   The Enterprise Path to …","relpermalink":"/blog/the-enterprise-path-to-service-mesh-architectures/","summary":"本文是对Lee Calcote的The Enterprise path to Service Mesh Architectures一书的解读。追本溯源，Service Mesh实际上是一种SDN，等同于OSI模型中的会话层。","title":"企业级服务网格架构之路解读之 Service Mesh 在会话层解耦"},{"content":"如果您要拆分单体架构，使用Istio管理您的微服务的一个巨大优势是，它利用与传统负载均衡器和应用分发控制器类似的入口模型的配置。\n在负载均衡器领域，虚拟IP和虚拟服务器一直被认为是使运营商能够以灵活和可扩展的方式配置入口流量的概念（Lori Macvittie对此有一些相关的想法)。\n在Istio中，Gateway控制网格边缘的服务暴露。Gateway允许用户指定L4-L6设置，如端口和TLS设置。对于Ingress流量的L7设置，Istio允许您将网关绑定到VirtualServices。\n这种分离使得管理流入到网格的流量变得容易，就像在传统负载均衡器中将虚拟IP绑定到虚拟服务器一样。这使得传统技术栈用户能够以无缝方式迁移到微服务。对于习惯于整体和边缘负载均衡器的团队来说，这是一种自然的进步，而不需要考虑全新的网络配置方式。\n需要注意的一点是，在服务网格中路由流量和将外部流量引入网格不同。在网格中，您在正常流量中分辨异常的部分，因为只要在服务网格内，默认情况下Istio可以与（与Kubernetes兼容）所有应用通信。如果您不希望与某些服务进行通信，则必须添加策略。反向代理（类似于传 …","relpermalink":"/blog/why-you-should-care-about-istio-gateways/","summary":"在Istio中，Gateway控制网格边缘的服务暴露。Gateway允许用户指定L4-L6设置，如端口和TLS设置。对于Ingress流量的L7设置，Istio允许您将网关绑定到VirtualServices。","title":"为什么你应该关心Istio gateway"},{"content":"   本文为翻译文章，点击查看原文。\n金融服务公司通常都拥有沉重的历史包袱，当然对于想要进入这个行业的新秀来说也算是商业壁垒，因为他们很难突破低利润和严苛的监管规则。曾占主导地位的大型金融企业的市场份额正面临着比起小巧、灵活的小金融科技公司的蚕食。这些小科技公司技术嗅觉灵敏、专业、注重客户用户体验。为了保持良好的竞争优势，金融服务公司都计划将自己原有的繁杂的技术架构向更具适应性的方向转变。最近对金融机构的一项调查发现大约85％的人认为他们的核心技术过于僵化和缓慢。因此，预计在未来五年内约有80％的金融机构打算替换其核心银行系统架构。\n金融新法则旨在解决新的数字支付问题。例如在欧洲的PSD2（支付服务指令法则），要求银行采用新的运营方式和交付方式。像PSD2这样的变化旨在将银行业带入开放的API共享经济，通过开放标准推动互操作性和集成。要成为数据开放、无缝集成、API共享的世界一流金融科技需要借助微服务的力量。\n微服务为金融服务提供了三个关键优势 增加安全性\n现代金融科技发展过程中给此前已建立的安全基础设施带来挑战。如数字钱包、智能机器人咨询服务和区块链等要求建立新的安全机制。恰恰微服务 …","relpermalink":"/blog/enabling-the-financial-services-shift-to-microservices/","summary":"随着初创金融科技公司的竞争，以及客户期望的不断增长，成熟的金融服务公司必须改变他们提供产品和与客户开展业务的方式。在交付层面老系统很难满足这些要求，金融服务公司需要一套灵活、适应性强、可扩展性高、可靠且强大的软件架构。微服务使其成为可能，而服务网络正好满足了微服务大规模管理的需求。 ","title":"服务网格加速金融科技向微服务转型"},{"content":"8月1日0点，Istio 1.0发布，已生产就绪！大家都已经跃跃欲试了，几天前我发布了一键在本地搭建运行Istio 1.0的分布式Kubernetes集群教程，在本地搭建起来还是有些门槛，稍显复杂，现在我推荐几个可以在线上学习的地方。这是目前搜集的比较完整的Istio学习环境和包含代码的示例教程有如下几个：\n目前搜集的比较完整的Istio学习环境和包含代码的示例教程有如下几个：\n Katacoda的学习环境 Istio官方的bookinfo教程 IBM的Istio示例教程 我Fork的RedHat的Demo，Christian Posta在OSCON上的Istio workshop  Katacode上的Istio学习环境 推荐指数：⭑⭑⭑⭑⭑\n推荐原因：使用简单，使用官方示例，免费，快速，无需注册，可直接通过互联网访问示例应用页面，支持最新版的Istio。\nKatacoda已支持Istio 1.0的学习环境。\n地址：https://www.katacoda.com/courses/istio/deploy-istio-on-kubernetes\n      只要傻瓜式操作就可以部署一 …","relpermalink":"/blog/istio-tutorials-collection/","summary":"给大家推荐下，目前本人搜集到的可以说是最完整的Istio学习环境和包含代码的示例教程。","title":"Istio service mesh示例教程汇总"},{"content":" 本文转载自：Istio 官方网站，点击阅读原文。\n 今天，我们很高兴地宣布 Istio 1.0。这距离最初的 0.1 版本发布以来已经过了一年多时间了。从 0.1 起，Istio 就在蓬勃发展的社区、贡献者和用户的帮助下迅速发展。现在已经有许多公司成功将 Istio 应用于生产，并通过 Istio 提供的洞察力和控制力获得了真正的价值。我们帮助大型企业和快速发展的创业公司，如 eBay、Auto Trader UK、Descartes Labs、HP FitStation、Namely、PubNub 和 Trulia 使用 Istio 从头开始连接、管理和保护他们的服务。将此版本作为 1.0 发布是对我们构建了一组核心功能的认可，用户们可以依赖这些功能进行生产。\n生态系统 去年，我们看到了 Istio 生态系统的大幅增长。Envoy 继续其令人印象深刻的增长，并增加了许多对生产级别服务网格至关重要的功能。像 Datadog、 SolarWinds、 Sysdig、Google Stackdriver 和 Amazon CloudWatch …","relpermalink":"/blog/announcing-istio-1-0/","summary":"今天，我们很高兴地宣布 Istio 1.0。这距离最初的 0.1 版本发布以来已经过了一年多时间了。从 0.1 起，Istio 就在蓬勃发展的社区、贡献者和用户的帮助下迅速发展。现在已经有许多公司成功将 Istio 应用于生产，并通过 Istio 提供的洞察力和控制力获得了真正的价值。","title":"Istio 1.0发布，已生产就绪！"},{"content":"2018年7月29日，周日，天气闷热，北京中关村e世界。\n由ServiceMesher社区和蚂蚁金服联合举办的，Sharding-Sphere社区、Apache SkyWalking社区、SOFA社区、新浪微博协办的第二届Service Mesh Meetup北京站圆满落幕。\n   Service Mesh Meetup  张亮（京东金融数据研发负责人）Service Mesh的延伸 —— 论道Database Mesh\n   张亮 京东金融 Service Mesh Meetup     张亮 京东金融 Service Mesh Meetup  吴晟（Apache SkyWalking创始人），Observability on Service Mesh —— Apache SkyWalking 6.0\n   吴晟 Apache SkyWalking        朵晓东（蚂蚁金服，高级技术专家），蚂蚁金服开源的Service Mesh数据平面SOFA MOSN深层揭秘\n   朵晓东 蚂蚁金服 Service Mesh     朵晓东 Service Mesh 蚂蚁金服  丁振凯（新浪 …","relpermalink":"/blog/beijing-meetup-20180729/","summary":"2018年7月29日，北京，中关村e世界，由ServiceMesher社区和蚂蚁金服联合举办的，Sharding-Sphere社区、Apache SkyWalking社区、SOFA社区、新浪微博协办的第二届Service Mesh Meetup北京站圆满落幕。","title":"第二届Service Mesh Meetup北京站回顾"},{"content":"讲师与演讲话题 张亮（京东金融数据研发负责人）：Service Mesh的延伸 —— 论道Database Mesh\n个人简介：张亮，京东金融数据研发负责人。热爱开源，目前主导两个开源项目Elastic-Job和Sharding-Sphere(Sharding-JDBC)。擅长以java为主分布式架构以及以Kubernetes和Mesos为主的云平台方向，推崇优雅代码，对如何写出具有展现力的代码有较多研究。2018年初加入京东金融，现担任数据研发负责人。目前主要精力投入在将Sharding-Sphere打造为业界一流的金融级数据解决方案之上。\n随着Service Mesh概念的推广与普及，云原生、低接入成本以及分布式组件下移等理念，已逐渐被认可。在Service Mesh依旧处于高速迭代的发展期的同时，以它的理念为参考，其他的Mesh思想也在崭露萌芽。 Database Mesh即是Service Mesh的其中一种延伸，虽然理念与Service Mesh相近，但数据库与无状态的服务却有着巨大的差别。Database Mesh与分布式数据库（如NoSQL和NewSQL）的功能范畴并非重 …","relpermalink":"/event/service-mesh-meetup-02/","summary":"这是第二届 Service Mesh Meetup。","title":"Service Mesh Meetup #2 北京站"},{"content":"本文为翻译文章，点击查看原文。\n在微服务领域，分布式跟踪正逐渐成为调试和跟踪应用程序最重要的依赖工具。\n最近的聚会和会议上，我发现很多人对分布式跟踪的工作原理很感兴趣，但同时对于分布式跟踪如何与Istio和Aspen Mesh等服务网格进行配合使用存在较大的困惑。特别地，我经常被问及以下问题：\n Tracing如何与Istio一起使用？在Span中收集和报告哪些信息？ 是否必须更改应用程序才能从Istio的分布式跟踪中受益？ 如果目前在应用程序中报告Span，它将如何与Istio中的Span进行交互？  在这篇博客中，我将尝试回答这些问题。\n在我们深入研究这些问题之前，建议先快速了解为什么我要写与分布式跟踪相关博客。如果您关注Aspen Mesh的博客，您会注意到我写了两篇与tracing相关的博客，一篇关于 ”使用Istio跟踪AWS中的服务请求“，另一篇关于”使用Istio跟踪gRPC应用程序\u0026#34;。\n我们在Aspen Mesh有一个非常小的工程团队，如果经常在子系统或组件上工作，您很快就会成为（或标记或分配）常驻专家。我在微服务中添加了分布式跟踪，并在AWS环境中将其与Istio集 …","relpermalink":"/blog/distributed-tracing-istio-and-your-applications/","summary":"本文是由Aspen Mesh（隶属于F5）公司的Neeraj Poddar介绍如何在Istio中使用分布式跟踪，需要修改程序才能利用Istio做分布式追踪，Istio报告的Span如何与应用程序创建的Span交互。","title":"使用Istio分布式跟踪应用程序"},{"content":"   这是我们正在发布的系列文章中的第二篇，描述了我们在 Kubernetes 上采用 Istio 进行流量路由的经验。有关我们试图通过Vamp实现的更多详情以及我们选择 Istio 的原因，请参阅我们的第一篇文章。\n最近几个月对 Istio 社区来说相当令人兴奋。随着 0.8 版本的发布，该平台变得更加稳定，现在受益于更加一致（尽管仍然粗糙）的设计。然而，这些改进的代价是路线配置更加复杂。\nVamp Lamia 这个新版本的目标是将 Istio 从 0.7.1 迁移到 0.8 并让它使用起来更加简单。与此同时，我们希望提供一种有助于某种现实场景应用的新功能。 如今，许多产品经理希望通过 A/B 测试来测试页面上新功能的价值。不幸的是，这通常来说都很难做到。 通常人们最终会以离线的方式处理复杂系统，功能切换或日志系统。往往所有这些情况都依赖于人工干预，从而成为一个缓慢，容易出错的过程，也不能很好地与 CI/CD管道集成。\n当我们开始工作时，我们问自己：有多少工作可以在不用写编码的情况下自动完成？\n进入 Vamp Lamia 0.2.0。\n我们解决这个问题的方法的核心是实 …","relpermalink":"/blog/ab-testing-on-kubernetes-with-istio-0-8/","summary":"本文讲述Vamp（一款商业版的云原生应用平台）如何在Kubernetes上采用Istio进行流量路由的经验","title":"使用Istio 0.8对Kubernetes进行A/B测试"},{"content":"本文为翻译文章，点击查看原文。\n先前关于速率限制文章主要描述如何构建并部署基于Java的速率限制服务，该服务可以和开源的Ambassador API网关以及Kubernetes集成（文章的第1部分和第2部分请见这里）。 大家或许会疑惑怎么样才能更好地设计速率限制服务，尤其是如何保证Ambassador以及其底层的Envoy代理的灵活性？这篇文章将给大家启发。\n设置场景 如果你还没有阅读这个系列的第3部分“基于Ambassador API网关实现Java速率限制服务”，我建议你先阅读（文章的第1部分和第2部分请见这里 ）。其中最关键的是Ambassador API网关，其就像其底层使用的Envoy代理一样，通过请求另一个服务来决定一个请求的速率是否需要被限制。这是关注点分离（和单一原则）设计的良好实现。同时由于Ambassador可作为Kubernetes原生API网关，因此你可以很方便将rate limiter部署为Kubernetes基础服务，用来管理平台的容错特性，同时其也很容易进行扩展。\n下文假设你已成功将Ambassador部署进Kubernetes集群，同时也根据我先前文章中 …","relpermalink":"/blog/designing-a-rate-limiting-service-for-ambassador-part-4/","summary":"先前关于速率限制文章主要描述如何构建并部署基于Java的速率限制服务，该服务可以和开源的Ambassador API网关以及Kubernetes集成。 大家或许会疑惑怎么样才能更好地设计速率限制服务，尤其是如何保证Ambassador以及其底层的Envoy代理的灵活性？这篇文章将给大家启发。","title":"速率限制系列part4—为Ambassador API网关设计速率限制服务"},{"content":"本文为翻译文章，点击查看原文。\n运营容器化基础设施给我们带来了一系列新的挑战。您需要对容器进行测试，评估您的 API 端点性能，并确定您的基础架构中的不良的组件。Istio 服务网格可在不更改代码的情况下实现 API 的检测，并且可以自由的设置服务延迟。但是，我们该如何理解所有这些数据？用数学的方式，对，就是这样。\nCirconus 是 Istio 的第一个第三方适配器。在 之前的文章中，我们讨论了第一个用于监视基于 Istio 的服务的 Istio社区适配器。这篇文章将对此进行扩展。我们将解释如何全面了解您的 Kubernetes 基础设施。我们还将解释如何为基于容器的基础架构增加 Istio 服务网格实现。\nIstio 概述 Istio 是 Kubernetes 的服务网格，这意味着它负责所有服务之间的通信和协调，就像网络路由软件为 TCP/IP 流量所做的一样。除了 Kubernetes 之外，Istio 还可以与基于 Docker 和 Consul 的服务进行交互。与 LinkerD 相似，Istio 已经的出现已经有很长时间了。\nIstio 是由 Google、IBM、 …","relpermalink":"/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/","summary":"本文讲述了容器化基础设运维的挑战，Istio给我们带来了哪些便利，怎样通过设置服务级别目标（SLO）、服务级别目标（SLO）、服务级别协议（SLA）、RED仪表板，根据监控数据的分布，进行数据分析来判断性能指标，而不是简单的百分位统计。","title":"使用Kubernetes和Istio对基于容器基础设施的全面服务监控"},{"content":"本文为翻译文章，点击查看原文。\n本文译自 HashiCorp 官网关于 Consul 1.2 支持 Service Mesh 发布的博客文章。\n本文是 HashiCorp 创始人 Mitchell Hashimoto 在 2018 年 6 月 26 日发布的关于 Consul 1.2 新功能 Service Mesh 的官方介绍。译者接触过的 Hashicorp 的产品有过不少，每款都给人感觉功能强大，设计简洁，可以说是都是非常优秀的开源产品（当然这与背后的 Hashicorp 公司商业级支撑有关）。译者有幸见过作者 Mitchell 一面，是个日裔混血，佩服他们取得的成就，期待他们推出的新功能能够取得市场上的成功。\nService Mesh 是最近很火的微服务新范式，以 Istio 为首的开源项目引领着潮流，其他各大公司也在迅速跟上，包括 Hashicorp 也在 Consul 中加入类似的功能。我们后续也将提供 Service Mesh 这方面更多的技术文章，敬请期待。\n    HarshiCorp Consul  我们很激动宣布 HashiCorp Consul 1.2 正式发布 …","relpermalink":"/blog/consul-1-2-service-mesh/","summary":"本文是 HashiCorp 创始人 Mitchell Hashimoto 在 2018 年 6 月 26 日发布的关于 Consul 1.2 新功能 Service Mesh 的官方介绍。","title":"Service Mesh新成员：Consul 1.2"},{"content":"6月30日，杭州，蚂蚁Z空间，一大早就下起了雨，我还心想，这雨要是下大了会不会很多人不来了？而且我们还一早就放出了IT大咖说的直播链接。没想到最后现场签到了有120多个小伙伴！👍视频直播最高峰值800多人同时在线，截止7月1号显示有5340人观看。\n 讲师PPT：https://github.com/servicemesher/meetup-slides 视频直播回放：http://www.itdks.com/eventlist/detail/2311  Meetup结束时现场观众和讲师的合影。\n   Service Mesh meetup顺利落幕，感谢到场的小伙伴，线上观众，IT大咖说的直播支持，来自蚂蚁金服、网易、才云科技、谐云科技老师的精彩分享，蚂蚁金服提供场地支持，电子工业出版社提供赠书支持。下一站北京见！更多SM内容请关注我们社区的官方网站 www.servicemesher.com，忙活了一天都没饭，真的是很饿，晚上在回北京的高铁上叫了个外卖应付了下。\n   现场回顾（多图预警） 当天中午杭州的天气。\n   前几天从LC3大会上拿来的贴纸（CNCF展台）。\n   电子工业出 …","relpermalink":"/blog/hangzhou-meetup-20180630/","summary":"2018年6月30日，杭州，蚂蚁Z空间，一大早就下起了雨，我还心想，这雨要是下大了会不会很多人不来了？而且我们还一早就放出了IT大咖说的直播链接。没想到最后现场签到了有120多个小伙伴！视频直播最高峰值800多人同时在线，截止7月1号显示有5340人观看。","title":"第一届Service Mesh Meetup杭州站回顾"},{"content":"背景和想法 Service Mesh 提供了微服务化开发的新思路，核心思想是构建一个代理转发网络并结合控制和转发分离的做法来对成千上万个微服务间做流量、策略、安全等管理，而另一方面 Linux Kernel 提供一种运行时高效扩可编程的网络注入机制 eBPF，借此能实现 L47 层代理转发。假设借助 eBPF，作为 Service Mesh 的数据转发层，对接 Pilot、Mixer 等控制面，实现策略、流量和安全管理，是不是一种更高效的方式？这会比 Envoy 拥有更好的性能，虽然性能未必是 Mesh 首要考虑的问题，后搜索发现 Cilium 果然做了类似的尝试，详情见 http://docs.cilium.io/en/latest/gettingstarted/istio/，但对接的方式很特别，并不像 Envoy 一样，为每一个 Pod 部署一个 Envoy 容器，而是在多个 Pod 外部署一个 Cilium，以 Kubernetes Daemon Set 模式部署，为多个 Pod 进行代理，对控制器层面的 Pilot 做了定制，部署配置如下：\n$ sed -e …","relpermalink":"/blog/a-new-more-efficient-proxy-model/","summary":"借助 eBPF，作为 Service Mesh 的数据转发层，对接 Pilot、Mixer 等控制面，实现策略、流量和安全管理，是不是一种更高效的方式？这会比 Envoy 拥有更好的性能，虽然性能未必是 Mesh 首要考虑的问题，本文中讲述使用 Cilium 的尝试。","title":"探讨Service Mesh中一种更高效的代理模式"},{"content":"讲师分享  云原生社区 meetup 第七期深圳站开场致辞 - 宋净超 使用 IAST 构建高效的 DevSecOps 流程 - 董志勇 云原生场景下的开发和调试-汪晟杰，黄金浩 Envoy 在腾讯游戏云原生平台应用 - 田甜 使用 KubeVela 构建混合云应用管理平台 - 邓洪超  ","relpermalink":"/event/service-mesh-meetup-01/","summary":"这是第一届 Service Mesh Meetup。","title":"Service Mesh Meetup #1 杭州站"},{"content":"SOFAStack（Scalable Open Financial Architecture Stack）是蚂蚁集团自主研发并开源的金融级分布式架构，包含了构建金融级云原生架构所需的各个组件，是在金融场景里锤炼出来的最佳实践。SOFAStack 官方网站：https://www.sofastack.tech/\n参加此次 Meetup 您将获得：\n 基于 SOFAStack 快速构建微服务 金融场景下的分布式事务最佳实践 基于 Kubernetes 的云原生部署体验 云上的 Service Mesh 基本使用场景体验 基于 Serverless 轻松构建云上应用  如何注册：此活动须提前注册。请将 SOFAStack Cloud Native Workshop 添加到您 KubeCon + CloudNativeCon + Open Source Summit 的注册表里。您可以使用 KCCN19COMATF 折扣码获取 KubeCon 半价门票！\n如果对此活动有任何疑问，请发送邮件至 jingchao.sjc@antfin.com。\n活动详情 9:00 - 9:20 …","relpermalink":"/event/sofastack-cloud-native-workshop/","summary":"这是 KubeCon 第一次在中国举办，蚂蚁集团参与了同场活动，进行了 SOFAStack 云原生动手实验。","title":"SOFAStack Cloud Native Workshop"},{"content":"本文为翻译文章，点击查看原文。\n关键点  服务网格框架用于处理服务间的通信，并提供连接、管理和保护微服务的平台。 服务网格通过处理需要复杂编码的功能来帮助应用程序开发人员，例如路由决策，这些决策在网格层级完成，而不是在应用程序中完成。 它还提供了可以编入网格的安全策略。例如，您可以设置一个策略，以限制网格中某些服务的入站网络流量。 像Istio这样的服务网格可以在Kubernetes平台上无缝工作，但在其他平台上使用还比较麻烦。 Sidecar代理使得应用程序与管理服务通信的操作方面有效和可靠。  服务网格是一个专用的基础设施层，用于处理服务间通信，并提供连接、管理和保护微服务的平台。\n服务网格使得微服务之间的通信变得灵活可靠。它提供了分布式服务所需的关键功能环境，如弹性、服务发现、负载均衡、加密、授权、容错（通过服务重试和断路器）。\nInfoQ与服务网格领域的主题专家进行了交谈，以更多地了解为什么服务网格框架已成为云本机体系结构的关键组件。\n本文下面的部分提供了与我们交谈的小组成员的详细信息，虚拟小组中包含的问题以及小组成员的答复。\n讨论嘉宾：\n Matt Klein，Lyft …","relpermalink":"/blog/vp-microservices-communication-governance-using-service-mesh/","summary":"本文是InfoQ对Serivce Mesh业界领袖Matt Klein、Dan Berg、Priyanka Sharma、Lachlan Evenson、Varun Talwar、Oliver Gould的采访，几位大咖分别就Service Mesh的定义及其在微服务交互和治理方面带来的优势、服务网格与ESB的区别，谁应该关心服务网格，服务网格的运行方式、sidecar以及学习曲线展开了讨论。","title":"InfoQ访谈：使用服务网格的微服务通信与治理"},{"content":"本文为翻译文章，点击查看原文。\nDocker 和 Kubernetes 为代表的容器技术炙手可热，熟知这一技术领域的用户，一定都知道下一个热点：Service Mesh，它承诺将微服务之间的内部网络通信均一化，并解决一系列监控、故障隔离等通用非功能性需求。底层的代理服务器技术是 Service Mesh 的立身之本，这种技术在 Service Mesh 之外，还能以 API 网关的形式在边缘为业务系统提供一系列的增强。\n虽说 Service Mesh 的爆发之势让人误以为罗马是一日建成的，事实上，在这一热点浮出水面之前，包括 Verizon、eBday 以及 Facebook 在内的很多组织已经在应用后来被我们称之为 Service Mesh 的技术了。这些早期应用 Service Mesh 的组织之一就是 Lyft，这是一家年收入超过十亿美元的美国网约车巨头。Lyft 还是开源软件 Envoy Proxy 的诞生地，Envoy 在 Service Mesh 世界中举足轻重，Kubernetes 原生的 Istio 控制面 和 Ambassador API 网关 也都建筑在 Lyft  …","relpermalink":"/blog/containers-service-mesh-and-api-gateways-it-starts-at-the-edge/","summary":"本文中提到的典型是Envoy（数据平面）、Istio（控制平面）和Ambassador（API Gateway），Matt Klein指出人们在践行微服务的道路踩到的坑大多是与debugging有关，我们应该从服务网格的边缘开始实现反向代理、负载均衡和动态路由。实现或迁移基于容器技术的云原生平台如Kubernetes才刚刚开始，Service Mesh填补了该平台中的许多空白。","title":"容器、服务网格和API网关：从边缘开始"},{"content":"   vistio全局级别可视化视图  本文为翻译文章，点击查看原文。\nVistio GitHub地址：https://github.com/nmnellis/vistio\nVizceral是Netflix发布的一个开源项目，用于近乎实时地监控应用程序和集群之间的网络流量。Vistio是使用Vizceral对Istio和网格监控的改进。它利用Istio Mixer生成的指标，然后将其输入Prometheus。Vistio查询Prometheus并将数据存储在本地以允许重播流量。\nVizceral有两个可视化级别，全局可视化和集群级别可视化。在全局范围内（如上所示），您可以通过Istio Ingress Gateway等入口点将从Internet到Istio服务网格网络的网络流量可视化，或者您可以在Istio服务网格网络中显示总网络流量。\n在集群级别（如下所示），您可以可视化内部网格的流量。通过设置警告和错误级别警报，当应用程序出现问题时可以被快速检测出来。\n   Vistio的集群级别可视化  在Istio服务网格中安装Vistio 依赖\n Prometheus Istio 0.7或更 …","relpermalink":"/blog/vistio-visualize-your-istio-mesh-using-netflixs-vizceral/","summary":"Vizceral是Netflix发布的一个开源项目，用于近乎实时地监控应用程序和集群之间的网络流量。Vistio是使用Vizceral对Istio和网格监控的改进。本文是使用Vistio对Istio mesh做流量可视化的教程。","title":"Vistio—使用Netflix的Vizceral可视化Istio service mesh"},{"content":"本文为翻译文章，点击查看原文。\nIstio已经成为一种流行且可靠的服务网格管理平台，使用它可以更轻松地部署、操作和扩展跨云部署的微服务。作为保证这些服务网格的一种方式，Twistlock已经与Istio集成，以丰富平台的连接机器学习功能。 Twistlock通过使用Twistlock数据来隔离受损服务并提供合规策略来执行安全配置，以及Istio运行的其他堆栈。\n随着云原生成为构建和运行现代的基于Web的大规模应用程序的默认方式，组织需要越来越复杂的工具来将基本复杂性从日常操作中抽象出来。Kubernetes显然是编排调度军备竞赛的赢家，并且已经提炼出了管理大型计算节点的复杂性。但是，由于Kubernetes可以实现更大规模的部署，因此我们可以利用其平台级别原语的配套技术使管理大型服务组合变得更简单。\n例如，使用Kubernetes您可以轻松部署应用程序并将其扩展到1000个节点的集群，并处理部署和节点故障。但是，为该服务路由流量、监控服务的整体运行状况（而不仅仅是单个节点和pod）以及确保该服务与集群内其他服务之间的公平资源分配可能很复杂。\nIstio是一个旨在补 …","relpermalink":"/blog/twistlock-makes-istios-security-layer-more-robust-easier-to-monitor/","summary":"本文介绍网络安全公司Twistlock如何实现Istio service mesh的可视化并增强微服务的安全性","title":"Twistlock使Istio的安全层更强大，更易于监控"},{"content":"Aspen Mesh很喜欢用gRPC。Apen Mesh面向公众的API和许多内部API大多都是使用gRPC构建的。如果您还没有听说过 gRPC（熟练掌握gRPC真的很难），那么我先为您简单的介绍下，它是一种新型、高效和优化的远程过程调用（RPC）框架。gRPC 基于protocol buffer序列化格式和HTTP/2网络协议。\n使用HTTP/2协议，gRPC应用程序可以利用多路复用请求显著提高连接利用率，而且比起如HTTP/1.1等其他协议具有更多增强功能。此外，protocal buffer是以二进制方式对结构化数据进行序列化，这比起基于文本的序列化方式更简单且可扩展，还可以显着提高性能。将这两个结果组合在一个低延迟和高度可扩展的RPC框架中，这实质上就是gRPC。此外，不断增长的gRPC生态支持使用多种语言编写应用程序，例如（C ++、Java、Go等），还包括大量第三方库。\n除了上面列出的好处之外，gRPC让我最喜欢的一点是可以让我以简单直观的方式指定RPC（使用protobuf IDL）以及客户端调用服务器端的方法，就好像是调用本地函数一样。很多代码（服务描述和处理程序、客 …","relpermalink":"/blog/tracing-grpc-with-istio/","summary":"本文介绍的是如何在Istio中使用grpc并设置跟踪（tracing）与header传播，包括gRPC到grpc请求传播header、gRPC到HTTP请求传播header、使用grpc-gateway时传播header等","title":"在Istio中跟踪gRPC"},{"content":"本文为翻译文章，点击查看原文。\n说明 开发人员正在摆脱大型单体应用的束缚，转而采用小巧而专一的微服务，以加速软件开发并加强系统弹性。为了满足这个新生态的需求，开发人员需要为部署的微服务创建一个具有负载均衡、高级流量管理、请求跟踪和连接功能的服务网络。\n概述 如果您花时间开发过应用程序，那么有件事情您肯定明白：单体应用正成为过去。当今的应用程序都是关于服务发现、注册、路由和连接。这给微服务的开发和运维人员提出了新的挑战。\n如果您的服务网格在规模和复杂性上不断增长，您可能想知道如何理解和管理服务网格。我们也遇到了同样的问题：如何使这些越来越多的微服务能够彼此连接、负载均衡并提供基于角色的路由？如何在这些微服务上启用传出流量并测试金丝雀部署？仅仅创建一个独立的应用程序还不够，所以我们该如何管理微服务的复杂性呢？\nIstio 是 IBM、Google 和 Lyft 合作创建的项目，旨在帮助您应对这些挑战。Istio 是一种开放技术，它为开发人员提供了一种这样的方式：无论是什么平台、来源或供应商，微服务之间都可以无缝连接，服务网格会替您管理和保护微服务。在下面的开发之旅中， …","relpermalink":"/blog/manage-microservices-traffic-using-istio/","summary":"开发人员正在摆脱大型单体应用的束缚，转而采用小巧而专一的微服务，以加速软件开发并加强系统弹性。为了满足这个新生态的需求，开发人员需要为部署的微服务创建一个具有负载均衡、高级流量管理、请求跟踪和连接功能的服务网络。","title":"使用Istio为微服务提供高级流量管理和请求跟踪功能"},{"content":"本文译者 Grace。\n基于微服务的架构是未来的趋势，但是实现这种架构会面临许多困难。现代应用架构远比过去的架构复杂，因此实现微服务架构将会带来了一系列特殊的挑战，而服务网格可以帮我们解决很多问题。\n最近一段时间，管理者不再专注于调试单个应用程序服务器，相反，现代系统就像是一群牛，研究整体的行为远比单个的服务器更有意义，分布式系统就是一个典型。\n微服务是一种分布式架构，目的在于通过不断调整自身以适应当前流量状况的变化，例如，有一组处理客户端请求路由的容器，改变这组容器，反过来也意味着路由表在不断变化，由此反映了应用程序端点的变化位置。与此同时，在任何架构体系中都会有过去的遗留物，从必须使用单个大型数据库服务器的应用程序到捆绑API以使其看起来是以服务为重点的遗留系统。\n而服务网格是当前最先进的微服务模式。它建立在容器以及容器编排之上，配有处理内部服务通信的专用控制面。它负责协调分布式网格的微服务所需的安全性，路由，身份验证，授权和类似功能，服务网格将这些功能从应用程序（或应用程序的服务组件）中剥离出来作为可编程的基础组件。虽然不是所有的公司都需要如此复杂的服务网格（尽管这些公司大部分都 …","relpermalink":"/blog/8-ways-a-service-mesh-eases-microservices-deployment/","summary":"基于微服务的架构是未来的趋势，但是实现这种架构会面临许多困难。现代应用架构远比过去的架构复杂，因此实现微服务架构将会带来了一系列特殊的挑战，而服务网格可以帮我们解决很多问题。","title":"服务网格：8种方式简化微服务部署"},{"content":"   本文为翻译文章，点击查看原文。\n当我们谈论服务网格的时候，有几个问题经常被提及。这些问题的范围覆盖从简单的了解服务网格的历史，到产品和架构相关的比较深入的技术问题。\n为了回答这些问题，通过 Aspen Mesh 之旅，我们带来三个主题的系列博文来讨论我们为什么选择了 Istio 。\n作为开始，我将重点讨论我最经常被问到的问题之一：\n为什么你选择服务网格，是什么原因促使你这样做？\nLineRate ：高性能负载均衡软件 这个旅程起源于来自 Boulder 的初创公司 LineRate ，该公司在2013年被 F5 Networks 公司收购。 LineRate 除了是我曾经有幸参与的最聪明、最有才华的工程团队，还是一款轻量级高性能 L7 软件代理。当我说高性能时，我正在谈论的是如何将5年前在数据中心已经存在的服务器，变成一个高性能20+ Gbps 200,000+ HTTP 请求每秒的全功能负载。\n虽然性能本身是引入注目的并为我们的客户打开了大门，但是我们的出发点在于客户期望付费的是容量，而不是硬件。这种见解是 LineRate 的核心价值主张。这个简单的概念将使我们的客户能够改变 …","relpermalink":"/blog/the-path-to-service-mesh/","summary":"通过 Aspen Mesh 之旅，我们带来三个主题的系列博文来讨论我们为什么选择了 Istio。","title":"服务网格之路"},{"content":"本文为翻译文章，点击查看原文。\nAspenMesh提供一种Istio的分布式架构支持，这意味着即使与上游Istio项目无关，我们也需要能够测试和修复Bug。为此我们已开发构建了我们自己的打包和测试基础架构方案。如果你对Istio的CI（持续集成）也感兴趣，请参考我们已经投入使用，可能有用但还没有提交给Circle CI或GKE的组件。\n这篇文章描述的是我们如何制作一个新的Minikube-in-a-Container容器和使用Jenkins Pipeline来构建和测试Istio的流程脚本。如果你觉得有必要，你可以通过docker run上运行minikube容器，然后在容器中部署功能性的kubernetes集群，不需要使用时可随时删除。Jenkins bits现在可帮助你构建Istio，也可以作为初始环境，以便在容器内构建容器。\nMinikube-in-a-container 这部分描述了我们如何构建一个可以在构建过程中用来运行Istio冒烟测试的Minikube-in-a-container镜像。我们最初不是这么想的，我们最初使用本地localkube环境。我们不能让它在特定环境外 …","relpermalink":"/blog/building-istio-with-minikube-in-a-container-and-jenkins/","summary":"本文讲述如何制作一个新的 Minikube-in-a-Container 容器和使用 Jenkins Pipeline 来构建和测试 Istio 的流程脚本。","title":"使用Minikube-in-a-Container和Jenkins构建Istio"},{"content":"北京时间 2018 年 6 月 1 日（儿童节）上午 9: 30 Istio 0.8.0 LTS（长期支持版本）发布。该版本除了常见的一堆错误修复和性能改进之外，还包含以下更新和新功能。\n   Istio 0.8 发布  网络  改进了流量管理模型。我们终于准备好了推出新的流量管理配置模型。该模型增加了许多新功能并解决了先前模型的可用性问题。istioctl 中内置了一个转换工具来帮助您迁移旧模型。试用新的流量管理模型。 Ingress/Egress 网关。我们不再支持将 Kubernetes Ingress 配置与 Istio 路由规则相结合，因为这会导致一些错误和可靠性问题。Istio 现在支持独立于 Kubernetes 和 Cloud Foundry 平台的 ingress/egress 网关，并与路由规则无缝集成。 **新的网关支持基于服务器名称指示（Server Name Indication）**的路由，以及根据 SNI 值提供证书。HTTPS 访问外部服务将基于 SNI自动配置。 Envoy v2。用户可以选择使用 Envoy 的 v2 API 注入 sidecar。在 …","relpermalink":"/blog/istio-0-8-release-note/","summary":"北京时间 2018 年 6 月 1 日（儿童节）上午 9: 30 Istio 0.8.0 LTS（长期支持版本）发布。该版本除了常见的一堆错误修复和性能改进之外，还包含以下更新和新功能。","title":"Istio 0.8发布了！"},{"content":"本文为翻译文章，点击查看原文。\n在今年的哥本哈根 Kubecon 大会上，Weaveworks 的 CEO Alexis Richardson 与 Varun Talwar（来自一家隐形创业公司）谈到了 GitOps 工作流程和 Istio。会后 Weaveworks 的 Stefan Prodan 进行了的演示，介绍如何使用 GitOps 上线和管理 Istio 的金丝雀部署。\n会谈和演示中解释了：\n 什么是 GitOps？为什么需要它？ Istio 和 GitOps 的最佳实践是如何管理在其上运行的应用程序的。 如何使用 GitOps 工作流程和 Istio 进行金丝雀部署。  什么是GitOps？ GitOps 是实现持续交付的一种方式。“GitOps 使用 Git 作为声明式基础架构和应用程序的真实来源” Alexis Richardson 说。\n当对 Git 进行更改时，自动化交付管道会上线对基础架构的更改。但是这个想法还可以更进一步——使用工具来比较实际的生产状态和源代码控制中描述的状态，然后告诉你什么时候集群的状态跟描述的不符。\nGit 启用声明式工具 通过使用 Git  …","relpermalink":"/blog/gitops-for-istio-manage-istio-config-like-code/","summary":"本文是 Weaveworks 的 CEO 对 GitOps 工作流程和 Istio 的看法。本文还介绍了如何使用 GitOps 上线和管理 Istio 的金丝雀部署。以上观点来自哥本哈根 Kubecon 上的 Weaveworks 的分享。","title":"Istio的GitOps—像代码一样管理Istio配置"},{"content":"在Kubernetes称为容器编排的标准之后，Service Mesh开始火了起来，但是很多文章讲概念的多，讲技术细节的少，所以专门写一篇文章，来解析Service Mesh背后的技术细节。\n一、Service Mesh是Kubernetes支撑微服务能力拼图的最后一块\n在上一篇文章为什么 kubernetes 天然适合微服务中我们提到，Kubernetes是一个奇葩所在，他的组件复杂，概念复杂，在没有实施微服务之前，你可能会觉得为什么Kubernetes要设计的这么复杂，但是一旦你要实施微服务，你会发现Kubernetes中的所有概念，都是有用的。\n   微服务设计  在我们微服务设计的十个要点中，我们会发现Kubernetes都能够有相应的组件和概念，提供相应的支持。\n其中最后的一块拼图就是服务发现，与熔断限流降级。\n众所周知，Kubernetes的服务发现是通过Service来实现的，服务之间的转发是通过kube-proxy下发iptables规则来实现的，这个只能实现最基本的服务发现和转发能力，不能满足高并发应用下的高级的服务特性，比较SpringCloud和Dubbo有一定的 …","relpermalink":"/blog/deepin-service-mesh-tech-details/","summary":"在Kubernetes称为容器编排的标准之后，Service Mesh开始火了起来，但是很多文章讲概念的多，讲技术细节的少，所以专门写一篇文章，来解析Service Mesh背后的技术细节。","title":"深入解读Service Mesh背后的技术细节"},{"content":"本文是 Istio 管理 Java 微服务的案例教程，使用的所有工具和软件全部基于开源方案，替换了 redhat-developer-demos/istio-tutorial 中的 minishift 环境，使用 kubernetes-vagrant-centos-cluster 替代，沿用了原有的微服务示例，使用 Zipkin 做分布式追踪而不是 Jaeger。\n本文中的代码和 YAML 文件见 GitHub。\n准备环境 在进行本教程前需要先准备以下工具和环境。\n 8G 以上内存 Vagrant 2.0+ Virtualbox 5.0 + 提前下载 kubernetes1.9.1 的 release 压缩包 docker 1.12+ kubectl 1.9.1+ maven 3.5.2+ istioctl 0.7.1 git curl、gzip、tar kubetail siege  安装 Kubernetes 请参考 kubernetes-vagrant-centos-cluster 在本地启动拥有三个节点的 kubernetes 集群。\ngit clone …","relpermalink":"/blog/istio-service-mesh-tutorial/","summary":"本文是 Istio 管理 Java 微服务的案例教程，使用的所有工具和软件全部基于开源方案，替换了 redhat-developer-demos/istio-tutorial 中的 minishift 环境，使用 kubernetes-vagrant-centos-cluster 替代，沿用了原有的微服务示例，使用 Zipkin 做分布式追踪而不是 Jaeger。","title":"Istio Service Mesh教程"}]