<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>张成 | 云原生社区（中国）</title>
    <link>https://cloudnative.to/translators/%E5%BC%A0%E6%88%90/</link>
      <atom:link href="https://cloudnative.to/translators/%E5%BC%A0%E6%88%90/index.xml" rel="self" type="application/rss+xml" />
    <description>张成</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Fri, 11 Oct 2019 18:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/translators/%E5%BC%A0%E6%88%90/avatar_hu3801682002625739492.jpg</url>
      <title>张成</title>
      <link>https://cloudnative.to/translators/%E5%BC%A0%E6%88%90/</link>
    </image>
    
    <item>
      <title>基于自定义 Istio 指标的 Pod 水平自动缩放</title>
      <link>https://cloudnative.to/blog/horizontal-pod-autoscaling-based-on-custom-istio-metrics/</link>
      <pubDate>Fri, 11 Oct 2019 18:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/horizontal-pod-autoscaling-based-on-custom-istio-metrics/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文通过 spotguides——一个示例 spring-boot 应用，讲了 Banzai Cloud 是如何通过 Istio operator 来实现 pod 水平扩展。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;基于自定义-istio-指标的-pod-水平自动缩放&#34;&gt;基于自定义 Istio 指标的 Pod 水平自动缩放&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;的核心功能之一，Banzai Cloud 的应用程序和 devops 容器管理&lt;a href=&#34;https://beta.banzaicloud.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;平台&lt;/a&gt;，是多维的并可以基于默认和自定义指标进行自动调节。在我们引入自定义指标后，我们选择了通过&lt;a href=&#34;https://github.com/DirectXMan12/k8s-prometheus-adapter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus 适配器&lt;/a&gt;从&lt;strong&gt;Prometheus&lt;/strong&gt;收集指标。从那时起，我们的许多客户开始使用 Hoizontal Pod Autoscaling，他们中的大多数人只对基本的 CPU 和内存指标感到满意。&lt;/p&gt;
&lt;p&gt;我们一直都知道这不是一个理想的解决方案，我们一直在努力寻求更灵活的解决方案，以便：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于自定义&lt;strong&gt;Prometheus 指标&lt;/strong&gt;的扩展&lt;/li&gt;
&lt;li&gt;为更复杂的&lt;strong&gt;Prometheus 查询&lt;/strong&gt;提供扩展支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着我们的开源&lt;a href=&#34;https://banzaicloud.com/blog/istio-operator/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio operator&lt;/a&gt;的发布以及在&lt;a href=&#34;https://beta.banzaicloud.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline 平台&lt;/a&gt;上广泛引入基于 Istio 的&lt;a href=&#34;https://beta.banzaicloud.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格&lt;/a&gt;，我们也提供了根据自定义的 Istio 指标的自动缩放功能。Prometheus 现在提供网络指标，延迟，故障率以及更多指标 (默认情况下从 Istio 中删除)。我们的&lt;a href=&#34;https://banzaicloud.com/blog/k8s-hpa-operator/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HPA operator&lt;/a&gt;根据这些指标决定是否扩展。&lt;/p&gt;
&lt;p&gt;但是，在使用&lt;a href=&#34;https://github.com/DirectXMan12/k8s-prometheus-adapter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus Adapter&lt;/a&gt;时，我们的方法已不再可行，因此我们决定探索替代方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果您错过了我们关于&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;平台所支持和自动化不同类型的&lt;strong&gt;自动缩放&lt;/strong&gt;功能的系列博客，请查看这些早先的帖子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/k8s-cluster-autoscaler/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Autoscaling Kubernetes 集群&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/k8s-vertical-pod-autoscaler/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vertical pod autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/k8s-horizontal-pod-autoscaler/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义指标上的水平自动缩放 Kubernetes 部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/k8s-hpa-operator/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Horizontal Pod Autoscaler Kubernetes Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/k8s-hpa-operator-reloaded/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;重新加载水平 Pod 自动调节器操作员&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;tldr&#34;&gt;TL;DR&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;及其&lt;a href=&#34;https://banzaicloud.com/blog/k8s-hpa-operator/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HPA Operator&lt;/a&gt;中对重新设计的自定义指标支持的介绍。&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;来自 Prometheus 的 Istio 指标&lt;/strong&gt;自动调整 Spring Boot 部署的示例&lt;/li&gt;
&lt;li&gt;深入了解添加自定义指标后发生了什么&lt;/li&gt;
&lt;li&gt;切换到另一个&lt;strong&gt;自定义指标适配器&lt;/strong&gt;，&lt;a href=&#34;https://github.com/zalando-incubator/kube-metrics-adapter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kube-metrics-adapter&lt;/a&gt;的介绍&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重新支持自定义指标&#34;&gt;重新支持自定义指标&lt;/h3&gt;
&lt;p&gt;由于上面列出的原因，我们决定使用另一个&lt;strong&gt;自定义指标适配器&lt;/strong&gt;，&lt;a href=&#34;https://github.com/zalando-incubator/kube-metrics-adapter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kube-metrics-adapter&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;kube-metrics-adapter&lt;/strong&gt; 是一种通用指标适配器，可以从多个来源收集和提供指标。对于每个源，都有一个&lt;code&gt;Collector&lt;/code&gt;实现;目前，我们对其&lt;strong&gt;Prometheus&lt;/strong&gt;收集器最感兴趣。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Prometheus Collector&lt;/code&gt;是一个通用收集器。它将&lt;strong&gt;Prometheus&lt;/strong&gt; 查询映射到可由&lt;strong&gt;HPA&lt;/strong&gt; 控制器用于部署自动扩展的度量标准。它的方法不同于&lt;strong&gt;Prometheus Adapter&lt;/strong&gt; ，它具有预定义的规则集 - 包含针对&lt;strong&gt;Prometheus&lt;/strong&gt; 运行的查询，用于将指标转换为自定义指标 - 定期执行。获取所有匹配的指标标准 (因为这些查询必须是通用的并且定位所有 pod 和部署)，并作为自定义指标进行转换和公开。相比之下，“Prometheus collector”仅收集自定义查询返回的指标结果，其定义因部署而异，并且仅针对单个部署/ pod 或服务，从而减少了存储的指标总数。该解决方案的一个缺点是，目前，用户应该避免执行性能不佳的查询。&lt;/p&gt;
&lt;h3 id=&#34;使用-istio-自动伸缩-spring-boot-应用&#34;&gt;使用 ISTIO 自动伸缩 Spring Boot 应用&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-hpa-operator&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./hpa_cust_metrics_istio.png&#34; alt=&#34;HPA Operator&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      HPA Operator
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我选择了流行的&lt;code&gt;spotguides&lt;/code&gt;，&lt;a href=&#34;https://github.com/spotguides/spring-boot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 MySQL 的 Sprint Boot 应用&lt;/a&gt;，以便在 MySQL 服务器旁，快速启动一个轻量级 Web 应用程序容器。我使用&lt;a href=&#34;https://beta.banzaicloud.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Banzai Pipeline Beta&lt;/a&gt;，它支持在六个云提供商中或在本地快速启动 Kubernetes 集群。Prometheus &amp;amp; Grafana Monitoring 以及 Istio 是默认功能，可以通过 UI 开关轻松打开 (Pipeline 处理其余部分)。在这个例子中，我将在 Google Cloud 上启动一个 Kubernetes 集群，并打开&lt;strong&gt;Monitoring and Service Mesh&lt;/strong&gt;，并在其上部署&lt;strong&gt;Spring Boot Spotguide&lt;/strong&gt;。群集创建是我们的&lt;code&gt;spotguide&lt;/code&gt;向导的一部分，但是，因为&lt;code&gt;Service Mesh&lt;/code&gt;是&lt;strong&gt;Pipeline&lt;/strong&gt;中的一个相对较新的功能，我们不能 (迄今为止) 从&lt;code&gt;spotguide&lt;/code&gt;的流程中启用它，所以我们必须事先创建集群。&lt;/p&gt;
&lt;p&gt;我在&lt;a href=&#34;https://banzaicloud.com/img/blog/k8s-hpa-prom-istio/spring_boot_spotguide.mp4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个视频&lt;/a&gt;中记录了这些步骤：&lt;/p&gt;
&lt;p&gt;一旦你的 Spring Boot&lt;code&gt;容器&lt;/code&gt;和&lt;code&gt;MySQL&lt;/code&gt;服务器启动并运行，你就可以从&lt;strong&gt;Spotguid 总览&lt;/strong&gt;打开&lt;a href=&#34;https://spring-boot-custom-metrics-demo.sancyx5g25.sancyx.beta.banzaicloud.io/actuator/health/kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演示程序&lt;/a&gt;。这是一个演示应用程序，是典型的&lt;code&gt;Spring Web&lt;/code&gt;应用程序。我们已经创建了一个&lt;code&gt;GitHub&lt;/code&gt;代码库，你可以在里面找到示意代码（就像我们的其他&lt;code&gt;spotguides&lt;/code&gt;一样）。默认情况下，应用程序 URL 将仅返回运行状况检查状态，该状态连接到&lt;code&gt;Kubernetes&lt;/code&gt;活动和准备情况检查。然后，JVM 指标将暴露给&lt;strong&gt;Prometheus&lt;/strong&gt;，并且 repo 将集成到我们的 CI/CD 流中，因此，一旦您提交业务逻辑，它将自动部署到集群。在&lt;a href=&#34;http://localhost/blog/spotguides-revisited/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;阅读更多关于我们的 spotguides。&lt;/p&gt;
&lt;p&gt;您可以从群集列表或详细信息页面下载&lt;code&gt;Kubernetes&lt;/code&gt;配置，以便稍后从本地计算机获取对群集的&lt;code&gt;kubectl&lt;/code&gt;访问权限。&lt;/p&gt;
&lt;p&gt;我正在使用&lt;code&gt;hey&lt;/code&gt;工具（&lt;code&gt;go get -u github.com/rakyll/hey&lt;/code&gt;）来生成针对 Spring 应用程序的负载;下面的命令将&lt;code&gt;每秒发出50个请求&lt;/code&gt;，总计&lt;code&gt;10000&lt;/code&gt;个请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hey -n &lt;span class=&#34;m&#34;&gt;10000&lt;/span&gt; -q &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; https://spring-boot-custom-metrics-demo.sancyx5g25.sancyx.beta.banzaicloud.io/actuator/health/kubernetes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，打开监控（我们的&lt;strong&gt;Spotguide 摘要&lt;/strong&gt;或群集详细信息页面中提供的链接）以查看可用的指标并确定您的&lt;strong&gt;Prometheus&lt;/strong&gt; 查询。因为我们启用了 Service Mesh，所有网络通信都将通过 Envoy 代理，将指标发送到 Istio 遥测服务，该服务由&lt;strong&gt;Prometheus&lt;/strong&gt;抓取。&lt;/p&gt;
&lt;p&gt;我将基于我的示例，查询基于&lt;strong&gt;istio_requests_total&lt;/strong&gt;指标，该指标与 Spring 容器相关：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;rate&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;istio_requests_total&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;destination_service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spring-boot-custom-metrics-demo-spotguide-spring-boot.default.svc.cluster.local&amp;#34;&lt;/span&gt;,destination_service_name&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spring-boot-custom-metrics-demo-spotguide-spring-boot&amp;#34;&lt;/span&gt;,destination_service_namespace&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,destination_workload&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;spring-boot-custom-metrics-demo-spotguide-spring-boot&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}[&lt;/span&gt;1m&lt;span class=&#34;o&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请务必添加相应的标签过滤器，以便专门选择与您的 pod/部署相关的指标。&lt;/p&gt;
&lt;p&gt;从部署列表页面上的&lt;strong&gt;Horizontal Pod Autoscaler&lt;/strong&gt;菜单中选择&lt;strong&gt;spring-boot-custom-metrics-demo-spotguide-spring-boot&lt;/strong&gt;部署，以访问&lt;em&gt;HPA Edit&lt;/em&gt;页面。在那里，您可以通过输入自定义指标或查询的名称来设置 cpu，内存和自定义指标。&lt;/p&gt;
&lt;p&gt;现在，如果您在更长的时间内生成另一个负载（50 个请求/秒），则应在属于部署的 HPA 中增加副本计数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hey -n &lt;span class=&#34;m&#34;&gt;50000&lt;/span&gt; -q &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; https://spring-boot-custom-metrics-demo.sancyx5g25.sancyx.beta.banzaicloud.io/actuator/health/kubernetes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get hpa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                                   REFERENCE                                                 TARGETS      MINPODS   MAXPODS   REPLICAS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring-boot-custom-metrics-demo-spotguide-spring-boot   Deployment/spring-boot-custom-metrics-demo-spotguide-spring-boot   245866m/40   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;          80s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加载结束后，副本数将慢慢减少到默认的最小值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get hpa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                                   REFERENCE                                                 TARGETS   MINPODS   MAXPODS   REPLICAS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spring-boot-custom-metrics-demo-spotguide-spring-boot   Deployment/spring-boot-custom-metrics-demo-spotguide-spring-boot   266m/40   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;        &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;          32m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;背后的场景&#34;&gt;背后的场景&lt;/h3&gt;
&lt;p&gt;让我们深入了解使用 Pipeline UI 向部署添加自定义指标时幕后发生的情况。这个流程非常类似于资源指标，您可能会从之前的一系列帖子中熟悉这些指标，但是现在，让我们关注与自定义指标相关的 API。&lt;/p&gt;
&lt;p&gt;Pipeline UI 使用 HPA API创建/更新指标：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PUT &lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt;pipeline_url&lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;/api/v1/orgs/:orgId/clusters/:clusterId/hpa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;scaleTarget&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;example-deployment-name&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;minReplicas&amp;#34;&lt;/span&gt;: 1,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;maxReplicas&amp;#34;&lt;/span&gt;: 10,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;customMetrics&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;customMetricName&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;sum({kubernetes_pod_name=~\&amp;#34;^example-deployment-name-pod.*\&amp;#34;,__name__=~\&amp;#34;example-metric-name\&amp;#34;})&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;targetAverageValue&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要指定绝对值，可以使用&lt;code&gt;targetValue&lt;/code&gt;而不是&lt;code&gt;targetAverageValue&lt;/code&gt;。不同之处在于，&lt;code&gt;targetAverageValue&lt;/code&gt;使用当前 pod 副本计数对获取的度量值进行平均。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;实际上做的是为您的部署添加以下注释：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    hpa.autoscaling.banzaicloud.io/maxReplicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    hpa.autoscaling.banzaicloud.io/minReplicas&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    prometheus.customMetricName.hpa.autoscaling.banzaicloud.io/query&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sum&lt;span class=&#34;o&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;kubernetes_pod_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;^example-deployment-name-pod.*&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;,__name__&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;example-metric-name&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所有这些都是通过&lt;a href=&#34;https://github.com/banzaicloud/hpa-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HPA operator&lt;/a&gt;实现的，它根据部署注释管理 HPA 资源。 &lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;在群集创建完成后，通过一个 post hook，部署&lt;a href=&#34;https://github.com/banzaicloud/hpa-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HPA operator&lt;/a&gt;，然后，如果&lt;code&gt;metrics.api&lt;/code&gt;尚未注册，则部署&lt;code&gt;kube-metrics-adapter&lt;/code&gt;和&lt;code&gt;metrics-server&lt;/code&gt;。此过程可能会有所不同，具体取决于您的云提供商和 K8s 版本，这些版本可能已安装了某些功能。在我们的例子中，新创建的 HPA 对象将如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;autoscaling/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HorizontalPodAutoscaler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;autoscaling.alpha.kubernetes.io/current-metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[{&amp;#34;type&amp;#34;:&amp;#34;Object&amp;#34;,&amp;#34;object&amp;#34;:{&amp;#34;target&amp;#34;:{&amp;#34;kind&amp;#34;:&amp;#34;Pod&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;example-deployment-name-customMetricName&amp;#34;,&amp;#34;apiVersion&amp;#34;:&amp;#34;v1&amp;#34;},&amp;#34;metricName&amp;#34;:&amp;#34;customMetricName&amp;#34;,&amp;#34;currentValue&amp;#34;:&amp;#34;222m&amp;#34;}}]&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;autoscaling.alpha.kubernetes.io/metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;[{&amp;#34;type&amp;#34;:&amp;#34;Object&amp;#34;,&amp;#34;object&amp;#34;:{&amp;#34;target&amp;#34;:{&amp;#34;kind&amp;#34;:&amp;#34;Pod&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;example-deployment-name-customMetricName&amp;#34;,&amp;#34;apiVersion&amp;#34;:&amp;#34;v1&amp;#34;},&amp;#34;metricName&amp;#34;:&amp;#34;customMetricName&amp;#34;,&amp;#34;targetValue&amp;#34;:&amp;#34;40&amp;#34;}}]&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metric-config.object.customMetricName.prometheus/per-replica&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metric-config.object.customMetricName.prometheus/query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sum({kubernetes_pod_name=~\&amp;#34;^example-deployment-name-pod.*\&amp;#34;,__name__=~\&amp;#34;example-metric-name\&amp;#34;})&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxReplicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;minReplicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scaleTargetRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apps/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Deployment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-deployment-name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;currentReplicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;desiredReplicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resourceVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selfLink&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，自定义度量标准是&lt;code&gt;Object&lt;/code&gt;类型，并绑定到名为&lt;code&gt;example-deployment-name-customMetricName&lt;/code&gt;的 Pod 资源。 &lt;code&gt;Kube-metrics-adapter&lt;/code&gt;也使用注释查询来获取度量值，该值在以下端点公开&lt;code&gt;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/example-deployment-name -customMetricName/customMetricName&lt;/code&gt;，并且它正是 HPA 控制器将要查找的位置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get --raw &lt;span class=&#34;s2&#34;&gt;&amp;#34;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/*/customMetricName&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;MetricValueList&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;custom.metrics.k8s.io/v1beta1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;selfLink&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;/apis/custom.metrics.k8s.io/v1beta1/namespaces/default/pods/%2A/customMetricName&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;items&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;describedObject&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;Pod&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;example-deployment-name-customMetricName&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;metricName&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;customMetricName&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2019-03-13T20:23:32Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;222m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很高兴你阅读本文，希望你有一个关于&lt;strong&gt;自动缩放&lt;/strong&gt;愉快的实践体验！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Consul Service Mesh 的 7 层网络可观察性</title>
      <link>https://cloudnative.to/blog/layer-7-observability-with-consul-service-mesh/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/layer-7-observability-with-consul-service-mesh/</guid>
      <description>&lt;p&gt;&lt;em&gt;编者按：Consul 团队写了一篇易懂、又有实操的如何在 Service Mesh 中，实现服务的可观察性的文章。即使没有太多基础，也能比较容易的看懂并了解 service mesh 中，如何实现服务的度量。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这是系列博客的第二篇文章，重点介绍 Consul 服务网格中的新功能。&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;您之前可能已经听过“可观察性”一词，但它实际上意味着什么？它只是监控重新品牌，还是更多的可观察性？我们正在发布一系列博客文章，讨论服务网格的核心用例。在本博客中，我们将详细介绍可观察性以及如何启用最近&lt;a href=&#34;https://www.hashicorp.com/blog/hashicorp-consul-1-5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Consul 1.5 发布&lt;/a&gt;中包含的 Consul Connect 的新 L7 可观察性功能。&lt;/p&gt;
&lt;p&gt;首先，让我们重新审视一个熟悉的概念：监控。&lt;/p&gt;
&lt;h3 id=&#34;监控&#34;&gt;监控&lt;/h3&gt;
&lt;p&gt;监控意味着使用内部或外部工具检测应用程序和系统，以确定其状态。&lt;/p&gt;
&lt;p&gt;例如，您可能有一个外部运行状况检查，用于探测应用程序的状态或确定其当前的资源消耗。您可能还有内部统计信息，用于报告特定代码块的性能，或执行某个数据库事务所需的时间。&lt;/p&gt;
&lt;h3 id=&#34;可观察性&#34;&gt;可观察性&lt;/h3&gt;
&lt;p&gt;可观察性来自工程和控制理论的世界。控制理论&lt;a href=&#34;https://en.wikipedia.org/wiki/Observability&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;指出&lt;/a&gt;可观察性本身就是一种描述“从外部产出的知识中推断出系统内部状态的程度”的措施。与监视哪些是你所做的相比，可观察性是系统的属性。如果外部输出，日志记录，度量，跟踪，健康检查等允许您了解其内部状态，则可以观察系统。&lt;/p&gt;
&lt;p&gt;可观察性对于频繁发布的现代分布式应用程序尤其重要。与通过进程内调用进行通信的单片体系结构相比，微服务体系结构在服务交互期间会出现更多故障，因为这些调用发生在可能不可靠的网络上。随着为测试创建逼真的类似生产的环境变得越来越困难，在客户开始之前检测生产中的问题变得更加重要。这些服务调用的视图可帮助团队及早发现故障，跟踪故障并设计弹性。&lt;/p&gt;
&lt;p&gt;借助模块化和可独立部署的（微）服务，很难实现对这些服务的可视性。单个用户请求可以流经多个服务，每个服务由不同的团队独立开发和部署。由于无法预测系统中可能发生的每个潜在故障或问题，因此您需要构建一旦部署后易于调试的系统。对网络的了解对于了解这些高度分布式系统的流量和性能至关重要。&lt;/p&gt;
&lt;h2 id=&#34;服务网格&#34;&gt;服务网格&lt;/h2&gt;
&lt;p&gt;服务网格是一种网络基础设施，它利用“边车”代理进行微服务部署。由于边车代理存在于每个网络跃点，因此它捕获上游和下游通信。因此，服务网格提供了对所有服务的外部性能的完全可见性。&lt;/p&gt;
&lt;p&gt;采用服务网格的一个主要好处是，边车代理队伍可以完全了解所有服务流量，并且可以以一致的方式公开指标，而不管不同的编程语言和框架。应用程序仍需要进行检测，以便深入了解内部应用程序性能。&lt;/p&gt;
&lt;h3 id=&#34;控制平面&#34;&gt;控制平面&lt;/h3&gt;
&lt;p&gt;服务网格传统上由两个主要组件构成：控制平面和数据平面。控制平面为网格中的所有正在运行的数据平面提供策略和配置。数据平面通常是本地代理，作为应用程序的边车运行。数据平面根据控制平面中的策略和服务图终止所有 TLS 连接和托管授权。Consul 构成服务网格的控制平面，简化了边车代理的配置，以实现安全的流量通信和度量收集。Consul 旨在支持各种代理作为 sidecars，并且目前已经为 Envoy 提供了一流的支持，因为它具有轻量级的占用空间和可观察性支持。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-envoy-sidecar-proxy-with-its-upstream-services&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Envoy sidecar proxy with its upstream services&#34; srcset=&#34;
               /blog/layer-7-observability-with-consul-service-mesh/1558253731-consul_hu15341071642842937106.webp 400w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253731-consul_hu13236399308554349345.webp 760w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253731-consul_hu10448009876634095911.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/layer-7-observability-with-consul-service-mesh/1558253731-consul_hu15341071642842937106.webp&#34;
               width=&#34;760&#34;
               height=&#34;360&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Envoy sidecar proxy with its upstream services
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Consul UI showing the Envoy sidecar proxy and its upstream services&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Consul 1.5 引入了使用&lt;code&gt;consul connect envoy&lt;/code&gt;命令立即为 Consul Connect 中的所有 Envoy 代理配置度量集合的功能。在新的发现阶段，此命令从本地 Consul 代理获取集中存储的代理配置，并使用其值来引导 Envoy 代理。&lt;/p&gt;
&lt;p&gt;通过 Consul Connect 配置 Envoy 引导程序时，可以支持几种不同级别的自定义。更高级别的配置是最简单的配置，涵盖了从 Envoy 获取指标所需的一切。&lt;/p&gt;
&lt;p&gt;可以通过创建配置文件来创建集中配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;kind&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;proxy-defaults&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;global&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;config &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# (dog)statsd listener on either UDP or Unix socket. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# envoy_statsd_url = &amp;#34;udp://127.0.0.1:9125&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;envoy_dogstatsd_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;udp://127.0.0.1:9125&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# IP:port to expose the /metrics endpoint on for scraping.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# prometheus_bind_addr = &amp;#34;0.0.0.0:9102&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# The flush interval in seconds.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;envoy_stats_flush_interval&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以使用&lt;code&gt;consul config write &amp;lt;filename&amp;gt;&lt;/code&gt;命令将此配置写入 Consul。&lt;/p&gt;
&lt;p&gt;上述文件中的配置部分通过告知 Envoy 将指标发送到何处来启用指标收集。目前，Consul Connect 通过集中配置支持以下度量标准输出格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;StatsD&lt;/strong&gt;：允许客户报告指标的网络协议，如计数器和计时器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DogStatsD&lt;/strong&gt;：StatsD 协议的扩展，支持直方图和指标标记&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;：暴露出 Prometheus 可以抓取指标的终点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DogStatsD 接收器优于 statsd，因为它允许标记指标，这对于能够在 Grafana 中正确过滤它们至关重要。一旦支持 Envoy 1.10 并发出直方图，prometheus 端点对大多数用户来说都是一个不错的选择。&lt;/p&gt;
&lt;p&gt;Consul 将使用该配置生成 Envoy 设置代理并配置相应统计信息接收器所需的引导配置。一旦 Envoy 代理被引导，它将开始发出指标。您可以在 Prometheus 等时间序列存储中捕获这些指标，并在 Grafana 等工具中查询它们，或将它们发送到托管监控解决方案。下面是一个 Prometheus 查询示例，您可以根据生成的指标编写，该查询将所有请求时间记录到上游“emojify-api”集群，然后按分位数对它们进行分组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# The response times of the emojify-api upstream, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# categorized by quantile &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;envoy_cluster_upstream_rq_time&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;envoy_cluster_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emojify-api&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &amp;gt; 0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;quantile&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;















&lt;figure  id=&#34;figure-resulting-graph-showing-the-request-time-quantiles&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Resulting graph showing the request time quantiles&#34; srcset=&#34;
               /blog/layer-7-observability-with-consul-service-mesh/1558253416-requesttime_hu1599411710897723770.webp 400w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253416-requesttime_hu5921623971207111379.webp 760w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253416-requesttime_hu4074549255856919883.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/layer-7-observability-with-consul-service-mesh/1558253416-requesttime_hu1599411710897723770.webp&#34;
               width=&#34;760&#34;
               height=&#34;336&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Resulting graph showing the request time quantiles
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;em&gt;Resulting graph showing the request time quantiles&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Envoy 根据其配置方式发出&lt;a href=&#34;https://docs.datadoghq.com/integrations/envoy/#data-collected&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大量&lt;/a&gt;统计信息。一般来说，有三类统计数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Downstream&lt;/strong&gt; 与传入连接/请求相关的&lt;strong&gt;下游&lt;/strong&gt;统计信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upstream&lt;/strong&gt; 与传出连接/请求相关的&lt;strong&gt;上游&lt;/strong&gt;统计信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Server&lt;/strong&gt; 描述 Envoy 服务器实例如何执行的&lt;strong&gt;服务器&lt;/strong&gt;统计信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;统计信息的格式类似于``envoy.&lt;category&gt;(.&lt;subcategory&gt;).metric`，我们感兴趣的一些类别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cluster&lt;/strong&gt;：Envoy 连接的一组逻辑上相似的上游主机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listener&lt;/strong&gt;：一个命名的网络位置，如端口或 unix 套接字，可由下游客户端连接。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP&lt;/strong&gt;：连接，吞吐量等指标&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP&lt;/strong&gt;：有关 HTTP 和 HTTP/2 连接和请求的指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-grafana-dashboard-containing-envoy-metrics&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Grafana dashboard containing Envoy metrics&#34; srcset=&#34;
               /blog/layer-7-observability-with-consul-service-mesh/1558253406-dashboard_hu11990207467531114519.webp 400w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253406-dashboard_hu4265720258466755349.webp 760w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253406-dashboard_hu4896749136930174596.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/layer-7-observability-with-consul-service-mesh/1558253406-dashboard_hu11990207467531114519.webp&#34;
               width=&#34;758&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Grafana dashboard containing Envoy metrics
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Grafana dashboard containing Envoy metrics&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;l7-可观察性&#34;&gt;L7 可观察性&lt;/h2&gt;
&lt;p&gt;默认情况下，Envoy 代理 L4 或 TCP 层的连接。虽然这可能有用，但它不包括重要的协议特定信息，如请求率和指示错误所需的响应代码。&lt;/p&gt;
&lt;p&gt;例如，使用 L4，您将看到发送和接收的连接数和字节数，但只有在连接意外终止时才会报告故障。当您的 API 或网站报告失败时，它们通常会响应特定于协议的错误消息，同时保持 TCP 连接处于活动状态或正常关闭它。例如，HTTP 服务的响应带有状态代码，该状态代码指示响应的性质。当请求成功时，您将返回状态 200，如果找不到，则返回 404，当服务出现意外错误时，返回 5xx。特使可以配置为记录每个响应的状态属于哪个类，以允许监视错误率。&lt;/p&gt;
&lt;p&gt;用于服务之间通信的另一个新兴协议是 gRPC，它使用 HTTP/2 进行传输，使用 Protocol Buffers 作为接口定义和序列化格式，以执行远程过程调用。在为 GRPC 配置 Envoy 时，发出的指标将为您提供所调用的函数以及这些调用的结果状态。&lt;/p&gt;
&lt;p&gt;监控这些代码对于理解您的应用程序至关重要，但是，您需要在 Envoy 中启用一些其他配置，以便它了解您的应用正在使用 L7。&lt;/p&gt;
&lt;p&gt;您可以通过在配置文件中设置服务默认值来指定服务的协议（请参阅下面的示例）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;service-defaults&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emojify-api&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;protocol = &amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后使用&lt;code&gt;consul write &amp;lt;filename&amp;gt;&lt;/code&gt;命令将其写入集中式配置。&lt;/p&gt;
&lt;p&gt;如果协议是“http”，“http2”或“grpc”，它将使侦听器发出 L7 指标。在引导 Envoy 代理时，Consul 将尝试从其引用的服务中解析上游协议。如果已定义，则无需在上游指定协议。&lt;/p&gt;
&lt;p&gt;一旦通过 Consul 指定或发现代理和上游的协议字段，Envoy 将配置集群以发出额外的 L7 指标，HTTP 类别和指标的 HTTP/GRPC 子类别。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-the-emojify-cache-and-emojify-facebox-clusters-are-emitting-response-codes-with-their-metrics&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;The emojify-cache and emojify-facebox clusters are emitting response codes with their metrics&#34; srcset=&#34;
               /blog/layer-7-observability-with-consul-service-mesh/1558253409-l7metrics_hu9998933069614441448.webp 400w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253409-l7metrics_hu367522422938671288.webp 760w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253409-l7metrics_hu18299360255053016310.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/layer-7-observability-with-consul-service-mesh/1558253409-l7metrics_hu9998933069614441448.webp&#34;
               width=&#34;760&#34;
               height=&#34;651&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      The emojify-cache and emojify-facebox clusters are emitting response codes with their metrics
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The emojify-cache and emojify-facebox clusters are emitting response codes with their metrics&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一旦您在 Grafana 中获得 L7 指标，您就可以开始更精确地关联事件，并了解系统中的故障是如何冒泡的。&lt;/p&gt;
&lt;p&gt;例如，如果 emojify-api 上游开始返回 5xx 响应代码，您可以查看对 emojify-cache 服务的调用，并查看 Get 调用是否也失败。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Number of requests to the emojify-upstream, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# categorized by resulting response code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;increase&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;envoy_cluster_upstream_rq_xx&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;envoy_cluster_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emojify-api&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}[&lt;/span&gt;30s&lt;span class=&#34;o&#34;&gt;]))&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;envoy_response_code_class&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Number of retry attempts to the emojify-api upstream&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;increase&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;envoy_cluster_upstream_rq_retry&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;envoy_cluster_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emojify-api&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}[&lt;/span&gt;30s&lt;span class=&#34;o&#34;&gt;]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;















&lt;figure  id=&#34;figure-resulting-graph-showing-the-number-of-requests-and-retries&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Resulting graph showing the number of requests and retries&#34; srcset=&#34;
               /blog/layer-7-observability-with-consul-service-mesh/1558253412-requestcount_hu10034701709732667055.webp 400w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253412-requestcount_hu11276979088936765662.webp 760w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253412-requestcount_hu16158382861108748018.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/layer-7-observability-with-consul-service-mesh/1558253412-requestcount_hu10034701709732667055.webp&#34;
               width=&#34;760&#34;
               height=&#34;336&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Resulting graph showing the number of requests and retries
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Resulting graph showing the number of requests and retries&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Number of GRPC calls to the emojify-cache upstream, &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# categorized by function called&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sum&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;increase&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;envoy_cluster_grpc_0&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;envoy_cluster_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emojify-cache&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}[&lt;/span&gt;30s&lt;span class=&#34;o&#34;&gt;]))&lt;/span&gt; by &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;envoy_grpc_bridge_method&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;















&lt;figure  id=&#34;figure-resulting-graph-showing-the-grpc-functions-and-their-call-count&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Resulting graph showing the GRPC functions and their call count&#34; srcset=&#34;
               /blog/layer-7-observability-with-consul-service-mesh/1558253414-requestgrpc_hu11920562954956039972.webp 400w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253414-requestgrpc_hu5915361052308252179.webp 760w,
               /blog/layer-7-observability-with-consul-service-mesh/1558253414-requestgrpc_hu7594129731637931756.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/layer-7-observability-with-consul-service-mesh/1558253414-requestgrpc_hu11920562954956039972.webp&#34;
               width=&#34;760&#34;
               height=&#34;336&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Resulting graph showing the GRPC functions and their call count
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Resulting graph showing the GRPC functions and their call count&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;通过使用分布式跟踪，您可以在系统上获得更好的可观察性。这需要应用程序的一些合作来通过服务调用来发起跟踪和传播跟踪上下文。可以将服务网格配置为集成并向跟踪添加跨度，以深入了解在代理中花费的时间。这可以通过&lt;code&gt;envoy_tracing_json&lt;/code&gt;字段提供，该字段接受 JSON 格式的 Envoy 跟踪配置。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过使用集中式配置，您可以同时在中央位置为所有服务配置度量标准收集。L7 指标可让您更深入地了解服务的行为和性能。&lt;/p&gt;
&lt;p&gt;此处描述的 L7 可观察性功能已在&lt;a href=&#34;https://hashicorp.com/blog/hashicorp-consul-1-5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Consul 1.5&lt;/a&gt;中发布。如果您想亲自试用新功能，这个&lt;a href=&#34;https://instruqt.com/hashicorp/tracks/consul-l7-%e5%8f%af%e8%a7%82%e5%af%9f%e6%80%a7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演示&lt;/a&gt;提供了一个无需安装的实践操场。如果您想了解更多关于 Kulnetes 上 Consul Connect 的 L7 可观察性的信息，请查看 HashiCorp 关于此主题的学习&lt;a href=&#34;https://learn.hashicorp.com/consul/getting-started-k8s/l7-observability-k8s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;指南&lt;/a&gt; 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为 Envoy 构建控制面指南第 2 部分：识别组件</title>
      <link>https://cloudnative.to/blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/</link>
      <pubDate>Fri, 28 Jun 2019 10:41:16 +0800</pubDate>
      <guid>https://cloudnative.to/blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://blog.christianposta.com/envoy/guidance-for-building-a-control-plane-for-envoy-identify-components/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;编者按&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文介绍如何为 Envoy 构建控制面指南的第 2 部分：识别控制平面的各个组件。对实施 Envoy 控制平面需要了解的基础知识很有帮助。也算是 Envoy 的概念介绍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href=&#34;https://blog.christianposta.com/envoy/guidance-for-building-a-control-plane-to-manage-envoy-proxy-based-infrastructure/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个系列文章的前一篇&lt;/a&gt;中，我们浏览了 Envoy 动态配置对于在云原生环境中运行 Envoy 是多么的重要。在这篇文章中，我们来一起看看为了支持控制平面，我们需要如何协调各个组件。&lt;/p&gt;
&lt;p&gt;由于操作环境的变化很大，因此为 Envoy 实施控制平面所需的组件也是如此。例如，在一个极端情况下，如果你需要构建时静态生成 Envoy 文件并发送给 Envoy 的需求，你需要以下组件来满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模板引擎&lt;/li&gt;
&lt;li&gt;数据存储/ VCS，用于输入模板的值&lt;/li&gt;
&lt;li&gt;任何特定于服务的配置，可能/可能不与服务/应用程序一起存储&lt;/li&gt;
&lt;li&gt;一个将各个部分组合在一起的编排器&lt;/li&gt;
&lt;li&gt;一种将这些传递给 Envoy 的方法&lt;/li&gt;
&lt;li&gt;一种触发配置文件重新加载/热重启的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一方面，如果您选择使用 gRPC 流式 xDS 实现，则需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心 xDS 服务接口和实现&lt;/li&gt;
&lt;li&gt;用于处理向服务注册表注册/取消注册服务的组件&lt;/li&gt;
&lt;li&gt;服务注册表&lt;/li&gt;
&lt;li&gt;描述您的 Envoy 配置的抽象对象模型（可选）&lt;/li&gt;
&lt;li&gt;用于保存配置的数据存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您最有可能需要支持 Envoy 操作的其他辅助组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;证书/ CA 存储&lt;/li&gt;
&lt;li&gt;统计收集引擎&lt;/li&gt;
&lt;li&gt;分布式跟踪后端/引擎&lt;/li&gt;
&lt;li&gt;外部认证&lt;/li&gt;
&lt;li&gt;限速服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，您需要考虑构建控制平面，以便组件独立运行，并且可以松散协作以满足控制平面的需求。您要做的最后一件事是通过部署整体控制平面来支持 Envoy 的微服务部署。例如，在&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开源 Gloo 项目&lt;/a&gt; 中，我们有以下驱动控制平面的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Gloo&lt;/code&gt; - 一个事件驱动的组件，负责为核心 xDS 服务生成配置并为其提供服务，并配置自定义 Envoy 过滤器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Discovery&lt;/code&gt; - 一个可选组件，知道如何使用服务发现服务（Consul，Kubernetes 等）来发现和通告上游集群和端点。它还可以发现 REST 端点（通过 swagger），gRPC 功能（基于 gRPC 反射）和 AWS / GCP / Azure 云功能。该组件创建配置（在 Kubernetes 上，用&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CustomResourceDefinitions&lt;/a&gt;表示）&lt;code&gt;Gloo&lt;/code&gt;组件可用于 构建通过 xDS 表示的规范 Envoy 配置。我们将在本系列博客的后续部分中看到更多内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Gateway&lt;/code&gt; - 该组件允许用户使用更舒适的对象模型来根据其角色（即边缘网关，共享代理，knative 群集入口等）配置 Envoy 代理。控制平面的这一部分还生成“Gloo”控制平面可用于通过 xDS 生成 Envoy 配置的配置。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/gloo-control-plane_hu15052166512457288133.webp 400w,
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/gloo-control-plane_hu9357010111900368503.webp 760w,
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/gloo-control-plane_hu15593686230781484443.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/gloo-control-plane_hu15052166512457288133.webp&#34;
               width=&#34;522&#34;
               height=&#34;373&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正如您所看到的，这些基本组件被部署为协同工作的服务，以构建通过 xDS 提供的相应 Envoy 配置。Gloo 通过使用这些松散协调的控制平面组件来实现其强大的发现功能，对函数的语义理解等，这些组件可用于服务 Envoy 配置。当 Gloo 部署到 Kubernetes 时，存储和配置非常具有“kube-native”的感觉：所有内容都由&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义资源定义&lt;/a&gt;表示。具体而言，所有面向用户的配置以及驱动 xDS 端点的核心配置都是 CRDs。您可以使用 Kubernetes API 和 kubectl 与 Gloo 进行交互。但是，我们还提供了一个&lt;code&gt;glooctl&lt;/code&gt; &lt;a href=&#34;https://gloo.solo.io/cli/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CLI 工具来简化与 Gloo 控制平面的交互&lt;/a&gt; - 特别是如果你不想的话，你不必为了 YAML 而烦恼。通过这种方式，Gloo 非常注重开发人员的体验和简化 YAML 的配置，对开发人员（或任何人？）来说这些可能非常繁琐。&lt;/p&gt;
&lt;p&gt;Istio 也采用类似的方法来使用通过 Kubernetes CRDs 配置的松散协调的控制平面组件。Istio 的控制平面由以下部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Istio Pilot&lt;/code&gt;  - 核心 xDS 服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Istio Galley&lt;/code&gt;  - 配置/存储抽象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Istio Citadel&lt;/code&gt;  -  CA /证书引擎&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Istio Telemetry&lt;/code&gt; - 遥测信号的接收器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Istio Policy&lt;/code&gt; - 一个可插拔的策略引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/istio-control-plane_hu3760615727816722426.webp 400w,
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/istio-control-plane_hu13896229697445098622.webp 760w,
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/istio-control-plane_hu13006578401014654115.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/istio-control-plane_hu3760615727816722426.webp&#34;
               width=&#34;760&#34;
               height=&#34;249&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Heptio Contour 实际上只有两个组件组成了它的控制平面，但是，由于它完全基于 Kubernetes，它实际上利用了很多内置的 Kubernetes 工具，如 Kubernetes API / Storage 和 CRDs 来驱动配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;contour&lt;/code&gt;服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init-container&lt;/code&gt; 启动引导&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/contour-control-plane_hu5573575581705568866.webp 400w,
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/contour-control-plane_hu1506572108413987392.webp 760w,
               /blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/contour-control-plane_hu1456860666444689325.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/guidance-for-building-a-control-plane-for-envoy-part-2-identify-components/contour-control-plane_hu5573575581705568866.webp&#34;
               width=&#34;760&#34;
               height=&#34;181&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Contour 使用&lt;code&gt;init-container&lt;/code&gt;为 Envoy 生成一个静态引导配置文件，告诉它在哪里找到 xDS 服务。xDS 服务器是控制平面中的第二个组件，默认情况下与数据平面一起部署，并提供单独部署的选项。我们将在本系列“部署控制平面组件”的第 5 部分中介绍这种架构及其权衡。&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;确定控制平面所需的核心组件。不要试图构建一个单体的控制平面抽象，因为这将成为维护和更新的噩梦。在松散耦合的体系结构中构建控制平面所需的组件。如果您可以构建在 Kubernetes 之上，那么这样做：&lt;a href=&#34;https://medium.com/@allingeek/kubernetes-as-a-common-ops-data-plane-f8f2cf40cd59&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 提供了一个非常强大的集成数据平面&lt;/a&gt;用于操作分布式系统，例如 Envoy 控制平面。如果你在 Kubernetes 之上构建一个控制平面，你应该利用&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义资源定义&lt;/a&gt;来驱动配置你的控制平面。有些人选择使用&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入口定义&lt;/a&gt;，&lt;a href=&#34;https://www.getambassador.io/reference/configuration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务注释&lt;/a&gt;，或&lt;a href=&#34;https://www.youtube.com/watch?v=a1tXFUrqt5M&amp;amp;list=PLj6h78yzYM2PF_iYEBntfR0m4KAZET18Q&amp;amp;index=14&amp;amp;t=0s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置映射&lt;/a&gt;来构建他们的控制平面。在 Kubernetes CRDs 可用之前，这些可能是适当的解决方法，但此时你应该避免这些方法并坚持使用 CRDs。就像&lt;a href=&#34;https://kubernetespodcast.com/episode/041-ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tim Hockin（Kubernetes 的创始人）在最近的播客中所说的那样&lt;/a&gt;，用于驱动 Ingress Gateway 资源的注释是一个糟糕的选择。&lt;/p&gt;
&lt;p&gt;本系列的下一篇文章实际上已经发布：&lt;a href=&#34;https://blog.christianposta.com/envoy/guidance-for-building-a-control-plane-for-envoy-domain-specific-configuration-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为 Envoy 构建控制平面的指南第 3 部分 - 域特定配置 API&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio 遥测和可观察性探索</title>
      <link>https://cloudnative.to/blog/exploring-istio-telemetry-and-observability/</link>
      <pubDate>Wed, 29 May 2019 17:20:42 +0800</pubDate>
      <guid>https://cloudnative.to/blog/exploring-istio-telemetry-and-observability/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://banzaicloud.com/blog/istio-telemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编者按&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者是 Banzai Cloud 的工程师，文章介绍了 istio 环境下，如何结合 Prometheus 进行网络度量指标监测，给出了一些示例配置。最后，还推广了一下 Banzai Cloud 自家的 Pipeline，天然支持跨云、混合云情况下的网络度量监测，欢迎体验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Istio 的一个核心功能就是网络流量的可观察性。因为所有服务间的通信都通过 Envoy 代理，而且 Istio 的控制平面可以从这些代理收集日志和指标，服务网格能够让你深入了解你的网络状况。虽然 Istio 的基本安装就装好了收集遥测数据所需的全部组件，但是理解这些组件如何配合，并且使他们能够工作在生产环境中却不是一个容易的事情。如果服务网格扩展到跨越多个云服务提供商的多个群集时，或者在混合云情况下，甚至在边缘计算环境下，这个工作就更加困难。我们在这篇文章中，尽可能解释清楚 Istio 的遥测是怎么工作的，并且会完整浏览一些监控例子，包括如何配置 Prometheus 的目标和尝试不同可用的指标。看完这篇文章，你将会对 Banzai 云中新的&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;组件有一个提前了解 - 它是一个跨云和混合云管理平台，基于顶尖的&lt;a href=&#34;https://github.com/banzaicloud/istio-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Operator&lt;/a&gt;开发。&lt;/p&gt;
&lt;h2 id=&#34;mixer-与智能代理envoy&#34;&gt;Mixer 与智能代理（Envoy）&lt;/h2&gt;
&lt;p&gt;Istio 的控制平面由几个不同部分组成，其中一个是 Mixer。Mixer 自身在 Kubernetes 里面又有两个不同的独立部署。一个叫做&lt;code&gt;istio-policy&lt;/code&gt;，另一个叫&lt;code&gt;istio-telemetry&lt;/code&gt;。就像它们的名字，这些组件负责提供控制策略和遥测数据收集功能。&lt;/p&gt;
&lt;p&gt;应用 pod 的 sidecar 在发起每一个请求前调用&lt;code&gt;istio-policy&lt;/code&gt;来进行前置条件检查，并在请求结束后发送遥测数据。sidecar 本地缓存了一大批前置检查，使得大量的检查只需要通过缓存就能获得结果。此外，sidecar 还对输出的遥测数据进行了缓存，以减少调用 mixer 的频率。&lt;/p&gt;
&lt;p&gt;在 Istio 的控制平面上运行 mixer 是可选的，如果你不需要集中式的策略检查和遥测，那么你可以把这些组件彻底关掉。这些组件具有非常高的扩展性，并且能够在自定义资源配置中进行完整配置。如果不想涉及 Istio 配置过深，或者不想使用自己的后端基础设施去收集日志和遥测数据，而想完全采用默认值（stdio logs，Prometheus 指标），你完全可以一点不操心这些。&lt;/p&gt;
&lt;p&gt;如果你想用一个不同的&lt;em&gt;adapter&lt;/em&gt; - 如&lt;code&gt;Stackdriver&lt;/code&gt;- 你需要更新 mixer 的自定义资源配置。Istio 中有几个概念叫做&lt;code&gt;handlers&lt;/code&gt;，&lt;code&gt;instances&lt;/code&gt;以及&lt;code&gt;rules&lt;/code&gt;。&lt;code&gt;Handlers&lt;/code&gt;决定一系列后端基础设置适配器是怎么工作以及如何操作的，&lt;code&gt;instances&lt;/code&gt;描述了如何把请求的属性映射到适配器的输入上，最后&lt;code&gt;rules&lt;/code&gt;把&lt;code&gt;handlers&lt;/code&gt;和&lt;code&gt;instances&lt;/code&gt;拼接在一起。这些概念如果你想了解更多，你可以查看&lt;a href=&#34;https://istio.io/docs/concepts/policies-and-telemetry/#configuration-model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;，这篇文章最后也会演示一下一些默认的例子。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/exploring-istio-telemetry-and-observability/istio-telemetry_hu11920937020966555448.webp 400w,
               /blog/exploring-istio-telemetry-and-observability/istio-telemetry_hu12432054136636327858.webp 760w,
               /blog/exploring-istio-telemetry-and-observability/istio-telemetry_hu13146759967422885593.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/exploring-istio-telemetry-and-observability/istio-telemetry_hu11920937020966555448.webp&#34;
               width=&#34;760&#34;
               height=&#34;540&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;配置-prometheus-收集网格数据&#34;&gt;配置 Prometheus 收集网格数据&lt;/h2&gt;
&lt;p&gt;Istio 的文档列举了&lt;a href=&#34;https://istio.io/docs/tasks/telemetry/metrics/collecting-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;收集自定义指标&lt;/a&gt;，以及&lt;a href=&#34;https://istio.io/docs/tasks/telemetry/metrics/querying-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从 Prometheus 中查询指标&lt;/a&gt;的例子，但缺少一个重要的内容：理解和配置 Prometheus 的收集目标。&lt;/p&gt;
&lt;p&gt;如果你只是想试一试 Istio，多半你会部署了它的官方工具 Helm Chart（我们更推荐&lt;a href=&#34;https://github.com/banzaicloud/istio-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio operator&lt;/a&gt;以获取更好的体验）。Helm Chart 默认包含了 Prometheus 部署并且也已经配置好。但是在生产环境下，你通常需要自定义设置 Prometheus 以及配置它的收集目标。这样情况下，你需要手工将 Istio 抓取目标也配置进去。&lt;/p&gt;
&lt;p&gt;首先，我们来看看这些目标。如果你打开这里的配置，你会发现 Istio 给 Prometheus 添加了十多个 job。大部分是从 Istio 控制平面收集自定义指标的。你可以看到 Pilot 通过类似&lt;code&gt;pilot_xds_pushes&lt;/code&gt;, &lt;code&gt;pilot_xds_push_timeout&lt;/code&gt; 与 &lt;code&gt;pilot_total_xds_internal_errors&lt;/code&gt;这些指标上报遥测数据，如&lt;code&gt;xDS&lt;/code&gt;推送，超时或内部错误。这些 job 紧跟在组件名称后，并通过 Kubernetes 服务中&lt;code&gt;http-monitoring&lt;/code&gt;对应的端口上报。下面列举了一个 pilot 的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;job_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pilot&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes_sd_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- {{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.Release.Namespace }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;relabel_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-pilot;http-monitoring&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最重要的两个目标是&lt;code&gt;istio-mesh&lt;/code&gt;和&lt;code&gt;envoy-stats&lt;/code&gt;。&lt;code&gt;prometheus.yml&lt;/code&gt;里面第一项允许 Prometheus 抓取 Mixer，它也含在了以服务遥测数据为中心的，Envoy 代理间的所有网络流量数据中。另一方面来说，&lt;code&gt;envoy-stats&lt;/code&gt;直接查询 Envoy 的代理，并收集网络内中央节点的遥测数据（可以查看类似&lt;code&gt;envoy_cluster_upstream_rq&lt;/code&gt;这样的指标）。&lt;/p&gt;
&lt;p&gt;Mixer 通过 Pilot 来加强 Kubernetes 中 Envoys 上报的采样数据，所以从 Mixer 来的数据包含更丰富的信息，包括服务、负载名称以及其它 Kubernetes 特定的内容。但也有一些&lt;a href=&#34;https://medium.com/@michael_87395/benchmarking-istio-linkerd-cpu-at-scale-5f2cfc97c7fa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博文&lt;/a&gt;提到，从群集中的每一个 sidecar 代理收集遥测数据，有时候会引起性能问题，所以在一个大的群集里面，有时候完全关闭 Mixer，只通过&lt;code&gt;envoy-stats&lt;/code&gt;中转也是值得的，即使这意味着会丢失部分功能。&lt;/p&gt;
&lt;p&gt;下面是一个&lt;code&gt;istio-mesh&lt;/code&gt;添加一个 job，查询&lt;code&gt;istio-telemetry&lt;/code&gt;服务的&lt;code&gt;prometheus&lt;/code&gt;端口的&lt;code&gt;yaml&lt;/code&gt;配置，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;job_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;istio-mesh&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes_sd_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- {{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;.Release.Namespace }}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;relabel_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-telemetry;prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;envoy-stats&lt;/code&gt;的&lt;code&gt;yaml&lt;/code&gt;配置更加复杂，但也很重要。它选择 pod 的条件是端口名称为&lt;code&gt;*-envoy-prom&lt;/code&gt;，指标为&lt;code&gt;/stats/prometheus&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;job_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;envoy-stats&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metrics_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/stats/prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes_sd_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;relabel_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;__meta_kubernetes_pod_container_port_name]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.*-envoy-prom&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;a href=&#34;https://github.com/helm/charts/tree/master/stable/prometheus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm Chart&lt;/a&gt;部署 Prometheus 到群集中，部署目的地添加到&lt;code&gt;values.yaml&lt;/code&gt;文件，或者直接编辑包含&lt;code&gt;premetheus.yaml&lt;/code&gt;的&lt;code&gt;configmap&lt;/code&gt;，并把它挂载到 Prometheus 的服务端 pod 上。&lt;/p&gt;
&lt;h3 id=&#34;使用-prometheus-operator&#34;&gt;使用 Prometheus Operator&lt;/h3&gt;
&lt;p&gt;群集中部署 Prometheus 的一个更好的方法是用&lt;a href=&#34;https://github.com/coreos/prometheus-operator/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus Operator&lt;/a&gt;。这种情况下，目标配置稍稍有点不同 - 不再直接用&lt;code&gt;prometheus.yml，&lt;/code&gt;而是通过定义&lt;code&gt;ServiceMonitor&lt;/code&gt;的自定义资源，来声明一些列用于监控的服务，并且这个 operator 在后台自动把这些配置转换为 Prometheus 的&lt;code&gt;yaml&lt;/code&gt;配置。举个例子，一条收集&lt;code&gt;mixer&lt;/code&gt;指标的&lt;code&gt;ServiceMonitor&lt;/code&gt;记录定义如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;monitoring.coreos.com/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceMonitor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-monitor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;monitoring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- {&lt;span class=&#34;nt&#34;&gt;key: istio, operator: In, values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mixer]}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaceSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jobLabel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-mesh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;interval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http-monitoring&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;interval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;5s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它示范了通过匹配标签&lt;code&gt;istio=mixer&lt;/code&gt;以及每 5 秒查询一次终结点端口&lt;code&gt;prometheus&lt;/code&gt;和&lt;code&gt;http-monitoring&lt;/code&gt;的配置。就像上面这个配置，Mixer 通过&lt;code&gt;http-monitoring&lt;/code&gt;端口，提供了关于它自己操作的自定义度量指标，也通过&lt;code&gt;prometheus&lt;/code&gt;端口提供了聚合的以网络流量服务为中心的一些度量指标。&lt;/p&gt;
&lt;h2 id=&#34;默认度量指标&#34;&gt;默认度量指标&lt;/h2&gt;
&lt;p&gt;Istio 文档中提到，度量指标的第一个任务就是&lt;a href=&#34;https://istio.io/docs/tasks/telemetry/metrics/collecting-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Collecting new metrics&lt;/a&gt;。它很好地描述了 Istio 如何最大化的自定义资源去配置&lt;code&gt;instance&lt;/code&gt;，&lt;code&gt;handlers&lt;/code&gt;和&lt;code&gt;rules&lt;/code&gt;，并演示了如何创建一个自定义的，Istio 生成并且自动收集的度量指标，当然这属于高级别的话题范畴。大部分普通场景里，默认的度量值就足够覆盖使用场景了，Istio 用户也不需要了解背后的概念。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/banzaicloud/istio-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio operator&lt;/a&gt;（Istio Helm 图表也一样）开箱就初始化了默认指标。如果 Istio 运行在群集中，并配置了 Prometheus 以从 Mixer 收集遥测数据，你将不需要做任何网格中服务间的网络流量遥测数据的配置。直到你开始使用 Envoy sidecar，你可以使用 Prometheus UI（或者用它的查询 API）来收集 Prometheus 收集的指标。&lt;/p&gt;
&lt;p&gt;默认指标都是一些标准的信息，如&lt;code&gt;HTTP&lt;/code&gt;，&lt;code&gt;gRPC&lt;/code&gt;以及&lt;code&gt;TCP&lt;/code&gt;请求和响应。每一个请求都是由&lt;code&gt;source&lt;/code&gt;代理和&lt;code&gt;destination&lt;/code&gt;代理上报的，用以提供流量的不同视角的结果。也许有的请求不是通过&lt;code&gt;destination&lt;/code&gt;上报（如果这个请求根本没有经过 destination），但是一些标签（如&lt;code&gt;connection_security_policy&lt;/code&gt;）只在&lt;code&gt;destination&lt;/code&gt;上有效。下面列举一些重要的&lt;em&gt;HTTP&lt;/em&gt;指标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;istion_request_total&lt;/code&gt;是一个&lt;code&gt;计数器（COUNTER）&lt;/code&gt;，聚合 Kubernetes 负载中请求总数，并按照响应码、响应标志和安全策略分组。这在计算负载间的请求量（&lt;code&gt;RPS&lt;/code&gt;）的时候很有用。这有一个&lt;a href=&#34;https://istio.io/docs/examples/bookinfo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bookinfo&lt;/a&gt;的例子。它计算&lt;code&gt;productpage&lt;/code&gt;和&lt;code&gt;review&lt;/code&gt;服务间，最近一小时的每秒请求数&lt;code&gt;request per second，&lt;/code&gt;并且按照工作负载域和响应码分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;sum(rate(istio_requests_total{reporter=&amp;#34;source&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;,destination_service_name=&amp;#34;reviews&amp;#34;}[1m])) by (source_workload,source_version,destination_service_name,destination_workload,destination_version,request_protocol,response_code)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;{&lt;span class=&#34;l&#34;&gt;destination_service_name=&amp;#34;reviews&amp;#34;,destination_version=&amp;#34;v2&amp;#34;,destination_workload=&amp;#34;reviews-v2&amp;#34;,request_protocol=&amp;#34;http&amp;#34;,response_code=&amp;#34;200&amp;#34;,source_version=&amp;#34;v1&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;}    12.71&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;{&lt;span class=&#34;l&#34;&gt;destination_service_name=&amp;#34;reviews&amp;#34;,destination_version=&amp;#34;v3&amp;#34;,destination_workload=&amp;#34;reviews-v3&amp;#34;,request_protocol=&amp;#34;http&amp;#34;,response_code=&amp;#34;200&amp;#34;,source_version=&amp;#34;v1&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;}    12.72&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;{&lt;span class=&#34;l&#34;&gt;destination_service_name=&amp;#34;reviews&amp;#34;,destination_version=&amp;#34;v1&amp;#34;,destination_workload=&amp;#34;reviews-v1&amp;#34;,request_protocol=&amp;#34;http&amp;#34;,response_code=&amp;#34;200&amp;#34;,source_version=&amp;#34;v1&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;}    6.35&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;{&lt;span class=&#34;l&#34;&gt;destination_service_name=&amp;#34;reviews&amp;#34;,destination_version=&amp;#34;v1&amp;#34;,destination_workload=&amp;#34;reviews-v1&amp;#34;,request_protocol=&amp;#34;http&amp;#34;,response_code=&amp;#34;503&amp;#34;,source_version=&amp;#34;v1&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;}    6.37&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;istio_request_duration_seconds&lt;/code&gt; 是收集负载间延迟的直方图。以下示例计算&lt;code&gt;productpage&lt;/code&gt;和&lt;code&gt;reviews&lt;/code&gt;服务之间成功请求的第 95 百分位延迟，并按工作负载子集对结果进行分组。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;histogram_quantile(0.95, sum(rate(istio_request_duration_seconds_bucket{reporter=&amp;#34;source&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;,destination_service_name=&amp;#34;reviews&amp;#34;,response_code=&amp;#34;200&amp;#34;}[60m])) by (le,source_workload,source_version,destination_service_name,destination_workload,destination_version,request_protocol))&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;{&lt;span class=&#34;l&#34;&gt;destination_service_name=&amp;#34;reviews&amp;#34;,destination_version=&amp;#34;v2&amp;#34;,destination_workload=&amp;#34;reviews-v2&amp;#34;,request_protocol=&amp;#34;http&amp;#34;,source_version=&amp;#34;v1&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;}    0.1201&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;{&lt;span class=&#34;l&#34;&gt;destination_service_name=&amp;#34;reviews&amp;#34;,destination_version=&amp;#34;v3&amp;#34;,destination_workload=&amp;#34;reviews-v3&amp;#34;,request_protocol=&amp;#34;http&amp;#34;,source_version=&amp;#34;v1&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;}    0.1345&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;{&lt;span class=&#34;l&#34;&gt;destination_service_name=&amp;#34;reviews&amp;#34;,destination_version=&amp;#34;v1&amp;#34;,destination_workload=&amp;#34;reviews-v1&amp;#34;,request_protocol=&amp;#34;http&amp;#34;,source_version=&amp;#34;v1&amp;#34;,source_workload=&amp;#34;productpage-v1&amp;#34;}    0.1234&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;剩下的两个 HTTP 度量指标是&lt;code&gt;istio_request_bytes&lt;/code&gt;和&lt;code&gt;istio_response_bytes&lt;/code&gt;。这些也是直方图，可以用与&lt;code&gt;istio_request_duration_seconds&lt;/code&gt;类似的方式查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;默认内部度量指标&#34;&gt;默认内部度量指标&lt;/h3&gt;
&lt;p&gt;如果您仍然对如何在 Mixer 中配置这些指标感兴趣，可以查看群集中相应的 Istio 自定义资源。如果从集群中获得&lt;code&gt;metric&lt;/code&gt; CRs，它会列出八个不同的资源，这些资源将转换为 Prometheus 指标：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl get metric -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;requestcount           17h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;requestduration        17h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;requestsize            17h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;responsesize           17h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcpbytereceived        17h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcpbytesent            17h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcpconnectionsclosed   17h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcpconnectionsopened   17h
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;handler&lt;/code&gt;配置描述了 Prometheus 度量指标，并引用了&lt;code&gt;instance_name&lt;/code&gt;字段中的先前&lt;code&gt;metric&lt;/code&gt;自定义资源。它还定义了以后可以在 Prometheus 查询中使用的名称（使用&lt;code&gt;istio&lt;/code&gt;前缀），例如&lt;code&gt;requests_total&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;kubectl get handler -n istio-system prometheus -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;config.istio.io/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;compiledAdapter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metrics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;instance_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;requestcount.metric.istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;COUNTER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;label_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;reporter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;source_app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;requests_total&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后一个构建块是&lt;code&gt;rule&lt;/code&gt;自定义资源，它将度量指标绑定到处理程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;kubectl get rule -n istio-system  promhttp -o yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;config.istio.io/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;actions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;instances&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;requestcount.metric&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;requestduration.metric&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;requestsize.metric&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;responsesize.metric&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;(context.protocol == &amp;#34;http&amp;#34; || context.protocol == &amp;#34;grpc&amp;#34;) &amp;amp;&amp;amp; (match((request.useragent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;| &amp;#34;-&amp;#34;), &amp;#34;kube-probe*&amp;#34;) == false)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您仍需要自定义一些有关网络流量的指标，你需要添加这些类型的自定义资源。为此，您可以参考&lt;a href=&#34;https://istio.io/docs/tasks/telemetry/metrics/collecting-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;用于istio的多混合云监测和控制平面工具&#34;&gt;用于ISTIO的多/混合云监测和控制平面工具&lt;/h2&gt;
&lt;p&gt;Istio 及其遥测组件最初可能会令人生畏，特别是如果涉及多个集群。我们非常关注简化多集群环境中的服务网格使用，因为我们专注于在 Banzai Cloud 构建多云和混合云平台。我们的劳动成果即将发布在 KubeCon：一个用于监控和配置服务网格活动的可视化工具。我们考虑过使用其他工具，如 Kiali，但它缺乏多集群支持以及通过 UI 指定配置选项的能力。因此，我们最终编写了自己的 UI 和后端基础架构，以便与服务网格进行通信。这个新工具将很快在 KubeCon 上发布，并将作为&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;平台的一部分提供，敬请期待！&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/exploring-istio-telemetry-and-observability/uistio_hu15389810059332475352.webp 400w,
               /blog/exploring-istio-telemetry-and-observability/uistio_hu18298324184412117510.webp 760w,
               /blog/exploring-istio-telemetry-and-observability/uistio_hu8995548878528848140.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/exploring-istio-telemetry-and-observability/uistio_hu15389810059332475352.webp&#34;
               width=&#34;760&#34;
               height=&#34;594&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;关于pipelinehttpsgithubcombanzaicloudpipeline&#34;&gt;关于&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PIPELINE&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Banzai Cloud 的&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;提供了一个平台，允许企业开发，部署和扩展基于容器的应用程序。它利用最佳的云组件（如 Kubernetes）为开发人员和运维团队创建高效，灵活的环境。强大的安全措施 - 多身份验证后端，细粒度授权，动态密钥管理，使用 TLS 的组件之间的自动安全通信，漏洞扫描，静态代码分析，CI / CD 等等 -是&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流水线平台&lt;/a&gt;的&lt;em&gt;零级&lt;/em&gt;特征，我们努力为所有企业赋能以实现自动化。&lt;/p&gt;
&lt;h2 id=&#34;关于banzai-cloudhttpsbanzaicloudcom&#34;&gt;关于&lt;a href=&#34;https://banzaicloud.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BANZAI CLOUD&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://banzaicloud.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Banzai Cloud&lt;/a&gt;改变私有云的构建方式，以简化复杂应用程序的开发，部署和扩展，将 Kubernetes 和 Cloud Native 技术的全部功能带给各地的开发人员和企业。
如果你对我们的技术或开源项目感兴趣，可以从&lt;a href=&#34;https://github.com/banzaicloud/pipeline/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/company/banzaicloud/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkedIn&lt;/a&gt; 或 &lt;a href=&#34;https://twitter.com/BanzaiCloud?ref_src=twsrc%5Etfw/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;来联系我们。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>基于 Kubernetes 的 Service Mesh 简介</title>
      <link>https://cloudnative.to/blog/kubernetes-service-mesh/</link>
      <pubDate>Mon, 20 May 2019 12:09:44 +0800</pubDate>
      <guid>https://cloudnative.to/blog/kubernetes-service-mesh/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://akomljen.com/kubernetes-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;编者按&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章介绍了基于 Kubernetes 的服务网格，简要的说明了服务网格的作用，sidecar 的作用以及服务网格两个重要实现：Istio 与 Linkerd 的起源和结构，鼓励大家上手尝试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://akomljen.com/author/alen/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ALEN KOMLJEN&lt;/a&gt; 2018 年 1 月 28 日，阅读时间 4 分钟&lt;/p&gt;
&lt;p&gt;几个月前我同事问起我对于如何集成&lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt;到我们新的运行在&lt;a href=&#34;https://akomljen.com/tag/kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt;应用里面有什么想法。我的第一反应是，嘿，难道 Kubernetes 服务和&lt;a href=&#34;https://akomljen.com/tag/ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ingress&lt;/a&gt;还不够么？你能够基于它们做很多事情了。再考虑服务网格的话似乎有点过度设计。通常你有一些 API 只对内部网络开放，然而对于现在流行的应用来说，这并不够。API 通常暴露在互联网上并且也有非常大的流量。你需要在流量上有更多的控制。甚至你还需要做 API 版本化，做金丝雀部署，观察并记录每一个请求。这就引入了服务网格。无论你用&lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt;或是&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;，原理上都是一样的。&lt;/p&gt;
&lt;h2 id=&#34;为什么要用服务网格&#34;&gt;为什么要用服务网格？&lt;/h2&gt;
&lt;p&gt;服务网格并不是和 Kubernetes 一起出现。然而，因为有 Kubernetes，服务网格更容易被引入到你的环境中。有两个逻辑组件组成了服务网格。我们已经有了 pod 用于承载各个容器。Sidecar 是另一个绝好的例子用于扩展和加强 pod 里面的主要容器。在服务网格语境里，sidecar 是服务代理或者数据平面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务网格是云原生的核心组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了更好的理解服务网格，你需要理解代理和反向代理这两个术语。&lt;strong&gt;代理&lt;/strong&gt;，用一句话说，用于接收流量并中转到其它地方。&lt;strong&gt;反向代理&lt;/strong&gt;，从各个地方接收流量并转交给各个服务。这种情况下，所有的客户只和一个代理实例交流。把数据平面想象为一个反向代理。Ingress 也是 Kubernetes 里面用于暴露服务的反向代理。Ingress 可以中止 SSL，提供基于名称的路由，并且它主要就干这个事情。对于 Kubernetes 服务也是一样。如果你需要更复杂的路由该怎么做呢？&lt;/p&gt;
&lt;p&gt;下面列举一些其它服务网格可以做的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;精细流量策略&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;服务监控&lt;/li&gt;
&lt;li&gt;追踪&lt;/li&gt;
&lt;li&gt;路由&lt;/li&gt;
&lt;li&gt;服务与服务的安全通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不仅有 sidecar 代理，所有的服务网格解决方案还包含控制器，用于定义 sidecar 容器应该如何工作。服务网格的控制平面是一个集中的、管理所有的服务网格和服务代理的地方。这个控制面板记录网络信息，所以它也是一个网络监控工具。&lt;/p&gt;
&lt;p&gt;所以，为什么要用服务网格？答案很简单，你可以做上面的任何事情并且不需要修改代码。它能够节省时间与金钱。不仅如此，更重要的是，你不能跳过测试，因为它对于初学者太复杂。甚至你可以通过&lt;a href=&#34;https://istio.io/docs/concepts/traffic-management/#fault-injection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 故障注入&lt;/a&gt;模拟不同的场景，来测试系统对于失败的反应。&lt;/p&gt;
&lt;h2 id=&#34;linkerd2-与-istio&#34;&gt;Linkerd2 与 Istio&lt;/h2&gt;
&lt;p&gt;在一开始，我提到过两个在 Kubernetes 上创建服务网格的著名的解决方案。未来也许还会有其它更多的解决方案。每一个产品都试图用自己的方式解决问题，相互之间肯定会有重复的地方。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://buoyant.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buoyant&lt;/a&gt;，这家公司创造了 Linkerd，同时还创造了 Conduit 服务。近期，Conduit 被合并到 Linkerd 项目，称作&lt;strong&gt;Linkerd2&lt;/strong&gt;。buoyant 团队把 Linkerd 服务网格变成了一个更加通用的解决方案。它用 Java 编写，这意味着它很重。每一个 pod 会有一个或更多的容器，一个 sidecar。&lt;a href=&#34;https://linkerd.io/2/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd2&lt;/a&gt;设计应用于 Kubernetes。它的开发语言包含 Go-控制平面，和 Rust-一个原生的服务代理，超级轻量、快速并安全。你可以定义重试和超时，定义编排规则，以及加密（TLS），同时还支持根据策略通过或拒绝请求。不仅如此，它还有一个很漂亮的控制台：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-linkerd2_dashboard&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;linkerd2_dashboard&#34; srcset=&#34;
               /blog/kubernetes-service-mesh/empty-dashboard_hu15201463118172874284.webp 400w,
               /blog/kubernetes-service-mesh/empty-dashboard_hu4376208698854013072.webp 760w,
               /blog/kubernetes-service-mesh/empty-dashboard_hu3430926210305165005.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubernetes-service-mesh/empty-dashboard_hu15201463118172874284.webp&#34;
               width=&#34;760&#34;
               height=&#34;344&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      linkerd2_dashboard
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果你喜欢控制台的话也可以用&lt;code&gt;linkerd&lt;/code&gt;CLI。&lt;/p&gt;
&lt;p&gt;Linkerd 的&lt;a href=&#34;https://linkerd.io/2/getting-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入门向导&lt;/a&gt;非常不错，你可以试一试。如果想学习更多，可以看看它的&lt;a href=&#34;https://linkerd.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Istio&lt;/strong&gt;当前支持 Kubernetes 和&lt;a href=&#34;https://www.nomadproject.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nomad&lt;/a&gt;，将来会添加更多的功能。Istio 是一个多平台解决方案。它可以做微服务流量管理，策略应用以及聚合采样信息。Istio 也是 Go 语言编写的轻量应用，但不同于 Linkerd2，它使用&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;来做服务代理。下图说明 Istio 中各个部分是如何组合工作的：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio_architecture&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;istio_architecture&#34; srcset=&#34;
               /blog/kubernetes-service-mesh/arch_hu1988961960019672187.webp 400w,
               /blog/kubernetes-service-mesh/arch_hu970259977229742669.webp 760w,
               /blog/kubernetes-service-mesh/arch_hu1410429578199696394.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubernetes-service-mesh/arch_hu1988961960019672187.webp&#34;
               width=&#34;760&#34;
               height=&#34;698&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      istio_architecture
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我喜欢 Istio 的其中一点是&lt;a href=&#34;https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sidecar 自动注入&lt;/a&gt;，前提是你已经使用&lt;a href=&#34;https://akomljen.com/package-kubernetes-applications-with-helm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm&lt;/a&gt;来发布应用，这样的话就不需要手工把 sidecar 注入到 kubernetes 的配置文件里面。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 上安装 Istio 请参考&lt;a href=&#34;https://istio.io/docs/setup/kubernetes/quick-start.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇快速指南&lt;/a&gt;。其它关于 Istio 的信息，请参考它的&lt;a href=&#34;https://istio.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这两个产品都是开源的。无论哪一个服务网格方式适合你，它们两个都很容易上手实验。不超过 5 分钟就可以把它跑起来。我鼓励你都去试一试然后再做决定。目前阶段 Istio 实现的功能比 Linkerd2 多了很多，并且也是一个稳定版本。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;我希望这篇文章很好的介绍了服务网格。这篇文章并不是 Linkerd2 和 Istio 之间的比较。我列举了一些功能点，这样你可以了解一下服务网格给 Kubernetes 带来了什么。请继续关注我们的后续文章。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
