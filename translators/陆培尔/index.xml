<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云原生社区（中国）</title>
    <link>https://cloudnative.to/translators/%E9%99%86%E5%9F%B9%E5%B0%94/</link>
      <atom:link href="https://cloudnative.to/translators/%E9%99%86%E5%9F%B9%E5%B0%94/index.xml" rel="self" type="application/rss+xml" />
    <description>云原生社区（中国）</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Sat, 07 Mar 2020 15:14:43 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/translators/%E9%99%86%E5%9F%B9%E5%B0%94/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>云原生社区（中国）</title>
      <link>https://cloudnative.to/translators/%E9%99%86%E5%9F%B9%E5%B0%94/</link>
    </image>
    
    <item>
      <title>重新定义代理的扩展性：WebAssembly在Envoy与Istio中的应用</title>
      <link>https://cloudnative.to/blog/redefining-extensibility-in-proxies/</link>
      <pubDate>Sat, 07 Mar 2020 15:14:43 +0800</pubDate>
      <guid>https://cloudnative.to/blog/redefining-extensibility-in-proxies/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://istio.io/blog/2020/wasm-announce/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;译者注：Istio的架构在1.5版本中发生了翻天覆地的变化，控制平面从微服务回归单体，pilot、citadel、galley等控制平面组件整合成了单一的istiod二进制文件，同时饱受诟病的mixer同志终于在1.5中deprecated了，社区呼声很高的Wasm以Proxy-Wasm plugins的方式登上历史舞台，官方承诺在1.6版本中提供标准的wasm插件配置API，甚至还推出了webassemblyhub这样的类似应用商店的服务，构建wasm plugin生态的野心不可谓不大。结合代理无关的ABI标准，只能说谷歌又在下一盘大棋。mixer的两大核心功能，check和report，分别使用Proxy-Wasm plugins和telemetry V2替代，曾经所谓的Mixer V2计划也渐渐烟消云散，湮没在历史尘埃中。本文翻译官方的技术博客，来一探本次的划时代变更proxy-wasm plugin的究竟。&lt;/p&gt;
&lt;p&gt;自2016年采用&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;以来，Istio项目一直希望提供一个平台，在此平台上可以构建丰富的扩展，以满足用户的多样化需求。 有很多理由可以向服务网格的数据平面添加功能-支持更新的协议，与专有安全控件集成或通过自定义指标增强可观察性等。&lt;/p&gt;
&lt;p&gt;在过去的一年半中，我们在Google的团队一直在努力使用&lt;a href=&#34;https://webassembly.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly&lt;/a&gt;向Envoy代理添加动态可扩展性。 我们很高兴今天与大家分享这项工作，并推出&lt;a href=&#34;https://github.com/proxy-wasm/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly (Wasm) for Proxies&lt;/a&gt; (Proxy-Wasm)：我们打算标准化的ABI； SDK； 它的第一个主要实现是新型的，低延迟的&lt;a href=&#34;https://istio.io/docs/reference/config/telemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio遥测系统&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们还与社区紧密合作，以确保为用户提供良好的开发人员体验，以帮助他们快速入门。 Google团队一直与&lt;a href=&#34;https://solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io&lt;/a&gt;团队紧密合作，他们已经构建了&lt;a href=&#34;https://webassemblyhub.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly Hub&lt;/a&gt;，该服务用于构建，共享，发现和部署Wasm扩展。 使用WebAssembly Hub，Wasm扩展与容器一样易于管理，安装和运行。&lt;/p&gt;
&lt;p&gt;这项工作今天发布了Alpha版本，还有很多工作要做，但是我们很高兴将其交到开发人员手中，以便他们可以开始尝试由此带来的巨大可能性。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;Istio和Envoy项目的创建原则都是基于对可扩展性的需求，但是两个项目采用了不同的方法。 Istio项目的重点是启用具有轻量级开发人员体验的称为&lt;a href=&#34;https://istio.io/docs/reference/config/policy-and-telemetry/mixer-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mixer&lt;/a&gt;的通用进程外扩展模型，而Envoy则专注于代理内&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/extending/extending&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扩展&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;每种方法都有其优点和缺点。 Istio模型导致严重的资源效率低下，从而影响了尾部延迟和资源利用率。 该模型在本质上也受到限制-例如，它永远不会为实现&lt;a href=&#34;https://blog.envoyproxy.io/how-to-write-envoy-filters-like-a-ninja-part-1-d166e5abec09&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义协议处理&lt;/a&gt;提供支持。&lt;/p&gt;
&lt;p&gt;Envoy模型强化了整体的构建过程，并要求使用C++编写扩展，从而限制了开发人员生态系统。 为集群发布新的扩展需要推入新的二进制文件并重新启动，这可能很难协调，并且会造成停机风险。 这也激励了开发人员向Envoy上游提交他们的扩展，而这些扩展仅由一小部分生产环境使用，只是为了肩负其发布机制。&lt;/p&gt;
&lt;p&gt;随着时间的流逝，Istio的一些对性能最敏感的功能已进入Envoy的上游，例如&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/rbac_filter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流量策略检查&lt;/a&gt;和&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/rbac_filter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;遥测报告&lt;/a&gt;。 尽管如此，我们一直希望将单个堆栈融合以实现可扩展性，从而减少折衷：这使Envoy版本与其扩展生态系统脱钩，使开发人员能够使用他们选择的语言进行工作，并使Istio可靠地推出新功能而不会造成停机风险。&lt;/p&gt;
&lt;h2 id=&#34;什么是webassembly&#34;&gt;什么是WebAssembly？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://webassembly.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly&lt;/a&gt;（Wasm）是一种可移植的字节码格式，用于以接近本机的速度执行以&lt;a href=&#34;https://github.com/appcypher/awesome-wasm-langs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多种语言&lt;/a&gt;编写的代码。 其最初的&lt;a href=&#34;https://webassembly.org/docs/high-level-goals/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;设计目标&lt;/a&gt;与上述挑战很好地吻合，并且在其背后得到了可观的行业支持。 Wasm是在所有主要浏览器中本地运行的第四种标准语言（继HTML，CSS和JavaScript之后），于2019年12月成为&lt;a href=&#34;https://www.w3.org/TR/wasm-core-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;W3C Recommendation&lt;/a&gt;。这使我们有信心对其进行战略下注。&lt;/p&gt;
&lt;p&gt;尽管WebAssembly最初是作为客户端技术而诞生的，但在服务器上使用它具有许多优点。 运行时是内存安全的，并且经过沙盒处理以确保安全。 有一个大型工具生态系统可用于以文本或二进制格式编译和调试Wasm。 &lt;a href=&#34;https://www.w3.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;W3C&lt;/a&gt;和&lt;a href=&#34;https://bytecodealliance.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BytecodeAlliance&lt;/a&gt;已成为其他服务器端工作的活跃中枢。 例如，Wasm社区正在W3C标准化&lt;a href=&#34;https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“WebAssembly系统接口”（WASI）&lt;/a&gt;，并提供一个示例实现，该示例为Wasm“程序”提供类似于OS的抽象。&lt;/p&gt;
&lt;h2 id=&#34;为envoy带来webassembly&#34;&gt;为Envoy带来WebAssembly&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy/issues/4272&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在过去的18个月中&lt;/a&gt;，我们一直与Envoy社区合作，将Wasm可扩展性纳入Envoy并在上游做出贡献。 我们很高兴地宣布，此特性在&lt;a href=&#34;https://istio.io/news/releases/1.5.x/announcing-1.5/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.5&lt;/a&gt;随附的Envoy版本中Alpha可用，其源代码包含在&lt;a href=&#34;https://github.com/envoyproxy/envoy-wasm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;envoy-wasm&lt;/a&gt;开发分支中，并且正在努力将其合并到Envoy主干中。 该实现使用内置在Google高性能&lt;a href=&#34;https://v8.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8引擎&lt;/a&gt;中的WebAssembly运行时。&lt;/p&gt;
&lt;p&gt;除了底层的运行时，我们还构建了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于在代理中嵌入Wasm的通用应用程序二进制接口（ABI），这意味着编译后的扩展将在不同版本的Envoy或其他代理（如果他们选择实施ABI）下也可以使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用于在&lt;a href=&#34;https://github.com/proxy-wasm/proxy-wasm-cpp-sdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++&lt;/a&gt;，&lt;a href=&#34;https://github.com/proxy-wasm/proxy-wasm-rust-sdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rust&lt;/a&gt;和&lt;a href=&#34;https://github.com/solo-io/proxy-runtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AssemblyScript&lt;/a&gt;中轻松进行扩展开发的SDK，还有更多后续更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有关如何在Istio和独立的Envoy中进行部署的综合&lt;a href=&#34;https://docs.solo.io/web-assembly-hub/latest/tutorial_code/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;示例和说明&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;允许使用其他Wasm运行时的抽象，包括“空”运行时，该运行时将在本地把扩展编译进Envoy中，这对于测试和调试非常有用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用Wasm扩展Envoy可以为我们带来几个主要好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;敏捷性：可以使用Istio控制平面在运行时交付和重新加载扩展。 这样可以快速进行扩展的开发→测试→发布周期，而无需Envoy的重启。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准发布：合并到主树中之后，Istio和其他人将能够使用Envoy的标准发布，而不是自定义版本。 这也将使Envoy社区有更多的时间将某些内置扩展迁移到该模型，从而减少其受支持的覆盖区域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可靠性和隔离性：扩展部署在具有资源限制的沙箱中，这意味着它们现在可以崩溃或泄漏内存，而不会影响Envoy主进程。 CPU和内存使用率也可以受到限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全性：沙盒具有用于与Envoy进行通信的明确定义的API，因此扩展只能访问并修改连接或请求中有限数量的属性。 此外，由于Envoy会协调此交互过程，因此可以隐藏或清除扩展中的敏感信息（例如，HTTP标头中的“Authorization”和“ Cookie”属性，或客户端的IP地址）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;灵活性：&lt;a href=&#34;https://github.com/appcypher/awesome-wasm-langs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可以将30多种编程语言编译为WebAssembly&lt;/a&gt;，从而使来自各种背景（C++，Go，Rust，Java，TypeScript等）的开发人员都可以使用他们选择的语言来编写Envoy扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;“看到WASM在Envoy中的支持，我感到非常兴奋； 这是Envoy可扩展性的未来。 Envoy的WASM支持与社区驱动hub相结合，将在服务网格和API网关用例中释放出令人难以置信的网络领域创新。 我迫不及待地想看到社区的建设向前发展。” –Envoy创作者Matt Klein。&lt;/p&gt;
&lt;p&gt;有关实现的技术细节，请关注即将在&lt;a href=&#34;https://blog.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy博客&lt;/a&gt;上发布的帖子。&lt;/p&gt;
&lt;p&gt;主机环境和扩展之间的&lt;a href=&#34;https://github.com/proxy-wasm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Proxy-Wasm&lt;/a&gt;接口有意设计为与代理无关。 我们已将其内置到Envoy中，但旨在供其他代理供应商采用。 我们希望看到一个世界，您可以获取为Istio和Envoy编写的扩展，并在其他基础架构中运行它。 您很快就会听到更多有关此的信息。&lt;/p&gt;
&lt;h2 id=&#34;在istio中构建webassembly&#34;&gt;在Istio中构建WebAssembly&lt;/h2&gt;
&lt;p&gt;为了提高性能，Istio将其几个扩展移动到了1.5版本中内置的Envoy构建中。 在执行此工作时，我们一直在测试以确保这些相同的扩展可以作为Proxy-Wasm模块进行编译和运行，而行为没有任何变化。 鉴于我们认为Wasm目前的支持为Alpha，因此我们还没有准备好将此设置设为默认设置。 然而，这使我们对通用方法以及已开发的主机环境ABI和SDK充满了信心。&lt;/p&gt;
&lt;p&gt;我们还非常小心地确保Istio控制平面及其&lt;a href=&#34;https://istio.io/docs/reference/config/networking/envoy-filter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy配置API&lt;/a&gt;可以支持Wasm。 我们有一些示例来说明如何执行几种常见的定制操作，例如定制标头解码或程序化路由，这是用户的常见要求。 当我们将支持转移到Beta时，您将看到说明在Istio中使用Wasm的最佳实践的文档。&lt;/p&gt;
&lt;p&gt;最后，我们正在与许多编写了&lt;a href=&#34;https://istio.io/docs/reference/config/policy-and-telemetry/adapters/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mixer适配器&lt;/a&gt;的供应商合作，以帮助他们迁移到Wasm —如果这是前进的最佳途径。 Mixer将在将来的版本中转为社区项目，在那里它将仍可用于遗留用例。&lt;/p&gt;
&lt;h2 id=&#34;开发者体验&#34;&gt;开发者体验&lt;/h2&gt;
&lt;p&gt;没有出色的开发人员体验，再强大的工具也毫无用处。 Solo.io&lt;a href=&#34;https://www.solo.io/blog/an-extended-and-improved-webassembly-hub-to-helps-bring-the-power-of-webassembly-to-envoy-and-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最近宣布&lt;/a&gt;发布&lt;a href=&#34;https://webassemblyhub.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly Hub&lt;/a&gt;，这是一套用于构建，部署，共享和发现Envoy和Istio的Envoy Proxy Wasm扩展的工具和存储库。&lt;/p&gt;
&lt;p&gt;WebAssembly Hub完全自动化了开发和部署Wasm扩展所需的许多步骤。 使用WebAssembly Hub工具，用户可以轻松地以任何受支持的语言将其代码编译为Wasm扩展。 然后，可以将这些扩展上传到Hub注册表，并使用单个命令将其部署和取消部署到Istio。&lt;/p&gt;
&lt;p&gt;在后台，Hub会处理很多细节问题，例如引入正确的工具链，ABI版本验证，权限控制等。 该工作流程还通过自动化扩展部署，消除了跨Istio服务代理的配置更改带来的麻烦。 该工具可帮助用户和运维人员避免由于配置错误或版本不匹配而引起的意外行为。&lt;/p&gt;
&lt;p&gt;WebAssembly Hub工具提供了功能强大的CLI和优雅且易于使用的图形用户界面。 WebAssembly Hub的一个重要目标是简化构建Wasm模块的体验，并为开发人员提供共享和发现有用扩展的协作场所。&lt;/p&gt;
&lt;p&gt;请查看&lt;a href=&#34;https://docs.solo.io/web-assembly-hub/latest/tutorial_code/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入门指南&lt;/a&gt;，以创建您的第一个Proxy-Wasm扩展。&lt;/p&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;p&gt;除了努力发布Beta版，我们还致力于确保围绕Proxy-Wasm有一个持久的社区。 ABI需要最终确定，而将其转变为标准的工作将会在适当的标准机构内获得更广泛的反馈后完成。 向Envoy主干提供上游支持的工作仍在进行中。 我们还在为工具和WebAssembly Hub寻找合适的社区之家。&lt;/p&gt;
&lt;p&gt;原文：&lt;a href=&#34;https://istio.io/blog/2020/wasm-announce/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redefining extensibility in proxies - introducing WebAssembly to Envoy and Istio&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>深入了解Cilium多集群</title>
      <link>https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/</link>
      <pubDate>Wed, 03 Jul 2019 10:59:29 +0800</pubDate>
      <guid>https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/</guid>
      <description>&lt;p&gt;本文是对ClusterMesh（Cilium的多集群实现）的深入研究。简而言之，ClusterMesh 提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过隧道或直接路由，以本地性能对多个Kubernetes集群进行Pod IP路由，而无需任何网关或代理。&lt;/li&gt;
&lt;li&gt;使用标准Kubernetes服务和coredns/kube-dns的透明服务发现。&lt;/li&gt;
&lt;li&gt;跨多个集群的网络策略实施。 策略可以指定为Kubernetes NetworkPolicy资源或扩展的CiliumNetworkPolicy CRD。&lt;/li&gt;
&lt;li&gt;透明加密，用于本地集群中的节点之间以及跨集群边界的所有通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-f7dca3e31d252eb9_hu19a687039bc11104c4d8622084ad542c_27012_76968e3b07aad700a5c4cdb861fb1de9.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-f7dca3e31d252eb9_hu19a687039bc11104c4d8622084ad542c_27012_1003db6db3023a3eb26cfd4a4e1de323.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-f7dca3e31d252eb9_hu19a687039bc11104c4d8622084ad542c_27012_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-f7dca3e31d252eb9_hu19a687039bc11104c4d8622084ad542c_27012_76968e3b07aad700a5c4cdb861fb1de9.webp&#34;
               width=&#34;736&#34;
               height=&#34;213&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;多集群功能以层为单位构建，您可以选择使用所有层，也可以仅选择和使用所需的层。&lt;/p&gt;
&lt;h2 id=&#34;用例&#34;&gt;用例&lt;/h2&gt;
&lt;p&gt;在深入研究实现细节之前，让我们回顾一下连接多个Kubernetes集群的一些用例。&lt;/p&gt;
&lt;h3 id=&#34;用例高可用性&#34;&gt;用例：高可用性&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-5d69ac8aba6c7b47_hu9434f43194aaddd84538def531c61606_104833_b9cff2cb56eb418050246e89e38dfdc5.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-5d69ac8aba6c7b47_hu9434f43194aaddd84538def531c61606_104833_22c9370e7577df4fd5b82548022bc7f3.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-5d69ac8aba6c7b47_hu9434f43194aaddd84538def531c61606_104833_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-5d69ac8aba6c7b47_hu9434f43194aaddd84538def531c61606_104833_b9cff2cb56eb418050246e89e38dfdc5.webp&#34;
               width=&#34;760&#34;
               height=&#34;254&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于大多数人来说，高可用性是最明显的用例。 此用例包括在多个区域（regions）或可用区（availability zones）中运行Kubernetes集群，并在每个集群中运行相同服务的副本。 一旦失败，请求可以故障转移到其他集群。 此用例中涵盖的故障情形主要不是整个区域或故障域的完全不可用。 更可能的情况是一个集群中资源暂时不可用或配置错误导致无法在一个集群中运行或扩展特定服务。&lt;/p&gt;
&lt;h3 id=&#34;用例共享服务&#34;&gt;用例：共享服务&lt;/h3&gt;
&lt;p&gt;基于Kubernetes的平台的最初趋势是构建大型多租户Kubernetes集群。 为每个租户构建单个集群或为不同类别的服务构建集群越来越普遍，例如， 不同级别的安全敏感度。
















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-c950c8dfbc5a9b0d_hu19d7ab75fb18a8a63816fdebbb339227_92828_d678fef2d0cc5bde1f5a1cff05e616d9.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-c950c8dfbc5a9b0d_hu19d7ab75fb18a8a63816fdebbb339227_92828_7fdedc99d9968f44f137c454e996fa58.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-c950c8dfbc5a9b0d_hu19d7ab75fb18a8a63816fdebbb339227_92828_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-c950c8dfbc5a9b0d_hu19d7ab75fb18a8a63816fdebbb339227_92828_d678fef2d0cc5bde1f5a1cff05e616d9.webp&#34;
               width=&#34;760&#34;
               height=&#34;329&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;

但是，某些服务（如密钥管理，日志记录，监控或DNS）通常仍在所有集群之间共享。 这避免了在每个租户集群中维护这些服务的操作开销。&lt;/p&gt;
&lt;p&gt;此模型的主要动机是租户集群之间的隔离，为了维持该目标，租户集群连接到共享服务集群但未连接到其他租户集群。&lt;/p&gt;
&lt;h3 id=&#34;用例拆分有状态和无状态服务&#34;&gt;用例：拆分有状态和无状态服务&lt;/h3&gt;
&lt;p&gt;运行有状态或无状态服务的操作复杂性是非常不同的。 无状态服务易于扩展，迁移和升级。 完全使用无状态服务运行集群可使集群保持灵活和敏捷。 从一个云提供商迁移到另一个云提供商非常简单。&lt;/p&gt;
&lt;p&gt;有状态服务可能会引入潜在的复杂依赖链。 迁移服务通常涉及存储迁移。
















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-98e2a381af81e811_hu2274edd5c3388b5579de12550228c1cc_114642_8135f4ff0a53a5a850bcf7700100b7b2.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-98e2a381af81e811_hu2274edd5c3388b5579de12550228c1cc_114642_efffe799063cefc70489894e48b31a84.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-98e2a381af81e811_hu2274edd5c3388b5579de12550228c1cc_114642_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-98e2a381af81e811_hu2274edd5c3388b5579de12550228c1cc_114642_8135f4ff0a53a5a850bcf7700100b7b2.webp&#34;
               width=&#34;760&#34;
               height=&#34;358&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;

为无状态和有状态分别运行独立的集群允许将依赖复杂性隔离到较少数量的集群，并使无状态集群依赖性保持自由。&lt;/p&gt;
&lt;h2 id=&#34;控制平面&#34;&gt;控制平面&lt;/h2&gt;
&lt;h3 id=&#34;要求&#34;&gt;要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;必须为所有Kubernetes工作节点分配唯一的IP地址，并且所有工作节点必须在彼此之间具有IP连接。&lt;/li&gt;
&lt;li&gt;必须为所有集群分配唯一的PodCIDR区间。&lt;/li&gt;
&lt;li&gt;必须将Cilium配置为使用etcd的kvstore。&lt;/li&gt;
&lt;li&gt;集群之间的网络必须允许集群间通信。 防火墙的具体配置要求将取决于Cilium是否配置为以直接路由或隧道模式运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;
&lt;p&gt;控制平面基于etcd并尽可能保持简约：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个Kubernetes集群都维护自己的etcd集群，包含该集群的状态。 来自多个集群的状态永远不会在etcd本身中混淆。&lt;/li&gt;
&lt;li&gt;每个集群通过一组etcd代理公开它自己的etcd。 在其他集群中运行的Cilium代理连接到etcd代理以监视更改并将多集群相关状态复制到自己的集群中。 使用etcd代理确保了etcd观察者的可扩展性。 访问受TLS证书保护。&lt;/li&gt;
&lt;li&gt;从一个集群到另一个集群的访问始终是只读的。 这确保了故障域保持不变，即一个集群中的故障永远不会传播到其他集群中。&lt;/li&gt;
&lt;li&gt;配置通过简单的Kubernetes secrets资源进行，该资源包含远程etcd代理的寻址信息以及访问etcd代理所需的集群名称和证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-47bf320d6635c354_hu565702c926a3b0186f11af0b30da969b_146333_ce423efb0869c45bc7165262e1fe4660.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-47bf320d6635c354_hu565702c926a3b0186f11af0b30da969b_146333_037a6e83c5c0f3d6a33c5624314c491b.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-47bf320d6635c354_hu565702c926a3b0186f11af0b30da969b_146333_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-47bf320d6635c354_hu565702c926a3b0186f11af0b30da969b_146333_ce423efb0869c45bc7165262e1fe4660.webp&#34;
               width=&#34;760&#34;
               height=&#34;261&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;pod-ip-路由&#34;&gt;Pod IP 路由&lt;/h2&gt;
&lt;p&gt;pod IP路由是多集群能力的基础。 它允许跨集群的pod通过其pod IP相互联系。 Cilium可以在多种模式下运行以执行pod IP路由。 所有这些模式都能够执行多集群pod IP路由。&lt;/p&gt;
&lt;h3 id=&#34;隧道模式&#34;&gt;隧道模式&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-1488d363a7db42ae_hud1df25e1b089045140c73fef34d0d7b2_27935_622f6df36663a896f0c18bef1d9cca9b.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-1488d363a7db42ae_hud1df25e1b089045140c73fef34d0d7b2_27935_c2dca4c1c9a2aaf6c9d26702ff20b64a.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-1488d363a7db42ae_hud1df25e1b089045140c73fef34d0d7b2_27935_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-1488d363a7db42ae_hud1df25e1b089045140c73fef34d0d7b2_27935_622f6df36663a896f0c18bef1d9cca9b.webp&#34;
               width=&#34;706&#34;
               height=&#34;239&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;隧道模式将pod中发出的所有网络数据包封装在所谓的封包头中。 封包头可以包含VXLAN或Geneve帧。 然后通过标准UDP包头传输该封装帧。 该概念类似于VPN隧道。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：pod IP在底层网络上永远不可见。 网络只能看到工作节点的IP地址。 这可以简化安装和防火墙规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：所需的额外网络标头将降低网络的理论最大吞吐量。 确切的成本取决于配置的MTU，与使用MTU 9000的巨型帧相比，使用1500的传统MTU时会更加明显。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：为了不消耗过多CPU，包括底层硬件在内的整个网络堆栈必须支持校验和和分段卸载，以计算校验和并在硬件中执行分段，就像对“常规”网络数据包所做的那样。如今，这种卸载功能的可用性非常常见。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;直接路由模式&#34;&gt;直接路由模式&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-51340f50bb80261e_hue6a4f4be0054806e855214c49ddf9272_25152_2dcf9016bae6f2bdb72ea9c0cd9e051c.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-51340f50bb80261e_hue6a4f4be0054806e855214c49ddf9272_25152_305bc2ee0c3a25f935183b296cb9b909.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-51340f50bb80261e_hue6a4f4be0054806e855214c49ddf9272_25152_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-51340f50bb80261e_hue6a4f4be0054806e855214c49ddf9272_25152_2dcf9016bae6f2bdb72ea9c0cd9e051c.webp&#34;
               width=&#34;706&#34;
               height=&#34;240&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在直接路由模式中，所有网络数据包都直接路由到网络。 这要求网络能够路由pod IP。 可以使用多个选项实现跨节点传播pod IP路由信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;--auto-direct-node-routes&lt;/code&gt;选项，这是通过kvstore的超轻量级路由传播方法，如果所有工作节点共享一个单一的2层网络，该选项将起作用。 对于所有形式的基于云提供商的虚拟网络，通常都满足此要求。&lt;/li&gt;
&lt;li&gt;使用&lt;a href=&#34;http://docs.cilium.io/en/stable/gettingstarted/kube-router/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kube-router集成&lt;/a&gt;运行BGP路由守护进程。&lt;/li&gt;
&lt;li&gt;使用任何其他路由守护进程将路由注入标准Linux路由表（bird，quagga，&amp;hellip;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当网络不再理解pod IP时，网络数据包地址需要伪装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：减少的网络数据包标头可以优化网络吞吐量和延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：整个网络必须能够路由pod IP，这会增加操作的复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;混合路由模式&#34;&gt;混合路由模式&lt;/h3&gt;
&lt;p&gt;混合路由模式允许在可用时使用直接路由，这通常在本地集群或同一VPC中的其他集群中，而当跨越VPC或云提供商时可以回退到隧道模式。 这可以限制操作复杂性并且允许仅在需要时支付优化成本。&lt;/p&gt;
&lt;h2 id=&#34;服务发现&#34;&gt;服务发现&lt;/h2&gt;
&lt;p&gt;Cilium的多集群模型的服务发现是使用标准的Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;services&lt;/a&gt; 构建的，旨在对现有的Kubernetes应用程序部署完全透明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rebel-base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium/global-service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rebel-base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Cilium通过一个注释&lt;code&gt;io.cilium/global-service: &amp;quot;true&amp;quot;&lt;/code&gt; 来监控Kubernetes服务和端点以及监听服务。 对于此类服务，具有相同名称和命名空间信息的所有服务将自动合并在一起，并形成跨集群可用的全局服务。&lt;/li&gt;
&lt;li&gt;根据标准Kubernetes运行状况检查逻辑，任何到全局服务的ClusterIP的流量都将自动负载平衡到所有集群中的端点。&lt;/li&gt;
&lt;li&gt;每个集群继续为每个服务维护自己的ClusterIP，这意味着Kubernetes和kube-dns / coredns不知道其他集群。 DNS服务器继续返回仅在本地集群中有效的ClusterIP，Cilium将透明地执行负载平衡。&lt;/li&gt;
&lt;li&gt;对于细粒度控制存在若干附加注释，例如单向暴露或亲和策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-b027eb4bd91ead46_hu5f6d66a04d8b1fe1842aa086023fa975_32591_5d6af0cb6bc6e6b8224f4d1267eec457.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-b027eb4bd91ead46_hu5f6d66a04d8b1fe1842aa086023fa975_32591_c145df99a3023191f1941eefddff2f44.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-b027eb4bd91ead46_hu5f6d66a04d8b1fe1842aa086023fa975_32591_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-b027eb4bd91ead46_hu5f6d66a04d8b1fe1842aa086023fa975_32591_5d6af0cb6bc6e6b8224f4d1267eec457.webp&#34;
               width=&#34;760&#34;
               height=&#34;255&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;frontend-1&lt;/code&gt;到ClusterIP &lt;code&gt;30.1.1.1&lt;/code&gt;的所有流量将自动负载均衡到集群1 的后端pod IP&lt;code&gt;[10.0.0.1,10.0.0.2]&lt;/code&gt;以及集群2的后端pod IP&lt;code&gt;[20.0.0.1,20.0.0.2]&lt;/code&gt;。 每个集群将执行本地后端实例的运行状况检查，并在容器创建，销毁或变得不健康时通知其他集群。&lt;/p&gt;
&lt;h2 id=&#34;透明加密&#34;&gt;透明加密&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io/blog/2019/02/12/cilium-14/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 1.4&lt;/a&gt;中引入的透明加密与多集群兼容。确保使用公共密钥配置所有集群中的所有节点，如此节点之间的所有通信都会自动加密。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-be3e56c01fa1ef78_hu976c49355c91a75e797f51728e9b51ab_22811_61eac2d9f16ff04ef8da08551ecffc94.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-be3e56c01fa1ef78_hu976c49355c91a75e797f51728e9b51ab_22811_fd3ea74a98d7e8e15a998a9ac5990b70.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-be3e56c01fa1ef78_hu976c49355c91a75e797f51728e9b51ab_22811_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-be3e56c01fa1ef78_hu976c49355c91a75e797f51728e9b51ab_22811_61eac2d9f16ff04ef8da08551ecffc94.webp&#34;
               width=&#34;709&#34;
               height=&#34;209&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;多集群的网络策略&#34;&gt;多集群的网络策略&lt;/h2&gt;
&lt;p&gt;简单版本是您从单个集群中熟悉的策略实施将简单地扩展并跨集群工作。 由于策略是使用pod标签指定的，因此允许&lt;code&gt;frontend&lt;/code&gt;与&lt;code&gt;backend&lt;/code&gt;通信的策略将应用于集群流量，就像流量跨越集群一样。&lt;/p&gt;
&lt;p&gt;Cilium&lt;strong&gt;不会&lt;/strong&gt;跨集群自动传播NetworkPolicy或CiliumNetworkPolicy。 用户有责任将策略导入所有集群。 这是有意为之，因为这意味着每个集群都可以决定是否允许集群接收来自远程集群的通信或者发出到远程集群的通信。&lt;/p&gt;
&lt;h3 id=&#34;允许特定集群的交叉路径&#34;&gt;允许特定集群的交叉路径&lt;/h3&gt;
&lt;p&gt;可以仅建立适用于特定集群中的pod的策略。 集群名称由Cilium表示为每个pod上的标签，允许匹配的集群名称可以是&lt;code&gt;endpointSelector&lt;/code&gt;或者是由&lt;code&gt;toEndpoints&lt;/code&gt;和&lt;code&gt;fromEndpoints&lt;/code&gt;构造的&lt;code&gt;matchLabels&lt;/code&gt;标签：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;allow-cross-cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Allow x-wing in cluster1 to contact rebel-base in cluster2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;x-wing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium.k8s.policy.cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rebel-base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium.k8s.policy.cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的示例策略将允许cluster1中的&lt;code&gt;x-wing&lt;/code&gt;与cluster2中的&lt;code&gt;rebel-base&lt;/code&gt;对话。 除非存在将通信列入白名单的附加策略，否则x-wing将无法与本地集群中的rebel-base通信。&lt;/p&gt;
&lt;h2 id=&#34;与istio多集群的关系&#34;&gt;与Istio多集群的关系&lt;/h2&gt;
&lt;p&gt;这两个项目都是独立的，但可以很好地相互补充。 组合Cilium和Istio多集群的常用方法是使用Cilium的多集群Pod IP路由层来满足&lt;a href=&#34;https://istio.io/docs/setup/kubernetes/multicluster-install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio多集群指南&lt;/a&gt;的以下要求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;每个集群中的所有pod CIDR必须可以相互路由。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，Cilium策略执行功能可用于保护与Istio控制平面之间的通信，以及通过不支持的协议（如UDP或IPV6）保护sidecar的旁路尝试，以及防止受损的sidecar代理。&lt;/p&gt;
&lt;p&gt;还可以同时运行全局Istio服务和Cilium全局服务。 所有Istio托管服务都可以获得Cilium的全局服务，因为它们可以像常规服务一样通过DNS发现。&lt;/p&gt;
&lt;h2 id=&#34;准备开始&#34;&gt;准备开始&lt;/h2&gt;
&lt;p&gt;要开始使用，请按照手把手的&lt;a href=&#34;http://docs.cilium.io/en/stable/gettingstarted/clustermesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ClusterMesh教程&lt;/a&gt;进行操作，该教程将指导您完成将集群连接在一起的过程。 请务必加入我们的&lt;a href=&#34;https://cilium.herokuapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack频道&lt;/a&gt;，提出问题并展示您的设置。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-112faa9f90a9352b_hu915ec97dd8711809fe9659ec4450d883_37939_d62b6ede71c649c0344d903044cabc3d.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-112faa9f90a9352b_hu915ec97dd8711809fe9659ec4450d883_37939_7b26a0534ba5105c9a64c9a6f644648d.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-112faa9f90a9352b_hu915ec97dd8711809fe9659ec4450d883_37939_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-112faa9f90a9352b_hu915ec97dd8711809fe9659ec4450d883_37939_d62b6ede71c649c0344d903044cabc3d.webp&#34;
               width=&#34;760&#34;
               height=&#34;265&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
