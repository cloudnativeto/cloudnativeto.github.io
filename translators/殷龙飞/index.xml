<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>殷龙飞 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/translators/%E6%AE%B7%E9%BE%99%E9%A3%9E/</link>
      <atom:link href="https://cloudnativecn.com/translators/%E6%AE%B7%E9%BE%99%E9%A3%9E/index.xml" rel="self" type="application/rss+xml" />
    <description>殷龙飞</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 25 Mar 2019 10:58:41 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/translators/%E6%AE%B7%E9%BE%99%E9%A3%9E/avatar_hu_993d1b6c8f0963be.jpg</url>
      <title>殷龙飞</title>
      <link>https://cloudnativecn.com/translators/%E6%AE%B7%E9%BE%99%E9%A3%9E/</link>
    </image>
    
    <item>
      <title>使用 Istio 打造微服务（第 2 部分）——认证和授权</title>
      <link>https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/</link>
      <pubDate>Mon, 25 Mar 2019 10:58:41 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bke0q1bnj20m80bqwm6_hu_52c1d3643baa671b.webp 400w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bke0q1bnj20m80bqwm6_hu_d41f54aa217b0f23.webp 760w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bke0q1bnj20m80bqwm6_hu_3cc50835ab817492.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bke0q1bnj20m80bqwm6_hu_52c1d3643baa671b.webp&#34;
               width=&#34;760&#34;
               height=&#34;401&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://medium.com/google-cloud/back-to-microservices-with-istio-part-2-authentication-authorization-b079f77358ac&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这篇文章是使用 Istio 打造微服务&lt;/em&gt;的第二部分，如果没有看第一篇的话，请先看&lt;a href=&#34;http://www.servicemesher.com/blog/back-to-microservices-with-istio-p1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;第一部分内容&lt;/a&gt;，因为这篇博客是以第一篇博客为基础进行进一步深入的。&lt;/p&gt;
&lt;p&gt;在第一篇文章中，我们建立了一个 Kubernetes 集群，并且在上面部署了 &lt;strong&gt;Istio&lt;/strong&gt; 和示例微服务应用程序“Sentiment Analysis”，用来展示 Istio 的功能。&lt;/p&gt;
&lt;p&gt;使用 Istio 后，我们可以把应用层中的重试、超时、断路器、跟踪、监控内容抛弃，以保持我们的服务应用保持在一个简单专注的微型状态，（如图 1 所示）。此外，我们还启用了高级测试和部署技术，如 A/B 测试，镜像和金丝雀部署。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1微服务的形式构成&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 1.微服务的形式构成&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkei4aehj20aj082wf1_hu_a07ab3d8cc85dcd7.webp 400w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkei4aehj20aj082wf1_hu_8fd1e19a40ddb0f1.webp 760w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkei4aehj20aj082wf1_hu_cb7a13d2b9d981af.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkei4aehj20aj082wf1_hu_a07ab3d8cc85dcd7.webp&#34;
               width=&#34;379&#34;
               height=&#34;290&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1.微服务的形式构成
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在本文中，我们将带领读者使用 Istio 来处理身份验证和授权！&lt;/p&gt;
&lt;h2 id=&#34;istio-中的认证和授权&#34;&gt;Istio 中的认证和授权&lt;/h2&gt;
&lt;p&gt;我永远不会相信认证和授权会让我感到兴奋！但是 Istio 可以让这个话题变得有趣，这种情况下难道你不感到兴奋么？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案很简单&lt;/strong&gt;：Istio 将这些职责从我们的服务下沉到 Envoy 代理，当请求到达我们的服务时，它们已经经过身份验证和授权，我们只需编写提供业务价值的代码。&lt;/p&gt;
&lt;p&gt;听起来不错？让我们去瞧瞧吧！&lt;/p&gt;
&lt;h2 id=&#34;使用-auth0-进行身份验证&#34;&gt;使用 Auth0 进行身份验证&lt;/h2&gt;
&lt;p&gt;作为身份和访问管理服务器，我们将使用 Auth0，它有一个试用选项，直观易用，我只是喜欢它！也就是说，相同的原则可以用于任何 &lt;a href=&#34;https://openid.net/developers/certified/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenID Connect 实现&lt;/a&gt;，如 KeyCloak、IdentityServer 等等。&lt;/p&gt;
&lt;p&gt;要开始使用，请使用您的帐户导航到&lt;a href=&#34;https://manage.auth0.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Auth0 Portal&lt;/a&gt;，在 Applications&amp;gt; Default App 下创建租户并选择 Domain，如下图所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-auth0-管理门户中的默认应用程序&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 2. Auth0 管理门户中的默认应用程序&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkeum2wwj20m80exmzl_hu_822ab5e6e29657d8.webp 400w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkeum2wwj20m80exmzl_hu_e894d5c9c711d038.webp 760w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkeum2wwj20m80exmzl_hu_8356e70c5edc68c1.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkeum2wwj20m80exmzl_hu_822ab5e6e29657d8.webp&#34;
               width=&#34;760&#34;
               height=&#34;510&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2. Auth0 管理门户中的默认应用程序
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;更新文件 &lt;code&gt;resource-manifests/istio/security/auth-policy.yaml&lt;/code&gt; 以使用您的域名：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;authentication.istio.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;auth-policy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-web-app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-feedback&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;origins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;jwt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;issuer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://{YOUR_DOMAIN}/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;jwksUri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://{YOUR_DOMAIN}/.well-known/jwks.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;principalBinding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;USE_ORIGIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了这个资源，pilot 会配置 envoy 在将请求转发给服务&lt;code&gt;sa-web-app&lt;/code&gt; 和 &lt;code&gt;sa-feedback&lt;/code&gt;之前对其进行身份验证。同时，这个策略不会应用到运行&lt;code&gt;sa-frontend&lt;/code&gt;服务的 envoy 上，这使得我们能够未经认证就访问前端服务。要应用这些策略，请执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/security/auth-policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;policy.authentication.istio.io &lt;span class=&#34;s2&#34;&gt;&amp;#34;auth-policy&amp;#34;&lt;/span&gt; created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;返回页面并发出请求，您将看到它将以 401 Unauthorized 结束，现在让我们从前端转发用户以使用 Auth0 进行身份验证。&lt;/p&gt;
&lt;h2 id=&#34;使用-auth0-验证请求&#34;&gt;使用 Auth0 验证请求&lt;/h2&gt;
&lt;p&gt;要验证最终用户的请求，我们需要在 Auth0 中创建一个 API，表示经过身份验证的服务，即：评论，详细信息和评级。要创建 API，请导航到 &lt;strong&gt;Auth0 Portal&lt;/strong&gt; &amp;gt; &lt;strong&gt;API&lt;/strong&gt; &amp;gt; &lt;strong&gt;Create API&lt;/strong&gt; ，如下图所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-3在-auth0-中创建新-api&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 3.在 Auth0 中创建新 API&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkg16se5j20m80ivq56_hu_41ad1045bc93de3a.webp 400w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkg16se5j20m80ivq56_hu_73f852136298db2d.webp 760w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkg16se5j20m80ivq56_hu_78b9f366149a4fd8.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkg16se5j20m80ivq56_hu_41ad1045bc93de3a.webp&#34;
               width=&#34;760&#34;
               height=&#34;645&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3.在 Auth0 中创建新 API
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这里的重要信息是稍后在脚本中使用的标识符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;观众：&lt;/strong&gt; {YOUR_AUDIENCE}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其余所需的详细信息位于 Auth0 Portal 中的 &lt;strong&gt;Applications&lt;/strong&gt; 下，然后选择自动创建的与 API 同名的 &lt;strong&gt;Test Application&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;请记下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;域名：&lt;/strong&gt; {YOUR_DOMAIN}&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户 ID：&lt;/strong&gt; {YOUR_CLIENT_ID}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Test Application 中向下滚动到&lt;strong&gt;Allowed Callback URLs&lt;/strong&gt;文本位置，在此字段中我们指定请求在完成身份验证后应被转发到的目的 URL。在我们的示例中，它是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[http://{EXTERNAL_IP}/callback](http://%7BEXTERNAL_IP%7D/callback)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;向&lt;strong&gt;Allowed Logout URLs&lt;/strong&gt;添加以下 URL：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[http://{EXTERNAL_IP}/logout](http://%7BEXTERNAL_IP%7D/logout)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来让我们开始处理前端。&lt;/p&gt;
&lt;h2 id=&#34;更新前端&#34;&gt;更新前端&lt;/h2&gt;
&lt;p&gt;检出 &lt;code&gt;[istio-mastery]&lt;/code&gt; 存储库中的&lt;strong&gt;auth0&lt;/strong&gt; 分支。在此分支中，前端包含代码更改以将用户转发到 Auth0 进行身份验证，并在对其他服务的请求中使用 JWT 令牌，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;analyzeSentence&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/sentiment&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Authorization&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`Bearer &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;auth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getAccessToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Access Token
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sentence&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textField&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了更新前端以使用你的租户的详细信息，请导航到该文件 &lt;code&gt;sa-frontend/src/services/Auth.js&lt;/code&gt; 并使用我们之前记下的值替换以下值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;clientID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{YOUR_CLIENT_ID}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;domain&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{YOUR_DOMAIN}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{YOUR_AUDIENCE}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;ingressIP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{EXTERNAL_IP}&amp;#39;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Used to redirect after authentication
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用程序已准备就绪，请在下面的命令中指定 docker 用户 ID，然后构建并部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker build -f sa-frontend/Dockerfile &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; -t &lt;span class=&#34;nv&#34;&gt;$DOCKER_USER_ID&lt;/span&gt;/sentiment-analysis-frontend:istio-auth0 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; sa-frontend
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ docker push &lt;span class=&#34;nv&#34;&gt;$DOCKER_USER_ID&lt;/span&gt;/sentiment-analysis-frontend:istio-auth0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; image deployment/sa-frontend &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; sa-frontend&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$DOCKER_USER_ID&lt;/span&gt;/sentiment-analysis-frontend:istio-auth0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;试一试应用吧！您将被转发到 Auth0，在那里您必须登录（或注册），然后跳转回原页面，以后就可以发出经过身份验证的请求了。同时，如果您尝试使用早期的 curl 命令，您将获得 401 状态代码，表明该请求是未授权的。&lt;/p&gt;
&lt;p&gt;让我们进行下一步，授权请求。&lt;/p&gt;
&lt;h2 id=&#34;使用-auth0-授权&#34;&gt;使用 Auth0 授权&lt;/h2&gt;
&lt;p&gt;身份验证使我们能够知道用户是谁，但我们需要授权才能知道他们可以访问的内容。Istio 也为此提供了工具！&lt;/p&gt;
&lt;p&gt;作为示例，我们将创建两组用户（如图 24 所示）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt; ：只能访问 SA-WebApp 和 SA-Frontend 服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;版主&lt;/strong&gt; ：可以访问所有三项服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-4授权概念&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 4.授权概念&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bki3dbfij20m80dcdhb_hu_b8ac67a008512be7.webp 400w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bki3dbfij20m80dcdhb_hu_cfd96512c4b6ae8f.webp 760w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bki3dbfij20m80dcdhb_hu_b2b970fecb6f12df.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bki3dbfij20m80dcdhb_hu_b8ac67a008512be7.webp&#34;
               width=&#34;760&#34;
               height=&#34;456&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.授权概念
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;要创建用户组，我们将使用 Auth0 授权扩展，然后使用 Istio，我们将为他们提供不同级别的访问权限。&lt;/p&gt;
&lt;h2 id=&#34;安装和配置-auth0-授权&#34;&gt;安装和配置 Auth0 授权&lt;/h2&gt;
&lt;p&gt;在 Auth0 门户中，导航到 Extensions 并安装“Auth0 Authorization”扩展。安装完成后，导航到授权扩展并通过单击右上角的租户并选择菜单选项“配置”进行配置。启用组，然后单击 &lt;strong&gt;发布规则&lt;/strong&gt; 按钮。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5激活令牌内容中的组&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 5.激活令牌内容中的组&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkiopfw9j20m807ndhc_hu_90aaf71b634e72cb.webp 400w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkiopfw9j20m807ndhc_hu_debfb12005a05bb.webp 760w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkiopfw9j20m807ndhc_hu_77b8ba238e639fb6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkiopfw9j20m807ndhc_hu_90aaf71b634e72cb.webp&#34;
               width=&#34;760&#34;
               height=&#34;261&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5.激活令牌内容中的组
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;创建组&#34;&gt;创建组&lt;/h2&gt;
&lt;p&gt;在授权扩展中，导航到 &lt;strong&gt;Groups&lt;/strong&gt; 并创建&lt;code&gt;Moderators&lt;/code&gt;组。同时，我们会将所有经过身份验证的用户视为常规用户，因此无需创建其他组。&lt;/p&gt;
&lt;p&gt;选择 Moderators 组，然后单击添加成员，添加您的主帐户。保留一些没有任何组的用户，以验证是否禁止访问。（您可以在 Auth0 Portal&amp;gt;用户&amp;gt;创建用户中手动注册新用户）&lt;/p&gt;
&lt;h2 id=&#34;将组声明添加到访问令牌&#34;&gt;将组声明添加到访问令牌&lt;/h2&gt;
&lt;p&gt;用户将添加到组中，但此信息不会反映在访问令牌中。为了保持 OpenID Connect 符合要求并同时返回组，我们需要向令牌&lt;a href=&#34;https://auth0.com/docs/tokens/access-token#add-custom-claims&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加自定义命名空间声明&lt;/a&gt;。这可以使用 Auth0 规则来完成。&lt;/p&gt;
&lt;p&gt;要在 Auth0 Portal 中创建规则，请导航到规则，单击“创建规则”并 从模板中 选择一个 &lt;strong&gt;空规则&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-6创建新规则&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 6.创建新规则&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkizxe7vj20m80c2wga_hu_d23c66143986c2bc.webp 400w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkizxe7vj20m80c2wga_hu_e5d7eea54dd3838d.webp 760w,
               /blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkizxe7vj20m80c2wga_hu_2974ccbdb81d10f5.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-part-2-authentication-authorization/61411417ly1g1bkizxe7vj20m80c2wga_hu_d23c66143986c2bc.webp&#34;
               width=&#34;760&#34;
               height=&#34;412&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6.创建新规则
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;粘贴下面的代码并保存名为“添加组声明”的新规则。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;accessToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://sa.io/group&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 此代码选择授权扩展中定义的第一个用户组，并将其作为自定义命名空间声明添加到访问令牌中。&lt;/p&gt;
&lt;p&gt;返回 &lt;strong&gt;规则页面&lt;/strong&gt; ，确认您按此顺序拥有两个角色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;auth0 授权扩展&lt;/li&gt;
&lt;li&gt;添加组声明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺序很重要，因为 &lt;code&gt;**auth0-authorization-extension**&lt;/code&gt; 规则会异步检索组字段，然后由第二个规则将其添加为命名空间声明，从而产生以下访问令牌：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;https://sa.io/group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Moderators&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://sentiment-analysis.eu.auth0.com/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;nt&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;google-oauth2|196405271625531691872&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;c1&#34;&gt;// [shortened for brevity]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，我们必须通过从&lt;code&gt;https://sa.io/group&lt;/code&gt;返回的访问令牌中的声明中提取组来配置 Envoy 代理以验证用户访问权限。这是下一节的主题，让我们继续前进。&lt;/p&gt;
&lt;h2 id=&#34;在-istio-中配置授权&#34;&gt;在 Istio 中配置授权&lt;/h2&gt;
&lt;p&gt;要获得授权，我们需要为 Istio 启用 RBAC。为此，请将以下配置应用于 Mesh：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rbac.istio.io/v1alpha1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RbacConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ON_WITH_INCLUSION&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inclusion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                                   &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;sa-frontend.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;sa-web-app.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;sa-feedback.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;仅为“包含”字段中指定的服务和/或命名空间启用 RBAC。&lt;/li&gt;
&lt;li&gt;包括指定的服务列表。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过执行以下命令应用配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/security/enable-rbac.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rbacconfig.rbac.istio.io/default created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，所有服务都需要基于角色的访问控制，换句话说，对所有服务的访问都会被拒绝，并响应“RBAC: access denied”。启用对授权用户的访问权限将成为下一节的主题。&lt;/p&gt;
&lt;h2 id=&#34;配置常规用户访问&#34;&gt;配置常规用户访问&lt;/h2&gt;
&lt;p&gt;所有用户都应该能够访问 &lt;strong&gt;SA-Frontend&lt;/strong&gt; 和 &lt;strong&gt;SA-WebApp&lt;/strong&gt; 服务，这是通过以下 Istio 的资源实现的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ServiceRole：&lt;/strong&gt; 指定用户拥有的权限&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ServiceRoleBinding：&lt;/strong&gt; 指定 ServiceRole 应用于谁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于普通用户，我们将允许访问指定的服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rbac.istio.io/v1alpha1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;regular-user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;sa-frontend.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;sa-web-app.default.svc.cluster.local&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;strong&gt;常规用户绑定&lt;/strong&gt;，我们将 ServiceRole 应用于我们页面的所有访问者：&lt;/p&gt;
&lt;p&gt;哦！所有用户这意味着未经身份验证的用户可以使用 SA WebApp 吗？不，该策略仍将检查 JWT 令牌的有效性。😉&lt;/p&gt;
&lt;p&gt;应用配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/security/user-role.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;servicerole.rbac.istio.io/regular-user created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;servicerolebinding.rbac.istio.io/regular-user-binding created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置版主用户访问权限&#34;&gt;配置版主用户访问权限&lt;/h2&gt;
&lt;p&gt;对于我们的版主，我们希望启用对所有服务的访问：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rbac.istio.io/v1alpha1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mod-user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但我们只想将其绑定到 Access Token 声明 &lt;code&gt;https://sa.io/group&lt;/code&gt; 等于 Moderators 值的用户。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rbac.istio.io/v1alpha1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceRoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mod-user-binding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;request.auth.claims[https://sa.io/group]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Moderators&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ServiceRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;mod-user&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要应用配置，请执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/security/mod-role.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;servicerole.rbac.istio.io/mod-user created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;servicerolebinding.rbac.istio.io/mod-user-binding created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于 Envoy 中的缓存，授权规则可能需要几分钟才能生效，但在此之后，您将能够验证用户和版主具有不同的访问级别。&lt;/p&gt;
&lt;h2 id=&#34;第-2-部分---摘要&#34;&gt;第 2 部分 - 摘要&lt;/h2&gt;
&lt;p&gt;您是否真的见过任何更简单，零工作的可扩展和安全的身份验证和授权概念？&lt;/p&gt;
&lt;p&gt;仅使用三个 Istio 资源（RbacConfig，ServiceRole 和 ServiceRoleBinding），我们可以通过细粒度控制对最终用户访问我们服务进行身份验证和授权。&lt;/p&gt;
&lt;p&gt;此外，我们将这些问题从我们的服务中转移到我们的 Envoy：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少可能出现安全问题和漏洞的样板代码，&lt;/li&gt;
&lt;li&gt;减少因为忘记标记注解而暴露服务端点的愚蠢状况。&lt;/li&gt;
&lt;li&gt;每次添加新角色或权限时，都会消除更新所有服务的连锁效应。&lt;/li&gt;
&lt;li&gt;保持简单，安全和快速地添加新服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Istio&lt;/strong&gt; 使您的团队能够再次将资源集中在提供商业价值上，而不需要为服务的周边任务进行处理，让微服务回归“微型”的本质。&lt;/p&gt;
&lt;p&gt;本文为您提供了在实际项目中开始使用 Istio 的知识和实践。&lt;/p&gt;
&lt;p&gt;借此机会，我很感谢你加入我的这次 Istio 探索之旅，这肯定不容易，你坚持下去就已经很棒了。我十分希望在下面的评论中看到您的想法，你可以随时在 &lt;a href=&#34;https://twitter.com/rinormaloku&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; 或我的主页 &lt;a href=&#34;https://rinormaloku.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rinormaloku.com&lt;/a&gt; 上与我联系。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Envoy Proxy 构建控制平面指南</title>
      <link>https://cloudnativecn.com/blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/</link>
      <pubDate>Wed, 06 Mar 2019 12:17:02 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://medium.com/solo-io/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh-badb6c36a2af&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编者案&#34;&gt;编者案&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Envoy 作为最受欢迎的早期网络组件，现在已经可以说是云原生架构中的通用数据平面。本文作者指引我们更方便的使用 Envoy，及其定制控制平面，作者通过收集到的数据给出定制控制平面不同的意见，非常中肯，后续系列会更深入，欢迎关注该系列文章。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 最近成为一个受欢迎的网络组件。几年前 Matt Klein &lt;a href=&#34;https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;写了一篇博客&lt;/a&gt; ，讨论了 Envoy 的动态配置 API，以及 Envoy 发展的历史和动机。他称该博客为“通用数据平面 API”。由于许多其他项目采用&lt;a href=&#34;https://www.envoyproxy.io/community&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 作为其产品的核心组件，因此对于应用程序/L7 网络解决方案而言，毫不夸张地说，“Envoy 已成为云原生架构中的通用数据平面”，而不仅仅是简单建立了 API 标准。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfoc0c9yj20dm07faap_hu_af867cf75f448ad1.webp 400w,
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfoc0c9yj20dm07faap_hu_102061eca2ca4a1e.webp 760w,
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfoc0c9yj20dm07faap_hu_f18c8eb4dfe5df9a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfoc0c9yj20dm07faap_hu_af867cf75f448ad1.webp&#34;
               width=&#34;490&#34;
               height=&#34;267&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;此外，由于 &lt;a href=&#34;https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 的通用数据平面 API&lt;/a&gt; ，我们已经看到了许多 &lt;em&gt;管理层&lt;/em&gt; 的实现，用于配置和驱动基于 Envoy 的基础架构。我们将深入探讨为 Envoy 构建控制平面所需的内容，以便您可以使用此信息来评估哪种类型的基础架构最适合您的组织和使用情况。因为这是一个广泛的主题，我们将在未来几天发布的多部系列博客中解决它。&lt;/p&gt;
&lt;p&gt;在EnvoyCon/KubeCon上 有一些 &lt;a href=&#34;https://blog.envoyproxy.io/envoycon-recap-579d53576511&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;精彩的演讲&lt;/a&gt; ，一些组织分享了他们采用 Envoy 的经验，包括他们如何构建自己的控制平面。人们选择自己建立控制平面的一些原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现有的解决方案，建立在已有不同数据平面的控制平面，需要改造 Envoy（与已有方案且冲突）&lt;/li&gt;
&lt;li&gt;为没有任何现有开源或其他 Envoy 控制平面（即 VM，AWS ECS 等）的基础架构构建（商业公司必须重新建方案）&lt;/li&gt;
&lt;li&gt;不需要使用 Envoy 的所有功能; 只是一个子集（功能太多，需要精简）&lt;/li&gt;
&lt;li&gt;首选适用于Envoy配置的特定于域的API/对象模型，以更好地适应其工作流程/世界观（与已有方案冲突）&lt;/li&gt;
&lt;li&gt;当其组织准备部署时，暂时没有成熟的控制平面（走的太快）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mforyrc1j20go0digsn_hu_9f2c9f138ccb8477.webp 400w,
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mforyrc1j20go0digsn_hu_ae751db978262548.webp 760w,
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mforyrc1j20go0digsn_hu_5c904034cfb1050.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mforyrc1j20go0digsn_hu_9f2c9f138ccb8477.webp&#34;
               width=&#34;600&#34;
               height=&#34;486&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;若是因为一些早期采用者建立了他们自己的定制控制平面，并不意味着你现在也要自己重新开发控制平面。因为 Envoy 构建控制平面的项目在去年已经成熟了很多，若你决定重新开发另一个控制平面前你应该探索使用它们。其次，正如 Datawire 的人们发现的那样，&lt;a href=&#34;https://twitter.com/danielbryantuk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;丹尼尔·布莱恩特&lt;/a&gt; 最近明确表示， &lt;a href=&#34;https://www.infoq.com/articles/ambassador-api-gateway-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为 Envoy 建造一个控制平面并不适合胆小的人&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我参与&lt;/a&gt; 了 &lt;a href=&#34;https://github.com/istio/istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;几个&lt;/a&gt;为 Envoy 构建控制平面的&lt;a href=&#34;https://github.com/solo-io/gloo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开源项目&lt;/a&gt; 。例如， &lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gloo&lt;/a&gt; 是 &lt;a href=&#34;https://medium.com/solo-io/announcing-gloo-the-function-gateway-3f0860ef6600&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一个功能网关&lt;/a&gt; ，可以充当非常强大的 Kubernetes 入口，API 网关或功能网关，以简化单体应用到微服务的过渡。Gloo &lt;a href=&#34;https://gloo.solo.io/introduction/architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有一个 Envoy 的控制平面&lt;/a&gt; ，我们可以在这一系列的帖子中作为一个例子来说明如何构建一个简单的抽象，允许在你需要的控制点上实现可插拔性和可扩展性。您可以用作参考的其他可靠的控制平面实现是 &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/heptio/contour&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heptio Contour&lt;/a&gt; 我们将在整个系列博客中使用这些作为很好的例子。如果不出意外，您可以了解 Envoy 控制平面存在哪些选项，并使用它来指导您的实施，如果您必须走这条路。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfpbj0hgj21200a840t_hu_778667b9578799e6.webp 400w,
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfpbj0hgj21200a840t_hu_c19beec3ae162fa3.webp 760w,
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfpbj0hgj21200a840t_hu_7fa7d2a7a05755f2.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfpbj0hgj21200a840t_hu_778667b9578799e6.webp&#34;
               width=&#34;760&#34;
               height=&#34;204&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这个博客系列中，我们将看看以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用动态更新机制的 Envoy 路由、服务发现和其他配置&lt;/li&gt;
&lt;li&gt;确定构成控制平面的组件，包括后端存储、服务发现 API、安全组件等。&lt;/li&gt;
&lt;li&gt;为您和组织最适合的用例，建立任何特定于域的配置对象和 API&lt;/li&gt;
&lt;li&gt;考虑如何最好地将控制平面插入您需要的地方&lt;/li&gt;
&lt;li&gt;部署各种控制平面组件的选项&lt;/li&gt;
&lt;li&gt;通过控制平面的测试工具进行思考&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了开始这个系列，我们来看看使用 Envoy 的动态配置 API 在运行时更新 Envoy 以处理拓扑和部署的变化。&lt;/p&gt;
&lt;h2 id=&#34;使用-xds-api-动态配置-envoy&#34;&gt;使用 xDS API 动态配置 Envoy&lt;/h2&gt;
&lt;p&gt;构建在 Envoy 之上的主要优势之一是它的数据平面 API。使用数据平面 API，我们可以 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/intro/arch_overview/dynamic_configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;动态配置 Envoy 的大部分重要运行时设置&lt;/a&gt; 。Envoy 通过其 xDS API 的配置 &lt;a href=&#34;https://blog.envoyproxy.io/embracing-eventual-consistency-in-soa-networking-32a5ee5d443d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最终一致的&lt;/a&gt;  - 即无法影响集群中所有代理的“原子更新”。当控制平面具有配置更新时，它通过 xDS API 使它们可用于数据平面代理，并且每个代理将彼此独立地应用这些更新。&lt;/p&gt;
&lt;p&gt;以下是我们可以通过 xDS 动态配置的 Envoy 运行时模型的部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/listeners/lds#config-listeners-lds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;监听器发现服务 API -&lt;/a&gt; 用于发布监听流量的端口的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/listeners/lds#config-listeners-lds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LDS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/api-v2/api/v2/eds.proto#envoy-api-file-envoy-api-v2-eds-proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;端点发现服务 API-&lt;/a&gt; 用于服务发现的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/api-v2/api/v2/eds.proto#envoy-api-file-envoy-api-v2-eds-proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EDS&lt;/a&gt; ，&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/http_conn_man/rds#config-http-conn-man-rds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由发现服务 API-RDS&lt;/a&gt; 用于流量路由决策&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/cluster_manager/cds#config-cluster-manager-cds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;集群发现服务 -&lt;/a&gt; 用于后端服务的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/cluster_manager/cds#config-cluster-manager-cds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CDS&lt;/a&gt; ，我们可以将流量路由到该服务&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/secret&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;secret 发现服务 -&lt;/a&gt; 用于分发 Secret 的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/secret&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SDS&lt;/a&gt; （证书和密钥）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfpqxtkyj20p00gm0yz_hu_8a93e0b44fd287f.webp 400w,
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfpqxtkyj20p00gm0yz_hu_7d6376accf08d9c8.webp 760w,
               /blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfpqxtkyj20p00gm0yz_hu_435bceb2ac0c13fd.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/guidance-for-building-a-control-plane-to-manage-envoy-proxy-at-the-edge-as-a-gateway-or-in-a-mesh/61411417ly1g0mfpqxtkyj20p00gm0yz_hu_8a93e0b44fd287f.webp&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;API 使用 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/overview/v2_overview#config-overview-v2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proto3 Protocol Buffers&lt;/a&gt; 定义，甚至还有一些参考实现可用于引导您自己的控制平面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/go-control-plane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go 控制平面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/java-control-plane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;java 的控制平面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然这些领域（LDS/EDS/RDS/CDS/SDS，一起“xDS”）中的每一个都是动态可配置的，但这并不意味着您必须动态配置所有内容。您可以拥有静态定义的部分组合以及动态更新的部分组合。例如，要实现一种 &lt;code&gt;endpoints&lt;/code&gt; 预期为动态但 &lt;code&gt;clusters&lt;/code&gt; 在部署时众所周知 的服务发现类型，您可以静态定义 &lt;code&gt;clusters&lt;/code&gt; 并使用 Envoy 中 的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/api-v2/api/v2/eds.proto#envoy-api-file-envoy-api-v2-eds-proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;端点发现服务&lt;/a&gt; 。如果您不确定在部署时将使用哪些 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/intro/arch_overview/terminology&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上游集群，&lt;/a&gt; 则可以使用 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/cluster_manager/cds#config-cluster-manager-cds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;集群发现服务&lt;/a&gt; 动态地找到那些。关键是，您可以构建一个工作流程和流程，静态配置您需要的部分，同时使用动态 xDS 服务来发现运行时所需的部分。您看到不同的控制平面实现的原因之一并不是每个人都有一个完全动态和可互换的环境，其中所有部分都应该是动态的。在给定现有约束和可用工作流程的情况下，采用最适合您系统的动态级别。&lt;/p&gt;
&lt;p&gt;在 Gloo 的情况下，我们使用&lt;a href=&#34;https://github.com/solo-io/gloo/blob/ac3bddf202423b297fb909eb6eff498745a8c015/projects/gloo/pkg/xds/envoy.go#L76&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 go-control-plane 的控制平面&lt;/a&gt; 来实现 xDS API 以服务 Envoy 的动态配置。与 Heptio Contour 一样，Istio 也使用此实现。此控制平面 API 利用 &lt;a href=&#34;https://grpc.io/docs/guides/concepts.html#server-streaming-rpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC 流&lt;/a&gt; 调用和存根 API，因此您可以使用实现填充它。 &lt;a href=&#34;https://github.com/turbinelabs/rotor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Turbine Labs’Rotor 项目&lt;/a&gt; 是另一个不幸被弃用但可以用来学习的&lt;a href=&#34;https://github.com/turbinelabs/rotor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;项目&lt;/a&gt; 。这是将 Envoy 的数据平面 API 与控制平面集成的高效方法。&lt;/p&gt;
&lt;p&gt;gRPC 流不是更新 Envoy 配置的唯一方式。在&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.5.0/api-v1/api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;以前版本的 Envoy xDS API 中&lt;/a&gt; ，轮询是确定新配置是否可用的唯一选项。虽然这是可以接受的，并且符合“最终一致”配置更新的标准，但它在网络和计算使用方面效率都较低。也可能难以适当地调整轮询配置以减少浪费的资源。&lt;/p&gt;
&lt;p&gt;最后，一些 Envoy 管理实施选择生成 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/overview/v2_overview#static&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;静态 Envoy 配置文件，&lt;/a&gt; 并定期替换 Envoy 磁盘上的配置文件，然后执行 &lt;a href=&#34;https://blog.envoyproxy.io/envoy-hot-restart-1d16b14555b5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 进程&lt;/a&gt; 的 &lt;a href=&#34;https://blog.envoyproxy.io/envoy-hot-restart-1d16b14555b5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;热重新加载&lt;/a&gt; 。在高度动态的环境中（如 Kubernetes，但实际上是任何基于 ephemeral-compute 的平台），此文件生成，交付，热重启等的管理可能变得难以处理。Envoy 最初是在一个执行此类更新的环境中运行的（Lyft，它是在哪里创建的），但它们逐渐转向使用 xDS API。&lt;/p&gt;
&lt;h2 id=&#34;takeaway&#34;&gt;Takeaway&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/solo-io/gloo/graphs/contributors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gloo 团队&lt;/a&gt; 认为使用 gRPC 流和 xDS API 是实现 Envoy 动态配置和控制的理想方式。同样，如果您不需要，并非所有 Envoy 配置都应动态提供，但是如果您在高度动态的环境中运行（例如，Kubernetes），则动态配置 Envoy 的选项至关重要。其他环境可能没有这种需求。无论哪种方式，动态的 g​​RPC 流 API 都是理想的选择。这种方法的一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件驱动的配置更新; 当配置在控制平面中可用时，配置被推送到 Envoy&lt;/li&gt;
&lt;li&gt;无需轮询更改&lt;/li&gt;
&lt;li&gt;没有必要热加载 Envoy&lt;/li&gt;
&lt;li&gt;没有中断流量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么&lt;/h2&gt;
&lt;p&gt;在第一部分中，我们通过介绍 xDS API 以及为 Envoy 提供动态配置的不同选项，为如何为 Envoy 构建控制平面建立了一些基本背景。在接下来的部分中，将在几天内发布，将涵盖将您的控制平面分解为可部署组件，确定您需要哪些部分，特定于域的配置对象模型，以及如何考虑控件的可插拔性平面。关注 twitter（ &lt;a href=&#34;https://twitter.com/christianposta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@christianposta&lt;/a&gt; ， &lt;a href=&#34;https://twitter.com/soloio_inc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ solio_in&lt;/a&gt; ）或博客（ &lt;a href=&#34;https://medium.com/solo-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://medium.com/solo-io&lt;/a&gt; ）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Istio 打造微服务（第 1 部分）</title>
      <link>https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/</link>
      <pubDate>Wed, 27 Feb 2019 11:35:38 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1gyo9j20m80bq754_hu_5f517c0ee6c9b245.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1gyo9j20m80bq754_hu_28c101d37a05a1af.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1gyo9j20m80bq754_hu_184ae9f97196ce15.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1gyo9j20m80bq754_hu_5f517c0ee6c9b245.webp&#34;
               width=&#34;760&#34;
               height=&#34;401&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Istio&lt;/strong&gt; 是一个由 Google，IBM 和 Lyft 团队合作开发的开源项目，它提供了基于微服务的应用程序复杂性的解决方案，仅举几例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt; ：超时，重试，负载均衡，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性：&lt;/strong&gt; 最终用户身份验证和授权，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可观察性：&lt;/strong&gt; 跟踪，监控和记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有这些都可以在应用程序层中解决，但是您的服务不再是“微型”，相对于提供业务价值的资源，实现这些的所有额外工作都是公司资源的压力。我们来举个例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PM：添加反馈功能需要多长时间？&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;开发：两个冲刺（敏捷开发中的术语，一般一个冲刺周期 30 天）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;PM：什么&amp;hellip;&amp;hellip;？那只是一个 CRUD！&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;开发：创建 CRUD 很容易，但我们需要对用户和服务进行身份验证和授权。而且由于网络不可靠，我们需要在客户端实施重试和熔断器，并确保我们不会占用整个系统，我们需要 Timeout 和 Bulkheads，另外还要检测我们需要监控的问题，跟踪[&amp;hellip; ]&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;PM：那么我们就把它放在产品服务中吧。哎呀！&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;你明白了，必须满足所有形式才可以为我们添加一项巨大的服务（有很多不是业务功能的代码）。在本文中，我们将展示 Istio 如何从我们的服务中删除所有上述交叉问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1微服务的形式构成&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 1.微服务的形式构成&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1x75cj20ai081t8l_hu_f1d12f072b059cab.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1x75cj20ai081t8l_hu_47c895f9a701c678.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1x75cj20ai081t8l_hu_7806240f2c98b7e5.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1x75cj20ai081t8l_hu_f1d12f072b059cab.webp&#34;
               width=&#34;378&#34;
               height=&#34;289&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1.微服务的形式构成
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文假设您具有 Kubernetes 的知识。如果不是这种情况，我建议您阅读 &lt;a href=&#34;https://medium.freecodecamp.org/learn-kubernetes-in-under-3-hours-a-detailed-guide-to-orchestrating-containers-114ff420e882&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我对 Kubernetes 的介绍&lt;/a&gt;，然后继续阅读本文。&lt;/p&gt;
&lt;h2 id=&#34;关于-istio&#34;&gt;关于 Istio&lt;/h2&gt;
&lt;p&gt;在没有 Istio 的世界中，一个服务向另一个服务直接发出请求，并且在发生故障的情况下，服务需要通过重试，超时，打开熔断器等来处理它。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-kubernetes-中的网络流量&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 2. Kubernetes 中的网络流量&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1eu2vj20m8054dg4_hu_e5d9dbc74b54693d.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1eu2vj20m8054dg4_hu_39e66ef6834812bd.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1eu2vj20m8054dg4_hu_1b3f2a66aeb54b56.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1eu2vj20m8054dg4_hu_e5d9dbc74b54693d.webp&#34;
               width=&#34;760&#34;
               height=&#34;175&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2. Kubernetes 中的网络流量
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了解决这个问题，Istio 通过与服务完全分离，并通过拦截所有网络通信来提供一种巧妙的解决方案。这样做可以实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fault Tolerance&lt;/strong&gt;  - 使用响应状态代码，它可以在请求失败并重试时理解。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Canary Rollouts&lt;/strong&gt;  - 仅将指定百分比的请求转发到新版本的服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;监控和指标&lt;/strong&gt;  - 服务响应所花费的时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跟踪和可观察性&lt;/strong&gt;  - 它在每个请求中添加特殊 header，并在集群中跟踪它们。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;  - 提取 JWT 令牌并对用户进行身份验证和授权。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仅举几例（仅举几例），让您感兴趣！我们来看一些技术细节吧！&lt;/p&gt;
&lt;h2 id=&#34;istio-的架构&#34;&gt;Istio 的架构&lt;/h2&gt;
&lt;p&gt;Istio 拦截所有网络流量，并通过在每个 pod 中注入智能代理作为 sidecar 来应用一组规则。启用所有功能的代理包括 &lt;strong&gt;数据平面&lt;/strong&gt;，并且这些代理可由&lt;strong&gt;控制平面&lt;/strong&gt; 动态配置。&lt;/p&gt;
&lt;h2 id=&#34;数据平面&#34;&gt;数据平面&lt;/h2&gt;
&lt;p&gt;注入的代理使 Istio 能够轻松满足我们的要求。举个例子，我们来看看重试和熔断器功能。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-3envoy-如何实现-retries-和-circuitbreaking&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 3.Envoy 如何实现 Retries 和 CircuitBreaking&#34;
           src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu34d0gg20m808a1kx.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3.Envoy 如何实现 Retries 和 CircuitBreaking
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;总结一下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Envoy 将请求发送到服务 B 的第一个实例，但它失败了。&lt;/li&gt;
&lt;li&gt;Envoy sidecar 重试。（1）&lt;/li&gt;
&lt;li&gt;返回对调用代理的失败请求。&lt;/li&gt;
&lt;li&gt;这将打开熔断器并在后续请求中调用下一个服务。（2）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这意味着您不必使用另一个重试库，您不必在编程语言 X，Y 或 Z 中开发自己的 Circuit Breaking 和 Service Discovery 实现。所有这些都是开箱即用的。这些功能都是通过 Istio 来实现，你不需要更改代码。&lt;/p&gt;
&lt;p&gt;很好！现在你想加入 Istio 的航行，但你仍然有一些疑虑，一些悬而未决的问题。这是一个一刀切的方案，你对它持怀疑态度，因为它总是最终成为一刀切的无解方案！&lt;/p&gt;
&lt;p&gt;你最终低声说了这个问题：“这是可配置的吗？”&lt;/p&gt;
&lt;p&gt;欢迎我的朋友来巡航，我们将为大家介绍一下控制平面。&lt;/p&gt;
&lt;h2 id=&#34;控制平面&#34;&gt;控制平面&lt;/h2&gt;
&lt;p&gt;由三个组件组成： &lt;strong&gt;Pilot&lt;/strong&gt;、 &lt;strong&gt;Mixer&lt;/strong&gt; 和 &lt;strong&gt;Citadel&lt;/strong&gt;，它们组合使用 Envoys 来路由流量，实施策略和收集遥测数据。如下图所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-4与数据平面相关的控制平面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 4.与数据平面相关的控制平面&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2b2mqj20m80eogn9_hu_669cb3fc8cf37ca9.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2b2mqj20m80eogn9_hu_51a46ed740766f9c.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2b2mqj20m80eogn9_hu_273601cabf980a34.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2b2mqj20m80eogn9_hu_669cb3fc8cf37ca9.webp&#34;
               width=&#34;760&#34;
               height=&#34;502&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4.与数据平面相关的控制平面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Envoy（即数据平面）使用由 Istio 定义的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 自定义资源定义&lt;/a&gt; 进行配置。这意味着对你而言，它只是另一个具有熟悉语法的 Kubernetes 资源。创建后将由&lt;strong&gt;控制平面&lt;/strong&gt;获取，并将其应用于 Envoy。&lt;/p&gt;
&lt;h2 id=&#34;服务与-istio-的关系&#34;&gt;服务与 Istio 的关系&lt;/h2&gt;
&lt;p&gt;我们描述了 Istio 与我们服务的关系，但我们反过来思考一下，我们的服务与 Istio 的关系是什么？&lt;/p&gt;
&lt;p&gt;坦率地说，我们的服务对 Istio 的存在有着尽可能多的了解，就像鱼对水一样，他们会问自己“这到底是什么水？”。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-victoria-dimitrakopoulos&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Victoria Dimitrakopoulos&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1l39rj20m809tqd9_hu_1ae92d9515f0d015.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1l39rj20m809tqd9_hu_cfd198f0662866fe.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1l39rj20m809tqd9_hu_2c3a867ceb03ba03.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1l39rj20m809tqd9_hu_1ae92d9515f0d015.webp&#34;
               width=&#34;760&#34;
               height=&#34;335&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Victoria Dimitrakopoulos
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这意味着您可以选择一个工作集群，在部署了 Istio 的组件后，其中的服务将继续工作，并且以相同的方式，您可以删除组件，一切都会很好。可以理解的是，您将失去 Istio 提供的功能。&lt;/p&gt;
&lt;p&gt;我们已经有足够的理论，下面让我们把这些理论付诸实践！&lt;/p&gt;
&lt;h2 id=&#34;istio-实践&#34;&gt;Istio 实践&lt;/h2&gt;
&lt;p&gt;Istio 至少需要一个具有 4 个 vCPU 和 8 GB RAM 的 Kubernetes 集群。要快速设置集群并跟进本文，我建议使用 Google 云端平台，它为新用户提供 &lt;a href=&#34;https://console.developers.google.com/billing/freetrial?hl=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;300 美元的免费试用版&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;使用 Kubernetes 命令行工具创建集群并配置访问后，我们已准备好使用 Helm Package 管理器安装 Istio。&lt;/p&gt;
&lt;h2 id=&#34;安装-helm&#34;&gt;安装 Helm&lt;/h2&gt;
&lt;p&gt;按照&lt;a href=&#34;https://docs.helm.sh/using_helm/#installing-the-helm-client&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;中的说明在您的计算机上安装 Helm 客户端。我们将在下一节中使用它来生成 Istio 安装模板。&lt;/p&gt;
&lt;h2 id=&#34;安装-istio&#34;&gt;安装 Istio&lt;/h2&gt;
&lt;p&gt;从&lt;a href=&#34;https://github.com/istio/istio/releases/tag/1.0.5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最新版本&lt;/a&gt;下载 Istio 的资源，将内容提取到一个我们将称之为的目录中&lt;code&gt;[istio-resources]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;要轻松识别 Istio 资源 &lt;code&gt;istio-system&lt;/code&gt;，请在 Kubernetes 集群中创建命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl create namespace istio-system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后进入到 &lt;code&gt;[istio-resources]&lt;/code&gt; 目录并执行以下命令来完成安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ helm template install/kubernetes/helm/istio &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; --set global.mtls.enabled &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; --set tracing.enabled &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; --set kiali.enabled &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; --set grafana.enabled &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt; --namespace istio-system &amp;gt; istio.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的命令将 Istio 的核心组件输出到文件 &lt;code&gt;istio.yaml&lt;/code&gt; 中。我们使用以下参数自定义模板：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;global.mtls.enabled&lt;/strong&gt; 设置为 false 以保持引入的重点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tracing.enabled&lt;/strong&gt; 允许使用 jaeger 跟踪请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kiali.enabled&lt;/strong&gt; 在我们的集群中安装 Kiali 以实现服务和流量的可视化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;grafana.enabled&lt;/strong&gt; 安装 Grafana，为了收集指标的可视化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过执行以下命令应用生成的资源&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f istio.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这标志着我们集群中 Istio 安装的完成！等到&lt;code&gt;istio-system&lt;/code&gt;命名空间中的所有 pod 都处于 Running 或 Completed 状态，执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们已准备好继续下一部分，我们将在其中启动并运行示例应用程序。&lt;/p&gt;
&lt;h2 id=&#34;sentiment-analysis-应用架构&#34;&gt;Sentiment Analysis 应用架构&lt;/h2&gt;
&lt;p&gt;我们将使用&lt;a href=&#34;https://medium.freecodecamp.org/learn-kubernetes-in-under-3-hours-a-detailed-guide-to-orchestrating-containers-114ff420e882&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 简介文章&lt;/a&gt;中使用的相同微服务应用程序，它足以在实践中展示 Istio 的功能。&lt;/p&gt;
&lt;p&gt;该应用程序由四个微服务组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SA-Frontend 服务&lt;/strong&gt; ：提供前端 Reactjs 应用程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SA-WebApp 服务&lt;/strong&gt; ：处理对 Sentiment Analysis 的请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SA-Logic 服务&lt;/strong&gt; ：执行 sentiment Analysis。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SA 反馈服务&lt;/strong&gt; ：接收用户关于分析准确性的反馈。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-6-情感分析微服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 6 情感分析微服务&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2q2ppj20m80apmxy_hu_f4938bf54b0c768f.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2q2ppj20m80apmxy_hu_1742b977a327e0f8.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2q2ppj20m80apmxy_hu_3baa3afed947a840.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2q2ppj20m80apmxy_hu_f4938bf54b0c768f.webp&#34;
               width=&#34;760&#34;
               height=&#34;366&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6 情感分析微服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在图 6 中，除了服务之外，我们还看到 Ingress Controller 在 Kubernetes 中将传入的请求路由到适当的服务，Istio 使用了一个名为 Ingress Gateway 的类似概念，将在本文的后续部分中介绍。&lt;/p&gt;
&lt;h2 id=&#34;使用-istio-proxies-运行应用程序&#34;&gt;使用 Istio Proxies 运行应用程序&lt;/h2&gt;
&lt;p&gt;要跟进本文，请克隆存储库 istio-mastery（ &lt;a href=&#34;https://github.com/rinormaloku/istio-mastery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rinormaloku/istio-mastery&lt;/a&gt; ），其中包含 Kubernetes 和 Istio 的应用程序和清单。&lt;/p&gt;
&lt;h3 id=&#34;sidecar-injection&#34;&gt;Sidecar Injection&lt;/h3&gt;
&lt;p&gt;注入是 &lt;strong&gt;自动&lt;/strong&gt; 或 &lt;strong&gt;手动&lt;/strong&gt; 完成的。要启用自动 sidecar 注入，我们需要 &lt;code&gt;istio-injection=enabled&lt;/code&gt; 通过执行以下命令 来标记命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl label namespace default istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;namespace/default labeled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从现在开始，部署到默认命名空间的每个 pod 都将获得注入的 sidecar。为了验证这一点，我们通过进入到 &lt;code&gt;[istio-mastery]&lt;/code&gt; 存储库的根文件夹 并执行以下命令 来部署示例应用程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/kube
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;persistentvolumeclaim/sqlite-pvc created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.extensions/sa-feedback created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/sa-feedback created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.extensions/sa-frontend created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/sa-frontend created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.extensions/sa-logic created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/sa-logic created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.extensions/sa-web-app created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/sa-web-app created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在部署的服务中，通过执行以下命令 &lt;code&gt;kubectl get pods&lt;/code&gt; 验证 pod 有两个容器（service 和 sidecar），并确保准备好后，我们看到值“ &lt;strong&gt;2/2&lt;/strong&gt; ”表示两个容器都在运行。如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                           READY     STATUS    RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-feedback-55f5dc4d9c-c9wfv   2/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          12m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-frontend-558f8986-hhkj9     2/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          12m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-logic-568498cb4d-2sjwj      2/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          12m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-logic-568498cb4d-p4f8c      2/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          12m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-web-app-599cf47c7c-s7cvd    2/2       Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;          12m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;视觉呈现在图 7 中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-7其中一个-pod-中的-envoy-代理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 7.其中一个 Pod 中的 Envoy 代理&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2ti9mj209n0dtwf8_hu_a98357f15e2c396a.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2ti9mj209n0dtwf8_hu_ca3ee187eae9a222.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2ti9mj209n0dtwf8_hu_482819b4db0f755f.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2ti9mj209n0dtwf8_hu_a98357f15e2c396a.webp&#34;
               width=&#34;347&#34;
               height=&#34;497&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7.其中一个 Pod 中的 Envoy 代理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;现在，应用程序启动并运行，我们需要允许传入流量到达我们的应用程序。&lt;/p&gt;
&lt;h2 id=&#34;入口网关&#34;&gt;入口网关&lt;/h2&gt;
&lt;p&gt;允许流量进入集群的最佳做法是通过 Istio 的 &lt;strong&gt;入口网关&lt;/strong&gt; 将其自身置于集群的边缘，并在传入流量上实现 Istio 的功能，如路由，负载均衡，安全性和监控。&lt;/p&gt;
&lt;p&gt;在 Istio 的安装过程中， &lt;code&gt;Ingress Gateway&lt;/code&gt; 组件和在外部公开它的服务已安装到集群中。要获取服务外部 IP，请执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get svc -n istio-system -l &lt;span class=&#34;nv&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ingressgateway
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                   TYPE           CLUSTER-IP     EXTERNAL-IP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ingressgateway   LoadBalancer   10.0.132.127   13.93.30.120
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在本文的后续部分中，我们将访问此 IP 上的应用程序（称为 EXTERNAL-IP），为方便起见，通过执行以下命令将其保存在变量中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nv&#34;&gt;EXTERNAL_IP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get svc -n istio-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;istio-ingressgateway &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].status.loadBalancer.ingress[0].ip}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您在浏览器中访问此 IP 并且您将收到服务不可用错误，则 &lt;strong&gt;默认情况下 Istio 将阻止任何传入流量&lt;/strong&gt;，直到我们定义网关。&lt;/p&gt;
&lt;h2 id=&#34;网关资源&#34;&gt;网关资源&lt;/h2&gt;
&lt;p&gt;网关是在我们的集群中安装 Istio 时定义的 Kubernetes 自定义资源定义，使我们能够指定我们希望允许传入流量的端口，协议和主机。&lt;/p&gt;
&lt;p&gt;在我们的场景中，我们希望允许所有主机在端口 80 上使用 HTTP 流量。达到以下定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;除了选择器&lt;code&gt;istio：ingressgateway&lt;/code&gt;之外，所有配置都是不需要说明的。使用此选择器，我们可以指定应用配置的 Ingress Gateway，在我们的示例中，它是安装在 Istio 设置上的默认入口网关控制器。&lt;/p&gt;
&lt;p&gt;通过执行以下命令应用配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/http-gateway.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gateway.networking.istio.io/http-gateway created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;网关现在允许在端口 80 中进行访问，但它不知道在何处路由请求。这需要使用&lt;strong&gt;Virtual Service&lt;/strong&gt;来实现。&lt;/p&gt;
&lt;h2 id=&#34;virtualservice-资源&#34;&gt;VirtualService 资源&lt;/h2&gt;
&lt;p&gt;VirtualService 指示 Ingress Gateway 如何路由允许进入集群的请求。&lt;/p&gt;
&lt;p&gt;对于我们度过即将到来的应用程序请求 &lt;strong&gt;HTTP 网关&lt;/strong&gt; 必须被路由到 &lt;code&gt;sa-frontend&lt;/code&gt;，&lt;code&gt;sa-web-app&lt;/code&gt; 和&lt;code&gt;sa-feedback&lt;/code&gt; 服务（出了如图 8）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-8使用-virtualservices-配置的路由&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 8.使用 VirtualServices 配置的路由&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2n39aj20m80gk75x_hu_891332d924f252ce.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2n39aj20m80gk75x_hu_27ee6da56ca958f9.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2n39aj20m80gk75x_hu_cae726e33998eddb.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2n39aj20m80gk75x_hu_891332d924f252ce.webp&#34;
               width=&#34;760&#34;
               height=&#34;566&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 8.使用 VirtualServices 配置的路由
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;让我们分解以下路由到 SA-Frontend 的请求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**/**&lt;/code&gt; 应将&lt;strong&gt;精确路径&lt;/strong&gt; 路由到 SA-Frontend 以获取 Index.html&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**/static/***&lt;/code&gt; 应将&lt;strong&gt;前缀路径&lt;/strong&gt; 路由到 SA-Frontend 以获取前端所需的任何静态文件，如 Css 和 JavaScript 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;匹配正则表达式的路径&lt;/strong&gt;&lt;code&gt;&#39;^.*\.(ico|png|jpg)$&#39;&lt;/code&gt; 应该路由到 SA-Frontend，我们应该把图像资源路由到前端。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是通过以下配置实现的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-external-services&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;http-gateway                     &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exact&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/callback&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^.*\.(ico|png|jpg)$&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-frontend            &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的重点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;此 VirtualService 适用于通过&lt;strong&gt;http 网关&lt;/strong&gt; 发出的请求&lt;/li&gt;
&lt;li&gt;Destination 定义请求路由到的服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：上面的配置位于文件中 &lt;code&gt;sa-virtualservice-external.yaml&lt;/code&gt;，它还包含用于路由到 SA-WebApp 和 SA-Feedback 的配置，但为简洁起见，已缩短。&lt;/p&gt;
&lt;p&gt;通过执行以下命令应用 VirtualService：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/sa-virtualservice-external.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualservice.networking.istio.io/sa-external-services created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：当我们应用 Istio 资源时，Kubernetes API 服务器会创建一个由 Istio 控制平面接收的事件，然后将新配置应用于每个 pod 的 Envoy 代理。Ingress Gateway 控制器是另一个由控制平面配置的 Envoy，如图 9 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-9配置-istio-ingressgateway-来路由请求&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 9.配置 Istio-IngressGateway 来路由请求&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1t95sj20m80i2jt1_hu_30d66e6384f72e7.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1t95sj20m80i2jt1_hu_e2773980e0a56bc9.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1t95sj20m80i2jt1_hu_c347d0f5c96d4950.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1t95sj20m80i2jt1_hu_30d66e6384f72e7.webp&#34;
               width=&#34;760&#34;
               height=&#34;618&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 9.配置 &lt;strong&gt;Istio-IngressGateway&lt;/strong&gt; 来路由请求
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;现在可以访问 Sentiment Analysis 应用程序了 &lt;code&gt;http://{EXTERNAL-IP}/&lt;/code&gt; 。如果您获得 Not Found 状态，请不要担心 &lt;em&gt;有时需要配置生效才能更新 envoy 的缓存&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;在转到下一部分之前，请使用该应用程序生成一些流量。&lt;/p&gt;
&lt;h2 id=&#34;kiali---可观察性&#34;&gt;Kiali - 可观察性&lt;/h2&gt;
&lt;p&gt;要访问 Kiali 的 Admin UI，请执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl port-forward &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pod -n istio-system -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;kiali &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -n istio-system &lt;span class=&#34;m&#34;&gt;20001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并 &lt;a href=&#34;http://localhost:20001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:20001/&lt;/a&gt; 使用“admin”（不含引号）为用户和密码打开登录。有很多有用的功能，例如检查 Istio 组件的配置，根据拦截网络请求和回答收集的信息可视化服务，“谁在调用谁？”，“哪个版本的服务有故障？”等等，花一些时间检验 Kiali 的功能，然后再转到下一节，用 Grafana 可视化指标！&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-10-kiali---服务可观察性&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 10. Kiali - 服务可观察性&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu28njyj20m80c7mye_hu_1ef53bdd58786bf.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu28njyj20m80c7mye_hu_1de793b4dede9a37.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu28njyj20m80c7mye_hu_d81ea3ac931f1d2b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu28njyj20m80c7mye_hu_1ef53bdd58786bf.webp&#34;
               width=&#34;760&#34;
               height=&#34;417&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 10. Kiali - 服务可观察性
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;grafana---度量可视化&#34;&gt;Grafana - 度量可视化&lt;/h2&gt;
&lt;p&gt;使用 Grafana 将 Istio 收集的指标划分为 Prometheus 和 Visualized。要访问 Grafana 的 Admin UI，请执行以下命令并打开&lt;a href=&#34;http://localhost:3000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:3000&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl -n istio-system port-forward &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get pod -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;grafana &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;={&lt;/span&gt;.items&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;.metadata.name&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在左上角单击菜单&lt;strong&gt;Home&lt;/strong&gt; 并选择 &lt;strong&gt;Istio Service Dashboard&lt;/strong&gt; 并在左上角选择以&lt;strong&gt;sa-web-app&lt;/strong&gt;开头的服务，您将看到收集的指标，如下图所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1z8vbj20m80cnabv_hu_57f8441a42b4cdb7.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1z8vbj20m80cnabv_hu_3f32b79cfa3c222e.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1z8vbj20m80cnabv_hu_6d7a1051195ae1e5.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1z8vbj20m80cnabv_hu_57f8441a42b4cdb7.webp&#34;
               width=&#34;760&#34;
               height=&#34;432&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我的妈呀，这是一个没有任何数据的视图，管理层永远不会赞同这一点。让我们通过执行以下命令生成一些负载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    curl -i http://&lt;span class=&#34;nv&#34;&gt;$EXTERNAL_IP&lt;/span&gt;/sentiment &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-type: application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;sentence&amp;#34;: &amp;#34;I love yogobella&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    sleep .8&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们拥有更漂亮的图表，此外，我们拥有 Prometheus 用于监控和 Grafana 用于可视化指标这些令人惊讶的工具，使我们能够随时了解服务的性能，健康状况，升级或降级！&lt;/p&gt;
&lt;p&gt;最后，我们将研究整个服务中的跟踪请求。&lt;/p&gt;
&lt;h2 id=&#34;jaeger---追踪&#34;&gt;Jaeger - 追踪&lt;/h2&gt;
&lt;p&gt;我们需要跟踪，因为我们所拥有的服务越多，就越难找出失败的原因。我们来看下面图片中的简单案例：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-12通常随机失败的请求&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 12.通常随机失败的请求&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2ht7hj20m804fjrw_hu_7c1469ff0fc4837e.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2ht7hj20m804fjrw_hu_ef9260060964f773.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2ht7hj20m804fjrw_hu_5f223f19c3ba6410.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2ht7hj20m804fjrw_hu_7c1469ff0fc4837e.webp&#34;
               width=&#34;760&#34;
               height=&#34;151&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 12.通常随机失败的请求
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;请求进入，失败，&lt;em&gt;原因是什么&lt;/em&gt;？&lt;em&gt;第一次服务&lt;/em&gt;？&lt;em&gt;还是第二个&lt;/em&gt;？两者都有例外情况，让我们来看看每个日志。你发现自己这么做了多少次？我们的工作更像是软件侦探而不是开发人员。&lt;/p&gt;
&lt;p&gt;这是微服务中的一个普遍问题，它使用分布式跟踪系统解决，其中服务将唯一的 header 相互传递，然后将此信息转发到请求跟踪放在一起的分布式跟踪系统。一个例子如图 13 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-13用于标识请求范围的-traceid&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 13.用于标识请求范围的 TraceId&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2k4zsj20rs06uwfz_hu_83c25da89419d301.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2k4zsj20rs06uwfz_hu_19da2936ab9d6533.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2k4zsj20rs06uwfz_hu_c806aed838aafce4.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2k4zsj20rs06uwfz_hu_83c25da89419d301.webp&#34;
               width=&#34;760&#34;
               height=&#34;187&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 13.用于标识请求范围的 TraceId
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Istio 使用 Jaeger Tracer 实现 OpenTracing API，这是一个独立于供应商的框架。要访问 Jaegers UI，请执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl port-forward -n istio-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;kubectl get pod -n istio-system -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;jaeger &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -o &lt;span class=&#34;nv&#34;&gt;jsonpath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16686&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在 &lt;a href=&#34;http://localhost:16686/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:16686&lt;/a&gt; 中打开 UI，选择 &lt;strong&gt;sa-web-app&lt;/strong&gt; 服务， &lt;em&gt;如果下拉列表中未显示该&lt;/em&gt;服务，&lt;em&gt;则在页面上生成一些活动并点击刷新&lt;/em&gt; 。随后单击该按钮 &lt;strong&gt;查找痕迹&lt;/strong&gt;，这显示最近的痕迹，选择任何和所有的痕迹的详细分类将会显示，如图 14 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-14-jaeger---请求跟踪&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 14. Jaeger - 请求跟踪&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1ca17j20rs0bsgnr_hu_e3d707a5c53c5864.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1ca17j20rs0bsgnr_hu_b6fd982ebaf0d7c1.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1ca17j20rs0bsgnr_hu_80c744f19e09646d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1ca17j20rs0bsgnr_hu_e3d707a5c53c5864.webp&#34;
               width=&#34;760&#34;
               height=&#34;322&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 14. Jaeger - 请求跟踪
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;跟踪显示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求来到 &lt;strong&gt;istio-ingressgateway&lt;/strong&gt; （它是第一次与其中一个服务联系，因此对于生成跟踪 ID 的请求）然后网关将请求转发给 &lt;code&gt;sa-web-app&lt;/code&gt; 服务。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;sa-web-app&lt;/code&gt; 服务中，请求由 Envoysidecar 拾取并创建一个 span（这就是我们在跟踪中看到它的原因）并转发到 &lt;code&gt;sa-web-app&lt;/code&gt; 容器实例。&lt;/li&gt;
&lt;li&gt;这里方法 &lt;strong&gt;sentimentAnalysis&lt;/strong&gt; 处理请求。这些跟踪由应用程序生成，这意味着需要更改代码）。&lt;/li&gt;
&lt;li&gt;从 POST 请求&lt;code&gt;sa-logic&lt;/code&gt;开始的位置。跟踪 ID 需要&lt;code&gt;sa-web-app&lt;/code&gt;传递。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;5. &amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; ：在第 4 点，我们的应用程序需要获取 Istio 生成的 header，并在下一个请求时将其传递下来，如下图所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1odduj20m8055q3r_hu_40706f4dc6eb9360.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1odduj20m8055q3r_hu_27d62ee2bb29e37.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1odduj20m8055q3r_hu_b29a353120885bd0.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1odduj20m8055q3r_hu_40706f4dc6eb9360.webp&#34;
               width=&#34;760&#34;
               height=&#34;176&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Istio 做主要的繁重工作，因为它在传入的请求上生成 header，在每个 sidecar 上创建新的 span，传递它们，但是如果没有我们的服务传递 header，我们将失去请求的完整跟踪。&lt;/p&gt;
&lt;p&gt;要传递的 header 是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-request-id
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-b3-traceid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-b3-spanid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-b3-parentspanid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-b3-sampled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-b3-flags
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-ot-span-context
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尽管这是一项简单的任务，但已经有&lt;a href=&#34;https://github.com/opentracing-contrib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;许多库&lt;/a&gt; 可以简化这一过程，例如在 &lt;code&gt;sa-web-app&lt;/code&gt;服务中， &lt;strong&gt;RestTemplate&lt;/strong&gt; 客户端通过简单地&lt;a href=&#34;https://github.com/rinormaloku/istio-mastery/blob/master/sa-webapp/pom.xml#L36-L47&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;依赖项中&lt;/a&gt; 添加 Jaeger 和 OpenTracing 库来传递 header。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：Sentiment Analysis 应用程序展示了 Flask，Spring 和 ASP.NET Core 的实现。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;现在，在调查我们开箱即用（或部分开箱即用）之后，让我们来看看这里的主题，细粒度路由，管理网络流量，安全性等等！&lt;/p&gt;
&lt;h2 id=&#34;流量管理&#34;&gt;流量管理&lt;/h2&gt;
&lt;p&gt;使用 Envoy 的 Istio 为您的集群提供了许多新功能，从而实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态请求路由&lt;/strong&gt; ：Canary 部署，A/B 测试，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡：&lt;/strong&gt; 简单和一致的哈希平衡，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障恢复&lt;/strong&gt; ：超时，重试，熔断器，&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障注入&lt;/strong&gt; ：延迟，中止请求等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在本文的序列中，我们将在我们的应用程序中展示这些功能，并在此过程中介绍一些新概念。我们将研究的第一个概念是 DestinationRules，并使用那些我们将启用 A/B 测试的概念。&lt;/p&gt;
&lt;h2 id=&#34;ab测试---实践中的目的地规则&#34;&gt;A/B测试 - 实践中的目的地规则&lt;/h2&gt;
&lt;p&gt;当我们有两个版本的应用程序（通常版本视觉上有所不同）时使用 A/B 测试，并且我们不是 100％肯定会增加用户交互，因此我们同时尝试两个版本并收集指标。&lt;/p&gt;
&lt;p&gt;执行以下命令以部署演示A/B测试所需的前端的第二个版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/kube/ab-testing/sa-frontend-green-deployment.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.extensions/sa-frontend-green created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;绿色版本的部署清单有两点不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该 image 基于不同的标签： &lt;code&gt;istio-green&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pod 标有 &lt;code&gt;version: green&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而作为双方部署在标签 &lt;code&gt;app: sa-frontend&lt;/code&gt; 通过虚拟服务路由的请求 &lt;code&gt;sa-external-services&lt;/code&gt;  的服务 &lt;code&gt;sa-frontend&lt;/code&gt; 会被转发到所有的实例，并将于负载采用循环算法，这将导致在图 16 中提出的负载均衡问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-16找不到请求的文件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 16.找不到请求的文件&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu30v6lj20m80do761_hu_b8de091c38ca6512.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu30v6lj20m80do761_hu_1d8840e7c71b903c.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu30v6lj20m80do761_hu_53a18271b2efd745.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu30v6lj20m80do761_hu_b8de091c38ca6512.webp&#34;
               width=&#34;760&#34;
               height=&#34;467&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 16.找不到请求的文件
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;找不到这些文件，因为它们在应用程序的不同版本中的命名方式不同。让我们验证一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl --silent http://&lt;span class=&#34;nv&#34;&gt;$EXTERNAL_IP&lt;/span&gt;/ &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tr &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/static/css/main.c7071b22.css
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/static/js/main.059f8e9c.js
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl --silent http://&lt;span class=&#34;nv&#34;&gt;$EXTERNAL_IP&lt;/span&gt;/ &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tr &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/static/css/main.f87cd8c9.css
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/static/js/main.f7659dbb.js
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这意味着请求一个版本的静态文件的&lt;code&gt;index.html&lt;/code&gt;可以被负载均衡到提供另一个版本的 pod，其中可以理解的是其他文件不存在。&lt;/p&gt;
&lt;p&gt;这意味着，为了让我们的应用程序正常工作，我们需要引入限制“为 index.html 服务的应用程序的版本，必须为后续请求提供服务”。&lt;/p&gt;
&lt;p&gt;我们将使用 Consistent Hash Loadbalancing 来实现这一点，这 &lt;strong&gt;是&lt;/strong&gt; 使用预定义属性（例如 HTTP header）&lt;strong&gt;将来自同一客户端的请求转发到同一后端实例的过程&lt;/strong&gt;。由 DestionatioRules 提供。&lt;/p&gt;
&lt;h2 id=&#34;destinationrules&#34;&gt;DestinationRules&lt;/h2&gt;
&lt;p&gt;在 &lt;strong&gt;VirtualService&lt;/strong&gt; 将请求路由到正确的服务之后，然后使用 &lt;strong&gt;DestinationRules&lt;/strong&gt;，我们可以指定适用于此服务实例的流量的策略，如图 17 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-17使用-istio-资源的流量管理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 17.使用 Istio 资源的流量管理&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2yjsuj20rs09e75i_hu_21c0ad2442f18e81.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2yjsuj20rs09e75i_hu_f50bee4bc67a3fba.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2yjsuj20rs09e75i_hu_f21ba19e3755ebb6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2yjsuj20rs09e75i_hu_21c0ad2442f18e81.webp&#34;
               width=&#34;760&#34;
               height=&#34;257&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 17.使用 Istio 资源的流量管理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：图 17 以易于理解的方式可视化 Istio 资源如何影响网络流量。但是，准确地说，决定将请求转发到哪个实例是由 CRD 配置的 Ingress Gateway 的 Envoy 做出的。&lt;/p&gt;
&lt;p&gt;使用目标规则，我们可以将负载均衡配置为具有一致性哈希，并确保同一用户由同一服务实例响应。通过以下配置实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trafficPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loadBalancer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;consistentHash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpHeaderName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;version  &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;根据“version”标头的内容生成一致的哈希。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过执行以下命令应用配置并尝试一下！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/ab-testing/destinationrule-sa-frontend.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;destinationrule.networking.istio.io/sa-frontend created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行以下命令并验证在指定版本 header 时是否获得相同的文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl --silent -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;version: yogo&amp;#34;&lt;/span&gt; http://&lt;span class=&#34;nv&#34;&gt;$EXTERNAL_IP&lt;/span&gt;/ &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tr &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：为了方便在浏览器中进行测试，您可以使用此 &lt;a href=&#34;https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome 扩展程序&lt;/a&gt; 向版本 header 添加不同的值，。&lt;/p&gt;
&lt;p&gt;DestinationRules 具有更多 LoadBalancing 功能，所有详细信息都可以查看 &lt;a href=&#34;https://preliminary.istio.io/docs/reference/config/istio.networking.v1alpha3.html#LoadBalancerSettings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;在继续更详细地探索 VirtualService 之前，请执行以下命令，删除应用程序的绿色版本和目标规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -f resource-manifests/kube/ab-testing/sa-frontend-green-deployment.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.extensions &lt;span class=&#34;s2&#34;&gt;&amp;#34;sa-frontend-green&amp;#34;&lt;/span&gt; deleted
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete -f resource-manifests/istio/ab-testing/destinationrule-sa-frontend.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;destinationrule.networking.istio.io “sa-frontend” deleted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;镜像服务---实践中的虚拟服务&#34;&gt;镜像服务 - 实践中的虚拟服务&lt;/h2&gt;
&lt;p&gt;当我们想要测试生产中的更改但不影响最终用户时，会使用影子或镜像，因此我们将请求镜像到具有更改并评估它的第二个实例中。 &lt;em&gt;更简单的是，当你的一个同事选择最关键的问题并制作一个超大的合并请求，并且没人能真正审查。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要测试此功能，可以 通过执行以下命令 创建 SA-Logic 的第二个实例（ &lt;em&gt;这是 buggy 的&lt;/em&gt; ）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/kube/shadowing/sa-logic-service-buggy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.extensions/sa-logic-buggy created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行以下命令并验证所有实例都标有相应的版本，另外还有&lt;code&gt;app=sa-logic&lt;/code&gt;标记：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods -l &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sa-logic --show-labels
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                              READY   LABELS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-logic-568498cb4d-2sjwj         2/2     &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sa-logic,version&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-logic-568498cb4d-p4f8c         2/2     &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sa-logic,version&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-logic-buggy-76dff55847-2fl66   2/2     &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sa-logic,version&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sa-logic-buggy-76dff55847-kx8zz   2/2     &lt;span class=&#34;nv&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sa-logic,version&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;v2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 &lt;code&gt;sa-logic&lt;/code&gt; 服务目标 pod 标记为 &lt;code&gt;app=sa-logic&lt;/code&gt;时，任何传入请求将在所有实例之间进行负载均衡，如图 18 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-18-round-robin-负载均衡&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 18. Round Robin 负载均衡&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu199gtj20m80f5wgc_hu_d182f121d4f4b68a.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu199gtj20m80f5wgc_hu_535c6c6a919f399d.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu199gtj20m80f5wgc_hu_4edaa496c4a9a07e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu199gtj20m80f5wgc_hu_d182f121d4f4b68a.webp&#34;
               width=&#34;760&#34;
               height=&#34;518&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 18. Round Robin 负载均衡
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;但我们希望将请求路由到版本为 v1 的实例，并镜像到版本为 v2 的实例，如图 19 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-19路由到-v1-和镜像到-v2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 19.路由到 v1 和镜像到 v2&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2f7y4j20m80b8q3y_hu_13924f3c6effa368.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2f7y4j20m80b8q3y_hu_9e886841014cf021.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2f7y4j20m80b8q3y_hu_4b6fa1ad2199d94f.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2f7y4j20m80b8q3y_hu_13924f3c6effa368.webp&#34;
               width=&#34;760&#34;
               height=&#34;384&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 19.路由到 v1 和镜像到 v2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这是使用 VirtualService 与 DestinationRule 结合实现的，其中目标规则指定到特定子集的子集和 VirtualService 路由。&lt;/p&gt;
&lt;h2 id=&#34;使用目标规则指定子集&#34;&gt;使用目标规则指定子集&lt;/h2&gt;
&lt;p&gt;我们使用以下配置定义子集：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic   &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1       &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1  &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2  &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;主机定义此规则仅在向 &lt;code&gt;sa-logic&lt;/code&gt; 服务发生路由时适用&lt;/li&gt;
&lt;li&gt;路由到子集实例时使用的子集名称。&lt;/li&gt;
&lt;li&gt;Label 定义了需要匹配的键值对，以使实例成为子集的一部分。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用执行以下命令的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/shadowing/sa-logic-subsets-destinationrule.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; destinationrule.networking.istio.io/sa-logic created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过定义子集，我们可以继续并配置 VirtualService 以应用于请求 &lt;code&gt;sa-logic&lt;/code&gt; 所在的请求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;路由到名为 v1 的子集，&lt;/li&gt;
&lt;li&gt;镜像到名为 v2 的子集。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是通过以下清单实现的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;sa-logic          &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic  &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mirror&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;             
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic     &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于一切配置都是不言自明的，让我们看看它的执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/shadowing/sa-logic-subsets-shadowing-vs.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualservice.networking.istio.io/sa-logic created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过执行以下命令添加一些负载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; curl -v http://&lt;span class=&#34;nv&#34;&gt;$EXTERNAL_IP&lt;/span&gt;/sentiment &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-type: application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;sentence&amp;#34;: &amp;#34;I love yogobella&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    sleep .8&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查 Grafana 中的结果，在那里我们可以看到有错误的版本大约有 60％的请求失败，但没有一个失败影响最终用户，因为它们被当前活动的服务响应。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-20-sa-逻辑服务版本的成功率&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 20. sa 逻辑服务版本的成功率&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2vr8gj20m80b0t9z_hu_dd5f4bc66cd08b52.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2vr8gj20m80b0t9z_hu_5273c4220105c319.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2vr8gj20m80b0t9z_hu_e766743377c20625.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu2vr8gj20m80b0t9z_hu_dd5f4bc66cd08b52.webp&#34;
               width=&#34;760&#34;
               height=&#34;376&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 20. sa 逻辑服务版本的成功率
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在本节中，我们第一次看到应用于我们服务的 envoy 的 VirtualService，当对此 &lt;code&gt;sa-web-app&lt;/code&gt; 提出请求时， &lt;code&gt;sa-logic&lt;/code&gt;  通过 sidecar Envoy，通过 VirtualService 配置为路由到子集 v1 并镜像到服务的子集 v2 &lt;code&gt;sa-logic&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我可以看到你在想“Darn man Virtual Services 很简单！”，在下一节中，我们将把句子扩展为“Simply Amazing！”。&lt;/p&gt;
&lt;h2 id=&#34;金丝雀部署&#34;&gt;金丝雀部署&lt;/h2&gt;
&lt;p&gt;Canary Deployment 是向少数用户推出新版本应用程序的过程，作为验证缺少问题的一个步骤，然后向更广泛的受众提供更高质量的发布保证。&lt;/p&gt;
&lt;p&gt;我们将继续使用相同的 buggy 子集 &lt;code&gt;sa-logic&lt;/code&gt; 来演示 canary 部署。&lt;/p&gt;
&lt;p&gt;让我们大胆地开始，通过应用下面的 VirtualService，将 20％的用户发送到有缺陷的版本（这代表金丝雀部署）和 80％的健康服务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;sa-logic    &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;权重指定要转发到目标或目标子集的请求的百分比。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;sa-logic&lt;/code&gt; 使用以下命令 更新以前的 虚拟服务配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/canary/sa-logic-subsets-canary-versusyaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; virtualservice.networking.istio.io/sa-logic configured
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们立即看到我们的一些请求失败了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   curl -i http://&lt;span class=&#34;nv&#34;&gt;$EXTERNAL_IP&lt;/span&gt;/sentiment &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -H “Content-type: application/json” &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;sentence&amp;#34;: &amp;#34;I love yogobella&amp;#34;}&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   --silent -w &lt;span class=&#34;s2&#34;&gt;&amp;#34;Time: %{time_total}s \t Status: %{http_code}\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -o /dev/null&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; sleep .1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: 0.153075s Status: &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: 0.137581s Status: &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: 0.139345s Status: &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Time: 30.291806s Status: &lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;VirtualServices 启用了 Canary Deployments，通过这种方法，我们将潜在的损害减少到了 20％的用户群。漂亮！现在，每当我们对代码不安全时，我们就可以使用 Shadowing 和 Canary Deployments，换句话说，总是如此。😜&lt;/p&gt;
&lt;h2 id=&#34;超时和重试&#34;&gt;超时和重试&lt;/h2&gt;
&lt;p&gt;代码并不总是错误的。在“ &lt;a href=&#34;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing#The_fallacies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分布式计算的 8 个谬误&lt;/a&gt; ”列表中，第一个谬论是“网络可靠”。网络不可靠，这就是我们需要超时和重试的原因。&lt;/p&gt;
&lt;p&gt;出于演示目的，我们将继续使用有缺陷的版本 &lt;code&gt;sa-logic&lt;/code&gt;，其中随机故障模拟网络的不可靠性。&lt;/p&gt;
&lt;p&gt;有缺陷的服务有三分之一的机会花费太长时间来响应，三分之一的机会以内部服务器错误结束，其余的成功完成。&lt;/p&gt;
&lt;p&gt;为了缓解这些问题并改善用户体验，我们可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果服务时间超过 8 秒，则超时&lt;/li&gt;
&lt;li&gt;重试失败的请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是通过以下资源定义实现的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sa-logic&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;8s          &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retries&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;attempts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;perTryTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;3s  &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;请求的超时时间为 8 秒，&lt;/li&gt;
&lt;li&gt;它尝试了 3 次，&lt;/li&gt;
&lt;li&gt;如果尝试时间超过 3 秒，则尝试将请求标记为失败。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是一种优化，因为用户不会等待超过 8 秒，并且我们在发生故障时重试三次，从而增加了导致响应成功的机会。&lt;/p&gt;
&lt;p&gt;使用以下命令应用更新的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f resource-manifests/istio/retries/sa-logic-retries-timeouts-vs.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualservice.networking.istio.io/sa-logic configured
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并查看 Grafana 图表，了解成功率的改善情况（如图 21 所示）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-21使用超时和重试后的改进&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 21.使用超时和重试后的改进&#34; srcset=&#34;
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1qjtxj20m80b63zk_hu_4633a939a617f69e.webp 400w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1qjtxj20m80b63zk_hu_99ce21954e6fe3e0.webp 760w,
               /blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1qjtxj20m80b63zk_hu_aecc3ba5dd17fdd9.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/back-to-microservices-with-istio-p1/61411417ly1g0exu1qjtxj20m80b63zk_hu_4633a939a617f69e.webp&#34;
               width=&#34;760&#34;
               height=&#34;382&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 21.使用超时和重试后的改进
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;sa-logic-buggy&lt;/code&gt; 通过执行以下命令 进入下一部分 delete 和 VirtualService 之前：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete deployment sa-logic-buggy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.extensions &lt;span class=&#34;s2&#34;&gt;&amp;#34;sa-logic-buggy&amp;#34;&lt;/span&gt; deleted
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl delete virtualservice sa-logic
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualservice.networking.istio.io “sa-logic” deleted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;熔断器和隔离模式&#34;&gt;熔断器和隔离模式&lt;/h2&gt;
&lt;p&gt;微服务架构中的两个重要模式，可以实现服务的自我修复。&lt;/p&gt;
&lt;p&gt;该 &lt;strong&gt;熔断器&lt;/strong&gt; 是用来阻止请求将视为不健康服务的一个实例，并使它能够恢复，在此期间客户端的请求转发到该服务的健康情况（增加成功率）。&lt;/p&gt;
&lt;p&gt;该 &lt;strong&gt;隔离模式&lt;/strong&gt; 整个系统降级来隔离错误，防止错误传播，举一个隔离故障例子，服务 B 处于损坏状态和其它服务（服务 B 的客户端）发出请求到服务 B，这将导致该客户端将使用了自己的线程池，将无法提供其他请求（即使这些请求与服务 B 无关）。&lt;/p&gt;
&lt;p&gt;我将跳过这些模式的实现，因为您可以查看 &lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/circuit-breaking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档中的实现&lt;/a&gt;，我很兴奋地展示身份验证和授权，这将是下一篇文章的主题。&lt;/p&gt;
&lt;h2 id=&#34;第一部分---摘要&#34;&gt;第一部分 - 摘要&lt;/h2&gt;
&lt;p&gt;在本文中，我们在 Kubernetes 集群中部署了 Istio，并使用其自定义资源定义（如 &lt;strong&gt;网关&lt;/strong&gt;， &lt;strong&gt;VirtualServices&lt;/strong&gt;， &lt;strong&gt;DestinationRules&lt;/strong&gt; 及其组件）启用了以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;strong&gt;Kiali&lt;/strong&gt;，通过查看正在运行的服务，它们如何执行，以及它们关系，来观察我们的服务。&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;Prometheus&lt;/strong&gt; 和 &lt;strong&gt;Grafana&lt;/strong&gt; 进行收集和可视化。&lt;/li&gt;
&lt;li&gt;请求 &lt;strong&gt;Jaeger&lt;/strong&gt; 跟踪（Hunter 的德语）。&lt;/li&gt;
&lt;li&gt;对网络流量进行全面细粒度控制，实现 &lt;strong&gt;Canary Deployments&lt;/strong&gt;， &lt;strong&gt;A/B测试和Shadowing&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;轻松实现 &lt;strong&gt;重试，超时和 CircuitBreakers&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有这些都可以在没有代码更改或任何其他依赖性的情况下实现，从而使您的服务保持小巧，易于操作和维护&lt;/p&gt;
&lt;p&gt;对于您的开发团队来说，消除这些跨领域的问题并将它们集中到 Istio 的控制平面，意味着新服务很容易引入，它们不会占用大量资源，因为开发人员可以专注于解决业务问题。到目前为止，没有任何开发人员抱怨“必须解决有趣的业务问题！”。&lt;/p&gt;
&lt;p&gt;我很乐意在下面的评论中听到您的想法，并随时在 &lt;a href=&#34;https://twitter.com/rinormaloku&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; 或我的页面 &lt;a href=&#34;https://rinormaloku.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rinormaloku.com&lt;/a&gt; 上与我 &lt;a href=&#34;https://rinormaloku.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系&lt;/a&gt;，并继续关注下一篇文章，我们将解决最后一层认证和授权问题！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cilium 1.4 发布了，新功能一览</title>
      <link>https://cloudnativecn.com/blog/cilium-1-4/</link>
      <pubDate>Mon, 18 Feb 2019 17:59:29 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/cilium-1-4/</guid>
      <description>&lt;p&gt;















&lt;figure  id=&#34;figure-发布概述&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;发布概述&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmk6vqhj20jg08odga_hu_40b4d47a2dfe24b8.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmk6vqhj20jg08odga_hu_20621b9e54c7fcdb.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmk6vqhj20jg08odga_hu_10a4400055b99bc7.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmk6vqhj20jg08odga_hu_40b4d47a2dfe24b8.webp&#34;
               width=&#34;700&#34;
               height=&#34;312&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      发布概述
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://cilium.io/blog/2019/02/12/cilium-14/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们很高兴地宣布 Cilium 1.4 版本。该版本引入了几项新功能以及优化和可扩展性工作。重点包括增加全局服务，提供跨多个集群的 Kubernetes 服务路由、DNS 请求/响应感知授权和可见性、透明加密（beta）、IPVLAN 支持以获得更好的性能和延迟（beta）、与 Flannel 集成、GKE 在 COS 上支持、基于 AWS 元数据的策略实施（alpha）以及优化内存和 CPU 使用的重要工作。&lt;/p&gt;
&lt;p&gt;像往常一样，感谢过去 4 个月中在版本 1.3 和 1.4 之间贡献了 1048 次提交的 Cilium 开发人员及整个社区。&lt;/p&gt;
&lt;h2 id=&#34;cilium-是什么&#34;&gt;Cilium 是什么？&lt;/h2&gt;
&lt;p&gt;Cilium 是一个开源软件，用于透明地提供和保护使用 Kubernetes、Docker 和 Mesos 等 Linux 容器管理平台部署的应用程序服务之间的网络和 API 连接。&lt;/p&gt;
&lt;p&gt;Cilium 的基础是一种名为 BPF 的新 Linux 内核技术，它可以在 Linux 本身内动态插入强大的安全性、可见性和网络控制逻辑。BPF 用于提供诸如多集群路由，负载均衡以取代 kube-proxy，使用 X.509 证书的透明加密以及网络和服务安全性等功能。除了提供传统的网络级安全性之外，BPF 的灵活性还可以通过应用程序协议和 DNS 请求/响应的上下文实现安全性。Cilium 与 Envoy 紧密集成，并提供基于 Go 的扩展框架。由于 BPF 在 Linux 内核中运行，因此可以应用所有 Cilium 功能，而无需对应用程序代码或容器配置进行任何更改。&lt;/p&gt;
&lt;p&gt;有关 &lt;strong&gt;&lt;a href=&#34;https://cilium.readthedocs.io/en/stable/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt;&lt;/strong&gt; 的更详细的介绍，请参阅**&lt;a href=&#34;https://cilium.readthedocs.io/en/stable/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 简介&lt;/a&gt;** 一节。&lt;/p&gt;
&lt;h2 id=&#34;多集群服务路由&#34;&gt;多集群服务路由&lt;/h2&gt;
&lt;p&gt;Cilium 1.3 在多个集群之间引入了基本的 pod IP 路由功能。Cilium 1.4 引入了基于标准 Kubernetes 服务的全局服务概念。全局服务允许用户指定 Kubernetes 服务在多个集群中可用。然后，该服务可以在多个集群中具有后端 pod。&lt;/p&gt;
&lt;p&gt;用户体验就像在每个集群中定义具有相同名称和命名空间的 Kubernetes 服务并添加注释以将其标记为全局一样简单。 















&lt;figure  id=&#34;figure-多集群服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;多集群服务&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkdyp1j21fk0mggly_hu_e709cd77eed54b78.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkdyp1j21fk0mggly_hu_e00ff2b323c1d1bb.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkdyp1j21fk0mggly_hu_9fc56999f47d6ce.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkdyp1j21fk0mggly_hu_e709cd77eed54b78.webp&#34;
               width=&#34;760&#34;
               height=&#34;331&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多集群服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当 pod 向上或向下扩展或变得不健康时，Kubernetes 运行状态检查信息可用于自动添加和删除后端服务。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多集群故障转移&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;多集群故障转移&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmk3324j21g80hkwev_hu_652a9a2d8174f74c.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmk3324j21g80hkwev_hu_7b24d7b9e2dc6157.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmk3324j21g80hkwev_hu_520759dde6ec6db4.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmk3324j21g80hkwev_hu_652a9a2d8174f74c.webp&#34;
               width=&#34;760&#34;
               height=&#34;255&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多集群故障转移
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;控制平面建立在 etcd 之上，类似于 Kubernetes 原生的操作方式，具有弹性和简单性作为其基本设计模式。每个集群继续运行其自己的 etcd 集群，并且复制以只读方式进行，这可确保集群中的故障不会影响其他集群。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-集群控制平面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;集群控制平面&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmjzw1jj20jg09ljrn_hu_c7dece338f882564.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmjzw1jj20jg09ljrn_hu_31321667c965d8e8.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmjzw1jj20jg09ljrn_hu_b085c70de168be47.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmjzw1jj20jg09ljrn_hu_c7dece338f882564.webp&#34;
               width=&#34;700&#34;
               height=&#34;345&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      集群控制平面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;将集群连接在一起就像使用云供应商的标准路由 API 或基于常规 IP 地址的 VPN 网关和隧道的本地基础设施在 VPC 之间提供路由，然后通过内部 Kubernetes 负载均衡器暴露 Cilium 控制平面以将其暴露给内部 VPC 一样简单。TLS 用于使用作为 Kubernetes Secret 管理的证书和密钥对客户端和服务器进行身份验证。&lt;/p&gt;
&lt;h2 id=&#34;ipvlan-支持测试版&#34;&gt;IPVLAN 支持（测试版）&lt;/h2&gt;
&lt;p&gt;添加了一种新的基于 IPVLAN 的数据路径模式。与基于 veth 的体系结构相比，IPVLAN 具有低延迟优势。使用 netperf 在 3.40Ghz Xeon 上的两个本地容器之间测量了以下基准测试，并使用单核禁用超线程。与 veth 相比，IPVLAN 的 P99 延迟相对较低（越低越好）：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ipvlan-性能-延迟&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;IPVLAN 性能 (延迟)&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05ygz1tuxj20wa0iu3yo_hu_4bd8c83c0cd1b3b8.webp 400w,
               /blog/cilium-1-4/61411417ly1g05ygz1tuxj20wa0iu3yo_hu_afed674c24db515f.webp 760w,
               /blog/cilium-1-4/61411417ly1g05ygz1tuxj20wa0iu3yo_hu_3ad9146af94d4b3f.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05ygz1tuxj20wa0iu3yo_hu_4bd8c83c0cd1b3b8.webp&#34;
               width=&#34;760&#34;
               height=&#34;443&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      IPVLAN 性能 (延迟)
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;IPVLAN 和 veth 之间的最大吞吐量（越高越好）非常相似，但是通过从内核编译 netfilter/iptables 可以实现非常显着的性能提升。如果您不使用 NodePort 服务并且在离开 Kubernete worker node 时不需要伪装网络流量，则已经可以完全运行您的 Kubernetes 集群。我们将在接下来的几周内提供有关如何运行 iptables 和 kube-proxy 的指南。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ipvlan-性能&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;IPVLAN 性能&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkwgobj20gs0abdfq_hu_ac86a7d18487f97b.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkwgobj20gs0abdfq_hu_67f5e93c70431f78.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkwgobj20gs0abdfq_hu_8b049bcac372b8bd.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkwgobj20gs0abdfq_hu_ac86a7d18487f97b.webp&#34;
               width=&#34;604&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      IPVLAN 性能
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;IPVLAN 是 1.4 中的 beta 级功能，有关如何启用和配置该功能的说明，请参阅 &lt;a href=&#34;https://docs.cilium.io/en/v1.4/gettingstarted/ipvlan/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IPVLAN 入门指南&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;dns请求响应的安全性和可见性&#34;&gt;DNS请求/响应的安全性和可见性&lt;/h2&gt;
&lt;p&gt;Cilium 1.4 扩展了现有的 DNS 安全策略模型，以了解各个 pod 发出的 DNS 请求以及它们收到的 DNS 响应。这显着提高了访问集群外部服务的 pod 的安全性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在执行 DNS 查找时，可以将 Pod 限制为具有最小权限，即 pod 可以仅限于查找匹配模式的 DNS 名称，例如 &lt;code&gt;*.domain.com&lt;/code&gt; 。任何超出允许模式的请求都将收到 &lt;code&gt;request refused&lt;/code&gt; DNS 响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 查找后的通信可以限制为特定 pod 接收的 DNS 响应中返回的 IP 地址。这显着降低了受损应用程序的权限，并提高了基于 DNS 的策略规则的可靠性，因为执行逻辑不再需要知道 DNS 名称可以映射到的所有可能的 IP 地址。&lt;/p&gt;
&lt;p&gt;特别是对于云供应商提供的流行存储，消息传递和数据库服务，单个 DNS 名称可以映射到数百或数千个 IP 地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在可以通过 API 访问的 Cilium 授权日志记录层记录 DNS 查找和响应。这提供了 pod 执行的每个 DNS 请求和响应的精确日志。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-dns&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DNS&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmku6whj217i09c3yk_hu_e940db6deeee1251.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmku6whj217i09c3yk_hu_cd8a82d507cae6ee.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmku6whj217i09c3yk_hu_a8159b922451088d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmku6whj217i09c3yk_hu_e940db6deeee1251.webp&#34;
               width=&#34;760&#34;
               height=&#34;163&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DNS
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面的示例显示了一个成功的 DNS 序列，然后是 DNS 服务器响应的对 IP 的 HTTP 请求。这是应用程序的行为方式和允许的方式。后续 HTTP 请求可以使用缓存的 DNS 信息，允许此类请求。DNS 信息将根据记录中的 TTL 信息超时。&lt;/p&gt;
&lt;p&gt;右侧是应用程序在允许的 DNS 策略之外执行 DNS 查找的序列。它还显示，如果应用程序无法执行 DNS 查找，则在应用程序无法在以下位置查找 DNS 名称时，即使 IP 地址实际映射到允许的 DNS 名称，也会阻止任何尝试联系 IP 地址的尝试。一点。&lt;/p&gt;
&lt;h3 id=&#34;策略示例&#34;&gt;策略示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;egress-domain-wildcard&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;k8s:io.kubernetes.pod.namespace&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s-app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-dns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;53&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;UDP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*.domain.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toFQDNs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*.domain.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;443&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述策略示例授予 pod 或容器通过 kube-dns 执行 DNS 请求的权限，但将允许的 DNS 查找限制为 &lt;code&gt;*.domain.com&lt;/code&gt; 。与模式不匹配的请求将收到 &lt;code&gt;request refused&lt;/code&gt; DNS 响应。它进一步授予端口 443/TCP 上的 pod 出口访问权限到 DNS 响应中返回的 IP。任何尝试访问先前未在 DNS 响应中返回的任何 IP 地址的请求都将被拒绝。&lt;/p&gt;
&lt;p&gt;要开始使用基于 DNS 的策略，请遵循 &lt;a href=&#34;https://docs.cilium.io/en/v1.4/gettingstarted/dns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 DNS 的入门指南&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;透明加密和身份验证测试版&#34;&gt;透明加密和身份验证（测试版）&lt;/h2&gt;
&lt;p&gt;为集群内和集群之间的所有服务到服务通信提供透明加密是一种经常被要求的功能。加密允许在不受信任的网络中运行 Kubernetes，透明地加密集群中服务之间的所有通信。身份验证可确保只有受信任的工作节点才能参与集群。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-加密&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;加密&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkyg5yj20w80dijrg_hu_ef54f6784f2a1afd.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkyg5yj20w80dijrg_hu_be6867d4081c5732.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkyg5yj20w80dijrg_hu_2eea172ac3e291a0.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkyg5yj20w80dijrg_hu_ef54f6784f2a1afd.webp&#34;
               width=&#34;760&#34;
               height=&#34;318&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      加密
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;加密基于 X.509 证书和密钥。目前，使用 PSK，使用 Kubernetes Secret 分发给所有节点。但是，基础结构与 SPIFFE 兼容，并允许在将来的版本中在每个服务级别上使用 SPIFFE 证书提供服务身份验证。数据路径实现使用 Linux 内核的 IPSec 实现，它避免了作为所有服务的一部分运行 sidecar 代理的需要，并确保通过现代处理器中的专用 CPU 指令集有效和自动地使用硬件辅助加密加速。&lt;/p&gt;
&lt;p&gt;透明加密是一种 beta 级功能。要启用该功能，请将 &lt;code&gt;--enable-ipsec&lt;/code&gt; 选项传递给代理，并通过 &lt;code&gt;--ipsec-key-file&lt;/code&gt; 选项或使用 Kubernetes Secret 提供预共享密钥（PSK） 。&lt;/p&gt;
&lt;h2 id=&#34;基于-sockmap-bpf-的-sidecar-加速alpha&#34;&gt;基于 Sockmap BPF 的 sidecar 加速（alpha）&lt;/h2&gt;
&lt;p&gt;正如&lt;a href=&#34;https://www.youtube.com/watch?v=ER9eIXL2_14&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 KubeCon 上宣布的那样&lt;/a&gt; ，我们正在使用 Cilium 1.4 进行本地进程通信加速。&lt;/p&gt;
&lt;p&gt;Sockmap 加速本地进程通信主要用于 sidecar 代理和本地进程之间的通信，但适用于所有本地进程。 















&lt;figure  id=&#34;figure-sockmap-加速了延迟&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;SockMap 加速了延迟&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hu_b3dcd470719edb61.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hu_99c4a33a411437a5.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hu_95162ba5fe864bac.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hu_b3dcd470719edb61.webp&#34;
               width=&#34;760&#34;
               height=&#34;454&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SockMap 加速了延迟
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;启用 sockmap 时，请求数/s 和最大吞吐量都加倍： 















&lt;figure  id=&#34;figure-sockmap-加速了请求处理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;SockMap 加速了请求处​​理&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkb7mbj20w20j00su_hu_b115ed91deb8bb18.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkb7mbj20w20j00su_hu_1e6d446073dad646.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkb7mbj20w20j00su_hu_4053b7fa2dc8efcd.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkb7mbj20w20j00su_hu_b115ed91deb8bb18.webp&#34;
               width=&#34;760&#34;
               height=&#34;451&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SockMap 加速了请求处​​理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-sockmap-加速了吞吐量&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;SockMap 加速了吞吐量&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu_121bcf7dc3314f63.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu_8886913a347392a5.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu_c67e6e4ed16f5b8c.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu_121bcf7dc3314f63.webp&#34;
               width=&#34;579&#34;
               height=&#34;343&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SockMap 加速了吞吐量
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;请注意，所有这些性能数字均为每个 CPU 核心。&lt;/p&gt;
&lt;p&gt;Sockmap 加速是 1.4 中的 alpha 级别功能。可以使用该 &lt;code&gt;--sockops-enable&lt;/code&gt; 选项启用它。&lt;/p&gt;
&lt;h2 id=&#34;新-grafana-仪表板&#34;&gt;新 Grafana 仪表板&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-grafana&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Grafana&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmjnwpaj22fu0jywfi_hu_b6ed400f84293257.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmjnwpaj22fu0jywfi_hu_189387240c5cc335.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmjnwpaj22fu0jywfi_hu_99d7112368a3b69f.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmjnwpaj22fu0jywfi_hu_b6ed400f84293257.webp&#34;
               width=&#34;760&#34;
               height=&#34;173&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Grafana
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;添加了几个新的 Prometheus 指标，并且可以使用单个命令将新的 Grafana 仪表板部署到任何 Kubernetes 集群中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/cilium/cilium/v1.4/examples/kubernetes/addons/prometheus/monitoring-example.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;















&lt;figure  id=&#34;figure-grafana&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Grafana&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmjiv1kj22f40z6di3_hu_b5514b474aa7487c.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmjiv1kj22f40z6di3_hu_ddbdc1809e18ecaf.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmjiv1kj22f40z6di3_hu_422cbc4352b3b0cc.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmjiv1kj22f40z6di3_hu_b5514b474aa7487c.webp&#34;
               width=&#34;760&#34;
               height=&#34;307&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Grafana
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;flannel-整合测试版&#34;&gt;Flannel 整合（测试版）&lt;/h2&gt;
&lt;p&gt;与使用 Flannel CNI 插件配置的现有集群的 Cilium 的安全策略实施和负载平衡功能的用户经常要求与 Flannel 集成。&lt;/p&gt;
&lt;p&gt;Cilium 1.4 引入了一个新的配置选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;flannel-master-device&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cni0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这使得 Cilium 可以使用 CNI 链接在 flannel 上运行。通过启用以下选项，还可以自动获取工作节点上的现有容器/容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;flannel-manage-existing-containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该选项还需要编辑 Cilium DaemonSet 以启用该 &lt;code&gt;hostPID: true&lt;/code&gt; 选项，以便 Cilium 可以查看附加到现有容器的所有进程。&lt;/p&gt;
&lt;p&gt;Flannel 集成主要用于在现有集群中尝试 Cilium 功能或用于迁移目的。有些大规模有用的功能将无法运行，这包括将源的安全身份嵌入网络数据包的能力，这需要回退到基于 IP 的识别。&lt;/p&gt;
&lt;p&gt;有关详细信息，请参阅 &lt;a href=&#34;https://docs.cilium.io/en/v1.4/gettingstarted/flannel-integration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flannel 入门指南&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;与其他-cni-的基准测试&#34;&gt;与其他 CNI 的基准测试&lt;/h2&gt;
&lt;p&gt;在过去的两个月里，我们已经接触过很多 Cilium 与其他 CNI 插件的比较。因此，我们针对其他流行的 CNI 插件运行了几个基准测试。&lt;/p&gt;
&lt;p&gt;在我们进入实际数字之前的两个单词：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基准测试很难。我们并未声称我们可以在理想配置中配置其他 CNI 插件。如果您有意见，请联系我们，我们很乐意进行调整。这些基准测试的目标是表明，通过改变架构和在堆栈中使用不同的技术，而不是仅仅将一个 CNI 与另一个 CNI 进行比较，可以产生最大的影响。即使是 Cilium，其性能也会因配置而异。&lt;/li&gt;
&lt;li&gt;我们专注于测量网络开销，因此我们在两个本地容器之间运行基准测试，以尽可能多地消除硬件限制。&lt;/li&gt;
&lt;li&gt;目标不是达到最大或最低的数量。我们使用单个 CPU 核心进行测量，限制 CPU 的数量。系统的 CPU 越多那么上限可能会更高。而我们关注在单核下数字之间的差异，而不是测试结果数的最大值。&lt;/li&gt;
&lt;li&gt;通常采取几个重点来做基准。基准测试总是在特定的环境中完成。理解上下文很重要。如果您不清楚我们在这里发布的数字，请联系我们，我们会澄清它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说了那么多，接下来让我们深入研究数字：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cni-延迟&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CNI 延迟&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkgwo1j20fz09ta9z_hu_bcb27ae78e6da604.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkgwo1j20fz09ta9z_hu_c79cbb5d5b9bf95d.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkgwo1j20fz09ta9z_hu_a910feabbdde3cea.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkgwo1j20fz09ta9z_hu_bcb27ae78e6da604.webp&#34;
               width=&#34;575&#34;
               height=&#34;353&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNI 延迟
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以上数字显示了两个容器在单个连接上交换尽可能多的 1 字节请求和响应消息时的各种延迟测量。此测试主要显示特定转发路径是否非常有利于吞吐量而非延迟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cilium Sockmap 正在大力利用其能够在套接字级别上运行的优势。这仅适用于节点内的连接。&lt;/li&gt;
&lt;li&gt;下一个最佳类别是在 IPVLAN 模式下运行的 Cilium，netfilter/iptables 已完全删除。Cilium 是否在加载安全策略规则时运行是有区别的，但这种差异很小。这是因为用于策略实施的高效的每 CPU 哈希表可以最大限度地减少开销。请注意，此数字已包含负载平衡 BPF 映射查找，因此此模式允许替换其他测试未考虑的 kube-proxy。&lt;/li&gt;
&lt;li&gt;接下来是 Flannel 和 Cilium 以 veth 模式运行。Flannel 是一个使用 Linux 路由表的最小网络插件。极简主义得到了回报，但这也意味着 flannel 不能执行任何策略执行，并且必须依赖于 iptables 或 IPVS 模式的 kube-proxy。由于执行了一些工作以在连接过程中启用策略实施，即使之前未加载任何策略规则，Cilium 也会略微恶化。&lt;/li&gt;
&lt;li&gt;Calico 在我们的测试中显示出略微增加的开销。可能由于添加了更多的 iptables 规则并且正在使用更多的 netfilter 链。我们没有为此特定测试加载任何策略规则到 Calico 但是假设使用 ipset 将允许缩放 OK。不如每个 CPU 哈希表好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些基准测试的典型敌人是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上下文在内核和用户空间之间切换。这些数字会由于 &lt;strong&gt;很多&lt;/strong&gt; 当L4/L7代理会现实的更糟。&lt;/li&gt;
&lt;li&gt;任何每个数据包开销都会产生巨大影响。冷缓存和数据结构也会产生负面影响。必须遍历的代码越少越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cni-rr&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CNI RR&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hu_b3dcd470719edb61.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hu_99c4a33a411437a5.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hu_95162ba5fe864bac.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hu_b3dcd470719edb61.webp&#34;
               width=&#34;760&#34;
               height=&#34;454&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNI RR
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图显示了执行相同基准测试的每秒请求数。每秒请求与延迟相当重叠。对于之前的测试，这些数字是按 CPU 核心测量的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cni-stream&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CNI Stream&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmjsdpnj20wk0iuaa4_hu_3f6a241e5d91472c.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmjsdpnj20wk0iuaa4_hu_1399a28bf196520.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmjsdpnj20wk0iuaa4_hu_b34d186c3a3468a1.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmjsdpnj20wk0iuaa4_hu_3f6a241e5d91472c.webp&#34;
               width=&#34;760&#34;
               height=&#34;439&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNI Stream
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最后一张图说明了频谱的相反情况。TCP_STREAM 测试试图通过单个 TCP 连接抽取尽可能多的字节。这是内存带宽可以发挥作用的地方，网络硬件或云供应商限制通常可以人为地限制基准。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抛开 Sockmap 的数据，我们可以看到 IPVLAN 模式比其他所有模式都有明显的优势。&lt;/li&gt;
&lt;li&gt;我们预计 Calico 与 Cilium 的数字相似，所以我们可能会错误地配置一些东西。任何帮助表示赞赏。Calico 在 TCP_STREAM 中表现更差并没有多大意义，因为此测试中的 iptables 开销在大量数据中分摊。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-带有-sockmap-的-cni-stream&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;带有 SockMap 的 CNI Stream&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu_121bcf7dc3314f63.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu_8886913a347392a5.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu_c67e6e4ed16f5b8c.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu_121bcf7dc3314f63.webp&#34;
               width=&#34;579&#34;
               height=&#34;343&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      带有 SockMap 的 CNI Stream
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;将 Sockmap 添加回图片证明了在套接字级别进行网络连接的性能优势。同样，这种好处仅在本地进程之间获得，因为当 sidecar 代理生效时或者当服务被调度到同一节点上以便改进本地通信时，它经常发生。&lt;/p&gt;
&lt;h2 id=&#34;用-cos-支持-gke&#34;&gt;用 COS 支持 GKE&lt;/h2&gt;
&lt;p&gt;一个全新的 &lt;a href=&#34;https://docs.cilium.io/en/v1.4/gettingstarted/k8s-install-gke/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;指南&lt;/a&gt; 记录了如何使用 COS 在 GKE 上运行 Cilium。一个全新的 &lt;a href=&#34;https://github.com/cilium/cilium/tree/master/examples/kubernetes/node-init&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-init DaemonSet&lt;/a&gt; 可以通过安装 BPF 文件系统并重新配置 kubelet 以在 CNI 模式下运行来准备 GKE 节点。使用 &lt;a href=&#34;https://github.com/cilium/cilium-etcd-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cilium-etcd-operator&lt;/a&gt; 提供 kvstore 要求，同时保持安装简单。&lt;/p&gt;
&lt;h2 id=&#34;14-发布亮点&#34;&gt;1.4 发布亮点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多集群&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;增加全球服务，通过注释实现跨多个 Kubernetes 服务的 Kubernetes 服务。 （测试版）&lt;/li&gt;
&lt;li&gt;许多改进的安装指南，包括在使用 &lt;a href=&#34;https://github.com/cilium/cilium-etcd-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cilium-etcd-operator&lt;/a&gt; 时自动提取 SSL 证书的工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明加密（测试版）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用带有PSK的IPsec将所有pod/host加密到pod/host通信。&lt;/li&gt;
&lt;li&gt;IPv4 和 IPv6&lt;/li&gt;
&lt;li&gt;PSK 通过 Kubernetes Secret 配置&lt;/li&gt;
&lt;li&gt;无需修改 app 或 pod。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPVLAN 支持（测试版）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;利用 IPVLAN 的新的替代数据路径模式取代了 veth 对的使用，以改善延迟和性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS请求/响应授权&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;现在，基于每个服务执行的实际 DNS 请求和响应，强制执行基于 FQDN 的安全策略。&lt;/li&gt;
&lt;li&gt;能够指定服务可以执行的 DNS 请求的策略。&lt;/li&gt;
&lt;li&gt;用于查询各个端点执行的 FQDN 主机名查找的 API 和 CLI&lt;/li&gt;
&lt;li&gt;能够在代理还原上恢复 FQDN 映射以进行持久映射&lt;/li&gt;
&lt;li&gt;每个端点可配置的最小 TTL 和最大 FQDN 主机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flannel 整合（测试版）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;能够在 flannel 上运行 Cilium。Flannel 提供网络，Cilium 提供负载平衡和策略实施。&lt;/li&gt;
&lt;li&gt;能够挂钩现有的 Flannel 部署而无需重新启动任何 pod。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于 AWS 元数据的策略实施（alpha）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;能够根据 AWS 元数据指定策略规则，例如 EC2 标签，安全组名称，VPC 名称，子网名称等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他指标和监控&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;联网&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;通过 kvstore 实现新的简单 PodCIDR 路由传播模式。通过 --auto-direct-node-routes`启用。&lt;/li&gt;
&lt;li&gt;现在，对于新安装，IPv6 现在已禁用。现有的 ConfigMaps 将继续当前行为。启用通过 &lt;code&gt;--enable-ipv6=true&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;能够在不使用该 &lt;code&gt;--enable-ipv4=false&lt;/code&gt; 选项 分配任何 IPv4 地址的情况下运行仅 IPv6 集群。&lt;/li&gt;
&lt;li&gt;改进了负载均衡器的持久行为&lt;/li&gt;
&lt;li&gt;BPF sockmap 支持加速本地进程通信。可通过选项 &lt;code&gt;--sockops-enable&lt;/code&gt; （alpha）获得&lt;/li&gt;
&lt;li&gt;从 IP 地址识别的解耦端点，以支持任意 IP 寻址模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率和规模&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;大大提高了 CiliumEndpoint CRD 的可扩展性。不再需要为大型部署禁用 CEP。&lt;/li&gt;
&lt;li&gt;引入基于CIDR/DNS的规则的每节点本地标识，不需要集群或全局范围。在节点 23 上执行 DNS 请求的 pod 导致该 pod 的白名单 IP 不再对集群中的其他节点产生任何影响。&lt;/li&gt;
&lt;li&gt;现在，默认情况下禁用 IPv6 以减少小型部署中的内存占用。&lt;/li&gt;
&lt;li&gt;现在，默认情况下禁用 BPF 映射预分配，以减少小型部署中的内存占用。&lt;/li&gt;
&lt;li&gt;用于代理和客户端命令的单个二进制文件以减少容器图像大&lt;/li&gt;
&lt;li&gt;将 bugtool 编译为静态二进制文件&lt;/li&gt;
&lt;li&gt;新的 cilium-operator 提供单例任务，如 CEP 垃圾收集。&lt;/li&gt;
&lt;li&gt;CNI ADD 上的同步 pod 标签检索。这可以稍微降低 pod 调度速率，但避免在没有 init 策略的情况下启动 pod 的策略丢失。&lt;/li&gt;
&lt;li&gt;状态探测器现在同时收集状态以提高准确性。&lt;/li&gt;
&lt;li&gt;终止时更好的信号处理和新的 terminationGracePeriodSeconds 默认值为 1 秒，以最大限度地减少代理的停机时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;增加了对 Kubernetes 1.13 的支持&lt;/li&gt;
&lt;li&gt;支持自动挂载 BPF 文件系统的新 CRI-O 版本&lt;/li&gt;
&lt;li&gt;新的 NodeInit DaemonSet 为 Cilium 安装自动准备 GKE 节点。这样可以使用 COS 和自动缩放。&lt;/li&gt;
&lt;li&gt;当 cilium 不管理 kube-dns 时，cilium-operator 现在会自动重启 kube-dns。这简化了托管 Kubernetes 产品的初始安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;改进了 Istio 集成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观测&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;新指标：kvstore 操作，代理上游/处理延迟，转发和丢弃字节，节点事件，节点数，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;标准安装现在使用 &lt;a href=&#34;https://github.com/cilium/cilium-etcd-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cilium-etcd-operator&lt;/a&gt; ，不再依赖于提供外部 kvstore 的用户。&lt;/li&gt;
&lt;li&gt;新的 GKE 指南，包括 COS 支持&lt;/li&gt;
&lt;li&gt;使用 eksctl 的简化 EKS 指南&lt;/li&gt;
&lt;li&gt;使用自动化工具改进了集群网格指南&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;升级说明&#34;&gt;升级说明&lt;/h2&gt;
&lt;p&gt;像往常一样，请按照&lt;a href=&#34;https://cilium.readthedocs.io/en/v1.4/install/upgrade/#upgrading-minor-versions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;升级指南&lt;/a&gt; 升级您的 Cilium 部署。随意在 &lt;a href=&#34;https://cilium.herokuapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt; 上 ping 我们。&lt;/p&gt;
&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;发行说明和二进制文件： &lt;a href=&#34;https://github.com/cilium/cilium/releases/tag/1.4.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;容器 image： &lt;code&gt;docker.io/cilium/cilium:v1.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes 的无服务器框架的评估</title>
      <link>https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/</link>
      <pubDate>Thu, 08 Nov 2018 13:20:46 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtshzvvdnj20m808ct8v_hu_4892e0d54a6a5e35.webp 400w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtshzvvdnj20m808ct8v_hu_932ce1511e71617d.webp 760w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtshzvvdnj20m808ct8v_hu_53e170da5ef30b66.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtshzvvdnj20m808ct8v_hu_4892e0d54a6a5e35.webp&#34;
               width=&#34;760&#34;
               height=&#34;285&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://rancher.com/blog/2018/2018-04-23-evaluation-of-serverless-frameworks-for-kbe/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Rancher 1.6 和 Rancher 2.0 底层容器编排引擎的术语和概念略微有所不同。想要了解这些差异就需要先了解 Cattle 和 Kubernetes 之间的根本区别。对于使用过 Cattle 或者 Kubernetes 的新手来说，这篇文章比较适合您。同时你也可以从这里获取到容器编排引擎 Cattle 到 Kubernetes 的对应关系词汇表 cheatsheet。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rancher.com/tags/serverless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;无服务器&lt;/a&gt; &lt;a href=&#34;https://rancher.com/tags/kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在 Pokemon Go 的早期，我们都惊讶于 Niantic 如何在全球范围内扩展其用户群，现在看来他们应该是以无缝地向其容器集群添加额外的节点以容纳更多的玩家和环境，所有这一切都可以通过使用 Kubernetes 作为容器编排工具来实现。Kubernetes 在扩展和管理容器基础架构中，能够从开发者角度抽象出部分过程和低级依赖关系。这使它成为一个非常有效的平台，用于开发和维护跨多个容器的应用程序服务。本文将探讨如何利用 K8S 的设计参数和服务编排功能，并将它们与无服务器框架和函数即服务（FaaS）结合起来。特别是，我们将深入研究其特性和功能，分析在 K8s 架构上构建的三个无服务器框架的运行性能和效率：（i）Fission; （ii）OpenFaaS; （iii）Kubeless。&lt;/p&gt;
&lt;h2 id=&#34;a-为什么-kubernetes-是无服务器的优秀编排系统&#34;&gt;A. 为什么 Kubernetes 是无服务器的优秀编排系统？&lt;/h2&gt;
&lt;p&gt;无服务器体系结构指的是从开发人员中抽象出服务器管理任务的应用程序体系结构，并通过动态分配和管理计算资源来提高开发速度和效率。函数即服务（FaaS）是一个运行时被构建的无服务架构，可以在其上构建无服务器体系结构。FaaS 框架作为短暂的容器运行，它们已经安装了公共语言运行时，并允许在这些运行时内执行代码。&lt;/p&gt;
&lt;p&gt;FaaS 框架应该能够在各种基础架构上运行，以实现真正有用，包括公共云，混合云和内部部署环境。在真实生产环境中基于 FaaS 运行时构建的无服务器框架应该能够依靠经过验证和测试的编排和管理功能来大规模部署容器和分布式工作负载。&lt;/p&gt;
&lt;p&gt;对于编排和管理，无服务器 FaaS 框架依赖 Kubernetes，因为它能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨主机群集编排容器。&lt;/li&gt;
&lt;li&gt;最大化程度的利用企业应用程序所需的硬件资源。&lt;/li&gt;
&lt;li&gt;管理和自动化应用程序部署并提供声明式更新。&lt;/li&gt;
&lt;li&gt;通过挂载存储运行有状态应用程序。&lt;/li&gt;
&lt;li&gt;秒级扩容容器化应用程序并提供支持它们的资源。&lt;/li&gt;
&lt;li&gt;声明式地管理服务。&lt;/li&gt;
&lt;li&gt;提供一个大盘，来检查应用的健康情况，并通过自动重启，自动复制和自动缩放来进行应用程序的自我修复。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn1842j20ao07idgj_hu_bb6f6fcbaefbb0b5.webp 400w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn1842j20ao07idgj_hu_2de61cd76599be18.webp 760w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn1842j20ao07idgj_hu_c4b9ce8d25fda75d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn1842j20ao07idgj_hu_bb6f6fcbaefbb0b5.webp&#34;
               width=&#34;384&#34;
               height=&#34;270&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;无服务器系统可以包括通过客户端请求触发的功能或作为业务服务的一部分执行的功能这两个过程都可以使用容器集群管理器如-kubernetes进行编排资料来源dzonecom&#34;&gt;无服务器系统可以包括通过客户端请求触发的功能或作为业务服务的一部分执行的功能。这两个过程都可以使用容器集群管理器（如 Kubernetes）进行编排。资料来源：dzone.com&lt;/h4&gt;
&lt;p&gt;我们将在本文中介绍三个无服务器框架各自的优点和缺点。这些 FaaS 框架之间的共同点是，它们能够（1）将函数转化为服务; （2）利用 Kubernetes 平台管理这些服务的生命周期。这些框架背后的设计，会由于其用于实现的具体方式的不同而有差异，我们将在下一节中探讨。我们将在以下部分中重点介绍这些框架之间的一些差异：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;框架是在源码级别或 Docker 镜像级别还是在中间运行，例如 buildpacks？&lt;/li&gt;
&lt;li&gt;由于使用公共语言运行库启动容器，冷启动性能的延迟或执行函数期间的延迟分别是多少？&lt;/li&gt;
&lt;li&gt;它们如何为服务分配内存或资源？&lt;/li&gt;
&lt;li&gt;它们如何访问和部署 Kubernetes 的编排和容器管理功能？&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;b-openfaas-和部署-spring-boot-模板&#34;&gt;B. OpenFaaS 和部署 Spring Boot 模板&lt;/h2&gt;
&lt;p&gt;OpenFaaS 是一个无服务器平台，允许使用 Docker 或 Kubernetes 管理函数，因为它是基于 OCI 格式的容器。OpenFaaS 可以支持企业级扩展的功能，如 Docker Universal Control Plane 企业级集群管理解决方案与 Docker Enterprise 或 Tectonic for Kubernetes。OpenFaaS 继承了现有的容器安全功能，例如 r/o 文件系统，权限下降和内容信任。它能够使用 Docker 或 K8s 调度程序/容器编排的管理功能，并且可以使用其相关的丰富的商业和社区供应商生态系统。同样，由于其多语言特性，任何可执行文件都可以打包到 OpenFaas 中的函数中。&lt;/p&gt;
&lt;p&gt;SpringBoot 和 Vertx 是开发微服务的非常流行的框架，它们的易用性已经通过 OpenFaaS 模板扩展到 OpenFaaS。这些模板允许在 OpenFaaS 平台上无缝地开发和部署无服务器函数。模板在&lt;a href=&#34;https://github.com/tmobile/faas-java-templates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;的 github 存储库中可用。让我们来看看如何在 OpenFaaS 平台上部署 SpringBoot 模板。&lt;/p&gt;
&lt;h3 id=&#34;在本地安装-openfaas&#34;&gt;在本地安装 OpenFaaS&lt;/h3&gt;
&lt;h4 id=&#34;在本地计算机上下载和安装模板&#34;&gt;在本地计算机上下载和安装模板&lt;/h4&gt;
&lt;p&gt;我们需要安装和配置 FaaS CLI 以与本地或远程 K8S 或 Docker 配合使用。在本练习中，我们将使用本地 Docker 客户端，并在后续工作中将其扩展到基于云的 GKE 集群。&lt;/p&gt;
&lt;p&gt;对于最新版本的 CLI 类型：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ curl -sL https://cli.openfaas.com | sudo sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[或通过 MacOS 上的 brew install faas-cli。]&lt;/p&gt;
&lt;p&gt;使用以下命令验证本地安装的模板：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;faas-cli new --list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在我们创建无服务器函数之前，我们必须在本地计算机上安装这些模板。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; faas-cli template pull https://github.com/tmobile/faas-java-templates.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;查看帮助菜单&#34;&gt;查看帮助菜单&lt;/h4&gt;
&lt;p&gt;可以为所有命令调用-help 标志。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ faas-cli --help&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从命令行管理您的 OpenFaaS 功能&lt;/p&gt;
&lt;p&gt;用法： &lt;code&gt;faas-cli&lt;/code&gt; [flags] &lt;code&gt;faas-cli&lt;/code&gt; [command]&lt;/p&gt;
&lt;p&gt;可用命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build&lt;/code&gt; 构建 OpenFaaS 功能容器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;deploy&lt;/code&gt; 部署 OpenFaaS 功能&lt;/p&gt;
&lt;p&gt;&lt;code&gt;help&lt;/code&gt; 有关任何命令的帮助&lt;/p&gt;
&lt;p&gt;&lt;code&gt;push&lt;/code&gt; 将 OpenFaaS 功能推送到远程仓库（Docker Hub）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; 删除已部署的 OpenFaaS 功能&lt;/p&gt;
&lt;p&gt;&lt;code&gt;version&lt;/code&gt; 显示客户端版本信息&lt;/p&gt;
&lt;p&gt;参数： &lt;code&gt;-h&lt;/code&gt;，&lt;code&gt;--help&lt;/code&gt; 帮助 FAAS-CLI &lt;code&gt;-f&lt;/code&gt;，&lt;code&gt;--yaml string&lt;/code&gt; 描述函数的 yaml 文件的路径&lt;/p&gt;
&lt;p&gt;有关命令的更多信息，请使用 &lt;code&gt;faas-cli&lt;/code&gt; [command] &lt;code&gt;--help&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;用已安装的模板创建函数&#34;&gt;用已安装的模板创建函数&lt;/h4&gt;
&lt;p&gt;使用来自Vertx/SpringBoot模板的github存储库中我们感兴趣的函数，我们可以创建一个函数（用我们的函数替换大括号内的文本，我们使用springboot但你可以用vertx模板代替它）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;faas-cli new {function of function} --lang springboot&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用 mvnw，命令是&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;faas-cli new mvnw --lang vertx | springboot 
Folder: mvnw created.
Function created in folder: mvnw 
Stack file written: mvnw.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mvnw.yml 的内容现在可以与 CLI 一起使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果您的群集是远程的或未在 8080 端口上运行 - 请在继续之前在 YAML 文件中对其进行编辑。为我们的函数生成了 handler.java 文件。您可以编辑 pom.xml 文件，并在“build”步骤中安装所有依赖项。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;构建函数&#34;&gt;构建函数&lt;/h4&gt;
&lt;p&gt;现在我们已经创建了函数逻辑，我们可以使用 faas cli build 命令构建函数。我们将使用本地 Docker 客户端将该函数构建到 docker 镜像中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ faas-cli build -f mvnw.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Building: mvnw.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Clearing temporary build folder: ./build/mvnw/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Preparing ./mvnw/ ./build/mvnw/function
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Building: mvnw with node template. Please wait..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker build -t mvnw .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sending build context to Docker daemon  8.704kB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Step 1/19 : FROM node:6.11.2-alpine
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ---&amp;gt; 16566b7ed19e
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Step 19/19 : CMD fwatchdog
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ---&amp;gt; Running in 53d04c1631aa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; ---&amp;gt; f5e1266b0d32
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Removing intermediate container 53d04c1631aa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Successfully built f5e1266b0d32
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Successfully tagged mvnw:latest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Image: mvnw built.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;推送您的函数可选因为我们正在进行本地安装&#34;&gt;推送您的函数（可选，因为我们正在进行本地安装）&lt;/h4&gt;
&lt;p&gt;为了部署我们的函数，我们将编辑 mvnw.yml 文件并将“image”行设置为 Docker Hub 上适用的用户名，例如：hishamhasan/mvnw。然后我们将再次构建该函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ faas-cli push -f mvnw.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Pushing: mvnw to remote repository.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The push refers to a repository &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;docker.io/hishamhasan/mvnw&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成此操作后，镜像将被推送到 Docker Hub 或远程 Docker registry，我们可以部署并运行该函数。&lt;/p&gt;
&lt;h4 id=&#34;部署函数&#34;&gt;部署函数&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ faas-cli deploy -f mvnw.yml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Deploying: mvnw.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;No existing service to remove
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Deployed.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;URL: &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;http://localhost:8080/function/mvnw&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;http://localhost:8080/function/mvnw&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;调用函数&#34;&gt;调用函数&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
$ faas-cli invoke -f mvnw.yml callme
Reading from STDIN - hit (Control + D) to stop.
This is my message

{&amp;#34;status&amp;#34;:&amp;#34;done&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们还可以将命令传递给函数，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ date | faas-cli invoke -f mvnw.yml mvnw
{&amp;#34;status&amp;#34;:&amp;#34;done&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;在-google-cloud-platform-上安装-openfaas&#34;&gt;在 Google Cloud Platform 上安装 OpenFaaS&lt;/h3&gt;
&lt;p&gt;在使用 OpenFaaS 时，我们不限于任何本地或云基础架构。现在我们已经在本地 Docker 集群中部署了模板，我们可以通过在 GCP 中的 GKE 上设置它来利用 OpenFaaS 的多功能性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为的 GCP 项目&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/sdk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此处&lt;/a&gt; 下载并安装 Google Cloud SDK。安装 SDK 后，运行 gcloud init，然后将默认项目设置为 openfaas。&lt;/li&gt;
&lt;li&gt;使用 gcloud 安装 kubectl： &lt;code&gt;gcloud components install kubectl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;导航到 API Manager&amp;gt;凭据&amp;gt;创建凭据&amp;gt;服务帐户密钥。&lt;/li&gt;
&lt;li&gt;选择 JSON 作为密钥类型。将文件重命名为 json 并将其放在项目中&lt;/li&gt;
&lt;li&gt;添加刚刚在 ComputeEngine&amp;gt; Metadata&amp;gt; SSH Keys 下创建的 SSH 密钥，并使用您的公共 SSH 密钥作为值创建名为 sshKeys 的元数据条目。&lt;/li&gt;
&lt;li&gt;创建一个三节点 Kubernetes 集群，每个节点位于不同的区域中。在&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/federation/#selecting-the-right-number-of-clusters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt; 阅读 有关群集联合的信息，以了解如何选择每个群集中的群集数和节点数，这些群集可能会根据负载或增长频繁更改。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;k8s_version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;gcloud container get-server-config --format&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;json &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; jq -r &lt;span class=&#34;s1&#34;&gt;&amp;#39;.validNodeVersions[0]&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gcloud container clusters create demo &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   --cluster-version&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;k8s_version&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   --zone&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;us-west1-a &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   --additional-zones&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;us-west1-b,us-west1-c &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   --num-nodes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   --machine-type&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;n1-standard-2 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   --scopes&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;default,storage-rw
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将默认节点池的大小增加到所需的节点数（在此示例中，我们将按比例增加 3 到 9 个节点）：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcloud container clusters resize --size=3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;您可以通过调用此 &lt;a href=&#34;https://cloud.google.com/sdk/gcloud/reference/container/clusters/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;页面中&lt;/a&gt; 所述的合适的 SDK 命令来执行集群管理功能，例如删除集群。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcloud container clusters delete demo -z=us-west1-a&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;完整的管理设置&#34;&gt;完整的管理设置&lt;/h3&gt;
&lt;p&gt;设置 kubectl 的凭据：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcloud container clusters get-credentials demo -z=us-west1-a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建集群管理员用户：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create clusterrolebinding &lt;span class=&#34;s2&#34;&gt;&amp;#34;cluster-admin-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;whoami&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--clusterrole&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-admin &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--user&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;gcloud config get-value core/account&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;授予 kubernetes-dashboard 管理员权限（确保在非生产环境中完成）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl create clusterrolebinding &lt;span class=&#34;s2&#34;&gt;&amp;#34;cluster-admin-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;whoami&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--clusterrole&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;cluster-admin &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--user&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;gcloud config get-value core/account&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以通过使用 kubectl 反向代理在浏览器（或在 &lt;a href=&#34;http://localhost:9099/ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http//localhost:9099/ui&lt;/a&gt; ）上调用 &lt;code&gt;kubectl proxy --port=8080&lt;/code&gt; 和导航到 &lt;a href=&#34;http://localhost:8080/ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http//localhost:8080/ui&lt;/a&gt; 来访问 port-8080 上的 kubernetes-dashboard：&lt;a href=&#34;http://localhost:9099/ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost:9099/ui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl proxy --port=9099 &amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Kubernetes 集群由主节点和节点资源组成 - 主节点协调集群，节点运行应用程序，并通过 Kubernetes API 进行通信。我们使用 OpenFaaS CLI 构建了容器化应用程序并编写了.yml 文件来构建和部署该函数。通过在 Kubernetes 集群中的节点之间部署该函数，我们允许 GKE 分发和调度我们的节点资源。我们的节点已经配置了处理容器操作的工具，可以通过 kubectl CLI。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn3annj20d80apmy6_hu_793cc87fb3a4a082.webp 400w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn3annj20d80apmy6_hu_675559dd3a595cff.webp 760w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn3annj20d80apmy6_hu_de6715d690ea19fc.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn3annj20d80apmy6_hu_793cc87fb3a4a082.webp&#34;
               width=&#34;476&#34;
               height=&#34;385&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;资料来源dzonecom&#34;&gt;资料来源：dzone.com&lt;/h4&gt;
&lt;h3 id=&#34;使用基本身份验证部署-openfaas&#34;&gt;使用基本身份验证部署 OpenFaaS。&lt;/h3&gt;
&lt;p&gt;克隆 openfaas-gke 存储库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/tmobile/faas-java-templates.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; openfaas-gke
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建 openfaas 和 openfaas-fn 名称空间以在多租户设置中部署 OpenFaaS 服务：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl apply -f ./namespaces.yaml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要在 openfaas 命名空间中部署 OpenFaaS 服务：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl apply -f ./openfaas&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这将为 OpenFaaS 网关，FaaS-netesd（K8S 控制器），Prometheus，警报管理器，Nats 和队列工作者提供 K8s pods，部署和服务。&lt;/p&gt;
&lt;p&gt;我们需要在通过设置身份验证在 Internet 上公开 OpenFaaS 之前保护我们的网关。我们可以使用一组凭据创建一个通用的 basic-auth 秘密：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n openfaas create secret generic basic-auth &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;admin &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--from-literal&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;admin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们可以为我们的 OpenFaaS 网关部署 Caddy，它既可以作为反向代理，又可以作为强大的负载均衡器，并支持 WebSocket 连接：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl apply -f ./caddy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后，我们将使用 K8s 服务对象公开的外部 IP 访问 OpenFaaS 网关 UI，并使用我们的凭据访问 http://&amp;lt;EXTERNAL-IP&amp;gt;。我们可以通过运行 kubectl get svc 来获取外部 IP。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;get_gateway_ip&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; kubectl -n openfaas describe service caddy-lb &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep Ingress &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk&lt;span class=&#34;s1&#34;&gt;&amp;#39;{ print $NF }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;until&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;get_gateway_ip&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; sleep1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;gateway_ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;get_gateway_ip&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OpenFaaS Gateway IP: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gateway_ip&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：如果外部 IP 地址显示为&lt;pending&gt;，请等待一分钟再次输入相同的命令。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;如果您尚未执行上一个练习，请通过调用安装 OpenFaaS CLI。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl-sL cli.openfaas.com | sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后使用 CLI，凭据和 K8s 服务公开的外部 IP 登录：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;faas-cli login -u admin -p admin --gateway http://&amp;lt;EXTERNAL-IP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：（a）您可以通过创建 Ingress 资源，使用 Google Cloud L7 HTTPS 负载均衡器公开 OpenFaaS 网关。您可以在 &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/docs/tutorials/http-balancer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt; 找到有关创建负载均衡器的详细指南。（b）您可以使用密码创建文本文件，并将该文件与-password-stdin 标志一起使用，以避免在 bash 历史记录中输入密码。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;您可以使用先前在上一个练习中发布的镜像并部署无服务器功能&#34;&gt;您可以使用先前在上一个练习中发布的镜像并部署无服务器功能。&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$ faas-cli deploy -f mvnw.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;deploy 命令在当前目录中查找 mvnw.yml 文件，并部署 openfaas-fn 命名空间中的所有函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：（a）您可以使用 com.openfaas.scale.min 标签设置最小运行 pod 数，并为 autoscaler com.openfaas.scale.max 设置最小副本数。OpenFaaS 的默认设置是每个功能运行一个 pod，并且在负载下最多可扩展到 20 个 pod&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;调用无服务器功能&#34;&gt;调用无服务器功能。&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;faas-cli invoke mvnw--gateway=http://&amp;lt;GATEWAY-IP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;您可以随时注销&#34;&gt;您可以随时注销：&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;faas-cli logout -gateway http://&amp;lt;EXTERNAL-IP&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;c-fission-和部署简单的-http-请求&#34;&gt;C. Fission 和部署简单的 HTTP 请求&lt;/h2&gt;
&lt;p&gt;Fission 是一个无服务器框架，它进一步抽象出容器镜像，并允许仅通过函数在 K8s 上创建 HTTP 服务。Fission 中的容器镜像包含语言运行时，一组常用的依赖项和一个用于函数的动态加载器。可以定制这些图像，例如打包二进制依赖项。Fission 能够通过维护一个正在运行的容器池来优化冷启动开销。当新请求来自客户端应用程序或业务服务时，它会将该函数复制到容器中，动态加载它，并将请求路由到该实例。因此，对于 NodeJS 和 Python 函数，它能够最小化 100 毫秒的冷启动开销。&lt;/p&gt;
&lt;p&gt;通过在源码级别进行操作，Fission 使用户不必处理容器的镜像构建，将镜像推送到注册表，管理注册表凭据，镜像版本控制和其他管理任务。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn7oehj20hs0dcglu_hu_33517577efbfaf27.webp 400w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn7oehj20hs0dcglu_hu_478d4affa1c34ffa.webp 760w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn7oehj20hs0dcglu_hu_bf76ceb708c9f724.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn7oehj20hs0dcglu_hu_33517577efbfaf27.webp&#34;
               width=&#34;640&#34;
               height=&#34;480&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;-serverless-functions-as-service-for-kubernetes&#34;&gt;&lt;a href=&#34;https://kubernetes.io/blog/2017/01/fission&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/blog/2017/01/fission&lt;/a&gt;-serverless-functions-as-service-for-kubernetes&lt;/h4&gt;
&lt;p&gt;如上图所示，Fission 被设计为一组微服务，主要组件如下所述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跟踪功能，HTTP 路由，事件触发器和环境镜像的控制器;&lt;/li&gt;
&lt;li&gt;管理空闲环境容器池的池管理器，将函数加载到这些容器中，并定期杀死函数实例以管理容器开销;&lt;/li&gt;
&lt;li&gt;一种路由器，它接收 HTTP 请求并将它们路由到 poolmgr 或已在运行的实例中的新鲜函数实例。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以使用在上一个练习中 GCP 上创建的 K8s 群集在 Fission 上部署 HTTP 请求。让我们走过这个过程吧。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 Helm CLI，Helm 是一个 Kubernetes 包管理器。让我们初始化 Helm：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ helm init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 GKE 命名空间中安装 Fission&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ helm install --namespace fission https://github.com/fission/fission/releases/download/0.7.0/fission-all-0.7.0.tgz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 Fission CLI&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -Lo fission https://github.com/fission/fission/releases/download/0.7.0/fission-cli-osx&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x fission &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo mv fission /usr/local/bin/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; 在 &lt;a href=&#34;https://github.com/fission/fission/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt; 下载 Windows 可执行文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建 HTTP 服务我们将创建一个简单的 HTTP 服务来打印 Hello World。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cat &amp;gt; hello.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;def main&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;context&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    print &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Fission 上部署 HTTP 服务&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ fission &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; create --name hello --env python --code hello.py --route /hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl http://&amp;lt;fission router&amp;gt;/hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello, world!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;d-kubeless-和部署-spring-boot-模板&#34;&gt;D. Kubeless 和部署 Spring Boot 模板&lt;/h2&gt;
&lt;p&gt;Kubeless 是一个 Kubernetes 原生无服务器框架，可以将功能部署在 K8s 集群上，同时允许用户利用 Kubernetes 资源提供自动扩展，API 路由，监控和故障排除。Kubeless 使用 Kubernetes 自定义资源定义来创建自定义 kubernetes 资源的功能。自定义资源是 &lt;a href=&#34;https://kubernetes.io/docs/reference/api-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API&lt;/a&gt; 中的端点，用于存储&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API 对象&lt;/a&gt;的集合某种类型的 K8s pod 对象，它代表了特定 K8s 安装的自定义。自定义资源非常有用，因为它们可以通过动态注册进行配置然后在正在运行的集群中删除，集群管理员可以独立于集群本身更新自定义资源。Kubeless 利用这些功能并运行集群内控制器，可以跟踪这些自定义资源并按需启动运行时。&lt;/p&gt;
&lt;p&gt;我们可以使用在上一个练习中 GCP 上创建的 K8s 群集在 Fission 上部署 HTTP 请求。让我们走过这个过程吧。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;访问 Kubernetes 仪表板&lt;/p&gt;
&lt;p&gt;在 K8s 集群正在运行的情况下，我们可以使用 kubectl 在 8080 端口上使用仪表板：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl proxy --port=8080&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsjw13nsj218g0jrq81_hu_382ad6a76d00ad86.webp 400w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsjw13nsj218g0jrq81_hu_d929cda4a270fea6.webp 760w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsjw13nsj218g0jrq81_hu_ffacc10de48fe325.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsjw13nsj218g0jrq81_hu_382ad6a76d00ad86.webp&#34;
               width=&#34;760&#34;
               height=&#34;337&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以通过浏览器导航到&lt;a href=&#34;http://localhost8080/ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost8080/i&lt;/a&gt;来访问仪表板&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 Kubeless CLI&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -L https://github.com/kubeless/kubeless/releases/download/0.0.20/kubeless_darwin-amd64.zip &amp;gt; kubeless.zip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ unzip kubeless.zip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo cp bundles/kubeless_darwin-amd64/kubeless /usr/local/bin/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://github.com/kubeless/kubeless/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt; 下载 Windows 可执行文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 K8s 群集中部署 Kubeless&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwx4ug1ieuj20jr0c3dgl_hu_fc86d34756d14b31.webp 400w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwx4ug1ieuj20jr0c3dgl_hu_a059b9eb07d40ef9.webp 760w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwx4ug1ieuj20jr0c3dgl_hu_67dd85a44ff6239d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwx4ug1ieuj20jr0c3dgl_hu_fc86d34756d14b31.webp&#34;
               width=&#34;711&#34;
               height=&#34;435&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们将使用此&lt;a href=&#34;https://github.com/kubeless/kubeless/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;链接中&lt;/a&gt; 的清单在 K8s 群集中部署 Kubless。根据清单创建一个 kubeless 命名空间，一个函数 ThirdPartyResource，一个 kubeless 控制器，并在进程中设置一个 kafka，zookeeper StatefulSet。Kubless 的一个主要优点是它具有高度的 Kubernetes 原生特性，它可以设置非 rbac 和 rbac 特定环境。下面的屏幕截图显示了如何使用 kubectl 命令在非 rbac 环境中部署 kubeless。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwx4ug4tx0j20hr05bwew_hu_ab5e202a725bdb01.webp 400w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwx4ug4tx0j20hr05bwew_hu_524e63aa9ca7ab60.webp 760w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwx4ug4tx0j20hr05bwew_hu_872f59140e12677e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwx4ug4tx0j20hr05bwew_hu_ab5e202a725bdb01.webp&#34;
               width=&#34;639&#34;
               height=&#34;191&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建函数&lt;/p&gt;
&lt;p&gt;我们可以创建一个服务函数，并从请求中接受方法，URL，标题和请求体。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;const &lt;span class=&#34;nv&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; require&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    http.createServer&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;request, response&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      const &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; headers, method, url &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; request&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nb&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      request.on&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        console.error&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;.on&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;chunk&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        body.push&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;chunk&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;.on&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nv&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Buffer.concat&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;body&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.toString&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // 此时，我们有标题，方法，网址和请求体，现在可以做任何我们需要的事情来回应这个要求。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;})&lt;/span&gt;.listen&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;8080&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; // 激活此服务器，监听 &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt; 端口。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Kubeless 环境中运行函数&lt;/p&gt;
&lt;p&gt;我们可以通过提供以下信息向 Kubeless 注册该函数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用于通过 Web 访问该函数的名称&lt;/li&gt;
&lt;li&gt;用于访问该函数的协议&lt;/li&gt;
&lt;li&gt;要执行以运行代码的语言运行时&lt;/li&gt;
&lt;li&gt;包含函数代码的文件的名称&lt;/li&gt;
&lt;li&gt;文件内部函数的名称&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过添加上面的变量 1-5，我们调用以下命令在 Kubeless 中注册和部署函数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt; kubeless function deploy serverequest--trigger-http --runtime nodejs6 --handler serverequest.createServer --from-file /tmp/serverequest.js&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;e无服务器平台的评估&#34;&gt;E.无服务器平台的评估&lt;/h2&gt;
&lt;p&gt;我们评估的每个无服务器平台都有其独特的价值主张。使用 OpenFaas，任何进程或容器都可以打包为 Linux 或 Windows 的无服务器功能。对于企业而言，OpenFaaS 使用的体系结构提供了无缝插入计划群集和现有微服务的 CI/CD 工作流的能力，因为 OpenFaaS 是围绕 Docker 构建的，所有功能都打包到 Docker 镜像中。OpenFaaS 还为企业提供了一种通过外部 API，网关管理和执行函数的无缝方式，并管理函数的生命周期，包括通过提供商进行部署，扩展和 secret 管理。&lt;/p&gt;
&lt;p&gt;Fission 具有事件驱动架构，使其成为短期无状态应用程序的理想选择，包括 REST API 或 webhook 实现以及 DevOps 自动化。使用 Fission 的一个很好的用例可能是开发聊天机器人的后端，因为 Fission 可以实现良好的冷启动性能，并在需要时通过保持运行时的容器池来提供快速响应时间。&lt;/p&gt;
&lt;p&gt;最后，Kubeless 架构利用原生 Kubernetes 概念来部署和管理功能，例如自定义资源定义，用于定义功能和自定义控制器来管理函数，将其部署为 Kubernetes 部署并通过 Kubernetes 服务公开它。与 Kubernetes 原生功能的紧密结合将吸引现有的 Kubernetes 用户，降低所需的学习曲线并无缝插入现有的 Kubernetes 架构。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-hisham&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Hisham&#34; srcset=&#34;
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn5g0oj206y06y74m_hu_2a962372ef7d1176.webp 400w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn5g0oj206y06y74m_hu_64d3796c1d069c64.webp 760w,
               /blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn5g0oj206y06y74m_hu_af78bd54b1124d52.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/evaluation-of-serverless-frameworks-for-kbe/61411417ly1fwtsgn5g0oj206y06y74m_hu_2a962372ef7d1176.webp&#34;
               width=&#34;250&#34;
               height=&#34;250&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Hisham
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hisham 是一位咨询企业解决方案架构师，在利用容器技术解决基础架构问题和更快地部署应用程序以及更高级别的安全性，性能和可靠性方面拥有丰富的经验 最近，Hisham 一直在为各种中间件应用程序利用容器和云原生架构，以在整个企业中部署复杂的关键任务服务。在进入咨询领域之前，Hisham 曾在 Aon Hewitt，Lexmark 和 ADP 从事软件实施和技术支持工作。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何将云原生工作负载映射到 Kubernetes 中的控制器</title>
      <link>https://cloudnativecn.com/blog/how-to-map-cloud-native-workloads-to-kubernetes-controllers/</link>
      <pubDate>Wed, 31 Oct 2018 20:01:03 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/how-to-map-cloud-native-workloads-to-kubernetes-controllers/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://thenewstack.io/how-to-map-cloud-native-workloads-to-kubernetes-controllers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Kubernetes &lt;a href=&#34;https://thenewstack.io/how-kubernetes-is-transforming-into-a-universal-scheduler/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;不仅仅是一个容器管理工具&lt;/a&gt;。它是一个平台，旨在处理包装在任意数量的容器和组合中的各种工作负载。Kubernetes 内置了多个控制器，可映射到云原生架构的各个层。&lt;/p&gt;
&lt;p&gt;DevOps 工程师可以将 Kubernetes 控制器视为指示团队运行的各种工作负载的基础架构需求的手段。他们可以通过声明方法定义所需的配置状态。例如，容器/pod 作为 ReplicationController 的一部分部署保证始终可用。打包为 DaemonSet 的容器​保证在集群的每个节点上运行。声明式的方法使 DevOps 团队能够利用代码控制基础架构。下面讨论的一些部署模式遵循不可变基础结构的原则，其中每个新的部署都会导致原子部署。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-to-map-cloud-native-workloads-to-kubernetes-controllers/61411417ly1fwrcxotk3xj20r30i2n30_hu_43649730e5e039be.webp 400w,
               /blog/how-to-map-cloud-native-workloads-to-kubernetes-controllers/61411417ly1fwrcxotk3xj20r30i2n30_hu_cd4116c1cc9dc5ab.webp 760w,
               /blog/how-to-map-cloud-native-workloads-to-kubernetes-controllers/61411417ly1fwrcxotk3xj20r30i2n30_hu_4a05a3367ba672f5.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/how-to-map-cloud-native-workloads-to-kubernetes-controllers/61411417ly1fwrcxotk3xj20r30i2n30_hu_43649730e5e039be.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;DevOps 工程师可以通过声明方法定义所需的配置状态——每个工作负载映射到控制器。&lt;/p&gt;
&lt;h2 id=&#34;了解云原生用例&#34;&gt;了解云原生用例&lt;/h2&gt;
&lt;p&gt;Kubernetes 的控制平面不断跟踪部署，以确保它们符合 DevOps 定义的所需配置状态。&lt;/p&gt;
&lt;p&gt;Kubernetes 的基本部署单位是一个 pod。它是 Kubernetes 的基本构建块，是 Kubernetes 对象模型中最小和最简单的单元。pod 表示集群上正在运行的进程。无论服务是有状态的还是无状态的，它总是打包并部署为 pod。&lt;/p&gt;
&lt;p&gt;控制器可以在集群中创建和管理多个 pod，处理在集群范围内提供自我修复功能的副本。例如，如果节点发生故障，控制器可能会通过在不同节点上安排相同的 pod 用来自动替换该故障 pod。&lt;/p&gt;
&lt;p&gt;Kubernetes 配有多个控制器，可以处理所需的 pod 状态。如 ReplicationController、Deployment、DaemonSet 和 StatefulSet 控制器。Kubernetes 控制器使用提供的 pod 模板，来创建其负责 pod 的所需状态。与其他 Kubernetes 对象一样，Pod 在 YAML 文件中定义并提交给控制平面。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 中运行云原生应用程序时，运维人员需要了解控制器解决的用例，以充分利用平台的特性。这有助于他们定义和维护应用程序的所需配置状态。&lt;/p&gt;
&lt;p&gt;上一节中介绍的每种模式都映射到特定的 Kubernetes 控制器，这些控制器允许对 Kubernetes 的工作负载进行更精确，细粒度的控制，但是采用自动化方式。&lt;/p&gt;
&lt;p&gt;Kubernetes 的声明式配置鼓励不可变的基础架构。控制平面跟踪和管理部署，以确保在整个应用程序生命周期中维护所需的配置状态。与基于虚拟机的传统部署相比，DevOps 工程师将花费更少的时间来维护工作负载。利用 Kubernetes 原语和部署模式的有效 CI/CD 策略使运营商无需执行繁琐的任务。&lt;/p&gt;
&lt;h3 id=&#34;可扩展层无状态工作负载&#34;&gt;可扩展层：无状态工作负载&lt;/h3&gt;
&lt;p&gt;无状态工作负载在 Kubernetes 中打包并部署为 ReplicaSet。ReplicationController 构成 ReplicaSet 的基础，可确保在任何给定时间始终运行指定数量的 pod 副本。换句话说，ReplicationController 确保一个 pod 或一组同类 pod 总是可用。&lt;/p&gt;
&lt;p&gt;如果有太多 pod，ReplicationController 可能会终止额外的 pod。如果太少，ReplicationController 将继续启动其他 pod。与手动创建的 pod 不同，ReplicationController 维护的 pod 在失败，删除或终止时会自动替换。在诸如内核升级之类的破坏性维护之后，在节点上重新创建 pod。因此，即使应用程序只需要一个 pod，也建议使用 ReplicationController。&lt;/p&gt;
&lt;p&gt;一个简单的用例是创建一个 ReplicationController 对象，以无限期地可靠地运行 pod 的一个实例。更复杂的用例是运行横向扩展服务的几个相同副本，例如 Web 服务器。在 Kubernetes 中部署时，DevOps 团队和运营商将无状态工作负载打包为 ReplicationControllers。&lt;/p&gt;
&lt;p&gt;在最近的 Kubernetes 版本中，ReplicaSets 取代了 ReplicationControllers。它们都针对相同的场景，但 ReplicaSet 使用基于 &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#set-based-requirement&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;集合的标签选择器&lt;/a&gt; ，这使得可以使用基于注释的复杂查询。此外，Kubernetes 中的部署依赖于 ReplicaSet。&lt;/p&gt;
&lt;p&gt;Deployment 是 ReplicaSet 的抽象。在 Deployment 对象中声明所需状态时，Deployment 控制器会以受控速率将实际状态更改为所需状态。&lt;/p&gt;
&lt;p&gt;强烈建议部署管理云原生应用程序的无状态服务。虽然服务可以部署为 pod 和 ReplicaSet，但部署可以更轻松地升级和修补应用程序。DevOps 团队可以使用部署来升级 pod，而无法使用 ReplicaSet 完成。这样就可以在最短的停机时间内推出新版本的应用程序。部署为应用程序管理带来了类似于服务（PaaS）的功能。&lt;/p&gt;
&lt;h3 id=&#34;持久层有状态的工作量&#34;&gt;持久层：有状态的工作量&lt;/h3&gt;
&lt;p&gt;状态工作负载可以分为两类：需要持久存储的服务（单实例）和需要以高可靠性和可用模式运行的服务（复制的多实例）。需要访问持久存储后端的 pod 与为关系数据库运行集群的一组 pod 非常不同。虽然前者需要长期持久的持久性，但后者需要高可用性的工作量。Kubernetes 解决了这两种情况。&lt;/p&gt;
&lt;p&gt;可以通过将底层存储暴露给服务的卷来支持单个 pod。可以将卷映射到调度 pod 的任意节点。如果在集群的不同节点上调度多个 pod 并需要共享后端，则在部署应用程序之前手动配置分布式文件系统（如网络文件系统（NFS）或 Gluster）。云原生态系统中提供的现代存储驱动程序提供容器本机存储，其中文件系统本身通过容器公开。当 pod 只需要持久性和持久性时，请使用此配置。&lt;/p&gt;
&lt;p&gt;对于预计具有高可用性的场景，Kubernetes 提供 StatefulSets - 一组专门的 pod，可确保 pod 的排序和唯一性。这在运行主要/辅助（以前称为主/从）数据库集群配置时尤其有用。&lt;/p&gt;
&lt;p&gt;与部署类似，StatefulSet 管理基于相同容器规范的 pod。与 Deployment 不同，StatefulSet 为其每个 pod 保留唯一标识。这些 pod 是根据相同的规范创建的，但不可互换：每个 pod 都有一个持久标识符，它可以在任何重新安排时保留。&lt;/p&gt;
&lt;p&gt;StatefulSet 对需要以下一项或多项的工作负载非常有用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;稳定，独特的网络标识符。&lt;/li&gt;
&lt;li&gt;稳定，持久的存储。&lt;/li&gt;
&lt;li&gt;有序，优雅的部署和扩展。&lt;/li&gt;
&lt;li&gt;有序，优雅的删除和终止。&lt;/li&gt;
&lt;li&gt;有序的自动滚动更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 对 StatefulSets 的处理方式与其他控制器不同。当正在使用 N 个副本调度 StatefulSet 的 pod 时，将按顺序创建它们，顺序从 0 到 N-1。当删除 StatefulSet 的 pod 时，它们以相反的顺序终止，从 N-1 到 0。在将一个扩展操作应用于 pod 之前，它的所有前驱必须正在运行并准备就绪。Kubernetes 确保在终止 pod 之前，其所有后继者都完全关闭。&lt;/p&gt;
&lt;p&gt;当服务需要运行 Cassandra、MongoDB、MySQL、PostgreSQL 集群或任何具有高可用性要求的数据库工作负载时，建议使用 StatefulSet。&lt;/p&gt;
&lt;p&gt;并非每个持久性工作负载都必须是 StatefulSet。某些容器依赖于持久存储后端来存储数据。为了向这些类型的应用程序添加持久性，pod 可能依赖于由基于主机的存储或容器本机存储后端支持的卷。&lt;/p&gt;
&lt;h3 id=&#34;可并行化层批处理&#34;&gt;可并行化层：批处理&lt;/h3&gt;
&lt;p&gt;Kubernetes 具有用于批处理的内置原语，这对于执行运行到完成作业或预定作业很有用。&lt;/p&gt;
&lt;p&gt;运行到完成作业通常用于运行需要执行操作和退出的进程。在处理数据之前运行的大数据工作负载就是这种工作的一个例子。另一个示例是一个处理队列中每条消息的作业，直到队列变空。&lt;/p&gt;
&lt;p&gt;作业是一个控制器，可以创建一个或多个 pod 并确保指定数量的 pod 成功终止。当 pod 成功完成后，Job 会跟踪成功的完成情况。达到指定数量的成功完成后，作业本身就完成了。删除作业将清理它创建的 pod。&lt;/p&gt;
&lt;p&gt;Job 还可以用于并行运行多个 pod，这使其成为机器学习培训工作的理想选择。Job 还支持并行处理一组独立但相关的工作项。&lt;/p&gt;
&lt;p&gt;当 Kubernetes 在具有 GPU 的硬件上运行时，机器学习培训可以利用 Job。诸如 Kubeflow 之类的新兴项目 - 一个致力于在 Kubernetes 上部署机器学习的简单，可移植和可扩展的项目 - 将把原始资料作为 job 包装到机器学习培训中。&lt;/p&gt;
&lt;p&gt;除了运行并行化作业外，可能还需要运行预定作业。Kubernetes 公开了 CronJobs，它可以在指定的时间点运行一次，也可以在指定的时间点定期运行。Kubernetes 中的 CronJob 对象类似于 Unix 中 crontab（cron 表）文件的一行。它以给定的时间表定期运行，以 cron 格式编写。&lt;/p&gt;
&lt;p&gt;Cron 作业对于安排定期作业（如数据库备份或发送电子邮件）特别有用。&lt;/p&gt;
&lt;h3 id=&#34;事件驱动层无服务器serverless&#34;&gt;事件驱动层：无服务器（Serverless）&lt;/h3&gt;
&lt;p&gt;无服务器计算（Serverless）是指构建和运行不需要服务器管理的应用程序的概念。它描述了一种更细粒度的部署模型，其中捆绑为一个或多个功能的应用程序上传到平台，然后执行，缩容和计费以响应当前所需的确切需求。&lt;/p&gt;
&lt;p&gt;函数即服务（FaaS）在无服务器计算的环境中运行，以提供事件驱动的计算。开发人员使用由事件或 HTTP 请求触发的功能来运行和管理应用程序代码。开发人员将小型代码单元部署到 FaaS，这些代码根据实际需要作为独立组件执行，无需管理服务器或任何其他底层基础架构即可进行扩展。&lt;/p&gt;
&lt;p&gt;虽然 Kubernetes 没有集成的事件驱动原语来响应其他服务引发的警报和事件，但仍有努力引入事件驱动的功能。该&lt;a href=&#34;http://bit.ly/2GBO5Dd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生计算基金会&lt;/a&gt; ，Kubernetes 的托管者，一直专注于这些致力于无服务器的工作组。&lt;a href=&#34;https://openwhisk.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache OpenWhisk&lt;/a&gt; 、&lt;a href=&#34;https://github.com/fission/fission&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fission&lt;/a&gt; 、&lt;a href=&#34;https://github.com/kubeless/kubeless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubeless&lt;/a&gt; 、&lt;a href=&#34;https://github.com/openfaas/faas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenFaaS&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/fnproject/fn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Oracle 的 Fn&lt;/a&gt; 等开源项目可以在 Kubernetes 集群中作为事件驱动的无服务器层运行。&lt;/p&gt;
&lt;p&gt;在无服务器环境中部署的代码与打包为 pod 的代码根本不同。它由自治函数组成，可以连接到可能触发代码的一个或多个事件。&lt;/p&gt;
&lt;p&gt;当事件驱动计算——无服务器计算成为 Kubernetes 不可或缺的一部分时，开发人员将能够部署响应 Kubernetes 控制平面生成的内部事件以及应用程序服务引发的自定义事件的函数。&lt;/p&gt;
&lt;h3 id=&#34;遗留层headless-service&#34;&gt;遗留层：Headless Service&lt;/h3&gt;
&lt;p&gt;即使您的组织经常使用微服务架构构建和部署应用程序到云上的容器中，也可能有一些应用程序继续存在于 Kubernetes 之外。云原生应用程序和服务必须与那些传统的单一应用程序进行交互。&lt;/p&gt;
&lt;p&gt;遗留层的存在是为了实现互操作性，以暴露一组指向单体应用程序的 Headless Service。Headless Service 允许开发人员通自由地以自己的方式进行服务发现来减少与 Kubernetes 系统的耦合。Kubernetes 中的 Headless Services 与 ClusterIP、NodePort 和 LoadBalancer 类型的服务不同。它们没有分配给它们的 Internet 协议（IP）地址，但具有指向外部端点（如 API Server、Web 服务器和数据库）的域名系统（DNS）条目。遗留层是一个逻辑互操作性层，它将 DNS 记录维护到众所周知的外部端点。&lt;/p&gt;
&lt;p&gt;微服务应用程序的每一层都可以映射到 Kubernetes 的一个控制器。根据希望部署的模式，DevOps 团队可以进行相应的选择。在下一篇文章中，我们将讨论将云原生应用程序部署到 Kubernetes 的一些最佳实践。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;Janakiram MSV 是 Janakiram＆Associates 的首席分析师，也是国际信息技术学院的兼职教员。他还是 Google 认证云开发人员，亚马逊认证解决方案架构师，亚马逊认证开发人员，亚马逊认证 SysOps 管理员和 Microsoft 认证 Azure 专业人员。Janakiram 是云原生计算基金会的大使，也是最早的认证 Kubernetes 管理员和认证 Kubernetes 应用程序开发人员之一。他之前的经历包括 Microsoft、AWS、Gigaom Research 和 Alcatel-Lucent。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生可移植性的神话</title>
      <link>https://cloudnativecn.com/blog/myth-cloud-native-portability/</link>
      <pubDate>Tue, 30 Oct 2018 17:15:17 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/myth-cloud-native-portability/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://thenewstack.io/myth-cloud-native-portability/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文最初发表于 2017 年 5 月 24 日。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;随着大量新平台和支持工具的出现，云原生势头正在增长。这些新平台为开发人员提供了越来越多的功能，可以以自动化的方式快速开发，部署和管理大量&lt;a href=&#34;https://thenewstack.io/category/microservices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但这种云原生的势头的增长同样会伴随着成本的增加，最好做好为此付出代价的准备。&lt;/p&gt;
&lt;p&gt;最近我写了一篇由 Kubernetes 等云原生平台提供的“&lt;a href=&#34;http://www.ofbizian.com/2017/04/new-distributed-primitives-for.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为开发者准备的新的分布式原语&lt;/a&gt;”，以及这些原语如何与开发应用程序的编程原语相结合。例如，下面看看开发人员必须了解和使用多少 &lt;a href=&#34;https://thenewstack.io/category/kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 概念才能有效地运行单个容器化应用程序：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-基于-kubernetes-的微服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;基于 Kubernetes 的微服务&#34; srcset=&#34;
               /blog/myth-cloud-native-portability/61411417ly1fwp5js00wxj20sg0m8wnm_hu_b1b9dc3afb57ed19.webp 400w,
               /blog/myth-cloud-native-portability/61411417ly1fwp5js00wxj20sg0m8wnm_hu_d1175519f025f60d.webp 760w,
               /blog/myth-cloud-native-portability/61411417ly1fwp5js00wxj20sg0m8wnm_hu_78faa66ba852a9ca.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/myth-cloud-native-portability/61411417ly1fwp5js00wxj20sg0m8wnm_hu_b1b9dc3afb57ed19.webp&#34;
               width=&#34;760&#34;
               height=&#34;594&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      基于 Kubernetes 的微服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;请记住，此图表不包含 DevOps 团队的 Ops 部门必须管理的支持 Kubernetes 的对象。在操作之前也不需要额外的应用程序支持工具（用于日志管理、监控、跟踪、服务网格等）。&lt;/p&gt;
&lt;p&gt;更有可能的是，开发人员必须编写与容器中的应用程序代码相同数量的 YAML 代码。更重要的是，应用程序本身将依赖于比以往更多的平台。云原生应用程序期望平台执行运行状况检查、部署、放置、服务发现、运行定时任务（ &lt;strong&gt;cron&lt;/strong&gt; 作业）或调度原子工作单元（作业）、自动扩展、配置管理等。&lt;/p&gt;
&lt;p&gt;因此，您的应用程序已放弃并将所有这些职责委托给平台，并期望以可靠的方式处理它们。事实上，现在您的应用程序和相关团队在很多不同的级别上依赖于平台：代码、设计、体系结构、开发实践、部署和交付管道、支持过程、恢复方案，你能想到的一切。&lt;/p&gt;
&lt;h2 id=&#34;在生态系统上下注而不是在平台上&#34;&gt;在生态系统上下注而不是在平台上&lt;/h2&gt;
&lt;p&gt;上图显示了代码在 Kubernetes 微服务环境中的小巧程度。但是，当我们谈论基于生产就绪的微服务系统时，这种情况远未完成。任何规模庞大的系统都需要集中监控、度量收集、跟踪、服务网格、集成构建和部署工具、管道等工具。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-微服务需求层次&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;微服务需求层次&#34; srcset=&#34;
               /blog/myth-cloud-native-portability/61411417ly1fwp5jsbrzrj20sg0ltk30_hu_9021027051ed664e.webp 400w,
               /blog/myth-cloud-native-portability/61411417ly1fwp5jsbrzrj20sg0ltk30_hu_3a553deb45bb6f7d.webp 760w,
               /blog/myth-cloud-native-portability/61411417ly1fwp5jsbrzrj20sg0ltk30_hu_28419db994c2f2c7.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/myth-cloud-native-portability/61411417ly1fwp5jsbrzrj20sg0ltk30_hu_9021027051ed664e.webp&#34;
               width=&#34;760&#34;
               height=&#34;583&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      微服务需求层次
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/introducing-microservices-hierarchy-needs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务需求层次&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;该平台只是冰山一角，为了在云原生世界取得成功，您需要成为完全集成的工具和公司生态系统的一部分。因此，赌注绝不是单一平台、项目、很酷的库或一家公司。它涉及整个协同工作的整个项目生态系统，以及在未来十年左右合作并致力于该事业的公司（供应商和客户）的整个生态系统。我认为这两个方面同样重要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;技术&lt;/strong&gt; ：考虑到向云原生过渡是一个多年的旅程，只有长期成功才能带来好处，重要的是打赌有可能在未来 5 到 10 年内发展的技术，而不是从过去 5 到 10 年的历史。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文化&lt;/strong&gt; ：cloud-native 是通过微服务、容器、持续交付和 DevOps 的组合实现的。而成为云原生需要的不仅仅是为您的应用程序添加少量依赖项/库（也不是在某些会议中如何推广它）。您可能不得不改变团队结构和固定流程、工作习惯和编码实践，并习惯于消耗仍然非常活跃的技术空间。如果您的公司文化在某种程度上更接近于开发或仅使用云原生平台和相关工具的公司的文化，那就更容易了。诸如提出拉取请求与提交错误报告，检查上游源代码以及为即将推出的新功能打开讨论之类的小事情。文化一致性和人文因素与技术优势同等重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下内容并不代表完整的格局，但我将尝试将我想到的主要云原生生态系统分组：&lt;/p&gt;
&lt;h3 id=&#34;mesosphere-和-apache-mesos&#34;&gt;Mesosphere 和 Apache Mesos&lt;/h3&gt;
&lt;p&gt;作为 Apache Software Foundations 的一部分，&lt;a href=&#34;http://mesos.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache Mesos&lt;/a&gt; 有优势（成熟的社区）也有缺点（进度缓慢）。它诞生于 2009 年左右，是一个成熟的框架，它最近增加了对容器（我的意思是 docker 格式）和类似概念（如 Pod/Task 组）的支持。&lt;/p&gt;
&lt;h3 id=&#34;cloud-foundry-和-spring-cloud&#34;&gt;Cloud Foundry 和 Spring Cloud&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://bit.ly/2quBaL4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Foundry&lt;/a&gt;诞生于 2009 年左右，是云原生世界的先驱之一。当 &lt;a href=&#34;http://cloud.spring.io/spring-cloud-cloudfoundry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Cloud 与 Cloud Foundry 一起使用时，&lt;/a&gt; 该平台与应用程序本身融为一体。服务发现、负载平衡、配置管理、重试、超时等一系列功能在服务中执行（在本例中为 JVM）。这是 Kubernetes 等平台所采取的相反方法，其中所有这些职责都委托给平台或其他支持容器（例如 [envoy](&lt;a href=&#34;https://lyft.github.io/envoy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://lyft.github.io/envoy/&lt;/a&gt;、&lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linkerd&lt;/a&gt; 、&lt;a href=&#34;https://traefik.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;traefik&lt;/a&gt; ）。我在过去比较过&lt;a href=&#34;http://www.ofbizian.com/2016/12/spring-cloud-compared-kubernetes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 和 Spring Cloud&lt;/a&gt;（请注意，不是的 Cloud Foundry） 。&lt;/p&gt;
&lt;h3 id=&#34;aws-ecs-和-docker-swarm&#34;&gt;AWS ECS 和 Docker Swarm&lt;/h3&gt;
&lt;p&gt;在 Docker 公司仍然需要&lt;a href=&#34;https://thenewstack.io/focused-enterprise-docker-doesnt-fear-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;搞清楚&lt;/a&gt;它是要开发什么，卖什么，亚马逊创造了使用 Docker 技术作为一部分一个非常坚实的产品 &lt;a href=&#34;https://aws.amazon.com/ecs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ECS&lt;/a&gt; 。带有&lt;a href=&#34;https://blox.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blox 的&lt;/a&gt; ECS（AWS 的开源容器编排软件）本身可能不是什么大事，但当与所有其他 AWS 产品结合使用时，它是一个功能非常强大的集成平台。&lt;/p&gt;
&lt;p&gt;更不用说从虚拟机时代起成为 AWS 支持者的&lt;a href=&#34;https://medium.com/netflix-techblog/the-evolution-of-container-usage-at-netflix-3abfc096781b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netflix 正在向容器领域过渡&lt;/a&gt; ，并正在推动 Amazon ECS 的创新。&lt;/p&gt;
&lt;h3 id=&#34;cncf-和-kubernetes&#34;&gt;CNCF 和 Kubernetes&lt;/h3&gt;
&lt;p&gt;Kubernetes 是此类别中最新的平台之一，但同时也是有史以来最活跃，发展最快的开源项目之一。与整合的 &lt;a href=&#34;https://www.cncf.io/projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生计算基金会项目&lt;/a&gt; 和支持&lt;a href=&#34;https://www.cncf.io/about/members/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;公司相结合&lt;/a&gt; ，使整个生态系统成为这一类别中非常有力的竞争者。&lt;/p&gt;
&lt;p&gt;作为一个后来者（2014 年），Kuebernetes 的优势在于从一开始就以容器为中心的架构发展。而且它基于一个已有十年历史的 Google Borg，这意味着原则（不是实施）是成熟的，并在最高级别测试。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-container-orchestrator-调查结果&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Container Orchestrator 调查结果&#34; srcset=&#34;
               /blog/myth-cloud-native-portability/61411417ly1fwp5jrxbatj20sg0gejry_hu_87fb76d8e33b61dc.webp 400w,
               /blog/myth-cloud-native-portability/61411417ly1fwp5jrxbatj20sg0gejry_hu_a8848b9585130bac.webp 760w,
               /blog/myth-cloud-native-portability/61411417ly1fwp5jrxbatj20sg0gejry_hu_a89dbb2cfc6cbf5a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/myth-cloud-native-portability/61411417ly1fwp5jrxbatj20sg0gejry_hu_87fb76d8e33b61dc.webp&#34;
               width=&#34;760&#34;
               height=&#34;438&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Container Orchestrator 调查结果
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Sysdig 2017 年 Docker 使用报告中的容器编排&lt;/p&gt;
&lt;p&gt;正如您可以 从 Sysdig 最近的 &lt;a href=&#34;https://sysdig.com/blog/sysdig-docker-usage-report-2017/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;报告中&lt;/a&gt; 看到的结果，云原生用户似乎很欣赏这一切。&lt;/p&gt;
&lt;h3 id=&#34;选择哪一个&#34;&gt;选择哪一个？&lt;/h3&gt;
&lt;p&gt;也许您在想，只要您将应用程序打包到容器中，就可以轻松地跨不同的云原生平台移植。你错了。无论您是从 Mesos、Cloud Foundry、Kubernetes、Docker Swarm 还是 ECS 开始，您都必须投入大量资金来学习平台和支持工具，了解文化和工作方式，并与这个仍然快速变化的生态系统的技术和公司进行互动。&lt;/p&gt;
&lt;p&gt;本文的目的不是要比较这些生态系统，而是要显示它们之间的差异，并证明如果需要，它将需要大量的时间和金钱来输入，或转移到另一个生态系统。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-作为应用程序可移植层&#34;&gt;Kubernetes 作为应用程序可移植层&lt;/h2&gt;
&lt;p&gt;云原生态系统在技术、流程和文化方面非常独特。但它们之间也有一些整合。许多由一个平台推广的概念也在向其他平台传播。例如，部署单元（Pod in Kubernetes）的概念现在出现在 Mesos 中，它也作为任务组存在于 Amazon ECS 中。服务器端负载平衡（Kubernetes 中的服务）和带有策略的调度/放置（Kubernetes Scheduler）的概念也存在于 Docker Swarm、AWS ECS 等中。但这是它走多远，从一个生态系统过渡到另外，需要付出很多努力。&lt;/p&gt;
&lt;p&gt;那么如何避免与单一供应商锁定？一种方法是坚持使用 Kubernetes 并接受它作为云和服务提供商之间的可移植性层。Kubernetes 如此受欢迎的原因之一是它不是单一的公司玩具，而是由多家大型科技公司支持，如谷歌、红帽（现被 IBM 收购【译者注】）、Docker，Mesosphere、IBM、戴尔、思科等等。&lt;/p&gt;
&lt;p&gt;另一个原因是有许多云公司提供 Kubernetes 作为服务。如果您使用 Kubernetes，那么您可以通过第三方服务提供商以最小的努力在 Google 容器引擎，Microsoft Azure、IBM Bluemix 容器服务等云提供商之间移动您的应用程序，甚至可以在 AWS 上移动您的应用程序。这意味着 Kubernetes API 是云平台之间应用程序的可移植性层，而不仅仅是容器。一个容器本身就是云原生海洋中的一滴。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/myth-cloud-native-portability/006tSBxtly1fuwq6p5tm2j302d02sq2y_hu_b3c5fefec0a79a17.webp 400w,
               /blog/myth-cloud-native-portability/006tSBxtly1fuwq6p5tm2j302d02sq2y_hu_93005e34324f9bbc.webp 760w,
               /blog/myth-cloud-native-portability/006tSBxtly1fuwq6p5tm2j302d02sq2y_hu_4a30dfe67c49ae47.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/myth-cloud-native-portability/006tSBxtly1fuwq6p5tm2j302d02sq2y_hu_b3c5fefec0a79a17.webp&#34;
               width=&#34;85&#34;
               height=&#34;100&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bilgin Ibryam&lt;/strong&gt;  （@bibryam）是 Red Hat 的首席架构师、提交者和 ASF 成员。他是一名开源布道师，博客作者，《Camel Design Patterns》和《Kubernetes Patterns》书籍的作者。在他的日常工作中，Bilgin 喜欢指导编码和领导开发人员成功构建云原生解决方案。他目前的工作重点是应用程序集成、分布式系统、消息传递、微服务、devops 和一般的云原生挑战。你可以在  &lt;a href=&#34;https://twitter.com/bibryam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;、&lt;a href=&#34;https://uk.linkedin.com/in/bibryam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkedin&lt;/a&gt;  或他的  &lt;a href=&#34;http://www.ofbizian.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客&lt;/a&gt; 上找到他。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh 的未来将与 Knative 和 Apahce Whisk 等技术和谐共存——采访 RedHat 的 Istio 产品经理</title>
      <link>https://cloudnativecn.com/blog/istio-service-mesh-interview-redbear-brian-harrington/</link>
      <pubDate>Mon, 17 Sep 2018 19:19:27 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/istio-service-mesh-interview-redbear-brian-harrington/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://jaxenter.com/istio-service-mesh-interview-harrington-148638.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Istio 正在引发大量的关注，特别是 1.0 版本发布后。但它是否成为 Kubernetes 之上的事实的服务网络标准呢？我们采访了 Red Hat 的 Istio 产品经理“红胡子”Brian Harrington，他的答案是肯定的。“有了 Istio，部署很简单，与 Kubernetes 的集成也是浑然一体的。感觉就应该是这样。“&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-红胡子-brian-harrington&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;红胡子 Brian Harrington&#34; srcset=&#34;
               /blog/istio-service-mesh-interview-redbear-brian-harrington/006tNbRwgy1fvcqw67cllj30lc0qodj9_hu_8487e97290d89b35.webp 400w,
               /blog/istio-service-mesh-interview-redbear-brian-harrington/006tNbRwgy1fvcqw67cllj30lc0qodj9_hu_f9396262b034f7f7.webp 760w,
               /blog/istio-service-mesh-interview-redbear-brian-harrington/006tNbRwgy1fvcqw67cllj30lc0qodj9_hu_96c05b41f472bcbb.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/istio-service-mesh-interview-redbear-brian-harrington/006tNbRwgy1fvcqw67cllj30lc0qodj9_hu_8487e97290d89b35.webp&#34;
               width=&#34;608&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      红胡子 Brian Harrington
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图片：红胡子 Brian Harrington&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Brian Harrington，也被称为 Redbeard（红胡子），是 CoreOS 的首席架构师，现在是 Red Hat 的 Istio 的产品经理。他是开源开发和系统管理领域的开发人员，黑客和技术撰稿人。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Istio &lt;a href=&#34;https://jaxenter.com/istio-1-0-arrived-core-features-ready-production-use-147459.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.0&lt;/a&gt; 在今年 8 月初发布，所有&lt;a href=&#34;https://istio.io/about/feature-stages/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;核心功能&lt;/a&gt;现在都可以用于生产。&lt;/p&gt;
&lt;p&gt;如果您已经熟悉 0.8 中提供的功能，那么您应该知道 1.0 中提供的新功能列表并不长；该团队选择专注于修复错误并提高性能。如果您想看看 Istio 1.0 中引入的所有更改，可以阅读&lt;a href=&#34;https://istio.io/zh/about/notes/1.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;发行说明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们与 Red Hat 的 Istio 产品经理“红胡子”Brian Harrington 讨论了他最喜欢的功能，Istio 的未来以及它是否具备成为 Kubernetes 事实上的服务网络标准的功能。&lt;/p&gt;
&lt;h2 id=&#34;istio-改变游戏规则&#34;&gt;Istio 改变游戏规则？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;JAXenter：Istio 可能相对较新，但这种用于连接、管理和保护微服务的工具正在获得广泛的支持。增长背后的原因是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“红胡子”Brian Harrington：&lt;/strong&gt; 最大的原因是范式的转变。在 &lt;a href=&#34;https://netflix.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netflix 的 OSS&lt;/a&gt; （开放源代码软件套件）带来了很多强大的功能，个人开发企业级 Java 应用程序，但它要求你为了实现整个套件的而整合各种软件库。Istio 令人兴奋，因为它为用户提供了 A/B 测试、断路、服务授权等功能，同时最大限度地减少了代码更改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAXenter：Google 最近宣布的&lt;a href=&#34;https://jaxenter.com/google-cloud-interesting-announcements-147230.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云服务平台&lt;/a&gt;以 Istio（和 Kubernetes）为核心。这对 Istio 的未来意味着什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“红胡子”Brian Harrington：&lt;/strong&gt; 这表明该领域的老牌企业已经认识到了一项卓越的技术，并且明白早期合作将为客户带来更大的成功。反过来，如果客户成功，采用的供应商提供的解决方案也会增加。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAXenter：Istio 能否成为 Kubernetes 事实上的服务网络？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“红胡子”Brian Harrington：&lt;/strong&gt; 我敢肯定会的。其他解决方案通常是在操作组件，这些组件不是以云原生主体为基础构建的，因此可能总是感觉有点笨拙。使用 Istio，部署非常简单，与 Kubernetes 的集成也浑然一体。感觉好像应该一直存在。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAXenter：在 Istio 1.0 中你最喜欢的功能是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“红胡子”Brian Harrington：&lt;/strong&gt; 我最喜欢的功能是能够自由控制流量的路由。过去运行服务时，总是需要昂贵的专用负载均衡硬件的组合才能实现该功能，还要修改应用程序，有时候甚至需要重写一个才能良好运行。&lt;/p&gt;
&lt;p&gt;在 Istio 中，将 10％的流量分配到不同版本的服务并将这些连接路由到该版本的服务十分简单。围绕该功能的易用性改变了游戏规则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请参见：&lt;a href=&#34;http://www.servicemesher.com/blog/announcing-istio-1.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.0 发布，已生产就绪！&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAXenter：Istio 的未来是模块化的吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“红胡子”Brian Harrington：&lt;/strong&gt; 模块化是 Istio 未来的一部分。Istio 规定了某些需要满足的接口，然后允许用户使用他们最熟悉的软件来满足这些接口。这在“Nginmesh”项目中最为明显，其中 Envoy（Istio 的代理组件）被 Nginx 取代。&lt;/p&gt;
&lt;p&gt;其他用户同样可以用 Linkerd 取代了 Envoy。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAXenter：使用 Istio 最大的好处是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**“红胡子”Brian Harrington：**Istio 最耀眼的一个特点是它专注于应用程序的安全性。设置双向 TLS 的功能可自动解锁其他高级功能，例如服务授权以及服务之间的加密。Istio 还具有与其他 &lt;a href=&#34;https://spiffe.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt; （适用于所有人的安全生产身份框架）兼容系统集成的能力，这将有助于推动未来采用更高度安全的应用程序。&lt;/p&gt;
&lt;p&gt;随着时间的推移，我希望看到安全特性进一步扩展，包括类似于 Google 的&lt;a href=&#34;https://cloud.google.com/iap/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;身份识别代理的功能&lt;/a&gt; 。关于这一点的好处是，通过对 JSON Web token 的支持和对 OpenID Connect 的支持奠定了一些基础。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;还请参见： &lt;a href=&#34;https://jaxenter.com/google-cloud-interesting-announcements-147230.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Cloud Next &amp;lsquo;18：云开发人员所希望的一切&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAXenter：Istio 有什么 Linkerd 身上不具备的东西吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**“红胡子”Brian Harrington：**Istio 拥有一个蓬勃发展的社区，正以惊人的速度增长。顺便提一下，Istio 已经存在了大约 &lt;a href=&#34;https://github.com/istio/istio/commit/0216e811e9da88b867742710f7d166cef2eabfbc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;21 个月&lt;/a&gt; ，在 GitHub 上有超过 200 个贡献者和一个非常活跃&lt;a href=&#34;https://github.com/istio/istio/pulse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pulse&lt;/a&gt;（即使你忽略像 Fortio 这样的子项目只看 Istio 核心项目）。而 Linkerd 已经存在了近&lt;a href=&#34;https://github.com/linkerd/linkerd/tree/37e38f2a892d9354eea7305135aa6370612b02f2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;31 个月&lt;/a&gt;。即使你结合&lt;a href=&#34;https://github.com/linkerd/linkerd/pulse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd v1&lt;/a&gt;和&lt;a href=&#34;https://github.com/linkerd/linkerd2/pulse/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd v2&lt;/a&gt; 的“pulse” ，它们的活跃度比起 Istio 仍然相去甚远。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAXenter：您能展望下服务网格的未来吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“红胡子”Brian Harrington：&lt;/strong&gt; 我相信服务网格的未来与无服务器计算（Serverless）有关。我们正在融合开发人员成功地将代码库分解为原子组件的状态。&lt;/p&gt;
&lt;p&gt;这种趋势甚至反映在围绕 Istio 模块化的问题上。我觉得服务网格的未来是与 Knative 和 Apache Whisk 等技术共生的，它使开发人员能够重新采用“仅做一件事并把它做得好”（do one thing and do it well）的“UNIX 哲学”，以建立应用的未来。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/istio-service-mesh-interview-redbear-brian-harrington/006tNbRwgy1fvcr3ya379j30sg0j1grh_hu_ed4c597e3c332584.webp 400w,
               /blog/istio-service-mesh-interview-redbear-brian-harrington/006tNbRwgy1fvcr3ya379j30sg0j1grh_hu_92c509cab6c92560.webp 760w,
               /blog/istio-service-mesh-interview-redbear-brian-harrington/006tNbRwgy1fvcr3ya379j30sg0j1grh_hu_43d054f3b3d671c2.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/istio-service-mesh-interview-redbear-brian-harrington/006tNbRwgy1fvcr3ya379j30sg0j1grh_hu_ed4c597e3c332584.webp&#34;
               width=&#34;760&#34;
               height=&#34;508&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless vs Container——开发人员向左，DevOps 向右</title>
      <link>https://cloudnativecn.com/blog/serverless-vs-containers/</link>
      <pubDate>Sun, 16 Sep 2018 16:49:58 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/serverless-vs-containers/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://dzone.com/articles/serverless-vs-containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;让我们来看看 Serverless 与容器的采用率、工具支持以及围绕 Serverless 和容器化的其他争论。&lt;/p&gt;
&lt;p&gt;在 Serverless 和容器中，我们有两种令人惊叹的技术，可以为工程师提供高效的，与机器无关的抽象。然而，两个阵营之间似乎存在着不可逾越的鸿沟。&lt;/p&gt;
&lt;p&gt;如果你读过我在过去两年写的任何内容，你就会知道我坚定地站在 Serverless 阵营。但我也是容器的早期采用者。在 Docker 达到 1.0 里程碑后不久，2015 年初我的第一个容器化项目问世。&lt;/p&gt;
&lt;p&gt;这篇文章不是为了再次引发阵营战争或宣布某个阵营的胜利。相反，我将尝试客观地看待 Serverless 和容器的状态，根据它们提供的利弊权衡，并对未来的情况给出诚实的看法。&lt;/p&gt;
&lt;p&gt;鉴于 Serverless 和 FaaS 函数即服务（FAAS）通常已经可以互换使用，为了本文的目的，我将限制 Serverless 的定义为 FAAS 产品，例如 AWS Lambda。&lt;/p&gt;
&lt;h2 id=&#34;容器状态&#34;&gt;容器状态&lt;/h2&gt;
&lt;p&gt;自从 Docker 早期可用以来已经走过了漫长的道路。随着我们在容器上运行的系统越来越复杂，我们的需求已经催生了丰富的工具生态系统。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92pcoc59j218c0wwtb6_hu_4f427bfb08c7d4e5.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92pcoc59j218c0wwtb6_hu_82d3acc4eed0b147.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92pcoc59j218c0wwtb6_hu_1f9d6a45b9016e55.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/serverless-vs-containers/61411417ly1fv92pcoc59j218c0wwtb6_hu_4f427bfb08c7d4e5.webp&#34;
               width=&#34;760&#34;
               height=&#34;564&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;AWS 还拥有自己的托管容器服务 ECS。这提供了与 AWS 生态系统其他部分更紧密的集成。&lt;/p&gt;
&lt;p&gt;如服务网格也正在获得可见性和被采用。它们将常见的交叉问题（例如跟踪和断路器）移出应用层。通过解决基础架构层中的这些问题，它们为这些挑战提供了语言和运行时无关的解决方案。这使它们非常适合现代 IT 组织，即使用各种不同语言的构建微服务。&lt;/p&gt;
&lt;h2 id=&#34;serverless-现状&#34;&gt;Serverless 现状&lt;/h2&gt;
&lt;p&gt;虽然围绕 Serverless 的炒作并没有和容器一样长。值得记住的是，在 Lamber 达到 1.0 之后仅一个月，AWS Lambda 就在 2014 年发布了。它随附了 CloudWatch 的基本日志记录和监视支持，即使我们现在依赖的许多事件源（例如 API Gateway）都是在之后引入的。&lt;/p&gt;
&lt;p&gt;除了这些托管服务之外，还有一些解决方案可以让您在自己的 Kubernetes 集群上运行 Serverless。其中包括谷歌和合作公司最近宣布的 Knative。虽然这些解决方案试图满足许多开发人员的需求，但我感到他们放弃了 Serverless 的最佳功能——不必担心服务器！&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92pv9fp4j20y60pw43y_hu_365a22ad92ab327d.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92pv9fp4j20y60pw43y_hu_4a49e2e9be922e04.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92pv9fp4j20y60pw43y_hu_6d5d5007c4d2945f.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/serverless-vs-containers/61411417ly1fv92pv9fp4j20y60pw43y_hu_365a22ad92ab327d.webp&#34;
               width=&#34;760&#34;
               height=&#34;576&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;采用趋势&#34;&gt;采用趋势&lt;/h2&gt;
&lt;p&gt;根据一些调查和研究，Serverless 和容器的采用正在快速增长。以下是我认为的一些亮点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Cloudability 发现，2017 年第四季度 AWS 用户的容器采用量增长了 246％，高于第三季度的 206％。同时，同一项研究发现，2017 年第四季度 AWS 用户 Serverless 采用量增长了 667％，高于第三季度的 321％。&lt;/li&gt;
&lt;li&gt;Serverless 公司最近发现，2018 年有 82％的接受调查的人员使用 Serverless，高于 2017 年的 45％。超过 53.2％的人表示他们使用 Serverless 技术对他们的工作至关重要。&lt;/li&gt;
&lt;li&gt;Serverless 公司的调查还报告说，在采用 Serverless 之前，24％的接受调查的人员对公共云的使用经验有限或为零。20.2％的为拥有 1000 多名员工的大型企业工作。&lt;/li&gt;
&lt;li&gt;Logz.io 的 &lt;a href=&#34;https://logz.io/devops-pulse-insights-2018/#pulse_section_ten&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps Pulse&lt;/a&gt; 调查发现，在 2018 年，60.71％的接受调查的人员采用了容器编排，高于 2017 年的 42.11％。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有趣的是，DevOps Pulse 调查显示，Serverless 采用率比其他报告小得多。从 2018 年的 30.55％（2017 年）上升到 42.58％。这可能与其接受调查的人员的分布有关。其中 28.54％认为自己是开发者，而 44.26％认定为 DevOps、DevSecOps、SysAdmin 或 SRE。&lt;/p&gt;
&lt;p&gt;这与我在容器和 Serverless 阵营之间的上述鸿沟的经验一致。那些认为自己是开发人员的人更倾向于 Serverless，而那些被认为是 DevOps 的人更有可能选择容器。&lt;/p&gt;
&lt;h2 id=&#34;控制与责任&#34;&gt;控制与责任&lt;/h2&gt;
&lt;p&gt;关于 Serverless 与容器的争论通常始于控制，或者在 Serverless 的情况下缺乏控制。这不是新的。事实上，我清楚地记得当 AWS 在 2009 年开始获得牵引力时围绕控制的相同辩论。现在 10 年后，尘埃落定于原始辩论，但我们未能吸取教训。&lt;/p&gt;
&lt;p&gt;想要控制是人的本性，但你愿意为此付出多少钱？您知道您将承担的总体拥有成本（TCO）吗？&lt;/p&gt;
&lt;p&gt;控制自己的基础设施的能力带来了很多责任。要承担这些责任，您需要拥有组织中的相关技能。这意味着工资（很容易成为大多数组织的最大开支），代理费以及从工程师和经理那里抽出时间进行招聘和入职。&lt;/p&gt;
&lt;p&gt;考虑到所涉及的 TCO，具有该控制的目标必须是针对某些事物进行优化（例如，为业务关键工作流程实现可预测的性能），并且不为其自身控制。&lt;/p&gt;
&lt;p&gt;构建基于容器的通用计算平台需要大量的工程专业知识和投资，该平台与 AWS Lambda 等 Serverless 产品一样高效，可扩展且具有弹性。大多数组织根本没有能力解决这个问题。尽管有大量的时间和金钱投入，但我知道一些大企业在他们的尝试中惨遭失败。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92q5mvy7j20y01061kx_hu_f1440cfcf86dd1a3.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92q5mvy7j20y01061kx_hu_1436046cdd85817a.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92q5mvy7j20y01061kx_hu_cccdd9f9234436c0.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/serverless-vs-containers/61411417ly1fv92q5mvy7j20y01061kx_hu_f1440cfcf86dd1a3.webp&#34;
               width=&#34;714&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;工具支持&#34;&gt;工具支持&lt;/h2&gt;
&lt;p&gt;使用 Serverless，您可以从 box-logging，指标和跟踪中获得基本的可观察性工具。尽管有这些警告，但一开始它们通常就足够了。&lt;/p&gt;
&lt;p&gt;传统上迎合 IAAS 或容器市场的供应商也开始为 Serverless 应用程序提供支持。但是，他们需要调整自己的方法，因为 Serverless 无法再使用基于代理的方法。&lt;/p&gt;
&lt;p&gt;还有越来越多的供应商专注于解决 Serverless 应用程序的可观察性和安全性问题。但是，大多数仍处于开发的早期阶段，尚未准备好进行严肃的生产使用。&lt;/p&gt;
&lt;p&gt;与 Serverless 相比，容器空间具有更成熟和多样化的工具生态系统。事实上，我发现使用容器的挑战之一是处理绝大多数的选择！&lt;/p&gt;
&lt;p&gt;有充足的修补机会，我也发现团队可能会忽略奖品（即为我们的客户建立更好的产品），并陷入过度工程的陷阱。&lt;/p&gt;
&lt;p&gt;Serverless 的工具支持将会越来越好，但至少目前，仍然远远落后于容器。在容器领域工作的人面临的挑战是抵制修补和追求简单的冲动。&lt;/p&gt;
&lt;h2 id=&#34;供应商锁定风险与奖励&#34;&gt;供应商锁定：风险与奖励&lt;/h2&gt;
&lt;p&gt;Serverless 的批评者通常使用供应商锁定作为他们的论据。与此同时，大多数 AWS 客户实际上都在要求更紧密的集成，以便他们可以从平台中获取更多价值。&lt;/p&gt;
&lt;p&gt;可以肯定的是，供应商锁定是一种风险。但正如任何投资者都会告诉你的那样，如果你不承担风险，你就永远不会赚钱。诀窍是采取能够带来最佳回报的计算风险。&lt;/p&gt;
&lt;p&gt;对于它所获得的所有关注，供应商锁定对于少数人来说是一种危险。相反，您更有可能找到过度设计的解决方案来阻止供应商锁定，而不是创建其他形式的锁定，无论是内部团队还是其他私有云供应商。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92qged6ej20y80fijuh_hu_8c29b21aec7635ff.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92qged6ej20y80fijuh_hu_95837406178d266b.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92qged6ej20y80fijuh_hu_bf0f62ebb27f15f6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/serverless-vs-containers/61411417ly1fv92qged6ej20y80fijuh_hu_8c29b21aec7635ff.webp&#34;
               width=&#34;760&#34;
               height=&#34;344&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同样，这不是新的。几年前我们与 ORM 进行了同样的辩论。我们创建了所有这些抽象来防止供应商锁定，除了风险从未实现为我们大多数人的问题。所发生的一切都是我们花费了大量精力和时间，并推迟了我们的产品上市时间，因为这些产品从未成为问题。&lt;/p&gt;
&lt;p&gt;更糟糕的是，ORM 引入了他们自己的问题和复杂性，并持续阻碍了发展。它成为开发团队的一项税收，并在可预见的未来减缓了功能交付。&lt;/p&gt;
&lt;p&gt;对于那些必须进行数据库迁移的人来说，ORM 并没有让事情变得更好。除了其他一切之外，这只是你必须处理的另一个问题。&lt;/p&gt;
&lt;p&gt;看到历史重演，这次，甚至更高的层次可能会影响整个组织，这是痛苦的！&lt;/p&gt;
&lt;p&gt;公司发现 Serverless 团队的工作量越来越多，工程师也越来越多。所以，就像一个明智的投资者一样，我们应该问的问题是：“重要的生产力回报是否值得锁定风险，实现问题的可能性很小？”&lt;/p&gt;
&lt;h2 id=&#34;未来是-serverless-还是容器&#34;&gt;未来是 Serverless 还是容器？&lt;/h2&gt;
&lt;p&gt;Serverless 为您提供了大量的生产力提升，但却以控制基础架构为代价。&lt;/p&gt;
&lt;p&gt;对于我们的许多工作流程 - 网络 API，流处理，cron 作业等 - 实际上我们不需要这些所有的控制，我们应该祝福为我们处理管道的人。&lt;/p&gt;
&lt;p&gt;但总会出现这样的情况：我们需要保持对基础架构的控制，以便优化性能，成本或更高的可用性。或者，我们的工作量可能不利于 Serverless 的当前限制，例如最长执行时间。&lt;/p&gt;
&lt;p&gt;我认为 Serverless 和容器应该混合使用，而不是选择其中一个。实际上，许多公司都成功的采用了混合方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 Serverless 满足其需求的工作负载使用 Serverless&lt;/li&gt;
&lt;li&gt;例如，对于以下工作负载，请使用容器;
&lt;ul&gt;
&lt;li&gt;长期运行&lt;/li&gt;
&lt;li&gt;需要可预测的性能&lt;/li&gt;
&lt;li&gt;需要比 Serverless 更容易实现的弹性&lt;/li&gt;
&lt;li&gt;不断地以大规模运行，并且按次付费定价模型变得过于昂贵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这也是 Netflix 前云架构师兼现任 AWS 云计算副总裁 Adrian Cockcroft 的建议。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92qojnw5j20yc0ue15k_hu_bfd2562ab0a234d8.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92qojnw5j20yc0ue15k_hu_1392436aaed89764.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92qojnw5j20yc0ue15k_hu_e36a64262c198179.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/serverless-vs-containers/61411417ly1fv92qojnw5j20yc0ue15k_hu_bfd2562ab0a234d8.webp&#34;
               width=&#34;760&#34;
               height=&#34;673&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我相信我们最终会看到这两种范式的趋同。容器技术最终将成为 Serverless - 想想 Fargate，加上每次调用定价模型和毫秒计费。同时，Serverless 平台将开放并允许您携带自己的容器。高级用户可以通过提供符合 API 的子组件进行日志记录等来保留对其基础架构的一些控制。&lt;/p&gt;
&lt;p&gt;随着容器和 Serverless 之间的界限被打破，我们终于可以废除派系并停止谈论底层技术。我想谈的是如何构建客户想要使用的产品，以及如何更快地构建它们。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>后 Kubernetes 时代的微服务</title>
      <link>https://cloudnativecn.com/blog/microservices-post-kubernetes/</link>
      <pubDate>Fri, 07 Sep 2018 12:27:58 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/microservices-post-kubernetes/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/microservices-post-kubernetes/006tNbRwgy1fuxayjq7oej30n30ammzp_hu_ad51960563b70cd9.webp 400w,
               /blog/microservices-post-kubernetes/006tNbRwgy1fuxayjq7oej30n30ammzp_hu_97ca7e954101ea6c.webp 760w,
               /blog/microservices-post-kubernetes/006tNbRwgy1fuxayjq7oej30n30ammzp_hu_67462633f79ed05f.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/microservices-post-kubernetes/006tNbRwgy1fuxayjq7oej30n30ammzp_hu_ad51960563b70cd9.webp&#34;
               width=&#34;760&#34;
               height=&#34;349&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;关键要点&#34;&gt;关键要点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;微服务架构仍然是分布式系统最流行的架构风格。但 Kubernetes 和云原生运动已经在很大程度上重新定义了应用程序的设计和开发。&lt;/li&gt;
&lt;li&gt;在云原生平台上，服务的可观察性是不够的。更基本的先决条件是通过实施健康检查，对信号做出反应，声明资源消耗等，使微服务自动化。&lt;/li&gt;
&lt;li&gt;在后 Kubernetes 时代，服务网格技术将完全取代使用库来实现操作网络问题（例如 Hystrix 断路器）。&lt;/li&gt;
&lt;li&gt;微服务现在必须通过从多个维度实现幂等性来设计用于“恢复”。&lt;/li&gt;
&lt;li&gt;现代开发人员必须精通编程语言以实现业务功能，并且同样精通云原生技术以满足非功能性基础架构级别要求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微服务炒作开始于一堆关于组织结构、团队规模、服务规模、重写和抛出服务而不是修复、避免单元测试等的极端想法。根据我的经验，大多数这些想法被证明是错误的，不实用的或者至少不通用。如今，大多数剩余的原则和实践都是如此通用和松散地定义，以至于它们可能在未来许多年内都会成立，而在实践中却没有多大意义。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 Kubernetes 诞生的前几年微服务还是分布式系统最流行的架构风格。但 Kubernetes 和云原生运动已经改变了应用程序设计和开发的方方面面。在本文中，我要质疑微服务的一些理念，指明它们在后 Kubernetes 时代不会再像以前那样强大。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;不仅可观察而且还有自动化服务&#34;&gt;不仅可观察，而且还有自动化服务&lt;/h2&gt;
&lt;p&gt;可观察性从一开始就是微服务的基本原则。虽然对于一般的分布式系统来说它是正确的，但今天（特别是在 Kubernetes 上），它的很大一部分是平台级别的开箱即用（例如进程运行状况检查、CPU 和内存消耗）。最低要求是应用程序以 JSON 格式登录控制台。从那时起，平台可以跟踪资源消耗、请求跟踪、收集所有类型的指标、错误率等，而无需太多的服务级别开发工作。&lt;/p&gt;
&lt;p&gt;在云原生平台上，可观察性是不够的。更基本的先决条件是通过实施健康检查，对信号做出反应，声明资源消耗等使微服务&lt;a href=&#34;https://www.redhat.com/en/resources/cloud-native-container-design-whitepaper&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动化&lt;/a&gt; 。可以将几乎任何应用程序放入容器中运行。但是要创建一个容器化的应用程序，可以通过云原生平台自动化和协调编排，需要遵循一定的规则。遵循这些 &lt;a href=&#34;https://leanpub.com/k8spatterns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原则和模式&lt;/a&gt; ，将确保生成的容器在大多数容器编排引擎中表现得像一个优秀的云原生公民，允许以自动方式对它们进行调度、扩展和监控。&lt;/p&gt;
&lt;p&gt;我们希望平台不必观察服务中发生的情况，而是希望平台检测异常情况并按照声明进行协调。无论是通过停止将流量导向服务实例、重启、向上和向下扩展，还是将服务迁移到另一个健康主机，重试失败的请求或其他，这都无关紧要。如果服务是自动化的，则所有纠正措施都会自动发生，我们只需要描述所需的状态，而不是观察和反应。服务应该是可观察的，但也可以在没有人为干预的情况下通过平台自动进行整改。&lt;/p&gt;
&lt;h2 id=&#34;智能平台和智能服务但有正确的责任&#34;&gt;智能平台和智能服务，但有正确的责任&lt;/h2&gt;
&lt;p&gt;在从 SOA 转向微服务世界的过程中， &lt;a href=&#34;https://martinfowler.com/articles/microservices.html#SmartEndpointsAndDumbPipes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“智能端点和哑管”&lt;/a&gt;的概念是服务交互的另一个根本转变。在微服务领域，服务不依赖于集中式智能路由层的存在，而是依赖于拥有某些平台级功能的智能端点。这是通过在每个微服务中嵌入传统 ESB 的一些功能并转换到没有业务逻辑元素的轻量级协议来实现的。&lt;/p&gt;
&lt;p&gt;虽然这仍然是在不可靠的网络层（使用 &lt;a href=&#34;https://github.com/Netflix/Hystrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hystrix&lt;/a&gt; 等库）实现服务交互的流行方式，但现在，在后 Kubernetes 时代，它已经完全被&lt;a href=&#34;https://www.cncf.io/blog/2017/04/26/service-mesh-critical-component-cloud-native-stack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格&lt;/a&gt;技术所取代。有趣的是，服务网格甚至比传统的 ESB 更智能。网格可以执行动态路由、服务发现、基于延迟的负载平衡、响应类型、指标和分布式跟踪、重试、超时，你能想到的这里都有。&lt;/p&gt;
&lt;p&gt;与 ESB 的不同之处在于，与服务网格不同的是，只有一个集中路由层，每个微服务通常都有自己的路由器—— 一个带有附加中央管理层的代理逻辑的 sidecar 容器。更重要的是，管道（平台和服务网格）没有任何业务逻辑；它们完全专注于基础架构方面，使服务专注于业务逻辑。如图所示，这代表了 ESB 和微服务学习的演变，以适应云环境的动态和不可靠特性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/microservices-post-kubernetes/006tSBxtly1fuwq6pf4fyj30gn057gnd_hu_9a805b588507b909.webp 400w,
               /blog/microservices-post-kubernetes/006tSBxtly1fuwq6pf4fyj30gn057gnd_hu_84792754236807eb.webp 760w,
               /blog/microservices-post-kubernetes/006tSBxtly1fuwq6pf4fyj30gn057gnd_hu_3329f0504b38d455.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/microservices-post-kubernetes/006tSBxtly1fuwq6pf4fyj30gn057gnd_hu_9a805b588507b909.webp&#34;
               width=&#34;599&#34;
               height=&#34;187&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SOA vs MSA 与 CNA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看服务的其他方面，我们注意到云原生不仅影响端点和服务交互。Kubernetes 平台（包含所有其他技术）还负责资源管理、调度、部署、配置管理、扩展、服务交互等。而不是再次将其称为“智能代理和哑管”，我认为它更好地描述作为一个具有正确职责的智能平台和智能服务。这不仅仅是关于端点；它是一个完整的平台，可以自动化业务功能服务的所有基础架构方面。&lt;/p&gt;
&lt;h2 id=&#34;不要面向失败而设计要面向恢复设计&#34;&gt;不要面向失败而设计，要面向恢复设计&lt;/h2&gt;
&lt;p&gt;在基础架构和网络本身不可靠的云原生环境中运行的微服务必须针对故障进行设计。这毫无疑问。但是平台检测到并处理了越来越多的故障，并且从微服务中捕获故障的量较少。相反，考虑通过从多个维度实现幂等性来设计您的恢复服务。&lt;/p&gt;
&lt;p&gt;容器技术、容器编排器和服务网络可以检测并从许多故障中恢复：无限循环——CPU 分配、内存泄漏和 OOM——运行状况检查、磁盘占用——配额、fork 炸弹——进程限制、批量处理和进程隔离——内存限制、延迟和基于响应的服务发现、重试、超时、自动扩展等等。更不用说，过渡到无服务器模型，服务只需要在几毫秒内处理一个请求，而垃圾收集、线程池、资源泄漏也越来越不需要关心。&lt;/p&gt;
&lt;p&gt;通过平台处理所有这些以及更多内容，将您的服务视为一个密封的黑盒子，它将多次启动和停止，使服务能够重新启动。您的服务将按比例放大和缩小倍数，通过使其无状态，使其可以安全地进行扩展。假设许多传入请求最终会超时，使端点具有幂等性。假设许多传出请求将暂时失败，平台将为您重试它们，确保您使用幂等服务。&lt;/p&gt;
&lt;p&gt;为了适合云原生环境中的自动化，服务必须是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;幂等重启（服务可以被杀死并多次启动）。&lt;/li&gt;
&lt;li&gt;幂等扩展/缩小（服务可以自动扩展到多个实例）。&lt;/li&gt;
&lt;li&gt;幂等服务生产者（其他服务可能会重试调用）。&lt;/li&gt;
&lt;li&gt;幂等服务使用者（服务或网状网可以重试传出调用）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您执行上述操作一次或多次时服务的行为始终相同，那么平台将能够在没有人为干预的情况下从故障中恢复您的服务。&lt;/p&gt;
&lt;p&gt;最后，请记住，平台提供的所有恢复只是本地优化。&lt;a href=&#34;http://blog.christianposta.com/microservices/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;正如 Christian Posta 所说的那样&lt;/a&gt; ，分布式系统中的应用程序安全性和正确性仍然是应用程序的责任。整个业务流程范围的思维模式（可能跨越多个服务）对于设计整体稳定的系统是必要的。&lt;/p&gt;
&lt;h2 id=&#34;混合开发职责&#34;&gt;混合开发职责&lt;/h2&gt;
&lt;p&gt;越来越多的微服务原则被 Kubernetes 及其补充项目实施和提供。因此，开发人员必须精通编程语言以实现业务功能，并且同样精通云原生技术以满足非功能性基础架构级别要求，同时完全实现功能。&lt;/p&gt;
&lt;p&gt;业务需求和基础架构（操作或跨功能需求或系统质量属性）之间的界限总是模糊不清，并且不可能采取一个方面并期望其他人做另一个方面。例如，如果在服务网格层中实现重试逻辑，则必须使服务中的业务逻辑或数据库层使用的服务具有幂等性。如果在服务网格级别使用超时，则必须同步服务中的服务使用者超时。如果必须实现服务的重复执行，则必须配置 Kubernetes 作业执行。&lt;/p&gt;
&lt;p&gt;展望未来，一些服务功能将作为业务逻辑在服务中实现，而其他服务功能则作为平台功能提供。虽然使用正确的工具来完成正确的任务是一个很好的责任分离，但技术的激增极大地增加了整体的复杂性。在业务逻辑方面实现简单的服务需要很好地理解分布式技术堆栈，因为责任分散在每一层。&lt;/p&gt;
&lt;p&gt;据 &lt;a href=&#34;https://kubernetes.io/blog/2016/03/1000-nodes-and-beyond-updates-to-kubernetes-performance-and-scalability-in-12/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证实&lt;/a&gt; Kubernetes 是可以扩展到数千个节点、数万个 pod 和数百万的 TPS。您的应用程序大小、复杂性，或者说是引入“云原生”复杂性的关键性因素，我还不清楚。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;有趣的是，微服务运动如何为采用 Docker 和 Kubernetes 等容器技术提供了如此大的动力。虽然最初是推动这些技术发展的微服务实践，但现在 Kubernetes 定义了微服务架构的原则和实践。&lt;/p&gt;
&lt;p&gt;最近的一个例子，我们距离接受函数模型作为有效的微服务原语并不远，而不是将其视为纳米服务的反模式。我们并没有充分的理由质疑云原生技术对于中小型案例的实用性和适用性，而是因为兴奋而有些不经意地跳了起来。&lt;/p&gt;
&lt;p&gt;Kubernetes 拥有 ESB 和微服务的许多知识，因此，它是最终的分布式系统平台。它是架构风格的技术，而不是相反的方式。无论好坏，时间会证明一切。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/microservices-post-kubernetes/006tSBxtly1fuwq6p5tm2j302d02sq2y_hu_b3c5fefec0a79a17.webp 400w,
               /blog/microservices-post-kubernetes/006tSBxtly1fuwq6p5tm2j302d02sq2y_hu_93005e34324f9bbc.webp 760w,
               /blog/microservices-post-kubernetes/006tSBxtly1fuwq6p5tm2j302d02sq2y_hu_4a30dfe67c49ae47.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/microservices-post-kubernetes/006tSBxtly1fuwq6p5tm2j302d02sq2y_hu_b3c5fefec0a79a17.webp&#34;
               width=&#34;85&#34;
               height=&#34;100&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bilgin Ibryam&lt;/strong&gt;  （@bibryam）是 Red Hat 的首席架构师，提交者和 ASF 成员。他是一名开源传播者，博客作者，《Camel Design Patterns》和《Kubernetes Patterns》书籍的作者。在他的日常工作中，Bilgin 喜欢指导编码和领导开发人员成功构建云原生解决方案。他目前的工作重点是应用程序集成、分布式系统、消息传递、微服务、devops 和一般的云原生挑战。你可以在  &lt;a href=&#34;https://twitter.com/bibryam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;、&lt;a href=&#34;https://uk.linkedin.com/in/bibryam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkedin&lt;/a&gt;  或他的  &lt;a href=&#34;http://www.ofbizian.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客&lt;/a&gt; 上找到他。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Envoy 服务网格在 Lyft 的实践及未来路线图</title>
      <link>https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/</link>
      <pubDate>Sun, 02 Sep 2018 13:48:47 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/</guid>
      <description>&lt;p&gt;















&lt;figure  id=&#34;figure-envoy-lyft&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Envoy Lyft&#34; srcset=&#34;
               /blog/envoy-service-mesh-cascading-failure/006tNbRwgy1fuv5nathu3j318g0ii0uc_hu_28b21a94e666a818.webp 400w,
               /blog/envoy-service-mesh-cascading-failure/006tNbRwgy1fuv5nathu3j318g0ii0uc_hu_292e0824e3435e34.webp 760w,
               /blog/envoy-service-mesh-cascading-failure/006tNbRwgy1fuv5nathu3j318g0ii0uc_hu_d023ad0b6a7ebeac.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/006tNbRwgy1fuv5nathu3j318g0ii0uc_hu_28b21a94e666a818.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Envoy Lyft
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://www.infoq.com/articles/envoy-service-mesh-cascading-failure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关键要点&#34;&gt;关键要点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在过去的四年中，Lyft 已从单体架构转变为数百个微服务。随着微服务数量的增加，由于级联故障或意外内部拒绝服务导致的中断次数也在增加。&lt;/li&gt;
&lt;li&gt;今天，这些故障情况在 Lyft 基础设施中已经基本解决。Lyft 部署的每项服务都通过使用 Envoy 代理自动获得吞吐量和并发保护。&lt;/li&gt;
&lt;li&gt;Envoy 可以作为中间件部署或仅在请求入口处部署，但最大的好处来自于在应用程序本地的入口和出口部署它。在请求的两端部署 Envoy 允许它充当服务器的智能客户端和反向代理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在接下来的几个月里，Lyft 将与 Netflix 的并发限制库背后的团队合作，将基于其库的系统带入 Envoy L7 过滤器。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;级联故障是高吞吐量分布式系统中不可用的主要原因之一。在过去的四年中，Lyft 已从单体架构转变为数百种微服务。随着微服务数量的增加，由于级联故障或意外内部拒绝服务导致的中断次数也在增加。今天，这些故障情况在 Lyft 基础设施中基本上已经解决。Lyft 部署的每项服务都会自动获得吞吐量和并发保护。通过对我们最关键的服务进行一些有针对性的配置更改，基于负载的事件减少了 95％，从而影响了用户体验。&lt;/p&gt;
&lt;p&gt;在我们检查特定的故障情况和相应的保护机制之前，让我们首先了解如何在 Lyft 部署网络防御。&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 是一个 &lt;a href=&#34;https://eng.lyft.com/announcing-envoy-c-l7-proxy-and-communication-bus-92520b6c8191&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;源自 Lyft&lt;/a&gt; 的代理，后来开源并捐赠给 &lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt; 。Envoy 与许多其他负载均衡解决方案的区别在于它被设计为以“网格”配置部署。Envoy 可以作为中间件部署或仅在请求入口时部署，但最大的好处来自于在应用程序本地的入口和出口部署它。在请求的两端部署 Envoy 允许它充当服务器的智能客户端和反向代理。在双方，我们可以选择采用速率限制和断路来保护服务器免受各种情况下的过载。&lt;/p&gt;
&lt;h2 id=&#34;核心概念&#34;&gt;核心概念&lt;/h2&gt;
&lt;h3 id=&#34;并发和速率限制&#34;&gt;并发和速率限制&lt;/h3&gt;
&lt;p&gt;并发和速率限制是相关的，但不同的概念; 同一枚硬币的两面。在考虑限制系统负载时，运维人员传统上会考虑每秒的请求数。&lt;/p&gt;
&lt;p&gt;速率限制可以限制发送到系统的请求的速率。通常进行压力测试以确定服务将变为过载的请求率，然后将限制设置在低于该点的某处。在某些情况下，业务逻辑决定了速率限制。&lt;/p&gt;
&lt;p&gt;在硬币的另一面，我们有并发性，即同时使用多少个单元。这些单位可以是请求、连接等。例如，我们可以考虑某个时间点的并发请求数，而不是考虑请求率。当我们考虑并发请求时，我们可以应用排队理论来确定服务在队列开始构建之前可以处理的并发请求数、请求延迟增加以及服务因资源耗尽而失败。&lt;/p&gt;
&lt;h3 id=&#34;全局与本地决策&#34;&gt;全局与本地决策&lt;/h3&gt;
&lt;p&gt;Envoy 中的断路器是根据本机信息计算的。每个 Envoy 实例都会跟踪自己的统计数据并制定自己的断路决策。与全局系统相比，该模型具有一些优势。&lt;/p&gt;
&lt;p&gt;第一个优势是可以在内存中计算限制，而无需对中央系统进行网络调用。第二个是限制会随着集群的大小而扩展。第三，限制考虑了机器之间的差异，无论它们是否收到不同的查询组合或者在性能上的差异。&lt;/p&gt;
&lt;h3 id=&#34;常见的故障情况&#34;&gt;常见的故障情况&lt;/h3&gt;
&lt;p&gt;在引入防御机制之前，了解一些常见的故障模式是有帮助的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重试放大&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;依赖开始失败。如果服务执行一次重试所有对该依赖项的请求，则整个调用量将加倍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;资源匮乏&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个服务都受某些资源约束，通常是 CPU、网络或内存。并发请求通常与消耗的资源量直接相关。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从资源匮乏中恢复过来&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;即使资源消耗增加的原因降低到正常水平，服务也可能因资源争用而无法恢复。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;后端减速&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;依赖项（数据库或其他服务）速度变慢，导致服务花费更长时间来完成请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;爆发和欠采样&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在进行高级容量规划或弹性扩展服务时，通常的做法是考虑整个集群中消耗的平均资源。但是，服务的调用者可以选择同时发送大量请求。这可能会暂时使单个服务器饱和。收集指标时，每分钟或更高的数据几乎肯定会掩盖这些爆发。&lt;/p&gt;
&lt;h2 id=&#34;现在-lyft-的一天&#34;&gt;现在 Lyft 的一天&lt;/h2&gt;
&lt;h3 id=&#34;我们如何限制速率&#34;&gt;我们如何限制速率？&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lyft/ratelimit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lyft/ratelimit&lt;/a&gt;  是一种开源 Go/gRPC 服务，旨在为各种应用程序启用通用速率限制方案。
速率限制适用于域。域的示例可以是每 IP 速率限制，或每秒对数据库的连接数。Ratelimit 在 Lyft 投入生产，每秒处理数十万个速率限制请求。&lt;/p&gt;
&lt;p&gt;我们在边缘代理和内部服务网格中使用 Ratelimit。&lt;/p&gt;
&lt;p&gt;开源服务是 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/global_rate_limiting#arch-overview-rate-limit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 速率限制 API&lt;/a&gt; 的参考实现。Envoy 提供以下集成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;网络级别速率限制过滤器&lt;/strong&gt; ：Envoy 可以为安装过滤器的侦听器上的每个新连接调用速率限制服务。配置指定特定域和描述符设置为速率限制。这具有限制每秒通过收听者的连接的速率的最终效果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP 级别速率限制过滤器&lt;/strong&gt; ：Envoy 可以为安装过滤器的侦听器上的每个新请求调用速率限制服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Lyft，我们主要使用速率限制来抵御基础设施边缘的负载。例如，每个用户 ID 允许的请求率。这样可以保护 Lyft 的服务 免受外部客户端意外或恶意负载造成的 资源匮乏。&lt;/p&gt;
&lt;h3 id=&#34;监控&#34;&gt;监控&lt;/h3&gt;
&lt;p&gt;Lyft 的网络团队为所有配置的速率限制提供指标。当服务所有者创建新的速率限制以在边缘、服务之间或数据库中强制执行时，可以立即收集与防御机制有关的数据。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8zvymaj20h4029wf0_hu_de693e27194416c2.webp 400w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8zvymaj20h4029wf0_hu_793f10b78f0aa27.webp 760w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8zvymaj20h4029wf0_hu_55f0346e10435307.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/61411417ly1furr8zvymaj20h4029wf0_hu_de693e27194416c2.webp&#34;
               width=&#34;616&#34;
               height=&#34;81&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图是 ratelimit 服务仪表板的一个片段，其中显示了三个面板：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;每分钟总命中数&lt;/strong&gt; ：此面板显示时间序列，其中配置了每个速率限制的总命中数。在此面板中，服务所有者可以随时查看趋势。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每分钟超限&lt;/strong&gt; ：此面板显示超出配置限制的指标。该面板允许服务所有者拥有可量化的数据，用于返回其服务并评估调用模式，并为高负载事件进行容量规划。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每分钟接近限制&lt;/strong&gt; ：此面板显示指标何时达到配置限制的 80％。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;我们如何管理并发&#34;&gt;我们如何管理并发？&lt;/h2&gt;
&lt;p&gt;Envoy 的主要优点之一是它通过&lt;strong&gt;网络级别&lt;/strong&gt;的断路系统强制执行并发限制，而不必独立地在每个应用程序中配置和实现这些模式。Envoy 支持各种类型的全分布式断路器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;最大连接&lt;/strong&gt; 数：Envoy 将为上游集群中的所有主机建立的&lt;strong&gt;最大连接&lt;/strong&gt; 数。实际上，这通常用于保护 HTTP/1 集群，因为 HTTP/2 可以通过单个连接复用请求，因此限制了减速期间的连接增长。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大挂起请求数&lt;/strong&gt; ：等待池中可用连接时将排队的最大请求数。实际上，这仅适用于 HTTP/1集群，因为 HTTP/2 连接池从不对请求进行排队。HTTP/2 请求立即被多路复用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大请求数&lt;/strong&gt; ：在任何给定时间，集群中所有主机可能未完成的&lt;strong&gt;最大请求&lt;/strong&gt; 数。实际上，这主要用于 HTTP/2，因为 HTTP/1 通常每个连接有一个请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大活动重试次数&lt;/strong&gt; ：在任何给定时间，集群中所有主机可以执行的最大重试次数。通常，我们建议积极地进行断路重试，以便允许重试故障，但整体重试量不会爆炸并导致大规模级联故障。此设置可防止重试放大。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Lyft，我们专注于两种管理服务网格中并发性的机制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;限制入口层的并发连接数&lt;/strong&gt; 。鉴于 Lyft 的每项服务都运行一个 Envoy sidecar 来管理进入服务的入口请求（入口），我们可以配置 sidecar 对应用程序的并发连接数，从而限制入口并发进入应用程序。我们提供合理的值作为默认值，但鼓励服务所有者分析其并发模式并收紧设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;限制出口层的并发请求数&lt;/strong&gt; 。运行 sidecar 来管理来自服务的出口流量的另一个好处是，我们可以管理从服务（出口）到 Lyft 的任何其他服务的传出并发请求。这意味着“位置”服务的所有者可以有选择地配置他们想要支持 Lyft 的每个其他服务的并发级别，例如，他们可以决定并配置“游乐设施”服务可以向“位置”发出 100 个并发请求“，但”用户“服务只能向”位置“发出 50 个并发请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对 Lyft 的每个服务的出口和入口运行并发限制的一个有趣结果是，更容易跟踪不需要的行为。如上所述，所见的常见故障情形是突发性，  由于度量分辨率而可能 &lt;a href=&#34;https://docs.google.com/document/d/1qeHbXa5DULJMeSwMZIddrM0It3xVI5MwdyoH-8kU9K8/edit?disco=AAAACERmNZQ&amp;amp;ts=5b4fd7d3#heading=h.kctltbvispjy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;难以诊断&lt;/a&gt; 。出口和入口的并发限制可以通过查看请求路径中并发溢出的位置，可以轻松查明整个系统的突发行为。&lt;/p&gt;
&lt;h3 id=&#34;监控-1&#34;&gt;监控&lt;/h3&gt;
&lt;p&gt;正如我们所提到的，并发并不总是一个直观的概念。为了增强可观察性，网络团队提供了不同的可视化，以便服务所有者可以配置其并发限制，然后监控这些限制如何影响系统。&lt;/p&gt;
&lt;h4 id=&#34;设置限制&#34;&gt;&lt;strong&gt;设置限制&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr903c8uj20go03l764_hu_545ec8b31430f619.webp 400w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr903c8uj20go03l764_hu_aead33dbf95ce4a5.webp 760w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr903c8uj20go03l764_hu_bbef0b30e6912543.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/61411417ly1furr903c8uj20go03l764_hu_545ec8b31430f619.webp&#34;
               width=&#34;600&#34;
               height=&#34;129&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面的仪表板是一个交互式仪表板，服务所有者可以对 Lyft 的所有服务允许的最大并发请求数量进行试验，以满足其特定服务。在上面的示例中，“位置”服务的所有者可以看到，除“viewport”服务之外，大多数调用服务的 60 个并发请求的限制就足够了。使用此仪表板，服务所有者可以查看并发配置中的选择性更改在当前网络拓扑中的外观，并可以放心地进行这些更改。&lt;/p&gt;
&lt;h4 id=&#34;监控限制&#34;&gt;&lt;strong&gt;监控限制&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;如上所述，让 Envoy 作为一个 sidecar 运行，处理来自每个服务的入口和出口流量，允许服务所有者保护他们的服务免受入口并发和出口并发。网络团队自动创建如下所示的仪表板，以帮助服务所有者可视化并发。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;入口并发&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr901sd6j20h103hjrw_hu_8d493809c7a79144.webp 400w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr901sd6j20h103hjrw_hu_43dd0de81f2c44b4.webp 760w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr901sd6j20h103hjrw_hu_35ad47210131e97.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/61411417ly1furr901sd6j20h103hjrw_hu_8d493809c7a79144.webp&#34;
               width=&#34;613&#34;
               height=&#34;125&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用上面的两个面板，服务所有者可以看到从他们的 sidecar Envoy 到他们的服务的并发连接数（使用左边的面板），并查看是否正触发并发限制（使用右侧的面板）。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;出口并发&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furrb4gp54j20go03g0tc_hu_2f9c9a25b3c6d647.webp 400w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furrb4gp54j20go03g0tc_hu_94a3730cba76ef87.webp 760w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furrb4gp54j20go03g0tc_hu_66962f8bf84b2749.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/61411417ly1furrb4gp54j20go03g0tc_hu_2f9c9a25b3c6d647.webp&#34;
               width=&#34;600&#34;
               height=&#34;124&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用上面的两个面板，服务所有者可以在任何时间点（从左侧的面板）可视化从任何服务到其服务的并发请求数。此外，他们可以可视化超出配置限制的服务（使用右侧面板），然后继续使用具体数据解决问题。&lt;/p&gt;
&lt;h3 id=&#34;有什么缺点&#34;&gt;有什么缺点？&lt;/h3&gt;
&lt;p&gt;不幸的是，与任何静态值一样，很难选择名义上的限制。对于速率限制来说是这样的，但对于并发限制尤其如此。必须考虑几个重要因素。并发限制是本地的，必须考虑最大可能的并发性而不是平均值。工程师也不习惯在本地思考，主要考虑请求率而不是并发性。借助一些可视化和统计数据，服务所有者通常可以掌握并发性并选择名义值。&lt;/p&gt;
&lt;p&gt;除了难以推断取值之外，Lyft 的一个常见现象就是变化。整个服务网络中每天有数百个部署。对服务及其依赖项的任何更改都可以更改资源和负载配置文件。一旦选择了值，由于这些变化，它可能过时。例如，Lyft 的几乎所有服务都受 CPU 限制。如果 CPU 绑定服务的直接依赖性减慢 25％，则该服务可以处理额外的并发性，因为之前使用 CPU 的空闲请求现在等待网络 I/O 完成将等待一段时间。因此，建议比标称值增加 25% 至 50％。&lt;/p&gt;
&lt;h2 id=&#34;路线图&#34;&gt;路线图&lt;/h2&gt;
&lt;h3 id=&#34;短期&#34;&gt;短期&lt;/h3&gt;
&lt;p&gt;Lyft 的网络团队专注于为服务开发人员构建易于使用的系统，以成功配置、操作和调试 Envoy 及相关系统。因此，我们在章程中不仅要设计、实施和部署上面展示的系统，还要为我们的用户提供持续的支持。在 Lyft，基础设施组织的一个主要原则是我们为服务所有者提供的抽象应该是自助服务。这意味着我们需要在记录用例、提供调试工具和提供支持渠道方面投入巨资。&lt;/p&gt;
&lt;p&gt;鉴于非直观并发性，网络团队将在短期内围绕此方面投入额外的文档和工程教育。在过去，通过相关系统，我们看到了以下方式的成功：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;常见问题解答：常见问题列表对于客户来说是非常有用的。此外，它减少了直接回答问题的支持负担（例如，在 Slack 上，通过电子邮件，甚至是亲自回答！）。它允许您轻松地将某人指向某个链接；这种做法比人们反复回答相同的问题要好得多。不过这里可能有个弊端是这些列表可能会变得冗长而难以解析。这可以通过将内容分成分类常见问题解答来解决。&lt;/li&gt;
&lt;li&gt;选择自己的冒险：服务所有者是主角，他们可以选择冒险的结果。在上面描述的并发空间中，可能会出现几个问题，并且可以修改几个可以解决问题的设置。这意味着这种支持负担非常适合服务所有者可以从他们遇到的问题开始的格式，并导航流程图以获得他们需要分析的指标以获得正确的设置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文档和工程教育的近期投资缓解了当前并发问题的一个方面：系统的非直观性。但是，他们没有解决其他问题：陈旧性。&lt;/p&gt;
&lt;h3 id=&#34;更长期&#34;&gt;更长期&lt;/h3&gt;
&lt;p&gt;并发限制很容易实施，因为 Envoy 存在于网络的每一跳。但是，正如我们所看到的，限制很难确定，因为它需要服务所有者完全理解系统的所有约束。此外，由于网络拓扑结构的不断发展和弹性，当今的互联网规模公司，尤其是那些处于成长阶段的公司，静态限制迅速增长。&lt;/p&gt;
&lt;p&gt;Netflix 在这个问题上投入了大量资金，最近 &lt;a href=&#34;https://github.com/Netflix/concurrency-limits&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开源了一个库，&lt;/a&gt;  用于衡量或估算网络中每个点的并发限制。更重要的是，随着系统规模和命中限制，系统中每个节点将调整并强制执行其局部极限视图。他们通过将系统的并发约束等同于 TCP 拥塞窗口，借用了常见的 TCP 拥塞控制算法。&lt;/p&gt;
&lt;p&gt;Envoy 的设计原则之一包括丰富且功能强大的过滤器堆栈，以提供可扩展性。Envoy 具有 L3/L4（TCP 级别）和 L7（HTTP 级别）过滤器堆栈。可以编写 HTTP 过滤器以对 HTTP 级别消息进行操作。HTTP 过滤器可以停止并继续迭代到后续过滤器。这种丰富的过滤器架构允许复杂的场景，例如运行状况检查处理、调用速率限制服务、缓冲、路由、生成应用程序流量统计数据，如 DynamoDB 等。&lt;/p&gt;
&lt;p&gt;在接下来的几个月里，Lyft 将与 Netflix 的并发限制库背后的团队合作，将基于其库的系统带入 Envoy L7 过滤器。这意味着在 Lyft 以及使用 Envoy 的任何其他公司我们将迁移到自动化系统，我们的服务工程师不必静态配置并发限制。这意味着，例如，如果由于意外情况导致服务减速，则自适应限制系统可以自动抑制检测到的限制，从而防止由于不可预见的减速而导致的故障。一般而言，自适应系统消除了我们过去遇到的两个问题：确定适当的限制是非直观的，并且静态限制在弹性分布式系统中快速增长。&lt;/p&gt;
&lt;h2 id=&#34;最后的想法&#34;&gt;最后的想法&lt;/h2&gt;
&lt;p&gt;要了解有关 Envoy 断路器实现的更多信息，请参阅  Envoy 文档中的断路器 &lt;a href=&#34;http://www.servicemesher.com/envoy/intro/arch_overview/circuit_breaking.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;架构概述&lt;/a&gt;。作为一个开源项目，Envoy 对代码贡献持开放态度。我们也欢迎新的想法。即使代码没有到位，也可以随意打开一个建议的断路器改进 issue。在写作本文时尚未实现的能力的一个示例是 &lt;a href=&#34;https://github.com/envoyproxy/envoy/issues/3332&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于系统资源的断路&lt;/a&gt; 。我们可以在处理入口流量时直接断路，而不是根据 CPU 配置文件逼近并发请求阈值。&lt;/p&gt;
&lt;p&gt;虽然断路器可以改善系统在负载下的行为，但重要的是不要忘记可以在系统本身中进行的改进。断路器应被视为故障保护，而不是主要的约束手段。服务所有者应该使用断路器知识来改进自己的代码库。限制有限池的并发性是解决并发问题的最常用方法。如果从同一上下文生成大量请求，则调用者可以选择使用批处理 API。如果批处理 API 不存在，则可能符合接收调用的服务的最佳利益。这些模式往往是教育过程的进一步延伸。在 Lyft，网络团队与其他团队合作，对所有服务进行教育和改进。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8ztt97j202d02sweb_hu_b592bf6bef89ff12.webp 400w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8ztt97j202d02sweb_hu_f5e8be96757b5058.webp 760w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8ztt97j202d02sweb_hu_31adebcd33d1b2a5.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/61411417ly1furr8ztt97j202d02sweb_hu_b592bf6bef89ff12.webp&#34;
               width=&#34;85&#34;
               height=&#34;100&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jose Nino&lt;/strong&gt; 是 Lyft 网络团队开发工具和配置的负责人。在近两年的时间里，他一直在 Lyft 工作，Jose 一直在创建系统来扩展 Lyft Envoy 生产环境的配置，以适应日益庞大的部署和工程组织。他曾担任开源 Envoy 维护人员，并培养了 Envoy 不断发展的社区。最近，Jose 继续扩展 Lyft 的网络负载容忍系统。何塞在几个场地谈到了 Envoy 和其他相关话题，最近一次是在 Kubecon EU 2018。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8zquv6j202d02sdfo_hu_504484661930b166.webp 400w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8zquv6j202d02sdfo_hu_760bfba73317468.webp 760w,
               /blog/envoy-service-mesh-cascading-failure/61411417ly1furr8zquv6j202d02sdfo_hu_5fff9c107473386d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/envoy-service-mesh-cascading-failure/61411417ly1furr8zquv6j202d02sdfo_hu_504484661930b166.webp&#34;
               width=&#34;85&#34;
               height=&#34;100&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Daniel Hochman&lt;/strong&gt; 是 Lyft 的高级基础设施工程师。他热衷于扩展创新产品和流程，以改善公司内外的生活质量。在 Lyft 工作期间，他成功地指导了平台产品和组织发展的爆炸式增长。他编写了吞吐量最高的微服务之一，并介绍了几种关键存储技术。Daniel 目前负责 Lyft 的交通网络，并负责在内部和边缘扩展 Lyft 的网络基础设施。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>采纳运行在 Kubernetes 上的 Istio 服务网格的利弊分析</title>
      <link>https://cloudnativecn.com/blog/istio-service-mesh-tech-boosts-kubernetes-work-with-trade-offs/</link>
      <pubDate>Sun, 05 Aug 2018 15:47:05 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/istio-service-mesh-tech-boosts-kubernetes-work-with-trade-offs/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://searchitoperations.techtarget.com/tip/Istio-service-mesh-tech-boosts-Kubernetes-work-with-trade-offs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;IT 团队能否只使用一种工具，使开发人员能够专注于编写应用程序代码，使管理员只专注于 IT 资源的管理？使用 Istio 可以实现，尽管如此，采纳 Istio 前确实需要研究下它的利弊。&lt;/p&gt;
&lt;p&gt;Kubernetes 是一个开源容器编排系统，它提供了管理和扩展容器化应用程序的强大功能，但有些事情它不能很好地完成。而 Istio 增加了额外的支持，它可以管理微服务之间的流量。&lt;/p&gt;
&lt;p&gt;Istio 服务网格项目是平台无关的，协作和开源的，由 IBM、Google 和 Lyft（基于应用程序的传输服务）开发。&lt;a href=&#34;https://searchmicroservices.techtarget.com/news/450419875/IBM-Google-Lyft-launch-Istio-open-source-microservices-platform&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;它使用代理 sidercar 模型&lt;/a&gt;在云平台上连接、保护、管理和监控微服务网络。Istio 明确&lt;a href=&#34;https://searchitoperations.techtarget.com/feature/Service-mesh-architecture-radicalizes-container-networking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;定义了基础架构的作用&lt;/a&gt;，与运行在其上的软件分离。&lt;/p&gt;
&lt;h2 id=&#34;集成-istio-的利弊&#34;&gt;集成 Istio 的利弊&lt;/h2&gt;
&lt;p&gt;编排工具 &lt;a href=&#34;https://searchitoperations.techtarget.com/definition/Google-Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 与 Istio 的整合，可以让开发人员和 IT 管理员在应用程序容器化这一共同目标上一起努力，IT 管理软件提供商 SolarWinds 的首席软件架构师 Karlo Zatylny 表示：“软件开发人员将注意力集中在编写能够创造最大商业价值的代码上”。他们不需要考虑&lt;a href=&#34;https://searchitoperations.techtarget.com/ehandbook/How-container-deployment-changes-the-capacity-management-equation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;部署因素&lt;/a&gt;，例如支持容器的 VM 和物理环境。&lt;/p&gt;
&lt;p&gt;Zatylny 说：通过 Istio，IT 管理员可以专注于计算资源和网络资源，而不是处理特定的硬件和虚拟分配。部署的基于微服务的应用程序在消耗可用资源方面变得更有效率，而不是在过度使用未充分利用基础架构的某些部分。Istio 还使用配置驱动的通信架构，这提高速度缩短了开发周期，因此开发人员可以在业务需求变化时轻松地对软件重构。&lt;/p&gt;
&lt;p&gt;尽管代码复用和其他设计都极大的降低了复杂度，但 Istio 服务网格设计带来了复杂性和额外的管理开销。&lt;/p&gt;
&lt;p&gt;Istio 在上行和下游提供负载均衡、鉴权、可见性和运行状况检查，使管理员能够查找、连接和路由各个部署部分。IDC 分析师 Brad Casemore 表示，它将网络应用于&lt;a href=&#34;https://searchnetworking.techtarget.com/definition/OSI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开放系统互连模型（OSI）&lt;/a&gt;第 7 层的微服务交付环境，而不是 IP 的第 3 层或第 2 层的以太网。&lt;/p&gt;
&lt;p&gt;Red Hat 产品管理高级主管 Rich Sharples 说，在 Istio 服务网格中控制和数据平面之间的分割概念可能会使用户感到困惑，但实际上相当简单。数据平面使用简单的代理架构来调解服务网格中每个服务的所有入站和出站流量。控制平面处理服务注册和发现、认证、访问控制、证书管理（即签名、发布和撤销）和服务网格配置，以及来自服务和服务代理的遥测数据。&lt;/p&gt;
&lt;p&gt;服务网络可在 &lt;a href=&#34;https://searchmicroservices.techtarget.com/definition/application-program-interface-API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API&lt;/a&gt; 后面实现安全、可靠的服务器到服务器通信。“当你构建微服务时，你通常会公开一个 API，它会公开功能，然后通过一系列服务来实现”，Gartner 分析师 Anne Thomas 表示。因为容器是短暂的，这意味着它们不会保留会话信息，管理员必须定期重新连接它们，并且它们需要安全授权功能，以确保部署的服务器到服务器通信受到保护和运行。&lt;/p&gt;
&lt;p&gt;Istio 的服务网格定位服务，确保通信的健壮性，并在连接失败时执行重试或找到必要服务的另一个实例并建立连接。Thomas 说：服务网格还可以实现隔板和断路器。隔板隔离应用程序的各个部分，以确保任何给定的服务故障不会影响任何其他服务。断路器是一种监控组件，具有用于&lt;a href=&#34;https://medium.com/microservices-in-practice/microservices-in-practice-7a3e85b6624c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;外部微服务通信&lt;/a&gt;的编程故障阈值；断路器杀死故障服务以调节资源消耗并请求响应时间。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://searchsdn.techtarget.com/definition/east-west-traffic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;东西向通信能力&lt;/a&gt;是微服务的另一个关键需求。将客户端连接到服务的 API 网关是南北向通信; 这通常是足够的，但是为了实现其背后具有附加服务的微服务，服务网络创建东西向通信，即 IT 环境内的通信。Istio 是为这种通信途径而构建的。&lt;/p&gt;
&lt;p&gt;Istio 有一些缺点，因为它提供了一个标准的多语言运行时服务网格，可以在给定的云平台上运行，但一如既往，我们需要权衡利弊。虽然 Istio 使开发人员能够在不模糊应用逻辑的情况下生成智能微服务设计模式和最佳实践，但该功能具有性能和延迟影响，Sharples 说。Sharples 表示，Istio 的代理 sidecar 模型（用于调解流量的开源 Envoy 边缘代理）——引入了额外的网络调用，可能会为高性能实时应用产生&lt;a href=&#34;https://searchmicroservices.techtarget.com/tip/Microservices-challenges-include-latency-but-it-can-be-beat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;不可接受的延迟&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;如何采用-istio-服务网格&#34;&gt;如何采用 Istio 服务网格&lt;/h2&gt;
&lt;p&gt;Istio 在测试版中，在发布时没有提供商业支持。Casemore 说，对于大多数组织来说，这仅是一个有用的 POC 项目，而且是那些具有冒险精神的人将它运行在非关键业务应用程序时。&lt;/p&gt;
&lt;p&gt;IDC 的分析师 Gary Chen 说：“这项技术适用于那些处于技术前沿的团队，但是他们必须非常自信才会采纳该技术”。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>服务网格架构激活了容器网络管理—来自于服务网格创建者们的见解与展望</title>
      <link>https://cloudnativecn.com/blog/service-mesh-architecture-radicalizes-container-networking/</link>
      <pubDate>Thu, 26 Jul 2018 21:12:31 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/service-mesh-architecture-radicalizes-container-networking/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://searchitoperations.techtarget.com/feature/Service-mesh-architecture-radicalizes-container-networking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;容器是 IT 行业的超级英雄，它与服务网格是最佳组合。它们联手对抗混乱的网络管理。&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;容器和微服务出现催生了一种称为服务网格的新型网络架构范例，但 IT 观察家们对它是否能够广泛应用到生产上持有不同意见。&lt;/p&gt;
&lt;p&gt;服务网格使用一个称为 sidecar 的代理，它是附加在应用程序旁、虚拟机或运行在 Kubernetes 的 pod 中的容器，具体运行在哪里取决于所使用的服务网格的类型。然后，该代理可以连接到集中式的控制平面软件，这些软件收集细粒度的网络遥测数据，应用网络管理策略或更改代理配置，建立并执行网络安全策略。&lt;/p&gt;
&lt;p&gt;IT 系统中的服务网格架构还处于初期阶段，但与容器一样它上升的很快。在 2017 年 12 月云原生计算基金会（CNCF）举办的 KubeCon 和 CloudNativeCon 上，服务网格已经取代容器成为&lt;a href=&#34;https://searchitoperations.techtarget.com/essentialguide/Use-these-DevOps-examples-to-reimagine-an-IT-organization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; DevOps 前沿&lt;/a&gt;最热门的话题。&lt;/p&gt;
&lt;p&gt;“我们经常发现自己在构建应用软件时，我们实际上在做的是一遍又一遍地编写相同的代码来解决某些实际上非常困难的计算机科学问题，这些问题应该被考虑到某种通用接口中”，微服务监控创业公司 LightStep 首席执行官 Ben Sigelman 在 KubeCon 的服务网格主题演讲中表示。&lt;/p&gt;
&lt;p&gt;“服务网格可以用来做发现服务、服务连接、断路、负载均衡&amp;hellip;&amp;hellip;安全和身份验证” , Sigelman 说，他是前谷歌工程师，OpenTracing 的创建者，OpenTracing 是开源的，提供供应商无关的 API。&lt;/p&gt;
&lt;h3 id=&#34;服务网格简史&#34;&gt;服务网格简史&lt;/h3&gt;
&lt;p&gt;最早版本的 sidecar 代理技术在 2016 年初开始出现在如谷歌和推特的网络商店，微服务管理需要对网络进行新的思考。与传统的单体应用程序不同，&lt;a href=&#34;https://searchmicroservices.techtarget.com/definition/microservices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务&lt;/a&gt;依靠外部网络来沟通和协调应用程序功能。这些微服务通信需要密切监控，有时需要大规模重新配置。&lt;/p&gt;
&lt;p&gt;用于微服务网络管理自动化最早的技术依赖于库，作为应用程序代码的一部分进行部署，&lt;a href=&#34;https://github.com/Netflix/Hystrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如 Netflix 的 Hystrix&lt;/a&gt;。因此，开发人员需要进行网络管理。这些库也必须用特定环境中使用的每种应用程序语言编写。这提出了一个难题，因为&lt;a href=&#34;https://searchmicroservices.techtarget.com/answer/How-will-microservices-development-benefit-enterprise-architecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务精神&lt;/a&gt;的一个主要原则是小团队可以自由地使用任何语言进行独立的服务管理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数认为自己正在使用微服务的组织并没有真正做到微服务。——&lt;em&gt;Anne Thomas&lt;/em&gt;，Gartner 分析师&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在 2016 年初，第一批在 Twitter 上实施微服务的工程师成立了 Buoyant 公司，该公司采用 sidecar 代理方法替代应用程序库。Buoyant 在 2016 年年中创造了&lt;em&gt;Service Mesh&lt;/em&gt;这个术语，其最初的服务网格产品 Linkerd 使用 Java 虚拟机（JVM）作为 sidecar，这种设计将网络管理负担从应用程序开发人员转移出来，并支持对多语言的集中管理应用网络。到目前为止，Linkerd 是主流企业级 IT 商店中唯一上生产环境的服务网格架构。使用的客户包括 Salesforce、PayPal、Credit Karma、Expedia 和 AOL。&lt;/p&gt;
&lt;p&gt;Linkerd 刚刚站稳了脚跟，&lt;a href=&#34;https://searchitoperations.techtarget.com/definition/Docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker 容器&lt;/a&gt;和 &lt;a href=&#34;https://searchitoperations.techtarget.com/definition/Google-Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 容器编排&lt;/a&gt;又将 &lt;a href=&#34;https://searchitoperations.techtarget.com/definition/Google-Kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buoyant&lt;/a&gt; 工程师送回了原点。终于在 2017 年 12 月，该公司发布了 Conduit，一种基于轻量级容器代理的服务网格架构，而不是 Linkerd 中使用的耗资源的 JVM。它专门用于与 &lt;a href=&#34;https://searchitoperations.techtarget.com/tip/Googles-Go-language-seeks-DevOps-middle-ground&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt; 和 &lt;a href=&#34;https://research.mozilla.org/rust/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rust&lt;/a&gt; 应用程序语言组合使用的 Kubernetes。&lt;/p&gt;
&lt;p&gt;Kubernetes 社区正在为 Go 编写轻量级服务，可能需要 20 MB 或 50 MB 的内存才能运行，而 Linkerd 的  JVM 可能会占用 200 MB 的内存，对于 Kubernetes 爱好者来说这是一个矛盾点，William Morgan——Buoyant 的联合创始人兼首席执行官这样说。&lt;/p&gt;
&lt;p&gt;Morgan 说：“为此消耗大量内存是不最理想的，特别是其价值主张是成为开发人员不必担心的底层基础架构的一部分时。&lt;/p&gt;
&lt;p&gt;但就在 2017 年初 Buoyant 工程师开始重新考虑其服务网格架构时，Kubernetes 的创造者谷歌和重量级技术公司 IBM 联手  Lyft 公司的 Envory 创建了  &lt;a href=&#34;https://searchmicroservices.techtarget.com/news/450419875/IBM-Google-Lyft-launch-Istio-open-source-microservices-platform&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;。鉴于其支持者的声誉和谷歌内部管理大规模基于容器的微服务的经验，这种基于容器的服务网格引起了业界的广泛关注。Google 基于其内部的服务控制工具向 Istio 提供控制平面软件，而 IBM 则添加了控制平面工具 Amalgam8。Istio 是基于 Lyft 的 Envoy sidecar 代理，该公司是为了控制平面接收命令而建立的。它可以动态读取到 sidecar 的配置更新，而无需重启。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-architecture-radicalizes-container-networking/61411417ly1fsz4wgsjvkj20m80oomy3_hu_61f9462a300faac2.webp 400w,
               /blog/service-mesh-architecture-radicalizes-container-networking/61411417ly1fsz4wgsjvkj20m80oomy3_hu_26838e6b37eb4bc5.webp 760w,
               /blog/service-mesh-architecture-radicalizes-container-networking/61411417ly1fsz4wgsjvkj20m80oomy3_hu_87df97a2e515217.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-architecture-radicalizes-container-networking/61411417ly1fsz4wgsjvkj20m80oomy3_hu_61f9462a300faac2.webp&#34;
               width=&#34;685&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Istio 的支持者正在与 Kubernetes 所在的 CNCF 进行长期管理谈判。他们计划在 2018 年第三季度发布 1.0 版本。&lt;/p&gt;
&lt;p&gt;到目前为止，Linkerd 和 Istio 已经成为这个新兴市场中最具影响力的项目，但是还有很多服务网格架构项目正在进行中，包括开源和专有选项。这些项目中有许多是基于 Envoy sidecar。Nginx 基于其 Nginx Plus 代理引入了&lt;a href=&#34;https://itknowledgeexchange.techtarget.com/open-source-insider/nginx-gets-granular-on-managed-microservices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自己的集中式管理控制平面&lt;/a&gt;。其他早期的服务网格希望包括 Turbine Labs 的 Houston、Datawire 的 Ambassador、Heptio 的 Contour、Solo.io 的 Gloo 和 Tigera 的 CNX。&lt;/p&gt;
&lt;h3 id=&#34;谁需要服务网格&#34;&gt;谁需要服务网格？&lt;/h3&gt;
&lt;p&gt;现在判断服务网络架构在主流企业 IT 商店中的普及度还为时过早，这些 IT 商店不适用于 Twitter 或 Google。&lt;/p&gt;
&lt;p&gt;Gartner 分析师 Anne Thomas 表示，对于以有限方式使用容器的组织，现有的 API 网关、Kubernetes 或 PaaS 软件（如 Docker Enterprise Edition 或 Cloud Foundry）的服务发现和网络管理功能可能已经足以提供微服务支持。&lt;/p&gt;
&lt;p&gt;“大多数认为自己正在实施微服务的组织并没有真正做到真正的微服务“，Thomas 说。“我不相信真正的微服务将成为传统企业中的主流。”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务网格允许您以集中的方式管理流量，这种方式可以让屏蔽环境对技术的影响，我觉得这在任何规模上都很有用。——&lt;strong&gt;Zack Angelo&lt;/strong&gt; BigCommerce 平台工程总监&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;对 Thomas 来说，真正的微服务是尽可能独立的。每个服务处理一个单独的方法或领域功能；使用自己的独立数据存储；与其他微服务依靠基于异步事件的通信；并允许开发人员设计、开发、测试、部署和替换这个单独的功能，而无需重新部署应用程序的任何其他部分。&lt;/p&gt;
&lt;p&gt;“很多主流公司并不一定愿意花将大量的时间和金钱投入到应用架构上”，Thomas 争辩道。“他们仍然在以更粗粒度的方式做事且不会使用服务网格，至少在网格以服务的方式添加到平台，或者在出现新型开发框架之前“。&lt;/p&gt;
&lt;p&gt;很多服务网格的早期用户认为并不一定需要有大量的微服务才能从该技术中受益。&lt;/p&gt;
&lt;p&gt;“它可以让你以集中的方式管理流量，流量在不同的环境和技术中是一致的，我觉得这在任何规模上都很有用”，位于德克萨斯州奥斯汀的电子商务公司 BigCommerce 的平台工程主管 Zack Angelo 这样说，他们使用 Linkerd 服务网格。“即使你只有十几个服务，这也是非常有用的功能”。&lt;/p&gt;
&lt;p&gt;Angelo 说，传统的网络管理概念，例如负载均衡器，无法按微小的百分比把流量路由到某些节点，以便进行&lt;a href=&#34;https://searchitoperations.techtarget.com/tip/Improve-application-rollout-planning-with-advanced-options&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;金丝雀或蓝/绿发布&lt;/a&gt;。传统的网络监控工具也不提供服务网格所提供的那种细粒度的遥测数据，能够跟踪 99% 的应用程序延迟中的微小异常，其重要性在微服务网络中被放大。&lt;/p&gt;
&lt;p&gt;Linkerd 的负载均衡模式使用了一种称为&lt;em&gt;指数加权移动平均&lt;/em&gt;的技术，以便当服务网格跨主机分配网络流量时，它会考虑下游服务响应的速度，然后将流量路由到服务性能最佳的地方，而不是传统循环负载均衡技术。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取实时数据并为每位用户提供个性化体验这很重要。 &lt;strong&gt;Jennifer Lin&lt;/strong&gt;——Google 的 Istio 产品总监&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;“我们的应用分布在多个数据中心，很高兴能够将该技术内置到我们的负载均衡器中，它能自动感知并选择最快的网络路径”。Angelo 说。“从故障转移的角度来看，这对我们也很重要”。&lt;/p&gt;
&lt;p&gt;并不是说使用服务网络时不需要权衡，特别是当涉及到 IT 运维人员不熟悉高级网络概念管理的复杂性时。Angelo 表示，如果管理不当，集中式控制平面可能会成为单点故障，尽管企业可以通过在其服务网格设计中增加弹性来降低这种风险。&lt;/p&gt;
&lt;p&gt;“如果在服务发现中发生了某些不好的事情，向 Linkerd 节点提供陈旧的数据或其他内容，负载均衡池中存在错误的主机，则即使服务发现信息不正确，Linkerd 失败算法也会将其从池中取出，这真是太棒了“，Angelo 说。&lt;/p&gt;
&lt;p&gt;其他公司看好 Istio 的集中化网络监控功能，计划在 Istio 进入 GA 状态后跟进。&lt;/p&gt;
&lt;p&gt;“我们仍然有 PHP、Node 和 Go 中程序代码，以及三种不同的方式来收集日志，监控服务和运行状态”，Harrison Harnisch 说道，他是一名位于芝加哥的 Buffer 公司员工，该公司提供一个美国的分布式社交媒体管理平台。”但如果我们能够通过服务网络获得所有内容，我们就可以使用相同的模式进行日志记录，并构建模板 dashboard 以便跨团队共享，这在现在很难做到” 。&lt;/p&gt;
&lt;h3 id=&#34;istio-创造者对服务网格未来的展望&#34;&gt;Istio 创造者对服务网格未来的展望&lt;/h3&gt;
&lt;p&gt;即使在银行业等传统行业中，开发人员也在创建复杂的面向消费者的应用程序，这些应用程序看起来更像是 Google 这样的大规模的网络应用程序。&lt;/p&gt;
&lt;p&gt;“重要的是，他们有实时数据，并且他们为每个用户提供个性化体验”，谷歌 Istio 产品管理总监 Jennifer Lin 说。“这需要一个更细粒度的服务集，允许这些创新的应用程序以安全的方式以极低的延迟处理大规模的流量” 。&lt;/p&gt;
&lt;p&gt;IBM 工程师 Daniel Berg 说，精细的流量路由和安全策略也将成为 IBM 推出的基于 Istio 的混合云概念的关键组成部分，并将用于管理私有云和公有云中的微服务。&lt;/p&gt;
&lt;p&gt;“客户将需要一个网格来帮助组织和管理传统应用向云原生应用程序之间转换所带来的复杂性”，Berg 说。“如果您开始一将网格作为应用程序的一部分，当您将其移植到另一个未使用该网格的供应商中时，尽管它仍可以运行，但会得到完全无法预期的结果，这种做法是不可取的“。&lt;/p&gt;
&lt;p&gt;但 Envoy 的高级软件工程师 Matt Klein 表示，主流企业最有可能等到服务网格成为&lt;a href=&#34;https://searchitoperations.techtarget.com/tip/Container-as-a-service-providers-compete-with-distinct-strategies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;公有云容器服务和 PaaS 产品的一部分&lt;/a&gt;时才开始真正使用它，这与 Gartner 的 Thomas 的预测相呼应。&lt;/p&gt;
&lt;p&gt;“你可以想象它可以像 AWS Fargate 那样工作，为每个用户函数或容器旁自动注入一个如 Envoy 这样的代理，而且用户只需要了解这些功能而无需关心它们是如何实现的“ ，Klein 说。“它们可以获得服务网格提供功能，但对那到底是不是服务网格并不重要”。&lt;/p&gt;
&lt;p&gt;Klein 说，也有人猜测过度到这种状态服务需要多长时间。&lt;/p&gt;
&lt;p&gt;Klein 说：“在公共云中某种技术成熟大约需要 10 到 20 年的时间，对于像微软 Azure、Google 云平台和亚马逊这样百年企业，我们正处于该过程的初级阶段”。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Kubernetes 和 Istio 对基于容器基础设施的全面服务监控</title>
      <link>https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/</link>
      <pubDate>Wed, 04 Jul 2018 17:54:13 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://www.circonus.com/2018/06/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;运营容器化基础设施给我们带来了一系列新的挑战。您需要对容器进行测试，评估您的 API 端点性能，并确定您的基础架构中的不良的组件。Istio 服务网格可在不更改代码的情况下实现 API 的检测，并且可以自由的设置服务延迟。但是，我们该如何理解所有这些数据？用数学的方式，对，就是这样。&lt;/p&gt;
&lt;p&gt;Circonus 是 Istio 的第一个第三方适配器。在 &lt;a href=&#34;https://www.circonus.com/2017/12/circonus-istio-mixer-adapter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;之前的文章中&lt;/a&gt;，我们讨论了第一个用于监视基于 Istio 的服务的 Istio 社区适配器。这篇文章将对此进行扩展。我们将解释如何全面了解您的 Kubernetes 基础设施。我们还将解释如何为基于容器的基础架构增加 Istio 服务网格实现。&lt;/p&gt;
&lt;h1 id=&#34;istio-概述&#34;&gt;Istio 概述&lt;/h1&gt;
&lt;p&gt;Istio 是 Kubernetes 的服务网格，这意味着它负责所有服务之间的通信和协调，就像网络路由软件为 TCP/IP 流量所做的一样。除了 Kubernetes 之外，Istio 还可以与基于 Docker 和 Consul 的服务进行交互。与 &lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkerD&lt;/a&gt; 相似，Istio 已经的出现已经有很长时间了。&lt;/p&gt;
&lt;p&gt;Istio 是由 Google、IBM、思科和 Lyft 的 &lt;a href=&#34;https://www.circonus.com/2018/06/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/envoy.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 开发的开源项目。该项目已经有一年多的历史了，而 Istio 已经进入了大规模生产环境（有案例吗？译者注）。在这篇文章发布时，&lt;a href=&#34;https://istio.io/about/notes/0.8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;当前版本为 0.8&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;那么，Istio 是如何融入 Kubernetes 生态系统的？Kubernetes 充当数据层，Istio 充当&lt;a href=&#34;https://istio.io/docs/concepts/what-is-istio/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;控制层&lt;/a&gt;。Kubernetes   承载应用程序流量、处理容器编排、部署和扩展。Istio 路由应用程序流量，处理策略执行，流量管理和负载均衡。它还处理遥测，如指标、日志和跟踪。Istio 是基于容器的基础设施中负责保护微服务和报告的部分。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugpbmcj20go0bc0t7_hu_315fa9a3764cf8af.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugpbmcj20go0bc0t7_hu_ae402aa3dd0f4be5.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugpbmcj20go0bc0t7_hu_c38b1e17f2d729c9.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugpbmcj20go0bc0t7_hu_315fa9a3764cf8af.webp&#34;
               width=&#34;600&#34;
               height=&#34;408&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图显示了服务网格架构。Istio 为每项服务部署了一个 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;envoy sidecar proxy&lt;/a&gt;。Envoy 通过 gRPC 调用代理到 Istio Mixer 服务的入站请求。然后，Mixer 应用流量管理规则，并联合请求遥测。Mixer 是 Istio 的大脑。运维人员可以编写 YAML 文件来控制 Envoy 如何重定向流量。他们还可以指定监测信息推送和可观测性系统的遥测技术。可以在运行时根据需要应用规则，而无需重新启动任何 Istio 组件。&lt;/p&gt;
&lt;p&gt;Istio 支持多种适配器将数据发送到各种监控工具。包括 Prometheus、Circonus 或 Statsd。您也可以同时启用 Zipkin 和 Jaeger 追踪。而且，您可以把可视化所涉及的服务生成图形。&lt;/p&gt;
&lt;p&gt;Istio 易于部署。&lt;a href=&#34;https://istio.io/docs/setup/kubernetes/quick-start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;回想起来&lt;/a&gt;，大约 7 到 8 个月之前，我们还必须通过一系列 kubectl 命令才能将 Istio 安装到 Kubernetes 集群上。虽然你仍然可以这样做，但是现在我们还可以在 Google Cloud platform，只需点击几下鼠标即可部署启用了 Istio 的 Kubernetes 集群，其中包括监控、跟踪和示例应用程序。您可以快速的部署 Istio，然后使用 istioctl 命令来操作。&lt;/p&gt;
&lt;p&gt;另一个好处是我们可以从服务中收集数据，而不需要开发人员对服务进行测试才能提供数据。这有很多好处。这减少了维护的工作量，消除了代码中的失败点。这样可以提供了供应商不可知的接口，减少了与供应商绑定的机会。&lt;/p&gt;
&lt;p&gt;借助 Istio，我们可以部署不同版本的服务并加权它们之间的流量。Istio 本身使用多个不同的 pod 来操作，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; kubectl get pods -n istio-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                     READY STATUS  RESTARTS AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ca-797dfb66c5      1/1   Running  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ingress-84f75844c4 1/1   Running  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-egress-29a16321d3  1/1   Running  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-mixer-9bf85fc68    3/3   Running  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-pilot-575679c565   2/2   Running  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;grafana-182346ba12       2/2   Running  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       2m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prometheus-837521fe34    2/2   Running  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;       2m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Istio 不完全是轻量级的。Istio 的强大功能和灵活性来源于一些运维成本。但是，如果您的应用程序中包含多个微服务，那么您的应用程序容器将很快超过系统配置的容器。&lt;/p&gt;
&lt;h1 id=&#34;服务级别目标slo&#34;&gt;服务级别目标（SLO）&lt;/h1&gt;
&lt;p&gt;服务级别目标（SLO）的简要概述将为我们衡量服务的健康状况奠定基础。服务级别协议（SLA）的概念已经存在了至少十年了。但直到最近网上关于服务级别目标（SLO）和服务级别指标（SLI）相关的内容数量才迅速增加。&lt;/p&gt;
&lt;p&gt;除了著名的 &lt;a href=&#34;https://landing.google.com/sre/book.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google SRE 书以外&lt;/a&gt;，两本关于 SLO 的新书即将发布。&lt;a href=&#34;https://www.amazon.com/Site-Reliability-Workbook-Practical-Implement/dp/1492029505&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“站点可靠性工作手册”&lt;/a&gt;有关于 SLO 的专门章节，&lt;a href=&#34;http://shop.oreilly.com/product/0636920063964.do&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seeking SRE&lt;/a&gt; 中有关于由 Circonus 创始人兼首席执行官 Theo Schlossnagle 定义 SLO 目标的章节。我们还建议观看&lt;a href=&#34;https://twitter.com/sethvargo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Seth Vargo&lt;/a&gt; 和 &lt;a href=&#34;https://twitter.com/lizthegrey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Liz Fong Jones&lt;/a&gt; 的 YouTube 视频 &lt;a href=&#34;https://youtu.be/tEylFyxbDLE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“SLI、SLO、SLA，我的天呐！”&lt;/a&gt;，以深入了解 SLI、SLO 和 SLA 之间的差异。&lt;/p&gt;
&lt;p&gt;总结一下：&lt;strong&gt;SLI 驱动 SLO，通知 SLA&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;服务级别指标（SLI）是衡量服务健康状况的指标。例如，我可以有一个 SLI，它表示在过去 5 分钟内，我的 95% 主页请求延迟应小于 300 毫秒。&lt;/p&gt;
&lt;p&gt;服务级别目标（SLO）是 SLI 的目标或指标。我们采用 SLI，并扩展其范围以量化我们期望的服务在战略时间间隔内执行的情况。使用前面例子中的 SLI，我们可以说，我们希望满足 SLI 为后续年份窗口设置的标准的 99.9％。&lt;/p&gt;
&lt;p&gt;服务级别协议（SLA）是企业与客户之间的协议，定义了未能满足 SLO 的后果。一般来说，您的 SLA 所依据的 SLO 将比您的内部 SLO 更宽松，因为我们希望内部面向的目标比我们的外部目标更为严格。&lt;/p&gt;
&lt;h1 id=&#34;red-仪表板&#34;&gt;RED 仪表板&lt;/h1&gt;
&lt;p&gt;SLI 的哪些组合最适合量化主机和服务健康状态？在过去几年中，出现了一些新兴的标准。最高标准是 USE 方法，RED 方法和 Google SRE 手册中讨论的“四个黄金信号”。&lt;/p&gt;
&lt;p&gt;Brendan Gregg 介绍了 &lt;a href=&#34;http://www.brendangregg.com/usemethod.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;USE 方法&lt;/a&gt;，该&lt;a href=&#34;http://www.brendangregg.com/usemethod.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;方法&lt;/a&gt;旨在根据利用率、饱和度和错误指标量化系统主机的健康状况。对于像 CPU 这样的产品，我们可以将用户、系统和闲置百分比作为常见的利用率指标。我们可以使用平均负载量和运行队列进行饱和度的判定。UNIX perf 分析器是测量 CPU 错误事件的好工具。&lt;/p&gt;
&lt;p&gt;Tom Wilkie 几年前介绍了 &lt;a href=&#34;https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RED 方法&lt;/a&gt;。我们使用 RED 方法监控请求率、请求错误和请求持续时间。Google SRE 手册讨论了如何使用延迟、流量、错误和饱和度指标。这些“ &lt;a href=&#34;https://landing.google.com/sre/book/chapters/monitoring-distributed-systems.html#xref_monitoring_golden-signals&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;四个黄金信号&lt;/a&gt; ”以服务健康为目标，与 RED 方法类似，但它添加了饱和度指标。在实践中，可能难以量化服务饱和度。&lt;/p&gt;
&lt;p&gt;那么，如何监控容器？容器是短暂实体。直接监视它们来辨识服务的健康状态会带来许多复杂问题，例如高基数问题。综合监控这些容器的服务输出会更容易和更有效。如果服务是健康的，那么不必在乎单个容器是异常。服务编排框架可能将这个容器驱逐，并用新的容器取而代之。&lt;/p&gt;
&lt;p&gt;我们思考下如何把 Istio 的 SLI 集成到 RED 仪表板。为了组成我们的 RED 仪表板，我们来看看 Istio 提供的遥测记录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求按响应代码计数&lt;/li&gt;
&lt;li&gt;请求时长&lt;/li&gt;
&lt;li&gt;请求大小&lt;/li&gt;
&lt;li&gt;响应大小&lt;/li&gt;
&lt;li&gt;连接收到的字节&lt;/li&gt;
&lt;li&gt;连接发送字节&lt;/li&gt;
&lt;li&gt;连接时间&lt;/li&gt;
&lt;li&gt;基于模板的元数据（度量标签）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 提供了有关它收到的请求，产生响应的延迟和连接级别数据的几个指标。请注意上面列表中的前两项；我们希望将它们包含在我们的 RED 仪表板中。&lt;/p&gt;
&lt;p&gt;Istio 还赋予我们添加度量标签的能力，这就是所谓的尺寸。因此，我们可以通过主机、集群等来分解遥测。我们可以通过获取请求计数的一阶导数来获得每秒请求的速率。我们可以通过请求不成功的请求计数的导数来获得错误率。Istio 还向我们提供每个请求的延迟，因此我们可以记录每个服务请求完成的时间。&lt;/p&gt;
&lt;p&gt;另外，Istio 为我们提供了一个 Grafana 仪表板，它包含我们想要的部分：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh33fcj20go08k77r_hu_5f5b66b8161b81b3.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh33fcj20go08k77r_hu_72aca79bebda94dd.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh33fcj20go08k77r_hu_49dad0504af1e89d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh33fcj20go08k77r_hu_5f5b66b8161b81b3.webp&#34;
               width=&#34;600&#34;
               height=&#34;308&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们想要的组件在上面的屏幕截图中以红色圈起来。我们在左上角的每秒操作请求率，右上角的每秒失败请求数，以及底部的响应时间图。这张图上还有其他几个指标，但让我们仔细看看我们圈出的那些指标：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh936hj20go081778_hu_a992bb08225eda3c.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh936hj20go081778_hu_e30ddc455286609e.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh936hj20go081778_hu_42b811901dadbba9.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh936hj20go081778_hu_a992bb08225eda3c.webp&#34;
               width=&#34;600&#34;
               height=&#34;289&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以上屏幕截图显示了仪表板的速率组件。这非常简单。我们计算返回 200 响应代码的请求数，并绘制一段时间内的速率图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhs1lwj20go089mzq_hu_39627b37fbea958a.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhs1lwj20go089mzq_hu_96c292c9b38c3e67.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhs1lwj20go089mzq_hu_4f83d6c399844bce.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhs1lwj20go089mzq_hu_39627b37fbea958a.webp&#34;
               width=&#34;600&#34;
               height=&#34;297&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Istio 仪表板为返回 5xx 错误代码的响应做了类似的操作。在上面的屏幕截图中，您可以看到它如何通过 ingress controller 或 productpage 页面本身的错误来分解错误。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhdtxwj20go08ywjw_hu_aede276ca68b6b52.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhdtxwj20go08ywjw_hu_cd31ef1629992ce6.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhdtxwj20go08ywjw_hu_4f296124deb76d0d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhdtxwj20go08ywjw_hu_aede276ca68b6b52.webp&#34;
               width=&#34;600&#34;
               height=&#34;322&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;该屏幕截图显示了请求持续时间图。此图是关于我们服务的健康状况的最丰富信息。这些数据由 Prometheus 监测系统提供，因此我们可以看到请求时间百分点，包括中位数，第 90,95 和第 99 百分位。&lt;/p&gt;
&lt;p&gt;这些百分比为我们提供了服务如何执行的全面指示。但是，这种方法存在一些值得研究的缺陷。在低活动期间，由于样本数量有限，这些百分位数可能会大幅偏离。这可能会误导您关于这些情况下的系统性能。我们来看看这种方法可能出现的其他问题：&lt;/p&gt;
&lt;p&gt;时间周期问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;百分位数是固定时间窗口上的聚合指标。&lt;/li&gt;
&lt;li&gt;集群健康无法重新汇总百分位数。&lt;/li&gt;
&lt;li&gt;百分位不能被平均（这是一个常见的错误）。&lt;/li&gt;
&lt;li&gt;这种方法存储的聚合是输出，而不是输入。&lt;/li&gt;
&lt;li&gt;用这种方法测量集群 SLI 是很困难的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;百分位数通常比平均数提供更深的洞察力，因为它们用多个数据点而不是一个数据点来表示数值范围。但是像平均值一样，百分位数是一个汇总指标。它们是针对固定数据集在固定时间窗口上计算的。如果我们计算一个集群成员的持续时间百分比，我们不能将其与另一个集群成员合并，以获得整个集群的聚合性能指标。&lt;/p&gt;
&lt;p&gt;普遍的误解是百分位可以被平均；除非产生它们的分布几乎相同的极少数情况除外。如果你只有百分位，而不是源数据，你不知道可能是这种情况。这是一个鸡生蛋还是蛋生鸡的问题。&lt;/p&gt;
&lt;p&gt;这也意味着，如果您仅针对单个集群成员衡量基于百分比的性能，则由于缺乏可合并性而无法为整个服务设置服务级别指示符。&lt;/p&gt;
&lt;p&gt;由于在固定的时间窗口内只有 4 个延迟数据点，因此我们设置有意义的 SLI（以及因此，有意义的 SLO）的能力在此处受到限制。因此，当您使用基于百分位的持续时间指标工作时，您必须问自己，您的 SLI 是否真的有很好的 SLI。通过使用数学推算来确定 SLI，我们可以做得更好，从而全面了解服务的性能和健康状况。&lt;/p&gt;
&lt;h1 id=&#34;直方图计量数据&#34;&gt;直方图计量数据&lt;/h1&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugb1z9j20go05uaah_hu_bfb7b3e98ebde93.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugb1z9j20go05uaah_hu_cbb37fb1c38da643.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugb1z9j20go05uaah_hu_a8d97e35504bed84.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugb1z9j20go05uaah_hu_bfb7b3e98ebde93.webp&#34;
               width=&#34;600&#34;
               height=&#34;210&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图是使用直方图以微秒为单位显示服务延迟数据的可视化表示。样本数量位于 Y 轴上，样本值（在本例中为微秒等待时间）位于 X 轴上。这是我们在 Circonus 开发的开源直方图。（请参阅 &lt;a href=&#34;https://github.com/circonus-labs/libcircllhist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C 语言&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/circonus-labs/circonusllhist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Golang 中&lt;/a&gt;的开源代码，或者&lt;a href=&#34;https://www.circonus.com/2018/05/effective-management-of-high-volume-numeric-data-with-histograms/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此处&lt;/a&gt;阅读有关直方图的更多信息）还有一些开源的直方图实现，如 &lt;a href=&#34;https://github.com/tdunning/t-digest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ted Dunning 的 t-消化直方图&lt;/a&gt;和 &lt;a href=&#34;http://hdrhistogram.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HDR 直方图&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Envoy 项目最近采用&lt;a href=&#34;https://github.com/circonus-labs/libcircllhist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;了&lt;/a&gt; Circonus 的对数线性直方图库的&lt;a href=&#34;https://github.com/circonus-labs/libcircllhist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; C 语言实现&lt;/a&gt;。这使得 envoy 数据可以作为分布来收集。他们在实现过程中发现了一个非常小的错误，Circonus 非常乐意修复。这就是开源的美妙之处，由于有更多的人可以查看代码，更多的人可以发现问题，并修复问题，随着时间的推移代码将会越来越好。&lt;/p&gt;
&lt;p&gt;直方图可合并。只要边界相同，任何两个或更多的直方图都可以合并。这意味着我们可以将此分布与其他分布结合起来。可合并度量对于监控和可观察性非常有用。这允许我们合并来自类似资源的输出，例如服务成员，并获得总体服务指标。&lt;/p&gt;
&lt;p&gt;如上图所示，此对数线性直方图中包含每个幂为 10 的 90 个间隔。您可以看到 10k 到 1M 之间分布的 90 个间隔。在每个 10 的幂下，间隔的大小增加 10 倍。这使得我们能够以高相对精度记录各种各样的值，而不需要提前知道数据分布。让我们看看当我们覆盖一些百分点时，这看起来像什么：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhj1ilj20go0583yl_hu_44f3a64926b9bca8.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhj1ilj20go0583yl_hu_230e68c0ffeaee02.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhj1ilj20go0583yl_hu_1cd6d2cd7d17249e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhj1ilj20go0583yl_hu_44f3a64926b9bca8.webp&#34;
               width=&#34;600&#34;
               height=&#34;188&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;现在您可以看到我们的平均水平，第 50 百分位（也称为中位数）和第 90 百分位。第 90 百分位是 90％ 样本低于该值的值。&lt;/p&gt;
&lt;p&gt;考虑我们之前的示例 SLI。通过以此格式显示延迟数据，我们可以通过将直方图合并为一个 5 分钟的数据视图，然后计算该分布的第 90 百分位数值，轻松计算服务的 SLI。如果它少于 1,000 毫秒，就达到了我们的目标。&lt;/p&gt;
&lt;p&gt;上面截图中的 RED 仪表盘持续时间图有四个百分点，第 50、90、95 和 99 百分位。我们也可以覆盖这些分布的百分位数。即使没有数据，我们也可以看到请求分布看起来很粗略的表示，但是这会做出很多假设。我们看看仅基于几个百分点的假设如何误导我们，这是其他模式的分布：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh00flj20go07wjs7_hu_c84a3bb2f572313e.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh00flj20go07wjs7_hu_d0cebb02bafd85ed.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh00flj20go07wjs7_hu_f8afd106f54b43d0.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuh00flj20go07wjs7_hu_c84a3bb2f572313e.webp&#34;
               width=&#34;600&#34;
               height=&#34;284&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;该直方图显示具有两种不同模式的分布。最左边的模式可能是由于缓存服务而产生的快速响应，以及来自磁盘的正确模式。仅仅使用四个百分点来衡量延迟就几乎不可能辨别出这样的分布。这给了我们一个百分点可以掩盖的复杂性的感觉。考虑具有两种以上模式的分布：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshn01jrnnj20go06hq48_hu_88d5495487023ac0.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshn01jrnnj20go06hq48_hu_e63868f10606c984.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshn01jrnnj20go06hq48_hu_ac95e51a712a4151.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshn01jrnnj20go06hq48_hu_88d5495487023ac0.webp&#34;
               width=&#34;600&#34;
               height=&#34;233&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;此分布至少有四种可见模式。如果我们对全分布进行数学运算，我们会在这里找到 20 多种模式。您需要记录几个百分位以接近上面的延迟分布？关于下面的分布会怎么样？&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuge1ksj20go07oabj_hu_3f2616275d1720a0.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuge1ksj20go07oabj_hu_35b2444f56aa4625.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuge1ksj20go07oabj_hu_ca3c05a411d20069.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuge1ksj20go07oabj_hu_3f2616275d1720a0.webp&#34;
               width=&#34;600&#34;
               height=&#34;276&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;由许多服务组成的复杂系统将生成无法用百分位准确表示的延迟分布。您必须记录整个延迟分布才能充分表示它。这是将数据的完整分布存储在直方图中并根据需要计算百分位数的优选原因之一，而不是仅存储几个百分点。&lt;/p&gt;
&lt;p&gt;这种直方图可视化显示了固定时间窗口上的分布。我们可以存储多个分布，以了解它随时间变化的情况，如下所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugi6lsj20go05rq5j_hu_5248290dd095888a.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugi6lsj20go05rq5j_hu_b9a3d05f4d3ad316.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugi6lsj20go05rq5j_hu_ff9058d8d5cdeb66.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugi6lsj20go05rq5j_hu_5248290dd095888a.webp&#34;
               width=&#34;600&#34;
               height=&#34;207&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这是一个 heapmap，它代表一组随时间变化的直方图。想象一下，这个热图中的每一列都有一个从上面看的单独的条形图，颜色用于指示每个间隔的高度。这是来自 10 个负载均衡器集群的响应延迟的 grafana 可视化。这使我们能够深入了解整个集群的系统行为，一周之内就有超过 100 万个数据样本。这里的中位数大约在 500 微秒左右，以红色带表示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmui01hbj20go06t0vy_hu_ca99a408699bc7ce.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmui01hbj20go06t0vy_hu_e9e50c1c1456c98e.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmui01hbj20go06t0vy_hu_a30259f92760e0cc.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmui01hbj20go06t0vy_hu_ca99a408699bc7ce.webp&#34;
               width=&#34;600&#34;
               height=&#34;245&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以上是另一种类型的热图。此处，饱和度用于指示每个间隔的“高度”（颜色越深的色块更“饱和”）。此外，这次我们在 heatmap 上覆盖了一段时间内的百分比计算。百分位数是健壮的性的度量标准，非常有用。我们可以在这里看到，随着延迟分布向上移动，90％ 以上的百分位数是怎样增加的。&lt;/p&gt;
&lt;p&gt;让我们来看看这些基于分布的持续时间图，看看我们是否可以生成比 Istio 仪表板样本更多的信息：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugsu6uj20go09k42b_hu_47ec66fc275c4269.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugsu6uj20go09k42b_hu_e4c34d45a97172a7.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugsu6uj20go09k42b_hu_1210ed407ecf3ef2.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugsu6uj20go09k42b_hu_47ec66fc275c4269.webp&#34;
               width=&#34;600&#34;
               height=&#34;344&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面的屏幕截图是修改后的 RED 仪表板，显示基于分布的延迟数据。在左下角，我们显示了一个固定时间窗口上的延迟直方图。在它的右边，我们使用热图将分布分解成更小的时间窗口。利用 RED 仪表板的布局，我们可以通过几个小组信息全面了解我们的服务是如何运作的。这个特定的仪表板是使用 Grafana 实现的，使用 IRONdb 时间序列数据库服务，该数据库本地存储延迟时间数据作为对数线性直方图。&lt;/p&gt;
&lt;p&gt;我们可以进一步扩展这个 RED 仪表板，并将 SLI 覆盖到图表上：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugl9wyj20go07p41y_hu_35d2a618439aca94.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugl9wyj20go07p41y_hu_99256a28b5cd3bf0.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugl9wyj20go07p41y_hu_6bcaf8587ba34699.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugl9wyj20go07p41y_hu_35d2a618439aca94.webp&#34;
               width=&#34;600&#34;
               height=&#34;277&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于速率面板，我们的 SLI 可能会保持每秒最低水平的请求。对于速率面板，我们的 SLI 可能会保持每秒一定数量的错误。正如我们之前研究过持续时间 SLI，我们可能希望整个服务的第 99 个百分点由多个窗格组成，以在固定窗口内保持一定的延迟。使用存储为直方图的 Istio 遥测技术可以让我们设置这些有意义的服务范围的 SLI。现在我们还有很多工作要做，而且我们可以更好地审问我们的数据（见下文）。&lt;/p&gt;
&lt;h1 id=&#34;提出正确的问题&#34;&gt;提出正确的问题&lt;/h1&gt;
&lt;p&gt;所以现在我们已经把这些部分放在一起，并看到了如何使用 Istio 从我们的服务中获取有意义的数据，让我们看看我们可以回答哪些问题。&lt;/p&gt;
&lt;p&gt;我们都喜欢解决技术问题，但不是每个人都有同样的重点。业务人员想回答关于业务的问题。您需要能够回答以业务为中心的问题。让我们来看看我们已经组装的工具集，并将这些功能与业务提出 SRE 的几个问题对齐：&lt;/p&gt;
&lt;p&gt;示例问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在大促销推广后，有多少用户在周二的速度变慢时恼怒？&lt;/li&gt;
&lt;li&gt;我们是否在结帐服务中超额配置或者配置不足？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;考虑第一个例子。每个人都经历了一次巨大的速度下降。比方说，市场推广做得很大，流量增加了，运行速度降低了，用户抱怨网站速度缓慢。我们如何量化每个人的速度有多慢？有多少用户生气了？比方说，市场营销部门想知道这一点，以便他们可以向受影响的用户发送 10％ 折扣的电子邮件，同时也希望避免同样问题的再次发生。让我们制作一个 SLI，并假设用户注意到速度放缓并且在请求花费超过 500 毫秒时生气。我们如何计算有多少用户对这个 500 毫秒的 SLI 感到愤怒？&lt;/p&gt;
&lt;p&gt;首先，我们需要将请求延迟记录为分发。然后我们可以将它们绘制成热图。我们可以使用分布数据来计算超过 500ms SLI 的请求的百分比，方法是使用逆百分比。我们将这个答案乘以该时间窗口中的请求总数，并随时间积分。然后我们可以绘制覆盖在热图上的结果：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugwviwj20go06jdhf_hu_f8c679ab241d31e6.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugwviwj20go06jdhf_hu_269689a532d4f065.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugwviwj20go06jdhf_hu_4d09a8657728aa37.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmugwviwj20go06jdhf_hu_f8c679ab241d31e6.webp&#34;
               width=&#34;600&#34;
               height=&#34;235&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在此屏幕截图中，我们已经圈出了发生速度降低的热图的一部分。增加的延迟分布是相当缓慢的指示。图中的线表示受到一段时间影响的请求总数。&lt;/p&gt;
&lt;p&gt;在这个例子中，我们设法错过了 400 万个请求的 SLI。哎呦。不明显的是右边的两个额外减速，因为它们幅度较小。每个这些花费我们额外 200 万 SLI 违规。哎哟。&lt;/p&gt;
&lt;p&gt;我们可以对这些类型进行数学分析，因为我们将数据存储为分布，而不是像百分位数之类的聚合。&lt;/p&gt;
&lt;p&gt;我们来考虑另一个常见问题。我的服务是否置备或配置过度？&lt;/p&gt;
&lt;p&gt;答案通常“视情况而定”。根据一天中的时间和一周的日子，负载会有所不同，除了因特殊事件而变化之外。那是在我们甚至考虑系统在负载下的行为之前。让我们把一些数学工作，并使用延迟带来可视化我们的系统如何执行：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhvtnnj20go08p0uv_hu_4c4568967f167436.webp 400w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhvtnnj20go08p0uv_hu_5fd44b44e1dc250e.webp 760w,
               /blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhvtnnj20go08p0uv_hu_5cd666dc420cfcf.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/comprehensive-container-based-service-monitoring-with-kubernetes-and-istio/61411417ly1fshmuhvtnnj20go08p0uv_hu_4c4568967f167436.webp&#34;
               width=&#34;600&#34;
               height=&#34;313&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面的可视化显示延迟分布随着时间的推移被延迟带分解。这里的频段显示 25ms 到 100ms，100-250ms，250-1000 和 1000ms 以下的请求数。快速的请求分组以绿色显示，请求速度的请求变慢以红色显示。&lt;/p&gt;
&lt;p&gt;这种可视化告诉我们什么？它表明，对我们的服务的请求非常迅速地开始，然后几分钟后快速请求的百分比就会下降，大约 10 分钟后请求的缓慢百分比就会增加。这种模式重复了两次流量会话。那告诉我们关于配置的是什么？它表明，最初服务过度供应，但随后在 10-20 分钟的过程中供应不足。听起来像是做自动缩放的好机会。&lt;/p&gt;
&lt;p&gt;我们也可以将这种类型的可视化添加到我们的 RED 仪表板。这种类型的数据对业务利益相关者来说非常好，而且它不需要大量的技术知识积累就可以用来了解对业务的影响。&lt;/p&gt;
&lt;h1 id=&#34;结论&#34;&gt;结论&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;我们应该监控服务而不是容器&lt;/strong&gt;。服务是长期存在的实体，而容器不是。您的用户不关心您的容器如何执行，他们关心的是服务运行的怎么样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们应该记录分布而不是聚合&lt;/strong&gt;。我们应该从这些分布来产生聚合。聚集是非常有价值的信息来源。但它们无法合并，因此它们不适合进行统计分析。&lt;/p&gt;
&lt;p&gt;Istio 免费提供了很多东西。您不必使用编写代码来实现。您无需从头开始构建高质量的应用程序框架。&lt;/p&gt;
&lt;p&gt;通过数学提出并回答有关您的服务的问题，这对业务很重要。这就是全部，对吧？当我们可以通过回答对业务有价值的问题来使系统可靠时，我们就能实现组织的目标。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Istio 控制 Serverless 架构 Fn Project 中的函数间流量路由</title>
      <link>https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/</link>
      <pubDate>Wed, 04 Jul 2018 17:44:01 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://hackernoon.com/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd56607913b8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在本文中，我将解释如何在 &lt;a href=&#34;https://fnproject.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fn 函数&lt;/a&gt;之间使用 &lt;a href=&#34;http://istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 服务网格实现基于版本的流量路由。&lt;/p&gt;
&lt;p&gt;我将首先解释 &lt;a href=&#34;http://istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 路由的基础知识以及将 Fn 部署和运行在 Kubernetes 上的方式。最后，我将解释我是如何利用 Istio 服务网格及其路由规则在两个不同的 Fn 函数之间路由流量的。&lt;/p&gt;
&lt;p&gt;请注意，接下来的解释非常基本和简单——我的目的不是解释 Istio 或 Fn 的深入细节，而是解释得足够清楚，让您可以了解如何使自己的路由工作。&lt;/p&gt;
&lt;h3 id=&#34;istio-路由入门&#34;&gt;Istio 路由入门&lt;/h3&gt;
&lt;p&gt;让我花了一点时间来解释 &lt;a href=&#34;http://istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 路由如何工作。Istio 使用 sidecar 容器（ &lt;code&gt;istio-proxy&lt;/code&gt; ）注入到您部署的应用中。注入的代理会劫持所有进出该 pod 的网络流量。部署中所有这些代理的集合与 Istio 系统的其他部分进行通信，以确定如何以及在何处&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/request-routing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由流量&lt;/a&gt;（以及其他一些很酷的事情，如&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/mirroring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流量镜像&lt;/a&gt;、&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/fault-injection/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;故障注入&lt;/a&gt;和&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/circuit-breaking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;断路由&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;为了解释这是如何工作的，我们将开始运行一个 Kubernetes 服务（&lt;code&gt;myapp&lt;/code&gt;）和两个特定版本的应用程序部署（&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyerrbpzj20sa09c74h_hu_5a24f1bfa57f5635.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyerrbpzj20sa09c74h_hu_c22fa8d9c107094.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyerrbpzj20sa09c74h_hu_264bcf818b7d0ccc.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyerrbpzj20sa09c74h_hu_5a24f1bfa57f5635.webp&#34;
               width=&#34;760&#34;
               height=&#34;251&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在上图中，我们有 &lt;code&gt;myapp&lt;/code&gt; 一个选择器设置为 Kubernetes 的服务 &lt;code&gt;app=myapp&lt;/code&gt; ，这意味着它将查找具有 &lt;code&gt;app=myapp&lt;/code&gt; 标签集的所有 Pod，并将流量发送给它们。基本上，如果您执行此操作，&lt;code&gt;curl myapp-service&lt;/code&gt; 您将从运行 v1 版本应用程序的 pod 或运行 v2 版本的 pod 获得响应。&lt;/p&gt;
&lt;p&gt;我们还有两个 Kubernetes 部署，这些部署&lt;code&gt;myapp&lt;/code&gt;运行了 v1 和 v2 代码。除 &lt;code&gt;app=myapp&lt;/code&gt; 标签外，每个 pod 还将&lt;code&gt;version&lt;/code&gt;标签设置为 &lt;code&gt;v1&lt;/code&gt;或 &lt;code&gt;v2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;上图中的所有内容都是可以从 Kubernetes 中开箱即用的。&lt;/p&gt;
&lt;p&gt;进入 Istio 环节。为了能够做到更智能化和基于权重的路由，我们需要安装 &lt;a href=&#34;http://istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;，然后将代理注入到我们的每个&lt;a href=&#34;http://istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器中&lt;/a&gt;，如下面的另一个图片所示。下图中的每个 pod 都有一个带有 Istio 代理的容器（用蓝色图标表示）和运行应用的容器。在上图中，我们只有一个容器在每个 pod 中运行——应用程序容器。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyg6hkmsj20sa09cglu_hu_959511a05052ab55.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyg6hkmsj20sa09cglu_hu_fffea6f33810d0a4.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyg6hkmsj20sa09cglu_hu_edd7421d2fe2340.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyg6hkmsj20sa09cglu_hu_959511a05052ab55.webp&#34;
               width=&#34;760&#34;
               height=&#34;251&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，Istio 比图中显示的要多得多。我没有展示在 Kubernetes 集群上部署的其他 Istio Pod 和服务——注入的 Istio 代理与这些 Pod 和服务进行通信，以便知道如何正确路由流量。有关 Istio 不同部分的深入解释，请参阅&lt;a href=&#34;https://istio.io/docs/concepts/traffic-management/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;的文档。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;如果我们现在可以调整&lt;code&gt;myapp&lt;/code&gt;服务，那么我们仍然会得到与第一个图中的设置完全相同的结果：来自&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt; pod 的随机响应。唯一的区别在于网络流量从服务流向 Pod 的方式。在第二种情况下，对服务的任何调用都在 Istio 代理中结束，然后代理根据定义的路由规则决定将流量路由到哪里。&lt;/p&gt;
&lt;p&gt;就像 Kubernetes 一样，Istio 路由规则也是使用 YAML 定义的，它们看起来像这样：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyh7i2qnj20o60hcta2_hu_f6481c04cd1859fe.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyh7i2qnj20o60hcta2_hu_3dbb9972332061de.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyh7i2qnj20o60hcta2_hu_f6e279efd0ff2f3c.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyh7i2qnj20o60hcta2_hu_f6481c04cd1859fe.webp&#34;
               width=&#34;760&#34;
               height=&#34;545&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上述路由规则接收请求&lt;code&gt;myapp-service&lt;/code&gt;并将其重新路由到标记为 Pod 的请求&lt;code&gt;version=v1&lt;/code&gt; 。这就是具有上述路由规则的图表的样子：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyhoj9ngj20sa0gkaai_hu_595dbaca4404ee39.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyhoj9ngj20sa0gkaai_hu_a151fc23869944ef.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyhoj9ngj20sa0gkaai_hu_73e1bab8d2951a9d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyhoj9ngj20sa0gkaai_hu_595dbaca4404ee39.webp&#34;
               width=&#34;760&#34;
               height=&#34;445&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;底部的 Istio 大图标代表 Istio 部署/服务，其中包括正在读取的路由规则。这些规则然后用于重新配置在每个 pod 内运行的 Istio 代理 sidecar。&lt;/p&gt;
&lt;p&gt;有了这个规则，如果我们 curl 服务，我们只能从标有标签为 &lt;code&gt;version=v1&lt;/code&gt;（图中的蓝色连接器描述）的 pod 获取响应。&lt;/p&gt;
&lt;p&gt;现在我们已经了解了路由如何工作，我们可以研究 &lt;a href=&#34;http://fnproject.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fn&lt;/a&gt; ，部署它并查看它是如何工作的，以及我们是否可以使用 Istio 以某种方式设置路由。&lt;/p&gt;
&lt;h3 id=&#34;在-kubernetes-上的-fn-函数&#34;&gt;在 Kubernetes 上的 Fn 函数&lt;/h3&gt;
&lt;p&gt;我们将从 Kubernetes 上的一些 &lt;a href=&#34;http://fnproject.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fn&lt;/a&gt; 片段的基本图表开始。您可以使用 &lt;a href=&#34;http://github.com/fnproject/fn-helm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm chart&lt;/a&gt; 将 Fn 部署在您的 Kubernetes 集群之上。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyhzsbtfj20ca09jq33_hu_3ceab0ce1e5bd29a.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyhzsbtfj20ca09jq33_hu_8173c1687828c634.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyhzsbtfj20ca09jq33_hu_fca3ce131e00cb3d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyhzsbtfj20ca09jq33_hu_3ceab0ce1e5bd29a.webp&#34;
               width=&#34;442&#34;
               height=&#34;343&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图表顶部的 Fn API 服务是 Fn 的入口点，它用于管理您的 Function（创建，部署，运行等）——这是&lt;code&gt;FN_API_URL&lt;/code&gt;在 Fn 项目中引用的 URL。&lt;/p&gt;
&lt;p&gt;该服务反过来将调用路由到 Fn 负载均衡器（即标记为  &lt;code&gt;role=fn-lb&lt;/code&gt; 的任何 Pod）。然后，负载均衡器会发挥神奇的作用，并将调用路由到&lt;code&gt;fn-service&lt;/code&gt; pod 的实例。这作为 Kubernetes DaemonSet 的一部分部署，并且通常每个 Kubernetes 节点都有一个该 pod 的实例。&lt;/p&gt;
&lt;p&gt;有了这些简单的基础知识，让我们创建并部署一些 Function，并考虑如何进行流量路由。&lt;/p&gt;
&lt;h3 id=&#34;创建和部署函数&#34;&gt;创建和部署函数&lt;/h3&gt;
&lt;p&gt;如果您想遵循下面的教程，请确保已将 &lt;a href=&#34;https://hackernoon.com/part-ii-fn-load-balancer-585babd90456&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fn 部署到您的 Kubernetes 群集&lt;/a&gt;（我正在使用 Docker for Mac）并安装 &lt;a href=&#34;https://github.com/fnproject/cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fn CLI&lt;/a&gt; 并运行以下命令来创建应用程序和一些功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建app文件夹&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir hello-app &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; hello-app
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name: hello-app&amp;#34;&lt;/span&gt; &amp;gt; app.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create a V1 function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fn init --name v1 --runtime go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create a V2 function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir v2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; v2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fn init --name v2 --runtime go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用上述命令，您已创建应用程序的根目录，名为&lt;code&gt;hello-app&lt;/code&gt;。在这个目录中，我们创建了两个目录，每个目录下都有一个 Function：&lt;strong&gt;v1&lt;/strong&gt;和一个**v2。**Boilerplate Go Function 使用&lt;code&gt;fn init&lt;/code&gt; 指定使用 Go 作为运行时。这是目录的结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── app.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── Gopkg.toml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── func.go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── func.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── test.json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── v2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── Gopkg.toml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── func.go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── func.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── test.json
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;打开这&lt;code&gt;func.go&lt;/code&gt;两个目录并更新返回的消息以包含版本号——我们这样做的原因是可以快速区分哪个 Function 被调用。以下是 v1 的&lt;code&gt;func.go&lt;/code&gt;的样子（&lt;code&gt;Hello V1&lt;/code&gt;）：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyii51b6j215u0fedhe_hu_1f254c59167fd7b4.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyii51b6j215u0fedhe_hu_1e6fe65a7a3eeb3.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyii51b6j215u0fedhe_hu_35992e194fbef2ed.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyii51b6j215u0fedhe_hu_1f254c59167fd7b4.webp&#34;
               width=&#34;760&#34;
               height=&#34;280&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;更改完成后就可以将这些功能部署到在 Kubernetes 上运行的 Fn 服务。为此，您必须将&lt;code&gt;FN_REGISTRY&lt;/code&gt;环境变量设置为指向您的 Docker 镜像仓库的用户名。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为我们在 Kubernetes 集群上运行 Fn，所以我们不能使用本地构建的映像 - 它们需要推送到 Kubernetes 集群可以访问的 Docker 镜像仓库。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;现在我们可以使用 &lt;a href=&#34;https://github.com/fnproject/cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fn CLI&lt;/a&gt; 来部署这些函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;FN_API_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://localhost:80 fn deploy --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;上面的命令假设 Fn API 服务暴露在 localhost:80 上（默认情况下，如果您在 Docker for Mac 中使用 Kubernetes 支持）。如果使用不同的集群，则可以将 FN_API_URL 替换为 fn-api 服务的外部 IP 地址。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在 Docker 构建和推送完成之后，我们的函数就被部署到 Fn 服务中了，我们可以尝试调用它们。&lt;/p&gt;
&lt;p&gt;部署到 Fn 服务的任何函数都有一个唯一的 URL，其中包含应用程序名称和路由名称。通过我们的应用程序名称和路由，我们可以访问已部署的函数 &lt;code&gt;http://$(FN_API_URL)/r/hello-app/v1&lt;/code&gt; 。所以，如果我们想调用&lt;code&gt;v1&lt;/code&gt;路由，我们可以这样做：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl http://localhost/r/hello-app/v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;:&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello V1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，调用&lt;code&gt;v2&lt;/code&gt;路由将返回 Hello V2 消息。&lt;/p&gt;
&lt;h4 id=&#34;但函数在哪里运行&#34;&gt;但函数在哪里运行？&lt;/h4&gt;
&lt;p&gt;如果您在调用函数时查看正在创建/删除的 pod，您会注意到没有真正改变——即没有 pod 创建或删除。原因是 Fn 不会像 Kubernetes pod 一样创建函数，因为这太慢了。相反，所有 Fn 函数的部署和调用都发生在 fn-service pod 中。然后，Fn 负载均衡器负责部署和路由到这些 pod，以最优化的方式部署/执行函数。&lt;/p&gt;
&lt;p&gt;因此，我们没有函数的 Kubernetes pod/service，但 Istio 要求我们拥有可以路由到的服务和 pod。在这种情况下，我们如何使用 Istio 呢？&lt;/p&gt;
&lt;h3 id=&#34;思考&#34;&gt;思考&lt;/h3&gt;
&lt;p&gt;让我将函数从图片中解放出来，并思考为了能让 Istio 路由工作我们需要做什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes 服务—— hello 应用程序的入口点&lt;/li&gt;
&lt;li&gt;针对 hello-app v1 的 Kubernetes deployment&lt;/li&gt;
&lt;li&gt;针对 hello-app v2 的 Kubernetes deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正如 Istio 路由入门一节开头部分所解释的，我们还必须在两个 deployment 中添加一个代表版本和 &lt;code&gt;app=hello-app&lt;/code&gt; 的标签。服务上的选择器会选择 &lt;code&gt;app=hello-app&lt;/code&gt; 的标签——特定于版本的标签将由 Istio 路由规则添加。&lt;/p&gt;
&lt;p&gt;为此，每个特定于版本的部署都需要最终以正确的路由（例如&lt;code&gt;/r/hello-app/v1&lt;/code&gt;）调用 Fn 负载均衡器。由于一切都在 Kubernetes 中运行，我们知道 Fn 负载均衡器服务的名称，所以我们可以做到这一点。&lt;/p&gt;
&lt;p&gt;因此，我们需要一个位于部署中的容器，它在调用时将呼叫转发到特定路径上的 Fn 负载均衡器。&lt;/p&gt;
&lt;p&gt;这是图中表示的上述想法：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyiscib2j20ce0jogm3_hu_715370442b23f76.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyiscib2j20ce0jogm3_hu_9241f09cccda4887.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyiscib2j20ce0jogm3_hu_2da36545470bd3b6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyiscib2j20ce0jogm3_hu_715370442b23f76.webp&#34;
               width=&#34;446&#34;
               height=&#34;708&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们有一个服务代表我们的应用程序和两个特定于版本的部署，并直接路由到 Fn 服务中运行的 Function。&lt;/p&gt;
&lt;h4 id=&#34;简单的代理&#34;&gt;简单的代理&lt;/h4&gt;
&lt;p&gt;为了实现这一点，我们需要某种代理服务器来接收所有调用并将它们转发给 Fn 服务。下面是一个简单的 Nginx 配置，它完全符合我们的要求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;events&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;worker_connections&lt;/span&gt;  &lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;upstream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;api.default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;proxy_pass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Real&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IP&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remote_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Forwarded&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;For&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remote_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Host&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配置解释：调用 &lt;code&gt;/&lt;/code&gt;，就将其转发到 &lt;code&gt;http://fn-server/r/hello-app/v1&lt;/code&gt;（&lt;code&gt;fn-server&lt;/code&gt;定义为上游），解析到&lt;code&gt;my-fn-api.default&lt;/code&gt;（这是 fn-api 在 Kubernetes 的 &lt;code&gt;default&lt;/code&gt; namespace 中的服务名称）。&lt;/p&gt;
&lt;p&gt;我用一个脚本创建了一个 Docker 镜像，该脚本基于您传入的上游和路由值生成 Nginx 配置。该镜像在 &lt;a href=&#34;https://hub.docker.com/r/pj3677/simple-proxy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker hub 上提供&lt;/a&gt;，您可以在&lt;a href=&#34;https://github.com/peterj/fn-simple-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;查看源代码。&lt;/p&gt;
&lt;h4 id=&#34;部署到-kubernetes&#34;&gt;部署到 Kubernetes&lt;/h4&gt;
&lt;p&gt;现在，我们可以创建 Kubernetes YAML 文件，包括 service、deployment 以及我们将用于访问函数的 ingress。&lt;/p&gt;
&lt;p&gt;以下是 deployment 文件的摘录，以显示我们如何设置&lt;code&gt;UPSTREAM&lt;/code&gt;、 &lt;code&gt;ROUTE&lt;/code&gt;  环境变量和设置标签。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyjnxkj2j20si0m60uq_hu_466423c7e9dc5249.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyjnxkj2j20si0m60uq_hu_330b8ffd9da7cd59.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyjnxkj2j20si0m60uq_hu_72e5d15279533fc6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyjnxkj2j20si0m60uq_hu_466423c7e9dc5249.webp&#34;
               width=&#34;760&#34;
               height=&#34;591&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UPSTREAM&lt;/code&gt;和&lt;code&gt;ROUTE&lt;/code&gt;环境变量由 simple-proxy 容器读取，Nginx 的配置文件会根据这些值生成。&lt;/p&gt;
&lt;p&gt;服务的 YAML 文件也没什么特别，我们只是将选择器设置为&lt;code&gt;app: hello-app&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyk1a1pmj20si0jata9_hu_235818aa53aeb440.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyk1a1pmj20si0jata9_hu_4e8a0cd22945b25a.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyk1a1pmj20si0jata9_hu_5dfa289ddf6834fd.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyk1a1pmj20si0jata9_hu_235818aa53aeb440.webp&#34;
               width=&#34;760&#34;
               height=&#34;514&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最后一部分是 Istio ingress，我们设置了将所有传入流量路由到后端服务的规则：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyki4sz2j20si0jagnc_hu_166b0b7858fb6667.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyki4sz2j20si0jagnc_hu_ae752d868a8e99cb.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyki4sz2j20si0jagnc_hu_9c050217eaa93827.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoyki4sz2j20si0jagnc_hu_166b0b7858fb6667.webp&#34;
               width=&#34;760&#34;
               height=&#34;514&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;要部署这些，您可以使用&lt;code&gt;kubectl&lt;/code&gt;来部署 ingress 和服务，使用&lt;code&gt;istioctl kube-inject&lt;/code&gt;来注入 Istio 代理。&lt;/p&gt;
&lt;p&gt;随着一切部署完毕，你应该会得到以下 Kubernetes 资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hello-app-deployment-v1（使用指向 v1 路由的 simple-proxy 镜像部署）&lt;/li&gt;
&lt;li&gt;hello-app-deployment-v2（使用指向 v2 路由的 simple-proxy 镜像部署）&lt;/li&gt;
&lt;li&gt;hello-app-service（在 hello-app 部署中针对 v1 和 v2 pod 的服务）&lt;/li&gt;
&lt;li&gt;指向 hello-app-service 的 ingress，并给增加注解，将 ingress.class 赋值为“istio”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，如果我们调用 hello-app-service 或调用 ingress，我们应该从 v1 和 v2  函数中获得随机响应。以下是对 ingress 进行调用的示例输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; sleep 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; curl http://localhost:8082&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;“message”:”Hello V1&lt;span class=&#34;s2&#34;&gt;&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;{“message”:”Hello V1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;“message”:”Hello V1&lt;span class=&#34;s2&#34;&gt;&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;{“message”:”Hello V1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;“message”:”Hello V2&lt;span class=&#34;s2&#34;&gt;&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;{“message”:”Hello V1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;“message”:”Hello V2&lt;span class=&#34;s2&#34;&gt;&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;{“message”:”Hello V1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;“message”:”Hello V2&lt;span class=&#34;s2&#34;&gt;&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;{“message”:”Hello V1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;“message”:”Hello V1&lt;span class=&#34;s2&#34;&gt;&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;{“message”:”Hello V1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;“message”:”Hello V2&lt;span class=&#34;s2&#34;&gt;&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会注意到我们随机获得了 V1 和 V2 的响应 - 这正是我们现在想要的！&lt;/p&gt;
&lt;h3 id=&#34;istio-规则&#34;&gt;Istio 规则&lt;/h3&gt;
&lt;p&gt;在我们的服务和部署已启动并运行（和正在运行）的情况下，我们可以为 Fn 函数创建 Istio 路由规则。让我们以一个简单的 v1 规则开始，该规则将所有对 &lt;code&gt;hello-app-service&lt;/code&gt; 的调用（&lt;code&gt;weight: 100&lt;/code&gt;）路由到标记为的 &lt;code&gt;v1&lt;/code&gt;的 pod 上：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoykynfcsj20si0hcwfx_hu_2ea180c1ae4d0a43.webp 400w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoykynfcsj20si0hcwfx_hu_7530cbdcbfe15238.webp 760w,
               /blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoykynfcsj20si0hcwfx_hu_7c4dffe5b1b684de.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoykynfcsj20si0hcwfx_hu_2ea180c1ae4d0a43.webp&#34;
               width=&#34;760&#34;
               height=&#34;462&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;您可以通过运行应用此规则&lt;code&gt;kubectl apply -f v1-rule.yaml&lt;/code&gt;。查看运行中的路由的最佳方法是运行一个连续调用端点的循环——这样您就可以看到混合（v1/v2）和全部 v1 的响应。&lt;/p&gt;
&lt;p&gt;就像我们将 &lt;code&gt;v1&lt;/code&gt; 的路由规则定义为 100% 的权重那样，我们可以类似地定义一条规则将所有内容路由到&lt;code&gt;v2&lt;/code&gt;，或者将规则路由 50％ 的流量 &lt;code&gt;v1&lt;/code&gt; 和 50％ 的流量&lt;code&gt;v2&lt;/code&gt;，如下面的演示所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsoysfirnig20f80a0dli.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一旦我证明了这一点，简单的 curl 命令，好了，我停下来：）&lt;/p&gt;
&lt;p&gt;幸运的是，&lt;a href=&#34;https://medium.com/@carimura/the-importance-of-devops-to-serverless-f671070efb9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chad Arimura&lt;/a&gt; 在他关于 DevOps 对无服务器的重要性的文章中进一步说明了这一点（警报：DevOps 不会消失）。他使用 Spinnaker 对在实际 Kubernetes 集群上运行的 Fn 函数进行加权蓝绿部署。看看他的演示视频：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://cloudnativecn.com/blog/traffic-routing-between-fn-functions-using-fn-project-and-istio-fd/61411417ly1fsozs9eudag20w00k0kk0.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;
&lt;p&gt;每个人可能都会认同服务网格在无服务函数领域的重要性。如果使用服务网格（如路由、流量镜像、故障注入和其他一些东西），可以获得许多好处。&lt;/p&gt;
&lt;p&gt;我看到的最大挑战是缺乏以开发人员为中心的工具，让开发人员能够利用所有这些漂亮和酷炫的功能。设置这个项目和演示来运行几次并不太复杂。&lt;/p&gt;
&lt;p&gt;但是，这是两个函数，它们就返回一个字符串，并没有别的。这是一个简单的演示。考虑运行数百或数千个函数并在它们之间建立不同的路由规则。然后管理所有这些函数。或者推出新版本并监控故障。&lt;/p&gt;
&lt;p&gt;我认为在进行函数管理、服务网格管理、路由、其他酷炫的功能方面有很多的机会（和挑战），因此对于每个参与者都很直观。&lt;/p&gt;
&lt;h3 id=&#34;谢谢阅读&#34;&gt;谢谢阅读&lt;/h3&gt;
&lt;p&gt;对这篇文章的任何反馈我都非常欢迎！你也可以在 &lt;a href=&#34;http://twitter.com/pjausovec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; 和 &lt;a href=&#34;http://github.com/peterj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; 上关注我。如果你喜欢这一点，并希望在我写更多东西时得到通知，你应该订阅&lt;a href=&#34;https://tinyletter.com/pjausovec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我的通讯&lt;/a&gt;！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>利用 Let&#39;s Encrypt 为 Istio（Envoy）添加 TLS 支持</title>
      <link>https://cloudnativecn.com/blog/istio-envoy-cert-manager-lets-encrypt-for-tls/</link>
      <pubDate>Mon, 25 Jun 2018 20:30:52 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/istio-envoy-cert-manager-lets-encrypt-for-tls/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://medium.com/@prune998/istio-envoy-cert-manager-lets-encrypt-for-tls-14b6a098f289&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;感谢 Laurent Demailly 的评论，这里有一些更新。这篇文章已经得到了更新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在有一个 &lt;a href=&#34;https://github.com/kubernetes/charts/tree/master/stable/cert-manager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cert-Manager 官方 Helm chart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Istio Ingress 也支持基于 HTTP/2 的 GRPC&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;istio&#34;&gt;Istio&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 是管理微服务世界中数据流的一种新方式。事实上，这对我来说更是如此。人们不停的谈论微服务与单体应用，说微服务更好开发，易于维护，部署更快。。。呃，他们是对的，但微服务不应该仅仅是小应用程序之间互相通信。微服务应该考虑沉淀为你的基础设施的这种方式。考虑如何决定您的“简单”应用程序公开指标和日志的方式，考虑您如何跟踪状态，考虑如何控制服务之间的流程以及如何管理错误，这些问题应该是做微服务应该考虑的。&lt;/p&gt;
&lt;p&gt;那么 Istio 能够在这个微服务世界中增加什么？&lt;/p&gt;
&lt;p&gt;Istio 是一个服务网格的实现！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么？服务网格？我们已经有了 Kubernetes API，我们需要“网格”吗？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;那么，是的，你需要服务网格。我不会解释使用它的所有好处，你会在网上找到足够的文档。但是用一句话来说，服务网格就是将您所有的服务提供给其他服务的技术。事实上，它还强制执行所有“微服务”最佳实践，例如添加流量和错误指标，添加对 OpenTracing（Zipkin 和 Jaegger）的支持，允许控制重试，金丝雀部署。。。阅读 &lt;a href=&#34;https://istio.io/docs/concepts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio doc&lt;/a&gt; ！&lt;/p&gt;
&lt;p&gt;所以，回到本话题&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;必要条件&#34;&gt;必要条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;建议运行在 Kubernetes1.7 及以上的集群版本&lt;/li&gt;
&lt;li&gt;一个或多个 DNS 域名&lt;/li&gt;
&lt;li&gt;让 Istio 利用 Ingress Controller 在你的集群中工作&lt;/li&gt;
&lt;li&gt;将上面的 DNS 域名配置为指向 Istio Ingress IP&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ssl&#34;&gt;SSL&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SSL&lt;/strong&gt; 是安全的（很好），但它通常是软件中实现的最后一件事。为什么？之前它实现起来是“很困难的”，但我现在看不出任何理由。&lt;a href=&#34;https://letsencrypt.org/how-it-works/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 创建一个新的范例，它的 DAMN 很容易使用 API 调用创建 Valide SSL 证书（协议被称为 ACME &amp;hellip;）。它为您提供 3 种验证您是域名所有者的方法。使用 DNS，使用 HTTP 或第三种解决方案的“秘密令牌”不再可用，因为它证明是不安全的。因此，您可以使用 Let&amp;rsquo;s Encrypt 提供给您的特殊 TXT 记录设置您的 DNS，或者将其放入 Web 根路径（如 &lt;code&gt;/.well-known/acme-challenge/xxx&lt;/code&gt;）中，然后让我们的加密验证它。这真的很简单，但差不多只能这样。&lt;/p&gt;
&lt;p&gt;一些开发者决定直接在应用程序内部实现 ACME 协议。这是来自 &lt;a href=&#34;https://traefik.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Traefik&lt;/a&gt; 的人的决定。&lt;a href=&#34;https://caddyserver.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Caddy&lt;/a&gt; 也做了一些类似的“插件”。这很酷，因为您只需定义虚拟主机，应用程序负责收集和更新证书。&lt;/p&gt;
&lt;p&gt;可悲的是，Istio（和底层的 Envoy 代理）没有。这就是这篇博文的要点！&lt;/p&gt;
&lt;h3 id=&#34;cert-manager&#34;&gt;CERT-Manager&lt;/h3&gt;
&lt;p&gt;许多人认识到，如果不是所有软件都可以实现 ACME 协议，我们仍然需要一个工具来管理（如请求，更新，废弃）SSL 证书。这就是为什么 LEGO 成立的原因。然后 Kubernetes 的 Kube-LEGO，然后&amp;hellip;&amp;hellip;并且最终，他们几乎都同意将所有内容放入 &lt;a href=&#34;https://github.com/jetstack/cert-manager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cert-Manager&lt;/a&gt; ！&lt;/p&gt;
&lt;p&gt;Cert-Manager 附带 helm chart，所以很容易部署，只需按照文档执行命令即可，就像下面介绍的这样：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在有一个 &lt;a href=&#34;https://github.com/kubernetes/charts/tree/master/stable/cert-manager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cert-Manager&lt;/a&gt; 的&lt;a href=&#34;https://github.com/kubernetes/charts/tree/master/stable/cert-manager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方 Helm 图表&lt;/a&gt;，你不需要 &lt;code&gt;git clone&lt;/code&gt; ，只需要做 &lt;code&gt;helm install&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/jetstack/cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# check out the latest release tag to ensure we use a supported version of cert-manager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout v0.2.3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm install &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--name cert-manager &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--namespace kube-system &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;--set ingressShim.extraArgs&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{--default-issuer-name=letsencrypt-prod,--default-issuer-kind=ClusterIssuer}&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;contrib/charts/cert-manager
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令将启动 kube-system 命名空间中的 Cert-Manager pod。&lt;/p&gt;
&lt;p&gt;我使用这一行配置&lt;code&gt;--default-issuer-kind=ClusterIssuer&lt;/code&gt; 所以我只能创建一次我的 Issuer。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是 issuer？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;以下是它的工作原理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你创建一个 Issuer 配置，它将告诉 Cert-Manager 如何使用 ACME API（你通常只有 2 个，staging 和 prod）&lt;/li&gt;
&lt;li&gt;您创建一个证书定义，告诉哪些域需要 SSL&lt;/li&gt;
&lt;li&gt;Cert-Manager 为您申请证书&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，我们来创建 Issuer。在创建 ClusterIssuers 时，我不关心特定的命名空间：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;certmanager.k8s.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIssuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;acme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#The ACME server URL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;srver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://acme-v01.api.letsencrypt.org/directory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#用于注册 ACME 的电子邮件地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;me@domain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#用于存储 ACME 帐户私钥的秘密名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privateKeySecretRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#启用 HTTP-01 质询提供程序&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;certmanager.k8s.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIssuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt -staging&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;acme &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ACME 的服务器 URL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://acme-staging.api.letsencrypt.org/directory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 用于 ACME 注册的电子邮件地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;staging + me@domain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 用于存储 ACME 帐户私钥的密钥的 名称&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privateKeySecretRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-staging&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 启用 HTTP-01 质询提供程序&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl apply -f certificate-issuer.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在你应该有一个有效的 Cert-Manager。您需要为您的域/服务创建配置，以便 Istio Ingress 可以选择正确的证书。&lt;/p&gt;
&lt;h3 id=&#34;istio-ingress&#34;&gt;Istio Ingress&lt;/h3&gt;
&lt;p&gt;Ingress 是您公开服务的前端 Web 代理（这是你的优势&amp;hellip;&amp;hellip;我说 WEB 代理，因为它现在只支持 HTTP/HTTPS）。但让我们假设你知道关于 Ingress 的一切。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这不是一个真正的更新，而是一个更精确的描述，Ingress 也支持 GRPC，当然这是 HTTP/2。&lt;/p&gt;
&lt;p&gt;Ingress 的神奇之处在于它在 Kubernetes API 中的实现。您创建一个 Ingress Manifest，并将您的所有流量引导至正确的 Pod！告诉你这种方式就是神奇的魔法（因为你并不知道它如何引导的流量） ！&lt;/p&gt;
&lt;p&gt;很好，在这种情况下，这就是令人神奇的黑魔法！&lt;/p&gt;
&lt;p&gt;例如，Traefik Ingress 绑定端口 80 和 443，管理证书，因此您为 &lt;a href=&#34;http://www.mydomain.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.mydomain.com&lt;/a&gt; 创建入口，并且它正常工作，因为它正在做所有事情。&lt;/p&gt;
&lt;p&gt;对于 Istio，当您使用 Cert-Manager 时，还有一些步骤。要快点，在这里他们（截至 2018/01，它可能很快就会改变）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为域 &lt;a href=&#34;http://www.mydomain.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.mydomain.com&lt;/a&gt; 创建证书请求&lt;/li&gt;
&lt;li&gt;Cert-Manager 将选择这个定义并创建一个 pod，它实际上是一个可以回答 ACME 问题的 Web 服务器（&lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/master/docs/user-guides/ingress-shim.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress-Shim&lt;/a&gt;）它还将创建一个服务和一个 HTTP Ingress，以便它可以通过 Lets Encrypt 服务器&lt;/li&gt;
&lt;li&gt;以前的观点不适用于您使用 Istio Ingress，因此您必须删除 &lt;code&gt;Service&lt;/code&gt; 和&lt;code&gt;Ingress&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建指向 Pod 的自己的服务&lt;/li&gt;
&lt;li&gt;创建您自己的 Istio Ingress，以便可以访问 pod&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;听起来很疯狂？那么，现在呢。它甚至是恶梦：&lt;/p&gt;
&lt;p&gt;在 Istio 中使用 Cert-Manager 时，您只能拥有一个外部服务证书！所以你必须添加所有公共 DNS 名称到这个证书！&lt;/p&gt;
&lt;p&gt;所以我们来实现它&amp;hellip;&lt;/p&gt;
&lt;h4 id=&#34;证书&#34;&gt;证书&lt;/h4&gt;
&lt;p&gt;把这个清单放在一个像 &lt;em&gt;certificate-istio.yml&lt;/em&gt; 这样的文件中 ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;certmanager.k8s.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Certificate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meteadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingress-certs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingress-certs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;issuerRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; 	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-staging&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; 	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIssuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;commonName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;www.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dnsNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;www.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;mobile.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;acme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingressClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;none&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;www.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; 	  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;mobile.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们在这里看到的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们想要一个证书&lt;/li&gt;
&lt;li&gt;它将支持 2 个域名 &lt;em&gt;&lt;a href=&#34;https://www.mydomain.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.mydomain.com&lt;/a&gt;&lt;/em&gt; 和 &lt;em&gt;mobile.mydomain.com&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;此证书请求与 Istio Ingress（istio-system）位于同一个命名空间中，&lt;/li&gt;
&lt;li&gt;它将使用 HTTP-01 回答 ACME 的问题&lt;/li&gt;
&lt;li&gt;Istio Ingress（Envoy 代理）期望该证书将被复制到一个名为 &lt;em&gt;istio-ingress-certs&lt;/em&gt; 的  K8s  Secret 中（这是超级重要，最好不要修改这个名字）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl apply -f certificate-istio.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;完成之后，您通过 cert-manager pod 将可以看到 Istio Ingress 的日志情况，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ingress-7f8468bb7b-pxl94 istio-ingress &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2018-01-23T21:01:53.341Z&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET /.well-known/acme-challenge/xxxxxxx HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;503&lt;/span&gt; UH &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; - &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.20.5.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Go-http-client/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.domain.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istio-ingress-7f8468bb7b-pxl94 istio-ingress &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;2018-01-23T21:01:58.287Z&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET /.well-known/acme-challenge/xxxxxx HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;503&lt;/span&gt; UH &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; - &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.20.5.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Go-http-client/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxxx&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mobile.domain.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是因为 Let&amp;rsquo;s Encrypt 服务器正在轮询验证令牌，并且您的设置尚未运行。截至目前你的设置看起来像这样：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/istio-envoy-cert-manager-lets-encrypt-for-tls/61411417ly1fshj4soh0mj20m80j3mzg.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;现在是删除由 Cert-Manager 创建的不需要的东西的时候了。使用您最擅长的 K8s 工具，如仪表板或 kubectl，并从 &lt;em&gt;istio-system&lt;/em&gt; 命名空间中删除 Service 和 Ingress。它们将被命名为 &lt;strong&gt;cm-istio-ingress-certs-xxxx&lt;/strong&gt;。如果您的证书申请中有许多域名，你应该删除多余的域名。&lt;/p&gt;
&lt;p&gt;另外，不要删 pod！（如果有错误，它们将被重新创建）&lt;/p&gt;
&lt;p&gt;（作为提醒：&lt;code&gt;kubectl -n istio-system delete cm-istio-ingress-certs-xxxx&lt;/code&gt;）&lt;/p&gt;
&lt;h4 id=&#34;服务&#34;&gt;服务&lt;/h4&gt;
&lt;p&gt;既然您的设置很干净，您可以继续并重新创建所需的 Service 和 ingress。&lt;/p&gt;
&lt;p&gt;您需要尽可能多的 Service，因为您拥有不同的域名。在我们的例子中，2.这是清单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager-ingress-www&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;auth.istio.io/8089&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NONE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8089&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http-certingr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certmanager.k8s.io/domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;www.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager-ingress-mobile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;auth.istio.io/8089&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;NONE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8089&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http-certingr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certmanager.k8s.io/domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mobile.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl apply -f certificate-services.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后你可以检查你的 Service。每个 Service 都应该有一个指定的目标 pod。&lt;/p&gt;
&lt;p&gt;请注意，Service 名称无关紧要。这取决于你给出一个特定的名称，所以你不会混淆你所有的域名。&lt;/p&gt;
&lt;h4 id=&#34;ingress&#34;&gt;Ingress&lt;/h4&gt;
&lt;p&gt;现在是创建 Ingress 的时候了，因此您的“ACME Token Pods”可以从外部访问。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certmanager.k8s.io/acme-challenge-type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http01&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certmanager.k8s.io/cluster-issuer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-staging&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingress-certs-mgr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/.well-known/acme-challenge/.*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager-ingress-www&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http-certingr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;www.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/.well-known/acme-challenge/.*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager-ingress-mobile&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http-certingr&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mobile.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再次，我们在这里需要注意一些事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;证书，Service 和 Ingress 需要在同一个命名空间中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ingress class  是 &lt;em&gt;Istio&lt;/em&gt;（显然）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们正在使用 &lt;em&gt;staging&lt;/em&gt; Issuer（记住我们第一步创建的 Issuer）。
您必须根据创建的&lt;code&gt;Issuer&lt;/code&gt;或&lt;code&gt;ClusterIssuer&lt;/code&gt;使用正确的 annotation。文档位于 &lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/master/docs/user-guides/ingress-shim.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress-Shim&lt;/a&gt; 项目中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们必须为每个域创建一个 HTTP 规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;em&gt;backend/srvice&lt;/em&gt; 必须我们在上一步中创建的服务，以及域名匹配，所以：&lt;/p&gt;
&lt;p&gt;用 &lt;em&gt;&lt;a href=&#34;https://www.mydomain.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.mydomain.com&lt;/a&gt;&lt;/em&gt; →serviceName cert-manager-ingress-www→pod cm-istio-ingress-certs-xxx，其中 label &lt;em&gt;certmanager.k8s.io/domain =&lt;/em&gt; &lt;em&gt;&lt;a href=&#34;https://www.mydomain.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.mydomain.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再次：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kubectl apply -f certificate-ingress.yml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;就是这样！&lt;/p&gt;
&lt;p&gt;检查 Istio-Ingress 日志，您应该看到几个*“GET /.well-known/acme-challenge/xxx HTTP / 1.1”200*&lt;/p&gt;
&lt;h3 id=&#34;示例应用程序&#34;&gt;示例应用程序&lt;/h3&gt;
&lt;p&gt;我使用了一个示例应用程序来验证我的设置正在工作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/ingress.allow-http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingress-https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingress-certs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/.*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;www.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/.*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mobile.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;extensions/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-ingress-http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/.*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;www.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/.*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mobile.mydomain.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ReplicationController&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kelseyhightower/helloworld:v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ReplicationController&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;kelseyhightower/helloworld:v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;helloworld&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们必须再次感谢 Kelsey Hightower 是他提供的 HelloWorld 示例应用程序🙏&lt;/p&gt;
&lt;p&gt;然后：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl -n default apply -f helloworld.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，您需要为所有 HTTPS 域名使用一个 Ingress，而为 HTTP 使用一个 Ingress  &amp;hellip;这里仅显示 HTTPS：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/istio-envoy-cert-manager-lets-encrypt-for-tls/61411417ly1fshj4vatnoj20m80j376n.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;验证完成后，Cert-Manager 应该删除 istio-system 命名空间中的 Token-Exchange pod。是的，一旦 Cert-Manager 与 Let&amp;rsquo;s Encrypt 服务器达成一致，他们将交换用于续订的永久密钥。无需使用 pod，甚至 Services 和 Ingress，至少如果你确定你不需要添加或改变证书中的某些东西。&lt;/p&gt;
&lt;h3 id=&#34;更新证书&#34;&gt;更新证书&lt;/h3&gt;
&lt;p&gt;在更新证书时，我建议先为其创建正确的 &lt;code&gt;Service&lt;/code&gt;。然后更新 &lt;code&gt;Ingress&lt;/code&gt; 以将流量发送到正确的服务。最后，更新您的 &lt;code&gt;Certificate&lt;/code&gt; 定义并添加新的域名。&lt;/p&gt;
&lt;p&gt;证书管理器将创建一个新的 &lt;code&gt;ingress&lt;/code&gt; 和 &lt;code&gt;service&lt;/code&gt; 你将不得不删除。其他一切都将自行发生。等待几秒钟 &lt;code&gt;Istio-Ingress&lt;/code&gt; 重新加载它的证书，你很好 &lt;code&gt;curl&lt;/code&gt; ！&lt;/p&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;
&lt;p&gt;尽管我现在觉得它非常令人研发，但它最起码可以正常工作。如果您需要更新证书或添加新的域名，则必须更新证书定义，整个过程将要重新再来一遍。这实在是一种痛苦，当然比起与 Traefik 或 Caddy 完全整合更加困难。不过我相信这将会很快改变。&lt;/p&gt;
&lt;p&gt;我想感谢 &lt;a href=&#34;https://github.com/ldemailly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Laurent Demailly&lt;/a&gt; 在这方面的工作。有关更多详情和讨论，请参阅 Istio  &lt;a href=&#34;https://github.com/istio/istio.github.io/issues/868&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue #868&lt;/a&gt;。他正在使用 Istio + TLS 开发示例应用程序部署 Fortio，他是启发并帮助我完成所有工作的人。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Service Mesh 来充分利用微服务</title>
      <link>https://cloudnativecn.com/blog/making-most-out-microservices-service-mesh/</link>
      <pubDate>Tue, 19 Jun 2018 18:04:08 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/making-most-out-microservices-service-mesh/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://www.linux.com/blog/event/kubecon/2018/4/making-most-out-microservices-service-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Aspen Mesh 的 Andrew Jenkins 说，转向微服务本身并不能消除复杂性。&lt;/p&gt;
&lt;p&gt;在本文中，我们与 Aspen Mesh 的首席架构师 Andrew Jenkins 谈论了如何从单一应用程序转向微服务，并通过一些关于服务网格的宣传来管理微服务架构。有关服务网格的更多信息，请考虑参加于 2018 年 5 月 2 日至 4 日在丹麦哥本哈根举行的&lt;a href=&#34;https://events.linuxfoundation.org/events/kubecon-cloudnativecon-europe-2018/attend/register/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon + CloudNativeCon EU&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.微服务解决了许多公司面临的单体架构问题。你认为其最大的价值在哪里？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Andrew Jenkins&lt;/strong&gt; ：对我来说，这是关于最小化时间对用户的影响。向虚拟化和云转型的关键是降低与支持应用程序的所有基础架构相关的复杂性，以便您可以灵活地分配服务器和存储等。但是这种转变并不一定会改变我们构建的应用程序。现在我们有了灵活的基础架构，我们应该构建灵活的应用程序以充分利用它。&lt;/p&gt;
&lt;p&gt;微服务是灵活的应用程序——构建小型，单一用途的模块并快速构建它们，以便您可以快速将它们交付给最终用户。组织可以使用它来根据实际用户需求进行测试并迭代构建。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.随着企业从单体应用程序向微服务迁移，收益显而易见，但公司在采取行动时遇到的一些挑战是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt; ：转向微服务本身并不能消除复杂性。任何一个微服务的复杂性都很小，但是整个系统都很复杂。从根本上说，公司希望知道哪个服务正在与哪个服务对话，代表哪个服务对象，然后能够使用策略来控制该通信。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/making-most-out-microservices-service-mesh/61411417ly1fsgj488frxj20ed05zgnh_hu_5297d9b82ba3b58d.webp 400w,
               /blog/making-most-out-microservices-service-mesh/61411417ly1fsgj488frxj20ed05zgnh_hu_b63da87496dbd0ec.webp 760w,
               /blog/making-most-out-microservices-service-mesh/61411417ly1fsgj488frxj20ed05zgnh_hu_6291ddcb1002b51a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/making-most-out-microservices-service-mesh/61411417ly1fsgj488frxj20ed05zgnh_hu_5297d9b82ba3b58d.webp&#34;
               width=&#34;517&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.组织如何尝试应对这些挑战？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt; ：一些公司从第一天起就将这种可见性和策略部分添加到他们构建的每个应用程序中。当公司投资于定制工具、工作流程、部署管理和 CD 管道时，这种情况尤其常见。我们也发现这些公司通常是以几种语言为导向，并且几乎写出他们自己运行的所有内容。&lt;/p&gt;
&lt;p&gt;如果您的应用程序堆栈是多边形的，并且是新开发和迁移现有应用程序的组合，则很难证明将这些部分单独添加到每个应用程序是合理的。来自不同团队和外部开发的应用程序的应用程序更多地提高了这一点，一种方法是分别对待那些不符合要求的应用程序 - 将它们置于策略执行代理之后，或者从可见性角度将它们视为更多的黑盒子。但是，如果你不必做出这种分离，那么如果有一种简单的方法来获得任何语言的任何应用程序的原生式策略和可见性，那么你可以看到它的优势。服务网格就是这样的一种方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.作为管理微服务架构的最终解决方案，围绕服务网格存在大量宣传。你的想法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt; ：是的，这绝对是攀登炒作循环曲线。它不会适合所有情况。如果你已经有微服务，并且你觉得你有很好的控制能力和可视性，那么你已经有了一个很好的开发人员工作流程，那么你就不需要把所有东西都撕掉，并且明天在服务网格中填充。我建议你可能仍然想知道里面的内容，因为当你的团队处理新的语言或环境时它可能会有帮助。&lt;/p&gt;
&lt;p&gt;我认为我们应该了解服务网格如何将功能集成到一个一致的层中。我们都喜欢保持我们的代码干爽（不要重复自己）。我们知道两个相似的实现永远不会完全相同。如果您可以利用服务网格来获得一个可以在整个基础架构中运行的重试逻辑的实现，那么真正简化了开发人员，操作人员以及与该系统一起工作的每个人的操作。我敢打赌，你的团队中没有人想再写一个重试循环的副本，特别是没有人想调试用 go 编写的文件和用 python 编写的文件之间的细微差别。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.随着要监控的服务数量的增加，这些服务中的每一个很可能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- 使用不同的技术/语言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- 住在不同的机器/容器上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;- 拥有自己的版本控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务如何解决这些差距？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt; ：Service mesh 的第一个承诺是为任何语言编写的微服务（对于任何应用程序堆栈）执行相同的操作（即可见性和控制部分）。接下来，当您考虑不同的容器互相交谈时，服务网格可能会帮助与该层相关的许多内容。例如，你是否相信保护每个单独运行的容器而不是外围（防火墙）安全？然后使用服务网格提供从容器到容器的 mTLS。&lt;/p&gt;
&lt;p&gt;我还看到，版本控制差异是更深的应用程序生命周期差异的表现。所以这个团队使用这样的版本控制，广泛的资格认证阶段和谨慎的升级策略，因为他们提供了每个人都依赖的最核心的服务之一。另一个从事全新原型服务的团队有一个不同的政策，但您肯定希望确保他们不写入生产数据库。将他们的“方形挂钩工作流程”装入你的“圆孔工艺”并不是正确的。&lt;/p&gt;
&lt;p&gt;您可以使用服务网格以适合他们的方式将这些不同的应用程序和服务移植到系统中。现在显然你想要使用一些判断，而不是为每一个小的微服务定制固定，但我们听到很多关于服务网格的兴趣，以帮助消除这些生命周期和期望之间的差异。再次，它的全部是提供快速迭代，但不放弃可见性和控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.控制平面与数据平面：服务网格为每个平面提供值？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt; ：今天开始制作网络服务是多么容易。您可以将代码放入推文中。虽然这不是真正的 Web 服务。为了使其具有弹性和可扩展性，您需要在应用程序的数据平面添加一些内容。它需要做 TLS，它需要重试失败，它只需要接受来自这个服务的请求，但不是那个，并且它需要检查用户的认证，等等。服务网格可以帮助您获得数据平面功能，而无需向应用添加代码。&lt;/p&gt;
&lt;p&gt;而且，由于现在已经在数据平面层中，因此可以在不修改应用程序的情况下升级和增强该层。&lt;/p&gt;
&lt;p&gt;服务网格为您的微服务带来了控制平面的一致性。像 Kubernetes 这样的容器编排系统提供了描述你想要运行哪些容器的常用方法。这并不是说你不能在没有它们的情况下运行容器，那是因为一旦你运行了一些容器，你就需要一个一致的方式来运行它们。服务网格就是这样，用于容器之间的通信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.服务网格的流行语是“可观察性”。你能分享一下真实世界中的可观察性提供的好处吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt; ：我们曾与一个团队谈过，他们告诉我们他们花了几个小时的时间在电话上试图解决一些跨越很多服务和组件的问题。他们从每项服务中收集了大量数据，他们知道答案是在某处的大量数据中。但是他们花了很多时间在信息的每个快照之间进行翻译。他们不相信翻译中的每一步都是正确的 - 毕竟，如果他们明白发生了什么事情，他们首先会设计出这个问题。最重要的是，哪里开始寻找并不总是很清楚。&lt;/p&gt;
&lt;p&gt;他们要求的是一种观点 - 一个地方收集的所有服务信息，以及他们问题最重要的信息。同样，服务网格不是万能的，我不会保证你永远不必再看日志文件。但我的目标是，一旦这个团队拥有一个服务网格，他们总是有信心，他们已经对每一个微服务进出的内容有了很好的观察，并且服务网格已经指出他们正确的方向。&lt;/p&gt;
&lt;p&gt;对我而言，可观察性不仅仅是收集大量数据点。这是为了尽快将智能大脑应用于系统中的真实故障。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.您对服务网格的未来有什么看法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jenkins&lt;/strong&gt; ：我认为各种实现都提供了一个引人注目的策略和组件工具箱。我很高兴我们正在利用从微服务的先驱获得的经验教训来构建这个通用服务网格层。&lt;/p&gt;
&lt;p&gt;下一步将选择如何使用该工具箱来解决问题。组织希望在部署策略方面保持一定的一致性：面临的挑战是将应用开发者，信息安全平台和平台团队的利益结合起来，以便他们的所有策略都融合在服务网格中。&lt;/p&gt;
&lt;p&gt;在技术细微差别上，我们已经看到了服务网格，它们利用所谓的 Sidecar 模型来集成和服务没有的网格。Sidecar 对于应用增强层感觉很自然，但我们并不习惯于那些我们认为是基础设施的层。&lt;/p&gt;
&lt;p&gt;一旦我们从第一天开始依赖服务网格来编写应用程序，我们就有机会对应用程序进行细粒度但高级别的控制。每一个应用程序都将具有先进的重试逻辑、安全性、可见性等，从第一天开始。首先，这将改变我们开发和测试应用程序的方式。我认为这也将为我们还没有想到的跨应用策略敞开大门。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>服务网格在 Cookpad 网站中的实践</title>
      <link>https://cloudnativecn.com/blog/service-mesh-in-cookpad/</link>
      <pubDate>Tue, 19 Jun 2018 15:54:19 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/service-mesh-in-cookpad/</guid>
      <description>&lt;p&gt;这个原文是 5 月初发表的&lt;a href=&#34;http://techlife.cookpad.com/entry/2018/05/08/080000&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;日文原文&lt;/a&gt;的翻译。补充一下这篇文章的背景，Cookpad 是一家拥有 200 多种产品开发的中型科技公司，拥有 10 多支团队，每月平均用户数量达到 9000 万。&lt;a href=&#34;https://www.cookpadteam.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cookpadteam.com/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;你好，我是来自生产团队的开发人员&lt;a href=&#34;https://github.com/taiki45/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Taiki&lt;/a&gt;。目前，我想介绍一下在 Cookpad 上构建和使用服务网格所获得的知识。&lt;/p&gt;
&lt;p&gt;对于服务网格本身，我认为您将对以下文章，公告和教程有完整的了解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/taiki45/observability-service-mesh-and-microservices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/taiki45/observability-service-mesh-and-microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.envoyproxy.io/service-mesh-data-plane-vs-control-plane-2774e720f7fc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.envoyproxy.io/service-mesh-data-plane-vs-control-plane-2774e720f7fc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istioio.io/docs/setup/kubernetes/quick-start.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://istioio.io/docs/setup/kubernetes/quick-start.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLj6h78yzYM2P-3-xqvmWaZbbI1sW-ulZb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/playlist?list=PLj6h78yzYM2P-3-xqvmWaZbbI1sW-ulZb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;我们的目标&#34;&gt;我们的目标&lt;/h2&gt;
&lt;p&gt;我们引入了一个服务网格来解决故障排除，容量规划和保持系统可靠性等操作问题。尤其是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;降低服务组的管理成本&lt;/li&gt;
&lt;li&gt;可观察性的改进 (分别参考了 &lt;a href=&#34;https://blog.twitter.com/engineering/en_us/a/2013/observability-at-twitter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Twitter &lt;/a&gt; 和 &lt;a href=&#34;https://medium.com/@copyconstruct/monitoring-and-observability-8417d1952e1c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Medium 的博客&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;建立更好的故障隔离机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就第一个问题而言，随着规模的扩大，存在难以掌握哪个服务和哪个服务正在进行通信，某个服务的失败是哪里传播导致的问题。我认为这个问题应该通过综合管理服务在哪里和服务在哪里连接的相关信息来解决。&lt;/p&gt;
&lt;p&gt;对于第二个问题而言，我们进一步深究了第一个问题，我们发现我们不知道一个服务与另一个服务之间的通信状态。例如，RPS、响应时间、成功/失败状态的数量、超时、断路器的激活状态等。在两个或更多个服务引用某个后端服务的情况下，因为它们未被请求源服务标记，所以会导致后端服务的代理解析或负载均衡器的度量标准信息不足。&lt;/p&gt;
&lt;p&gt;对于第三个问题，“故障隔离尚未成功设置”。此时，在各应用程序中使用库，超时/重试·断路器的设置完成了。但是需要什么样的设置，必需单独查看应用程序代码。由于没有配置清单，会导致难以持续改进这些设置。另外，因为与故障隔离有关的设置应该不断改进，所以最好是可测试的，并且我们需要这样一个基础平台。&lt;/p&gt;
&lt;p&gt;为了解决更高级的问题，我们还构建了 gRPC 基础设施建设，配送跟踪处理委托，流量控制部署方式多样化，认证授权网关等功能。这部分将在稍后讨论。&lt;/p&gt;
&lt;h2 id=&#34;当前状态&#34;&gt;当前状态&lt;/h2&gt;
&lt;p&gt;Cookpad 中的服务网格使用 Envoy 作为 data-plane，并创建了我们自己的 control-plane。尽管我们最初考虑安装已经作为服务网格实现的 &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;，但 &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cookpad&lt;/a&gt; 中的应用程序大多数都使用名为 AWS ECS 的容器管理服务进行操作，因此与 Kubernetes 合作的优点是有限的。考虑到我们想实现的目标以及 Istio 软件本身的复杂性，我们选择了我们自己的 control-plane 的路径，该平面可以从小型起步。&lt;/p&gt;
&lt;p&gt;此次实施的服务网格的 control-plane 分由几个组件组成。我将解释每个组件的角色和操作流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集中管理服务网格配置的存储库。&lt;/li&gt;
&lt;li&gt;使用名为 &lt;a href=&#34;https://github.com/taiki45/kumonos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kumonos&lt;/a&gt; 的 gem 从上面的设置文件生成 &lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/5ea10b04a950260e1af0572aa244846b6599a38f/API_OVERVIEW.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy xDS API&lt;/a&gt; 响应 JSON&lt;/li&gt;
&lt;li&gt;将生成的响应 JSON 放置在 Amazon S3 上，并将其用作 Envoy 的 xDS API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在中央存储库中管理该设置的原因是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们希望随时跟踪更改历史记录并在稍后跟踪记录它&lt;/li&gt;
&lt;li&gt;我们希望能够通过跨组织团队（如 SRE 团队）来查看设置更改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于负载均衡，我最初是为 Internal ELB 设计的，但 gRPC 应用程序的基础架构也符合要求（我们的 gRPC 应用程序已经在生产环境中使用此机制），我们使用 SDS（Service Discovery Service）API（简单地使用内部 ELB（NLB 或 TCP 模式 CLB）的 服务端侧负载均衡不均衡而在性能方面具有缺陷，并且在可获得的度量方面也是不够的）准备了客户端负载均衡。我们在 ECS 任务中部署了一个 sidecar 容器，用于对应用程序容器执行健康检查并在 SDS API 中注册连接目标信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-in-cookpad/61411417ly1fs7pzdtqd9j20n60dq40a_hu_c95ea1f0fd9901ea.webp 400w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pzdtqd9j20n60dq40a_hu_a9e2a22e9bedd42d.webp 760w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pzdtqd9j20n60dq40a_hu_b8c97e6f5e1843b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-in-cookpad/61411417ly1fs7pzdtqd9j20n60dq40a_hu_c95ea1f0fd9901ea.webp&#34;
               width=&#34;760&#34;
               height=&#34;450&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;度量指标（metric）的配置如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将所有指标存储到 Prometheus&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.6.0/api-v2/config/metrics/v2/stats.proto#config-metrics-v2-dogstatsdsink&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dog_statsd&lt;/a&gt; 将标记的度量标准发送到 ECS 容器主机实例上运行的 &lt;a href=&#34;https://github.com/prometheus/statsd_exporter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statsd_exporter&lt;/a&gt; （起初我将它作为我们自己的扩展实现，但后来我把这个修改作为&lt;a href=&#34;https://github.com/envoyproxy/envoy/pull/2158&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;补丁&lt;/a&gt;提交了）&lt;/li&gt;
&lt;li&gt;所有指标都包含通过 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.6.0/api-v2/config/metrics/v2/stats.proto#config-metrics-v2-statsconfig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;固定字符串标签&lt;/a&gt; 的应用程序 ID 来标识每个节点 (这个是我们的另一个&lt;a href=&#34;https://github.com/envoyproxy/envoy/pull/2357&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;补丁&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Prometheus 使用 &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/configuration/configuration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EC2 SD&lt;/a&gt; 来提取 statsd_exporter 指标&lt;/li&gt;
&lt;li&gt;要管理 Prometheus 的端口，我们在 statsd_exporter 和 Prometheus 之间使用 &lt;a href=&#34;https://github.com/rrreeeyyy/exporter_proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exporter_proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用 Grafana 和 &lt;a href=&#34;https://medium.com/netflix-techblog/vizceral-open-source-acc0c32113fe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vizceral&lt;/a&gt; 进行度量指标的可视化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您在不使用 ECS 或 Docker 的情况下直接在 EC2 实例上运行应用程序进程，则 Envoy 进程作为守护进程直接在实例中运行，但架构几乎相同。有一个原因是没有将 Prometheus 直接设置为 Envoy，因为我们仍然无法从 Envoy 的 Prometheus 兼容端点中提取&lt;a href=&#34;https://github.com/envoyproxy/envoy/issues/1947&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;直方图度量&lt;/a&gt;。由于这将在未来得到改善，我们计划在当时消除 stasd_exporter。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv3rapdj20sg0qvgpb_hu_78682f17c0e4867f.webp 400w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv3rapdj20sg0qvgpb_hu_43712cfa3d7dfdd7.webp 760w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv3rapdj20sg0qvgpb_hu_db7aeb86a55e373a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-in-cookpad/61411417ly1fs7pv3rapdj20sg0qvgpb_hu_78682f17c0e4867f.webp&#34;
               width=&#34;760&#34;
               height=&#34;717&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在 Grafana 上，仪表板和 Envoy 的整个仪表板都为每项服务做好准备，例如上游 RPS 和超时发生。我们还将准备一个服务大小和服务粒度的仪表板。&lt;/p&gt;
&lt;p&gt;每个服务的仪表板：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4dqikj20sg0mp11e_hu_1f65cc1a8b9fdfce.webp 400w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4dqikj20sg0mp11e_hu_25b1a782dbd37e55.webp 760w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4dqikj20sg0mp11e_hu_9fff3e7ae684711a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-in-cookpad/61411417ly1fs7pv4dqikj20sg0mp11e_hu_1f65cc1a8b9fdfce.webp&#34;
               width=&#34;760&#34;
               height=&#34;606&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;例如，上游故障时的断路器相关指标：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4kw6vj20i40d9q41_hu_d2c3499c71230d6f.webp 400w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4kw6vj20i40d9q41_hu_67e7e068a5c667f6.webp 760w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4kw6vj20i40d9q41_hu_ea0ff96be0b7870d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-in-cookpad/61411417ly1fs7pv4kw6vj20i40d9q41_hu_d2c3499c71230d6f.webp&#34;
               width=&#34;652&#34;
               height=&#34;477&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Envoy 的仪表板：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4rqrij20sg0qa49n_hu_57b19fa5c52bfcf4.webp 400w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4rqrij20sg0qa49n_hu_43b10bd9a96edf2e.webp 760w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv4rqrij20sg0qa49n_hu_2cc3459c5bb9d326.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-in-cookpad/61411417ly1fs7pv4rqrij20sg0qa49n_hu_57b19fa5c52bfcf4.webp&#34;
               width=&#34;760&#34;
               height=&#34;702&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用 Netflix 开发的 Vizceral 可视化服务配置。为了实现，我们开发了 &lt;a href=&#34;https://github.com/nghialv/promviz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;promviz&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/mjhd-devlion/promviz-front&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;promviz-front&lt;/a&gt; 的 fork（为了方便用 nginx 交付并符合 Cookpad 中的服务组合）。由于我们仅在某些服务中引入，因此当前显示的节点数量很少，但我们提供了以下仪表板。&lt;/p&gt;
&lt;p&gt;每个 region 的服务配置图、RPS、错误率：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv47xzjj20sg0gxdjd_hu_889040785166798.webp 400w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv47xzjj20sg0gxdjd_hu_d2e46b21582700f9.webp 760w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv47xzjj20sg0gxdjd_hu_1504c8e47e86a6e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-in-cookpad/61411417ly1fs7pv47xzjj20sg0gxdjd_hu_889040785166798.webp&#34;
               width=&#34;760&#34;
               height=&#34;452&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;特定服务的 downstream/upstream：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv3xymcj20sg0i2acs_hu_c881caaf2023b655.webp 400w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv3xymcj20sg0i2acs_hu_f55f293d3007f790.webp 760w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv3xymcj20sg0i2acs_hu_fa34afb487ca3207.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-in-cookpad/61411417ly1fs7pv3xymcj20sg0i2acs_hu_c881caaf2023b655.webp&#34;
               width=&#34;760&#34;
               height=&#34;483&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另外，作为服务网格的一个子系统，你必须部署网关从开发商手中获得 staging 环境的 gRPC 服务器应用程序（假设使用客户端负载均衡进行访问，我们需要一个组件来解决它）。它是通过将 SDS API 和 Envoy 与管理称为 &lt;a href=&#34;http://techlife.cookpad.com/entry/2018/04/02/140846&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hako-console&lt;/a&gt; 的内部应用程序的软件相结合而构建的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gateway app（Envoy）向 gateway controller 发送 xDS API 请求&lt;/li&gt;
&lt;li&gt;Gateway controller 从 hako-console 获取 staging 环境中的 gRPC 应用程序列表，并基于该响应返回 Route Discovery Service/Cluster Discovery Service API 响应&lt;/li&gt;
&lt;li&gt;Gateway app 根据响应从 SDS API 获取实际连接目的地&lt;/li&gt;
&lt;li&gt;从开发人员手中引用 AWS ELB Network Load Balancer，Gateway app 执行路由&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv42jzej20sg0mmtaz_hu_d787cc494cbd1312.webp 400w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv42jzej20sg0mmtaz_hu_df3f4df26cd718f8.webp 760w,
               /blog/service-mesh-in-cookpad/61411417ly1fs7pv42jzej20sg0mmtaz_hu_173dc2451d8eba79.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-in-cookpad/61411417ly1fs7pv42jzej20sg0mmtaz_hu_d787cc494cbd1312.webp&#34;
               width=&#34;760&#34;
               height=&#34;604&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;效果&#34;&gt;效果&lt;/h2&gt;
&lt;p&gt;引入服务网格最显着的是它能够抑制临时故障的影响。有许多流量的服务之前有多个协作部分，到现在为止，200 多个与网络相关的琐碎错误（与流量相比，这个数字非常小）在一小时内一直在不断地发生的（这是因为有些地方设置了重试），它们是由服务网格根据情况适当设置的的重试设置，他已经下降到每周 1 例左右。&lt;/p&gt;
&lt;p&gt;从监测的角度来看，各种指标已经出现，但由于我们只是针对某些服务引入了这些指标，并且由于推出日期我们还没有达到全面使用，我们预计将来会使用它。在管理方面，因为服务之间的连接已经成为一个容易理解和可视化，因此我们希望通过将服务网格引入所有的应用服务来避免忽视和忽略对象。&lt;/p&gt;
&lt;h2 id=&#34;将来的计划&#34;&gt;将来的计划&lt;/h2&gt;
&lt;h4 id=&#34;迁移到-v2-api转换到-istio&#34;&gt;迁移到 v2 API，转换到 Istio&lt;/h4&gt;
&lt;p&gt;由于 xDS API 的初始设计情况和使用 S3 作为后端交付的要求，xDS API 一直在使用 v1，但由于 v1 API 已被弃用，因此我们计划将其移至 v2。与此同时，我们正在考虑将 control-plane 移至 Istio。另外，如果我们要构建我们自己的 control-plane，我们将使用 &lt;a href=&#34;https://github.com/envoyproxy/go-control-plane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-control-plane&lt;/a&gt; 来构建 &lt;a href=&#34;https%ef%bc%9a//github.com/envoyproxy/data-plane-api/blob/5ea10b04a950260e1af0572aa244846b6599a38f/API_OVERVIEW.md#apis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LDS/RDS/CDS/EDS API&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;替换反向代理&#34;&gt;替换反向代理&lt;/h4&gt;
&lt;p&gt;到目前为止，Cookpad 使用 nginx 作为反向代理，但是我们考虑到 nginx 和 Envoy 在内部技术实现、gRPC 通信和采集度量方面的差异，我们将考虑用 Envoy 替换 nginx 的反向代理和边缘代理。&lt;/p&gt;
&lt;h4 id=&#34;流量控制&#34;&gt;流量控制&lt;/h4&gt;
&lt;p&gt;随着我们转向客户端负载均衡并取代反向代理，我们将能够通过操作 Envoy 更方便的处理流量，所以我们将能够实现金丝雀部署、流量转移和请求镜像。&lt;/p&gt;
&lt;h4 id=&#34;故障注入&#34;&gt;故障注入&lt;/h4&gt;
&lt;p&gt;这是一个故意在正确管理的环境中注入延迟和故障的机制，并测试实际服务组是否可以正常工作。Envoy 有各种&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/v1.6.0/configuration/http_filters/fault_filter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;功能&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;在-data-plane-层上执行分布式跟踪&#34;&gt;在 data-plane 层上执行分布式跟踪&lt;/h4&gt;
&lt;p&gt;在 Cookpad 里，AWS X-Ray 被用作&lt;a href=&#34;http://techlife.cookpad.com/entry/2017/09/06/115710&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分布式追踪系统&lt;/a&gt;。目前，我们将分布式跟踪功能作为一个库来实现，但我们计划将其移至 data-plane 并在服务网格层实现。&lt;/p&gt;
&lt;h4 id=&#34;身份验证授权网关&#34;&gt;身份验证授权网关&lt;/h4&gt;
&lt;p&gt;这是为了仅在接收用户请求的最前端服务器进行认证和授权处理，随后的服务器将使用结果。以前，它不完全是作为一个库来实施的，但是通过转向 data-plane，我们可以获得过程模型的优点。&lt;/p&gt;
&lt;h2 id=&#34;最后&#34;&gt;最后&lt;/h2&gt;
&lt;p&gt;我们已经介绍了 Cookpad 中服务网格的现状和未来计划。许多功能已经可以很容易地实现，并且由于未来服务网格层可以完成更多的工作，因此强烈建议每个微服务系统都采用服务网格。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
