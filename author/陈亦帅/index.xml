<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>陈亦帅 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/%E9%99%88%E4%BA%A6%E5%B8%85/</link>
      <atom:link href="https://cloudnativecn.com/author/%E9%99%88%E4%BA%A6%E5%B8%85/index.xml" rel="self" type="application/rss+xml" />
    <description>陈亦帅</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 09 Mar 2023 12:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/author/%E9%99%88%E4%BA%A6%E5%B8%85/avatar_hu_fc95ea393ec1ee77.jpg</url>
      <title>陈亦帅</title>
      <link>https://cloudnativecn.com/author/%E9%99%88%E4%BA%A6%E5%B8%85/</link>
    </image>
    
    <item>
      <title>优化云原生监控体验：VictoriaMetrics 入门指南</title>
      <link>https://cloudnativecn.com/blog/victoriametrics/</link>
      <pubDate>Thu, 09 Mar 2023 12:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/victoriametrics/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文首先对 VictoriaMetrics 的功能和架构进行介绍。接着，使用一个场景例子演示单集群 VictoriaMetrics 的安装，并验证其对 Prometheus 的兼容性和可替换性。&lt;/p&gt;
&lt;h2 id=&#34;victoriametrics-简介&#34;&gt;VictoriaMetrics 简介&lt;/h2&gt;
&lt;p&gt;我们知道，若要保证一个系统的稳定运行，那么对于这个系统的监控是不可或缺的环节。当今在云原生领域中，Prometheus 作为已经毕业的 CNCF 项目，已经成为了非常主流的监控和报警工具。但它也存在一些缺点，例如：默认情况下，其数据存储于本地文件的 TSDB 中，不利于容灾和做数据管理，若用于生产一般需要搭配第三方的如 InfulxDB 进行使用。大数据量的场景下，指标的收集和管理性能存在一定的瓶颈。&lt;/p&gt;
&lt;p&gt;而我们今天介绍的 VictoriaMetrics 可以认为是 Prometheus 在上述问题上的一个增强版。它不仅能作为时序数据库结合 Prometheus 使用进行指标的长期远程存储，也能单独作为一个监控解决方案对 Prometheus 进行平替。&lt;/p&gt;
&lt;p&gt;对比其他一些主流的监控方案、时序数据库，VictoriaMetrics 具有如下优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指标数据的收集和查询具有极高的性能和良好的垂直和水平伸缩性，比 InfluxDB 和 TimesscaleDB 的性能高出 20 倍&lt;/li&gt;
&lt;li&gt;在处理高技术时间序列时，内存方面做出了优化，比 InfluxDB 少 10x 倍，比 Prometheus、Thanos 或 Cortex 少 7 倍&lt;/li&gt;
&lt;li&gt;数据存储的压缩方式更加高效。比 TimescaleDB 少 70 倍，与 Prometheus、Thanos、Cortex 相比，所需存储空间也少 7 倍。&lt;/li&gt;
&lt;li&gt;针对高延迟 IO 和低 IOPS 存储进行了优化&lt;/li&gt;
&lt;li&gt;单节点的 VictoriaMetrics 即可替代 Thanos、M3DB、Cortex、InfluxDB 或 TimescaleDB 等竞品中等规模的集群&lt;/li&gt;
&lt;li&gt;对于 Prometheus 具有良好的兼容性，能够支持 Prometheus 的配置文件、PromQL、各类 API、数据格式，并有一些自己的增强 API。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;victoriametrics-的架构&#34;&gt;VictoriaMetrics 的架构&lt;/h2&gt;
&lt;p&gt;VictoriaMetrics 分为单节点和集群两个方案。两种方案都提供了二进制文件、docker、helm 以及 operator 等部署方式。对于数据采集点对于 100w/s 的场景，官方推荐使用单节点版，单节点版相当于一个 all-in-one 的包，包含了大部分的功能，但不支持告警，简单好维护。多集群的架构图如图 1 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1-victoriametrics-集群版架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 1 VictoriaMetrics 集群版架构图&#34; srcset=&#34;
               /blog/victoriametrics/1_hu_61c9c686291add75.webp 400w,
               /blog/victoriametrics/1_hu_69d0f619dc764cbe.webp 760w,
               /blog/victoriametrics/1_hu_df1373b228b817b8.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/1_hu_61c9c686291add75.webp&#34;
               width=&#34;760&#34;
               height=&#34;514&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1 VictoriaMetrics 集群版架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;VictorMetrics 集群部分主要包含了以下几个组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vmstorage：它是一个有状态的组件，主要负责存储原始数据并返回指定标签过滤器在给定时间范围内的查询数据，集群部署的必选组件，默认端口为 8482。&lt;/li&gt;
&lt;li&gt;vminsert：无状态的服务组件，主要负责接收摄取的数据并根据指标名称和标签的哈希值分散从存储到部署了 vmstorage 的节点中去，集群部署的必选组件，默认端口为 8480。&lt;/li&gt;
&lt;li&gt;vmselect：无状态的额服务组件，面向外部终端的查询组件，根据收到的请求去各个 vmstorage 节点中获取数据，集群部署的必选组件，默认端口为 8481。&lt;/li&gt;
&lt;li&gt;vmagent：主要负责数据指标的抓取，并将它们存储在 VictoriaMetrics 或其他支持 remote write 协议的 Prometheus 兼容的存储系统中，会占用本地磁盘缓存。它是一个可选组件，位于图 1 的 Writers 那层 Load balancer 与各个采集源之间，类似于 Prometheus 中 pushgateway 的地位。是一个可选组件，默认占用端口 8429。其组件作用如图 2 所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-vmagent-的作用&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 2 vmagent 的作用&#34; srcset=&#34;
               /blog/victoriametrics/2_hu_2a22fd828b9e74da.webp 400w,
               /blog/victoriametrics/2_hu_fb2986516761476c.webp 760w,
               /blog/victoriametrics/2_hu_2091ba42cbf84545.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/2_hu_2a22fd828b9e74da.webp&#34;
               width=&#34;760&#34;
               height=&#34;653&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2 vmagent 的作用
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vmalert：类似于 Prometheus 中的 alertmanager，是一个告警的相关组件，如果不需要告警功能可以不使用该组件，是一个可选组件，默认占用端口为 8880。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;集群部署模式下，各个服务可以进行独立的扩展，但部署 vmstorage 节点之间建议互不通信和进行数据共享，单节点模式的二进制文件或镜像已经集成了三个必选组件的功能。&lt;/p&gt;
&lt;p&gt;下面我们将使用单集群的方式在 K8S 中对 VictoriaMetrics 进行部署，并验证其对于 Prometheus 的兼容性。&lt;/p&gt;
&lt;h2 id=&#34;victoriametrics-单节点的安装和兼容性验证&#34;&gt;VictoriaMetrics 单节点的安装和兼容性验证&lt;/h2&gt;
&lt;p&gt;首先，我们使用 Prometheus-Operator 进行 Prometheus 以及相关诸如 node-exporter、grafana 的快速安装。接着，在 K8S 内部署单节点的 VictoriaMetrics。最后，开启远程写入将 Prometheus 的数据写入 VictoriaMetrics 中，并在 grafana 中浏览 Prometheus 和 VictoriaMetrics 的指标，若结果相同，说明在不使用告警功能的情况下，VictoriaMetrics 可兼容替换 Prometheus 进行使用（单节点版不包含告警功能）。整体的组件图如图 3 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-3-场景组件图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 3 场景组件图&#34; srcset=&#34;
               /blog/victoriametrics/3_hu_789398113d0f618d.webp 400w,
               /blog/victoriametrics/3_hu_cfa318636ca8c4c4.webp 760w,
               /blog/victoriametrics/3_hu_c2475082beaeb02e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/3_hu_789398113d0f618d.webp&#34;
               width=&#34;395&#34;
               height=&#34;201&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3 场景组件图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;使用-kube-prometheus-安装-prometheus-相关组件&#34;&gt;使用 kube-prometheus 安装 prometheus 相关组件&lt;/h2&gt;
&lt;p&gt;首先，我们克隆和使用 kube-prometheus (&lt;a href=&#34;https://github.com/prometheus-operator/kube-prometheus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/prometheus-operator/kube-prometheus&lt;/a&gt;) 这个项目来进行图 3 中蓝色、黄色以及粉色部分组件的快速安装，该项目和 prometheus-operator 的区别就类似于 Linux 内核和 CentOS/Ubuntu&lt;/p&gt;
&lt;p&gt;这些发行版的关系，真正起作用的是 Operator 去实现的，kube-prometheus 项目编写了一系列常用的监控资源清单，更加容易上手安装。不过需要注意 Kubernetes 版本和 kube-prometheus 的兼容，各个版本的兼容关系如图 4 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-4-kube-prometheus-项目版本兼容情况&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 4 kube-prometheus 项目版本兼容情况&#34; srcset=&#34;
               /blog/victoriametrics/4_hu_80bec7d5aea8f5d0.webp 400w,
               /blog/victoriametrics/4_hu_10067668c1bd9743.webp 760w,
               /blog/victoriametrics/4_hu_6268195c5f574dc1.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/4_hu_80bec7d5aea8f5d0.webp&#34;
               width=&#34;760&#34;
               height=&#34;165&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4 kube-prometheus 项目版本兼容情况
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;由于作者本地的 K8s 环境为 1.21 版本，所以我们这里下载使用 release-0.9 的版本到本地，接着进行进行解压并重命名（起始目录为压缩包所在目录），并进入工作目录，命令如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tar -xvf kube-prometheus-0.9.0.tar.gz&lt;/li&gt;
&lt;li&gt;mv kube-prometheus-0.9.0 kube-prometheus&lt;/li&gt;
&lt;li&gt;cd kube-prometheus&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下一步，我们执行命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl create -f manifests/setup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这会帮我们安装创建 prometheus-operator 的命名空间（默认是 monitoring）和所需的 CRD 资源。&lt;/p&gt;
&lt;p&gt;接着，执行命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl wait &amp;ndash;for condition=Established &amp;ndash;all CustomResourceDefinition &amp;ndash;namespace=monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个命令会校验和等待我们所需 CRD 和命名空间的完成。&lt;/p&gt;
&lt;p&gt;最后，执行命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl create -f manifests/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它会帮我们安装项目已经定义好的 Prometheus、node-exporter、kube-state-metrics、alertmanager 组件。为了后续方便使用 Prometheus 和 grafana，我们将两个服务对应的 service 设置成 NodePort（默认为 ClusterIP）。命令为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl edit svc prometheus-k8s -n monitoring&lt;/li&gt;
&lt;li&gt;kubectl edit svc grafana -n monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完成之后，总体的服务清单如图 5 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5-kube-prometheus-安装后的总览图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 5 kube-prometheus 安装后的总览图&#34; srcset=&#34;
               /blog/victoriametrics/5_hu_3a04ca41bec67219.webp 400w,
               /blog/victoriametrics/5_hu_444a526a41f1bec4.webp 760w,
               /blog/victoriametrics/5_hu_e627b22ed603208a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/5_hu_3a04ca41bec67219.webp&#34;
               width=&#34;760&#34;
               height=&#34;530&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5 kube-prometheus 安装后的总览图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们通过 http://&lt;node-ip&gt;:30246 就可以访问 grafana 了，我们可以看到 kube-prometheus 这个项目的 grafana 已经为我们关联了图 5 中的 prometheus，具体见图 6：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-6-grafana-内的-prometheus-数据源配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 6 grafana 内的 prometheus 数据源配置&#34; srcset=&#34;
               /blog/victoriametrics/6_hu_c319ddbaf9f84d2e.webp 400w,
               /blog/victoriametrics/6_hu_398187aaa73bb0d9.webp 760w,
               /blog/victoriametrics/6_hu_81fd9ec99344cf70.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/6_hu_c319ddbaf9f84d2e.webp&#34;
               width=&#34;760&#34;
               height=&#34;493&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6 grafana 内的 prometheus 数据源配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;点击面板左侧的 Explore，我们可以进行指标查询，此处我们查询节点的 CPU 使用率指标“instance:node_cpu:ratio”，查询结果如图 7 和图 8 所示（由于作者的 Prometheus 做了联邦配置所以结果样本会偏多，只看 cnp_cluster 为“local-cluster”的样本即可）：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-7-prometheus-数据源指标浏览页面-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 7 prometheus 数据源指标浏览页面 1&#34; srcset=&#34;
               /blog/victoriametrics/7_hu_5a6a8a1b3ce6e833.webp 400w,
               /blog/victoriametrics/7_hu_a5323b931844edd4.webp 760w,
               /blog/victoriametrics/7_hu_fa057b91ae3a0720.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/7_hu_5a6a8a1b3ce6e833.webp&#34;
               width=&#34;760&#34;
               height=&#34;303&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7 prometheus 数据源指标浏览页面 1
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-图-8-prometheus-数据源指标浏览页面-2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 8 prometheus 数据源指标浏览页面 2&#34; srcset=&#34;
               /blog/victoriametrics/8_hu_59908c457e7d7849.webp 400w,
               /blog/victoriametrics/8_hu_3a3c6ae8e9d58f58.webp 760w,
               /blog/victoriametrics/8_hu_d2ee2e2c7aec149f.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/8_hu_59908c457e7d7849.webp&#34;
               width=&#34;760&#34;
               height=&#34;401&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 8 prometheus 数据源指标浏览页面 2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;在-k8s-中部署-victoriametrics&#34;&gt;在 K8S 中部署 VictoriaMetrics&lt;/h2&gt;
&lt;p&gt;接下来我们进行 VictoriaMetrics 的部署，由于我们要使用 VictoriaMetrics 作为远程存储，所以在部署时需要为 VictoriaMetrics 服务挂载一个存储，此处我们使用 Local PV 作为其存储（生产环境一般使用 NFS 或者 ceph）。一般来说，Local PV 对应的存储介质应该是一块外挂在宿主机的磁盘或者块设备，我们这里暂时将本机节点的/Users/chris/data/k8s/vm 这个目录看成是一个挂载的独立磁盘，然后我们依次准备 StorageClass、PV 和 PVC 的资源清单，其内容如下代码块所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;StorageClass 定义&lt;/center&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolume
metadata:
  name: victoria-metrics-data
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 10Gi
  storageClassName: local-storage
  local:
    path: /Users/chris/data/k8s/vm-operator
  persistentVolumeReclaimPolicy: Retain
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: project
              operator: In
              values:
                - local-cluster
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;PV 定义&lt;/center&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: victoria-metrics-data
  namespace: kube-vm
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-storage
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;PVC 定义&lt;/center&gt;
&lt;p&gt;PV 定义中我们设置了一个亲和性的 nodeSelector 进行使用，是因为本地存储不能随着 Pod 进行漂移，所以要求 Pod 固定到一个节点上，一旦漂移到其他节点上，另外的节点是没有对应的数据的（project=local-cluster 是我们实现为 node 设置的一个标签对）。并且我们在 StorageClass 定义中创建 StorageClass 的时候设置了延迟绑定，当节点第一次调度的时候才进行 PV 与 PVC 的绑定过程。因为假如我们一开始就绑定了 PV 和 PVC 在 node1 节点，且 PV 的存储卷在 node1 节点，但 Pod 只能运行在 node2 节点，那么就会出现冲突，导致调度失败，延迟调度就是让 K8S 调度器的总和考虑调度规则，再 Pod 被调度时再考虑 PVC 到底应该和哪个 PV 进行绑定。&lt;/p&gt;
&lt;p&gt;接着，我们定义 VictoriaMetrics 的 Deployment 和它的 Service，如下代码块所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: victoria-metrics
  namespace: kube-vm
spec:
  selector:
    matchLabels:
      app: victoria-metrics
  template:
    metadata:
      labels:
        app: victoria-metrics
    spec:
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: victoria-metrics-data
      containers:
        - name: vm
          image: victoriametrics/victoria-metrics:v1.79.8
          imagePullPolicy: IfNotPresent
          args:
            - -storageDataPath=/var/lib/victoria-metrics-data
            - -retentionPeriod=1w
          ports:
            - containerPort: 8428
              name: http
          volumeMounts:
            - mountPath: /var/lib/victoria-metrics-data
              name: storage
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;VictoriaMetrics 的 Deployment 清单&lt;/center&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: v1
kind: Service
metadata:
  name: victoria-metrics
  namespace: kube-vm
spec:
  type: NodePort
  ports:
    - port: 8428
  selector:
    app: victoria-metrics
&lt;/code&gt;&lt;/pre&gt;&lt;center&gt;VictoriaMetrics 的 Service 清单&lt;/center&gt;
&lt;p&gt;Deployment 定义中，我们使用-storageDataPath 参数指定了数据存储目录，-retentionPeriod 参数指定了数据的保留周期为 1 个星期，Service 中使用 NodePort 的方式对服务进行了暴露。&lt;/p&gt;
&lt;p&gt;最后，我们先使用命令&lt;code&gt;kubectl create ns kube-vm&lt;/code&gt;创建命名空间，再依次使用 kubectl apply -f 命令应用上述代码块的资源定义清单即可。部署之后的结果图，如图 9 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-9-victoriametrics-部署结果&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 9 VictoriaMetrics 部署结果&#34; srcset=&#34;
               /blog/victoriametrics/14_hu_60b29c83646399b0.webp 400w,
               /blog/victoriametrics/14_hu_63368266065ce05.webp 760w,
               /blog/victoriametrics/14_hu_b3e627d5cc27234a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/14_hu_60b29c83646399b0.webp&#34;
               width=&#34;760&#34;
               height=&#34;241&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 9 VictoriaMetrics 部署结果
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;依据图 3 的场景，我们需要在 Prometheus 中开启远程写入。我们可以在 kube-promethus 项目下的 manifest 目录下找到 prometheus-prometheus.yaml 文件，在清单的最后添加 VictoriaMetrics 在 K8S 中的 DNS 路径，并重新 apply 即可，如图 10 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-10-prometheus-开启远程写入&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 10 prometheus 开启远程写入&#34; srcset=&#34;
               /blog/victoriametrics/15_hu_fc1335b522f4572c.webp 400w,
               /blog/victoriametrics/15_hu_356b7e85ab82af17.webp 760w,
               /blog/victoriametrics/15_hu_449cd1af0b897e9d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/15_hu_fc1335b522f4572c.webp&#34;
               width=&#34;760&#34;
               height=&#34;393&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 10 prometheus 开启远程写入
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;验证兼容性&#34;&gt;验证兼容性&lt;/h2&gt;
&lt;p&gt;我们使用图 5 部署好的 grafana 添加一个新的 prometheus 数据源，数据源地址为图 14 部署的 VictoriaMetrics 的 DNS 地址，并命名数据源为 victoriametrics，最后使用这个数据源进行指标&lt;code&gt;instance:node_cpu:ratio&lt;/code&gt;的浏览，整个过程的截图如图 11~13 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-11-使用-prometheus-数据源配置-victoriametrics&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 11 使用 prometheus 数据源配置 VictoriaMetrics&#34; srcset=&#34;
               /blog/victoriametrics/16_hu_9b79e2832958f0f5.webp 400w,
               /blog/victoriametrics/16_hu_3e9c416a5597743b.webp 760w,
               /blog/victoriametrics/16_hu_d96e9eb81829364.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/16_hu_9b79e2832958f0f5.webp&#34;
               width=&#34;760&#34;
               height=&#34;584&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 11 使用 prometheus 数据源配置 VictoriaMetrics
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-12-victoriametrics-浏览指标&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 12 VictoriaMetrics 浏览指标&#34; srcset=&#34;
               /blog/victoriametrics/17_hu_97bf6889f78a6813.webp 400w,
               /blog/victoriametrics/17_hu_bf4f76b44cb5e23.webp 760w,
               /blog/victoriametrics/17_hu_ed5cc9d5adfd442b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/17_hu_97bf6889f78a6813.webp&#34;
               width=&#34;760&#34;
               height=&#34;480&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 12 VictoriaMetrics 浏览指标
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-13-指标浏览结果图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 13 指标浏览结果图&#34; srcset=&#34;
               /blog/victoriametrics/18_hu_57a3f09e2437cade.webp 400w,
               /blog/victoriametrics/18_hu_8c621a19a7a1e5aa.webp 760w,
               /blog/victoriametrics/18_hu_eed5addb668e8bf2.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/victoriametrics/18_hu_57a3f09e2437cade.webp&#34;
               width=&#34;760&#34;
               height=&#34;406&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 13 指标浏览结果图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从图 13 中可以观察到，跟 Promethus 相同，我们同样可以正常的从 VictoriaMetrics 获取该指标的结果数据（图中红框部分，多出一条数据是因为图 5 部署的 Promethus 有两个容器组），如官方所说 VictoriaMetrics 可以兼容 Prometheus，并作为一个及其良好的替换方案。&lt;/p&gt;
&lt;p&gt;生产环境中，开启 Prometheus 的 remote_write 功能，会导致 Prometheus 占用主机资源增加，若没有告警的需求，我们可以把图 3 的 Prometheus 进行精简，直接让 VictoriaMetrics 使用之前 Prometheus 的配置，让各个 exporter 直接对接到 VictoriaMetrics。&lt;/p&gt;
&lt;p&gt;对于有告警需求的场景，我们可以使用 vmagent 替代图 3 中 Prometheus 的角色，部署完整的 5 个组件进行 Prometheus 告警系统的替换。VictoriaMetrics 官方也提供了类似 kube-prometheus 的项目 vm-operator，它不但能够帮助我们管理 VictoriaMetrics 的相关规则配置，而且能够识别 kube-prometheus 中 servicemonitor、podmonitor 等 CRD 资源。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;VictoriaMetrics 作为近两年新兴流行的时序数据库和监控解决方案，很好的对 Prometheus 性能和缺点就行了提升和补充，它能够兼容原先 Prometheus 监控方案进行指标的长久存储也能快速替换升级 Prometheus 的监控系统，可作为我们搭建系统监控模块的另一种比较好的选择。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qihoo_tech/article/details/120558834&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VictoriaMetrics 入门与实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VictoriaMetircs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>彻底搞懂 Kubernetes 中的认证</title>
      <link>https://cloudnativecn.com/blog/authentication-k8s/</link>
      <pubDate>Thu, 15 Sep 2022 12:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/authentication-k8s/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;本文首先介绍了 K8s 的访问控制过程，并对 K8s 认证的用户模型进行讲解。最后对认证过程中的用户证书认证以及 Service Account Token 认证进行举例剖析。&lt;/p&gt;
&lt;h2 id=&#34;k8s-api-请求访问控制的过程&#34;&gt;K8s API 请求访问控制的过程&lt;/h2&gt;
&lt;p&gt;我们知道，不论是通过 kubectl 客户端还是 REST 请求访问 K8s 集群，最终都需要经过 API Server 来进行资源的操作，生效结果会被持久化至 etcd 中，etcd 中的数据安全就变得十分重要。为了保证 etcd 的安全性，K8s 只允许 API Server 去访问操作 etcd，此时 API Server 就担负起了整个 etcd 的安全。那么 K8s 是如何管控和保障 API Server 访问过程的安全的呢？&lt;/p&gt;
&lt;p&gt;如下图 1 所示，整个过程可以分为 4 个阶段&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1-k8s-api-请求访问过程&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 1 K8s API 请求访问过程&#34; srcset=&#34;
               /blog/authentication-k8s/1_hu_32c3a80fd4c1950d.webp 400w,
               /blog/authentication-k8s/1_hu_8f52402b555a5f2d.webp 760w,
               /blog/authentication-k8s/1_hu_a048bc9829910630.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/1_hu_32c3a80fd4c1950d.webp&#34;
               width=&#34;525&#34;
               height=&#34;295&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1 K8s API 请求访问过程
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;整体过程简述：请求发起方进行 K8s API 请求，经过 Authentication（认证）、Authorization（鉴权）、AdmissionControl（准入控制）三个阶段的校验，最后把请求转化为对 K8s 对象的变更操作持久化至 etcd 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;认证阶段&lt;/strong&gt;。当请求发起方建立与 API Server 的安全连接后，进入请求的认证阶段（图中步骤 1）。认证的方式主要有：客户端证书、密码、普通 token、bootstrap token 和 JWT 认证 (主要用于 Service Account)。认证模块会检查请求头或者客户端证书的内容，我们可以同时配置一种或几种方式对请求进行认证。多种认证方式会被依次执行，只要一种方式通过，请求便得到合法认证。当所有方式都未通过时，会返回 401 状态码并中断请求。认证解决的问题是校验访问方是否合法并识别其身份。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;鉴权阶段&lt;/strong&gt;。K8s API 访问请求必须包括请求者的用户名、请求的操作以及操作对象，该阶段就是对用户的操作合法性进行校验。如果现有策略声明用户具有完成请求操作的权限，则对请求进行授权。K8s 支持 ABAC 模式、RBAC 模式、Webhook 模式等多种授权模块。同样的，当多个授权模块被配置时，请求只要满足其中任意一种授权规则便会被放行，反之，API Server 会返回 403 状态码并终止该请求。鉴权是为了判别用户的操作权限范围。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准入控制阶段&lt;/strong&gt;。准入控制是请求操作被持久化到 etcd 之前的“拦截器”。准入控制模块由多个“准入控制器”构成，“准入控制器”就是一段自定义代码，它们能够在请求对 K8s 创建、修改、删除或者连接一个 K8s 对象时生效。官方自带了 30 多个准入控制器可供使用，同时支持用户扩展。准入控制器的作用往往是检查请求的规范性或者赋予一些默认信息。例如，我们在创建一个 pod 时，准入控制器会检查提交的信息是否符合 pod 资源的规范，并对请求中没有明确规定的字段，设置对应的默认值填充到请求中。与前两个阶段不同的是，只要有一个“准入校验”逻辑未通过，那么请求就会被拒绝。若请求仅仅是读取一个对象，“准入控制器”将不会生效。准入控制作用于 K8s 中的对象，通过校验规范和默认值的设置，能够保证系统的安全可靠。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持久化阶段&lt;/strong&gt;。当我们的请求通过了前面三个阶段的校验，它会被转换为一个 K8s 对象相应的变更请求，最终持久化到 etcd 中。&lt;/p&gt;
&lt;p&gt;需要注意的是，认证授权过程只存在 HTTPS 形式的 API 中。即是说，客户端使用 HTTP 连接到 API Server，是不会进行认证授权的。但 API Server 的非安全认证端口 8080 已经在 v1.12 中废弃了，全面使用了 HTTPS。接下来让我们来详细了解下 K8s 的认证。&lt;/p&gt;
&lt;h2 id=&#34;k8s-的用户模型&#34;&gt;K8s 的用户模型&lt;/h2&gt;
&lt;p&gt;从图 1 中我们可以看出，K8s 的用户主要分为两类：通过客户端进行连接的人类操作者和 K8s 内诸如进程、控制器等非人类操作的客户端。我们称前者为 Normal Users（常规用户），后者为 Service Account（服务账户）。因为 K8s 内没有为 Normal Users 定义存储对象，我们无法像操作 pod 一样在 K8s 内部管理这类用户，它们通常是由外部服务进行管理，借由证书凭证或者静态配置文件进行认证。而 Service Account 可由 K8s API 直接进行管理。&lt;/p&gt;
&lt;p&gt;下表给出了其主要区别：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类目&lt;/th&gt;
          &lt;th&gt;Normal Users&lt;/th&gt;
          &lt;th&gt;Service Account&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;针对对象&lt;/td&gt;
          &lt;td&gt;人类用户&lt;/td&gt;
          &lt;td&gt;进程&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;范围&lt;/td&gt;
          &lt;td&gt;全 cluster 唯一&lt;/td&gt;
          &lt;td&gt;namespace&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;设计目的&lt;/td&gt;
          &lt;td&gt;与企业数据库同步，在用户级别进行操作权限的控制&lt;/td&gt;
          &lt;td&gt;更轻量化，在任务进程级别进行管控&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;主要认证方法&lt;/td&gt;
          &lt;td&gt;Basic 认证、X509 证书认证&lt;/td&gt;
          &lt;td&gt;Service Account token 认证&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;例子&lt;/td&gt;
          &lt;td&gt;我们使用 kubectl 操作客户端，K8s 是把我们映射成 kubectl 所使用客户端证书中 CN 字段所对应的信息，而不是真正你身份证上的信息&lt;/td&gt;
          &lt;td&gt;Pod 等通过 API Server 从 etcd 中检索和更新自身状态时，API Server 对其进行身份认证，只有通过校验的 pod 才能获取信息&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们可以一次性启用多种认证方式，但通常应该至少包含以下两方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;针对于 Service Account 的 token 方式；&lt;/li&gt;
&lt;li&gt;至少一种用于 Normal Users 身份验证的其他方式。
通过认证的用户会被包含在名为 system：authenticated 的 group 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;basic-认证&#34;&gt;Basic 认证&lt;/h2&gt;
&lt;p&gt;认证方法是管理员将 password、user、uid、group 信息加入到 csv 格式的静态文件中，并在 API Server 启动时使用参数&amp;ndash;Basic-authfile={文件路径}，指定使用的凭证文件。之后，认证凭证就将一直有效，只有在重启 API Server 时才能修改密码。凭证文件中的数据示例如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;password,user,uid,&amp;#34;group1,group2,group3&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，当一个 user 对应多个组，多个 group 之间需要用逗号分隔并且使用双引号。&lt;/p&gt;
&lt;p&gt;客户端请求时，需要在头部加入 Basic BASE64ENCODED(USER:PASSWORD)，服务端会校验用户名和密码。该方式使用简单，但是因为用户名和密码使用明文，用户名和密码修改必须重启服务，十分不灵活，一般只用于测试场景。&lt;/p&gt;
&lt;h2 id=&#34;x509-证书认证&#34;&gt;X509 证书认证&lt;/h2&gt;
&lt;p&gt;本文我们假设读者已经了解数字证书和 CA 的基本原理，若不了解可以先阅读下这篇文章&lt;a href=&#34;https://www.zhaohuabing.com/post/2020-03-19-pki/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《数字证书原理》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;K8s 中组件之间通信，证书的验证是在协议层通过 TLS 完成的，TLS 验证分为 2 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器单向认证：服务器端持有证书证明自己身份，用于服务端不关心客户端身份而客户端需要确认服务器身份的场景。例如火车票购票网站，我们必须保证其是官方而非恶意服务器，但网站允许任何客户端进行连接访问；&lt;/li&gt;
&lt;li&gt;双向 TLS 认证：双方都要持有证书，并验证对方证书确认身份。一般用于服务端持有信息比较敏感，只有特定客户端才能访问的场景。例如：K8s 内组件提供的接口往往包含集群内部信息，若被非法访问会影响整体安全，所以 K8s 内部组件之间都是双向 TLS 认证。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;双向认证的简化过程如下图 2 所示&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2-双向-tls-过程&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 2 双向 TLS 过程&#34; srcset=&#34;
               /blog/authentication-k8s/2_hu_f7ed58799dedc4f0.webp 400w,
               /blog/authentication-k8s/2_hu_60905c5a8d0ce07f.webp 760w,
               /blog/authentication-k8s/2_hu_37854697dc888679.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/2_hu_f7ed58799dedc4f0.webp&#34;
               width=&#34;760&#34;
               height=&#34;309&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2 双向 TLS 过程
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当两个组件进行双向 TLS 认证时，会涉及到下表中的相关文件：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;名称&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
          &lt;th&gt;例子&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;服务端证书&lt;/td&gt;
          &lt;td&gt;包含服务端公钥和服务端身份信息&lt;/td&gt;
          &lt;td&gt;通过根证书手动或者 kubeadm 自动生成的 API Server 服务端证书文件 apiserver.crt&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;服务器私钥&lt;/td&gt;
          &lt;td&gt;主要用于 TLS 认证时进行数字签名，证明自己是服务端证书的拥有者&lt;/td&gt;
          &lt;td&gt;通过根证书手动或者 kubeadm 生成的 API Server 服务端私钥文件 apiserver.key&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;客户端证书&lt;/td&gt;
          &lt;td&gt;包含客户端公钥和客户端身份信息&lt;/td&gt;
          &lt;td&gt;由同一个 CA 根证书签发的.crt 文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;客户端私钥&lt;/td&gt;
          &lt;td&gt;主要用于 TLS 认证时进行数字签名，证明自己是客户端证书的拥有者&lt;/td&gt;
          &lt;td&gt;由同一个 CA 根证书签发的.key 文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;服务端 CA 根证书&lt;/td&gt;
          &lt;td&gt;签发服务端证书的 CA 根证书&lt;/td&gt;
          &lt;td&gt;通过 openssl 等工具生成的 ca.crt 文件，并在服务端启动时进行指定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;客户端 CA 根证书&lt;/td&gt;
          &lt;td&gt;签发客户端证书的 CA 根证书&lt;/td&gt;
          &lt;td&gt;通过 openssl 等工具生成的 ca.crt 文件，并在客户端启动时进行指定 (一般与服务端使用一个)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下面我们用一个例子来演示证书签发并进行客户端配置的过程，演示的 K8s 环境已经存在 CA 根证书文件以及 API Server 文件，文件和目录情况如图 3 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-3-文件和目录情况图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 3 文件和目录情况图&#34; srcset=&#34;
               /blog/authentication-k8s/3_hu_82cc6d0b66dcea14.webp 400w,
               /blog/authentication-k8s/3_hu_51b69faf14c7c402.webp 760w,
               /blog/authentication-k8s/3_hu_18bcdccdf00d5872.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/3_hu_82cc6d0b66dcea14.webp&#34;
               width=&#34;760&#34;
               height=&#34;56&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3 文件和目录情况图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中 ca.crt 是我们使用的 CA 根证书，apiserver.crt 是我们 K8s API Server 的服务端证书文件，它由 ca.crt 根证书进行签发和配置，例子中 API Server 的启动参数如图 4 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-4-api-server-的启动配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 4 API Server 的启动配置&#34; srcset=&#34;
               /blog/authentication-k8s/4_hu_72892e2765a3fb3d.webp 400w,
               /blog/authentication-k8s/4_hu_498d577c8271fff8.webp 760w,
               /blog/authentication-k8s/4_hu_7533f3ba05600bd6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/4_hu_72892e2765a3fb3d.webp&#34;
               width=&#34;760&#34;
               height=&#34;752&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4 API Server 的启动配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;红框部分信息分别指明了 API Server 所使用的 CA 根证书、服务端证书和服务端私钥的路径。签发用户证书步骤如下 (以 openssl 工具为例):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成私钥&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5-生成用户私钥&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 5 生成用户私钥&#34; srcset=&#34;
               /blog/authentication-k8s/5_hu_45ac0b0a7178ce93.webp 400w,
               /blog/authentication-k8s/5_hu_125ecc818d907f1f.webp 760w,
               /blog/authentication-k8s/5_hu_88b594bdb81e56dd.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/5_hu_45ac0b0a7178ce93.webp&#34;
               width=&#34;760&#34;
               height=&#34;122&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5 生成用户私钥
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;使用私钥为用户生成签署请求文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-6-生成签署请求文件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 6 生成签署请求文件&#34; srcset=&#34;
               /blog/authentication-k8s/6_hu_39bb88f66e117c.webp 400w,
               /blog/authentication-k8s/6_hu_d8a3e2972ca65cee.webp 760w,
               /blog/authentication-k8s/6_hu_725d267d597821ae.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/6_hu_39bb88f66e117c.webp&#34;
               width=&#34;760&#34;
               height=&#34;57&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6 生成签署请求文件
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;命令中指定的 CN 是 Common Name 的缩写，代表最终生成客户端证书认证通过后在 K8s 内被识别的用户名，O 是 Organization 的缩写，代表被识别用户所属的组。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;使用服务端信任的 CA 其签署证书&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-7-签署证书&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 7 签署证书&#34; srcset=&#34;
               /blog/authentication-k8s/7_hu_dd0922892dc87150.webp 400w,
               /blog/authentication-k8s/7_hu_bb34c030171ae556.webp 760w,
               /blog/authentication-k8s/7_hu_5fa4c7ad33bfb8e2.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/7_hu_dd0922892dc87150.webp&#34;
               width=&#34;760&#34;
               height=&#34;90&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7 签署证书
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;至此，一个客户端证书便签发完毕了。我们可以查看其中的内容：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-8-my-usercrt&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 8 my-user.crt&#34; srcset=&#34;
               /blog/authentication-k8s/8_hu_99e758c745bbe638.webp 400w,
               /blog/authentication-k8s/8_hu_4fcb0acda7ce6897.webp 760w,
               /blog/authentication-k8s/8_hu_5c4fa3cc6f9e700.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/8_hu_99e758c745bbe638.webp&#34;
               width=&#34;760&#34;
               height=&#34;335&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 8 my-user.crt
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中 CN 和 O 的信息即来自步骤 2 所输入，K8s 通过这两个信息确定访问用户的信息，示意图如 9 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-9-用户信息认证示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 9 用户信息认证示意图&#34; srcset=&#34;
               /blog/authentication-k8s/9_hu_b83668f83d838133.webp 400w,
               /blog/authentication-k8s/9_hu_30d564dd1c5171f7.webp 760w,
               /blog/authentication-k8s/9_hu_d40a748f0a9b218c.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/9_hu_b83668f83d838133.webp&#34;
               width=&#34;653&#34;
               height=&#34;263&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 9 用户信息认证示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;那么如何配置客户端才能使用这个证书呢？K8s 的每个客户端（例如：kubectl）都有一个配置文件用来记录客户端证书验证相关信息，我们称为 kubeconfig。K8s 中的每个组件都有一个这样的配置文件来关联集群、用户以及证书的情况，我们以 kubectl 为例，来说明如何使用 kubeconfig：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看当前 kubectl 的配置文件内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认情况下，kubectl 命令从$HOME/.kube 目录下查找一个名字叫做 config 的文件作为 kubeconfig，我们也可以用命令&lt;code&gt;kubectl config view&lt;/code&gt;来列出相关配置内容，结果如图 10 所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-10-kubectl-config-view-结果图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 10 kubectl config view 结果图&#34; srcset=&#34;
               /blog/authentication-k8s/10_hu_990cd9351bbbe7e7.webp 400w,
               /blog/authentication-k8s/10_hu_7caf47916798789b.webp 760w,
               /blog/authentication-k8s/10_hu_97cdc35fc778b654.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/10_hu_990cd9351bbbe7e7.webp&#34;
               width=&#34;578&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 10 kubectl config view 结果图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clusters: 集群列表。包含访问 API Server 的 URL、认证信息、名称等；&lt;/li&gt;
&lt;li&gt;contexts: kubectl 的可用上下文列表，标明了用户和集群的使用映射关系；&lt;/li&gt;
&lt;li&gt;users: 用户列表，包含访问 API Server 时的客户端证书信息、私钥以及名称；&lt;/li&gt;
&lt;li&gt;current-context: kubectl 当前使用的上下文名称，即上下文列表中的某个特定项名称。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubectl 配置 kubeconfig 后与集群进行交互时的整体结构如图 11 所示&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-11-kubectl-交互整体结构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 11 kubectl 交互整体结构图&#34; srcset=&#34;
               /blog/authentication-k8s/11_hu_d313d51a4c4b4104.webp 400w,
               /blog/authentication-k8s/11_hu_edaad1f96d8074f6.webp 760w,
               /blog/authentication-k8s/11_hu_58ff116b8ba19922.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/11_hu_d313d51a4c4b4104.webp&#34;
               width=&#34;721&#34;
               height=&#34;501&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 11 kubectl 交互整体结构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;建立用户和证书的关系&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-12-建立用户证书关系&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 12 建立用户证书关系&#34; srcset=&#34;
               /blog/authentication-k8s/12_hu_16075923040b081e.webp 400w,
               /blog/authentication-k8s/12_hu_87d7a8ffe326190b.webp 760w,
               /blog/authentication-k8s/12_hu_8eb6e430c2401303.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/12_hu_16075923040b081e.webp&#34;
               width=&#34;760&#34;
               height=&#34;88&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 12 建立用户证书关系
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;再次使用&lt;code&gt;kubectl config view&lt;/code&gt;查看配置可以发现多了一个 user 的配置项&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-13-新增的用户配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 13 新增的用户配置&#34; srcset=&#34;
               /blog/authentication-k8s/13_hu_2d98e51d5202cc8d.webp 400w,
               /blog/authentication-k8s/13_hu_6b80c10a6d73dbf8.webp 760w,
               /blog/authentication-k8s/13_hu_66dcb1f2e90c67a5.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/13_hu_2d98e51d5202cc8d.webp&#34;
               width=&#34;706&#34;
               height=&#34;540&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 13 新增的用户配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;把集群信息和用户信息进行关联&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-14-关联集群和用户信息&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 14 关联集群和用户信息&#34; srcset=&#34;
               /blog/authentication-k8s/14_hu_bc530788589425c3.webp 400w,
               /blog/authentication-k8s/14_hu_f5fdf98a3d20fc50.webp 760w,
               /blog/authentication-k8s/14_hu_68f318e4efbb3898.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/14_hu_bc530788589425c3.webp&#34;
               width=&#34;760&#34;
               height=&#34;173&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 14 关联集群和用户信息
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图 15 演示首先由默认的 context 中管理员权限的证书查看 pods 的情况，接着切换到我们新添加的 chris 用户再查看 default 空间下 pods 的情况对比：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-15-上下文切换使用对比&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 15 上下文切换使用对比&#34; srcset=&#34;
               /blog/authentication-k8s/15_hu_a34772fa2fb5fa2.webp 400w,
               /blog/authentication-k8s/15_hu_5c3d94d6787ec30c.webp 760w,
               /blog/authentication-k8s/15_hu_57e8d297eec0bead.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/15_hu_a34772fa2fb5fa2.webp&#34;
               width=&#34;760&#34;
               height=&#34;328&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 15 上下文切换使用对比
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们发现，开始我们使用 Kubernetes-admin99 用户能够正常查询 defaut 下的 pod 信息，但切换到上下文 chris@cluster99 后，访问被阻止了，但是用户没有认证失败，chris 用户被正确识别了。这是因为我们虽然通过了认证阶段，但是在第二阶段（鉴权阶段），我们并没有为 chris 用户添加相应的操作权限导致（权限控制部分我们讲解），至此对于用户的认证已经生效。&lt;/p&gt;
&lt;p&gt;使用 x509 证书认证相对 Basic 认证来说显然会更安全，只要证书不泄露，便可认为是安全的。但目前却没有便捷的方案注销证书，若使用证书轮转，则需要重新办法所有证书。所以使用 x509 证书认证适用于 Kubernetes 内部组件之间认证，普通用户认证并不推荐通过证书的形式进行认证。&lt;/p&gt;
&lt;p&gt;图 16 列出了 K8s 中各个主要组件证书的使用情况&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-16-k8s-主要组件证书使用情况&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 16 K8s 主要组件证书使用情况&#34; srcset=&#34;
               /blog/authentication-k8s/16_hu_a88e6916261b9934.webp 400w,
               /blog/authentication-k8s/16_hu_f4880ffa363e0623.webp 760w,
               /blog/authentication-k8s/16_hu_69726f6d5eb77a9a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/16_hu_a88e6916261b9934.webp&#34;
               width=&#34;658&#34;
               height=&#34;391&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 16 K8s 主要组件证书使用情况
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中 kubelet 即作为服务端为 API Server 提供主机运行情况，同时又作为客户端从 API Server 中获取信息所以既存在客户端证书又存在服务端证书，API Server 同理，其他组件只作为客户端从 API Server 中获取信息，所以拥有客户端证书即可。&lt;/p&gt;
&lt;h2 id=&#34;service-account-token-认证&#34;&gt;Service Account token 认证&lt;/h2&gt;
&lt;p&gt;Service Account 是 K8s 中唯一能够通过 API 自己管理的实体账号。它主要用于 Pod 访问 API Server。每个 namespace 创建的时候，K8s 会自动在这个 namespace 下面创建一个默认的 Service Account 和对应的 secret 实例，该 Service Account 只能访问这个 namespace 的资源。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-17-default-空间下的-service-account-和其对应的-secret&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 17 default 空间下的 Service Account 和其对应的 secret&#34; srcset=&#34;
               /blog/authentication-k8s/17_hu_c6fd9f8b471af217.webp 400w,
               /blog/authentication-k8s/17_hu_d0a6bd45c8cd5bf0.webp 760w,
               /blog/authentication-k8s/17_hu_7508e9f59ae6dc17.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/17_hu_c6fd9f8b471af217.webp&#34;
               width=&#34;760&#34;
               height=&#34;293&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 17 default 空间下的 Service Account 和其对应的 secret
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Service Account 包含了 namespace、token 和 ca 三部分内容，通过 base64 编码保存于对应的 secret 中。namespace 指定了 Pod 所属的 namespace，ca 用于生成和验证 token，token 用作身份验证。三者都通过 mount 的方式挂载在 pod 文件系统的目录 /var/run/secrets/kubernetes.io/serviceaccount/下。若创建的pod未自己指定Service Account，K8s 会为其绑定默认的 Service Account。图 18、图 19 和图 20 展示了上述内容。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-18-service-account-对应-secret-内容&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 18 Service Account 对应 secret 内容&#34; srcset=&#34;
               /blog/authentication-k8s/18_hu_a2c3a99175d614a3.webp 400w,
               /blog/authentication-k8s/18_hu_6d05421a54966e71.webp 760w,
               /blog/authentication-k8s/18_hu_56c11b02b47a353c.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/18_hu_a2c3a99175d614a3.webp&#34;
               width=&#34;760&#34;
               height=&#34;211&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 18 Service Account 对应 secret 内容
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-19-default-空间下的-pod-绑定默认-service-account&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 19 default 空间下的 pod 绑定默认 Service Account&#34; srcset=&#34;
               /blog/authentication-k8s/19_hu_952ebf87868c52bd.webp 400w,
               /blog/authentication-k8s/19_hu_fc9a00fa65b5191.webp 760w,
               /blog/authentication-k8s/19_hu_691a9ac4a96a765e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/19_hu_952ebf87868c52bd.webp&#34;
               width=&#34;760&#34;
               height=&#34;523&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 19 default 空间下的 pod 绑定默认 Service Account
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-20-挂载目录下的内容&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 20 挂载目录下的内容&#34; srcset=&#34;
               /blog/authentication-k8s/20_hu_7943c134a0559ff8.webp 400w,
               /blog/authentication-k8s/20_hu_dc90128e56ebfc1.webp 760w,
               /blog/authentication-k8s/20_hu_8207a5bde8ef1f1.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/20_hu_7943c134a0559ff8.webp&#34;
               width=&#34;760&#34;
               height=&#34;165&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 20 挂载目录下的内容
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当为一个 Pod 指定了 Service Account 后，K8s 会为这个 Service Account 生成一个 JWT（JSON Web Token），并使用 secret 将该 token 加载到 pod 上。JWT 认证机制的原理也是通过 CA 根证书进行签名和公私钥校验 token。其中公钥和私钥分别被配置到了 API Server 和 Controller-Manager 的命令行参数中。如图 21 和图 22 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-21-部分-api-server-启动参数&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 21 部分 API Server 启动参数）&#34; srcset=&#34;
               /blog/authentication-k8s/21_hu_22c24119d133952b.webp 400w,
               /blog/authentication-k8s/21_hu_74a1c5ba6b991501.webp 760w,
               /blog/authentication-k8s/21_hu_c0f115dc13d384d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/21_hu_22c24119d133952b.webp&#34;
               width=&#34;749&#34;
               height=&#34;84&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 21 部分 API Server 启动参数）
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-22-部分-controller-manager-启动参数&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 22 部分 Controller-Manager 启动参数&#34; srcset=&#34;
               /blog/authentication-k8s/22_hu_9aaa0344aa5c59eb.webp 400w,
               /blog/authentication-k8s/22_hu_7f0642ce0a3f761.webp 760w,
               /blog/authentication-k8s/22_hu_d57871280f530e42.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/22_hu_9aaa0344aa5c59eb.webp&#34;
               width=&#34;760&#34;
               height=&#34;55&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 22 部分 Controller-Manager 启动参数
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;之后 Pod 便可使用 token 来访问 API Server 了。API Server 再验证对应 token 信息，就能知道这个 token 是对应 Service Account，最后识别到对应 Service Account 的权限。图 23 展示了 K8s 使用和验证 Service Account Token 的过程。图片来源于文章：https://cloudnative.to/blog/k8s-certificate/#kube-apiserver-%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-23-service-accounttoken-的使用和验证过程&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 23 Service AccountToken 的使用和验证过程&#34; srcset=&#34;
               /blog/authentication-k8s/23_hu_8a3117d4b0dc580c.webp 400w,
               /blog/authentication-k8s/23_hu_e8200de7de1b27ef.webp 760w,
               /blog/authentication-k8s/23_hu_f513263262d35158.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/23_hu_8a3117d4b0dc580c.webp&#34;
               width=&#34;760&#34;
               height=&#34;462&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 23 Service AccountToken 的使用和验证过程
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;与创建 namespace 创建 defalut 类似，若我们通过 K8s API 的方式创建 Service Account，它一样会创建对应的 secret。当 Pod 使用该 Service Account 的 token 去 API Server 认证，API Server 一样可以识别 Token 对应的 Service Account 从而通过认证（与证书认证相同的是若没有进行授权，一样无法通过鉴权阶段）。如图 24 和图 25 所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-24-手动创建-service-account&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 24 手动创建 Service Account&#34; srcset=&#34;
               /blog/authentication-k8s/24_hu_8b106241459edccc.webp 400w,
               /blog/authentication-k8s/24_hu_c3f2276fbfd5f6d1.webp 760w,
               /blog/authentication-k8s/24_hu_985daff134f2ac36.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/24_hu_8b106241459edccc.webp&#34;
               width=&#34;760&#34;
               height=&#34;527&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 24 手动创建 Service Account
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-25-查看验证创建-service-account-对应-secret&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 25 查看验证创建 Service Account 对应 secret&#34; srcset=&#34;
               /blog/authentication-k8s/25_hu_205a773fce552b8e.webp 400w,
               /blog/authentication-k8s/25_hu_f73088bcc1248efc.webp 760w,
               /blog/authentication-k8s/25_hu_f6053f23f827af3b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/authentication-k8s/25_hu_205a773fce552b8e.webp&#34;
               width=&#34;760&#34;
               height=&#34;314&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 25 查看验证创建 Service Account 对应 secret
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;K8s 的访问控制有 4 个阶段，其中认证阶段的主要对象为 Normal Users 和 Service Account，单单通过认证并不能访问 API Server；&lt;/li&gt;
&lt;li&gt;X509 证书认证是 K8s 中针对用户的常用认证方式，其组件间只用了双向 TLS 的认证方式，若客户端需要访问 API Server 除了生成客户端证书同时还要配置对应的 kubeconfig；&lt;/li&gt;
&lt;li&gt;Service Account Token 是 K8s 针对 Service Account 的主要认证方式，其认证原理是基于 JWT，其中的证书只用于验证 token，最后 API Service 对于 Service Account 的识别是基于传递给 API Service 的 token；&lt;/li&gt;
&lt;li&gt;Service Account 主要设计用于 K8s 内部，Pod 等进程是主要使用者，它是 K8s 唯一自主管理的认证标识，创建 Service Account 后会生成对应的 secret。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/2016079&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloud.tencent.com/developer/article/2016079&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javashuo.com/article/p-gocttrgh-ny.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.javashuo.com/article/p-gocttrgh-ny.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/k8s-certificate/#kube-apiserver-%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloudnative.to/blog/k8s-certificate/#kube-apiserver-%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/468010077&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zhuanlan.zhihu.com/p/468010077&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/authentication/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/reference/access-authn-authz/authentication/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
