<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flo Adam | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/flo-adam/</link>
      <atom:link href="https://cloudnativecn.com/author/flo-adam/index.xml" rel="self" type="application/rss+xml" />
    <description>Flo Adam</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnativecn.com/author/flo-adam/avatar_hu3801682002625739492.jpg</url>
      <title>Flo Adam</title>
      <link>https://cloudnativecn.com/author/flo-adam/</link>
    </image>
    
    <item>
      <title>服务网格是中间件的终结者吗？</title>
      <link>https://cloudnativecn.com/blog/does-the-service-mesh-spell-the-end-for-middleware/</link>
      <pubDate>Tue, 23 Oct 2018 14:19:51 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/does-the-service-mesh-spell-the-end-for-middleware/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://www.cloudops.com/2018/09/does-the-service-mesh-spell-the-end-for-middleware/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在 Istio 和相关技术持续获得增势之时，中间件在 Service Mesh 中的地位正在逐渐减弱。尽管它们都可以用来监管不同应用和服务之间的通信，但是在运维和范式方面却大不相同。在今天以容器为中心的世界里，面向服务的架构体系盛行，中间件会变得无关紧要吗？&lt;/p&gt;
&lt;h2 id=&#34;中间件&#34;&gt;中间件&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://searchmicroservices.techtarget.com/definition/middleware&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中间件&lt;/a&gt;将应用和它底层的数据库连接起来，因此常被称作“软件胶水”。它将客户端的网络请求连接到后端数据，通过将所有消息聚合到一个管道中来实现通信。中间件在这个管道中整合一些关键功能，包括安全验证、日志记录、路由、性能监控和消息转换。中间件以传统的方式整合面向服务架构（&lt;a href=&#34;https://searchmicroservices.techtarget.com/definition/service-oriented-architecture-SOA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SOA&lt;/a&gt;）应用的通信，后者由可复用的组件组成或者是一个单体应用。&lt;/p&gt;
&lt;p&gt;如下图所示，中间件的工作方式，是将不同应用的消息汇总到中心化的通信节点。然后将这些消息传递到一系列功能管道，直到“用户注册”服务。消息通过企业服务总线（ESB）进行传输。这种通信方式便于隐藏分布式系统的多样性、硬件和操作系统的差异性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-中间件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;中间件&#34; srcset=&#34;
               /blog/does-the-service-mesh-spell-the-end-for-middleware/006tNbRwgy1fwg4xtztzlj31kw13sk09_hu16442954149007821911.webp 400w,
               /blog/does-the-service-mesh-spell-the-end-for-middleware/006tNbRwgy1fwg4xtztzlj31kw13sk09_hu6326141742638348031.webp 760w,
               /blog/does-the-service-mesh-spell-the-end-for-middleware/006tNbRwgy1fwg4xtztzlj31kw13sk09_hu9555607231364152250.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/does-the-service-mesh-spell-the-end-for-middleware/006tNbRwgy1fwg4xtztzlj31kw13sk09_hu16442954149007821911.webp&#34;
               width=&#34;760&#34;
               height=&#34;531&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      中间件
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;随着企业组织持续拥抱容器化，传统中间件的一些问题开始变得愈加明显。DevOps 实践鼓励基于分布式系统的现代环境，以及快速、自动化部署的不可变实例。容器的持续集成和持续交付（CI/CD）要求不断地更新应用和工具，而 ESB 对比并不友好。&lt;/p&gt;
&lt;p&gt;单点故障（Single-points-of-failure）：中间件以服务日志级别，记录和监控所有服务的消息，并保存在一个巨大的、中心化的日志系统中。它针对所有的消息都执行特定的功能，特别是日志记录和性能监控。消息被排队处理，任何故障都可能导致管道拥堵。要发现一个问题，可能需要从上千个无关的潜在错误中进行筛选。中间件实现通信的方式，有可能在记录服务日志时发生单点故障，一个小问题就能中断所有的通信。&lt;/p&gt;
&lt;p&gt;单体应用（Monolithic）：尽管 SOA 由松耦合、可复用的组件组成，中间件的统一管道难以为之做出调整。中间件所整合的功能与它们自身和周围的应用紧密集成在一起，UI 上的小变化甚至需要重新评估整个应用。中间件提供了一种通用的通信方式，在这方面它是有效的，但是这需要创建隔离网络的命令式编程。&lt;/p&gt;
&lt;p&gt;容器化和虚拟化大大增加了应用中部署的实例数量，这也增加了发生单点故障时的拥堵风险，并且需要更加动态的变化。服务网格方案，如 Istio、Ambassador 和 Envoy，正越来越多地被视为替代方案。&lt;/p&gt;
&lt;h2 id=&#34;服务网格&#34;&gt;服务网格&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://containerjournal.com/2018/07/27/introducing-a-security-mesh-to-protect-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格&lt;/a&gt;是一个位于服务层之上的专用网络层，用于服务间通信。它的通信管道基于分布式 APIs，而不是中心化、离散化的应用。&lt;/p&gt;
&lt;p&gt;消息在服务网格内传输，但是消息传递功能在接收消息的服务旁侧执行，每个实例被附加了一个用于在服务网格中来回传递消息的代理。这些代理执行一些传统上由中间件执行的功能，比如消息路由、消息阻塞、服务发现、负载均衡、加解密、认证和授权。此外，它们也支持错误处理、熔断、请求追踪等特性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-中间件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;中间件&#34; srcset=&#34;
               /blog/does-the-service-mesh-spell-the-end-for-middleware/006tNbRwgy1fwg4xah8wdj31kw104nlp_hu2063682781918753547.webp 400w,
               /blog/does-the-service-mesh-spell-the-end-for-middleware/006tNbRwgy1fwg4xah8wdj31kw104nlp_hu17482092706813738652.webp 760w,
               /blog/does-the-service-mesh-spell-the-end-for-middleware/006tNbRwgy1fwg4xah8wdj31kw104nlp_hu1685402015191345524.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/does-the-service-mesh-spell-the-end-for-middleware/006tNbRwgy1fwg4xah8wdj31kw104nlp_hu2063682781918753547.webp&#34;
               width=&#34;760&#34;
               height=&#34;483&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      中间件
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;服务网格允许在服务间直接发送消息，而不再通过中间管道。这使得应用的消息传递跟它的服务耦合在一起，而这在大多数中心化应用中是松耦合的。服务网格分布式的特性减轻了单点故障的依赖，并促进了动态变化。&lt;/p&gt;
&lt;p&gt;容器化：服务网格在许多方面都是容器化的理想选择。它们是平台无关的，并且可以被集成到任何基于容器的体系架构中。它们消除了单点故障，可以从网络故障或服务故障中快速恢复。通过消息分发，它们使得容器化的可伸缩性和声明式编程更加容易。&lt;strong&gt;&lt;a href=&#34;https://devcentral.f5.com/articles/how-containers-scale-service-mesh-versus-traditional-architecture-27705&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格支持容器化朝着高度易变的环境发展&lt;/a&gt;。基于这些原因，产生了越来越多的决策，使用诸如 Istio 之类的工具，将中间件的计算能力带入到 Kubernetes 和基于容器的系统。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cloudops.com/tag/istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;是一个可以提供对服务网格的操作控制和行为洞察力的解决方案。它基于 Envoy 代理而构建。ELK、Kibana 和 EFK 可以为 Istio 提供可观察性和可监控性。&lt;/p&gt;
&lt;h2 id=&#34;中间件的终结&#34;&gt;中间件的终结？&lt;/h2&gt;
&lt;p&gt;随着服务网格越来越多的被采纳，它们发展的非常迅速。最近，Istio 发布了 1.0 版本，表明服务网络正变得更加稳定和安全。Envoy 已经加入云原生计算基金会（&lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt;），Istio 也正在计划加入。服务网格解决方案正在发展成为蒸蒸日上的云原生生态系统，并且被用于云原生应用。&lt;/p&gt;
&lt;p&gt;但是，有些确定的用例场景仍然得益于稳定而安全的中间件。中间件已经存在了数十年，知道如何操作它的人比知道如何操作服务网格的人更多。另外，已经有些长期存在的、被证实过的措施用于确保中间件的安全性，并遵守相关规范，如 HIPPA、PIPEDA 和 PCI DSS。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.christianposta.com/how-a-service-mesh-can-help-with-microservices-security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格正在迅速地变得更加安全&lt;/a&gt;，但是容器安全与虚机安全有着不同的思维。除此之外，它依赖于将运维过程集成到开发阶段。在整个技术栈的实施过程中，DevOps 实践促进了应用的安全、敏捷和长期演化。在实施 DevOps 方法论和相关流程的过程中，云原生工具已经成功起到了显著作用。&lt;/p&gt;
&lt;p&gt;**如果组织架构希望使用服务网格替代某些中间件，则必须重新评估其组织流程和方法论。**尽管服务网格有助于多个容器间的通信，中间件仍然是单体应用间消息传递的理想选择。它们构建在不同的范例中，组织机构可能不得不从根本上改变他们构建应用和基础设施的方式，并且支持做出变化。&lt;/p&gt;
&lt;p&gt;在 DevOps 工具和实践框架落实到位之前，组织机构并不能撤下部分遗留中间件。这将促进技术栈的基础设施（如代码、服务、安全性、监控和 CI/CD）之间的动态协同。应用的中间件或者服务网格必须反映它们之间进行通信的组件。&lt;/p&gt;
&lt;p&gt;DevOps 转型将有助于确保组织的文化和决策过程与其使用工具进行创新的速度保持一致。联系我们，[了解如何改变、支持和发展您的 DevOps 和云原生实践。](mailto: &lt;a href=&#34;mailto:info@cloudops.com&#34;&gt;info@cloudops.com&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
