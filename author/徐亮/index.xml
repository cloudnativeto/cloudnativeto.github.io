<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>徐亮 | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/%E5%BE%90%E4%BA%AE/</link>
      <atom:link href="https://cloudnative.to/author/%E5%BE%90%E4%BA%AE/index.xml" rel="self" type="application/rss+xml" />
    <description>徐亮</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 14 Jun 2018 10:43:16 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/author/%E5%BE%90%E4%BA%AE/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>徐亮</title>
      <link>https://cloudnative.to/author/%E5%BE%90%E4%BA%AE/</link>
    </image>
    
    <item>
      <title>轻量 Service Mesh 在 Ucloud 的实践</title>
      <link>https://cloudnative.to/blog/lightweight-service-mesh-practice-in-ucloud/</link>
      <pubDate>Thu, 14 Jun 2018 10:43:16 +0800</pubDate>
      <guid>https://cloudnative.to/blog/lightweight-service-mesh-practice-in-ucloud/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;UCloud 作为一家 To B 的公有云服务商，我们的 CTO 莫显峰经常说：“研发团队最首要的任务是提供稳定的服务，然后才是提供符合客户需求的、易用和低成本的产品”。但事实是，在提供稳定云服务的同时，面对快速发展的客户业务场景，我们还需要不断“拥抱变化”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Max Kanat-Alexander 在《简约之美：软件设计之道》（Code Simplicity）中提出的软件设计的 6 条法则恰到好处的描述了这一矛盾的事实，具体内容如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件的目的是帮助他人；&lt;/li&gt;
&lt;li&gt;相比降低开发成本，更重要的是降低维护成本；&lt;/li&gt;
&lt;li&gt;变化定律：软件存在的时间越久，它的某部分需要变化的可能性越大；&lt;/li&gt;
&lt;li&gt;缺陷定律：软件出现缺陷的可能性，正比于你对它所做修改的程度；&lt;/li&gt;
&lt;li&gt;简洁定律：软件任一部分的维护难度，正比于该部分的复杂程度；&lt;/li&gt;
&lt;li&gt;测试定律：你对软件行为的了解程度，等于你真正测试它的程度。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正像法则 1、3、4 和 6 所说的软件的目的就是满足客户的需求，而随着时间的推移，用户需求总会改变；伴随着用户需求的改变，软件也需要适应新的需求而做修改，修改必然会引入缺陷；如果要排除缺陷就必须进行测试。&lt;/p&gt;
&lt;p&gt;但目前软件行业的现状大部分面临这样的问题，即无论花多大的成本去测试，真正的用户行为背后的需求总是不可能被完全满足的，缺陷总是会有的，这时我们最后的安全网就是“灰度发布”（又名“金丝雀发布”）。在采用用户真实行为作为终极测试的同时，通过控制变更范围尽可能的减少风险；一旦真的有缺陷可以快速回滚，尽可能以最大程度降低影响。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-金丝雀&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;金丝雀&#34; srcset=&#34;
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaihrzqrjj30fo0hwgwj_hu08f7c6eaf70b64e475e92e4c91a4ce76_64179_2991cf8d765ac50e4f82e63f708ef5ed.webp 400w,
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaihrzqrjj30fo0hwgwj_hu08f7c6eaf70b64e475e92e4c91a4ce76_64179_b08523674f4bed9397cb06e025ab7a10.webp 760w,
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaihrzqrjj30fo0hwgwj_hu08f7c6eaf70b64e475e92e4c91a4ce76_64179_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaihrzqrjj30fo0hwgwj_hu08f7c6eaf70b64e475e92e4c91a4ce76_64179_2991cf8d765ac50e4f82e63f708ef5ed.webp&#34;
               width=&#34;564&#34;
               height=&#34;644&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      金丝雀
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;为何采用-service-mesh-实现灰度发布&#34;&gt;为何采用 Service Mesh 实现灰度发布&lt;/h2&gt;
&lt;p&gt;Service Mesh 是用来处理各服务间通信的基础设施层。它主要通过构建云原生应用程序的各种复杂拓扑结构来完成传递请求。实际上，Service Mesh 通常与应用程序代码一起部署轻量级网络代理的阵列来实现请求。&lt;/p&gt;
&lt;p&gt;在 Service Mesh 之前，我们已经采用了 APIGateway 来实现灰度发布，但 APIGateway 通常仅部署在用户流量的入口，完全灰度发布就需要完整地部署两套系统。但是在微服务时代，任何一个微服务发生变更都需要完整地部署两套系统，这不仅成本很高而且严重影响了产品变更的速度。&lt;/p&gt;
&lt;p&gt;而 Service Mesh 正好可以解决这些问题，它的应用类似于将 APIGateway 部署到本地，同时提供了集中化控制，极大地简化了灰度发布的实现流程、降低了变更成本、同时加快了产品发布的进度。&lt;/p&gt;
&lt;h2 id=&#34;为何采用轻量-service-mesh&#34;&gt;为何采用轻量 Service Mesh&lt;/h2&gt;
&lt;p&gt;正如敖小剑在《DreamMesh 抛砖引玉》系列文章中提到的：“Service Mesh 的发展进程，当前还处于前景虽然一致看好，但是脚下的路还处于需要一步一步走的早期艰难阶段。由于 Istio 和 Conduit 的尚未成熟，造成目前 Service Mesh 青黄不接的尴尬局面。”到底该如何让 Service Mesh 落地，这也是我们在 2017 年 10 月选择了 Service Mesh 之后面临的难题。&lt;/p&gt;
&lt;p&gt;Istio 可以提供一个完整的解决方案，通过为整个服务网格（Service Mesh）提供行为检测和操作控制来满足微服务应用程序的各种需求。它在服务网络中提供了许多关键功能例如：流量管理、可观察性、策略执行、服务身份和安全、平台支持、集成和定制。&lt;/p&gt;
&lt;p&gt;事实上我对 Istio 的流量管理 DSL 非常满意，同时通过评测也能够接受 Envoy 的性能开销，从当时来看 Istio 确实是一个非常优秀的且是唯一的候选者。但敖小剑在《DreamMesh 抛砖引玉》描述的几个问题，也困扰着我是否采用 Istio:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Ready for Cloud Native?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们目前并没有采用 K8S，事实上我们所开发的 IaaS 控制面程序，本身就和 K8S 的功能类似。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 如何从非 Service Mesh 体系过渡到 Service Mesh？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们有大量既有的服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 零侵入的代价&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;K8S 的网络方案已经是非常复杂且性能堪忧了，再通过 IPTables 来透明引流确实是雪上加霜，给未来的运维、Trouble-Shooting 带来了很高的复杂度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 网络通讯方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前我们主要使用 gRPC 和 HTTP，但仍有数据库服务等业务不适合跑在 K8S 中，而 K8S 的网络方案需要能够兼容现有的数据库等业务。&lt;/p&gt;
&lt;h2 id=&#34;如何实现轻量-service-mesh&#34;&gt;如何实现轻量 Service Mesh&lt;/h2&gt;
&lt;p&gt;Istio 在逻辑上可以分为数据面板和控制面板，这两部分的具体功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据面板由一组智能代理（Envoy）组成，代理部署为 sidecar，调解和控制微服务之间所有的网络通信。&lt;/li&gt;
&lt;li&gt;控制面板负责管理和配置代理来路由流量，以及在运行时执行策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图是构成每个面板的不同组件：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Istio 架构图&#34; srcset=&#34;
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaijefq2qj30hs09e0vi_hua9b407ab0eab4f9e97f615dd7174d0c1_31234_f5a65c7d7466f6467c84fa82cf31148d.webp 400w,
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaijefq2qj30hs09e0vi_hua9b407ab0eab4f9e97f615dd7174d0c1_31234_66735b612644e9d389c215d139762776.webp 760w,
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaijefq2qj30hs09e0vi_hua9b407ab0eab4f9e97f615dd7174d0c1_31234_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaijefq2qj30hs09e0vi_hua9b407ab0eab4f9e97f615dd7174d0c1_31234_f5a65c7d7466f6467c84fa82cf31148d.webp&#34;
               width=&#34;640&#34;
               height=&#34;338&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Istio 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;经过一些代码级别的 Research 之后，我们最终选择了将 Pilot 从 Istio 中剥离出来，脱离 K8S 运行的轻量级 Service Mesh 方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.从 Istio 中剥离 Pilot 和 Envoy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Istio 中 Pilot 作为 Envoy 的控制面板提供集中式流量管理功能的模块，这是实现灰度发布必不可少的功能，事实上也是 Service Mesh 的核心功能。Mixer 提供访问策略和控制功能，Istio-Auth 提供安全认证功能，但在 UCloud 的内网环境下，我们可以将这两个模块去掉。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-pilot-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Istio Pilot 架构图&#34; srcset=&#34;
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaijtidnzj30hs0edq67_hu84cbd8dd953214d27e744cba911556c5_37067_0aba8086601b26b912d04b017c80890b.webp 400w,
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaijtidnzj30hs0edq67_hu84cbd8dd953214d27e744cba911556c5_37067_f28ff3ad6cdcc4a5f77e58e1e8fd701d.webp 760w,
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaijtidnzj30hs0edq67_hu84cbd8dd953214d27e744cba911556c5_37067_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaijtidnzj30hs0edq67_hu84cbd8dd953214d27e744cba911556c5_37067_0aba8086601b26b912d04b017c80890b.webp&#34;
               width=&#34;640&#34;
               height=&#34;517&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Istio Pilot 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;得益于 Pilot 的良好设计，ETCD Platform 很容易实现，进而从 ETCD 获取 Service 和 ServiceInstance 信息。然后我们重写了 Pilot 的 main.go，保留了 Pilot 的 model、proxy 和 proxy/envoy 模块；删除其他的 Platform 仅保留新增的 ETCD Platform。&lt;/p&gt;
&lt;p&gt;最后我们在保留完整的 Istio DSL 支持的同时，得到了完全脱离 K8S 运行和编译的 Pilot。同时我们将 Pilot 和 ETCD gRPC naming and discovery 做了深度整合，自动剔除没有在线的 ServiceInstance 信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-yaml&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;YAML&#34; srcset=&#34;
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaik5pa5ej30hs0bg41v_hu094270dd5293b5c6d9329d10d8d5ac15_36114_0f35e1435e75506545acd62e7a189b7f.webp 400w,
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaik5pa5ej30hs0bg41v_hu094270dd5293b5c6d9329d10d8d5ac15_36114_079befb6cead143c9eb40b3111462b54.webp 760w,
               /blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaik5pa5ej30hs0bg41v_hu094270dd5293b5c6d9329d10d8d5ac15_36114_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/lightweight-service-mesh-practice-in-ucloud/00704eQkgy1fsaik5pa5ej30hs0bg41v_hu094270dd5293b5c6d9329d10d8d5ac15_36114_0f35e1435e75506545acd62e7a189b7f.webp&#34;
               width=&#34;640&#34;
               height=&#34;412&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      YAML
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.采用 docker-compose 管理 container 实现 sidecar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们仍然采用 container 的方式打包和部署微服务，但采用 Host 的网络方式简化了现存服务的网络通信方式。为了实现 Envoy 的 sidecar 部署，我们采用 docker-compose 模拟 k8s 的 POD，管理服务间的依赖关系。通过实现一个简单的服务管理、版本管理、集群管理、路由策略管理层，为集群中的每台 Node（VM 或物理服务器）生成 docker-compose 配置文件，从而实现每台 Node 的服务部署和管理。&lt;/p&gt;
&lt;p&gt;最后针对 HTTP 1.0、HTTP 2.0 和 gRPC 的 RPC 方式，采用显式代理而不是 IPTables 透明引流和 Envoy 集成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果服务中配置了 Envoy 的 Proxy Port，则通过 Envoy 接入 Service Mesh；&lt;/li&gt;
&lt;li&gt;如果配置是 IP 地址和端口，则直连这个地址；&lt;/li&gt;
&lt;li&gt;如果配置的是域名且没有配置 Envoy 的 Proxy，则自动采用 ETCD gRPC naming and discovery 的方式去发现远端服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过一系列的设计改造，最终我们得到了一个轻量的 Service Mesh 实践，实现了优化灰度发布的目标。在保证了更好的控制变更范围的同时，也能以提供更稳定的服务为最终目的。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
