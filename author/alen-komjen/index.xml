<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alen Komjen | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/alen-komjen/</link>
      <atom:link href="https://cloudnativecn.com/author/alen-komjen/index.xml" rel="self" type="application/rss+xml" />
    <description>Alen Komjen</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnativecn.com/author/alen-komjen/avatar_hu3801682002625739492.jpg</url>
      <title>Alen Komjen</title>
      <link>https://cloudnativecn.com/author/alen-komjen/</link>
    </image>
    
    <item>
      <title>基于 Kubernetes 的 Service Mesh 简介</title>
      <link>https://cloudnativecn.com/blog/kubernetes-service-mesh/</link>
      <pubDate>Mon, 20 May 2019 12:09:44 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/kubernetes-service-mesh/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://akomljen.com/kubernetes-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;编者按&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文章介绍了基于 Kubernetes 的服务网格，简要的说明了服务网格的作用，sidecar 的作用以及服务网格两个重要实现：Istio 与 Linkerd 的起源和结构，鼓励大家上手尝试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://akomljen.com/author/alen/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ALEN KOMLJEN&lt;/a&gt; 2018 年 1 月 28 日，阅读时间 4 分钟&lt;/p&gt;
&lt;p&gt;几个月前我同事问起我对于如何集成&lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt;到我们新的运行在&lt;a href=&#34;https://akomljen.com/tag/kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt;应用里面有什么想法。我的第一反应是，嘿，难道 Kubernetes 服务和&lt;a href=&#34;https://akomljen.com/tag/ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ingress&lt;/a&gt;还不够么？你能够基于它们做很多事情了。再考虑服务网格的话似乎有点过度设计。通常你有一些 API 只对内部网络开放，然而对于现在流行的应用来说，这并不够。API 通常暴露在互联网上并且也有非常大的流量。你需要在流量上有更多的控制。甚至你还需要做 API 版本化，做金丝雀部署，观察并记录每一个请求。这就引入了服务网格。无论你用&lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt;或是&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;，原理上都是一样的。&lt;/p&gt;
&lt;h2 id=&#34;为什么要用服务网格&#34;&gt;为什么要用服务网格？&lt;/h2&gt;
&lt;p&gt;服务网格并不是和 Kubernetes 一起出现。然而，因为有 Kubernetes，服务网格更容易被引入到你的环境中。有两个逻辑组件组成了服务网格。我们已经有了 pod 用于承载各个容器。Sidecar 是另一个绝好的例子用于扩展和加强 pod 里面的主要容器。在服务网格语境里，sidecar 是服务代理或者数据平面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务网格是云原生的核心组件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了更好的理解服务网格，你需要理解代理和反向代理这两个术语。&lt;strong&gt;代理&lt;/strong&gt;，用一句话说，用于接收流量并中转到其它地方。&lt;strong&gt;反向代理&lt;/strong&gt;，从各个地方接收流量并转交给各个服务。这种情况下，所有的客户只和一个代理实例交流。把数据平面想象为一个反向代理。Ingress 也是 Kubernetes 里面用于暴露服务的反向代理。Ingress 可以中止 SSL，提供基于名称的路由，并且它主要就干这个事情。对于 Kubernetes 服务也是一样。如果你需要更复杂的路由该怎么做呢？&lt;/p&gt;
&lt;p&gt;下面列举一些其它服务网格可以做的事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;精细流量策略&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;服务监控&lt;/li&gt;
&lt;li&gt;追踪&lt;/li&gt;
&lt;li&gt;路由&lt;/li&gt;
&lt;li&gt;服务与服务的安全通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不仅有 sidecar 代理，所有的服务网格解决方案还包含控制器，用于定义 sidecar 容器应该如何工作。服务网格的控制平面是一个集中的、管理所有的服务网格和服务代理的地方。这个控制面板记录网络信息，所以它也是一个网络监控工具。&lt;/p&gt;
&lt;p&gt;所以，为什么要用服务网格？答案很简单，你可以做上面的任何事情并且不需要修改代码。它能够节省时间与金钱。不仅如此，更重要的是，你不能跳过测试，因为它对于初学者太复杂。甚至你可以通过&lt;a href=&#34;https://istio.io/docs/concepts/traffic-management/#fault-injection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 故障注入&lt;/a&gt;模拟不同的场景，来测试系统对于失败的反应。&lt;/p&gt;
&lt;h2 id=&#34;linkerd2-与-istio&#34;&gt;Linkerd2 与 Istio&lt;/h2&gt;
&lt;p&gt;在一开始，我提到过两个在 Kubernetes 上创建服务网格的著名的解决方案。未来也许还会有其它更多的解决方案。每一个产品都试图用自己的方式解决问题，相互之间肯定会有重复的地方。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://buoyant.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buoyant&lt;/a&gt;，这家公司创造了 Linkerd，同时还创造了 Conduit 服务。近期，Conduit 被合并到 Linkerd 项目，称作&lt;strong&gt;Linkerd2&lt;/strong&gt;。buoyant 团队把 Linkerd 服务网格变成了一个更加通用的解决方案。它用 Java 编写，这意味着它很重。每一个 pod 会有一个或更多的容器，一个 sidecar。&lt;a href=&#34;https://linkerd.io/2/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd2&lt;/a&gt;设计应用于 Kubernetes。它的开发语言包含 Go-控制平面，和 Rust-一个原生的服务代理，超级轻量、快速并安全。你可以定义重试和超时，定义编排规则，以及加密（TLS），同时还支持根据策略通过或拒绝请求。不仅如此，它还有一个很漂亮的控制台：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-linkerd2_dashboard&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;linkerd2_dashboard&#34; srcset=&#34;
               /blog/kubernetes-service-mesh/empty-dashboard_hu15201463118172874284.webp 400w,
               /blog/kubernetes-service-mesh/empty-dashboard_hu4376208698854013072.webp 760w,
               /blog/kubernetes-service-mesh/empty-dashboard_hu3430926210305165005.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/kubernetes-service-mesh/empty-dashboard_hu15201463118172874284.webp&#34;
               width=&#34;760&#34;
               height=&#34;344&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      linkerd2_dashboard
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果你喜欢控制台的话也可以用&lt;code&gt;linkerd&lt;/code&gt;CLI。&lt;/p&gt;
&lt;p&gt;Linkerd 的&lt;a href=&#34;https://linkerd.io/2/getting-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入门向导&lt;/a&gt;非常不错，你可以试一试。如果想学习更多，可以看看它的&lt;a href=&#34;https://linkerd.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Istio&lt;/strong&gt;当前支持 Kubernetes 和&lt;a href=&#34;https://www.nomadproject.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nomad&lt;/a&gt;，将来会添加更多的功能。Istio 是一个多平台解决方案。它可以做微服务流量管理，策略应用以及聚合采样信息。Istio 也是 Go 语言编写的轻量应用，但不同于 Linkerd2，它使用&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;来做服务代理。下图说明 Istio 中各个部分是如何组合工作的：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio_architecture&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;istio_architecture&#34; srcset=&#34;
               /blog/kubernetes-service-mesh/arch_hu1988961960019672187.webp 400w,
               /blog/kubernetes-service-mesh/arch_hu970259977229742669.webp 760w,
               /blog/kubernetes-service-mesh/arch_hu1410429578199696394.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/kubernetes-service-mesh/arch_hu1988961960019672187.webp&#34;
               width=&#34;760&#34;
               height=&#34;698&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      istio_architecture
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我喜欢 Istio 的其中一点是&lt;a href=&#34;https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sidecar 自动注入&lt;/a&gt;，前提是你已经使用&lt;a href=&#34;https://akomljen.com/package-kubernetes-applications-with-helm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm&lt;/a&gt;来发布应用，这样的话就不需要手工把 sidecar 注入到 kubernetes 的配置文件里面。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 上安装 Istio 请参考&lt;a href=&#34;https://istio.io/docs/setup/kubernetes/quick-start.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇快速指南&lt;/a&gt;。其它关于 Istio 的信息，请参考它的&lt;a href=&#34;https://istio.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这两个产品都是开源的。无论哪一个服务网格方式适合你，它们两个都很容易上手实验。不超过 5 分钟就可以把它跑起来。我鼓励你都去试一试然后再做决定。目前阶段 Istio 实现的功能比 Linkerd2 多了很多，并且也是一个稳定版本。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;我希望这篇文章很好的介绍了服务网格。这篇文章并不是 Linkerd2 和 Istio 之间的比较。我列举了一些功能点，这样你可以了解一下服务网格给 Kubernetes 带来了什么。请继续关注我们的后续文章。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
