<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云原生社区（中国）</title>
    <link>https://cloudnative.to/author/</link>
      <atom:link href="https://cloudnative.to/author/index.xml" rel="self" type="application/rss+xml" />
    <description>云原生社区（中国）</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 11 Jul 2019 09:24:17 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/author/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>云原生社区（中国）</title>
      <link>https://cloudnative.to/author/</link>
    </image>
    
    <item>
      <title>GitOps 与 ChatOps 的落地实践</title>
      <link>https://cloudnative.to/blog/gitops-and-chatops/</link>
      <pubDate>Thu, 11 Jul 2019 09:24:17 +0800</pubDate>
      <guid>https://cloudnative.to/blog/gitops-and-chatops/</guid>
      <description>&lt;p&gt;说到 GitOps 和 ChatOps ，那就不得不谈到 DevOps 。 DevOps 作为一种文化，旨在促进开发、测试和运维人员之间的沟通与协作。而促进合作的方式，往往是使用一系列工具，完成这三个角色的相互协作。这带来的好处也是显而易见的：更快的交付速度和更低的人力成本。获益于 DevOps 和公有云，一个近百人的研发团队，可以只配备一到两个专职运维人员，降低的成本不言而喻。既然 DevOps 是一种文化，那么在不同的团队则会有不同的实践，而无论实践如何，其最终目的都是一样的：最大化的实现自动化，释放更多的人力资源，创建更大价值。&lt;/p&gt;
&lt;p&gt;而 GitOps 和 ChatOps ，则是 DevOps 的两种实践。这两种实践分别通过使用 &lt;code&gt;版本控制软件 Git&lt;/code&gt; 和&lt;code&gt;实时聊天软件&lt;/code&gt;来达到提升交付速度和研发效率的目的。&lt;/p&gt;
&lt;h2 id=&#34;gitops&#34;&gt;GitOps&lt;/h2&gt;
&lt;p&gt;GitOps 是一种实现持续交付的模型，它的核心思想是将应用系统的声明性基础架构和应用程序存放在 Git 的版本控制库中。&lt;/p&gt;
&lt;p&gt;将 Git 作为交付流水线的核心，每个开发人员都可以提交拉取请求（Pull Request）并使用 Gi​​t 来加速和简化 Kubernetes 的应用程序部署和运维任务。通过使用像 Git 这样的简单熟悉工具，开发人员可以更高效地将注意力集中在创建新功能而不是运维相关任务上。&lt;/p&gt;
&lt;p&gt;通过应用 GitOps ，应用系统的基础架构和应用程序代码可以快速查找来源——基础架构和应用程序代码都存放在 gitlab 、或者 github 等版本控制系统上。这使开发团队可以提高开发和部署速度并提高应用系统可靠性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/gitops-and-chatops/ad5fbf65gy1g4vpmjzylfj20qy09tq4b_hu7f9ce92772b877cfa51903db4adfa144_107011_a91c1f8c08e01974579ae12dda2e40bf.webp 400w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vpmjzylfj20qy09tq4b_hu7f9ce92772b877cfa51903db4adfa144_107011_54f760f7830eace5d0d2f69b0bb19552.webp 760w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vpmjzylfj20qy09tq4b_hu7f9ce92772b877cfa51903db4adfa144_107011_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/gitops-and-chatops/ad5fbf65gy1g4vpmjzylfj20qy09tq4b_hu7f9ce92772b877cfa51903db4adfa144_107011_a91c1f8c08e01974579ae12dda2e40bf.webp&#34;
               width=&#34;760&#34;
               height=&#34;277&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;将 GitOps 应用在持续交付流水线上，有诸多优势和特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全的云原生 CI/CD 管道模型&lt;/li&gt;
&lt;li&gt;更快的平均部署时间和平均恢复时间&lt;/li&gt;
&lt;li&gt;稳定且可重现的回滚（例如，根据Git恢复/回滚/ fork）&lt;/li&gt;
&lt;li&gt;与监控和可视化工具相结合，对已经部署的应用进行全方位的监控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在我看来 GitOps 的最大优势就是通过完善的 git 分支管理来达到管理所有 CI/CD 管道流水线的目的，不同的环境可以对应不同分支，在该环境出现问题时候，可以直接查找对应分支代码，达到快速排查问题的目的。而对于 Git 的熟悉，更是省去学习使用一般 DevOps 工具所需的学习成本和配置时间，开发人员可以无任何培训直接上手使用，进一步降低了时间与人力成本。&lt;/p&gt;
&lt;h2 id=&#34;chatops&#34;&gt;ChatOps&lt;/h2&gt;
&lt;p&gt;ChatOps 以聊天室（聊天群），即实时聊天软件为中心，通过一系列的机器人去对接后台的各种服务，开发&amp;amp;测试&amp;amp;运维人员只需要在聊天窗口中与机器人对话，即可与后台服务进行交互，整个工作的展开就像是使唤一个智能助手那样简单自然。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-chatops&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;ChatOps&#34; srcset=&#34;
               /blog/gitops-and-chatops/ad5fbf65gy1g4vr2yialfj20rp0bbmyd_hua9eabe531c41d979fd475a7bacb7d4f1_91350_7aacfd72aa205df59b896a10896547b5.webp 400w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vr2yialfj20rp0bbmyd_hua9eabe531c41d979fd475a7bacb7d4f1_91350_adc5f2796412329bf356f08d59d8d432.webp 760w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vr2yialfj20rp0bbmyd_hua9eabe531c41d979fd475a7bacb7d4f1_91350_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/gitops-and-chatops/ad5fbf65gy1g4vr2yialfj20rp0bbmyd_hua9eabe531c41d979fd475a7bacb7d4f1_91350_7aacfd72aa205df59b896a10896547b5.webp&#34;
               width=&#34;760&#34;
               height=&#34;310&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ChatOps
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;ChatOps 带来了很多好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公开透明。所有的工作消息都在同一个聊天平台中沉淀并公开给所有相关成员，消除沟通壁垒，工作历史有迹可循，团队合作更加顺畅。&lt;/li&gt;
&lt;li&gt;上下文共享。减少因工作台切换等对消息的截断，保证消息的完整性，让工作承接有序，各角色，各工具都成为完成工作流中的一环，打造真正流畅的工作体验。&lt;/li&gt;
&lt;li&gt;移动友好。只需要在前台与预设好的机器人对话即可完成与后台工具、系统的交互，在移动环境下无需再与众多复杂的工具直接对接，大大提升移动办公的可行性。&lt;/li&gt;
&lt;li&gt;DevOps 文化打造。用与机器人对话这种简单的方式降低 DevOps 的接受门槛，让这种自动化办公的理念更容易的扩展到团队的每一个角落。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 ChatOps 的理解最早要源于在 GitHub 上参与开源项目的一些经历，在向 Kubernetes 相关项目提交 PR 时，会有一个名叫 &lt;code&gt;k8s-ci-robot&lt;/code&gt; 的小机器人来自动为该 RP 打上标签，并且根据你提交 PR 时的 comment 信息来为你分配 Reviewers，如果没有填的话，则会自动为你分配 Reviewers 等功能。同时可以在 comment 中输入命令，还可以进行其他的操作，详见：&lt;a href=&#34;https://prow.k8s.io/command-help&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;命令列表&lt;/a&gt;。而其实这个机器人的后端就是名为 &lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow#bots-home&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prow&lt;/a&gt; 的由 Google 发起的适应云原生 CI/CD 开源项目，有兴趣的话推荐阅读：&lt;a href=&#34;https://www.servicemesher.com/blog/prow-quick-start-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prow 快速入门向导&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而一篇名为：&lt;a href=&#34;https://wanqu.co/b/7/%E6%B9%BE%E5%8C%BA%E6%97%A5%E6%8A%A5%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《湾区日报是如何运作的？》&lt;/a&gt; 文章更是让我坚定信心开始开发自己 ChatOps 系统。该文章介绍作者是怎么运营一个名叫湾区日报的个人博客，这个博客通过11个渠道（网站，iOS app，Android app、微博，微信，Twitter，Chrome 浏览器推送、Facebook、邮件订阅、RSS、Telegram）推荐给读者，而这个11个渠道的发布都是通过 slack 和作者开发的小机器人完成。在我还在为使用脚本可以在多渠道发布个人技术博客而沾沾自喜的时候，人家早在多年前就开始使用 ChatOps 模式向多渠道使用多格式自动推送文章了。这也坚定了我开发我们自己的 ChatOps 系统的决心。&lt;/p&gt;
&lt;h2 id=&#34;gitops--chatops-的实践&#34;&gt;GitOps &amp;amp; ChatOps 的实践&lt;/h2&gt;
&lt;h3 id=&#34;使用-drone-实现-gitops&#34;&gt;使用 Drone 实现 GitOps&lt;/h3&gt;
&lt;p&gt;DevOps 文化早已在我司落地，这也是为什么我们有将近百人的研发团队，却只有两个专职运维的原因。CI/CD 方面我们之前使用的是 jenkins ， jenkins 是一个十分强大的工具，但是随着公司的发展，项目也越来越多，粗略统计了一下我们在 jenkins 中有几百个 Job ，虽然所有项目都使用 Jenkinsfile 的方式将 pipeline 持久化到了 gitlab 中，但是所有的 Job 配置，包括参数化构建配置，SCM 配置等都是保存在 jenkins 上，一旦有失，几百个 Job &amp;hellip;哭都没有地方哭去（别问我是怎么知道的）。&lt;/p&gt;
&lt;p&gt;经过调研我们选择了 &lt;a href=&#34;https://drone.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;drone CI&lt;/a&gt; 进行 GitOps ，通过自己开发不同功能的插件，完善了我们的整个 CI/CD 流水线。而插件的开发也并不是从头开始，而是直接 fork 现有的插件进行定制化的二次开发。&lt;/p&gt;
&lt;p&gt;将项目配置进行了分离，配置使用单独的 git 仓库维护，同时整合了镜像安全扫描，钉钉通知等功能。&lt;/p&gt;
&lt;p&gt;由于 drone CI 的配置文件 &lt;code&gt;.drone.yml&lt;/code&gt; 需要统一规范，所以我们在自己的 DevOps 平台开发了 Drone 配置页面，帮助开发自主配置。我们提供了 &lt;code&gt;Java&lt;/code&gt; 、 &lt;code&gt;Node&lt;/code&gt; 、 &lt;code&gt;Python&lt;/code&gt; 三种配置模板，并且由于 DevOps 平台已与 GitLab 集成，可以直接将生成的 &lt;code&gt;.drone.yml&lt;/code&gt; 文件插入到相应 git 项目中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /blog/gitops-and-chatops/ad5fbf65gy1g4vvoqggfoj22lk16aagu_hu588e059adb374941c6f8c70bf2c5f8a6_421859_fd5012deeeccaa36634752521f7d503c.webp 400w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vvoqggfoj22lk16aagu_hu588e059adb374941c6f8c70bf2c5f8a6_421859_1bad12220687f7348df8f2edbd30b077.webp 760w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vvoqggfoj22lk16aagu_hu588e059adb374941c6f8c70bf2c5f8a6_421859_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/gitops-and-chatops/ad5fbf65gy1g4vvoqggfoj22lk16aagu_hu588e059adb374941c6f8c70bf2c5f8a6_421859_fd5012deeeccaa36634752521f7d503c.webp&#34;
               width=&#34;760&#34;
               height=&#34;343&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同时也提供了钉钉构建通知，在构建成功后会发送到相应的开发群组中，如果需希望自动发布的话，也可点击通知中的连接自行发布。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /blog/gitops-and-chatops/ad5fbf65gy1g4vvrigyvlj20ec0bh40u_huff445b46b57735af73cc9a087d5a8adb_124038_a887d2b66e67059a7dbee0949c654b55.webp 400w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vvrigyvlj20ec0bh40u_huff445b46b57735af73cc9a087d5a8adb_124038_7fd5865686c8c79e043776e074c51ee8.webp 760w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vvrigyvlj20ec0bh40u_huff445b46b57735af73cc9a087d5a8adb_124038_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/gitops-and-chatops/ad5fbf65gy1g4vvrigyvlj20ec0bh40u_huff445b46b57735af73cc9a087d5a8adb_124038_a887d2b66e67059a7dbee0949c654b55.webp&#34;
               width=&#34;516&#34;
               height=&#34;413&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;自研平台配合钉钉-outgoing-功能实现-chatops&#34;&gt;自研平台配合钉钉 Outgoing 功能实现 ChatOps&lt;/h3&gt;
&lt;p&gt;前面的构建通知机器人使用的是钉钉的&lt;a href=&#34;https://open-doc.dingtalk.com/microapp/serverapi2/qf2nxq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义机器人&lt;/a&gt;，将构建信息推送到各个项目群中。而钉钉机器人的 Outgoing 功能，则可用来实现 ChatOps 的功能（&lt;strong&gt;注意：钉钉的 Outgoing 功能目前还处于灰度测试阶段，想要使用的需要联系官方管理员开启该功能&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;由于我司专职运维人员只有两位，管理着整个团队全部的基础设施。但是随着开发团队的扩张，运维人员每天要处理大量的咨询类工作，而这类工作有着重复性强和技术性弱的特点，对于运维人员的技术水平毫无提升，那么这类工作交给机器人岂不是更好。得益于我们 DevOps 平台完善的 API ，小助手机器人的开发并不困难。&lt;/p&gt;
&lt;p&gt;小助手机器人的诞生，极大的提高了咨询类工作的效率，同时也释放了运维人员的工作时间，运维人员可以将更多精力投注到更有技术含量的事情上。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image&#34; srcset=&#34;
               /blog/gitops-and-chatops/ad5fbf65gy1g4vwfdgd2xj20iu0ajwgc_hu28f3dc25a102271f8d9e1de38431f264_103023_0dd66f9a2a575128ba6bf4f178845346.webp 400w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vwfdgd2xj20iu0ajwgc_hu28f3dc25a102271f8d9e1de38431f264_103023_9a0f17dbdbf06e382b60a6ab4bd39013.webp 760w,
               /blog/gitops-and-chatops/ad5fbf65gy1g4vwfdgd2xj20iu0ajwgc_hu28f3dc25a102271f8d9e1de38431f264_103023_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/gitops-and-chatops/ad5fbf65gy1g4vwfdgd2xj20iu0ajwgc_hu28f3dc25a102271f8d9e1de38431f264_103023_0dd66f9a2a575128ba6bf4f178845346.webp&#34;
               width=&#34;678&#34;
               height=&#34;379&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;小助手机器人还有运维版本，功能包括：批量操作虚拟机、重启服务、DNS 解析、Kubernetes 信息检测&amp;amp;操作等功能，由于还是测试版本，这里就不做详细介绍了。&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;上文中简要的介绍了 GitOps 和 ChatOps 在我司的落地实践，从决定落地 GitOps 和 ChatOps 至今不过短短的2个月。得益于我司浓厚的 DevOps 文化氛围，让我可以在极短的时间内将 GitOps 和 ChatOps 落地实践。但毕竟实践的时间还短，很多需求还在收集和调研中，后续的开发还在持续进行。欢迎对 GitOps 和 ChatOps 感兴趣的同学一起交流，共同提升。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.weave.works/technologies/gitops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bearyinnovative.com/salon-chatops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps 理念升级，ChatOps 概述及实践经验&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>从边车模式到 Service Mesh</title>
      <link>https://cloudnative.to/blog/from-sidecar-to-servicemesh/</link>
      <pubDate>Thu, 11 Apr 2019 16:56:23 +0800</pubDate>
      <guid>https://cloudnative.to/blog/from-sidecar-to-servicemesh/</guid>
      <description>&lt;p&gt;所谓边车模式（ Sidecar pattern ），也译作挎斗模式，是分布式架构中云设计模式的一种。因为其非常类似于生活中的边三轮摩托车而得名。该设计模式通过给应用程序加上一个“边车”的方式来拓展应用程序现有的功能。该设计模式出现的很早，实现的方式也多种多样。现在这个模式更是随着微服务的火热与 Service Mesh 的逐渐成熟而进入人们的视野。&lt;/p&gt;
&lt;h2 id=&#34;什么是边车模式&#34;&gt;什么是边车模式&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/from-sidecar-to-servicemesh/ad5fbf65ly1g18zhnoh76j20dw0dw752_hu5ea7a3b635d69403a699ad3a6df9d413_39103_16bba8c6e6ef846f84afee7ba3963a5a.webp 400w,
               /blog/from-sidecar-to-servicemesh/ad5fbf65ly1g18zhnoh76j20dw0dw752_hu5ea7a3b635d69403a699ad3a6df9d413_39103_284f0a010985b5a210461b2b161651b1.webp 760w,
               /blog/from-sidecar-to-servicemesh/ad5fbf65ly1g18zhnoh76j20dw0dw752_hu5ea7a3b635d69403a699ad3a6df9d413_39103_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/from-sidecar-to-servicemesh/ad5fbf65ly1g18zhnoh76j20dw0dw752_hu5ea7a3b635d69403a699ad3a6df9d413_39103_16bba8c6e6ef846f84afee7ba3963a5a.webp&#34;
               width=&#34;500&#34;
               height=&#34;500&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在 &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/patterns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure Architecture Center&lt;/a&gt; 的云设计模式中是这么介绍边车模式的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Deploy components of an application into a separate process or container to provide isolation and encapsulation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;mdash; &lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecar pattern&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里要注意的是： 这里的 Sidecar 是分布式架构中云设计模式的一种，与我们目前在使用的 Istio 或 Linkerd 中的 Sidecar 是设计与实现的区别，后文中提到的边车模式均是指这种设计模式，请勿与 Istio 或 其他 Service Mesh 软件 中的 Sidecar 混淆。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;边车模式&lt;/strong&gt;是一种分布式架构的设计模式。如上图所示，边车就是加装在摩托车旁来达到拓展功能的目的，比如行驶更加稳定，可以拉更多的人和货物，坐在边车上的人可以给驾驶员指路等。边车模式通过给应用服务加装一个“边车”来达到&lt;strong&gt;控制&lt;/strong&gt;和&lt;strong&gt;逻辑&lt;/strong&gt;的分离的目的。&lt;/p&gt;
&lt;p&gt;比如日志记录、监控、流量控制、服务注册、服务发现、服务限流、服务熔断等在业务服务中不需要实现的控制面功能，可以交给“边车”，业务服务只需要专注实现业务逻辑即可。如上图那样，应用服务你只管开好你的车，打仗的事情就交给边车上的代理就好。这与分布式和微服务架构完美契合，真正的实现了控制和逻辑的分离与解耦。&lt;/p&gt;
&lt;h2 id=&#34;边车模式设计&#34;&gt;边车模式设计&lt;/h2&gt;
&lt;p&gt;在设计上边车模式与网关模式有类似之处，但是其粒度更细。其为每个服务都配备一个“边车”，这个“边车“可以理解为一个 agent ，这个服务所有的通信都是通过这个 agent 来完成的，这个 agent 同服务一起创建，一起销毁。像服务注册、服务发现、监控、流量控制、日志记录、服务限流和服务服务熔断等功能完全可以做成标准化的组件和模块，不需要在单独实现其功能来消耗业务开发的精力和时间来开发和调试这些功能，这样可以开发出真正高内聚低耦合的软件。&lt;/p&gt;
&lt;p&gt;这里有两种方法来实现边车模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过 SDK 、 Lib 等软件包的形式，在开发时引入该软件包依赖，使其与业务服务集成起来。&lt;/p&gt;
&lt;p&gt;这种方法可以与应用密切集成，提高资源利用率并且提高应用性能。但是这种方法是对代码有侵入的，受到编程语言和软件开发人员水平的限制，但当该依赖有 bug 或者需要升级时，业务代码需要重新编译和发布。同时，如果该依赖宣布停止维护或者闭源，那么会给该服务带来不小的影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以 Sidecar 的形式，在运维的时候与应用服务集成在一起。&lt;/p&gt;
&lt;p&gt;这种方式对应用服务没有侵入性，不受编程语言和开发人员水平的限制，做到了控制与逻辑分开部署。但是会增加应用延迟，并且管理和部署的复杂度会增加。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;边车模式解决了什么问题&#34;&gt;边车模式解决了什么问题&lt;/h2&gt;
&lt;p&gt;边车模式在概念上是比较简单的，但是在实践中还是要了解边车模式到底解决了什么问题，我们为什么要使用边车模式？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;控制与逻辑分离的问题&lt;/p&gt;
&lt;p&gt;边车模式是基于将控制与逻辑分离和解耦的思想，通俗的讲就是让专业的人做专业的事，业务代码只需要关心其复杂的业务逻辑，其他的事情”边车“会帮其处理，从这个角度看，可能叫跟班或者秘书模式也不错 :)&lt;/p&gt;
&lt;p&gt;日志记录、监控、流量控制、服务注册、服务发现、服务限流、服务熔断、鉴权、访问控制和服务调用可视化等，这些功能从本质上和业务服务的关系并不大，而传统的软件工程在开发层面完成这些功能，这导致了各种各样维护上的问题。&lt;/p&gt;
&lt;p&gt;就好像一个厨师不是必须去关心食材的产地、饭店的选址、是给大厅的客人上菜还是给包房的客人上菜&amp;hellip;他只需要做好菜就好，虽然上面的这些事他都可以做。而传统的软件工程就像是一个小饭店的厨师，他即是老板又是厨师，既需要买菜又需要炒菜，所有的事情都要他一个人做，如果客人一多，就会变的手忙脚乱；而控制与逻辑分离的软件，其逻辑部分就像是高档酒店的厨师，他只需要将菜做好即可，其他的事情由像”边车“这样的成员帮其处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决服务之间调用越来越复杂的问题&lt;/p&gt;
&lt;p&gt;随着分布式架构越来越复杂和微服务越拆越细，我们越来越迫切的希望有一个统一的控制面来管理我们的微服务，来帮助我们维护和管理所有微服务，这时传统开发层面上的控制就远远不够了。而边车模式可以很好的解决这个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;从边车模式到-service-mesh&#34;&gt;从边车模式到 Service Mesh&lt;/h2&gt;
&lt;p&gt;边车模式有效的分离了系统控制和业务逻辑，可以将所有的服务进行统一管理，让开发人员更专注于业务开发，显著的提升开发效率。而遵循这种模式进行实践从很早以前就开始了，开发人员一直试图将上文中我们提到的功能（如：流量控制、服务注册、服务发现、服务限流、服务熔断等）提取成一个标准化的 Sidecar ，通过 Sidecar 代理来与其他系统进行交互，这样可以大大简化业务开发和运维。而随着分布式架构和微服务被越来越多的公司和开发者接受并使用，这一需求日益凸显。&lt;/p&gt;
&lt;p&gt;这就是 Service Mesh 服务网格诞生的契机，它是 CNCF（Cloud Native Computing Foundation，云原生基金会）目前主推的新一代微服务架构。 William Morgan 在 &lt;a href=&#34;https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What&amp;rsquo;s a service mesh? And why do I need one?&lt;/a&gt; 【&lt;a href=&#34;https://blog.maoxianplay.com/posts/whats-a-service-mesh-and-why-do-i-need-one/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;译文&lt;/a&gt;】中解释了什么是 Service Mesh 。&lt;/p&gt;
&lt;p&gt;Service Mesh 有如下几个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序间通讯的中间层&lt;/li&gt;
&lt;li&gt;轻量级网络代理&lt;/li&gt;
&lt;li&gt;应用程序无感知&lt;/li&gt;
&lt;li&gt;解耦应用程序的重试/超时、监控、追踪和服务发现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service Mesh 将底层那些难以控制的网络通讯统一管理，诸如：流量管控，丢包重试，访问控制等。而上层的应用层协议只需关心业务逻辑即可。Service Mesh 是一个用于处理服务间通信的基础设施层，它负责为构建复杂的云原生应用传递可靠的网络请求。&lt;/p&gt;
&lt;h2 id=&#34;你真的需要-service-mesh-吗&#34;&gt;你真的需要 Service Mesh 吗？&lt;/h2&gt;
&lt;p&gt;正如 NGINX 在其博客上发表的一篇文章名叫 &lt;a href=&#34;https://www.nginx.com/blog/do-i-need-a-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Do I Need a Service Mesh? &lt;/a&gt; 【&lt;a href=&#34;http://www.servicemesher.com/blog/do-i-need-a-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;译文&lt;/a&gt;】 的文章中提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As the complexity of the application increases, service mesh becomes a realistic alternative to implementing capabilities service-by-service.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;随着应用程序复杂性的增加，服务网格将成为实现服务到服务的能力的现实选择。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/from-sidecar-to-servicemesh/ad5fbf65gy1g1yqgvxvzrj20sg0fxgnw_hu7f2c31cb17c6b91aa8599714a1cd3d05_118336_879002e6defc9884e34f2dda316b5368.webp 400w,
               /blog/from-sidecar-to-servicemesh/ad5fbf65gy1g1yqgvxvzrj20sg0fxgnw_hu7f2c31cb17c6b91aa8599714a1cd3d05_118336_acee6b25883424001aa8a5819152cc68.webp 760w,
               /blog/from-sidecar-to-servicemesh/ad5fbf65gy1g1yqgvxvzrj20sg0fxgnw_hu7f2c31cb17c6b91aa8599714a1cd3d05_118336_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/from-sidecar-to-servicemesh/ad5fbf65gy1g1yqgvxvzrj20sg0fxgnw_hu7f2c31cb17c6b91aa8599714a1cd3d05_118336_879002e6defc9884e34f2dda316b5368.webp&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;随着我们的微服务越来越细分，我们所要管理的服务正在成倍的增长着，Kubernetes 提供了丰富的功能，使得我们可以快速的部署和调度这些服务，同时也提供了我们熟悉的方式来实现那些复杂的功能，但是当临界点到来时，可能就是我们真正要去考虑使用 Service Mesh 的时候了。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sidecar pattern ： &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What&amp;rsquo;s a service mesh? And why do I need one?： &lt;a href=&#34;https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://buoyant.io/2017/04/25/whats-a-service-mesh-and-why-do-i-need-one/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do I Need a Service Mesh?：https://www.nginx.com/blog/do-i-need-a-service-mesh/&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
