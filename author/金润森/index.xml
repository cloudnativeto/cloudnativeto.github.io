<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>金润森 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/%E9%87%91%E6%B6%A6%E6%A3%AE/</link>
      <atom:link href="https://cloudnativecn.com/author/%E9%87%91%E6%B6%A6%E6%A3%AE/index.xml" rel="self" type="application/rss+xml" />
    <description>金润森</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 05 Aug 2020 20:16:40 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/author/%E9%87%91%E6%B6%A6%E6%A3%AE/avatar_hu_993d1b6c8f0963be.jpg</url>
      <title>金润森</title>
      <link>https://cloudnativecn.com/author/%E9%87%91%E6%B6%A6%E6%A3%AE/</link>
    </image>
    
    <item>
      <title>Kubernetes 编程基础知识</title>
      <link>https://cloudnativecn.com/blog/kubernetes-programming-base/</link>
      <pubDate>Wed, 05 Aug 2020 20:16:40 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/kubernetes-programming-base/</guid>
      <description>&lt;p&gt;Kubernetes 诞生至今已经 5 年了，火爆整个社区，大家对 Kubernetes 越来越熟悉，越来越了解。但现阶段很多人都是熟练使用 Kubernetes，甚至我们会自嘲为“YAML 工程师”。&lt;/p&gt;
&lt;p&gt;可是随着各类云原生应用的出现、Operator 理念的推广、深入维护 Kubernetes 的需求下，仅仅做一个 &amp;ldquo;YAML 工程师&amp;rdquo; 已经不能满足老板的要求了。需要我们进一步了解 Kubernetes 是如何实现的，该怎么扩展 Kubernetes。&lt;/p&gt;
&lt;p&gt;我在这样的场景下，开始学习 Kubernetes 编程，在这里总结了我学习到的 Kubernetes 编程的基础知识，让大家对 Kubernetes 编程有个大致的了解。&lt;/p&gt;
&lt;h2 id=&#34;基于-kubernetes-编程&#34;&gt;基于 Kubernetes 编程&lt;/h2&gt;
&lt;p&gt;什么叫做基于 Kubernetes 编程呢？回想一下，我们以前听过基于 Linux 编程，基于 Windows 编程，可以放在‘基于’后面的都是通用标准的平台。基于 Kubernetes 编程有着相同的概念，Kubernetes 经过 5 年的高速发展，已经成为了容器编排调度框架的标准，直接将之定义为“云原生操作系统”也不为过。&lt;/p&gt;
&lt;p&gt;基于 Kubernetes 编程可以定义为，开发一个 Kubernetes-native 应用，它直接与 K8S API Server（K8S 的一个核心组件，后面会介绍）交互，查询资源的状态或更新状态。&lt;/p&gt;
&lt;p&gt;为什么要基于 Kubernetes 编程呢？大多数基于 Kubernetes 编程的服务都属于 PaaS 层的能力，PaaS 将服务抽象成应用进行分发部署管理，并且对应用屏蔽下层 IaaS 的复杂度。PaaS 层是在 Kubernetes 诞生之前就存在的，在 Kubernetes 环境下以前很多 PaaS 层的应用都需要进行改造迁移，或者被云原生时代的新应用代替，随之诞生了服务网格、Operator 等云原生产物。&lt;/p&gt;
&lt;p&gt;这些需求都是要基于 Kubernetes 编程来实现的，因此掌握 Kubernetes 编程是做云原生开发，PaaS 平台的必备基础。&lt;/p&gt;
&lt;p&gt;学习 Kubernetes 编程后会对 Kubernetes 的各个组件有更加深刻的认知。比如你了解了 &lt;code&gt;controller 架构模式 &lt;/code&gt; 后就会知道（以下说法并不严谨，只列出组件中的部分功能）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kube-proxy 是 Service 资源和服务发现负载之间的协调控制器。&lt;/li&gt;
&lt;li&gt;kubelet 是 Pod 资源和容器运行时之间的协调控制器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解 API Server 的架构后就知道，kubectl 其实是高级定制版的 curl 工具。&lt;/p&gt;
&lt;h2 id=&#34;扩展模式&#34;&gt;扩展模式&lt;/h2&gt;
&lt;p&gt;Kubernetes 是一个强大的并且内聚的可扩展系统。
常用的有如下扩展点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二进制 &lt;code&gt;kubelet&lt;/code&gt; 插件，如 &lt;a href=&#34;https://github.com/containernetworking/cni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络 (CNI)&lt;/a&gt;、&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;设备&lt;/a&gt;、&lt;a href=&#34;https://github.com/container-storage-interface/spec/blob/master/spec.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;存储 (CSI)&lt;/a&gt;、&lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器运行时 (CRI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二进制 &lt;code&gt;kubectl&lt;/code&gt; &lt;a href=&#34;https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;API server 中的访问扩展，例如 webhooks 的动态准入控制&lt;/li&gt;
&lt;li&gt;自定义资源（CRD）和自定义 controller&lt;/li&gt;
&lt;li&gt;自定义 API servers&lt;/li&gt;
&lt;li&gt;调度器扩展，例如使用 &lt;a href=&#34;https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/scheduler_extender.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webhook&lt;/a&gt; 来实现自己的调度决策&lt;/li&gt;
&lt;li&gt;通过 webhook 进行 &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;身份验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes 提供了很强的扩展能力，其本身的很多组件也是使用了这种扩展能力来实现的。&lt;code&gt;controller&lt;/code&gt; 模式是 Kubernetes 编程中通用性最强，使用最多的扩展能力。&lt;/p&gt;
&lt;p&gt;Controller 实现控制循环，通过 API Server 监听集群的共享状态，根据资源的当前状态做出反应更改真实世界，使将资源更接近期望状态。&lt;/p&gt;
&lt;h3 id=&#34;控制循环-the-control-loop&#34;&gt;控制循环 The Control Loop&lt;/h3&gt;
&lt;p&gt;所有的控制器都按照以下逻辑运行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由事件驱动来读取资源 (resources) 的状态 (state)。&lt;/li&gt;
&lt;li&gt;更改集群内或集群外对象的状态 (state)。比如，启动一个 Pod，创建 Endpoint。&lt;/li&gt;
&lt;li&gt;通过 API server 更新步骤 1 中的资源状态（status），存储到 etcd 中。&lt;/li&gt;
&lt;li&gt;重复循环，返回步骤 1。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-引用自programming-kubernetes&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;引用自《Programming Kubernetes》&#34; srcset=&#34;
               /blog/kubernetes-programming-base/1_hu_ae104cee1de979e.webp 400w,
               /blog/kubernetes-programming-base/1_hu_85dd934fb6a01372.webp 760w,
               /blog/kubernetes-programming-base/1_hu_a7314be0aab7f50a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/kubernetes-programming-base/1_hu_ae104cee1de979e.webp&#34;
               width=&#34;600&#34;
               height=&#34;255&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      引用自《Programming Kubernetes》
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
    引用自《Programming Kubernetes》&lt;/p&gt;
&lt;h3 id=&#34;控制器组件&#34;&gt;控制器组件&lt;/h3&gt;
&lt;p&gt;从架构的角度来看，Controller 通常使用以下数据结构：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-引用自深入剖析-kubernetes&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;引用自“深入剖析 Kubernetes”&#34; srcset=&#34;
               /blog/kubernetes-programming-base/2_hu_3b153a5c4601ed91.webp 400w,
               /blog/kubernetes-programming-base/2_hu_b77553d014050fa4.webp 760w,
               /blog/kubernetes-programming-base/2_hu_5594a9feced955ac.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/kubernetes-programming-base/2_hu_3b153a5c4601ed91.webp&#34;
               width=&#34;760&#34;
               height=&#34;353&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      引用自“深入剖析 Kubernetes”
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
    引用自“深入剖析 Kubernetes”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Informers
从 Kubernetes API Server 里监听它所关心的对象状态，Informer 与 API 对象是一一对应的。&lt;/li&gt;
&lt;li&gt;Reflector
连接 APIServer，使用 ListAndWatch 方法，获取并监听 API 对象实例的变化。变化事件及对应的 API 对象，被称为增量，放进 Delta FIFO Queue。&lt;/li&gt;
&lt;li&gt;Delta FIFO Queue
存放事件数据&lt;/li&gt;
&lt;li&gt;Store
对象在本地的缓存&lt;/li&gt;
&lt;li&gt;Indexer
查询与索引本地缓存的数据结构&lt;/li&gt;
&lt;li&gt;ResourceEventHandler
在初始化时将事件类型对应的处理函数注册到 Informer，当事件触发时，由 Informer 调用 Handler&lt;/li&gt;
&lt;li&gt;Work queues
在执行周期里 (processNextWorkItem)，从工作队列 (workqueue) 中获取一个对象来处理。event handler 可以通过它来排队或重试状态变化处理任务。
资源在处理中遇到错误时可以被重新入队 (requeued)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;事件-event&#34;&gt;事件 Event&lt;/h3&gt;
&lt;p&gt;Kubernetes 控制平面大量使用事件和松散耦合的组件。其他分布式系统常使用远程调用（RPC）来触发行为。但 Kubernetes 并没有这么做。Kubernetes controller 监听 API server 中 Kubernetes 对象的操作：添加，更新和删除。当发生此类事件时，controller 将执行其业务逻辑。&lt;/p&gt;
&lt;p&gt;例如，为了通过 deployment 来启动 pod，就涉及到许多 controller 和其他控制平面组件协同工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deployment controller（在 kube-controller-manager 内部）感知到（通过 deployment informer）用户创建了一个 deployment。根据其业务逻辑，它将创建一个 replica set。&lt;/li&gt;
&lt;li&gt;Replica set controller（同样在 kube-controller-manager 内部）感知到（通过 replica set informer）新的 replica set 被创建了。并随后运行其业务逻辑，它将创建一个 pod 对象。&lt;/li&gt;
&lt;li&gt;Scheduler（在 kube-scheduler 二进制文件内部）——同样是一个 controller，感知到（通过 pod informer）pod 设置了一个空的 spec.nodeName 字段。根据其业务逻辑，它将该 pod 放入其调度队列中。&lt;/li&gt;
&lt;li&gt;与此同时，另一个 controller kubelet（通过其 pod informer）感知到有新的 pod 出现，但是新 pod 的 spec.nodeName 字段为空，因此与 kubelet 的 node name 不匹配。它会忽视该 pod 并返回休眠状态（直到下一个事件）。&lt;/li&gt;
&lt;li&gt;Scheduler 更新 pod 中的 spec.nodeName 字段，并将该字段写入 API server，由此将 pod 从工作队列中移出，并调度到具有足够可用资源的 node 上。&lt;/li&gt;
&lt;li&gt;由于 pod 的更新事件，kubelet 将被再次唤醒，这次再将 pod 的 spec.nodeName 与自己的 node name 进行比较，会发现是匹配的，接着 kubelet 将启动 pod 中的容器，并将容器已启动的信息写入 pod status 中，由此上报给 API server。&lt;/li&gt;
&lt;li&gt;Replica set controller 会感知到已更新的 pod，但并不会做什么。&lt;/li&gt;
&lt;li&gt;如果 pod 终止，kubelet 将感知到该事件，进而从 API server 获取 pod 对象，并把 pod status 设置为“terminated”，然后将其写回到 API server。&lt;/li&gt;
&lt;li&gt;Replica set controller 会感知到终止的 pod，并决定必须更换此 pod。它将在 API server 上删除终止了的 pod，然后创建一个新的 pod。&lt;/li&gt;
&lt;li&gt;依此类推。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;许多独立的控制循环只通过 API server 上对象的变化进行通信，这些变化通过 informer 触发事件。&lt;/p&gt;
&lt;p&gt;书中第一章后面还介绍了事件驱动对应 I/O 模型选择，如何处理并发，Operator 等话题，参考后面给出的 [推荐阅读](# 推荐阅读) 继续阅读。&lt;/p&gt;
&lt;p&gt;I/O 模型的相关知识可以额外阅读《Linux/UNIX 系统编程手册》第 63 章。&lt;/p&gt;
&lt;h2 id=&#34;the-api-server&#34;&gt;The API Server&lt;/h2&gt;
&lt;p&gt;Kubernetes 由一堆不同角色的节点（集群中机器）组成，如下图所示：主节点的控制面由 API Server，controller manager 和 scheduler 组成。API Server 是系统的中央管理实体（central management entity），它是系统中唯一个与分布式存储组件 etcd 进行直接交互的组件。&lt;/p&gt;
&lt;p&gt;主要完成以下任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为 Kubernetes API 提供服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取状态 (state)&lt;/li&gt;
&lt;li&gt;操作状态 (state)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代理转发集群组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kubernetes dashboard&lt;/li&gt;
&lt;li&gt;代理 kubectl exec 会话&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-引用自programming-kubernetes&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;引用自《Programming Kubernetes》&#34; srcset=&#34;
               /blog/kubernetes-programming-base/3_hu_d385eb93a6cacf96.webp 400w,
               /blog/kubernetes-programming-base/3_hu_6f8d760089e1329e.webp 760w,
               /blog/kubernetes-programming-base/3_hu_4a469a4c0425608d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/kubernetes-programming-base/3_hu_d385eb93a6cacf96.webp&#34;
               width=&#34;600&#34;
               height=&#34;390&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      引用自《Programming Kubernetes》
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
    引用自《Programming Kubernetes》&lt;/p&gt;
&lt;h3 id=&#34;api-server-http-协议接口&#34;&gt;API Server HTTP 协议接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;API server 使用 RESTful HTTP API&lt;/li&gt;
&lt;li&gt;外部请求正常使用 json 格式&lt;/li&gt;
&lt;li&gt;内部调用使用 protocol buffer，为了更高的性能&lt;/li&gt;
&lt;li&gt;使用 API 路径参数，如 &lt;code&gt;GET /api/v1/namespaces/{namespace}/pods&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 kubectl 指令列出当前命名空间下的 pods，&lt;code&gt;kubectl -n *THENAMESPACE* get pods&lt;/code&gt;。实际上会发出 GET /api/v1/namespaces/&lt;em&gt;THENAMESPACE&lt;/em&gt;/pods 的 HTTP 请求，通过 -v 6 参数能看到 HTTP 请求的 log。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-log&#34; data-lang=&#34;log&#34;&gt;I0804 10:55:47.463928   23997 loader.go:375] Config loaded from file:  /root/.kube/config
...
...
I0804 10:55:51.689482   23997 round_trippers.go:443] GET https://172.24.28.3:6443/api/v1/namespaces/default/pods?limit=500 200 OK in 36 milliseconds
NAME                          READY   STATUS    RESTARTS   AGE
busybox                       1/1     Running   119        4d23h
redis-cli                     1/1     Running   303        12d
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;api-术语&#34;&gt;API 术语&lt;/h3&gt;
&lt;p&gt;弄清楚什么是 &lt;a href=&#34;https://www.ruanyifeng.com/blog/2011/09/restful.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RESTful 架构&lt;/a&gt; 就很容易理解和区分 Kubernetes API Server 里面这些概念。
如果一个架构符合 REST 原则，就称它为 RESTful 架构，REST 是 Representational State Transfer 的缩写，可以翻译为 &amp;ldquo;表现层状态转化&amp;rdquo;，这里省略了主语“资源”（Resources)。 &lt;strong&gt;核心在于“资源”，它是一种信息实体，可以有很多种外在表现形式，我们把“资源”具体呈现出来的形式，叫做它的“表现层”（Representation）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RESTful API 是基于 HTTP 协议且符合 REST 原则的软件架构，controller 架构也符合 REST 原则。在 Kubernetes 中同时使用了这两种架构，所以弄出来了一些术语来区分指代实体，其实都是“资源”这一信息实体在不同上下文中的不同表示形态。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;RESTful API&lt;/th&gt;
          &lt;th&gt;controller 架构&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;实体类型&lt;/td&gt;
          &lt;td&gt;Resource&lt;/td&gt;
          &lt;td&gt;Kind&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;实现方式&lt;/td&gt;
          &lt;td&gt;http&lt;/td&gt;
          &lt;td&gt;controller&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;资源定位&lt;/td&gt;
          &lt;td&gt;URL Path&lt;/td&gt;
          &lt;td&gt;GroupVersionKind&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;kind&#34;&gt;Kind&lt;/h4&gt;
&lt;p&gt;表示实体的类型。每个对象都有一个字段 Kind（JSON 中的小写 kind，Golang 中的首字母大写 Kind），该字段告诉如 kubectl 之类的客户端它表示什么类型。&lt;/p&gt;
&lt;h4 id=&#34;api-group&#34;&gt;API group&lt;/h4&gt;
&lt;p&gt;在逻辑上相关的一组 Kind 集合。
如 &lt;code&gt;Job&lt;/code&gt; 和 &lt;code&gt;ScheduledJob&lt;/code&gt; 都在 &lt;code&gt;batch API group&lt;/code&gt; 里。&lt;/p&gt;
&lt;h4 id=&#34;version&#34;&gt;Version&lt;/h4&gt;
&lt;p&gt;标示 API group 的版本更新，API group 会有多个版本 (version)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v1alpha1: 初次引入&lt;/li&gt;
&lt;li&gt;v1beta1: 升级改进&lt;/li&gt;
&lt;li&gt;v1: 开发完成毕业&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在持续开发中，对象会发生变化，便用 Version 来标示版本变化。
对象会存储所有版本的对象属性的并集。但是在取出时指定版本，即只会取出这个版本所需要的对象定义。&lt;/p&gt;
&lt;h4 id=&#34;resource&#34;&gt;Resource&lt;/h4&gt;
&lt;p&gt;通常是小写的复数词（例如，pod），用于标识一组 HTTP 端点（路径），来对外暴露 CURD 操作。&lt;/p&gt;
&lt;h4 id=&#34;gvr&#34;&gt;GVR&lt;/h4&gt;
&lt;p&gt;Resource 和 API group、Version 一起称为 GroupVersionResource（GVR），来唯一标示一个 HTTP 路径。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-引用自programming-kubernetes&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;引用自《Programming Kubernetes》&#34; srcset=&#34;
               /blog/kubernetes-programming-base/4_hu_f780c0171e928d9b.webp 400w,
               /blog/kubernetes-programming-base/4_hu_4f98583b1dcd723c.webp 760w,
               /blog/kubernetes-programming-base/4_hu_b776a26107056cd.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/kubernetes-programming-base/4_hu_f780c0171e928d9b.webp&#34;
               width=&#34;600&#34;
               height=&#34;143&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      引用自《Programming Kubernetes》
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;br&gt;
    引用自《Programming Kubernetes》&lt;/p&gt;
&lt;h3 id=&#34;声明式状态管理&#34;&gt;声明式状态管理&lt;/h3&gt;
&lt;p&gt;controller 模式能运作的另一大原因是声明式状态管理，它规定资源必须要有在 spec 中定义的期望状态（desired state）, 和由 controller 补充的当前状态（current status），填写在 status 中。&lt;/p&gt;
&lt;p&gt;spec 定义的期望状态提供了实现 &amp;ldquo;infrastructure-as-code&amp;rdquo; 的基础，让 controller 可以在 event 触发、水平获取、定时同步的时候都可以获取到资源的期望状态。另一方面 status 的设计让 controller 了解到资源当前状态，进而作出操作来调协资源的当前状态与期望状态，再将调协后的当前状态写入 status。这种设计完全可以仍受因网络分区等原因造成的数据短暂不一致问题。&lt;/p&gt;
&lt;p&gt;举个例子，在一个 deployment 里你可能指定想要 20 个应用程序的副本（replicas）持续运行。deployment controller 作为控制面中 controller manager 的一部分，将读取你提供的 deployment spec，并创建一个 replica set 用于管理这些副本，再由 replicat set 来负责创建对应数量的 pods，最终结果是在工作节点上启动容器。如果任何的副本挂了，deployment controller 让你通过 status 可以感知到。这就是我们说的声明式状态管理（declarative state management），简而言之，就是声明期望的状态，剩下的交给 Kubernetes。&lt;/p&gt;
&lt;h2 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h2&gt;
&lt;h3 id=&#34;programming-kubernetes&#34;&gt;&lt;a href=&#34;https://www.amazon.com/Programming-Kubernetes-Developing-Cloud-Native-Applications/dp/1492047104/ref=sr_1_1?dchild=1&amp;amp;keywords=Programming&amp;#43;Kubernetes&amp;amp;qid=1595852427&amp;amp;sr=8-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Programming Kubernetes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-programming-kubernetes&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Programming Kubernetes&#34; srcset=&#34;
               /blog/kubernetes-programming-base/5_hu_dd5c4a41e3f7edef.webp 400w,
               /blog/kubernetes-programming-base/5_hu_23bf0c1bfb1b14fc.webp 760w,
               /blog/kubernetes-programming-base/5_hu_c52b425754abcaa5.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/kubernetes-programming-base/5_hu_dd5c4a41e3f7edef.webp&#34;
               width=&#34;381&#34;
               height=&#34;499&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Programming Kubernetes
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文是阅读《Programming Kubernetes》书籍前两章时做的笔记与总结。&lt;/p&gt;
&lt;p&gt;这本书是由来自 AWS 和 Red Hat 的两位高级工程师写作的，他们自 2015 年以来就一直致力于 Kubernetes 的开发，写作，教学。&lt;/p&gt;
&lt;p&gt;书中主要围绕着“Kubernetes 扩展编程“主题讲了 Kubernetes 编程基础，client-go，自定义资源（CRD），Operator，API Servers 扩展等内容。&lt;/p&gt;
&lt;p&gt;对于接触过云原生但不想仅仅停留在使用阶段的朋友，这本书值得一读，通过学习如何在 Kubernetes 基础上做开发，能让你更加了解 Kubernetes，后续可以深入阅读 Kubernetes 源码。&lt;/p&gt;
&lt;p&gt;这本书目前国内还未出版，可以去购买 ACM 会员，在 &lt;a href=&#34;https://learning.oreilly.com/library/view/programming-kubernetes/9781492047094/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Oreilly 官网&lt;/a&gt; 上阅读。
或者加入 &lt;a href=&#34;https://cloudnative.to/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;，社区内分享了 Programming Kubernetes 中文版（腾讯内部翻译）。在 &lt;a href=&#34;https://github.com/cloudnativeto/community/issues/37&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;社区 Github 仓库 Issue&lt;/a&gt; 下回复即可。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-源码剖析&#34;&gt;Kubernetes 源码剖析&lt;/h3&gt;
&lt;p&gt;对 Kubernetes 编程有了基础的了解后，推荐大家阅读 &lt;a href=&#34;https://item.jd.com/12665791.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Kubernetes 源码剖析》&lt;/a&gt;，由来自百度 BFE 团队的郑东旭大佬写的。
前文说了，Kubernetes 本身的很多组件是通过 controller 模式来写的，对于我们编写 Kubernetes 扩展应用来说，是极好的样例代码。
书中第 3 章分析了 Kubernetes 核心数据结构，第 5 章详细的分析了在扩展编程时必不可少的依赖库 client-go，有需求的同学还可以根据第 2 章的说明自己构建 Kubernetes 组件。&lt;/p&gt;
&lt;p&gt;目前（2020-08）云原生社区正在组织 Kubernetes 源码剖析精读活动，有兴趣的同学可以加入一起学习，具体信息查看 &lt;a href=&#34;https://github.com/cloudnativeto/community/issues/34&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;社区 Issue&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;深入剖析-kubernetes&#34;&gt;深入剖析 Kubernetes&lt;/h3&gt;
&lt;p&gt;这是极客时间的课程，其中的第 23、24、25 节简短的过了一下 Kubernetes 编程。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2011/09/restful.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理解 RESTful 架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yangxikun.com/kubernetes/2020/01/30/kubernetes-apiserver-concurrent-safe.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes ApiServer 并发安全机制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://time.geekbang.org/column/article/42076&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入剖析 Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
