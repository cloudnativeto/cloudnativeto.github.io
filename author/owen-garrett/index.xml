<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Owen Garrett | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/owen-garrett/</link>
      <atom:link href="https://cloudnative.to/author/owen-garrett/index.xml" rel="self" type="application/rss+xml" />
    <description>Owen Garrett</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/owen-garrett/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Owen Garrett</title>
      <link>https://cloudnative.to/author/owen-garrett/</link>
    </image>
    
    <item>
      <title>你真的需要服务网格吗？</title>
      <link>https://cloudnative.to/blog/do-i-need-a-service-mesh/</link>
      <pubDate>Mon, 01 Apr 2019 11:39:27 +0800</pubDate>
      <guid>https://cloudnative.to/blog/do-i-need-a-service-mesh/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://www.nginx.com/blog/do-i-need-a-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;“服务网格”是一个热点话题。似乎去年每一个与容器相关的大会都包含了一个“服务网格”议题，世界各地有影响力的业内人士都在谈论这项革命性的技术带来的好处。&lt;/p&gt;
&lt;p&gt;然而，截至 2019 年初，服务网格技术仍不成熟。主要的实现产品 Istio 还没有准备好进行广泛的企业级部署，只有少数成功的案例运行在生产环境中。也存在其他的服务网格产品，但并没有得到业界专家所说的广泛关注。&lt;/p&gt;
&lt;p&gt;我们如何协调这种不匹配呢？一方面，我们听到“你需要一个服务网格”的声音，而另一方面，企业和公司多年来一直在没有服务网格的容器平台上成功地运行着它们的应用。&lt;/p&gt;
&lt;h2 id=&#34;开始使用-kubernetes&#34;&gt;开始使用 Kubernetes&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;服务网格是你旅途中的一个里程碑，但它不是起点。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在容器应用的生产环境部署中，Kubernetes 已经被证明是一个可以胜任的平台。它提供了一个丰富的网络层，提供了&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/#discovering-services&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务发现&lt;/a&gt;， &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;负载均衡&lt;/a&gt;， &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;健康检查&lt;/a&gt; 和&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/network-policies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;访问控制&lt;/a&gt; 的能力，以支持复杂的分布式系统。&lt;/p&gt;
&lt;p&gt;这些功能对于简单和易于理解的应用程序来说已经足够了， &lt;a href=&#34;https://www.docker.com/solutions/MTA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;遗留的应用已经被容器化&lt;/a&gt;。它们允许你满怀信心地部署应用，根据需要扩容，避免意外故障，并实现简单的访问控制。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;1&#34; srcset=&#34;
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1byouk0a6j30sg0da3zi_huf73d6b057c2c2dbac2eb19948b836329_64340_f9d7466ad0132e80ce56c3777c5926f4.webp 400w,
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1byouk0a6j30sg0da3zi_huf73d6b057c2c2dbac2eb19948b836329_64340_914decb0e2321b899df0145c45cf597e.webp 760w,
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1byouk0a6j30sg0da3zi_huf73d6b057c2c2dbac2eb19948b836329_64340_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/do-i-need-a-service-mesh/006tKfTcly1g1byouk0a6j30sg0da3zi_huf73d6b057c2c2dbac2eb19948b836329_64340_f9d7466ad0132e80ce56c3777c5926f4.webp&#34;
               width=&#34;760&#34;
               height=&#34;355&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      1
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;① Kubernetes 提供了带有服务发现和负载均衡的 4 层网络。② NGINX 入口控制器负责把外部连接负载均衡到运行在 Kubernetes 集群的服务。&lt;/p&gt;
&lt;p&gt;Kubernetes 在它的 API 中提供了一个入口（Ingress）资源对象。这一对象定义了如何选择可以被集群外部访问的服务，一个入口控制器实现了那些策略。NGINX 作为大多数实现中负载均衡的选择，我们为开源的 NGINX 和 NINGX Plus 都提供了&lt;a href=&#34;https://www.nginx.com/products/nginx/kubernetes-ingress-controller/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;高性能、可支持的、生成环境的实现&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;对很多线上应用而言，Kubernetes 和入口控制器提供了所有需要的功能，不需要任何更复杂的演进。&lt;/p&gt;
&lt;h2 id=&#34;下一步更复杂的应用&#34;&gt;下一步：更复杂的应用&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;添加安全，监控和流量管理来提升控制和可视化。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当运维团队管理生产环境中的应用时，有时候需要更深入的控制和可见性。复杂的应用可能会表现出复杂的网络行为，在生产环境频繁的变化会给应用的稳定性和一致性带来更多的风险。在共享的 Kubernetes 集群上运行时，可能需要加密组件之间的通信。&lt;/p&gt;
&lt;p&gt;每一项需求都可以使用易于理解的技术来满足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要保护服务间的通信，你可以使用 SPIFFE 或等效的方法在每个服务间实现双向 TLS。&lt;/li&gt;
&lt;li&gt;为了识别性能和可靠性的问题，每个微服务可以导出&lt;a href=&#34;https://prometheus.io/docs/instrumenting/ters/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;兼容 Prometheus 的指标&lt;/a&gt;，并使用 Grafana 等工具进行分析。&lt;/li&gt;
&lt;li&gt;要调试这些问题，可以将&lt;a href=&#34;https://opentracing.io/docs/overview/tracers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分布式追踪&lt;/a&gt;嵌入到每个微服务中（支持多种语言和框架）。&lt;/li&gt;
&lt;li&gt;为实现高级的负载均衡策略、蓝绿部署、金丝雀发布和熔断器，你可以选择性的部署代理和负载均衡器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;2&#34; srcset=&#34;
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d0pnxtybj30sg0brdgp_huf5cf150e6cb187604a24b14061a7338e_63898_238b83639e96e26e6d4b299a274d1798.webp 400w,
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d0pnxtybj30sg0brdgp_huf5cf150e6cb187604a24b14061a7338e_63898_d7f23567c273e054af8e975f2eaa9f37.webp 760w,
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d0pnxtybj30sg0brdgp_huf5cf150e6cb187604a24b14061a7338e_63898_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/do-i-need-a-service-mesh/006tKfTcly1g1d0pnxtybj30sg0brdgp_huf5cf150e6cb187604a24b14061a7338e_63898_238b83639e96e26e6d4b299a274d1798.webp&#34;
               width=&#34;760&#34;
               height=&#34;314&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;独立的微服务可以使用&lt;strong&gt;Prometheus 导出器，分布式追踪器，双向 TLS 和 SPIEE 进行扩展&lt;/strong&gt;。代理可以被部署为独立的服务如①，或者像②一样提供中央路由网格。&lt;/p&gt;
&lt;p&gt;其中一些技术需要对每个服务做一些小的修改——例如，将证书注入到容器中，或者为 Prometheus 和 OpenTracing 添加模块。NGINX Plus 可以为关键服务提供专用的负载均衡，通过服务发现和 API 驱动的配置来编排更改。NGINX 微服务参考架构中的[Router Mesh](&lt;a href=&#34;https://www.nginx.com/blog/microservices-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.nginx.com/blog/microservices-&lt;/a&gt; Reference - Architecture - NGINX - Router - mes-model/)模式实现了一个集群范围的流量控制点。&lt;/p&gt;
&lt;p&gt;现在，几乎所有在生产环境中运行的容器化应用都使用类似的技术来提高控制和可见性。&lt;/p&gt;
&lt;h2 id=&#34;为什么我还需要一个服务网格&#34;&gt;为什么我还需要一个服务网格？&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;如果上面的技术在生产环境已经被验证，服务网格增加了什么？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上一节中描述的每个步骤都给应用程序开发人员和运维团队带来了适应它的负担。单独来说，这些负担很轻，因为解决方案很好理解，但是重量会累积。最终，运行大规模、复杂应用的企业组织可能会达到一个临界点，在这个临界点上，提高服务到服务的应用将变得难以扩展。&lt;/p&gt;
&lt;p&gt;这是服务网格承诺要解决的核心问题。服务网格的目标是以标准化和透明的方式交付所需的功能，对应用透明。&lt;/p&gt;
&lt;p&gt;服务网格技术仍然是一项新技术，只有很少的生产环境的部署。早期的部署建立在复杂的、自主开发的解决方案之上，具体到每个采用者的需求。一种更为普遍的方法正在出现，称为“sidecar 代理”模式。该方法在每个服务实例边部署一个 7 层代理；这些代理捕获所有的网络流量，并以一致的方式提供额外的功能——双向 TLS、追踪、度量、流量控制等。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-3&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;3&#34; srcset=&#34;
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d19j3xxqj30sg0e0wg0_hu4c30679ebd3b47a10487cc6628c5340b_95191_125ef9001424086ac45cb09aee0ae768.webp 400w,
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d19j3xxqj30sg0e0wg0_hu4c30679ebd3b47a10487cc6628c5340b_95191_605e52c09bb164ec29317db3a2c83e3e.webp 760w,
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d19j3xxqj30sg0e0wg0_hu4c30679ebd3b47a10487cc6628c5340b_95191_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/do-i-need-a-service-mesh/006tKfTcly1g1d19j3xxqj30sg0e0wg0_hu4c30679ebd3b47a10487cc6628c5340b_95191_125ef9001424086ac45cb09aee0ae768.webp&#34;
               width=&#34;760&#34;
               height=&#34;374&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      3
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在服务网格中，每个容器都包含一个嵌入式代理，它拦截所有的进出流量。代理代替服务处理加密、监视和跟踪，并实现高级的流量管理。&lt;/p&gt;
&lt;p&gt;服务网格技术仍然是一个非常新的技术，供应商和开源项目都急于实现稳定、功能强大且易于操作的产品。2019 年几乎肯定会是&lt;a href=&#34;https://businesscomputingworld.co.uk/t/year-of-service-mesh-what-to-in-2019/1345&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“服务网格年”&lt;/a&gt;，在这个充满希望的技术中，一些实现将真正为通用应用程序的生产环境部署做好准备。&lt;/p&gt;
&lt;h2 id=&#34;现在我应该做什么&#34;&gt;现在我应该做什么？&lt;/h2&gt;
&lt;p&gt;2019 年初，仅在急需短期方案，并且其它解决方案的局限性导致需求无法被满足的情况下，才需要考虑采用仍属早期阶段的服务网格技术。当前服务网格实现的不成熟和快速变化使得部署它们的成本和风险很高。随着技术的成熟，成本和风险将会降低，采用服务网格的时间点将会越来越近。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-4&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;4&#34; srcset=&#34;
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d1iior8kj30sg0fxjs0_hu454b56a094b270c444a365f5632e733d_45815_79c91600eda9ed2eb88ac2748b80034e.webp 400w,
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d1iior8kj30sg0fxjs0_hu454b56a094b270c444a365f5632e733d_45815_b7966f11f73be6bacf8e9251748f2c67.webp 760w,
               /blog/do-i-need-a-service-mesh/006tKfTcly1g1d1iior8kj30sg0fxjs0_hu454b56a094b270c444a365f5632e733d_45815_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/do-i-need-a-service-mesh/006tKfTcly1g1d1iior8kj30sg0fxjs0_hu454b56a094b270c444a365f5632e733d_45815_79c91600eda9ed2eb88ac2748b80034e.webp&#34;
               width=&#34;760&#34;
               height=&#34;426&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      4
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;随着应用程序复杂性的增加，服务网格将成为实现服务到服务的能力的现实选择。&lt;/p&gt;
&lt;p&gt;但是，不要让缺乏稳定成熟的服务网格延误你今天正在考虑的任何计划。正如我们所看到的，Kubernetes 和其他编排平台提供了丰富的功能，使得我们可以遵循熟悉的、易于理解的方式来实现复杂的功能。现在继续沿着这些路径前进，使用经过验证的解决方案，如入口路由器和内部负载均衡器。当你到达临界点时，将会知道是时候考虑使用服务网格去实现它们了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
