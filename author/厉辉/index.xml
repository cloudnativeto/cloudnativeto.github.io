<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>厉辉 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/%E5%8E%89%E8%BE%89/</link>
      <atom:link href="https://cloudnativecn.com/author/%E5%8E%89%E8%BE%89/index.xml" rel="self" type="application/rss+xml" />
    <description>厉辉</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 20 Jul 2020 12:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/author/%E5%8E%89%E8%BE%89/avatar_hu612907551349602803.jpg</url>
      <title>厉辉</title>
      <link>https://cloudnativecn.com/author/%E5%8E%89%E8%BE%89/</link>
    </image>
    
    <item>
      <title>如何学习开源项目源码</title>
      <link>https://cloudnativecn.com/blog/study-groups/</link>
      <pubDate>Mon, 20 Jul 2020 12:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/study-groups/</guid>
      <description>&lt;p&gt;IT 技术日新月异，想必每个 IT 人都会有类似的焦虑：我该学习什么？哪些知识学到就是赚到？怎样学习才能最有效提升编程能力？&lt;/p&gt;
&lt;p&gt;阅读优秀的代码是提高编程能力万无一失的办法。诚然，提高编程能力的显著方法是写更多代码，但也需要静下心来品味优秀的代码，大侠行走江湖也需要武功秘籍，而当今优秀的开源项目代码便是程序员的武林秘籍。&lt;/p&gt;
&lt;p&gt;优秀的开源项目浩如烟海，应该如何选择适合自己的项目呢？&lt;/p&gt;
&lt;p&gt;选择方式有很多，比如项目使用到什么开源项目就学习该项目的源码，比如基于 Apache Dubbo 构建微服务，则可以学习 Dubbo 框架源码，理解其底层机制以及原理（比如服务治理），学以致用；阅读那些让你印象深刻或者自己可以掌握的源码，比如从一个小项目或者一个插件开始，也是不错的选择；最重要的是，大多数人时间有限但选择又太多，一定要选择适合自己的，能够融入自己的知识体系。如果你是云原生爱好者，那么阅读 Kubernetes 核心源码就是一个非常好的选择。&lt;/p&gt;
&lt;p&gt;找到一个合适的开源项目后，但在具体实践的时候常常因为一些不正确的看法而误入歧途，中途折戟：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺乏自信，我并未参与该项目开发，因此我很难深入理解其源码&lt;/li&gt;
&lt;li&gt;数据结构和算法很重要，所以只需要研究开源项目的数据结构和算法就够了&lt;/li&gt;
&lt;li&gt;“Talk is cheap, show me the code”，一头扎进源码，只见树木不见森林&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些看法要么会让人半途而废又或者徒劳无功，那该如何更高效的学习开源项目的源码呢？&lt;/p&gt;
&lt;p&gt;简而言之，纵览全局，按需学习，由上及下，自下而上，避免一开始陷入细节。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纵览全局，运筹帷幄。在开始之前需要宏观上了解要学习的项目，了解其背景、功能、业务价值等等，学习方式非常多，比如项目网站、入门教程、官方文档目录等，方便我们快速纵览全局，了解项目主要组成部分。&lt;/li&gt;
&lt;li&gt;按需学习，有所取舍。工作后时间有限精力有限，需要在纵览全局后辨别出哪三个功能是对自己最有益处的，摒弃其他模块，全力攻克对自己有价值的功能以及源码。&lt;/li&gt;
&lt;li&gt;由上及下，先理解功能、原理以及关键设计后再剖析源码。&lt;/li&gt;
&lt;li&gt;自下而上，从一个个实践问题剖析源码。&lt;/li&gt;
&lt;li&gt;拓展联系，触类旁通。深度探索（比如 5W2H），横向拓展（比如多种 pod 调度算法横向对比），纵向类比（比如 Kubernetes 与数据库概念上的异同）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读源码如读书，积累的越多，越熟练，读得越快。&lt;/p&gt;
&lt;h2 id=&#34;读书活动介绍&#34;&gt;读书活动介绍&lt;/h2&gt;
&lt;p&gt;云原生是未来 10 年 IT 发展最重要的趋势，而 Kubernetes 正是云原生的基石。另一方面，《Kubernetes 源码剖析》深入浅出的讲解了 kubernetes 的架构以及核心源码，是进阶 Kubernetes 的不二之选。&lt;/p&gt;
&lt;p&gt;云原生社区 Kubernetes 源码研习社招募志同道合的热爱学习的小伙伴，共同研读《Kubernetes 源码剖析》。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-k8s&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;k8s&#34; srcset=&#34;
               /blog/study-groups/images/kubernetes-analysis_hu1545058469582210812.webp 400w,
               /blog/study-groups/images/kubernetes-analysis_hu16436039113501248389.webp 760w,
               /blog/study-groups/images/kubernetes-analysis_hu3828561626993370982.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/study-groups/images/kubernetes-analysis_hu1545058469582210812.webp&#34;
               width=&#34;350&#34;
               height=&#34;350&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      k8s
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;加入研习社方式&#34;&gt;加入研习社方式&lt;/h2&gt;
&lt;p&gt;加入知识星球，扫码置顶二维码即可加入云原生社区的 Kubernetes 源码研习社&lt;/p&gt;
&lt;p&gt;欢迎加入 &lt;a href=&#34;https://t.zsxq.com/meIurBu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-知识星球二维码&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;知识星球二维码&#34; srcset=&#34;
               /blog/study-groups/images/study-group_hu2879165382770848233.webp 400w,
               /blog/study-groups/images/study-group_hu12250296117049207607.webp 760w,
               /blog/study-groups/images/study-group_hu17090601805601776236.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/study-groups/images/study-group_hu2879165382770848233.webp&#34;
               width=&#34;248&#34;
               height=&#34;248&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      知识星球二维码
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;你能收获什么&#34;&gt;你能收获什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对 Kubernetes 核心源码有更深刻的理解&lt;/li&gt;
&lt;li&gt;一群热爱云原生的志同道合的朋友&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>性能调优利器--火焰图</title>
      <link>https://cloudnativecn.com/blog/flame-graph/</link>
      <pubDate>Wed, 17 Jun 2020 12:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/flame-graph/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要分享火焰图使用技巧，介绍 systemtap 的原理机制，如何使用火焰图快速定位性能问题原因，同时加深对 systemtap 的理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们回想一下，曾经作为编程新手的我们是如何调优程序的？通常是在没有数据的情况下依靠主观臆断来瞎蒙，稍微有些经验的同学则会对差异代码进行二分或者逐段调试。这种定位问题的方式不仅耗时耗力，而且还不具有通用性，当遇到其他类似的性能问题时，需要重复踩坑、填坑，那么如何避免这种情况呢？&lt;/p&gt;
&lt;p&gt;俗语有云：“工欲善其事，必先利其器。”个人认为，程序员定位性能问题也需要一件“利器”。如同医生给病人看病，需要依靠专业的医学工具（比如 X 光片、听诊器等）进行诊断，最后依据医学工具的检验结果快速精准地定位出病因所在。性能调优工具（比如 perf / gprof 等）之于性能调优就像 X 光之于病人一样，它可以一针见血地指出程序的性能瓶颈。&lt;/p&gt;
&lt;p&gt;但是常用的性能调优工具 perf 等，在呈现内容上只能单一地列出调用栈或者非层次化的时间分布，不够直观。这里我推荐大家配合使用火焰图，它将 perf 等工具采集的数据呈现得更为直观。&lt;/p&gt;
&lt;h2 id=&#34;初识火焰图&#34;&gt;&lt;strong&gt;初识火焰图&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;火焰图（Flame Graph）是由 Linux 性能优化大师 Brendan Gregg 发明的，和所有其他的 profiling 方法不同的是，火焰图以一个全局的视野来看待时间分布，它从底部往顶部，列出所有可能导致性能瓶颈的调用栈。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/flame-graph/flame_hu17440817166298240979.webp 400w,
               /blog/flame-graph/flame_hu8530811782537441271.webp 760w,
               /blog/flame-graph/flame_hu10556362920939507545.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/flame-graph/flame_hu17440817166298240979.webp&#34;
               width=&#34;760&#34;
               height=&#34;391&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;火焰图整个图形看起来就像一个跳动的火焰，这就是它名字的由来。&lt;/p&gt;
&lt;p&gt;火焰图有以下特征（这里以 on-cpu 火焰图为例）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每一列代表一个调用栈，每一个格子代表一个函数；&lt;/li&gt;
&lt;li&gt;纵轴展示了栈的深度，按照调用关系从下到上排列，最顶上格子代表采样时，正在占用 cpu 的函数；&lt;/li&gt;
&lt;li&gt;横轴的意义是指：火焰图将采集的多个调用栈信息，通过按字母横向排序的方式将众多信息聚合在一起。需要注意的是它并不代表时间；&lt;/li&gt;
&lt;li&gt;横轴格子的宽度代表其在采样中出现频率，所以一个格子的宽度越大，说明它是瓶颈原因的可能性就越大；&lt;/li&gt;
&lt;li&gt;火焰图格子的颜色是随机的暖色调，方便区分各个调用信息；&lt;/li&gt;
&lt;li&gt;其他的采样方式也可以使用火焰图，on-cpu 火焰图横轴是指 cpu 占用时间，off-cpu 火焰图横轴则代表阻塞时间；&lt;/li&gt;
&lt;li&gt;采样可以是单线程、多线程、多进程甚至是多 host，进阶用法可以参考附录&lt;a href=&#34;#%e8%bf%9b%e9%98%b6%e9%98%85%e8%af%bb&#34;&gt;进阶阅读&lt;/a&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;火焰图类型&#34;&gt;&lt;strong&gt;火焰图类型&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;常见的火焰图类型有 On-CPU，Off-CPU，还有 Memory，Hot/Cold，Differential 等等。他们分别适合处理什么样的问题呢？&lt;/p&gt;
&lt;p&gt;这里笔者主要使用到的是 On-CPU、Off-CPU 以及 Memory 火焰图，所以这里仅仅对这三种火焰图作比较，也欢迎大家补充和斧正。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/flame-graph/flame2_hu13389531408563876184.webp 400w,
               /blog/flame-graph/flame2_hu10986910255347744809.webp 760w,
               /blog/flame-graph/flame2_hu9734707410187106099.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/flame-graph/flame2_hu13389531408563876184.webp&#34;
               width=&#34;760&#34;
               height=&#34;461&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;火焰图分析技巧&#34;&gt;&lt;strong&gt;火焰图分析技巧&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;纵轴代表调用栈的深度（栈桢数），用于表示函数间调用关系：下面的函数是上面函数的父函数；&lt;/li&gt;
&lt;li&gt;横轴代表调用频次，一个格子的宽度越大，越说明其可能是瓶颈原因；&lt;/li&gt;
&lt;li&gt;不同类型火焰图适合优化的场景不同，比如 on-cpu 火焰图适合分析 cpu 占用高的问题函数，off-cpu 火焰图适合解决阻塞和锁抢占问题；&lt;/li&gt;
&lt;li&gt;无意义的事情：横向先后顺序是为了聚合，跟函数间依赖或调用关系无关；火焰图各种颜色是为方便区分，本身不具有特殊含义；&lt;/li&gt;
&lt;li&gt;多练习：进行性能优化有意识的使用火焰图的方式进行性能调优（如果时间充裕）；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何绘制火焰图&#34;&gt;&lt;strong&gt;如何绘制火焰图？&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;要生成火焰图，必须要有一个顺手的动态追踪工具，如果操作系统是 Linux 的话，那么通常通常是 perf 或者 systemtap 中的一种。其中 perf 相对更常用，多数 Linux 都包含了 perf 这个工具，可以直接使用；SystemTap 则功能更为强大，监控也更为灵活。网上关于如何使用 perf 绘制火焰图的文章非常多而且丰富，所以本文将以 SystemTap 为例。&lt;/p&gt;
&lt;p&gt;SystemTap 是动态追踪工具，它通过探针机制，来采集内核或者应用程序的运行信息，从而可以不用修改内核和应用程序的代码，就获得丰富的信息，帮你分析、定位想要排查的问题。SystemTap 定义了一种类似的 DSL 脚本语言，方便用户根据需要自由扩展。不过，不同于动态追踪的鼻祖 DTrace，SystemTap 并没有常驻内核的运行时，它需要先把脚本编译为内核模块，然后再插入到内核中执行。这也导致 SystemTap 启动比较缓慢，并且依赖于完整的调试符号表。&lt;/p&gt;
&lt;p&gt;使用 SystemTap 绘制火焰图的主要流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装 SystemTap 以及 操作系统符号调试表&lt;/li&gt;
&lt;li&gt;根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本&lt;/li&gt;
&lt;li&gt;生成内核模块&lt;/li&gt;
&lt;li&gt;运行 SystemTap 或者运行生成的内核模块统计数据&lt;/li&gt;
&lt;li&gt;将统计数据转换成火焰图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文演示步骤将会基于操作系统 Tlinux 2.2 ( Linux 内核版本 3.10.107)&lt;/p&gt;
&lt;h3 id=&#34;安装-systemtap-以及-操作系统符号调试表&#34;&gt;&lt;strong&gt;安装 SystemTap 以及 操作系统符号调试表&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用 yum 工具安装 systemtap:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yum install systemtap systemtap-runtime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于 systemtap 工具依赖于完整的调试符号表，而且生产环境不同机器的内核版本不同（虽然都是 Tlinux 2.2 版本，但是内核版本后面的小版本不一样，可以通过 &lt;code&gt;uname -a&lt;/code&gt; 命令查看）所以我们还需要安装 kernel-debuginfo 包、kernel-devel 包
我这里是安装了这两个依赖包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kernel-devel-3.10.107-1-tlinux2-0046.x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kernel-debuginfo-3.10.107-1-tlinux2-0046.x86_64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本&#34;&gt;&lt;strong&gt;根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;使用 SystemTap 统计相关数据往往需要自己依照它的语法，编写脚本，具有一定门槛。幸运的是，github 上春哥（agentzh）开源了两组他常用的 SystemTap 脚本：&lt;a href=&#34;https://github.com/openresty/openresty-systemtap-toolkit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;openresty-systemtap-toolkit&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/openresty/stapxx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stapxx&lt;/a&gt;，这两个工具集能够覆盖大部分 C 进程、nginx 进程以及 Openresty 进程的性能问题场景。&lt;/p&gt;
&lt;p&gt;我们这里需要绘制 off-cpu 火焰图，所以使用 sample-bt-off-cpu 脚本即可&lt;/p&gt;
&lt;h3 id=&#34;生成内核模块&#34;&gt;&lt;strong&gt;生成内核模块&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;现在我们有了统计脚本，也安装好了 systemtap，正常来说就可以使用了，但由于 systemtap 是通过生成内核模块的方式统计相关探针的统计数据，而 tlinux 要求所有运行的内核模块需要先到 tlinux 平台签名才可以运行，所以：&lt;/p&gt;
&lt;p&gt;故需要先修改 off-cpu 脚本，让其先生成内核模块；之后对该内核模块作签名；最后使用 systemtap 命令手工运行该脚本，统计监控数据。&lt;/p&gt;
&lt;p&gt;Systemtap 执行流程如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/flame-graph/flame3_hu15512788063366075042.webp 400w,
               /blog/flame-graph/flame3_hu15936041537438942481.webp 760w,
               /blog/flame-graph/flame3_hu15987258623718464242.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/flame-graph/flame3_hu15512788063366075042.webp&#34;
               width=&#34;760&#34;
               height=&#34;372&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parse：分析脚本语法&lt;/li&gt;
&lt;li&gt;elaborate：展开脚本 中定义的探针和连接预定义脚本库，分析内核和内核模块的调试信息&lt;/li&gt;
&lt;li&gt;translate：.将脚本编译成 c 语言内核模块文件放 在$HOME/xxx.c 缓存起来，避免同一脚本多次编译&lt;/li&gt;
&lt;li&gt;build：将 c 语言模块文件编译成.ko 的内核模块，也缓存起来。&lt;/li&gt;
&lt;li&gt;把模块交给 staprun，staprun 加载内核模块到内核空间，stapio 连接内核模块和用户空间，提供交互 IO 通道，采集数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们这里修改下 off-cpu 的 stap 脚本，让其只运行完第四阶段，只生成一个内核模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 在 stap 命令后增加 -p4 参数，告诉 systemtap，当前只需要执行到第四阶段
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;open my $in, &amp;#34;|stap -p4 --skip-badvars --all-modules -x $pid -d &amp;#39;$exec_path&amp;#39; --ldd $d_so_args $stap_args -&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;or die &amp;#34;Cannot run stap: $!\n&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改好之后运行脚本，会生成一个内核模块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// -p 8682 是需要监控的进程的进程号
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// -t 30 是指会采样 30 秒
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./sample-bt-off-cpu -p 8692 -t 30
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成的内核模块名称形如 &lt;code&gt;stap_xxxxx.ko&lt;/code&gt;模块名称
由于读者并不需要关心内核模块签名，故章节略过&lt;/p&gt;
&lt;h3 id=&#34;运行内核模块统计数据&#34;&gt;&lt;strong&gt;运行内核模块统计数据&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;内核模块签名完成后，便可以使用 staprun 命令手工运行相关内核模块了&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 注意：签名脚本会将生产的内核模块重命名，需要将名字改回去……（脚本 bug）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;staprun -x {进程号} {内核模块名} &amp;gt; demo.bt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;值得注意的是，监控的进程要有一定负载 systemtap 才可以采集到相关数据，即在采集时，同时需要要有一定请求量（通常是自己构造请求，压测进程）&lt;/p&gt;
&lt;h3 id=&#34;将统计数据转换成火焰图&#34;&gt;&lt;strong&gt;将统计数据转换成火焰图&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;获得了统计数据 &lt;code&gt;demo.bt&lt;/code&gt; 后，便可以使用火焰图工具绘制火焰图了&lt;/p&gt;
&lt;p&gt;下载 FlameGraph，链接：&lt;a href=&#34;https://github.com/brendangregg/FlameGraph&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/brendangregg/FlameGraph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./stackcollapse-stap.pl demo.bt &amp;gt; demo.folded
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./flamegraph.pl demo.folded &amp;gt; demo.svg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样便获得了 off-cpu 火焰图：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-mark&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;mark&#34; srcset=&#34;
               /blog/flame-graph/flame4_hu16421613459326342566.webp 400w,
               /blog/flame-graph/flame4_hu3567047504675913648.webp 760w,
               /blog/flame-graph/flame4_hu11831998470927052604.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/flame-graph/flame4_hu16421613459326342566.webp&#34;
               width=&#34;760&#34;
               height=&#34;261&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      mark
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;看图说话&#34;&gt;&lt;strong&gt;看图说话&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;趁热打铁，通过几张火焰图熟悉下如何使用火焰图&lt;/p&gt;
&lt;p&gt;图片源于春哥微博或者本人近期绘制的性能火焰图&lt;/p&gt;
&lt;h3 id=&#34;on-cpu-火焰图&#34;&gt;&lt;strong&gt;on-cpu 火焰图&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;apache-apisix-qps-急剧下降问题&#34;&gt;&lt;strong&gt;Apache APISIX QPS 急剧下降问题&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-mark&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;mark&#34; srcset=&#34;
               /blog/flame-graph/flame5_hu8400090647731669316.webp 400w,
               /blog/flame-graph/flame5_hu15255960140184928910.webp 760w,
               /blog/flame-graph/flame5_hu1023114135547932129.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/flame-graph/flame5_hu8400090647731669316.webp&#34;
               width=&#34;760&#34;
               height=&#34;112&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      mark
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Apache APISIX 是一个开源国产的高性能 API 网关，之前在进行选型压测时，发现当 Route 匹配不中场景下，QPS 急剧下降，在其 CPU（四十八核）占用率几乎达到 100% 的情况下只有几千 QPS，通过绘制火焰图发现，其主要耗时在一个 table 插入阶段 (&lt;code&gt;lj_cf_table_insert&lt;/code&gt;)，分析代码发现是该 table 一直没有释放，每次匹配不中时，路由会向一张用于统计的表中插入一条数据，导致该表越来越大，后续插入耗时过长导致 QPS 下降。&lt;/p&gt;
&lt;h3 id=&#34;off-cpu-火焰图&#34;&gt;&lt;strong&gt;off-cpu 火焰图&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;nginx-互斥锁问题&#34;&gt;&lt;strong&gt;nginx 互斥锁问题&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/flame-graph/flame6_hu16481928548452157118.webp 400w,
               /blog/flame-graph/flame6_hu7115051806518624078.webp 760w,
               /blog/flame-graph/flame6_hu9343465277755431593.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/flame-graph/flame6_hu16481928548452157118.webp&#34;
               width=&#34;760&#34;
               height=&#34;421&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这是一张 nginx 的 off-cpu 火焰图，我们可以很快锁定到 &lt;code&gt;ngx_common_set_cache_fs_size -&amp;gt; ngx_shmtx_lock -&amp;gt; sem_wait&lt;/code&gt; 这段逻辑使用到了互斥锁，它让 nginx 进程绝大部分阻塞等待时间花费在获取该锁。&lt;/p&gt;
&lt;h4 id=&#34;agent-监控上报断点问题&#34;&gt;&lt;strong&gt;agent 监控上报断点问题&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/flame-graph/flame7_hu11154077035153741919.webp 400w,
               /blog/flame-graph/flame7_hu14171547582830268154.webp 760w,
               /blog/flame-graph/flame7_hu5186403192463940925.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/flame-graph/flame7_hu11154077035153741919.webp&#34;
               width=&#34;760&#34;
               height=&#34;264&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这是一张 agent 的 off-cpu 火焰图，它是一个多线程异步事件模型，主线程处理各个消息，多个线程分别负责配置下发或者监控上报。当前问题出现在监控上报性能差，无法在周期（一分钟）内完成监控数据上报，导致监控断点，通过 off-cpu 火焰图我们可以分析出，该上报线程花费了大量的时间使用 curl_easy_perform 接口收发 http 监控数据消息。&lt;/p&gt;
&lt;p&gt;依据火焰图将发送 http 消息的逻辑改为异步非阻塞后，该问题解决。&lt;/p&gt;
&lt;h2 id=&#34;附录&#34;&gt;&lt;strong&gt;附录&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;进阶阅读&#34;&gt;&lt;strong&gt;进阶阅读&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;谷歌搜索演讲：Blazing Performance with Flame Graphs&lt;/li&gt;
&lt;li&gt;演讲 ppt：&lt;a href=&#34;https://www.slideshare.net/brendangregg/blazing-performance-with-flame-graphs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.slideshare.net/brendangregg/blazing-performance-with-flame-graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《SystemTap 新手指南》：&lt;a href=&#34;https://spacewander.gitbooks.io/systemtapbeginnersguide_zh/content/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://spacewander.gitbooks.io/systemtapbeginnersguide_zh/content/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;极客时间《Linux 性能优化实战》&amp;ndash;倪朋飞&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;faq&#34;&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;使用 perf 或者 systemtap 的方式采集数据，会对后台服务有性能影响吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有，但是很小，可以基本忽略不计。&lt;/p&gt;
&lt;p&gt;它们使用系统的探针或者使用一些自定义的动态探针进行数据采集，第一对代码无侵入性，它既不需要停止服务，也不需要修改应用程序的代码；第二，它们是以内核模块/内核原生的方式跟踪用户态和内核态的所有事件，并通过一系列优化措施，进行采样统计，对目标服务性能影响极小，大概在 5% 左右或者更低的性能损耗。相较于将进程运行在沙箱的 valgrind 工具或静态调试工具 gdb 来说，动态追踪 perf 或者 systemtap 或者 ebpf 的性能损耗基本可以忽略不计。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目标进程重启后，systemtap 是否需要重新生成内核模块？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不需要。甚至同一个 linux 内核版本下的同一个二进制进程（md5 值一致），在安装 kernel 调试符号表后，便可以在生成采集指标的内核模块，并且可以多次使用。&lt;/p&gt;
&lt;p&gt;当 linux 内核版本不一致，符号表有变化，需要重新生成内核模块；当目标进程二进制文件重新编译后，也需要重新生成统计用的 systemtap 内核模块。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
