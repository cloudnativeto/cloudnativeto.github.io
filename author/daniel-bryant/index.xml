<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Bryant | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/daniel-bryant/</link>
      <atom:link href="https://cloudnative.to/author/daniel-bryant/index.xml" rel="self" type="application/rss+xml" />
    <description>Daniel Bryant</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/daniel-bryant/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Daniel Bryant</title>
      <link>https://cloudnative.to/author/daniel-bryant/</link>
    </image>
    
    <item>
      <title>KubeCon Chicago 主要收获：人工智能（AI）的缓慢崛起，平台工程的主导地位，以及 KubeCon NA 2023 对开发者体验的重新关注</title>
      <link>https://cloudnative.to/blog/kubecon-chicago-key-takeaways/</link>
      <pubDate>Mon, 13 Nov 2023 07:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/kubecon-chicago-key-takeaways/</guid>
      <description>&lt;p&gt;本文译自：&lt;a href=&#34;https://danielbryantuk.medium.com/kubecon-chicago-key-takeaways-3de5ca13b375&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://danielbryantuk.medium.com/kubecon-chicago-key-takeaways-3de5ca13b375&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：本文讨论了 KubeCon 的主要议题，包括平台工程、Kubernetes 的不断发展、开发者体验的重要性、对应用开发和集成的关注、云原生通信的捆绑问题、安全问题的重要性、对可持续性的关注，以及社区的力量。文章强调了在标准化和创新之间取得平衡的重要性，并预测云原生的未来将看到更多的 AI/LLMs。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这次 KubeCon NA 对我来说是一次非常不同的体验，因为我不是代表公司或办展位。然而，我仍然度过了一段愉快的时光，与云原生社区的许多人见面真是太棒了。回到芝加哥也很不错，这座城市对我们很好 —— 我几乎忘记了我有多喜欢芝加哥式深盘披萨！&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-chicago-key-takeaways/f1_hu4164b9bad2fea2a2013299fb70947f4c_127745_4159c88f1ab0e3f5c8db6a47eb7df806.webp 400w,
               /blog/kubecon-chicago-key-takeaways/f1_hu4164b9bad2fea2a2013299fb70947f4c_127745_c4bf27d2653ae6ecdaad24a3fb149c7a.webp 760w,
               /blog/kubecon-chicago-key-takeaways/f1_hu4164b9bad2fea2a2013299fb70947f4c_127745_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubecon-chicago-key-takeaways/f1_hu4164b9bad2fea2a2013299fb70947f4c_127745_4159c88f1ab0e3f5c8db6a47eb7df806.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以下是我从 KubeCon NA 2023 中得出的主要收获：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;云原生社区正在缓慢接受AI/LLM&lt;/li&gt;
&lt;li&gt;DevOps 已经过时：平台工程万物&lt;/li&gt;
&lt;li&gt;山中有金！在平台激战中销售镐和铲子&lt;/li&gt;
&lt;li&gt;Kubernetes 应该保持不完整（并不断发展）&lt;/li&gt;
&lt;li&gt;别忘了开发者体验！&lt;/li&gt;
&lt;li&gt;增加对应用程序开发和集成的关注&lt;/li&gt;
&lt;li&gt;云原生通信：打包获胜？&lt;/li&gt;
&lt;li&gt;安全是大生意&lt;/li&gt;
&lt;li&gt;更加关注可持续性：可观察性、扩展性和 FinOps&lt;/li&gt;
&lt;li&gt;社区，社区，社区&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;背景设定迎来了后期采用者&#34;&gt;背景设定：迎来了后期采用者&lt;/h2&gt;
&lt;p&gt;我从参加 KubeCon 芝加哥得到的总体感觉是，我们已经完全进入了&lt;a href=&#34;https://en.wikipedia.org/wiki/Diffusion_of_innovations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;创新扩散&lt;/a&gt;的后期采用者阶段。&lt;/p&gt;
&lt;p&gt;当然，像 KubeCon 这样的会议存在一个危险，即陷入（云原生）泡沫，走出会议时很容易认为整个世界都在运行 Kubernetes。这并不是真的，而且“&lt;a href=&#34;https://www.gartner.com/en/newsroom/press-releases/2023-10-30-gartner-says-50-percent-of-critical-enterprise-applications-will-reside-outside-of-centralized-public-cloud-locations-through-2027&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gartner 表示到 2027 年，50% 的关键企业应用将存储在集中的公共云位置之外&lt;/a&gt;”。然而，如果你睁大眼睛看，几乎 50% 的工作负载正在云中运行（或将要运行），这标志着后期采用者的到来。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-chicago-key-takeaways/f2_hu91ab04416f541095f56350d945cdf648_193229_5133806e3b1d4d9c646b9f8ead723528.webp 400w,
               /blog/kubecon-chicago-key-takeaways/f2_hu91ab04416f541095f56350d945cdf648_193229_0c718aea026aacb73c27d94929f83495.webp 760w,
               /blog/kubecon-chicago-key-takeaways/f2_hu91ab04416f541095f56350d945cdf648_193229_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubecon-chicago-key-takeaways/f2_hu91ab04416f541095f56350d945cdf648_193229_5133806e3b1d4d9c646b9f8ead723528.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我从活动的主题演讲和厂商展厅中感受到了这种转变。更多的强调放在了可靠性和值得信赖性上，而不是创新，产品套件和易于集成而不是“最佳解决方案”，以及伙伴关系和合作而不是个别组织的开创性。&lt;/p&gt;
&lt;p&gt;有了这个背景，让我们更深入地了解这些主要收获！&lt;/p&gt;
&lt;h2 id=&#34;云原生社区正在缓慢接受aillm&#34;&gt;云原生社区正在缓慢接受AI/LLM&lt;/h2&gt;
&lt;p&gt;与同一天举行的 KubeCon NA 同期活动的 &lt;a href=&#34;https://devday.openai.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAI DevDay&lt;/a&gt; 形成鲜明对比，KubeCon 上几乎没有关于人工智能的内容。如果你还没有观看 &lt;a href=&#34;https://www.youtube.com/watch?v=U9mJuUkhUzk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAI DevDay 的主题演讲&lt;/a&gt;，我鼓励你看看。Ed Sim 在他的每周 &lt;a href=&#34;https://www.whatshotit.vc/p/whats-in-enterprise-itvc-367&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;企业IT/VC快讯&lt;/a&gt; 中也提供了一个很好的总结。&lt;/p&gt;
&lt;p&gt;当然，KubeCon 的第一天主题演讲以人工智能为主题，但这似乎有点“外挂”，更侧重于为 AI/LLM 提供基础设施，而不是在开发或运营工作流中使用。在这里我不想过于判断，因为像 KubeCon 这样的活动需要数月的策划，而 AI 的发展是以每天的速度发生的。&lt;/p&gt;
&lt;p&gt;一些厂商的展位专注于“云端的 ChatGPT”，但我与赞助商的大多数交谈都集中在构建平台的现有问题上。如果你对在平台空间中使用 AI 的潜力感兴趣，我建议你在最近的 &lt;a href=&#34;https://www.infoq.com/podcasts/cloud-devops-trends-2023/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InfoQ 云和 DevOps 趋势报告播客&lt;/a&gt; 中与几位云原生和 DevOps 领导人，包括 Helen Beal、Abby Bangser、Matt Campbell 和 Steef-Jan Wiggers 一起聊一聊。&lt;/p&gt;
&lt;h2 id=&#34;devops-已经过时平台工程万物&#34;&gt;DevOps 已经过时：平台工程万物！&lt;/h2&gt;
&lt;p&gt;我相信我们都看过 Minions/Gru 平台工程和 DevOps 的表情包（如果没有，在我 &lt;a href=&#34;https://blog.getambassador.io/kubecon-eu-cloudnativecon-2023-summary-devex-debugging-and-doubling-down-on-community-82abee5853b3#acc6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon EU 2023 摘要&lt;/a&gt; 中提到过），而在 KubeCon 上每个人都在强调这一点。如果你搜索 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/program/schedule/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;程序日程&lt;/a&gt;，你会发现至少有两倍于提到 DevOps 的演讲数量的演讲提到了平台工程，而几乎没有一个演讲是以 DevOps 为标题的。&lt;/p&gt;
&lt;p&gt;这是这个领域的自然演变，伴随着这种变化的好与坏。&lt;/p&gt;
&lt;p&gt;“好”的是，我们正在围绕这个主题形成一个社区，并在行业内形成最佳实践。我要向云原生计算基金会（CNCF）TAG App 交付团队致以崇高的赞扬，因为他们发布了他们的“&lt;a href=&#34;https://tag-app-delivery.cncf.io/whitepapers/platform-eng-maturity-model/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;平台工程成熟度模型&lt;/a&gt;”（以及向云原生猫的 Abby Bangser 致以特别的赞扬）&lt;/p&gt;
&lt;p&gt;在 KubeCon EU 2024 中还将举办 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/co-located-events/platform-engineering-day/#call-for-proposals&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;平台工程日同期活动&lt;/a&gt;。自从我整理了一堆关于社区中出现的平台工程思想，并在 KubeCon 2022 上呈现了“&lt;a href=&#34;https://www.youtube.com/watch?v=btUYeOa7JPI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从 Kubernetes 到 PaaS 再到…嗯，下一步是什么？&lt;/a&gt;”的想法后，我们走了很长的路。&lt;/p&gt;
&lt;h2 id=&#34;山中有金在平台激战中销售镐和铲子&#34;&gt;山中有金！在平台激战中销售镐和铲子&lt;/h2&gt;
&lt;p&gt;每个人都采用平台工程的坏处是，许多供应商面临“平台洗牌”的危险。当然，许多现有的 CNCF 景观灵感来自的产品在官方成为一个事物之前就帮助人们构建了平台。但是我不确定我在 KubeCon 上看到的一切都被市场营销为与平台工程友好。这意味着最终用户在购买产品时必须更仔细地查看，以确保它们符合他们的需求。&lt;/p&gt;
&lt;p&gt;如果一个工具与现有的云原生堆栈集成不良，没有被构建来解决明确的用例（即“工作要完成的任务”），并且不能以自助服务的方式使用，那么它可能没有考虑到平台工程的概念。&lt;/p&gt;
&lt;p&gt;当然，在任何（平台工程）淘金热中，总是有机会卖镐和铲子。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-应该保持不完整并不断发展&#34;&gt;Kubernetes 应该保持不完整（并不断发展）&lt;/h2&gt;
&lt;p&gt;我非常喜欢 Tim Hockins 在最后一天的主题演讲，““愿景的愿景 — Kubernetes 在其第二个十年的表现”，他在演讲中谈到了在短期内做出妥协以获得长期愿景的价值。&lt;/p&gt;
&lt;p&gt;社区本可以尝试解决所有云原生挑战，并将所有平台工具集成到 Kubernetes 中。然而，Tim 强调了这在 OpenStack 中已经尝试过了…并且结果存疑。&lt;/p&gt;
&lt;p&gt;这个概念在 Tim Bannister 的一条推文中得到了很好的总结，Tim 在大屏幕上分享了这条推文：“Kubernetes 应该保持不完整。”引用我最喜欢的漫画/电影系列之一，Kubernetes 也许是“&lt;a href=&#34;https://batmanfactor.com/not-the-hero-we-deserve-why-the-quote-is-significant/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gotham 需要的英雄，但现在此刻理应拥有的英雄&lt;/a&gt;”。&lt;/p&gt;
&lt;h2 id=&#34;别忘了开发者体验&#34;&gt;别忘了开发者体验！&lt;/h2&gt;
&lt;p&gt;很高兴在 KubeCon NA 的主题演讲中看到几次提到开发者体验和重要性。KubeCon 历来是一个基础设施和运维焦点的事件，但我们不能忘记我们的主要（平台）客户：开发者。&lt;/p&gt;
&lt;p&gt;如果你不知道你的用户是谁以及他们最大的痛点是什么，你无法成功地定位你的产品。开发者是一群聪明的人，喜欢解决自己的问题，而且往往你的产品将与使用胶带和包线但能够“足够好地”完成工作的现状解决方案正面对决。&lt;/p&gt;
&lt;h2 id=&#34;加大对应用开发和集成的关注&#34;&gt;加大对应用开发和集成的关注&lt;/h2&gt;
&lt;p&gt;长期以来，我一直对 &lt;a href=&#34;https://dapr.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dapr&lt;/a&gt; 社区的工作印象深刻，可以说他们在突显云原生社区内应用开发者需求方面处于领先地位。对于不熟悉 CNCF 项目的人来说，Dapr 提供了用于通信、状态和工作流的集成 API。对于一些拥有一些灰发的人来说，可以将其视为云时代企业中间件（做得很好）。&lt;/p&gt;
&lt;p&gt;即使在云原生空间迅速采用 AI/LLMs，我们仍然需要关注定义正确抽象的问题；否则，我们将能够生成大量难以理解的代码！&lt;/p&gt;
&lt;p&gt;在我看来，Dapr 提供了构建分布式应用所需的几个非常有用的抽象，如发布 - 订阅、状态管理、分布式锁等。&lt;/p&gt;
&lt;p&gt;我参加了几次 Dapr 的讲座并留下了深刻印象。如果我要构建一个全新的云原生应用（甚至是演变中的旧应用），我会首先考虑这个项目：&lt;/p&gt;
&lt;p&gt;开源社区非常强大，Diagrid 的团队提供了几个出色的商业解决方案，减少了管理后端基础设施的摩擦和运营负担。我与 &lt;a href=&#34;https://twitter.com/mfussell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mark Fussell&lt;/a&gt; 和 &lt;a href=&#34;https://twitter.com/bibryam&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bilgin Ibryam&lt;/a&gt; 进行了几次很好的交流，我鼓励你在 X 上关注他们。我的 InfoQ 朋友 Thomas Betts 还撰写了对最新的 Diagrid 商业发布的摘要：“&lt;a href=&#34;https://www.infoq.com/news/2023/11/diagrid-managed-dapr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Diagrid 推出 Catalyst，一个无服务器、全托管的 Dapr 产品&lt;/a&gt;。”&lt;/p&gt;
&lt;h2 id=&#34;云原生通信捆绑是否王道&#34;&gt;云原生通信：捆绑是否王道？&lt;/h2&gt;
&lt;p&gt;正如 Netscape 的前首席执行官 Jim Barksdale 曾经著名地说过的，创造利润的方式只有两种：一种是捆绑，另一种是解绑。而在云原生生态系统中，我们看到了很多捆绑！&lt;/p&gt;
&lt;p&gt;这种观察在云原生通信栈领域尤为突出。&lt;/p&gt;
&lt;p&gt;我多次讨论过这一点，包括最近的演讲：“&lt;a href=&#34;https://speakerdeck.com/danielbryantuk/devopscon-the-busy-platform-engineers-guide-to-api-gateways&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;忙碌的平台工程师指南：API 网关&lt;/a&gt;” 。在这个栈中，大多数平台构建者将需要三个组件：API 网关（用于南北流量管理）、服务网格（用于东西流量）和容器本地接口或 CNI（用于所有底层软件定义网络）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-chicago-key-takeaways/f3_hu4874f52d0f216b9017c8c9c34030c728_733513_97f683a665b5d587047105fb7a72c6bc.webp 400w,
               /blog/kubecon-chicago-key-takeaways/f3_hu4874f52d0f216b9017c8c9c34030c728_733513_e2518345718e96ef2aa16e08ffa97e19.webp 760w,
               /blog/kubecon-chicago-key-takeaways/f3_hu4874f52d0f216b9017c8c9c34030c728_733513_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubecon-chicago-key-takeaways/f3_hu4874f52d0f216b9017c8c9c34030c728_733513_97f683a665b5d587047105fb7a72c6bc.webp&#34;
               width=&#34;760&#34;
               height=&#34;480&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我会坦言我的偏见——曾在 Ambassador Labs 工作，制造 &lt;a href=&#34;https://www.getambassador.io/products/edge-stack/api-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Edge Stack&lt;/a&gt;，并且是 &lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt; 团队的大支持者——我喜欢选择“最佳解决方案”并进行集成。&lt;/p&gt;
&lt;p&gt;然而，商业趋势正在朝着捆绑方向发展。我看到该领域的各种供应商在其最新产品中上下移动，例如 Isovalent（Cilium CNI 的创建者）通过拥抱服务网格和 API 网关而向上移动。Solo 通过将 CNI（Cilium）纳入其 Istio 服务网格和 API 网关产品中而向下移动。Tetrate、Kong、Tyk、Traefik 等公司也在进行类似的尝试。&lt;/p&gt;
&lt;p&gt;如果你追踪（和关注）这个循环（和资金），明智的做法似乎是倾向于捆绑。&lt;/p&gt;
&lt;p&gt;我相信这种学习不仅适用于云原生通信领域。总的来说，企业正在寻求整合供应商，减少自己动手解决方案的总体拥有成本（TCO），并将云支出承诺转移到云市场内提供的端到端解决方案上。&lt;/p&gt;
&lt;p&gt;在相关的讨论中，由 &lt;a href=&#34;https://twitter.com/danielbryantuk/status/1722034551650648507&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keith Mattix&lt;/a&gt; 主持的服务网格辩论小组是我在会议上最喜欢的会话之一。与通常的所有人都同意的形式不同，参与者没有保留，导致了一场有趣而富有信息的讨论！&lt;/p&gt;
&lt;h2 id=&#34;安全是大生意&#34;&gt;安全是大生意&lt;/h2&gt;
&lt;p&gt;我将最后的三个要点保持简短，但我想提到展厅里满是安全解决方案，从安全的供应链解决方案到网络入侵检测和权限管理。这个领域有很多兴趣（和资金）。&lt;/p&gt;
&lt;p&gt;演讲还很好地涵盖了这些主题，KubeCon 共同主席 &lt;a href=&#34;https://twitter.com/ffkiv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frederick Kautz&lt;/a&gt; 和 CNCF 的成员们强调了安全（以及相关的 CNCF 项目）在主题演讲中的重要性。&lt;/p&gt;
&lt;h2 id=&#34;更加关注可持续性可观测性扩展性和-finops&#34;&gt;更加关注可持续性：可观测性、扩展性和 FinOps&lt;/h2&gt;
&lt;p&gt;关键演讲中突出的另一个话题是可持续性。有一个有趣的小组讨论：“&lt;a href=&#34;https://sched.co/1R4Tl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云中的环境可持续性并非神话&lt;/a&gt;” ，甚至 AWS 赞助的主题演讲也侧重于这一点。&lt;/p&gt;
&lt;p&gt;这是一个重要的话题，通过可观测性、自动扩展和 FinOps 来探讨理解和监控你的云（碳）足迹的基本驱动因素是很好的。&lt;/p&gt;
&lt;p&gt;对于对 FinOps 这个主题不熟悉的人，我从 Roi Ravhon 那里学到了很多，他在我最近与他录制的 InfoQ 播客中分享了一些内容：“&lt;a href=&#34;https://www.infoq.com/podcasts/finops-cloud-cost-optimization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Roi Ravhon 谈 FinOps、应用单元经济学和云成本优化&lt;/a&gt;。”&lt;/p&gt;
&lt;h2 id=&#34;社区社区社区&#34;&gt;社区，社区，社区&lt;/h2&gt;
&lt;p&gt;我不能写一篇 KubeCon 总结而不提到社区的力量。在主题演讲中看到了许多成功故事和奖项真是太棒了。&lt;/p&gt;
&lt;p&gt;我参加这些活动的主要原因之一就是与社区的成员见面和交流。走向云原生的道路并不总是容易，我喜欢与同行交流故事。今年我有点懒，照片没拍多少，但我的 devrel 朋友 Marino Wijay 和 Daniel Oh 帮我拍了一些。&lt;/p&gt;
&lt;p&gt;我还有机会与我想见的每个人交流（KubeCon 很忙！），所以如果你想安排一个 Zoom 会话，可以通过社交媒体与我联系。否则，希望我们很快在会议上见面！&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;正如我在文章开头提到的，参加这次 KubeCon 让我感到非常愉快。社区和周围的支持体系显然正在不断发展，现在我们面临的困难任务是在标准化和创新之间取得平衡。&lt;/p&gt;
&lt;p&gt;我相信云原生的未来光明无限。然而，我认为我们将在未来看到更多种类的 AI/LLMs 🙂&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>服务网格的控制平面和边缘代理的重要性</title>
      <link>https://cloudnative.to/blog/the-importance-of-control-planes-with-service-mesh/</link>
      <pubDate>Wed, 12 Sep 2018 12:38:52 +0800</pubDate>
      <guid>https://cloudnative.to/blog/the-importance-of-control-planes-with-service-mesh/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://dzone.com/articles/the-importance-of-control-planes-with-service-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文将带您了解为什么服务网格和边缘代理如此重要以及它们与持续交付的关系。&lt;/p&gt;
&lt;p&gt;了解现代云架构如何使用微服务具有的许多优势，使开发人员能够以 CI/CD 方式交付业务软件。&lt;/p&gt;
&lt;p&gt;去年，Matt Klein 写了一篇精彩的博客“&lt;a href=&#34;https://blog.envoyproxy.io/service-mesh-data-plane-vs-control-plane-2774e720f7fc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格中的数据平面与控制平面&lt;/a&gt;”。尽管我已经很熟悉“控制面板”这个术语，Matt 再次加深了我对这个概念的理解以及与软件持续交付有关的重要性，特别是在入口/边缘网关和服务网格周围的部署控制（和细微差别）方面。&lt;/p&gt;
&lt;p&gt;我之前写过关于边缘代理和 API 网关在软件交付中可以发挥的作用，持续交付：API 网关有什么作用？像 Envoy 这样的现代代理在“云原生”应用程序操作中所产生的影响，我们进行了几次讨论。我得出的结论是，尽管微服务为具有动态编排的容器和云技术的使用提供了新的机会，但是剩下的核心挑战就是控制平面必须进行调整才能跟上变化。&lt;/p&gt;
&lt;h2 id=&#34;控制平面和角色&#34;&gt;控制平面和角色&lt;/h2&gt;
&lt;p&gt;在 Matt 的文章中，他指出服务网格控制平面“为网格中所有正在运行的数据平面提供策略和配置”，并且“控制平面将所有数据平面转变为分布式系统。”最终，控制平面的目标是设置将由数据平面制定的策略。控制平面可以通过配置文件，API 调用和用户界面来实现。选择的实现方法通常取决于用户的角色，以及他们的目标和技术能力。例如，产品所有者可能想要在应用程序中发布新功能，这里 UI 通常是最合适的控制平面，因为这可以显示系统的可理解视图并且还提供一些导轨。但是，对于想要配置一系列低级防火墙规则的网络运维人员，使用 CLI 或配置文件将提供更细粒度（高级用户风格）控制，并且还便于自动化。&lt;/p&gt;
&lt;p&gt;控制平面的选择也可能受所需控制范围的影响。我的同事&lt;a href=&#34;https://www.infoq.com/news/2017/11/service-oriented-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rafi 之前在 QCon SF 讨论过这个问题&lt;/a&gt;，集中或分散运维的要求肯定会影响控制平面的实施。这也直接关系到控制影响应该是本地的还是全局的。例如，运维团队可能希望指定全局合理的默认值和安全措施。但是，在前线工作的开发团队需要对其本地服务进行细粒度控制，并且可能（如果他们正在接受“自由和责任”模式）覆盖安全措施的能力。Matt 还在最近的&lt;a href=&#34;https://www.infoq.com/news/2018/07/qcon-klein-service-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QCon 纽约演讲&lt;/a&gt;中谈到了本地/全局互动，并展示了Lyft团队为服务到服务和边缘/入口代理创建的仪表板：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/the-importance-of-control-planes-with-service-mesh/006tNbRwgy1fv6sw7u1sxj30m80p577s_hue93806e6243b47c11bf7c67b62fcd7ee_94151_7664f5cc97c379c6f8947347a5b718b2.webp 400w,
               /blog/the-importance-of-control-planes-with-service-mesh/006tNbRwgy1fv6sw7u1sxj30m80p577s_hue93806e6243b47c11bf7c67b62fcd7ee_94151_08ccba45c8a44a4d25b4d2fde042ed84.webp 760w,
               /blog/the-importance-of-control-planes-with-service-mesh/006tNbRwgy1fv6sw7u1sxj30m80p577s_hue93806e6243b47c11bf7c67b62fcd7ee_94151_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-control-planes-with-service-mesh/006tNbRwgy1fv6sw7u1sxj30m80p577s_hue93806e6243b47c11bf7c67b62fcd7ee_94151_7664f5cc97c379c6f8947347a5b718b2.webp&#34;
               width=&#34;672&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;东西向流量与南北向流量&#34;&gt;东西向流量与南北向流量&lt;/h2&gt;
&lt;p&gt;软件应用中流量有两种典型分类，其中之一是南北向流量，通常称为入口流量，流量流向外部系统或者外部服务调用内部系统。另外一个是东西向流量，通常称为数据中心内部流量，这是在（可能是虚拟化的）内部网络边界内流动的流量&lt;/p&gt;
&lt;p&gt;所谓东西向，大家能理解吧？东西向指服务间通讯，也就是 A 服务调用 B 服务。对应的还有南北向，南北向通常是指从外部网络进来调用服务，如走 API Gateway 调用服务。在东西向通讯中，我们有时会需要一个比较特殊的途径，比如说在这个图中，我们有两个集群，两个集群各有各自的服务注册中心。我们通过增强 Pilot 的方式打通两个注册中心，可以知道对方有什么服务。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/the-importance-of-control-planes-with-service-mesh/00704eQkgy1fsy0kakg35j30qo0f0dpi_huda81314663064cc0e01f4d9721dba08c_100771_5bc2e6905e485456be5f31ec9a4b54de.webp 400w,
               /blog/the-importance-of-control-planes-with-service-mesh/00704eQkgy1fsy0kakg35j30qo0f0dpi_huda81314663064cc0e01f4d9721dba08c_100771_1165d2020628bbbf4c58f16b26195d5e.webp 760w,
               /blog/the-importance-of-control-planes-with-service-mesh/00704eQkgy1fsy0kakg35j30qo0f0dpi_huda81314663064cc0e01f4d9721dba08c_100771_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-control-planes-with-service-mesh/00704eQkgy1fsy0kakg35j30qo0f0dpi_huda81314663064cc0e01f4d9721dba08c_100771_5bc2e6905e485456be5f31ec9a4b54de.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;图片来自敖小剑的分享&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在现代云原生应用程序中，两个独立的组件通常控制这些流量：API 网关或边缘代理处理南北流量，相对的 service mesh 处理东西向流量。在 Kubernetes 域内，Ambassador 开源 API 网关可以处理入口流量，而&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;开放平台可以处理跨服务流量。&lt;/p&gt;
&lt;p&gt;对于南北向和东西向代理组件，底层网络技术可以是相同的（例如使用&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;）。但是，控制平面通常是不同的，基于与系统交互的角色。&lt;/p&gt;
&lt;p&gt;Ambassador 控制面板的主要目标是开发人员，并允许将简单的注释添加到 Kubernetes 配置中以控制核心部署功能，如路由、金丝雀发布、速率限制。&lt;/p&gt;
&lt;p&gt;Istio 关注的主要角色是运维人员，并且控制平面允许指定额外的 Kubernetes 资源以促进流量管理（包括故障注入）、安全（基于角色的访问控制和认证安全）和遥测（包括分布式追踪和各监控指标）。&lt;/p&gt;
&lt;h2 id=&#34;结论分歧或趋同&#34;&gt;结论：分歧或趋同&lt;/h2&gt;
&lt;p&gt;Lyft 使用 Envoy 作为边缘代理和 service mesh，我还听到有工程师使用 Ambassador 来管理服务间（东西向）通信的报道，以及 Istio 处理入口流量（甚至在&lt;a href=&#34;https://www.infoq.com/news/2018/08/istio-1.0-service-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;v1.0 发布&lt;/a&gt;的新网关功能之前），然而，目前 Ambassador 和 Istio 所代表的代理技术控制平面的两种方法似乎为开发和运维各自的角色提供了好处。鉴于我们对现代容器网络的整体知识和经验状况，我还不确信有一个简单的一刀切解决方案。因此，我认为在用于管理南北和东西流量的统一控制平面终极解决方案出现之前可能出现分歧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>速率限制系列 part4—为 Ambassador API 网关设计速率限制服务</title>
      <link>https://cloudnative.to/blog/designing-a-rate-limiting-service-for-ambassador-part-4/</link>
      <pubDate>Wed, 11 Jul 2018 15:32:40 +0800</pubDate>
      <guid>https://cloudnative.to/blog/designing-a-rate-limiting-service-for-ambassador-part-4/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://blog.getambassador.io/designing-a-rate-limiting-service-for-ambassador-f460e9fabedb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.getambassador.io/rate-limiting-a-useful-tool-with-distributed-systems-6be2b1a4f5f4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;先前&lt;/a&gt;关于速率限制文章主要描述如何构建并部署基于 Java 的速率限制服务，该服务可以和开源的 Ambassador API 网关以及 Kubernetes 集成（文章的&lt;a href=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1&#34;&gt;第 1 部分&lt;/a&gt;和&lt;a href=&#34;https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2&#34;&gt;第 2 部分&lt;/a&gt;请见这里）。大家或许会疑惑怎么样才能更好地设计速率限制服务，尤其是如何保证 Ambassador 以及其底层的 Envoy 代理的灵活性？这篇文章将给大家启发。&lt;/p&gt;
&lt;h2 id=&#34;设置场景&#34;&gt;设置场景&lt;/h2&gt;
&lt;p&gt;如果你还没有阅读这个系列的第 3 部分“&lt;a href=&#34;https://cloudnative.to/blog/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-part3&#34;&gt;基于 Ambassador API 网关实现 Java 速率限制服务&lt;/a&gt;”，我建议你先阅读（文章的&lt;a href=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1&#34;&gt;第 1 部分&lt;/a&gt;和&lt;a href=&#34;https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2&#34;&gt;第 2 部分&lt;/a&gt;请见这里）。其中最关键的是&lt;a href=&#34;https://www.getambassador.io/reference/services/rate-limit-service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambassador API 网关&lt;/a&gt;，其就像其底层使用的&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v1/route_config/rate_limits&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 代理&lt;/a&gt;一样，通过请求另一个服务来决定一个请求的速率是否需要被限制。这是关注点分离（和单一原则）设计的良好实现。同时由于 Ambassador 可作为 Kubernetes 原生 API 网关，因此你可以很方便将 rate limiter 部署为 Kubernetes 基础服务，用来管理平台的容错特性，同时其也很容易进行扩展。&lt;/p&gt;
&lt;p&gt;下文假设你已成功将 Ambassador 部署进 Kubernetes 集群，同时也根据我先前文章中所描述的那样完成速率限制服务部署。以下是基于 Java 开发的速率限制服务其所使用的 Kubernetes 配置文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind: Service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  name: ratelimiter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  annotations:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    getambassador.io/config: &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      ---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      apiVersion: ambassador/v0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      kind: RateLimitService
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      name: ratelimiter_svc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      service: &lt;span class=&#34;s2&#34;&gt;&amp;#34;ratelimiter:50051&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  labels:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    app: ratelimiter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  type: ClusterIP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  selector:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    app: ratelimiter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ports:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  - protocol: TCP
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    port: &lt;span class=&#34;m&#34;&gt;50051&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name: http
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apiVersion: apps/v1beta2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  name: ratelimiter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  labels:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    app: ratelimiter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  replicas: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  selector:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      app: ratelimiter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  template:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      labels:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        app: ratelimiter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    spec:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      containers:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      - name: ratelimiter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        image: danielbryantuk/ratelimiter:0.3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ports:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - containerPort: &lt;span class=&#34;m&#34;&gt;50051&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;描述符descriptor&#34;&gt;描述符（descriptor）&lt;/h2&gt;
&lt;p&gt;Ambassador 中速率限制功能的灵活性主要通过在 Kubernetes 配置上指定描述符和请求头实现，这些参数会被传递到速率限制服务实例中。以下文为例，首先看一下先前文章中探讨过的 my shopfront 应用程序的 Ambassador 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind: Service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  labels:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    service: ambassador
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  name: ambassador
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  annotations:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    getambassador.io/config: &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      ---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      apiVersion: ambassador/v0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      kind:  Mapping
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      name:  shopfront_stable
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      prefix: /shopfront/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      service: shopfront:8010
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      rate_limits:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - descriptor: Example descriptor
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          headers:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            - &lt;span class=&#34;s2&#34;&gt;&amp;#34;X-MyHeader&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - descriptor: Y header descriptor
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          headers:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            - &lt;span class=&#34;s2&#34;&gt;&amp;#34;Y-MyHeader&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到在 rate_limits 配置中有两个 YAML 元素，每个元素都有不同的描述符和请求头。根据&lt;a href=&#34;https://www.getambassador.io/user-guide/rate-limiting-tutorial#2-configure-ambassador-mappings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambassador 速率限制&lt;/a&gt;文档中所述，当请求头在配置中定义，并出现在请求元数据中，其才能被速率限制。比如说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果访问 shopfront 的请求没有包含请求头，其就不符合速率限制条件（即不会对在 Ambassador 的其他配置中所定义的速率限制服务生效）&lt;/li&gt;
&lt;li&gt;通过请求头“X-MyHeader:123”向 shopfront 服务发出的请求可能受到速率限制。速率限制服务将接收与“X-MyHeader”请求头相匹配的 rate_limits 元素所关联的描述符信息，并以“generic_key”为名，这里值为“Example descriptor”。因此，速率限制服务将收到如下请求元数据：[{“generic_key”,“Example descriptor”},{“X-MyHeader”,”123”}]&lt;/li&gt;
&lt;li&gt;通过请求头“Y-MyHeader:ABC”向 shopfront 服务发出的请求可能受到速率限制。速率限制服务将接收与“Y-MyHeader”请求头相匹配的 rate_limits 元素所关联的描述符信息，并以“generic_key”为名，这里值为“Y header descriptor”。因此，速率限制服务将收到如下请求元数据：[{“generic_key”,“Y header descriptor”},{“Y-MyHeader”,”ABC”}]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是否进行速率限制是由速率限制服务决定的，该服务只需在 Envoy 的&lt;a href=&#34;https://github.com/envoyproxy/envoy/blob/master/source/common/ratelimit/ratelimit.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ratelimit.proto&lt;/a&gt; gRPC 接口中返回的适当值：OK, OVER_LIMIT 或 UNKNOWN 即可。根据上文描述，你可以在两个地方添加包含描述符和请求头的请求元数据，使其可在速率限制服务中使用：可以在部署时添加到 Ambassador Kubernetes 配置中；或在程序运行时添加。&lt;/p&gt;
&lt;h2 id=&#34;速率限制服务元数据样例&#34;&gt;速率限制服务元数据样例&lt;/h2&gt;
&lt;p&gt;举个例子。假设你的企业已经创建了一个移动应用程序，该程序通过 Ambassador API 网关与后端服务进行通信，并且你希望对普通用户和测试用户使用不同的规则进行速率限制，同时你也希望对未认证用户也这么进行。你可以在请求头中访问 UserID 和 UserType 数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind: Service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  labels:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    service: BackendService
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  name: BackendService
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  annotations:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    getambassador.io/config: &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      ---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      apiVersion: ambassador/v0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      kind:  Mapping
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      name:  backend_app
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      prefix: /app/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      service: backend_app:8010
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      rate_limits:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - descriptor: Mobile app ingress - authenticated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          headers:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            -&lt;span class=&#34;s2&#34;&gt;&amp;#34;UserID&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            -&lt;span class=&#34;s2&#34;&gt;&amp;#34;UserType&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        - descriptor: Mobile app ingress - unauthenticated
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;任何包含请求头“UserID”和“UserType”的请求都将被转发到速率限制服务，同时请求也包含（generic_key）描述符“Mobile app ingress - authenticated”。未包含请求头的请求会被第二个描述符捕获，并被转发到只包含（generic_key）描述符“Mobile app ingress - unauthenticated”的速率限制服务中。你可以通过任意语言的算法实现上述速率限制功能。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;如果你正在考虑&lt;a href=&#34;https://eng.lyft.com/announcing-ratelimit-c2e8f3182555&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;inspiration&lt;/a&gt;，或&lt;a href=&#34;https://github.com/lyft/ratelimit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现成可用的 Ambassador 限速服务&lt;/a&gt;，请务必留心 Envoy 文档和 Lyft GitHub 库。尤其是 Lyft 参考 Envoy 所实现的&lt;a href=&#34;https://github.com/lyft/ratelimit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;速率限制&lt;/a&gt;方案非常实用，它既可作为可插拔的解决方案，也可以作为解决方案的指南用于在自定义速率限制服务中实现配置加载和运行时加载。&lt;/p&gt;
&lt;p&gt;你可以在先前文章“&lt;a href=&#34;https://blog.getambassador.io/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-e09d542455da&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Ambassador API 网关实现 Java 速率限制服务&lt;/a&gt;”中找到有关在 Kubernetes 中安装 Ambassador API 网关和配置速率限制的教程。同样，欢迎你在&lt;a href=&#34;https://gitter.im/datawire/ambassador&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambassador Gitter&lt;/a&gt;提问。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>速率限制 part3—基于 Ambassador API 网关实现 Java 速率限制服务</title>
      <link>https://cloudnative.to/blog/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-part3/</link>
      <pubDate>Wed, 04 Jul 2018 12:26:02 +0800</pubDate>
      <guid>https://cloudnative.to/blog/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-part3/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://blog.getambassador.io/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-e09d542455da&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;基于 Kubernetes 云原生的&lt;a href=&#34;https://www.getambassador.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambassador API&lt;/a&gt;网关所提供的速率限制功能是完全可定制的，其允许任何实现 gRPC 服务端点的服务自行决定是否需要对请求进行限制。本文在先前&lt;a href=&#34;rate-limiting-a-useful-tool-with-distributed-systems-part1.md&#34;&gt;第 1 部分&lt;/a&gt;和&lt;a href=&#34;rate-limiting-for-api-gateway-daniel-bryant-part2.md&#34;&gt;第 2 部分&lt;/a&gt;的基础上，阐述如何为 Ambassador API 网关创建和部署简单的基于 Java 的速率限制服务。&lt;/p&gt;
&lt;h2 id=&#34;部署-docker-java-shop&#34;&gt;部署 Docker Java Shop&lt;/h2&gt;
&lt;p&gt;在我之前的教程“&lt;a href=&#34;https://blog.getambassador.io/deploying-java-apps-with-kubernetes-and-the-ambassador-api-gateway-c6e9d9618f1b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Kubernetes 和 Ambassador API 网关部署 Java 应用&lt;/a&gt;”中，我将开源的 Ambassador API 网关添加到现有的一个部署于 Kubernetes 的 Java（Spring Boot 和 Dropwizard）服务中。如果你之前不了解这个，建议你先阅读下此教程及其他相关内容来熟悉基础知识。
本文假定你熟悉如何构建基于 Java 的微服务并将其部署到 Kubernetes，同时已经完成安装所有的必备组件（我在本文中使用&lt;a href=&#34;https://docs.docker.com/docker-for-mac/edge-release-notes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker for Mac Edge&lt;/a&gt;，并启用其内置的 Kubernetes 支持。若使用 minikube 或远程群集应该也类似）。&lt;/p&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;需要在本地安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker for Desktop：我使用 edge community edition (18.04.0-ce)，内置了对本地 Kubernetes 集群的支持。由于 Java 应用对内存有一定要求，我还将 Docker 可用内存增加到 8G。&lt;/li&gt;
&lt;li&gt;编辑器选择：Atom 或者 VS code；当写 Java 代码时也可以使用 IntelliJ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在这里获取最新版本的“Docker Java Shop”源代码：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/danielbryantuk/oreilly-docker-java-shopping&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/danielbryantuk/oreilly-docker-java-shopping&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可以通过如下命令使用 SSH 克隆仓库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone git@github.com:danielbryantuk/oreilly-docker-java-shopping.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一阶段的服务和部署架构如下图所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-第一阶段架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-part3/78a165e1gy1fsvwpjxbzuj20hi0gjdga.jpg&#34; alt=&#34;第一阶段架构&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      第一阶段架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从图中可以看到，Docker Java Shopping 应用程序主要由三个服务组成。在先前的教程中，你已经添加 Ambassador API 网关作为系统的“front door”（大门）。需要注意的是，Ambassador API 网关直接使用 Web 80 号端口，因此需要确保本地运行的其他应用没有占用该端口。&lt;/p&gt;
&lt;h2 id=&#34;ambassador-api-网关速率限制入门&#34;&gt;Ambassador API 网关速率限制入门&lt;/h2&gt;
&lt;p&gt;我在本教程的仓库中增加了一个新文件夹“&lt;a href=&#34;https://github.com/danielbryantuk/oreilly-docker-java-shopping/tree/master/kubernetes-ambassador-ratelimit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubernetes-ambassador-ratelimit&lt;/a&gt;”，用于包含 Kubernetes 相关配置。请通过命令行导航到此目录。此目录应包含如下文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; oreilly-docker-java-shopping $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; kubernetes-ambassador-ratelimit/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; kubernetes-ambassador-ratelimit $ ll
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;total &lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; drwxr-xr-x &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; danielbryant staff &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; Apr 09:27 .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; drwxr-xr-x &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; danielbryant staff &lt;span class=&#34;m&#34;&gt;608&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; Apr 09:27 ..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; -rw-r — r — &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; danielbryant staff &lt;span class=&#34;m&#34;&gt;2033&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; Apr 09:27 ambassador-no-rbac.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; -rw-r — r — &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; danielbryant staff &lt;span class=&#34;m&#34;&gt;698&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; Apr 10:30 ambassador-rate-limiter.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; -rw-r — r — &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; danielbryant staff &lt;span class=&#34;m&#34;&gt;476&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; Apr 10:30 ambassador-service.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; -rw-r — r — &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; danielbryant staff &lt;span class=&#34;m&#34;&gt;711&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; Apr 09:27 productcatalogue-service.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; -rw-r — r — &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; danielbryant staff &lt;span class=&#34;m&#34;&gt;659&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; Apr 10:02 shopfront-service.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; -rw-r — r — &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; danielbryant staff &lt;span class=&#34;m&#34;&gt;678&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; Apr 09:27 stockmanager-service.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以使用以下命令来提交 Kubernetes 配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过以上命令部署，这与之前架构的区别在于添加了&lt;code&gt;ratelimiter&lt;/code&gt;服务。这个服务是用 Java 编写的，且没有使用微服务框架。它发布了一个 gRPC 端点，可供 Ambassador 来使用以实现速率限制。这种方案允许灵活定制速率限制算法（关于这点的好处请查看我&lt;a href=&#34;https://blog.getambassador.io/rate-limiting-for-api-gateways-892310a2da02&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;以前的文章&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-限速架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/implementing-a-java-rate-limiting-service-for-the-ambassador-api-gateway-part3/78a165e1gy1fsvwvs0d8kj20hi0gj74v.jpg&#34; alt=&#34;限速架构&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      限速架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;探索部署于-kubernetes-的限速器服务&#34;&gt;探索部署于 Kubernetes 的限速器服务&lt;/h2&gt;
&lt;p&gt;与任何其他服务一样，部署到 Kubernetes 的限速服务也可以根据需要进行水平扩展。以下是 Kubernetes 配置文件&lt;code&gt;ambassador-rate-limiter.yaml&lt;/code&gt;的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ratelimiter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;getambassador.io/config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      apiVersion: ambassador/v0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      kind: RateLimitService
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      name: ratelimiter_svc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      service: &amp;#34;ratelimiter:50051&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ratelimiter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ratelimiter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50051&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ReplicationController&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ratelimiter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ratelimiter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ratelimiter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;danielbryantuk/ratelimiter:0.3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;containerPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50051&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里不需要关注最后 Docker Image 处的&lt;code&gt;danielbryantuk/ratelimiter:0.3&lt;/code&gt; ，而需要注意的是：此服务在集群使用 50051 TCP 端口。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;ambassador-service.yaml&lt;/code&gt;配置文件中，还更新了 Ambassador Kubernetes annotations 配置，以确保能通过包含&lt;code&gt;rate_limits&lt;/code&gt;属性来限制对 shopfront 服务的请求。我还添加了一些额外的元数据&lt;code&gt;- descriptor: Example descriptor&lt;/code&gt;，这将在下一篇文章中更详细地解释。这里我们需要注意的是，如果要将元数据传递到速率限制服务，这种方法不错。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ambassador&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ambassador&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;getambassador.io/config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      ---
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      apiVersion: ambassador/v0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      kind:  Mapping
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      name:  shopfront_stable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      prefix: /shopfront/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      service: shopfront:8010
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      rate_limits:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        - descriptor: Example descriptor&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以使用 kubectl 命令来检查部署是否成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; kubernetes-ambassador-ratelimit $ kubectl get svc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME               TYPE           CLUSTER-IP       EXTERNAL-IP   PORT&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;S&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;          AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ambassador         LoadBalancer   10.105.253.3     localhost     80:30051/TCP     1d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ambassador-admin   NodePort       10.107.15.225    &amp;lt;none&amp;gt;        8877:30637/TCP   1d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubernetes         ClusterIP      10.96.0.1        &amp;lt;none&amp;gt;        443/TCP          16d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;productcatalogue   ClusterIP      10.109.48.26     &amp;lt;none&amp;gt;        8020/TCP         1d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ratelimiter        ClusterIP      10.97.122.140    &amp;lt;none&amp;gt;        50051/TCP        1d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shopfront          ClusterIP      10.98.207.100    &amp;lt;none&amp;gt;        8010/TCP         1d
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;stockmanager       ClusterIP      10.107.208.180   &amp;lt;none&amp;gt;        8030/TCP         1d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;6 个业务服务看起来都不错（去除 Kubernetes 服务）：包含 3 个 Java 服务，2 个 Ambassador 服务和 1 个 ratelimiter 服务。&lt;/p&gt;
&lt;p&gt;你可以通过 curl 命令对 shopfront 的服务端点进行测试，其应绑定在外部 IP localhost 的 80 端口上（如上文所示）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(master *) kubernetes-ambassador-ratelimit $ curl localhost/shopfront/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- jQuery (necessary for Bootstrap&amp;#39;s JavaScript plugins) --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Include all compiled plugins (below), or include individual files as needed --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;js/bootstrap.min.js&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;(master *) kubernetes-ambassador-ratelimit $
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会注意到这里显示了一些 HTML，这只是 Docker Java Shop 的首页。虽然可以通过浏览器在&lt;a href=&#34;http://localhost/shopfront/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://localhost/shopfront/&lt;/a&gt;访问，对于我们的速率限制实验，最好还是使用 curl 命令。&lt;/p&gt;
&lt;h2 id=&#34;速率限制测试&#34;&gt;速率限制测试&lt;/h2&gt;
&lt;p&gt;对于这种演示性质的速率限制服务，这里仅对服务本身进行限制。比如当速率限制服务需要计算是否需要限制请求时，唯一需要考虑的指标是在一段时间内针对特定后端的请求数量。在代码实现中使用&lt;a href=&#34;https://en.wikipedia.org/wiki/Token_bucket&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;令牌桶算法&lt;/a&gt;。假设桶中令牌容量为 20，并且每秒钟的补充 10 个令牌。由于速率限制与请求相关联，这意味着你可以每秒发出 10 次 API 请求，这没有任何问题，同时由于存储桶最初包含 20 个令牌，你可以暂时超过此并发数量。但是，一旦最初额外的令牌使用完，并且你仍在尝试每秒发出 10 个以上请求，那么你将收到 HTTP 429“Too Many Requests”状态码。这时，Ambassador API 网关不会再将请求转发到后端服务。&lt;/p&gt;
&lt;p&gt;让我看下如何通过 curl 发出大量请求来模拟这个操作。避免显示的 HTML 页面（通过&lt;code&gt;-output /dev/null&lt;/code&gt;参数）及 curl 请求（通过&lt;code&gt;--silent&lt;/code&gt;参数），但需要显示符合预期的 HTTP 响应状态（通过&lt;code&gt;-- show-error  --fail&lt;/code&gt;参数）。下文通过一个 bash 循环脚本，并记录时间输出（以显示发出请求的时间），以此来创建一个非常粗颗粒度的负载发生器（可以通过&lt;code&gt;CTRL-C&lt;/code&gt;来终止循环）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; curl --silent --output /dev/null --show-error --fail http://localhost/shopfront/&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; kubernetes-ambassador-ratelimit $ &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; curl --silent --output /dev/null --show-error --fail http://localhost/shopfront/&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;date&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:31 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:31 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:31 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:31 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:35 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;22&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; The requested URL returned error: &lt;span class=&#34;m&#34;&gt;429&lt;/span&gt; Too Many Requests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:35 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;22&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; The requested URL returned error: &lt;span class=&#34;m&#34;&gt;429&lt;/span&gt; Too Many Requests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:35 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:35 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;22&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; The requested URL returned error: &lt;span class=&#34;m&#34;&gt;429&lt;/span&gt; Too Many Requests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:35 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;22&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; The requested URL returned error: &lt;span class=&#34;m&#34;&gt;429&lt;/span&gt; Too Many Requests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tue &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; Apr &lt;span class=&#34;m&#34;&gt;2018&lt;/span&gt; 14:16:35 BST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;^C
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如你所见，从输出日志来看，前几个请求显示日期且没有错误，一切正常。过不了多久，当在我测试的 Mac 上的请求循环超过每秒 10 次，HTTP 429 错误便开始出现。&lt;/p&gt;
&lt;p&gt;顺便说一下，我通常使用&lt;a href=&#34;https://httpd.apache.org/docs/2.4/programs/ab.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Apache Benchmarking “ab”&lt;/a&gt; 负载生成工具来进行这种简单实验，但这工具在调用本地 localhost 会有问题（同时 Docker 配置也给我带来了额外问题）。&lt;/p&gt;
&lt;h2 id=&#34;检验速率限制器服务&#34;&gt;检验速率限制器服务&lt;/h2&gt;
&lt;p&gt;Ambassador Java 限速服务的源代码在我 GitHub 帐户的&lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ambassador-java-rate-limiter&lt;/a&gt;仓库中。其中也包含用于构建我推送到 DockerHub 中容器镜像的&lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter/blob/master/Dockerfile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dockerfile&lt;/a&gt;。你可以以此 Dockerfile 作为模板进行修改，然后构建和推送自己的镜像至 DockerHub。你也可以修改在 Docker Java Shopping 仓库中的&lt;a href=&#34;https://github.com/danielbryantuk/oreilly-docker-java-shopping/blob/master/kubernetes-ambassador-ratelimit/ambassador-rate-limiter.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ambassador-rate-limiter.yaml&lt;/a&gt;文件来扩展使用你自己的速率限制服务。&lt;/p&gt;
&lt;h2 id=&#34;研究-java-代码&#34;&gt;研究 Java 代码&lt;/h2&gt;
&lt;p&gt;如果你深入研究 Java 代码，最需要关注的类应该是&lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter/blob/master/src/main/java/io/datawire/ambassador/ratelimiter/simpleimpl/RateLimitServer.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RateLimiterServer&lt;/a&gt;，它实现了在 Ambassador API 中使用的&lt;a href=&#34;https://www.datawire.io/envoyproxy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 代理&lt;/a&gt;所定义的速率限制 gRPC 接口。我创建了一个&lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter/blob/master/src/main/proto/ratelimit.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ratelimit.proto&lt;/a&gt;接口的副本，其通过 Maven &lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter/blob/master/pom.xml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pom.xml&lt;/a&gt;中定义的 gRPC Java 构建工具来构建使用。代码主要涉及三点：实现 gRPC 接口，运行 gRPC 服务器，并实现速率限制。下面让我们来进一步分析。&lt;/p&gt;
&lt;h3 id=&#34;实现速率限制-grpc-接口&#34;&gt;实现速率限制 gRPC 接口&lt;/h3&gt;
&lt;p&gt;查看&lt;code&gt;RateLimitServer&lt;/code&gt;中的内部类&lt;code&gt;RateLimiterImpl&lt;/code&gt;，其对&lt;code&gt;RateLimitServiceGrpc.RateLimitServiceImplBase&lt;/code&gt;进行扩展，你可以看到此抽象类中的下列方法被重写：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shouldRateLimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ratelimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RateLimitRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rateLimitRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StreamObserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ratelimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RateLimitResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;responseStreamObserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里使用的很多命名规约来自于 Java gRPC 库，进一步信息请参阅&lt;a href=&#34;https://grpc.io/docs/tutorials/basic/java.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Java 文档&lt;/a&gt;。尽管这样，如果查看&lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter/blob/master/src/main/proto/ratelimit.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ratelimit.proto&lt;/a&gt;文件，你可以清楚看到很多命名根，这些命名根定义了在 Ambassador 中使用的 Envoy 代理所需要的速率限制接口。例如，你可以看到此文件中定义的核心服务名为&lt;code&gt;RateLimitService&lt;/code&gt;（第 9 行），并且在服务&lt;code&gt;rpc ShouldRateLimit (RateLimitRequest) returns (RateLimitResponse) {}&lt;/code&gt;（第 11 行）中定义了一个 RPC 方法，它在 Java 中实现通过上面所定义的&lt;code&gt;shouldRateLimit&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;如果有兴趣，可以看看那些由&lt;code&gt;protobuf-maven-plugin&lt;/code&gt;（&lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter/blob/master/pom.xml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pom.xml&lt;/a&gt;的第 99 行）生成的 Java gRPC 代码。&lt;/p&gt;
&lt;h3 id=&#34;运行-grpc-服务器&#34;&gt;运行 gRPC 服务器&lt;/h3&gt;
&lt;p&gt;一旦你实现了用&lt;code&gt;ratelimit.proto&lt;/code&gt;定义的 gRPC 接口，下一件事情就是创建一个 gRPC 服务器用来监听和回复请求。可以根据&lt;code&gt;main&lt;/code&gt;方法调用链来查看&lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter/blob/master/src/main/java/io/datawire/ambassador/ratelimiter/simpleimpl/RateLimitServer.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RateLimitServer&lt;/a&gt;的内容。简而言之，&lt;code&gt;main&lt;/code&gt;方法创建一个&lt;code&gt;RateLimitServer&lt;/code&gt;类的实例，调用&lt;code&gt;start()&lt;/code&gt;方法，再调用&lt;code&gt;blockUntilShutdown()&lt;/code&gt;方法。这将启动一个应用实例，并在指定的服务端点上发布 gRPC 接口，同时侦听请求。&lt;/p&gt;
&lt;h3 id=&#34;实现-java-速率限制&#34;&gt;实现 Java 速率限制&lt;/h3&gt;
&lt;p&gt;负责速率限制过程的实际 Java 代码包含在&lt;code&gt;RateLimiterImpl&lt;/code&gt;内部类的&lt;code&gt;shouldRateLimit()&lt;/code&gt;方法（第 75 行）中。我没有自己实现算法，而是使用基于&lt;a href=&#34;https://en.wikipedia.org/wiki/Token_bucket&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;令牌桶算法&lt;/a&gt;的 Java 速度限制开源库&lt;a href=&#34;https://github.com/vladimir-bukhtoyarov/bucket4j&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bucket4j&lt;/a&gt;。由于我限制了对每个服务的请求，因此每个存储桶与服务名称所绑定。对每个服务的请求都会从其所关联的存储桶中删除一个令牌。在本案例中，桶没有存储在外部数据库，而是存储在内存中的&lt;code&gt;ConcurrentHashMap&lt;/code&gt;中。如果在生产环境中，通常会使用类似 Redis 的外部持久化存储方案来实现横向扩展。这里必须注意，如果在不更改每个服务桶限制的前提下水平扩展速率限制服务，那么将直接导致（非速率限制）请求数量的增加，但实际服务可支持的请求数量没有增加。&lt;/p&gt;
&lt;p&gt;创建 bucket4j 存储桶的&lt;code&gt;RateLimiterImpl&lt;/code&gt;大致代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bucket&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;createNewBucket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;overdraft&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Refill&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;refill&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Refill&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;smooth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ofSeconds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Bandwidth&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bandwidth&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;classic&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;overdraft&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;refill&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bucket4j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;addLimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;limit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在下面可以看到&lt;code&gt;shouldRateLimit&lt;/code&gt;方法的代码，它只是简单地尝试执行&lt;code&gt;tryConsume(1)&lt;/code&gt;使用桶中一个令牌，并返回适当的 HTTP 响应。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shouldRateLimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ratelimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RateLimitRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rateLimitRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StreamObserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Ratelimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RateLimitResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;responseStreamObserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;logDebug&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rateLimitRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;destServiceName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extractDestServiceNameFrom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rateLimitRequest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Bucket&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bucket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getServiceBucketFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destServiceName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Ratelimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RateLimitResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bucket&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;tryConsume&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ratelimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RateLimitResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;OK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ratelimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RateLimitResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;OVER_LIMIT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Ratelimit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;RateLimitResponse&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rateLimitResponse&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;generateRateLimitResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;responseStreamObserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;onNext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rateLimitResponse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;responseStreamObserver&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;onCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码比较容易解释。如果当前请求不需要进行速率限制，则此方法返回&lt;code&gt;Ratelimit.RateLimitResponse.Code.OK; &lt;/code&gt;如果当前请求由于速度限制而被拒绝，则此方法返回&lt;code&gt;Ratelimit.RateLimitResponse.Code.OVER_LIMIT&lt;/code&gt;。根据此 gRPC 服务的响应，Ambassador API 网关将请求传递给后端服务，或者中断请求并返回 HTTP 状态码 429“Too Many Requests”而不再调用后端服务。&lt;/p&gt;
&lt;p&gt;这个简单案例只可以防止一个服务的访问过载，但也希望这能够阐明速率限制的核心概念，进而可以相对容易实现基于请求元数据（例如用户 ID 等）的速率限制。&lt;/p&gt;
&lt;h2 id=&#34;下一阶段&#34;&gt;下一阶段&lt;/h2&gt;
&lt;p&gt;本文演示了如何在 Java 中创建速率限制服务，并轻易与 Ambassador 网关所集成。如果需要，你也可以基于任何自定义的速率限制算法实现。在本系列的最后一篇文章中，您将更深入地了解 Envoy 速率限制 API，以便进一步学习如何设计速率限制服务。&lt;/p&gt;
&lt;p&gt;如果有任何疑问，欢迎在 Ambassador Gitter 或通过&lt;a href=&#34;https://twitter.com/danielbryantuk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@danielbryantuk&lt;/a&gt;及&lt;a href=&#34;https://twitter.com/datawireio?lang=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@datawireio&lt;/a&gt;联系。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>速率限制 part2—作用于 API 网关的速率限制</title>
      <link>https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2/</link>
      <pubDate>Tue, 03 Jul 2018 12:11:49 +0800</pubDate>
      <guid>https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://blog.getambassador.io/rate-limiting-for-api-gateways-892310a2da02&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在本速率限制系列的&lt;a href=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1&#34;&gt;第一篇文章&lt;/a&gt;中，介绍了实施速率限制的动机，并讨论了几种实施方案（取决于你是否同时作为通信的发送端和接收端）以及相关的权衡。本文会更加深入地探讨 API 网关速率限制的需求。&lt;/p&gt;
&lt;h2 id=&#34;为什么-api-网关需要速率限制&#34;&gt;为什么 API 网关需要速率限制&lt;/h2&gt;
&lt;p&gt;在第一篇文章中，我讨论了在何处实施速率限制的几个选项：发送端、接收端或中间层（字面意思可以理解为发送端和接收端中间的服务）。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof0emvx9j20oj04jgli_huaacb742d5c34e65a89b1645d1f4973f3_10190_17888f6a28555005d1e6d6ba74a7abc9.webp 400w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof0emvx9j20oj04jgli_huaacb742d5c34e65a89b1645d1f4973f3_10190_979d2708e832522337f2b29ff039f801.webp 760w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof0emvx9j20oj04jgli_huaacb742d5c34e65a89b1645d1f4973f3_10190_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof0emvx9j20oj04jgli_huaacb742d5c34e65a89b1645d1f4973f3_10190_17888f6a28555005d1e6d6ba74a7abc9.webp&#34;
               width=&#34;760&#34;
               height=&#34;140&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

当通过公共 API 暴露你的应用程序时，通常你必须在接收端或中间层中实施速率限制。即使你控制了源代码（客户端）应用程序，你也希望防止会导致过多 API 请求的错误产生，同时应付可能会试图破坏客户端应用程序的不良行为者。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof2hv9hgj20jk06tdgn_hu9a55e17f793ed0c5833126b5d562d46a_18968_870098643d1688cdba58e32939984b87.webp 400w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof2hv9hgj20jk06tdgn_hu9a55e17f793ed0c5833126b5d562d46a_18968_6e38d8ebbab178d7101a0374c44d7871.webp 760w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof2hv9hgj20jk06tdgn_hu9a55e17f793ed0c5833126b5d562d46a_18968_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof2hv9hgj20jk06tdgn_hu9a55e17f793ed0c5833126b5d562d46a_18968_870098643d1688cdba58e32939984b87.webp&#34;
               width=&#34;704&#34;
               height=&#34;245&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Stripe 博客有一篇精彩的关于“&lt;a href=&#34;https://stripe.com/blog/rate-limiters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;用限速器扩展你的 API&lt;/a&gt;”的文章，我将在本文中引用这篇文章，那篇文章的开头部分讨论了速率限制会如何帮助你在以下情况中让你的 API 更加可靠：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;某位用户制造了流量洪峰，导致你的应用过载，而你的应用此时还需要为其他用户提供服务。&lt;/li&gt;
&lt;li&gt;某位用户因为使用了行为不当的脚本，无意中向你发送了很多请求（相信我，这比你想象的要更频繁 - 我曾经亲自创建的压测脚本就意外触发了拒绝服务！）。又或者，更糟的情况是，某位用户试图故意让你的服务器过载。&lt;/li&gt;
&lt;li&gt;用户向你发送很多优先级较低的请求，而你需要确保它不会影响高优先级的通信。例如，发送大量分析数据请求的用户可能会影响其他用户的关键事务。&lt;/li&gt;
&lt;li&gt;系统中出现了某些内部问题，因此无法提供所有常规流量服务，并且需要丢弃低优先级的请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Datawire 工作期间，我们通常能够第一手地发现以上这些情况，特别是在那些暴露“免费”公共 API 的公司或者组织中，同时在这些组织中，也存在着明确的业务需求，即让付费用户优先使用流量，并且防止不良行为者（无论是有意或无意）。&lt;/p&gt;
&lt;h2 id=&#34;速率限制和负载削减的基础知识&#34;&gt;速率限制和负载削减的基础知识&lt;/h2&gt;
&lt;p&gt;基本上，要理解速率限制的概念很简单。对于每个要限制的请求属性，只需统计属性的唯一实例出现次数，并在每个时间单位超过指定的计数时拒绝服务相关的请求。例如，如果你想限制每个客户端发出的请求数量，你将使用“客户端标识”属性（可能通过字符串键值为 &lt;code&gt;clientID&lt;/code&gt; 的请求参数或直接包含在请求头部中），并为标识符保留一个计数器。&lt;/p&gt;
&lt;p&gt;你还可以指定单位时间的最大请求数，并且定义一个计数递减算法，而不是在每个单位时间开始时重置计数器（稍后会详细介绍）。当请求到达 API 网关时，它会递增相应的请求计数器并检查这个递增是否超过单位时间内最大允许请求数。如果超过，则拒绝这个请求，最常见的情况是向调用客户端返回 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“Too Many Requests”HTTP 429 状态码&lt;/a&gt;。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof4rdz1qj20lg07jt8w_huf5a9eb12dec080ef7b405482e3193537_22355_475d899739f9c75ba2f4784623d5b239.webp 400w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof4rdz1qj20lg07jt8w_huf5a9eb12dec080ef7b405482e3193537_22355_01dca38eecc3eecfdca84c116f2402cb.webp 760w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof4rdz1qj20lg07jt8w_huf5a9eb12dec080ef7b405482e3193537_22355_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof4rdz1qj20lg07jt8w_huf5a9eb12dec080ef7b405482e3193537_22355_475d899739f9c75ba2f4784623d5b239.webp&#34;
               width=&#34;760&#34;
               height=&#34;267&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;与速率限制密切相关的是“负载削减”。两者的主要区别在于判定拒绝请求的条件。速率限制是基于单个请求的属性（例如 clientId），而负载削减是基于应用的总体状态（例如，处于高负载的数据库）。如果系统仍处于部分运行状态，但是需要时间来恢复（或修复），则在流量入口点削减负载可以大量减少线上事故。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof5go9vvj20mq07dt8y_hu6485f23e60e2e8e9568294bae27898e8_25036_7895fec259eb9dccabd6c575e18244f1.webp 400w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof5go9vvj20mq07dt8y_hu6485f23e60e2e8e9568294bae27898e8_25036_04198db154d7c4b6b0f87673fbf5d560.webp 760w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof5go9vvj20mq07dt8y_hu6485f23e60e2e8e9568294bae27898e8_25036_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof5go9vvj20mq07dt8y_hu6485f23e60e2e8e9568294bae27898e8_25036_7895fec259eb9dccabd6c575e18244f1.webp&#34;
               width=&#34;760&#34;
               height=&#34;246&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;api-网关存在的挑战&#34;&gt;API 网关存在的挑战&lt;/h2&gt;
&lt;p&gt;大多数开源和商业 API 网关都提供速率限制，但在众多实现中，普遍存在的挑战之一就是可扩展性。在单个计算实例上运行 API 网关相对简单，这意味着你可以将速率限制的计数器保留在单机内存中。比如你是对 clientId 进行速率限制，则只需在内存映射中检查并设置（增加）关联 clientId 的整数计数器即可。但是，此方法不能扩展单个实例到网关实例集群。&lt;/p&gt;
&lt;p&gt;我见过一些开发人员试图通过使用粘性会话或将可允许请求的总数除以速率限制实例的数量来解决此限制。但是，这样做的问题在于，在高度动态的“云原生”环境中部署和运行应用程序时，这些方法都无法可靠地工作，因为在这种环境中，实例随时会被销毁并按需重建，或是动态扩容的。&lt;/p&gt;
&lt;p&gt;克服此限制的最佳解决方案是使用某种形式的高性能集中式数据存储来管理请求计数。例如，在 Lyft，该团队使用 &lt;a href=&#34;https://redis.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt;（大概是作为高可用的 Redis Sentinel 集群运行），通过他们的 Envoy 代理统计&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/global_rate_limiting.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;速率限制的指标&lt;/a&gt;，而该代理通过 sidecar 模式部署到所有服务和数据存储上。这种方法需要注意一些潜在的问题，特别是在 Redis 的检查和设置操作的原子性方面。出于性能原因通常建议避免使用锁机制，而 &lt;a href=&#34;https://gist.github.com/ptarjan/e38f45f2dfe601419ca3af937fff574d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stripe&lt;/a&gt; 和 &lt;a href=&#34;https://blog.figma.com/an-alternative-approach-to-rate-limiting-f8a06cf7c94c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Figma&lt;/a&gt; 通过在 Redis 引擎中使用 Lua 脚本功能保证原子性。&lt;/p&gt;
&lt;p&gt;另一个经常遇到的挑战涉及如何提取请求（元）数据用于决策速率限制，或者指定（或实现）用于确定是否应该拒绝特定请求的相关算法。理想情况下，你希望能够通过客户端属性（例如请求 HTTP 方法，位置，设备等）和后台属性（例如服务端点，由用户还是应用程序发起的请求等类似的语义信息以及期望的有效负载）来决策速率限制。&lt;/p&gt;
&lt;h2 id=&#34;通过外部服务实施速率限制&#34;&gt;通过外部服务实施速率限制&lt;/h2&gt;
&lt;p&gt;针对上一节讨论的许多挑战，&lt;a href=&#34;https://eng.lyft.com/announcing-ratelimit-c2e8f3182555&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lyft 工程团队&lt;/a&gt;去年提出了一个有趣的解决方案，当时他们谈论了他们如何使用 Envoy 代理（我们现在叫的名字）作为服务网格，通过为每个请求调用外部 &lt;a href=&#34;https://github.com/lyft/ratelimit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RateLimit&lt;/a&gt; 服务来实现限制速率。RateLimit 服务符合&lt;a href=&#34;https://github.com/lyft/ratelimit/blob/master/proto/ratelimit/ratelimit.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;定义的速率限制 Protobuf 协议，而这实际上就是一个速率限制 API。Datawire 团队已经在 Envoy 代理之上构建了开源 Ambassador API 网关，同时最近 &lt;a href=&#34;https://twitter.com/alex_gervais&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alex Gervais&lt;/a&gt; 已经为 Ambassador 提供了相同的&lt;a href=&#34;https://blog.getambassador.io/ambassador-adds-rate-limiting-support-in-0-31-595cc8f91e49&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;速率限制支持&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;由于你现在可以访问一个基于 Protobuf 速率限制服务 API，因此你可以使用任何你喜欢的语言（或至少是任何支持 Protobuf 的现代化语言）来实现拥有速率限制的服务。你现在还可以完全自由地在服务中实现任何你喜欢的速率限制算法，并且基于任何你想要传递给服务的元数据来制定速率限制策略。Lyft RateLimit 服务中的&lt;a href=&#34;https://github.com/lyft/ratelimit#user-content-examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;示例&lt;/a&gt;提供了一些有趣的灵感！值得一提的是，由于 Ambassador API 网关在 Kubernetes 内部运行，你创建的任何限制速率的服务都可以利用 Kubernetes 来处理扩展和容错。
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof69xqimj20h80bemxj_hu2a3766f1e4b0e2a3cfdc7242573887ba_23549_aecff21725ce0546cd3dd1ab42af329e.webp 400w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof69xqimj20h80bemxj_hu2a3766f1e4b0e2a3cfdc7242573887ba_23549_21f1e4ac38c720d7c9ccb06fd73db0b8.webp 760w,
               /blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof69xqimj20h80bemxj_hu2a3766f1e4b0e2a3cfdc7242573887ba_23549_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-for-api-gateway-daniel-bryant-part2/855e972fly1fsof69xqimj20h80bemxj_hu2a3766f1e4b0e2a3cfdc7242573887ba_23549_aecff21725ce0546cd3dd1ab42af329e.webp&#34;
               width=&#34;620&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;关于系列文章的下一篇&#34;&gt;关于系列文章的下一篇&lt;/h2&gt;
&lt;p&gt;在我们的速率限制系列的第二篇文章中，阐述了在 API 网关实施速率限制和负载削减的动机，并且还探讨了实施过程中可能遇到的一些挑战。在文章的最后一节中，我提出了一些在现代云平台（如 Kubernetes，ECS 等）中部署集成有速率限制 API 网关的想法，并讨论了如何使用外部服务来实现这一切，以达到在实施你对速率限制算法的要求的同时，还能提供很大灵活性。&lt;/p&gt;
&lt;p&gt;下周我们将发布本系列的最后一部分，我们将介绍如何利用 Java 为 Ambassador API 网关实施速率限制服务（&lt;a href=&#34;https://github.com/danielbryantuk/ambassador-java-rate-limiter/blob/master/src/main/java/io/datawire/ambassador/ratelimiter/simpleimpl/RateLimitServer.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;代码链接&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;同时，请随时通过电子邮件发送任何问题，或到 Ambassador 的 &lt;a href=&#34;https://gitter.im/datawire/ambassador&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitter 频道&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>速率限制 part1—分布式系统的一个实用工具</title>
      <link>https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/</link>
      <pubDate>Fri, 29 Jun 2018 15:51:19 +0800</pubDate>
      <guid>https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/</guid>
      <description>&lt;p&gt;在计算领域，速率限制通常用于控制服务发起或消耗的操作速率，或者是请求发送或接收的流量。如果你有一年以上的软件开发经验，那么你应该会遇到这个概念。但是，和很多软件架构所面临的挑战一样，比起实际出现的问题，需要思考的问题会更多。本文概述了现代分布式应用程序中的一些关于速率限制的实现方案、优势和挑战。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要速率限制&#34;&gt;为什么需要速率限制？&lt;/h2&gt;
&lt;p&gt;实现速率限制主要是由于以下三个原因：通过资源节制防止（有意无意的）拒绝服务，限制（潜在的）级联故障的影响，以及限制或计量资源的使用情况。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.twitter.com/en/docs/basics/rate-limiting&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; 或 &lt;a href=&#34;https://go.developer.ebay.com/api-call-limits&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ebay&lt;/a&gt; 这样的企业组织使用了一种类似的拒绝服务防治模式：在 SaaS API 之前放置一个速率限制器，以此来避免针对 API 后端的拒绝服务恶意攻击，同时也可以为所有消费者提供一致的服务。在那些支付 API（如 &lt;a href=&#34;https://stripe.com/blog/rate-limiters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stripe&lt;/a&gt; ）的减负策略中可以使用速率限制来防止级联故障（通过系统中的一些组件部分降级）。同样，当为外部信息源轮询健康检查这些新数据时，也会使用限制（或计量）模式。这样我们只需要定期获取数据，并可以为启动的每个请求付费。&lt;/p&gt;
&lt;h2 id=&#34;如何选择&#34;&gt;如何选择？&lt;/h2&gt;
&lt;p&gt;基于简化的原则，我们假设正在处理点对点通信模型中的速率限制。在这种场景下，你可以在数据发送的“发送端”或数据消费“接收端”中的任何地方实施速率限制，当然还有其他“中间件”选项：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-发送端和接收端&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;发送端和接收端&#34; srcset=&#34;
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq2gb6qhj20lp05wmx4_hud1c9d7e810d14ba7fd378f4b3d3fa352_13116_8704f8902076d1215bb254b6ec5397a7.webp 400w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq2gb6qhj20lp05wmx4_hud1c9d7e810d14ba7fd378f4b3d3fa352_13116_1efe89658a28bf2ddb6c831ea25cc713.webp 760w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq2gb6qhj20lp05wmx4_hud1c9d7e810d14ba7fd378f4b3d3fa352_13116_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq2gb6qhj20lp05wmx4_hud1c9d7e810d14ba7fd378f4b3d3fa352_13116_8704f8902076d1215bb254b6ec5397a7.webp&#34;
               width=&#34;760&#34;
               height=&#34;206&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      发送端和接收端
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以控制发送端发送请求的速率：通过定义时间限制循环来定期发送 API 请求。&lt;/li&gt;
&lt;li&gt;你可以控制接收端接收请求的速率：在当前任务/线程处理完成之前拒绝新的入站 HTTP 连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-控制速率&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;控制速率&#34; srcset=&#34;
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq7eltt3j20rc06tdfv_hua95a442ddca69898b2a777dbeea58e15_20302_7a376d704b2dcb26e5c875ab6e852537.webp 400w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq7eltt3j20rc06tdfv_hua95a442ddca69898b2a777dbeea58e15_20302_50ab79915b3a0b51293dede48717becf.webp 760w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq7eltt3j20rc06tdfv_hua95a442ddca69898b2a777dbeea58e15_20302_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq7eltt3j20rc06tdfv_hua95a442ddca69898b2a777dbeea58e15_20302_7a376d704b2dcb26e5c875ab6e852537.webp&#34;
               width=&#34;760&#34;
               height=&#34;189&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      控制速率
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以使用中间层来缓冲发送的请求：通过将请求放入队列（可以通过定义不同优先级，为请求提供不同级别的 SLA）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-请求缓冲&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;请求缓冲&#34; srcset=&#34;
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq8on7a0j20lr07eaa2_hu2383703908aa2b716d48bb44f695dec4_14061_3ed6bb986c80704eded93d904883b09d.webp 400w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq8on7a0j20lr07eaa2_hu2383703908aa2b716d48bb44f695dec4_14061_26b550869fcbbaa21c2f0a03f5716d9b.webp 760w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq8on7a0j20lr07eaa2_hu2383703908aa2b716d48bb44f695dec4_14061_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq8on7a0j20lr07eaa2_hu2383703908aa2b716d48bb44f695dec4_14061_3ed6bb986c80704eded93d904883b09d.webp&#34;
               width=&#34;760&#34;
               height=&#34;258&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      请求缓冲
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以使用中间层来限制发送的请求：通过使用某种形式的代理或网关。这样当下游服务不再接受请求时，它会切换至断路器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-中间层&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;中间层&#34; srcset=&#34;
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq9qjzycj20jk06tdgn_hu9a55e17f793ed0c5833126b5d562d46a_18968_a6e555c470d15e421362e7a6fc75de8e.webp 400w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq9qjzycj20jk06tdgn_hu9a55e17f793ed0c5833126b5d562d46a_18968_33b282b13c729cacd3ba4ee4b9010ba3.webp 760w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq9qjzycj20jk06tdgn_hu9a55e17f793ed0c5833126b5d562d46a_18968_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmq9qjzycj20jk06tdgn_hu9a55e17f793ed0c5833126b5d562d46a_18968_a6e555c470d15e421362e7a6fc75de8e.webp&#34;
               width=&#34;704&#34;
               height=&#34;245&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      中间层
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;如何权衡&#34;&gt;如何权衡？&lt;/h2&gt;
&lt;p&gt;如果你正在开发一个需要解决上述问题的系统，可以参考如下方案，并清楚定义在哪些地方（及相应组件）需要实现速率限制。&lt;/p&gt;
&lt;p&gt;另一方面，如果你只控制其中一端（比如只控制接收端或只开放公用 API），那么你的选择余地就会受到限制，因为你不能依赖现有的设计指南或设计原则（即使系统不包含恶意使用者）。即使你同时控制了两端，你可能仍然想要实现“双保险”，实现同时包括两端的速率限制。&lt;/p&gt;
&lt;p&gt;其他需要权衡点包括：&lt;/p&gt;
&lt;h3 id=&#34;发送端和接收端的处理速率限制的能力&#34;&gt;发送端和接收端的处理速率限制的能力&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有时由于开发模型或可用资源限制等原因，不可能在组件内实施有效的速率限制。&lt;/li&gt;
&lt;li&gt;在分布式系统中，单个组件的速率限制可能无法提供所需的功能（至少在一定程度上需要其他协调）。例如，如果你的速率限制了某个请求发送端进行连接，你需要横向扩展至两个发送端来满足需求，这样导致允许的发送端变为两个。&lt;/li&gt;
&lt;li&gt;你可能也不希望后端服务工程师开发速率限制功能，因为这样可能会由于定制开发而引起不同技术栈的差异。&lt;/li&gt;
&lt;li&gt;如果应用程序负载过重，可能需要将所有速率限制功能放到应用外，以避免在应用中执行速率限制功能导致其性能损失。&lt;/li&gt;
&lt;li&gt;我相信你听说过“单一职责”原则。因此在粗颗粒度架构级别，你可能会要求在应用外的组件里提供像速率限制这样的辅助功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;速率限制中间件的故障模式&#34;&gt;速率限制中间件的故障模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你有必要知道速率限制服务崩溃（服务启动失败或被关闭）时会发生什么？如果服务能缓冲请求，你可能需要定义服务重启策略（期间的请求需要被缓冲至磁盘）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;速率限制中间件的算法灵活性&#34;&gt;速率限制中间件的算法灵活性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自己实现基于发送端或接收端速率限制功能的主要优势在于是你可以完全控制速率限制算法的实现方式。例如，&lt;a href=&#34;https://en.wikipedia.org/wiki/Token_bucket&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;令牌桶&lt;/a&gt; 、 &lt;a href=&#34;https://blog.figma.com/an-alternative-approach-to-rate-limiting-f8a06cf7c94c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;固定窗口&lt;/a&gt; 、 &lt;a href=&#34;https://blog.figma.com/an-alternative-approach-to-rate-limiting-f8a06cf7c94c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;滑动窗口&lt;/a&gt; 以及通过请求（元）数据来进行算法决策。&lt;/li&gt;
&lt;li&gt;你需要经常评估哪些算法可以与外部速率限制服务一起“开箱即用”，同时确定是否需要其他外部数据（包括关联的元数据处理）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;案例&#34;&gt;案例&lt;/h2&gt;
&lt;p&gt;更具体一点，我们来看几个例子。&lt;/p&gt;
&lt;h3 id=&#34;运行一个任务来调用第三方-sdk每次调用都具有请求限制同时按计量收费即你控制发送端但无法控制接收端&#34;&gt;运行一个任务来调用第三方 SDK，每次调用都具有请求限制，同时按计量收费（即你控制发送端，但无法控制接收端）。&lt;/h3&gt;
&lt;p&gt;对于请求限制和按计量收费的方案，我希望实施本地（发送端）速率限制。假设请求超过了速率限制，那么可能会收到一个错误，或者可能被（暂时）阻止。我因此需要确认 SLA 或检查生产实施文档。无论发生什么，我都不会希望我的应用程序简单地在不断尝试循环连接，因为是这只会浪费我的资源。如果发送端没有基于计量收费的速率限制，我会付出很多钱，而且没有人愿意这样做！&lt;/p&gt;
&lt;p&gt;在 Java 语言中，我经常使用 Google 开源的 Guava RateLimiter 库来解决这类问题。我写的发送端的应用程序示例就像下面这样：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-guava-案例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Guava 案例&#34; srcset=&#34;
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmqalcy5zj20kv03gglu_hu98388f137656d42f4cfa27a8bbb3c661_26655_6429da66ece8cf1bfffb43549bc25021.webp 400w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmqalcy5zj20kv03gglu_hu98388f137656d42f4cfa27a8bbb3c661_26655_295b1b4ef6b98e408e510039a4d606b8.webp 760w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmqalcy5zj20kv03gglu_hu98388f137656d42f4cfa27a8bbb3c661_26655_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmqalcy5zj20kv03gglu_hu98388f137656d42f4cfa27a8bbb3c661_26655_6429da66ece8cf1bfffb43549bc25021.webp&#34;
               width=&#34;751&#34;
               height=&#34;124&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Guava 案例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这是一个基于  &lt;a href=&#34;https://google.github.io/guava/releases/19.0/api/docs/index.html?com/google/common/util/concurrent/RateLimiter.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Guava RateLimiter JavaDoc&lt;/a&gt;  的简单示例，实际上我可能在任务执行逻辑中增加一些异常处理块。&lt;/p&gt;
&lt;h3 id=&#34;提供一个公共-api即你控制接收端但无法控制全部发送端&#34;&gt;提供一个公共 API（即你控制接收端，但无法控制（全部）发送端）&lt;/h3&gt;
&lt;p&gt;在这种场景下，可以防止 API 后端过载的唯一方法是通过对接收端进行速率限制，最好是将限制功能放到如 API 网关这类外部服务上。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-api-gateway&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;API Gateway&#34; srcset=&#34;
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmqcco3umj20h80bemxj_hu2a3766f1e4b0e2a3cfdc7242573887ba_23549_e513efdbd3be7e85e0139bdc83b7ed12.webp 400w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmqcco3umj20h80bemxj_hu2a3766f1e4b0e2a3cfdc7242573887ba_23549_2049796e649da019f66351f8ed3910ec.webp 760w,
               /blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmqcco3umj20h80bemxj_hu2a3766f1e4b0e2a3cfdc7242573887ba_23549_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/rate-limiting-a-useful-tool-with-distributed-systems-part1/78a165e1gy1fsmqcco3umj20h80bemxj_hu2a3766f1e4b0e2a3cfdc7242573887ba_23549_e513efdbd3be7e85e0139bdc83b7ed12.webp&#34;
               width=&#34;620&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      API Gateway
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;通过这篇速率限制文章的三部分，我们了解了速率限制的动机、可以选择的方案和相关的权衡。在下一篇文章中，我将详细介绍如何实现 API 网关的速率限制算法！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>容器、服务网格和 API 网关：从边缘开始</title>
      <link>https://cloudnative.to/blog/containers-service-mesh-and-api-gateways-it-starts-at-the-edge/</link>
      <pubDate>Thu, 21 Jun 2018 18:00:58 +0800</pubDate>
      <guid>https://cloudnative.to/blog/containers-service-mesh-and-api-gateways-it-starts-at-the-edge/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://devops.com/containers-service-mesh-and-api-gateways-it-starts-at-the-edge/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker&lt;/a&gt; 和 &lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 为代表的容器技术炙手可热，熟知这一技术领域的用户，一定都知道下一个热点：Service Mesh，它承诺将微服务之间的内部网络通信均一化，并解决一系列监控、故障隔离等通用非功能性需求。底层的代理服务器技术是 Service Mesh 的立身之本，这种技术在 Service Mesh 之外，还能以 API 网关的形式在边缘为业务系统提供一系列的增强。&lt;/p&gt;
&lt;p&gt;虽说 Service Mesh 的爆发之势让人误以为罗马是一日建成的，事实上，在这一热点浮出水面之前，包括 &lt;a href=&#34;https://getnelson.github.io/nelson/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Verizon&lt;/a&gt;、&lt;a href=&#34;https://fabiolb.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBday&lt;/a&gt; 以及 &lt;a href=&#34;https://code.facebook.com/posts/1906146702752923/open-sourcing-katran-a-scalable-network-load-balancer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebook&lt;/a&gt; 在内的很多组织已经在应用后来被我们称之为 Service Mesh 的技术了。这些早期应用 Service Mesh 的组织之一就是 &lt;a href=&#34;https://www.microservices.com/talks/lyfts-envoy-monolith-service-mesh-matt-klein/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lyft&lt;/a&gt;，这是一家年收入超过十亿美元的美国网约车巨头。Lyft 还是开源软件 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Proxy&lt;/a&gt; 的诞生地，Envoy 在 Service Mesh 世界中举足轻重，Kubernetes 原生的 &lt;a href=&#34;https://istio.io/docs/concepts/what-is-istio/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 控制面&lt;/a&gt; 和 &lt;a href=&#34;https://www.getambassador.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambassador API 网关&lt;/a&gt; 也都建筑在 Lyft 的基础之上。&lt;/p&gt;
&lt;h2 id=&#34;soa-网络的烦恼&#34;&gt;SOA 网络的烦恼&lt;/h2&gt;
&lt;p&gt;Matt Klein 是 Envoy Proxy 的作者之一，他去年的一次谈话中说到，SOA（面向服务的架构）和微服务网络是“&lt;a href=&#34;https://www.microservices.com/talks/lyfts-envoy-monolith-service-mesh-matt-klein/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;混乱的庞然大物&lt;/a&gt;”。身处其中的每个应用都输出了不同的统计和日志，整个服务堆栈如何处理请求生成响应的过程也是无法跟踪的，在这样的情况下进行 Debug 的巨大难度也就可以想象了。同时对类似负载均衡器、缓存以及网络拓扑这样的基础设施组件的监控能力也是很有限的。&lt;/p&gt;
&lt;p&gt;他觉得：“这很痛苦，我认为多数公司都赞同 SOA（微服务）是个可见趋势，在这一趋势的践行过程中会收获很多，但是其中也满是痛苦。主要的痛苦来源就是 Debug”。&lt;/p&gt;
&lt;p&gt;对于大规模组织来说，分布式 Web 应用的可靠性和高可用支持是一个核心挑战。这种挑战的应对方式中，普遍包含包含重试、超时、频率控制和熔断等功能逻辑的各种实现。很多系统，不论开源与否，都会使用锁定特定语言（甚至锁定框架）的形式来实现这种方案，这就意味着开发人员也同时被进行锁定。Klein 和他在 Lyft 的团队认为，一定有更好的办法。最终 Envoy 项目诞生了。&lt;/p&gt;
&lt;h2 id=&#34;外部干预边缘代理的优势&#34;&gt;外部干预：边缘代理的优势&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://eng.lyft.com/announcing-envoy-c-l7-proxy-and-communication-bus-92520b6c8191&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016 年 9 月&lt;/a&gt; 以开源形式发布了 Envoy Proxy，Klein 和 Lyft 工程师团队一夕成名，但这并非一蹴而就，Lyft 架构从最初的混合 SOA 架构起步，花费了四年，突破层层险阻升级为服务网格治理之下的微服务体系。2017 年的&lt;a href=&#34;https://www.microservices.com/talks/mechanics-deploying-envoy-lyft-matt-klein/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务实践者虚拟峰会&lt;/a&gt;上，Klein 讲述了向服务网格进行技术迁移的过程中面对基本需求和相关挑战，及其商业价值。&lt;/p&gt;
&lt;p&gt;Klein 的第一次艰苦取胜是“从边缘代理开始”的。微服务为基础的 Web 应用需要在边缘提供反向代理，一方面可以防止暴露内部业务服务接口（会违反松耦合原则），另一方面，暴露大量服务也意味着大量的独立 URI 以及 RPC 端点，这会消耗大量的运维资源。现存的云所提供的边缘代理服务器或者网关都不很好，不同产品呈现给工程师的是不同的、易混淆的工作界面。Klein 倡议在边缘实现一个现代化的代理服务，在其中提供改进的监控、负载均衡以及动态路由能力，以此来产生商业价值。工程师团队理解和掌握了边缘代理的运维之后，就可以向内部团队进行推广，最终形成内部的服务网格了。&lt;/p&gt;
&lt;h2 id=&#34;边缘进化从代理到-api-网关&#34;&gt;边缘进化：从代理到 API 网关&lt;/h2&gt;
&lt;p&gt;AppDirect 是一个端到端提供云端产品和服务管理的商业平台，预计年收入 5000 万美元。在 AppDirect 最近的博客 &lt;a href=&#34;https://www.appdirect.com/blog/evolution-of-the-appdirect-kubernetes-network-infrastructure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Evolution of the AppDirect Kubernetes Network Infrastructure&lt;/a&gt; 中，他们着重介绍了和 Lyft 类似的经历。云技术和 Kubernetes 之类的编排平台带来的不只是有规模、弹性之类的好处，还因为与生俱来的易变和动态特性，提出了新的挑战：微服务构建的商业功能如何合适的在公共端点上提供服务？&lt;/p&gt;
&lt;p&gt;AppDirect 工程师团队采用了一种可靠的方法来应对挑战，首先把配置的核心部分（例如暴露的服务端口）静态化，然后在每个应用之前部署负载均衡器。接下来的迭代就是使用 HashiCorp 的分布式键值库 &lt;a href=&#34;https://www.consul.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Consul&lt;/a&gt; 结合支持热重载的 HAProxy 反向代理来提供更好的动态管理能力。团队的终极目标是用更丰富功能的 API 网关来提供更丰富的功能。&lt;/p&gt;
&lt;p&gt;文中说到：“API 网关的目标是在不变更已公开 API 的访问性的情况下（这种不经变更的可访问性也包含了旧有的 URL 以及友商的定制域名等），通过注入和替换的方式逐个实现转换过程。”&lt;/p&gt;
&lt;p&gt;在对一系列的开源和商业产品进行评估之后，AppDirect 团队选择了构建在 Envoy proxy 之上的 Kubernetes 原生的 Ambassador API 网关产品：&lt;/p&gt;
&lt;p&gt;“构建于我们了解和喜爱的 Kubernetes API 之上的 Ambassador，是一个轻量、稳定以及没有外部数据库依赖的产品。Ambassador 很独特，使用 Kubernetes 对象标注功能来定义路由配置（也就是以此实现 &lt;a href=&#34;https://blog.envoyproxy.io/the-universal-data-plane-api-d15cec7a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 数据面&lt;/a&gt;的控制平面）”——团队博客如是说。&lt;/p&gt;
&lt;p&gt;虽然 AppDirect 还没有完全实现内部通信的网格化，但是已经感受到了 Envoy Proxy 这样的技术所带来的好处，更学到了在产品中应用这些技术的能力。&lt;/p&gt;
&lt;h2 id=&#34;星火燎原&#34;&gt;星火燎原&lt;/h2&gt;
&lt;p&gt;服务网格技术的实现和迁移过程才刚刚开始，但是已经可以肯定，这一技术弥合了 Kubernetes 这样的现代容器化平台中应用之间的鸿沟。服务网格带来的，包括频率控制、断路器以及监控性等在内的所有好处，都可以从服务边缘开始享用。如果想要对这一技术进行进一步的探索和学习，在系统边缘开始，农村包围城市是一种行之有效的策略。这种策略无需全面部署，就能迅速的在监控、弹性等方面展示出特有的商业价值。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
