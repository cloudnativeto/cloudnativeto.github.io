<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fabrizio Guglielmino | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/fabrizio-guglielmino/</link>
      <atom:link href="https://cloudnative.to/author/fabrizio-guglielmino/index.xml" rel="self" type="application/rss+xml" />
    <description>Fabrizio Guglielmino</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 17 Apr 2023 10:27:22 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>Fabrizio Guglielmino</title>
      <link>https://cloudnative.to/author/fabrizio-guglielmino/</link>
    </image>
    
    <item>
      <title>用 Docker 和 WebAssembly 打造容器的新时代！</title>
      <link>https://cloudnative.to/blog/docker-wasm-quick-intro/</link>
      <pubDate>Mon, 17 Apr 2023 10:27:22 +0800</pubDate>
      <guid>https://cloudnative.to/blog/docker-wasm-quick-intro/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;译者注：本文译自 &lt;a href=&#34;https://medium.com/@guglielmino/docker-webassembly-a-quick-intro-730c38e8390c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker + WebAssembly: a quick intro | by Fabrizio Guglielmino | Medium&lt;/a&gt;，本文介绍了使用 Docker 和 WebAssembly 创建容器的过程。通过比较标准 Docker 容器和 WebAssembly 容器，作者指出 WebAssembly 容器具有性能优势、架构中立等优点，但也存在不成熟的问题。WebAssembly 容器有望彻底改变容器化应用程序的方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天，我想展示一种实用且有趣的使用 Docker 的方式：在容器中使用 WebAssembly。&lt;/p&gt;
&lt;p&gt;我说“实用的方式”，这就是为什么我假设您有一些经验：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Docker（当然）&lt;/li&gt;
&lt;li&gt;Rust（实际上，只是为了理解“Hello World”）&lt;/li&gt;
&lt;li&gt;WebAssembly；只需要对其有一个基本的了解（注意：我将在讨论中交替使用 WASM 和 WebAssembly 这两个术语）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于我即将展示的内容，简单说一下：一个 Docker 容器是一个包含运行环境的映像的运行实例。运行环境通常是一个操作系统，大多数情况下是 Linux。操作系统是运行应用程序的必要条件。&lt;/p&gt;
&lt;p&gt;如果我们能够在最小化依赖关系的情况下运行应用程序，甚至不需要任何依赖关系，会怎样呢？&lt;/p&gt;
&lt;p&gt;这就是我想谈论的想法：使用 WASM，以及 Docker 中（目前测试版）的支持，我们将创建一个不含任何操作系统基础镜像的容器。&lt;/p&gt;
&lt;h2 id=&#34;为什么是-webassembly-容器&#34;&gt;为什么是 WebAssembly 容器？&lt;/h2&gt;
&lt;p&gt;引用 Docker 的作者 Solomon Hykes 的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“如果 WASM+WASI 在 2008 年就存在了，我们就不需要创造 Docker 了。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这可能足够了，但让我们列举一些具体的好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：仅部署我们的代码可以减少“攻击面”，从而提高整体安全性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大小&lt;/strong&gt;：我们可以创建比等效于带有操作系统的应用程序更小得多的容器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：如您所料，没有操作系统层，WASM 容器可以表现出更好的性能（不总是正确的，但平均而言是正确的）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;架构中立性&lt;/strong&gt;：Docker 容器是为特定目标架构（arm、x86 等）编译的，只能在具有相同架构的主机上运行。相比之下，WebAssembly 是架构中立的，这意味着只要运行时可用，应用程序就可以在任何底层架构上运行。这提供了几个优点，例如在不需要重新编译的情况下在多个平台上运行相同的代码以及在以前不受支持的平台上运行代码的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，使用 WebAssembly 容器有一些有趣的好处！&lt;/p&gt;
&lt;h2 id=&#34;让我们开始吧&#34;&gt;让我们开始吧&lt;/h2&gt;
&lt;p&gt;本文将高度实用，只涉及该主题的表面，并留下许多细节。这些细节将在将来的文章中深入探讨，尽管已经有许多很好的资源可用。&lt;/p&gt;
&lt;p&gt;让我们从一个基本应用程序开始。尽管在这个例子中是用 Rust 编写的，但使用的语言并不重要，只要它支持 WebAssembly 作为编译目标即可。&lt;/p&gt;
&lt;p&gt;假设在计算机上已经安装了 Rust（&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如果没有&lt;/a&gt;），让我们使用 &lt;code&gt;cargo new rust-wasm-docker&lt;/code&gt; 创建一个新的 Rust 应用程序&lt;/p&gt;
&lt;p&gt;这将创建最小化的 Rust 应用程序结构。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;total 8
drwxr-xr-x@ 3 fabrizio  staff   96 Jan 12 20:55 src
-rw-r--r--@ 1 fabrizio  staff  186 Jan 12 20:55 Cargo.toml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以保留提供的最小应用程序代码，这是一个相当常见和易读的“Hello World”。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# cat src/main.rs
fn main() {
    println!(&amp;#34;Hello, world!&amp;#34;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们尝试使用 &lt;code&gt;cargo run&lt;/code&gt; 运行，输出应该是“Hello, world!”。&lt;/p&gt;
&lt;h2 id=&#34;常见的-docker-方式&#34;&gt;常见的 Docker 方式&lt;/h2&gt;
&lt;p&gt;如果没有 WebAssembly 的方法，我们将创建一个 Docker 镜像：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM rust:latest

WORKDIR /usr/src/myapp
COPY . .

RUN cargo install --path .

CMD [&amp;#34;wasm-docker-hello&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是一个非常简单的 &lt;code&gt;Dockerfile&lt;/code&gt; ，它使用 Docker Hub 的 &lt;code&gt;rust&lt;/code&gt; 基本镜像，将源从当前主机目录复制到镜像中的 &lt;code&gt;/usr/src/myapp&lt;/code&gt; ，运行 &lt;code&gt;cargo install&lt;/code&gt; 来编译应用程序，最终将应用程序二进制文件定义为容器命令。&lt;/p&gt;
&lt;p&gt;假设 Docker 已经安装在计算机上（&lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如果没有&lt;/a&gt;），我们可以使用以下命令创建一个镜像： &lt;code&gt;docker build -t hello-docker .&lt;/code&gt; 该命令使用当前目录中的 Dockerfile 构建镜像，并将其标记为“hello-docker”。&lt;/p&gt;
&lt;p&gt;然后，在构建镜像后，我们可以使用 &lt;code&gt;docker run hello-world&lt;/code&gt; 运行它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# docker run hello-docker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello, world!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，让我们尝试进行另一个快速测试，稍后在本文中更清楚地说明 WebAssembly 容器的区别。我们可以使用 &lt;code&gt;bash&lt;/code&gt; shell 覆盖默认命令来运行我们的镜像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -it hello-docker bash
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@be1902d5e9b6:/usr/src/myapp#
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出可能略有不同，因为容器 ID（be1902d5e9b6）在每次运行容器时都是随机生成的。无论如何，这里的重要点是，您可以获取一个 shell 与之交互，就像在任何常见的 Linux 机器上一样。&lt;/p&gt;
&lt;h2 id=&#34;走进-webassembly&#34;&gt;走进 WebAssembly&lt;/h2&gt;
&lt;p&gt;现在，让我回顾一下我们到目前为止所做的事情：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们创建了一个非常（非常）简单的 Rust 应用程序&lt;/li&gt;
&lt;li&gt;我们在主机机器上构建和运行了该应用程序&lt;/li&gt;
&lt;li&gt;我们创建了一个 &lt;code&gt;Dockerfile&lt;/code&gt; 来构建应用程序和镜像&lt;/li&gt;
&lt;li&gt;我们通过成功运行它来测试了 Docker 镜像的功能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来呢？目标是仅使用我们的应用程序创建一个 docker 镜像。要非常明确：这意味着一个不含任何操作系统的镜像作为运行环境。实际上，我运行了 &lt;code&gt;docker run -it hello-docker bash&lt;/code&gt; 来展示我们创建的镜像实际上是一个带有我们的应用程序捆绑的 Linux 运行环境。&lt;/p&gt;
&lt;p&gt;在继续之前，我们需要配置一些工具。首先，我们必须设置编译 WebAssembly + WASI 的能力，然后启用实验性的 Docker 功能以运行 WASM 容器。&lt;/p&gt;
&lt;p&gt;让我们开始使用 &lt;code&gt;rustup target add wasm32-wasi&lt;/code&gt; 安装 WASI。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WASI（WebAssembly 系统接口）是一组规范和 API，提供了执行 WebAssembly 代码的标准接口，这些代码不在 Web 浏览器中运行，例如在服务器或独立应用程序中运行。它允许 WebAssembly 模块访问系统资源，如文件系统和网络，并提供安全的沙箱环境。它提供了使 WebAssembly 成为独立可执行格式所需的关键功能，使其能够用于各种超越 Web 的场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到目前为止一切顺利！现在可以运行 &lt;code&gt;cargo build --target wasm32-wasi&lt;/code&gt; 编译 WebAssembly。如果尝试，我们将在 &lt;code&gt;target/wasm32-wasi/debug&lt;/code&gt; 目录中获得一个名为 &lt;code&gt;wasm-docker-hello.wasm&lt;/code&gt; 的文件。很好，但是我们该如何运行此二进制文件？尝试像普通可执行文件一样执行它，如 &lt;code&gt;. ./target/wasm32-wasi/debug/wasm-docker-hello.wasm&lt;/code&gt;，我们会收到错误，为什么？实际上，错误是不言自明的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;zsh: &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; format error: ./target/wasm32-wasi/debug/wasm-docker-hello.wasm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;wasm 文件不是为我们主机的本机架构（无论是 x86_64、arm 还是其他）构建的。我们需要一个 &lt;strong&gt;WebAssembly 运行时&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;webassembly-运行时将-wasm-带到各处&#34;&gt;WebAssembly 运行时：将 WASM 带到各处&lt;/h2&gt;
&lt;p&gt;有许多 WASM 运行时。WebAssembly 最初是为在 Web 浏览器中使用而设计的，在这种情况下，运行时不需要，因为 &lt;strong&gt;浏览器充当运行时&lt;/strong&gt;。但是，在创建命令行应用程序的情况下，需要运行时，对于完整的应用程序、服务器等也是如此。&lt;/p&gt;
&lt;p&gt;我们将安装 &lt;strong&gt;WasmEdge&lt;/strong&gt;，这是 Docker 用于执行我们的 WASM 镜像的运行时。如果您在 Mac OS 或 Linux 机器上，可以使用以下命令进行安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl -sSf &amp;lt;https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh&amp;gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; bash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如需完整的安装说明（包括 Windows），请在此处查看 &lt;a href=&#34;https://wasmedge.org/book/en/quick_start/install.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://wasmedge.org/book/en/quick_start/install.html&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;启用-dockerwasm-集成&#34;&gt;启用 Docker+WASM 集成&lt;/h2&gt;
&lt;p&gt;最后一步是启用 Docker 中的 WASM 支持，这是目前的实验性功能。可以通过启用 containerd 镜像存储库来完成此操作。&lt;/p&gt;
&lt;p&gt;使用 Docker Desktop，只需在设置页面中打开该功能即可。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/docker-wasm-quick-intro/ui_huf50248a121f857a9401ba6bd403cd5b5_288921_1f5bcea6a397ca44a5fd4cb6d635d567.webp 400w,
               /blog/docker-wasm-quick-intro/ui_huf50248a121f857a9401ba6bd403cd5b5_288921_7a46c8ed22385a848fca2867156a844e.webp 760w,
               /blog/docker-wasm-quick-intro/ui_huf50248a121f857a9401ba6bd403cd5b5_288921_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/docker-wasm-quick-intro/ui_huf50248a121f857a9401ba6bd403cd5b5_288921_1f5bcea6a397ca44a5fd4cb6d635d567.webp&#34;
               width=&#34;760&#34;
               height=&#34;357&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;详细说明可以在此处找到 &lt;a href=&#34;https://docs.docker.com/desktop/wasm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.docker.com/desktop/wasm/&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;准备创建无操作系统的容器&#34;&gt;准备创建“无操作系统“的容器&lt;/h2&gt;
&lt;p&gt;现在我们已经准备好创建一个新的 Dockerfile（我们将其命名为 &lt;code&gt;Dockerfile.wasm&lt;/code&gt; 以区分它与以前的文件），内容如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FROM scratch
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;COPY target/wasm32-wasi/debug/wasm-docker-hello.wasm /app.wasm
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ENTRYPOINT &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;app.wasm&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它非常简短和易懂，但有几个要点需要强调：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;它以“FROM scratch”开始，表示该镜像是从头开始构建的，不会继承任何操作系统环境&lt;/li&gt;
&lt;li&gt;我们将编译后的二进制文件复制到镜像中，在前一个示例中，我们复制了源文件并在构建镜像过程中对其进行了编译，这里我们使用已经编译好的（在主机上）wasm 二进制文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; 是二进制文件本身，这里没有指定运行时&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;构建我们的镜像，方式与我们为“通用”镜像所做的方式相同。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker build -t wasm-docker -f Dockerfile.wasm .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也许有人已经注意到了一个有趣的点：Docker 如何知道在 ENTRYPOINT 指向.wasm 二进制文件的镜像中使用 &lt;strong&gt;WasmEdge&lt;/strong&gt; 作为运行时？我们已经测试过，直接运行.wasm 文件不起作用。&lt;/p&gt;
&lt;p&gt;实际上没有，我们需要在启动容器时指定运行时。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --runtime&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;io.containerd.wasmedge.v1 --platform&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;wasi/wasm32 b678ba11b941
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们指定 &lt;code&gt;--runtime&lt;/code&gt; 告诉 Docker 使用 WasmEdge 作为运行时，并指定 &lt;code&gt;--platform&lt;/code&gt; 使用 WASI 接口作为平台。就这样，如果您按照所有步骤操作，您应该看到一个令人兴奋的“Hello, world!”。&lt;/p&gt;
&lt;p&gt;当然，我是开玩笑的，比较镜像大小使用 &lt;code&gt;docker images&lt;/code&gt; 命令可以看到更有趣的结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hello-docker                latest    e9ed5014b408   &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; seconds ago   544MB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wasm-docker                 latest    b678ba11b941   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; seconds ago   507kB
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;hello-docker&lt;/code&gt; 是我们在开始时构建的镜像，尺寸差异巨大。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;&lt;strong&gt;结论&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;在本文中，我们比较了标准 Docker 容器和 WASM 容器。标准 Docker 容器和 WebAssembly 容器都有各自独特的优点和限制，但 WASM 正在展示成为一种高度有前途的容器化技术，尤其是对于某些用例。与标准 Docker 容器相比，WebAssembly 提供了性能优势，例如更快的启动时间、更低的内存使用率以及代码和主机系统之间更好的隔离。此外，WebAssembly 是架构中立的，这意味着只要运行时可用，应用程序就可以在任何底层架构上运行。这提供了多种优势，例如在多个平台上运行相同的代码而无需重新编译，并能在以前不支持的平台上运行代码。甚至可以在诸如物联网、边缘计算等受限设备上扩展容器的使用。&lt;/p&gt;
&lt;p&gt;然而，值得注意的是，WebAssembly 仍处于早期阶段，尚不成熟，尚不具备广泛采用的条件。尽管如此，重要的是要关注这项技术，因为它有潜力彻底改变我们容器化应用程序的方式。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
