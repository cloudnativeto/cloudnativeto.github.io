<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>陈鹏 | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/%E9%99%88%E9%B9%8F/</link>
      <atom:link href="https://cloudnative.to/author/%E9%99%88%E9%B9%8F/index.xml" rel="self" type="application/rss+xml" />
    <description>陈鹏</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Fri, 26 Feb 2021 12:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/author/%E9%99%88%E9%B9%8F/avatar_hu3801682002625739492.jpg</url>
      <title>陈鹏</title>
      <link>https://cloudnative.to/author/%E9%99%88%E9%B9%8F/</link>
    </image>
    
    <item>
      <title>使用 CLion 搭建 istio-proxy (envoy) 开发环境</title>
      <link>https://cloudnative.to/blog/use-clion-read-envoy-source/</link>
      <pubDate>Fri, 26 Feb 2021 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/use-clion-read-envoy-source/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;要想深入学习 istio，还得学习下数据面的实现，istio 的数据面使用了 envoy，在 istio group 下有个叫 &lt;a href=&#34;https://github.com/istio/proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proxy&lt;/a&gt; 的仓库，包含了一些 istio 用到的一些 envoy 扩展，编译时将 envoy 代码作为库来引用，最终使用 bazel 编译出 istio 版本的 Envoy。&lt;/p&gt;
&lt;p&gt;代码量非常庞大，如果没有智能的代码跳转、查找引用与实现，阅读和开发起来简直低效的要命。如何更加高效呢？关键在于 IDE/编辑器 的代码索引能力要好，需要能够准确跳转和查询，vscode 用的同学比较多，但它的 c/c++ 插件不够智能，很多情况无法跳转，而且效率较低；它还有个 clangd 的插件，基于 LSP，但不够成熟。这方面做的最好的目前还是来自 JetBrains 的 CLion，不过它需要依赖 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 文件来解析项目结构，由于 c/c++ 没有统一的结构标准，不同项目结构千差万别，不太好自动生成 &lt;code&gt;CMakeLists.txt&lt;/code&gt;，需要我们先理解项目结构，然后编写 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 来让 CLion 进行解析。&lt;/p&gt;
&lt;p&gt;虽然社区有人针对 bazel 构建的项目写了一个通用脚本 &lt;a href=&#34;https://github.com/lizan/bazel-cmakelists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bazel-cmakelists&lt;/a&gt; ，但很久没维护，测试了用它来生成最新 envoy 的 &lt;code&gt;CMakeLists.txt&lt;/code&gt; ，由于代码量庞大，最终会 OOM 而失败。&lt;/p&gt;
&lt;p&gt;所以我们需要另寻更好的方法，不太了解这方面的同学弄起来会比较麻烦，本人也折腾了好一段时间才搞定，本文记录下方法和心得，以供大家参考。&lt;/p&gt;
&lt;h2 id=&#34;克隆代码&#34;&gt;克隆代码&lt;/h2&gt;
&lt;p&gt;首先克隆 &lt;a href=&#34;https://github.com/istio/proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio-proxy&lt;/a&gt; 的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/istio/proxy.git istio-proxy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最好切到某个稳定的 release 分支上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; istio-proxy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b release-1.9 origin/release-1.9
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;项目分析&#34;&gt;项目分析&lt;/h2&gt;
&lt;p&gt;istio-proxy 代码库中主要只包含了在 istio 里用到的一些 envoy 扩展，代码量不大，源码主要分布在 src 与 extensions 目录，但编译需要很久，因为它实际编译的是 envoy，只是利用 bazel 将自身代码作为扩展编译进 envoy（得益于 envoy 的扩展机制），从这个 bazel 的 &lt;a href=&#34;https://github.com/istio/proxy/blob/master/src/envoy/BUILD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BUILD 文件&lt;/a&gt; 就能看得出来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy_cc_binary(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;envoy&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    repository = &amp;#34;@envoy&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    visibility = [&amp;#34;//visibility:public&amp;#34;],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    deps = [
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//extensions/access_log_policy:access_log_policy_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//extensions/attributegen:attributegen_plugin&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//extensions/metadata_exchange:metadata_exchange_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//extensions/stackdriver:stackdriver_plugin&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//extensions/stats:stats_plugin&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//src/envoy/extensions/wasm:wasm_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//src/envoy/http/alpn:config_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//src/envoy/http/authn:filter_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//src/envoy/tcp/forward_downstream_sni:config_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//src/envoy/tcp/metadata_exchange:config_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//src/envoy/tcp/sni_verifier:config_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;//src/envoy/tcp/tcp_cluster_rewrite:config_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;@envoy//source/exe:envoy_main_entry_lib&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;@envoy&lt;/code&gt; 表示引用 envoy 代码库，main 函数也位于 envoy 代码库中。那么 envoy 代码库从哪儿来的呢？bazel 在构建时会自动下载指定的依赖，envoy 的代码来源在 &lt;a href=&#34;https://github.com/istio/proxy/blob/master/WORKSPACE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WORKSPACE&lt;/a&gt; 中有指定：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http_archive(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    name = &amp;#34;envoy&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    sha256 = ENVOY_SHA256,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    strip_prefix = ENVOY_REPO + &amp;#34;-&amp;#34; + ENVOY_SHA,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    url = &amp;#34;https://github.com/&amp;#34; + ENVOY_ORG + &amp;#34;/&amp;#34; + ENVOY_REPO + &amp;#34;/archive/&amp;#34; + ENVOY_SHA + &amp;#34;.tar.gz&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;bazel 会自动下载指定版本的源码包来编译。&lt;/p&gt;
&lt;h2 id=&#34;如果获取依赖源文件&#34;&gt;如果获取依赖源文件？&lt;/h2&gt;
&lt;p&gt;由于 istio-proxy 依赖了大量的第三方源文件，我们要阅读代码需要将这些源文件都下下来，只要将它编译一次，所有依赖源文件以及 generated 的代码都可以自动给你备好，所以我们需要对它进行一次编译。&lt;/p&gt;
&lt;p&gt;由于编译 envoy 有复杂的工具链依赖，官方推荐使用容器进行编译，在执行 &lt;code&gt;make&lt;/code&gt; 前加个 &lt;code&gt;BUILD_WITH_CONTAINER=1&lt;/code&gt; 即可指定使用容器编译，免去复杂的环境依赖。但 bazel 编译会将依赖和 generated 的源文件都软链到临时目录，如果用容器编译，就会丢失这部分代码，而我们阅读 istio-proxy 代码时最关键的就是这部分代码了，所以不能用容器编译。&lt;/p&gt;
&lt;h2 id=&#34;安装-bazelisk&#34;&gt;安装 bazelisk&lt;/h2&gt;
&lt;p&gt;不用容器编译就需要本机环境基本满足工具链要求，首先是需要安装 bazel，由于 bazel 版本很多，不同 istio-proxy (envoy) 版本依赖的 bazel 版本也不一样，我们可以直接安装 &lt;a href=&#34;https://github.com/bazelbuild/bazelisk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bazelisk&lt;/a&gt; ，一个用于 bazel 多版本管理的工具，它可以自动识别项目中 &lt;a href=&#34;https://github.com/istio/proxy/blob/master/.bazelversion&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;.bazelversion&lt;/a&gt; 文件，选取指定版本的 bazel 来进行构建（可以自动下载对应版本的 bazel 二进制文件）。&lt;/p&gt;
&lt;p&gt;如果是 macOS 用户，安装很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install bazelisk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;如果之前已安装过 bazel，可以使用 &lt;code&gt;brew link --overwrite bazelisk&lt;/code&gt; 强制覆盖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其它平台的可以在 &lt;a href=&#34;https://github.com/bazelbuild/bazelisk/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;release&lt;/a&gt; 页面下载最新的二进制文件，重命名为 &lt;code&gt;bazel&lt;/code&gt; 然后放到 &lt;code&gt;PATH&lt;/code&gt; 下。&lt;/p&gt;
&lt;h2 id=&#34;其它依赖&#34;&gt;其它依赖&lt;/h2&gt;
&lt;p&gt;如果是 macOS 用户，确保务必安装好 xcode，方便跳转系统库函数，安装命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xcode-select --install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外主要还有 python3（macOS 自带），其它依赖通常都系统自带，可以先不用管，等如果编译报错了再看。&lt;/p&gt;
&lt;p&gt;更多依赖可参考 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/start/building#requirements&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;在 istio-proxy 代码根目录执行以下命令进行编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make build_envoy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;环境没问题的话会经过漫长的构建和编译，通常可能几十分钟，取决于电脑配置。&lt;/p&gt;
&lt;p&gt;编译完后会发现 bazel 为我们生成了一些目录软链：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-1_hu1726997454549033318.webp 400w,
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-1_hu17153031230930922131.webp 760w,
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-1_hu11790692916521974321.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-1_hu1726997454549033318.webp&#34;
               width=&#34;760&#34;
               height=&#34;50&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bazel 输出目录结构可参考官方文档 &lt;a href=&#34;https://docs.bazel.build/versions/master/output_directories.html#layout-diagram&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Output Directory Layout&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们主要关注以下两个目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bazel-istio-proxy&lt;/strong&gt;：包含构建 istio-proxy 用到的源文件（包含依赖）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bazel-bin&lt;/strong&gt;：包含一些 generated 代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生成源码文件列表&#34;&gt;生成源码文件列表&lt;/h2&gt;
&lt;p&gt;在 istio-proxy 根目录创建脚本文件 &lt;code&gt;generate-srcs.sh&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -ex
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;bazel_dir&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bazel-&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PWD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;##*/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;find -L -E &lt;span class=&#34;nv&#34;&gt;$bazel_dir&lt;/span&gt;/external src extensions -regex &lt;span class=&#34;s1&#34;&gt;&amp;#39;.*\.(cc|c|cpp)&amp;#39;&lt;/span&gt; &amp;gt; sourcefiles.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行此脚本可以生成 istio-proxy 及其依赖的源文件列表（&lt;code&gt;sourcefiles.txt&lt;/code&gt;），用于在 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 中引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;$bazel_dir/external&lt;/code&gt; 下包含内容较多，全部索引的话 CLion 可能会比较卡，很多代码基本也都不会看，可以适当缩小范围，按需来配置，比如先只添加 &lt;code&gt;$bazel_dir/external/envoy&lt;/code&gt;，后续有需要再添加其它目录，然后 &lt;code&gt;Reload Cmake Project&lt;/code&gt; 重新索引。&lt;/p&gt;
&lt;h2 id=&#34;生成-cmakeliststxt&#34;&gt;生成 CMakeLists.txt&lt;/h2&gt;
&lt;p&gt;然后就可以在 istio-proxy 项目根目录创建下 &lt;code&gt;CMakeLists.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cmake_minimum_required(VERSION 3.15)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;STRING( REGEX REPLACE &amp;#34;.*/(.*)&amp;#34; &amp;#34;\\1&amp;#34; CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;project(istio-proxy)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;macro(print_all_variables)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    message(STATUS &amp;#34;print_all_variables------------------------------------------{&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    get_cmake_property(_variableNames VARIABLES)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    foreach (_variableName ${_variableNames})
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        message(STATUS &amp;#34;${_variableName}=${${_variableName}}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    endforeach()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    message(STATUS &amp;#34;print_all_variables------------------------------------------}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;endmacro()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;set(CMAKE_CXX_STANDARD 17)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add_definitions(-DNULL_PLUGIN) # enable wasm nullvm navigation
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;file(STRINGS sourcefiles.txt all_SRCS)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;message(STATUS &amp;#34;CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;message(STATUS &amp;#34;CMAKE_HOME_DIRECTORY=${CMAKE_HOME_DIRECTORY}&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add_executable(istio-proxy ${all_SRCS})
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;set(istio_include_dirs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./src&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./extensions&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/envoy&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/envoy/source&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/envoy/include&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/envoy/api/wasm/cpp&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/boringssl/src/include/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_gabime_spdlog/include&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_c_ares_c_ares&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_google_absl&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_google_cel_cpp&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_google_protobuf/src&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_fmtlib_fmt/include&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_eile_tclap/include&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_grpc_grpc/include&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_envoyproxy_protoc_gen_validate/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_tencent_rapidjson/include/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_datadog_dd_opentracing_cpp/include/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_libevent_libevent/include&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_mirror_tclap/include&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_grpc_grpc&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_circonus_labs_libcircllhist/src/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_nodejs_http_parser&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_nghttp2_nghttp2/lib/includes/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_cyan4973_xxhash/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_google_flatbuffers/include/&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-${CURRENT_FOLDER}/external/com_github_fmtlib_fmt/test&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-bin&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-bin/external/envoy_api&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-bin/external/mixerapi_git&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-bin/external/com_envoyproxy_protoc_gen_validate&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-bin/external/com_google_googleapis&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;#34;./bazel-bin/external/com_github_cncf_udpa&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;target_include_directories(istio-proxy PUBLIC ${istio_include_dirs})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解释一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;add_executable&lt;/code&gt; 将需要索引的源文件列表 (&lt;code&gt;sourcefiles.txt&lt;/code&gt;) 加进索引。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target_include_directories&lt;/code&gt; 将用到的一些纯头文件目录加进索引（不包含实现代码，主要是一些接口），这里也是可以按需进行增删。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-clion-阅读&#34;&gt;使用 CLion 阅读&lt;/h2&gt;
&lt;p&gt;不要直接打开 istio-proxy 目录，而是 Open 时选中 &lt;code&gt;CMakeLists.txt&lt;/code&gt;，然后 &lt;code&gt;Open as Project&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-2_hu8697438617786727877.webp 400w,
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-2_hu15011113808550463190.webp 760w,
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-2_hu18346432786261542177.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-2_hu8697438617786727877.webp&#34;
               width=&#34;454&#34;
               height=&#34;148&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;弹出 &lt;code&gt;Load Project&lt;/code&gt; 时不要勾选 &lt;code&gt;Clean project&lt;/code&gt;，不然退出 CLion 时会执行 &lt;code&gt;make clean&lt;/code&gt;，导致把 bazel 生成的源文件都给删除掉，就没法跳转了：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-6_hu1577132163629401251.webp 400w,
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-6_hu8674410337923794108.webp 760w,
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-6_hu14642894031662609163.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-6_hu1577132163629401251.webp&#34;
               width=&#34;760&#34;
               height=&#34;183&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;然后就会开始索引，完成后就可以愉快的看代码了，先从 main 看起吧 (&lt;code&gt;bazel-istio-proxy/external/envoy/source/exe/main.cc&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://cloudnative.to/blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-3.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;查找引用：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-4_hu4681763820014750610.webp 400w,
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-4_hu6272849291351679310.webp 760w,
               /blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-4_hu7403065334066095085.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-4_hu4681763820014750610.webp&#34;
               width=&#34;760&#34;
               height=&#34;446&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;跳转到实现：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://cloudnative.to/blog/use-clion-read-envoy-source/use-clion-read-envoy-source-code-5.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结&lt;/h2&gt;
&lt;p&gt;本文介绍了如何使用 CLion 来阅读 istio-proxy (envoy) 的代码，包含源码结构分析、环境搭建，以及生成 CLion 所需要的 &lt;code&gt;CMakeLists.txt&lt;/code&gt; 文件的方法，最后也展示了效果，希望对你有所帮助。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在生产环境使用 Istio 前的若干考虑要素</title>
      <link>https://cloudnative.to/blog/the-facts-of-using-istio/</link>
      <pubDate>Thu, 25 Feb 2021 08:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/the-facts-of-using-istio/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;2021 年伊始，如果你想要在生产环境中落地 Service Mesh，那 Istio 一定已经在你的考虑范围之内。&lt;/p&gt;
&lt;p&gt;Istio 作为目前最流行的 Service Mesh 技术之一，拥有活跃的社区和众多的落地案例。但如果你真的想在你的生产环境大规模落地 Isito，这看似壮观美好的冰山下，却是暗流涌动，潜藏着无数凶险。&lt;/p&gt;
&lt;p&gt;本文是笔者深度参与百亿量级流量生产环境研发和落地 Istio 两年来的经验总结和一些思考，以期读者在自己生产环境引入 Isito 前，能有所参考和启发，做好更充足的准备，能更轻松的“入坑”Istio。&lt;/p&gt;
&lt;p&gt;如果你对 Service Mesh 的概念还不甚了解，可先行阅读&lt;a href=&#34;https://mp.weixin.qq.com/s/eF3fgltkgYNrMfYS2VnSRw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《云原生时代，你应该了解的 Service Mesh》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用-isito-前的考虑要素&#34;&gt;使用 Isito 前的考虑要素&lt;/h2&gt;
&lt;h3 id=&#34;使用-istio-无法做到完全对应用透明&#34;&gt;使用 Istio 无法做到完全对应用透明&lt;/h3&gt;
&lt;p&gt;服务通信和治理相关的功能迁移到 Sidecar 进程中后，应用中的 SDK 通常需要作出一些对应的改变。&lt;/p&gt;
&lt;p&gt;比如 SDK 需要关闭一些功能，例如重试。一个典型的场景是，SDK 重试 m 次，Sidecar 重试 n 次，这会导致 m * n 的重试风暴，从而引发风险。&lt;/p&gt;
&lt;p&gt;此外，诸如 trace header 的透传，也需要 SDK 进行升级改造。如果你的 SDK 中还有其它特殊逻辑和功能，这些可能都需要小心处理才能和 Isito Sidecar 完美配合。&lt;/p&gt;
&lt;h3 id=&#34;istio-对非-kubernetes-环境的支持有限&#34;&gt;Istio 对非 Kubernetes 环境的支持有限&lt;/h3&gt;
&lt;p&gt;在业务迁移至 Istio 的同时，可能并没有同步迁移至 Kubernetes，而还运行在原有 PAAS 系统之上。
这会带来一系列挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原有 PAAS 可能没有容器网络，Istio 的服务发现和流量劫持都可能要根据旧有基础设施进行适配才能正常工作&lt;/li&gt;
&lt;li&gt;如果旧有的 PAAS 单个实例不能很好的管理多个容器（类比 Kubernetes 的 Pod 和 Container 概念），大量 Istio Sidecar 的部署和运维将是一个很大的挑战&lt;/li&gt;
&lt;li&gt;缺少 Kubernetes webhook 机制，Sidecar 的注入也可能变得不那么透明，而需要耦合在业务的部署逻辑中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;只有-http-协议是一等公民&#34;&gt;只有 HTTP 协议是一等公民&lt;/h3&gt;
&lt;p&gt;Istio 原生对 HTTP 协议提供了完善的全功能支持，但在真实的业务场景中，私有化协议却非常普遍，而 Istio 却并未提供原生支持。&lt;/p&gt;
&lt;p&gt;这导致使用私有协议的一些服务可能只能被迫使用 TCP 协议来进行基本的请求路由，这会导致很多功能的缺失，这其中包括 Istio 非常强大的基于内容的消息路由，如基于 header、path 等进行权重路由。&lt;/p&gt;
&lt;h3 id=&#34;扩展-istio-的成本并不低&#34;&gt;扩展 Istio 的成本并不低&lt;/h3&gt;
&lt;p&gt;虽然 Istio 的总体架构是基于高度可扩展而设计，但由于整个 Istio 系统较为复杂，如果你对 Istio 进行过真实的扩展，就会发现成本不低。&lt;/p&gt;
&lt;p&gt;以扩展 Istio 支持某一种私有协议为例，首先你需要在 Istio 的 api 代码库中进行协议扩展，其次你需要修改 Istio 代码库来实现新的协议处理和下发，然后你还需要修改 xds 代码库的协议，最后你还要在 Envoy 中实现相应的 Filter 来完成协议的解析和路由等功能。&lt;/p&gt;
&lt;p&gt;在这个过程中，你还可能面临上述数个复杂代码库的编译等工程挑战（如果你的研发环境不能很好的使用 Docker 或者无法访问部分国外网络的情况下）。&lt;/p&gt;
&lt;p&gt;即使做完了所有的这些工作，你也可能面临这些工作无法合并回社区的情况，社区对私有协议的扩展支持度不高，这会导致你的代码和社区割裂，为后续的升级更新带来隐患。&lt;/p&gt;
&lt;h3 id=&#34;istio-在集群规模较大时的性能问题&#34;&gt;Istio 在集群规模较大时的性能问题&lt;/h3&gt;
&lt;p&gt;Istio 默认的工作模式下，每个 Sidecar 都会收到全集群所有服务的信息。如果你部署过 Istio 官方的 Bookinfo 示例应用，并使用 Envoy 的 config dump 接口进行观察，你会发现，仅仅几个服务，Envoy 所收到的配置信息就有将近 20w 行。&lt;/p&gt;
&lt;p&gt;可以想象，在稍大一些的集群规模，Envoy 的内存开销、Istio 的 CPU 开销、XDS 的下发时效性等问题，一定会变得尤为突出。&lt;/p&gt;
&lt;p&gt;Istio 这么做一是考虑这样可以开箱即用，用户不用进行过多的配置，另外在一些场景，可能也无法梳理出准确的服务之间的调用关系，因此直接给每个 Sidecar 下发了全量的服务配置，即使这个 Sidecar 只会访问其中很小一部分服务。&lt;/p&gt;
&lt;p&gt;当然这个问题也有解法，你可以通过 Sidecar CRD 来显示定义服务调用关系，使 Envoy 只得到他需要的服务信息，从而大幅降低 Envoy 的资源开销，但前提是在你的业务线中能梳理出这些调用关系。&lt;/p&gt;
&lt;h3 id=&#34;xds-分发没有分级发布机制&#34;&gt;XDS 分发没有分级发布机制&lt;/h3&gt;
&lt;p&gt;当你对一个服务的策略配置进行变更的时候，XDS 不具备分级发布的能力，所有访问这个服务的 Envoy 都会立即收到变更后的最新配置。这在一些对变更敏感的严苛生产环境，可能是有很高风险甚至不被允许的。&lt;/p&gt;
&lt;p&gt;如果你的生产环境严格要求任何变更都必须有分级发布流程，那你可能需要考虑自己实现一套这样的机制。&lt;/p&gt;
&lt;h3 id=&#34;istio-组件故障时是否有退路&#34;&gt;Istio 组件故障时是否有退路？&lt;/h3&gt;
&lt;p&gt;以 Istio 为代表的 Sidecar 架构的特殊性在于，Sidecar 直接承接了业务流量，而不像一些其他的基础设施那样，只是整个系统的旁路组件（比如 Kubernetes）。&lt;/p&gt;
&lt;p&gt;因此在 Isito 落地初期，你必须考虑，如果 Sidecar 进程挂掉，服务怎么办？是否有退路？是否能 fallback 到直连模式？&lt;/p&gt;
&lt;p&gt;在 Istio 落地过程中，是否能无损 fallback，通常决定了核心业务能否接入 Service Mesh。&lt;/p&gt;
&lt;h3 id=&#34;isito-技术架构的成熟度还没有达到预期&#34;&gt;Isito 技术架构的成熟度还没有达到预期&lt;/h3&gt;
&lt;p&gt;虽然 Istio 1.0 版本已经发布了很久，但是如果你关注社区每个版本的迭代，就会发现，Istio 目前架构依然处于不太稳定的状态，尤其是 1.5 版本前后的几个大版本，先后经历了去除 Mixer 组件、合并为单体架构、仅支持高版本 Kubernetes 等等重大变动，这对于已经在生产环境中使用了 Istio 的用户非常不友好，因为升级会面临各种不兼容性问题。&lt;/p&gt;
&lt;p&gt;好在社区也已经意识到这一问题，2021 年社区也成立了专门的小组，重点改善 Istio 的兼容性和用户体验。&lt;/p&gt;
&lt;h3 id=&#34;istio-缺乏成熟的产品生态&#34;&gt;Istio 缺乏成熟的产品生态&lt;/h3&gt;
&lt;p&gt;Istio 作为一套技术方案，却并不是一套产品方案。&lt;/p&gt;
&lt;p&gt;如果你在生产环境中使用，你可能还需要解决可视化界面、权限和账号系统对接、结合公司已有技术组件和产品生态等问题，仅仅通过命令行来使用，可能并不能满足你的组织对权限、审计、易用性的要求。&lt;/p&gt;
&lt;p&gt;而 Isito 自带的 Kiali 功能还十分简陋，远远没有达到能在生产环境使用的程度，因此你可能需要研发基于 Isito 的上层产品。&lt;/p&gt;
&lt;h3 id=&#34;istio-目前解决的问题域还很有限&#34;&gt;Istio 目前解决的问题域还很有限&lt;/h3&gt;
&lt;p&gt;Istio 目前主要解决的是分布式系统之间服务调用的问题，但还有一些分布式系统的复杂语义和功能并未纳入到 Istio 的 Sidecar 运行时之中，比如消息发布和订阅、状态管理、资源绑定等等。&lt;/p&gt;
&lt;p&gt;云原生应用将会朝着多 Sidecar 运行时或将更多分布式能力纳入单 Sidecar 运行时的方向继续发展，以使服务本身变得更为轻量，让应用和基础架构彻底解耦。&lt;/p&gt;
&lt;p&gt;如果你的生产环境中，业务系统对接了非常多和复杂的分布式系系统中间件，Istio 目前可能并不能完全解决你的应用的云原生化诉求。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;看到这里，你是否感到有些沮丧，而对 Isito 失去信心？&lt;/p&gt;
&lt;p&gt;别担心，上面列举的这些问题，实际上并不影响 Isito 依然是目前最为流行和成功的 Service Mesh 技术选型之一。Istio 频繁的变动，一定程度上也说明它拥有一个活跃的社区，我们应当对一个新的事物报以信心，Isito 的社区也在不断听取来自终端用户的声音，朝着大家期待的方向演进。&lt;/p&gt;
&lt;p&gt;同时，如果你的生产环境中的服务规模并不是很大，服务已经托管于 Kubernetes 之上，也只使用那些 Istio 原生提供的能力，那么 Istio 依然是一个值得尝试的开箱即用方案。&lt;/p&gt;
&lt;p&gt;但如果你的生产环境比较复杂，技术债务较重，专有功能和策略需求较多，亦或者服务规模庞大，那么在开始使用 Istio 之前，你需要仔细权衡上述这些要素，以评估在你的系统之中引入 Istio 可能带来的复杂度和潜在成本。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio 学习笔记：Istio CNI 插件</title>
      <link>https://cloudnative.to/blog/istio-cni-note/</link>
      <pubDate>Tue, 09 Apr 2019 22:54:09 +0800</pubDate>
      <guid>https://cloudnative.to/blog/istio-cni-note/</guid>
      <description>&lt;h2 id=&#34;设计目标&#34;&gt;设计目标&lt;/h2&gt;
&lt;p&gt;当前实现将用户 pod 流量转发到 proxy 的默认方式是使用 privileged 权限的 istio-init 这个 init container 来做的（运行脚本写入 iptables），Istio CNI 插件的主要设计目标是消除这个 privileged 权限的 init container，换成利用 k8s CNI 机制来实现相同功能的替代方案&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Istio CNI Plugin 不是 istio 提出类似 k8s CNI 的插件扩展机制，而是 k8s CNI 的一个具体实现&lt;/li&gt;
&lt;li&gt;k8s CNI 插件是一条链，在创建和销毁 pod 的时候会调用链上所有插件来安装和卸载容器的网络，istio CNI Plugin 即为 CNI 插件的一个实现，相当于在创建销毁 pod 这些 hook 点来针对 istio 的 pod 做网络配置：写入 iptables，让该 pod 所在的 network namespace 的网络流量转发到 proxy 进程&lt;/li&gt;
&lt;li&gt;当然也就要求集群启用 CNI，kubelet 启动参数：&lt;code&gt;--network-plugin=cni&lt;/code&gt; （该参数只有两个可选项：&lt;code&gt;kubenet&lt;/code&gt;, &lt;code&gt;cni&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现方式&#34;&gt;实现方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;运行一个名为 istio-cni-node 的 daemonset 运行在每个节点，用于安装 istio CNI 插件&lt;/li&gt;
&lt;li&gt;该 CNI 插件负责写入 iptables 规则，让用户 pod 所在 netns 的流量都转发到这个 pod 中 proxy 的进程&lt;/li&gt;
&lt;li&gt;当启用 istio cni 后，sidecar 的自动注入或&lt;code&gt;istioctl kube-inject&lt;/code&gt;将不再注入 initContainers (istio-init)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;istio-cni-node-工作流程&#34;&gt;istio-cni-node 工作流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;复制 Istio CNI 插件二进制程序到 CNI 的 bin 目录（即 kubelet 启动参数&lt;code&gt;--cni-bin-dir&lt;/code&gt;指定的路径，默认是&lt;code&gt;/opt/cni/bin&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;使用 istio-cni-node 自己的 ServiceAccount 信息为 CNI 插件生成 kubeconfig，让插件能与 apiserver 通信 (ServiceAccount 信息会被自动挂载到&lt;code&gt;/var/run/secrets/kubernetes.io/serviceaccount&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;生成 CNI 插件的配置并将其插入 CNI 配置插件链末尾（CNI 的配置文件路径是 kubelet 启动参数&lt;code&gt;--cni-conf-dir&lt;/code&gt;所指定的目录，默认是&lt;code&gt;/etc/cni/net.d&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;watch CNI 配置 (&lt;code&gt;cni-conf-dir&lt;/code&gt;)，如果检测到被修改就重新改回来&lt;/li&gt;
&lt;li&gt;watch istio-cni-node 自身的配置 (configmap)，检测到有修改就重新执行 CNI 配置生成与下发流程（当前写这篇文章的时候是 istio 1.1.1，还没实现此功能）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计提案&#34;&gt;设计提案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Istio CNI Plugin 提案创建时间：2018-09-28&lt;/li&gt;
&lt;li&gt;Istio CNI Plugin 提案文档存放在：Istio 的 Google Team Drive
&lt;ul&gt;
&lt;li&gt;Istio TeamDrive 地址：https://drive.google.com/corp/drive/u/0/folders/0AIS5p3eW9BCtUk9PVA&lt;/li&gt;
&lt;li&gt;Istio CNI Plugin 提案文档路径：&lt;code&gt;Working Groups/Networking/Istio CNI Plugin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看文件需要申请权限，申请方法：加入 istio-team-drive-access 这个 google 网上论坛 group&lt;/li&gt;
&lt;li&gt;istio-team-drive-access group 地址：https://groups.google.com/forum/#!forum/istio-team-drive-access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install Istio with the Istio CNI plugin: &lt;a href=&#34;https://istio.io/docs/setup/kubernetes/additional-setup/cni/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://istio.io/docs/setup/kubernetes/additional-setup/cni/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;istio-cni 项目地址：https://github.com/istio/cni&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
