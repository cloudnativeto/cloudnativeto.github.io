<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aditya R | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/aditya-r/</link>
      <atom:link href="https://cloudnativecn.com/author/aditya-r/index.xml" rel="self" type="application/rss+xml" />
    <description>Aditya R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 03 Apr 2023 20:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>Aditya R</title>
      <link>https://cloudnativecn.com/author/aditya-r/</link>
    </image>
    
    <item>
      <title>使用 OCI 容器运行 WebAssembly 工作负载</title>
      <link>https://cloudnativecn.com/blog/wasm-containers/</link>
      <pubDate>Mon, 03 Apr 2023 20:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/wasm-containers/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;译者注：本文介绍了如何使用 OCI 容器来运行 WebAssembly 工作负载。WebAssembly（也称为 Wasm）是一种可移植的二进制指令格式，具有可嵌入和隔离的执行环境，适用于客户端和服务器应用。WebAssembly 可以看作是一种小巧、快速、高效、安全的基于栈的虚拟机，设计用于执行不关心 CPU 或操作系统的可移植字节码。WebAssembly 最初是为 web 浏览器设计的，用来作为函数的轻量级、快速、安全、多语言的容器，但它不再局限于 web。在 web 上，WebAssembly 使用浏览器提供的现有 API。WebAssembly System Interface（WASI）是为了填补 WebAssembly 和浏览器外系统之间的空白而创建的。这使得非浏览器系统可以利用 WebAssembly 的可移植性，使 WASI 成为分发和隔离工作负载时的一个很好的选择。文章中介绍了如何配置容器运行时来从轻量级容器镜像中运行 Wasm 工作负载，并给出了一些使用示例。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;WebAssembly（也称为 Wasm）以其可嵌入和隔离的执行环境而成为一种流行的便携式二进制指令格式，用于客户端和服务器应用程序。将 WebAssembly 视为一种小型、快速、高效且非常安全的基于堆栈的虚拟机，专门用于执行可移植的字节码，不在乎它运行在哪个 CPU 或操作系统上。WebAssembly 最初是为 Web 浏览器设计的，用于成为函数的轻量级、快速、安全和多语言容器，但它不再仅限于 Web。&lt;/p&gt;
&lt;p&gt;在 Web 上，WebAssembly 使用浏览器提供的现有 API。WebAssembly 系统接口（WASI）的创建填补了 WebAssembly 和运行在浏览器外部的系统之间的空白。这使非浏览器系统能够利用 WebAssembly 的可移植性，使 WASI 成为在分发时具有可移植性和在运行负载时具有隔离性的良好选择。&lt;/p&gt;
&lt;p&gt;WebAssembly 提供了几个优点。因为它是平台中立的，所以可以在多个操作系统和架构上同时编译和执行一个单一的二进制文件，具有非常低的磁盘占用和启动时间。有用的安全功能包括模块签名和可以在运行时级别上控制的安全调节器，而不是依赖于主机操作系统的用户权限。封闭式内存仍然可以由现有的容器工具基础架构进行管理。&lt;/p&gt;
&lt;p&gt;在本文中，我将通过一个配置容器运行时来运行轻量级容器镜像中的 Wasm 工作负载的方案来讲解。&lt;/p&gt;
&lt;h2 id=&#34;webassembly-在云基础设施上的采用和阻碍&#34;&gt;WebAssembly 在云基础设施上的采用和阻碍&lt;/h2&gt;
&lt;p&gt;WebAssembly 和 WASI 相当新，因此尚未设置在容器生态系统中本地运行 Wasm 工作负载的标准。本文仅介绍一种解决方案，但还有其他可行的方法。&lt;/p&gt;
&lt;p&gt;其中一些解决方案包括使用兼容 Wasm 的组件替换本机 Linux 容器运行时。例如，Krustlet v1.0.0-alpha1 允许用户引入 Kubernetes 节点，其中 Krustlet 用作标准 kubelet 的替代品。这种方法的局限性在于用户必须在 Linux 容器运行时和 Wasm 运行时之间进行选择。&lt;/p&gt;
&lt;p&gt;另一种解决方案是使用带有 Wasm 运行时的基本镜像，并手动调用编译后的二进制文件。但是，如果我们在低于容器运行时的一级别调用 Wasm 运行时，这种方法会使容器镜像膨胀，这不一定是必需的。&lt;/p&gt;
&lt;p&gt;我将描述如何通过创建一个混合设置来避免这种情况，其中现有的 Open Containers Initiative（OCI）运行时可以运行本地 Linux 容器和与 WASI 兼容的工作负载。&lt;/p&gt;
&lt;h2 id=&#34;在混合设置中使用-crun-运行-wasm-和-linux-容器&#34;&gt;在混合设置中使用 crun 运行 Wasm 和 Linux 容器&lt;/h2&gt;
&lt;p&gt;一些上述问题可以通过允许现有的 OCI 运行时在较低级别上调用 Linux 容器和 Wasm 容器来轻松解决。这避免了依赖容器镜像携带 Wasm 运行时或引入仅支持 Wasm 容器的基础架构新层的问题。&lt;/p&gt;
&lt;p&gt;可以处理此任务的一个容器运行时是 crun。&lt;/p&gt;
&lt;p&gt;Crun 快速，占用内存低，是一个完全符合 OCI 的容器运行时，可以用作现有容器运行时的替代品。Crun 最初是编写用于运行 Linux 容器的，但它还提供了能够在本地方式下在容器沙盒中运行任意扩展的处理程序。&lt;/p&gt;
&lt;p&gt;这是用 crun 替换现有运行时的一种非正式方式，仅用于展示 crun 是您现有 OCI 运行时的完整替代品。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mv /path/to/exisiting-runtime /path/to/existing-runtime.backup
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cp /path/to/crun /path/to/existing-runtime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中之一处理程序是 &lt;code&gt;crun-wasm-handler&lt;/code&gt;，它将特别配置的容器镜像（&lt;em&gt;Wasm 兼容镜像&lt;/em&gt;）委派给现有 Wasm 运行时的部分，以本地方式在 crun 沙盒内运行。这样，终端用户无需自己维护 Wasm 运行时。&lt;/p&gt;
&lt;p&gt;Crun 与 &lt;a href=&#34;https://wasmedge.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wasmedge&lt;/a&gt;、&lt;a href=&#34;https://wasmtime.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wasmtime&lt;/a&gt; 和 &lt;a href=&#34;https://wasmer.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wasmer&lt;/a&gt; 具有本地集成，以支持此功能。它在 crun 检测到配置的镜像是否包含任何 Wasm/WASI 工作负载时动态地调用这些运行时的部分，同时仍支持本地 Linux 容器。&lt;/p&gt;
&lt;p&gt;有关使用 Wasm/WASI 支持构建 crun 的详细信息，请参见 &lt;a href=&#34;https://github.com/containers/crun/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub 上的 crun 存储库&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;在-podman-和-kubernetes-上使用-buildah-构建和运行-wasm-镜像&#34;&gt;在 Podman 和 Kubernetes 上使用 Buildah 构建和运行 Wasm 镜像&lt;/h2&gt;
&lt;p&gt;用户可以在 Podman 和 Kubernetes 上使用 crun 作为 OCI 运行时来创建和运行平台无关的 Wasm 镜像。以下是教程：&lt;/p&gt;
&lt;h3 id=&#34;使用-buildah-创建-wasm-兼容镜像&#34;&gt;使用 Buildah 创建 Wasm 兼容镜像&lt;/h3&gt;
&lt;p&gt;Wasm/WASI 兼容镜像很特别。它们包含一个魔术注释，可帮助像 crun 这样的 OCI 运行时分类别它是 Linux 本机镜像还是带有 Wasm/WASI 工作负载的镜像。然后，如果需要，它可以调用处理程序。&lt;/p&gt;
&lt;p&gt;使用任何容器镜像构建工具都可以非常轻松地创建这些 Wasm 兼容镜像，但是对于本文，我将演示如何使用 &lt;a href=&#34;https://opensource.com/article/22/2/build-your-own-container-linux-buildah&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buildah&lt;/a&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译您的 &lt;code&gt;.wasm&lt;/code&gt; 模块。&lt;/li&gt;
&lt;li&gt;使用您的 &lt;code&gt;.wasm&lt;/code&gt; 模块准备一个 Containerfile。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; scratch&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;COPY&lt;/span&gt; hello.wasm /&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;CMD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/hello.wasm&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;使用 Buildah 使用注释 &lt;code&gt;module.wasm.image/variant=compat&lt;/code&gt; 构建 Wasm 镜像。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ buildah build --annotation &lt;span class=&#34;s2&#34;&gt;&amp;#34;module.wasm.image/variant=compat&amp;#34;&lt;/span&gt; -t mywasm-image
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;构建完镜像并且容器引擎已配置为使用 crun，crun 将自动完成工作并通过配置的 Wasm 处理程序运行提供的工作负载。&lt;/p&gt;
&lt;h3 id=&#34;在-podman-中运行-wasm-工作负载&#34;&gt;在 Podman 中运行 WASM 工作负载&lt;/h3&gt;
&lt;p&gt;Crun 是 Podman 的默认 OCI 运行时。Podman 包含旋钮和处理程序，可利用大多数 crun 功能，包括 crun Wasm 处理程序。构建 Wasm 兼容镜像后，它可以像任何其他容器镜像一样由 Podman 使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ podman run mywasm-image:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Podman 使用 crun 的 Wasm 处理程序运行请求的 Wasm 兼容镜像 &lt;code&gt;mywasm-image:latest&lt;/code&gt;，并返回确认我们的工作负载已执行的输出。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hello world from the webassembly module !!!!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;kubernetes-支持和测试的容器运行时接口cri实现&#34;&gt;Kubernetes 支持和测试的容器运行时接口（CRI）实现&lt;/h3&gt;
&lt;p&gt;以下是配置两个流行的容器运行时的方法：&lt;/p&gt;
&lt;h3 id=&#34;cri-o&#34;&gt;CRI-O&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过编辑 &lt;code&gt;/etc/crio/crio.conf&lt;/code&gt; 上的配置将 CRI-O 配置为使用 crun 而不是 runc。Red Hat OpenShift 文档包含有关 &lt;a href=&#34;https://docs.openshift.com/container-platform/3.11/crio/crio_runtime.html#configure-crio-use-crio-engine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置 CRI-O&lt;/a&gt; 的更多详细信息。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;sudo systemctl restart crio&lt;/code&gt; 重新启动 CRI-O。&lt;/li&gt;
&lt;li&gt;CRI-O 自动将 pod 注释传播到容器规范。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;containerd&#34;&gt;Containerd&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Containerd 支持通过自定义配置定义在 &lt;code&gt;/etc/containerd/config.toml&lt;/code&gt; 中切换容器运行时。&lt;/li&gt;
&lt;li&gt;通过确保运行时二进制文件指向 crun，将 containerd 配置为使用 crun。有关详细信息，请参见 &lt;a href=&#34;https://github.com/containerd/containerd/blob/main/docs/cri/config.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd 文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;通过设置 &lt;code&gt;pod_annotations = [&amp;quot;module.wasm.image/variant.*&amp;quot;]&lt;/code&gt; 在配置中允许列出 Wasm 注释，以便将它们传播到 OCI 规范。然后使用 &lt;code&gt;sudo systemctl start containerd&lt;/code&gt; 重新启动 containerd。&lt;/li&gt;
&lt;li&gt;现在，containerd 应该将 Wasm pod 注释传播到容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是与 CRI-O 和 containerd 兼容的 Kubernetes pod 规范示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-with-wasm-workload&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mynamespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;module.wasm.image/variant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;compat&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;wasm-container&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myrepo/mywasmimage:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;已知问题和解决方法&#34;&gt;已知问题和解决方法&lt;/h2&gt;
&lt;p&gt;复杂的 Kubernetes 基础架构包含 pod，而且在许多情况下，这些 pod 还包括 sidecar。这意味着当部署包含 sidecar 并且 sidecar 容器不包含 Wasm 入口点（例如像 Linkerd、Gloo 和 Istio 这样的服务网格或 Envoy 这样的代理的基础架构设置）时，crun 的 Wasm 集成将无用。&lt;/p&gt;
&lt;p&gt;您可以通过添加两个智能注释来解决此问题，用于 Wasm 处理程序：&lt;code&gt;compat-smart&lt;/code&gt; 和 &lt;code&gt;wasm-smart&lt;/code&gt;。这些注释充当智能开关，仅在容器需要时切换 Wasm 运行时。因此，在运行带有 sidecar 的部署时，只有包含有效 Wasm 工作负载的容器才由 Wasm 处理程序执行。常规容器像往常一样被委派给本机 Linux 容器运行时。&lt;/p&gt;
&lt;p&gt;因此，在为这种用例构建镜像时，请使用注释 &lt;code&gt;module.wasm.image/variant=compat-smart&lt;/code&gt;，而不是 &lt;code&gt;module.wasm.image/variant=compat&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;您可以在 &lt;a href=&#34;https://github.com/containers/crun/blob/main/docs/wasm-wasi-on-kubernetes.md#known-issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub 上的 crun 文档&lt;/a&gt; 中找到其他已知问题。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
