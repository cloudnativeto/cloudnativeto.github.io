<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>张晓辉 | 云原生社区</title>
    <link>https://cloudnative.to/author/%E5%BC%A0%E6%99%93%E8%BE%89/</link>
      <atom:link href="https://cloudnative.to/author/%E5%BC%A0%E6%99%93%E8%BE%89/index.xml" rel="self" type="application/rss+xml" />
    <description>张晓辉</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 31 May 2021 07:13:54 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/author/%E5%BC%A0%E6%99%93%E8%BE%89/avatar_hu1ad2546a9b7c413f2c11e4aa1a7995e3_52301_270x270_fill_q75_lanczos_center.jpg</url>
      <title>张晓辉</title>
      <link>https://cloudnative.to/author/%E5%BC%A0%E6%99%93%E8%BE%89/</link>
    </image>
    
    <item>
      <title>初探可编程网关 Pipy</title>
      <link>https://cloudnative.to/blog/glance-at-programmable-gateway-pipy/</link>
      <pubDate>Mon, 31 May 2021 07:13:54 +0800</pubDate>
      <guid>https://cloudnative.to/blog/glance-at-programmable-gateway-pipy/</guid>
      <description>&lt;p&gt;有幸参加了 &lt;a href=&#34;https://flomesh.cn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flomesh&lt;/a&gt; 组织的workshop，了解了他们的 Pipy 网络代理，以及围绕 Pipy 构建起来的生态。Pipy 在生态中，不止是代理的角色，还是 Flomesh 服务网格​中的数据平面。&lt;/p&gt;
&lt;p&gt;整理一下，做个记录，顺便瞄一下 Pipy 的部分源码。&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;下面是摘自 Github 上关于 Pipy 的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipy 是一个轻量级、高性能、高稳定、可编程的网络代理。Pipy 核心框架使用 C++ 开发，网络 IO 采用 ASIO 库。 Pipy 的可执行文件仅有 5M 左右，运行期的内存占用 10M 左右，因此 Pipy 非常适合做 Sidecar proxy。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipy 内置了自研的 pjs 作为脚本扩展，使得Pipy 可以用 JS 脚本根据特定需求快速定制逻辑与功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipy 采用了模块化、链式的处理架构，用顺序执行的模块来对网络数据块进行处理。这种简单的架构使得 Pipy 底层简单可靠，同时具备了动态编排流量的能力，兼顾了简单和灵活。通过使用 REUSE_PORT 的机制（主流 Linux 和 BSD 版本都支持该功能），Pipy 可以以多进程模式运行，使得 Pipy 不仅适用于 Sidecar 模式，也适用于大规模的流量处理场景。 在实践中，Pipy 独立部署的时候用作“软负载”，可以在低延迟的情况下，实现媲美硬件的负载均衡吞吐能力，同时具有灵活的扩展性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838193789.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Pipy 的核心是消息流处理器：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838399668.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Pipy 流量处理的流程：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16221838630400.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;核心概念&#34;&gt;核心概念&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;流（Stream）&lt;/li&gt;
&lt;li&gt;管道（Pipeline）&lt;/li&gt;
&lt;li&gt;模块（Module）&lt;/li&gt;
&lt;li&gt;会话（Session）&lt;/li&gt;
&lt;li&gt;上下文（Context）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;以下是个人浅见&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;Pipy 使用 &lt;code&gt;pjs&lt;/code&gt; 引擎将 JavaScript格式的配置，解析成其抽象的 &lt;code&gt;Configuration&lt;/code&gt; 对象。每个 &lt;code&gt;Configuration&lt;/code&gt; 中包含了多个 &lt;code&gt;Pipeline&lt;/code&gt;，每个 &lt;code&gt;Configuration&lt;/code&gt; 中又会用到多个 &lt;code&gt;Filter&lt;/code&gt;。这些都属于 Pipy 的&lt;em&gt;静态&lt;/em&gt;配置部分。（后面会提到 Pipeline 的三种不同类型）&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223905428188.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;而属于&lt;strong&gt;运行时&lt;/strong&gt;的就是流、会话和上下文了，在 Pipy 中，数据流是由对象（Pipy 的&lt;em&gt;抽象&lt;/em&gt;）组成的。而这些对象抵达 Pipy，被抽象成不同的&lt;u&gt;事件&lt;/u&gt;。而事件触发不同的过滤器的执行。&lt;/p&gt;
&lt;p&gt;我个人更喜欢将其核心理解为：对数据流的事件处理引擎。&lt;/p&gt;
&lt;p&gt;理解归理解，实践出真知。“大胆假设，小心求证！”&lt;/p&gt;
&lt;h2 id=&#34;本地编译&#34;&gt;本地编译&lt;/h2&gt;
&lt;p&gt;从编译 Pipy 开始。&lt;/p&gt;
&lt;h3 id=&#34;环境准备&#34;&gt;环境准备&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#安装 nodejs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ nvm install lts/erbium 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#安装 cmake&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ brew install cmake
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编译-pipy&#34;&gt;编译 Pipy&lt;/h3&gt;
&lt;p&gt;从 &lt;code&gt;https://github.com/flomesh-io/pipy.git&lt;/code&gt; 克隆代码。&lt;/p&gt;
&lt;p&gt;Pipy 的编译包括了两个部分，GUI 和 Pipy 本体。&lt;/p&gt;
&lt;p&gt;GUI 是 Pipy 提供的一个用于开发模式下进行配置的界面，首先编译Pipy GUI。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pipy root folder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; gui
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npm install
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ npm run build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着编译 Pipy 的本体&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pipy root folder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mkdir build
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; build
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cmake -DCMAKE_BUILD_TYPE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Release -DPIPY_GUI&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ON ..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ make
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后检查根目录下的 &lt;code&gt;bin&lt;/code&gt; 目录，可以看到 pipy 的可执行文件，大小只有 11M。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223857141237.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bin/pipy --help
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage: pipy &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &amp;lt;script filename&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -h, -help, --help                    Show &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt; information
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -v, -version, --version              Show version information
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --list-filters                       List all filters
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --help-filters                       Show detailed usage information &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; all filters
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --log-level&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;debug&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;info&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;warn&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;error&amp;gt;  Set the level of log output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --verify                             Verify configuration only
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --reuse-port                         Enable kernel load balancing &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; all listening ports
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --gui-port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;port&amp;gt;                    Enable web GUI on the specified port
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;demohello-pipy&#34;&gt;Demo：Hello Pipy&lt;/h3&gt;
&lt;p&gt;开发模式下可以让 Pipy 携带 GUI 启动，通过 GUI 进行配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#指定 gui 的端口为 6060，从 test 目录中加载配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bin/pipy --gui-port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;6060&lt;/span&gt; test/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2021-05-30 22:48:41 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;info&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;gui&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Starting GUI service...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2021-05-30 22:48:41 &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;info&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;listener&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Listening on 0.0.0.0:6060
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;浏览器中打开
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223862683344.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;配置界面
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223865498871.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;展开 &lt;code&gt;002-hello&lt;/code&gt; 子目录点选 &lt;code&gt;pipy&lt;/code&gt; 并点击运行按钮：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223866403409.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl -i localhost:6080
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: keep-alive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length: &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pipy-过滤器&#34;&gt;Pipy 过滤器&lt;/h3&gt;
&lt;p&gt;通过 pipe 的命令可以输出其支持的过滤器列表，一共 31 个。通过将一系列过滤器进行组装，可以实现复杂的流处理。&lt;/p&gt;
&lt;p&gt;比如 &lt;code&gt;007-logging&lt;/code&gt; 的配置实现了日志的功能：记录请求和响应的数据，并批量发送到 ElasticSearch。这里就用到了 &lt;code&gt;fork&lt;/code&gt;、&lt;code&gt;connect&lt;/code&gt;、&lt;code&gt;onSessionStart&lt;/code&gt;、&lt;code&gt;encodeHttpRequest&lt;/code&gt;、&lt;code&gt;decodeHttpRequest&lt;/code&gt;、&lt;code&gt;onMessageStart&lt;/code&gt;、&lt;code&gt;onMessage&lt;/code&gt;、&lt;code&gt;decodeHttpResponse&lt;/code&gt;、&lt;code&gt;replaceMessage&lt;/code&gt;、&lt;code&gt;link&lt;/code&gt;、&lt;code&gt;mux&lt;/code&gt;、&lt;code&gt;task&lt;/code&gt; 等十多种过滤器。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223878872474.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ bin/pipy --list-filters
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;connect             &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;, options&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                         Sends data to a remote endpoint and receives data from it
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;demux               &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                    Sends messages to a different pipline with each one in its own session and context
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;decodeDubbo         &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;                                          Deframes a Dubbo message
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;decodeHttpRequest   &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;                                          Deframes an HTTP request message
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;decodeHttpResponse  &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;                                          Deframes an HTTP response message
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dummy               &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;                                          Eats up all events
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dump                &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;tag&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                                     Outputs events to the standard output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;encodeDubbo         &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;head&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                                    Frames a Dubbo message
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;encodeHttpRequest   &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;head&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                                    Frames an HTTP request message
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;encodeHttpResponse  &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;head&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                                    Frames an HTTP response message
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt;                &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                   Spawns a child process and connects to its input/output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fork                &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;, sessionData&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                     Sends copies of events to other pipeline sessions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;link                &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;, when&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;, target2&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;, when2, ...&lt;span class=&#34;o&#34;&gt;]]])&lt;/span&gt;   Sends events to a different pipeline
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mux                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;, selector&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                        Sends messages from different sessions to a shared pipeline session
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;onSessionStart      &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;callback&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                  Handles the initial event in a session
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;onData              &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;callback&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                  Handles a Data event
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;onMessageStart      &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;callback&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                  Handles a MessageStart event
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;onMessageEnd        &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;callback&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                  Handles a MessageEnd event
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;onSessionEnd        &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;callback&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                  Handles a SessionEnd event
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;onMessageBody       &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;callback&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                  Handles a &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt; message body
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;onMessage           &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;callback&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                  Handles a &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt; message including the head and the body
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;print               &lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;                                          Outputs raw data to the standard output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;replaceSessionStart &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;callback&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                  Replaces the initial event in a session
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;replaceData         &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;replacement&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                             Replaces a Data event
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;replaceMessageStart &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;replacement&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                             Replaces a MessageStart event
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;replaceMessageEnd   &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;replacement&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                             Replaces a MessageEnd event
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;replaceSessionEnd   &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;replacement&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                             Replaces a SessionEnd event
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;replaceMessageBody  &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;replacement&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                             Replaces an entire message body
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;replaceMessage      &lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;replacement&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                             Replaces a &lt;span class=&#34;nb&#34;&gt;complete&lt;/span&gt; message including the head and the body
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tap                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;quota&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;, account&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;                          Throttles message rate or data rate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;use                 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;module, pipeline&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;, argv...&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt;               Sends events to a pipeline in a different module
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt;                &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;condition&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                                 Buffers up events &lt;span class=&#34;k&#34;&gt;until&lt;/span&gt; a condition is fulfilled
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;
&lt;p&gt;“Talk is cheap, show me the code.”&lt;/p&gt;
&lt;h4 id=&#34;配置加载&#34;&gt;配置加载&lt;/h4&gt;
&lt;p&gt;个人比较喜欢看源码来理解实现，即使是 C++。从浏览器请求入手发现运行时向&lt;code&gt;/api/program&lt;/code&gt; 发送了 &lt;code&gt;POST&lt;/code&gt; 请求，请求的内容是配置文件的地址。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223870171916.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;检查源码后，找到逻辑的实现在 &lt;code&gt;src/gui.cpp:189&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建新的 worker&lt;/li&gt;
&lt;li&gt;加载配置，将 JavaScrip 代码解析成 &lt;code&gt;Configuration&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;启动 worker，执行&lt;code&gt;Configuration::apply()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;卸载旧的 worker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16224186469477.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;src/api/configuration.cpp:267&lt;/code&gt; 处看：&lt;code&gt;pipeline&lt;/code&gt;、&lt;code&gt;listen&lt;/code&gt; 和 &lt;code&gt;task&lt;/code&gt; 配置实际在 Pipy 的配置中都是被抽象为 &lt;code&gt;Pipeline&lt;/code&gt; 对象，只是在类型上有差异分别为：&lt;code&gt;NAMED&lt;/code&gt;、&lt;code&gt;LISTEN&lt;/code&gt; 和 &lt;code&gt;TASK&lt;/code&gt;。比如 &lt;code&gt;listen&lt;/code&gt; 中可以通过 &lt;code&gt;fork&lt;/code&gt; 过滤器将事件的副本发送到指定的 &lt;code&gt;pipeline&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223897550113.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;基于数据流事件的处理&#34;&gt;基于数据流事件的处理&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;src/inbound.cpp:171&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2021/05/31/16223918853729.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;Pipy 虽小（只有 11M），但以其可编程的特性提供了灵活的配置能力，潜力无限。&lt;/p&gt;
&lt;p&gt;Pipy 像处理 HTTP 一样处理任意的七层协议。内部版本支持Dubbo、Redis、Socks 等，目前正在迁移到开源版本。&lt;/p&gt;
&lt;p&gt;期待即将开源的 Portal，以及服务网格 Flomesh。持续关注，后面考虑再写几篇。&lt;/p&gt;
&lt;p&gt;“未来可期！”&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
