<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christian Posta | 云原生社区</title>
    <link>https://cloudnative.to/author/christian-posta/</link>
      <atom:link href="https://cloudnative.to/author/christian-posta/index.xml" rel="self" type="application/rss+xml" />
    <description>Christian Posta</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/christian-posta/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Christian Posta</title>
      <link>https://cloudnative.to/author/christian-posta/</link>
    </image>
    
    <item>
      <title>使用了 Service Mesh 后我还需要 API 网关吗</title>
      <link>https://cloudnative.to/blog/do-i-need-an-api-gateway-if-i-have-a-service-mesh/</link>
      <pubDate>Fri, 07 Feb 2020 10:42:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/do-i-need-an-api-gateway-if-i-have-a-service-mesh/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://blog.christianposta.com/microservices/do-i-need-an-api-gateway-if-i-have-a-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;如文章标题所示，本文通过对 Service Mesh 技术和 API 网关的对比，着重分析了两者的功能重合点和分歧点，解答了开发者的困惑，为如果进行技术选型和落地提供了指导思路。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;这篇文章也许无法打破缠绕在 API 网关和服务网格周围的喧嚣。即便已经是 2020 年了，围绕这些话题仍然会存在大量的疑虑。我撰写此文是为了给出真实而具体的解释，以帮助大家理清它们之间的差异、重叠以及适用场景。如果你不同意我觉得我在添乱，或者想请我喝杯啤酒，欢迎随时在 Twitter 上@我（@christianposta）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;第一个曝光：&lt;/strong&gt; 我在 &lt;a href=&#34;https://solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io&lt;/a&gt; 这家公司工作，公司的业务聚焦于今天我们要讨论的主题。我提前说明一下以免你会有“你的观点是有偏见的”的反应。每个人的观点都有偏见。但可以肯定的是，我在 Solo.io 工作是因为我想看到这些想法被付诸实施并推向市场，而不是与之相反。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二个曝光：&lt;/strong&gt; 我正在写一本有关服务网格的书，名为《Istio in Action》，这花了我很多时间。在本文中，不可否认我是站在 Istio 的角度来讨论“服务网格”的，但如果我指的是更普遍的服务网格的概念时，我会特别指出。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;为什么会有另一个关于此话题的博客&#34;&gt;为什么会有另一个关于此话题的博客？&lt;/h2&gt;
&lt;p&gt;有大量关于当前主题的文章。我们看过&lt;a href=&#34;https://aspenmesh.io/api-gateway-vs-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“API 网关用于南北流量，而服务网格用于东西流量”&lt;/a&gt;。还有人写了&lt;a href=&#34;https://medium.com/microservices-in-practice/service-mesh-vs-api-gateway-a6d814b9bf56&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“API 网关用于管理业务功能，而服务网格用于服务到服务通信”&lt;/a&gt;。&lt;a href=&#34;https://blog.getambassador.io/api-gateway-vs-service-mesh-104c01fa4784&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API 网关具有服务网格不具备的特定功能&lt;/a&gt;，其中一些可能不再适用。另一方面，有些人&lt;a href=&#34;https://developer.ibm.com/apiconnect/2018/11/13/service-mesh-vs-api-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更接近我的思考方式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;然而，市场中仍存在明显的困惑。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我也希望看到人们如何看待不同方法之间权衡的严肃讨论。例如，服务网格和 API 网关之间的职责/主张存在重叠。人们对选择感到困惑和不知所措。&lt;/p&gt;
&lt;p&gt;— Andrew Clay Shafer 雷启理 （@littleidea）&lt;/p&gt;
&lt;p&gt;June 12, 2019&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;困惑是什么&#34;&gt;困惑是什么&lt;/h2&gt;
&lt;p&gt;大约一年前，我写了一篇&lt;a href=&#34;https://blog.christianposta.com/microservices/api-gateways-are-going-through-an-identity-crisis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关于 API 网关身份危机&lt;/a&gt;的文章，评估了 API 管理 Kubernetes Ingress 和 API 网关（带有相关定义）的差异。在那篇文章的最后，我试图解释服务网格是如何应对这些功能的，但是没有详细说明它们如何不同，以及什么时候使用它们。我强烈推荐&lt;a href=&#34;https://blog.christianposta.com/microservices/api-gateways-are-going-through-an-identity-crisis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;阅读这篇文章&lt;/a&gt;，因为在某些方面，它是“第一部分”，本文作为“第二部分”。&lt;/p&gt;
&lt;p&gt;我认为产生混淆的原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术使用上存在重叠（代理）&lt;/li&gt;
&lt;li&gt;功能上存在重叠（流量控制，路由，指标收集，安全/策略增强等）&lt;/li&gt;
&lt;li&gt;“服务网格”可替代 API 管理的理念&lt;/li&gt;
&lt;li&gt;服务网格能力的误解&lt;/li&gt;
&lt;li&gt;一些服务网格有自己的网关&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后一点尤其使人困惑。&lt;/p&gt;
&lt;p&gt;如果服务网格仅仅是针对东西流量（边界内），那么为什么有一些服务网格，如 Istio 所说，&lt;a href=&#34;https://istio.io/docs/reference/config/networking/gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有一个 Ingress 网关&lt;/a&gt;针对南北流量（并且是网格的一部分）？例如下面来自 Istio Ingress 网关的文档：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网关描述了一个运行在网格边缘的负载均衡器，它接收传入或传出的 HTTP/TCP 连接。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们的 API 不是 HTTP 吗？如果我们通过 Istio 的网关将 HTTP 请求引入集群/网格中（顺便说一句，这基于强大的 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 代理&lt;/a&gt; 项目），这还不够吗？&lt;/p&gt;
&lt;h2 id=&#34;假设&#34;&gt;假设&lt;/h2&gt;
&lt;p&gt;当我们提到“服务网格”时，将假定是指 Istio 和 Istio 的网关。选择这个场景是因为它最能说明重叠和混淆。其他服务网格&lt;a href=&#34;https://www.consul.io/docs/connect/mesh_gateway.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;也有网关&lt;/a&gt;，而有些还&lt;a href=&#34;https://linkerd.io/2/tasks/using-ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;没有显式网关&lt;/a&gt;。当然你的情况也许会有所不同。&lt;/p&gt;
&lt;h2 id=&#34;它们的重叠在哪里&#34;&gt;它们的重叠在哪里&lt;/h2&gt;
&lt;p&gt;业务的第一个步骤是识别 API 网关和服务网格功能看上去重叠的区域。两者都处理应用程序流量，所以重叠应该不足为奇。下面的清单列举了一些重叠的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遥测数据收集&lt;/li&gt;
&lt;li&gt;分布式追踪&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;TLS 终止/开始&lt;/li&gt;
&lt;li&gt;JWT 校验&lt;/li&gt;
&lt;li&gt;请求路由&lt;/li&gt;
&lt;li&gt;流量切分&lt;/li&gt;
&lt;li&gt;金丝雀发布&lt;/li&gt;
&lt;li&gt;流量镜像&lt;/li&gt;
&lt;li&gt;速率控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好吧，它们确实有重叠。那么你需要一个？还是两个？还是都不需要？&lt;/p&gt;
&lt;h2 id=&#34;它们的分叉点在哪里&#34;&gt;它们的分叉点在哪里&lt;/h2&gt;
&lt;p&gt;服务网格运行在比 API 网关更低的级别，并在架构中所有单个服务上运行。服务网格为服务客户提供关于架构拓扑的“更多细节”（包括客户端负载均衡、服务发现、请求路由），应该实现的弹性机制（超时、重试、熔断），应该收集的遥测（度量、跟踪）和参与的安全流（mTLS、RBAC）。所有这些实现细节通常由某个 sidecar（请考虑 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;）提供给应用程序，但它们不必这样做。请参阅我在 ServiceMeshCon 有关服务网格数据平面演化的演讲。&lt;/p&gt;
&lt;p&gt;下面的话引自 &lt;a href=&#34;https://blog.christianposta.com/microservices/api-gateways-are-going-through-an-identity-crisis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API 身份危机&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务网格的目标是通过在 L7 上透明地操作来解决任何服务/应用程序中列举的问题。换句话说，服务网格希望接入到服务中（而不是到服务中编写代码）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt; 服务网格为服务/客户端提供了更多关于架构其余部分实现的细节/保真度。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.christianposta.com/images/mesh-details.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一方面，API 网关则扮演着不同的角色：“抽象细节”和解耦实现。API 网关提供了跨应用程序架构中所有服务的内聚抽象——作为一个整体，为特定的 API 解决了一些边缘/边界问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.christianposta.com/images/abstract-api.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;无论服务网格是否存在，API 网关都存在于应用程序/服务之上，并为其他部分提供抽象。它们做的事情包括聚合 API、抽象 API 和用不同的实现方式暴露它们，并基于用户在边缘添加更复杂的零信任安全策略。应用程序架构边界上的问题与边界内的问题不同。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.christianposta.com/images/infra-layers.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;边界问题与服务到服务的挑战不同&#34;&gt;边界问题与服务到服务的挑战不同&lt;/h2&gt;
&lt;p&gt;在微服务/云原生架构的边界上，API 网关提供了服务网格无法在同等程度上解决的三个主要能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;边界解耦&lt;/li&gt;
&lt;li&gt;严格控制数据的进出&lt;/li&gt;
&lt;li&gt;桥接安全信任域&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们看看：&lt;/p&gt;
&lt;h3 id=&#34;边界解耦&#34;&gt;边界解耦&lt;/h3&gt;
&lt;p&gt;API 网关的核心功能是为边界外的客户端提供稳定的 API 接口。从 &lt;a href=&#34;https://microservices.io/book&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chris Richardson 的微服务模式一书&lt;/a&gt;中，我们可以将“API 网关模式”改写为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显式地简化一组 API / 微服务的调用&lt;/p&gt;
&lt;p&gt;为一组特定的用户、客户端或消费者模拟“应用程序”的内聚 API。&lt;/p&gt;
&lt;p&gt;这里的关键是 API 网关，当它实现时，它将作为应用程序架构的单一入口点，成为客户端的 API&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来自 &lt;a href=&#34;https://blog.christianposta.com/microservices/api-gateways-are-going-through-an-identity-crisis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API 网关身份危机&lt;/a&gt; 一文中 API 网关的实现案例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io Gloo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spring.io/projects/spring-cloud-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Cloud Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Netflix/zuul&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netflix Zuul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://strongloop.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM-Strongloop Loopback/Microgateway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从功能上看，API 网关需要支持什么？企业在现实的用例中会看到哪些需要 API 网关（服务网格不太适合）的情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求/响应转换&lt;/li&gt;
&lt;li&gt;应用协议转换如 REST/SOAP/XSLT&lt;/li&gt;
&lt;li&gt;错误/速率定制响应&lt;/li&gt;
&lt;li&gt;直接响应&lt;/li&gt;
&lt;li&gt;对 API/代理管道的精确控制&lt;/li&gt;
&lt;li&gt;API 聚合/分组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们挨个来看。&lt;/p&gt;
&lt;h4 id=&#34;请求响应传输&#34;&gt;请求/响应传输&lt;/h4&gt;
&lt;p&gt;作为在 API 网关上暴露 API 的一部分，您可能希望隐藏后端 API 实现的细节。这可能是改变请求内容、删除/添加标头、将标头放入正文的一些组合，反之亦然。当后端服务对 API 进行更改时，或者当客户端不能像提供方那样快速更新时，这提供了一个很好的从客户端解耦的点。&lt;/p&gt;
&lt;h4 id=&#34;应用协议转换&#34;&gt;应用协议转换&lt;/h4&gt;
&lt;p&gt;许多企业在技术上进行了投入，如基于 HTTP、SOAP 的 XML，或基于 HTTP 的 JSON。他们可能希望使用更严格的、特定于客户端的 API 来公开这些 API，并继续保持互操作性。此外，服务提供者可能希望利用新的 RPC 机制（如 gRPC）或流协议（如 rSocket）。&lt;/p&gt;
&lt;h4 id=&#34;错误速率定制响应&#34;&gt;错误/速率定制响应&lt;/h4&gt;
&lt;p&gt;转换来自上游服务的请求是 API 网关的一项重要功能，定制来自网关本身的响应也是如此。采用 API 网关的虚拟 API 进行请求/响应/错误处理的客户端也希望网关自定义其响应以适应该模型。&lt;/p&gt;
&lt;h4 id=&#34;直接响应&#34;&gt;直接响应&lt;/h4&gt;
&lt;p&gt;当客户端（受信任的或恶意的）请求不可用的资源，或由于某种原因被阻止上行时，最好能够终止代理并使用预先屏蔽的响应返回。&lt;/p&gt;
&lt;h4 id=&#34;对-api代理管道的精确控制&#34;&gt;对 API/代理管道的精确控制&lt;/h4&gt;
&lt;p&gt;没有一种方法可以满足所有代理的期望。API 网关应该能够改变应用其功能的顺序（速率限制、authz/n、路由、转换等），并在出现问题时提供一种调试方法。&lt;/p&gt;
&lt;h4 id=&#34;api-聚合&#34;&gt;API 聚合&lt;/h4&gt;
&lt;p&gt;在多个服务上公开一个抽象常常伴随着将多个 API 混合成一个 API 的期望。类似于 GraphQL 的东西可以满足这个需求。&lt;/p&gt;
&lt;p&gt;正如您所看到的，在客户端和提供服务者之间提供一个强大的解耦点涉及的不仅仅是允许 HTTP 通信进入集群这么简单。&lt;/p&gt;
&lt;h2 id=&#34;严格控制什么可以进入离开服务&#34;&gt;严格控制什么可以进入/离开服务&lt;/h2&gt;
&lt;p&gt;API 网关的另一个重要功能是“控制”哪些数据/请求允许进入应用架构，哪些数据/响应允许流出。这意味着，网关需要对进入或发出的请求有深入的理解。例如，一个常见的场景是 Web 应用程序防火墙防止 SQL 注入攻击。另一种是“数据丢失预防”技术，用于在请求 PCI-DSS/HIPPA/GDPR 时阻止 SSN 或 PII 被返回。边界是帮助实现这些策略的天然位置。&lt;/p&gt;
&lt;p&gt;同样，定义和实施这些功能并不像允许 HTTP 通信流进入集群那么简单。&lt;/p&gt;
&lt;h2 id=&#34;定制安全桥接信任域&#34;&gt;定制安全/桥接信任域&lt;/h2&gt;
&lt;p&gt;API 网关提供的最后一个主要功能是边缘安全性。这涉及到向存在于应用程序架构之外的用户和服务提供身份和范围策略，从而限制对特定服务和业务功能的访问。这与前面的部分相关。&lt;/p&gt;
&lt;p&gt;一个常见的例子是能够绑定到 OAuth/SSO 流，包括 Open ID Connect。这些“标准”的挑战在于，它们可能没有得到充分实施，也可能没有得到正确实施。API 网关需要一种方法来灵活地适应这些环境以及提供定制。&lt;/p&gt;
&lt;p&gt;在许多企业中，已经存在身份/信任/认证机制，API 网关的很大一部分是为了向后兼容而进行本地集成。虽然出现了 &lt;a href=&#34;https://spiffe.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFEE&lt;/a&gt; 这样的新标准，但企业需要一段时间才能落地，与此同时，API 网关（甚至是针对在其下一代架构上运行的应用程序的网关）是一个艰难的要求。同样，你可以检视并说这也和上面提到的变换/解耦点有关。&lt;/p&gt;
&lt;h2 id=&#34;怎样落地其中一个另一个两者两者都不&#34;&gt;怎样落地其中一个/另一个/两者/两者都不？&lt;/h2&gt;
&lt;p&gt;在之前的一篇博客中，我概述了一些&lt;a href=&#34;https://blog.christianposta.com/challenges-of-adopting-service-mesh-in-enterprise-organizations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;采用这种技术的挑战（API 网关和服务网格）&lt;/a&gt;，并给出了关于如何最好地应用这种技术的提示。&lt;/p&gt;
&lt;p&gt;重申一下：从边缘开始。这是架构中熟悉的一部分。也要考虑选择最合适的。自从我们引入了云基础设施和云原生应用架构以来，假设（编者注：文章开始所说的假设）已经发生了变化。例如，如果您打算采用 Kubernetes，我强烈建议您考虑使用从头开始构建的应用程序网络技术（例如，检查 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 代理&lt;/a&gt;和已经被提升和转移的应用程序网络技术）。例如，在 &lt;a href=&#34;https://www.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io&lt;/a&gt;，我们已经为此建立了一个名为 Gloo 的开源项目。&lt;/p&gt;
&lt;p&gt;你需要一个服务网格吗？如果您正在部署到云平台，有多种类型的语言/框架来实现您的工作负载，并构建一个微服务架构，那么您可能需要一个。选择也很多。我做过各种比较和对比的演讲，最近的是 &lt;a href=&#34;https://www.slideshare.net/ceposta/navigating-mesh-istio-connect-and-linkerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OSCON 演讲&lt;/a&gt;。请随意&lt;a href=&#34;http://twitter.com/christianposta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;参考&lt;/a&gt;并找到最合适你的。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;是的，API 网关在功能上与服务网格有重叠。它们在使用的技术方面也可能有重叠（例如，Envoy）。但是，它们的角色有很大的不同，理解这一点可以在部署微服务架构和发现无意的假设时为您省去很多麻烦。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>企业组织中采用服务网格的挑战</title>
      <link>https://cloudnative.to/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/</link>
      <pubDate>Tue, 22 Oct 2019 19:25:19 +0800</pubDate>
      <guid>https://cloudnative.to/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://blog.christianposta.com/challenges-of-adopting-service-mesh-in-enterprise-organizations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;本文作者介绍了企业组织采用服务网格面临的哪些挑战，建议企业应该从数据平面开始逐步推进，从了解它、熟悉它、再到扩大规模使用它，并且以介绍其演讲的幻灯片为切入点介绍了架构演进的步骤。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;最近，我写了&lt;a href=&#34;https://dzone.com/trendreports/migrating-to-microservices-2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一篇&lt;/a&gt;关于在企业组织中采用服务网格的具有哪些挑战的文章，这篇文章是为DZone及其迁移到微服务的报告撰写的。在这篇文章中，我们首先要解决的问题之一是“你是否应该沿着采用服务网格的道路走下去”，我是这么说的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先回答“不”。如果您刚刚开始使用微服务架构和少量的服务，请确保您首先准备好了基础部分。微服务及其相关的基础设施是一种优化方式，可以让您更快的变更应用程序。在没有服务网格的情况下，您可以朝着更快的方向前进。你甚至可能想要一些服务网格带来的好处，而不是去关注它所有的复杂性。那么，请看看类似Gloo的产品，一个建立在Envoy代理上的API网关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我认为在当前时刻，这是一个非常重要的考虑，有以下两大原因:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;总的来看，服务网格的实现还没有准备好投入生产。&lt;/li&gt;
&lt;li&gt;全部投入(all-in)到一个服务网络的复杂性仍然很高。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这并不意味着没有团队成功地使用了服务网格，或者您应该远离它。但是，我确实认为您应该建立这样的能力，当您真正准备好了并且可以从中获益的时候，最终能成功地将服务网格引入。例如，在报告中，我列出了您&lt;strong&gt;可能想要使用&lt;/strong&gt;服务网格的原因:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨多个集群部署大量微服务&lt;/li&gt;
&lt;li&gt;容器/k8s和虚拟机的混合部署&lt;/li&gt;
&lt;li&gt;用于构建服务的语言的异构部署&lt;/li&gt;
&lt;li&gt;网络可观测性的不完整和不一致视图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即使有了以上这些理由，你依然会面临这些挑战:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择哪一个服务网格产品？&lt;/li&gt;
&lt;li&gt;谁来做技术支持？&lt;/li&gt;
&lt;li&gt;单集群的多租户问题&lt;/li&gt;
&lt;li&gt;缺乏多集群的管理方法&lt;/li&gt;
&lt;li&gt;已有服务如何适配（sidecar的生命周期、竞态条件等等）&lt;/li&gt;
&lt;li&gt;开发人员与运维人员的界限在哪里&lt;/li&gt;
&lt;li&gt;非容器环境/混合环境&lt;/li&gt;
&lt;li&gt;中心化 vs 去中心化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过我在&lt;a href=&#34;https://blog.christianposta.com/moving-on-from-red-hat/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Red Hat&lt;/a&gt;和现在&lt;a href=&#34;https://blog.christianposta.com/career/new-adventure-starts-at-solo-io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io&lt;/a&gt;加起来两年以上的工作，我一直在帮助人们解决那些棘手的问题(顺便说一句，如果你想交谈/需要这些方面的帮助，可以通过&lt;a href=&#34;http://twitter.com/christianposta?lang=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@christianposta&lt;/a&gt;联系我)。但有一件我从我们的客户/用户一直观察到，并且持续一段时间提出建议，那就是你采用服务网格的第一步，应该总是先使用在一定程度上（自行）隔离的数据平面技术，要了解它是如何工作的，如何实施，如何调试等等。&lt;/p&gt;
&lt;p&gt;例如，在我最近做的一次演讲中，我说过要从Envoy（Envoy是许多服务网格实现的底层数据平面技术）开始。PPT如下:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-start-slow-slide&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;start-slow-slide&#34; srcset=&#34;
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/start-slow-slide_hu41c7057337bdf8947651db183d6af729_314126_f08e1a94e7fbede4768690d136c6e59c.webp 400w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/start-slow-slide_hu41c7057337bdf8947651db183d6af729_314126_287b5dddfe44dc31432b27f3bbffce53.webp 760w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/start-slow-slide_hu41c7057337bdf8947651db183d6af729_314126_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/start-slow-slide_hu41c7057337bdf8947651db183d6af729_314126_f08e1a94e7fbede4768690d136c6e59c.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      start-slow-slide
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从架构的角度来看，它可能是这样的:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-single-gateway&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;single-gateway&#34; srcset=&#34;
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/single-gateway_huae96d8327c213fa8a8d0a4bbc67dab51_440393_70af179684f223dd0f426c52cf0f2cbd.webp 400w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/single-gateway_huae96d8327c213fa8a8d0a4bbc67dab51_440393_2abc4f92a40725efa7bb66d42edff4e0.webp 760w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/single-gateway_huae96d8327c213fa8a8d0a4bbc67dab51_440393_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/single-gateway_huae96d8327c213fa8a8d0a4bbc67dab51_440393_70af179684f223dd0f426c52cf0f2cbd.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      single-gateway
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当然，如果你要使用Envoy，我&lt;a href=&#34;https://medium.com/solo-io/getting-started-with-a-service-mesh-starts-with-a-gateway-96384deedca2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;建议从Gloo&lt;/a&gt;开始，这基本上是一个&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;具有edge与API网关能力的企业版Envoy&lt;/a&gt;，并且很好地植入了服务网格。一旦你有了它，对它熟练使用，那么你就会准备好增加它的使用，甚至可能通过代理的分层引入一些隔离:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-multi-tier-gw&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;multi-tier-gw&#34; srcset=&#34;
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/multi-tier-gw_hu48e3294b012b96a9599800021aa9a1bc_515191_240a6b31d05afd00d64c89ac5e7f2b8a.webp 400w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/multi-tier-gw_hu48e3294b012b96a9599800021aa9a1bc_515191_09149a77fbf2dff50528dcc7e4f855d2.webp 760w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/multi-tier-gw_hu48e3294b012b96a9599800021aa9a1bc_515191_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/multi-tier-gw_hu48e3294b012b96a9599800021aa9a1bc_515191_240a6b31d05afd00d64c89ac5e7f2b8a.webp&#34;
               width=&#34;760&#34;
               height=&#34;426&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      multi-tier-gw
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;接下来的方法是将网关推入到应用架构中。我们看到我们的用户在每个应用程序边界采用一个网关的方法，开始有了一个网格的“感觉”，但在应用程序引入了一些结构(例如，&lt;a href=&#34;https://medium.com/solo-io/api-gateways-are-going-through-an-identity-crisis-d1d833a313d7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API网关模式&lt;/a&gt;)。我开始称之为“waypoints”架构。就像飞行员使用航路点（waypoints）来指导他们的飞行计划一样，这些网关为您的应用架构增加了结构，同时解决了诸如安全性和API解耦的南北通信问题，同时为成功采用服务网格奠定了基础。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-bc-gw&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;bc-gw&#34; srcset=&#34;
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/bc-gw_hua2b7641dacb412fc60d8a4f5ba249d94_532778_73290757d39d4e2f998b402f3c1dd54f.webp 400w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/bc-gw_hua2b7641dacb412fc60d8a4f5ba249d94_532778_39ce87fd69dc3a86b8688329a9ab9083.webp 760w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/bc-gw_hua2b7641dacb412fc60d8a4f5ba249d94_532778_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/bc-gw_hua2b7641dacb412fc60d8a4f5ba249d94_532778_73290757d39d4e2f998b402f3c1dd54f.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      bc-gw
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最后，您可以开始在应用程序中引入独立于边界的服务网格代理，以解决棘手的但恰恰是服务网格技术最擅长解决的service-to-service通信挑战:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-push-down-gw&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;push-down-gw&#34; srcset=&#34;
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/push-down-gw_hu9d6a7c9431c187f2ad5e0e5d61658726_608097_e8fa79452386cd054ac5c95cce7d311c.webp 400w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/push-down-gw_hu9d6a7c9431c187f2ad5e0e5d61658726_608097_3596b05dceb062b4d1f227b433314054.webp 760w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/push-down-gw_hu9d6a7c9431c187f2ad5e0e5d61658726_608097_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/push-down-gw_hu9d6a7c9431c187f2ad5e0e5d61658726_608097_e8fa79452386cd054ac5c95cce7d311c.webp&#34;
               width=&#34;760&#34;
               height=&#34;433&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      push-down-gw
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这里重要的部分是网关，并且仍然有非常有用的用途！它们向应用架构中添加结构和路径点，同时在需要的地方将某些实现细节与其他服务分离并隐藏起来。在很多方面，这都遵循了DDD有界上下文模型，网关提供了一个“反腐败”层。否则，如果你只是把所有的服务都当作“伙伴”，你就会开始坚定地迈向死星:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deathstar&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;deathstar&#34; srcset=&#34;
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/deathstar_hu2d45f23c61ea6542ffc656140423a2ca_1068805_54a216ce336a4adc096dbf896adb76e9.webp 400w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/deathstar_hu2d45f23c61ea6542ffc656140423a2ca_1068805_8fb8c1c32c67b380429d5f774ee4c888.webp 760w,
               /blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/deathstar_hu2d45f23c61ea6542ffc656140423a2ca_1068805_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/challenges-of-adopting-service-mesh-in-enterprise-organizations/deathstar_hu2d45f23c61ea6542ffc656140423a2ca_1068805_54a216ce336a4adc096dbf896adb76e9.webp&#34;
               width=&#34;760&#34;
               height=&#34;433&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      deathstar
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;希望这篇文章有助于您奠定一个成功的方法，通过小范围使用服务网格，然后逐渐缓慢扩展有意义的各个地方，并且你的应用程序可以从服务网格架构中获益。否则，您将承担同时引入太多复杂性的风险，这将违背您实现应用程序和基础设施现代化的意图。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>API Gateway的身份认同危机</title>
      <link>https://cloudnative.to/blog/api-gateways-are-going-through-an-identity-crisis/</link>
      <pubDate>Mon, 13 May 2019 20:08:37 +0800</pubDate>
      <guid>https://cloudnative.to/blog/api-gateways-are-going-through-an-identity-crisis/</guid>
      <description>&lt;p&gt;如今，API网关经历了一系列&lt;a href=&#34;https://en.wikipedia.org/wiki/Identity_crisis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;身份认同危机&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们是集中式共享资源，有助于将API暴露和维护到外部实体吗？&lt;/li&gt;
&lt;li&gt;它们是否为集群的ingress哨兵，严格控制用户流量在集群的进出？&lt;/li&gt;
&lt;li&gt;或它们是否为某类API的集成，以便更简洁地表达API，具体取决于它所具有的客户端类型？&lt;/li&gt;
&lt;li&gt;当然还有不愿多谈但我经常听到的一个问题：&amp;ldquo;服务网格是否会使API网关过时？&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;有关背景&#34;&gt;有关背景&lt;/h2&gt;
&lt;p&gt;随着技术的快速发展，以及行业在技术和架构模式中的快速发展，你会想到&amp;quot;这一切都让我头晕目眩&amp;quot;。在这篇文章中，我希望简化&amp;quot;API网关&amp;quot;的不同身份，澄清组织中哪些组可能使用API网关（他们试图解决的问题），并重新关注第一原则。理想情况下，在本文结束时，您将更好地了解不同团队在不同层面的API架构的作用，以及如何从每个层面中获取最大价值。&lt;/p&gt;
&lt;p&gt;在我们深入研究之前，让我们对API这个术语非常清楚。&lt;/p&gt;
&lt;h2 id=&#34;我对api的定义&#34;&gt;我对API的定义：&lt;/h2&gt;
&lt;p&gt;一种明确且有目的地定义的接口，旨在通过网络调用，使软件开发人员能够以受控且舒适的方式对组织内的数据和功能进行编程访问。&lt;/p&gt;
&lt;p&gt;这些接口抽象了实现它们的技术基础结构的细节。对于这些设计好的端点，我们期望能有些一定程度的文档，例如使用指南，稳定性报告和向后兼容性。&lt;/p&gt;
&lt;p&gt;相反，仅仅因为我们可以通过网络与另一个软件通信并不一定意味着远程端点是这个定义好的API。许多系统彼此通信，往往这种通信更加随意地发生，并且通过耦合和其他因素进行实时交互。&lt;/p&gt;
&lt;p&gt;我们创建API以提供对业务部分的深思熟虑的抽象，并实现新的业务功能以及偶发创新。&lt;/p&gt;
&lt;p&gt;在讨论API网关时首先列出的是API管理。&lt;/p&gt;
&lt;h2 id=&#34;api管理&#34;&gt;API管理&lt;/h2&gt;
&lt;p&gt;很多人都在API管理方面考虑API网关。这是合理的。但是让我们快速了解一下API网关到底是做什么的。&lt;/p&gt;
&lt;p&gt;通过&lt;a href=&#34;https://en.wikipedia.org/wiki/API_management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API Management&lt;/a&gt;，我们希望解决：当我们希望公开现有API以供其他人使用时，如何跟踪谁使用这些API，实施允许谁使用这些API的策略，建立安全流以进行身份​​验证和授权允许，使用并构建可在设计时使用的服务目录，以促进API使用并为有效治理奠定基础。&lt;/p&gt;
&lt;p&gt;我们希望解决：现有的，规划好的API，我们希望按照我们的条款分享给他人的问题。&lt;/p&gt;
&lt;p&gt;API管理还可以很好地允许用户（潜在API消费者）自助服务，注册不同的API消费计划（想一想：指定价格点在给定时间范围内每个端点的每个用户的呼叫数）。我们能够实施这些管理功能的基础设施是我们的API流量通过的网关。在这一点上，我们可以执行诸如身份认证，流量限速，指标采集，以及其他策略执行操作。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.christianposta.com/images/identity-crisis/api-management-sketch.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;利用API网关的API管理软件示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://apigee.com/api-management/#/homepage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Cloud Apigee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.3scale.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Red Hat 3Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mulesoft.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mulesoft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://konghq.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这个层面上，我们考虑API（如上所述）以及如何最好地管理和允许访问它们。我们没有考虑服务器，主机，端口，容器甚至服务（另一个定义不明确的词，但你理解我的！）。&lt;/p&gt;
&lt;p&gt;API管理（以及它们相应的网关）通常实现为由&amp;quot;平台团队&amp;quot;，&amp;ldquo;集成团队&amp;quot;或其他API基础架构团队拥有的严格控制的共享基础架构。通常这样做是为了强制执行一定程度的治理，变更管理和策略。在某些情况下，即使这些基础架构集中部署和管理，它们也可能支持更分散的物理部署。例如，Kong的首席技术官Marco Palladino在评论中指出，Kong可以选择部署的组件来支持集中式或分布式模型。&lt;/p&gt;
&lt;p&gt;有一点需要注意：我们要注意不要让任何业务逻辑进入这一层。如前一段所述，API管理是共享基础架构，但由于我们的API流量通过它，它倾向于重造&amp;quot;全知全能&amp;rdquo;（思考企业服务总线）治理门户，为通过它，我们必须全盘改造我们的服务。理论上这听起来很棒。实际上，这可能最终成为组织瓶颈。有关更多信息，请参阅此文章：&lt;a href=&#34;http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Application Network Functions with ESBs, API Management, and Now… Service Mesh?&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;集群入口&#34;&gt;集群入口&lt;/h2&gt;
&lt;p&gt;为了构建和实现API，我们专注于代码，数据，业务框架等方面。但是，要让这些的东西提供价值，必须对它们进行测试，部署到生产环境中并进行监控。当我们开始部署到云原生平台时，我们开始基于部署，容器，服务，主机，端口等考虑，以便构建我们的应用程序适应该环境。我们大概还需要制作工作流程（CI）和管道（CD），以利用云平台快速迭代，将其提供给客户等。&lt;/p&gt;
&lt;p&gt;在这种环境中，我们可以构建和维护多个集群来托管我们的应用程序，并需要某种方式来访问这些集群内的应用程序和服务。以Kubernetes为例。我们可以使用&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Ingress controller&lt;/a&gt;来允许访问Kubernetes集群（集群中的其他所有内容都无法从外部访问）。通过这种方式，我们可以非常严格地控制流量可能进入（甚至离开）我们的集群，具有明确定义的入口点，如域名/虚拟hosts，端口，协议等。&lt;/p&gt;
&lt;p&gt;在这个层面中，我们可能希望某种&amp;quot;&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ingress gateway&lt;/a&gt;&amp;ldquo;成为允许请求和消息进入集群的流量哨兵。在这个层面中，你需要更多考虑的是：&amp;ldquo;我在我的集​​群中有这项服务，我需要集群外部的人能够调用它&amp;rdquo;。这可能是一个服务（暴露API），一个系统整体，一个gRPC服务，一个缓存，一个消息队列，一个数据库等。有些人选择将其称为API网关，其中的一些可能实际上做得比流量入口/出口更多，但重点是问题存在于集群级操作上。由于我们倾向于部署更多集群（相对于单个高度多租户集群），我们最终会有更多网络入口点和彼此交互的需求。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.christianposta.com/images/identity-crisis/cluster-ingress-sketch.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这些类型的入口实现的示例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy Proxy and projects that build upon it including：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.getambassador.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Datawire Ambassador&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io Gloo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/heptio/contour&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heptio Contour&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HAProxy
&lt;ul&gt;
&lt;li&gt;Including &lt;a href=&#34;https://docs.openshift.com/container-platform/3.9/install_config/router/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenShift’s Router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://traefik.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Traefik&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Kong/kubernetes-ingress-controller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此层面的集群入口控制器由平台团队管理，但是这个基础架构通常与更分散的自助服务工作流程相关联（正如您期望从云原生平台那样）。请参阅&lt;a href=&#34;https://www.weave.works/blog/gitops-operations-by-pull-request&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;See the &amp;ldquo;GitOps&amp;rdquo; workflow as described by the good folks at Weaveworks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;api-gateway模式&#34;&gt;API Gateway模式&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;API网关&amp;quot;这一术语的另一重意思才是我最开始理解的，即它是最接近API Gateway模式的那个。 &lt;a href=&#34;https://www.chrisrichardson.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chris Richardson&lt;/a&gt;在第8章的&amp;rdquo;&amp;quot;&lt;a href=&#34;https://microservices.io/book&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务设计模式&lt;/a&gt;&amp;ldquo;&amp;ldquo;一书中做了很好的工作。我强烈建议将该书用作本文和其他微服务模式的教学。在他的&lt;a href=&#34;https://microservices.io/patterns/apigateway.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;microservices.io&lt;/a&gt;网站可以上略扫一下即可知，API Gateway模式，简而言之，是关于策划API以便更好地使用不同类别的消费者。此策略涉及API间接级别。您可能听到的代表API Gateway模式的另一个术语是&amp;quot;服务于前端的后端&amp;rdquo;，其中&amp;quot;前端&amp;quot;可以是单纯前端界面（UI），移动客户端，物联网客户端，甚至是其他服务/应用开发人员。&lt;/p&gt;
&lt;p&gt;在API Gateway模式中，我们明确简化了一组API的调用，以模拟特定用户，客户或消费者的&amp;quot;应用程序&amp;quot;的内聚API。回想一下，当我们使用微服务来构建我们的系统时，&amp;ldquo;应用程序&amp;quot;的概念就会消失。 API Gateway模式有助于重塑此概念。这里的关键在于API网关，当它实现时，它成为客户端和应用程序的API，并负责与任何后端API和其他应用程序网络端点（那些不符合上述API定义的端点）进行通信。&lt;/p&gt;
&lt;p&gt;与上一节中的Ingress控制器不同，此API网关更接近于开发人员的全局视图，并且不太关注为集群外消耗而暴露的端口或服务。这个&amp;quot;API Gateway&amp;quot;也不同于我们对已有API的进行管理所用的API管理观念。这个API网关掩盖了对可能暴露API的后端的调用，但是也可能会谈到较少描述为API的事情，例如对旧系统的RPC调用，使用不符合&amp;quot;REST&amp;quot;式优雅的协议调用，例如JSON over HTTP，gRPC，SOAP，GraphQL，websockets和消息队列这些黑科技。还可以调用这种类型的网关来进行消息级转换，复杂路由，网络负载均衡/回调以及响应的集成。&lt;/p&gt;
&lt;p&gt;如果您熟悉&lt;a href=&#34;https://www.crummy.com/writing/speaking/2008-QCon/act3.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Richardson的REST API的成熟度模型&lt;/a&gt;，那么实现API Gateway模式的API网关会被要求集成更多的Level 0请求（以及介于两者之间的所有内容）而不是Level 1-3实现。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.christianposta.com/images/identity-crisis/richardson-model.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/articles/richardsonMaturityModel.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://martinfowler.com/articles/richardsonMaturityModel.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这些类型的网关实现仍然需要解决诸如速率限制，认证/授权，熔断，指标采集，流量路由等一类的事情。 这些类型的网关可以在集群的边缘用作集群入口控制器，也可以在集群的深处用作应用程序网关。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.christianposta.com/images/identity-crisis/api-gateway-pattern.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;此类API网关的示例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://spring.io/projects/spring-cloud-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Cloud Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io Gloo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Netflix/zuul&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netflix Zuul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://strongloop.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM-Strongloop Loopback/Microgateway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种类型的网关也可以使用更通用的编程或集成语言/框架来构建，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/camel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache Camel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/projects/spring-integration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ballerina.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ballerina.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vertx.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eclipse Vert.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这种类型的API网关与应用程序和服务的开发密切相关，我们希望开发人员能够参与、帮助指定API网关公开的API，了解所涉及的任何mashup逻辑以及需要能够快速测试和更改此API基础结构。我们还希望操作或SRE对API网关的安全性，弹性和可观察性配置有一些看法。此级别的基础架构还必须适应不断发展的按需自助服务开发人员工作流程。再次参见GitOps模型以获取更多信息。&lt;/p&gt;
&lt;h2 id=&#34;谈到服务网格&#34;&gt;谈到服务网格&lt;/h2&gt;
&lt;p&gt;在云基础架构上运行服务架构的一部分包括难以在网络中构建适当级别的可观察性和控制。在解决此问题的先前迭代中，&lt;a href=&#34;http://blog.christianposta.com/microservices/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我们使用应用程序库和有希望的开发人员治理来实现此目的&lt;/a&gt;。然而，在规模和多语言环境中，&lt;a href=&#34;http://blog.christianposta.com/microservices/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格技术的出现提供了更好的解决方案&lt;/a&gt;。服务网格通过透明实现为平台及其组成服务带来以下功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务到服务（即东西流量）的恢复能力&lt;/li&gt;
&lt;li&gt;安全性包括最终用户验证，双向TLS，服务到服务RBAC / ABAC&lt;/li&gt;
&lt;li&gt;黑盒服务可观察性（专注于网络通信），用于请求/秒，请求延迟，请求失败，熔断事件，分布式跟踪等&lt;/li&gt;
&lt;li&gt;服务到服务速率限制，配额执行等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;精明的读者会认识到，&lt;a href=&#34;https://dzone.com/articles/api-gateway-vs-service-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API网关和服务网格的功能似乎有些重叠&lt;/a&gt;。服务网格的目标是通过在L7上透明地解决任何服务/应用程序来解决这些问题。换句话说，服务网格希望融入服务（实际上没有被编码到服务的代码中）。另一方面，API网关位于服务网格和应用程序之上（L8？）。服务网格为服务，主机，端口，协议等（东/西流量）之间的请求流带来价值。它们还可以提供基本的集群入口功能，以便为北/南流量带来一些此功能。但是，这不应与API网关可以为南北向流量带来的功能相混淆（如在集群的北/南和向应用程序或应用程序组的北/南）。&lt;/p&gt;
&lt;p&gt;服务网格和API网关在某些领域的功能上重叠，但它们是互补的，因为它们生活在不同的层次并解决不同的问题。理想的解决方案是将每个组件（API Management，API Gateway，Service Mesh）即插即用，并在需要时在组件之间保持良好的界限（或者在不需要它们时将其排除）。同样重要的是找到&lt;a href=&#34;https://developer.ibm.com/apiconnect/2018/12/10/api-management-centralized-or-decentralized/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;适合您的分散开发人员和操作工作流程&lt;/a&gt;的这些工具的实现。尽管这些不同组成部分的术语和身份存在混淆，但我们应该依赖于第一原则并理解我们的架构中这些组件在何处带来价值以及它们如何独立存在并共存互补性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.christianposta.com/images/identity-crisis/api-layers.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;我们很乐意帮忙&#34;&gt;我们很乐意帮忙！&lt;/h2&gt;
&lt;p&gt;一些读者可能知道我热衷于帮助人们，特别是在云，微服务，事件驱动架构和服务网络领域。 在我的公司,&lt;a href=&#34;https://www.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io&lt;/a&gt;，我们正在帮助IT组织认识并成功采用适当级别的网关和服务网格等API技术，以及他们成功优化它们的速度（更重要的是，他们确实需要这些技术！！）。 我们在&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Proxy&lt;/a&gt;，&lt;a href=&#34;https://graphql.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL&lt;/a&gt;和&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;等技术的基础上构建了&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gloo&lt;/a&gt;，&lt;a href=&#34;https://sqoop.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Scoop&lt;/a&gt;和&lt;a href=&#34;https://supergloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SuperGloo&lt;/a&gt;等工具，以帮助实现API网关和服务网格管理。 请直接联系我们（&lt;a href=&#34;https://twitter.com/soloio_inc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@soloio_inc&lt;/a&gt;，&lt;a href=&#34;http://www.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http：//solo.io&lt;/a&gt;）或直接与我联系（&lt;a href=&#34;http://www.twitter.com/christianposta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@christianposta&lt;/a&gt;，&lt;a href=&#34;http://blog.christianposta.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客&lt;/a&gt;），深入了解我们的愿景以及我们的技术如何为您的组织提供帮助。 在下一系列博客中，我们将深入探讨API Gateway模式，多集群场景的难点，多服务网格的难点等！ 敬请关注！&lt;/p&gt;
&lt;h2 id=&#34;相关阅读&#34;&gt;相关阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>应用程序安全性和正确性的责任不能推卸给Istio和任何服务网格</title>
      <link>https://cloudnative.to/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/</link>
      <pubDate>Thu, 23 Aug 2018 15:31:39 +0800</pubDate>
      <guid>https://cloudnative.to/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/</guid>
      <description>&lt;p&gt;我最近在讨论集成服务的演进以及服务网格的使用，特别是关于 Istio 。自从2017年1月我听说了 Istio 以来，我一直很兴奋，事实上我是为这种新技术感到兴奋，它可以帮助组织构建微服务以及原生云架构成为可能。也许你可以说，因为我已经写了很多关于它的文章（请关注 &lt;a href=&#34;https://twitter.com/christianposta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@christianposta&lt;/a&gt; 的动态)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/the-hardest-part-of-microservices-calling-your-services/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Hardest Part of Microservices: Calling Your Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/00-microservices-patterns-with-envoy-proxy-series/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microservices Patterns With Envoy Sidecar Proxy: The series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Application Network Functions With ESBs, API Management, and Now.. Service Mesh?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/comparing-envoy-and-istio-circuit-breaking-with-netflix-hystrix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Comparing Envoy and Istio Circuit Breaking With Netflix OSS Hystrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/traffic-shadowing-with-istio-reduce-the-risk-of-code-release/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Traffic Shadowing With Istio: Reducing the Risk of Code Release&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/advanced-traffic-shadowing-patterns-for-microservices-with-istio-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Advanced Traffic-shadowing Patterns for Microservices With Istio Service Mesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/how-a-service-mesh-can-help-with-microservices-security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How a Service Mesh Can Help With Microservices Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 建立在容器和 Kubernetes 的一些目标之上：提供有价值的分布式系统模式作为语言无关的习惯用法。例如：Kubernetes 通过执行启动/停止、健康检查、缩放/自动缩放等来管理容器，而不管容器中实际运行的是什么。类似的， Istio 可以通过在应用程序容器之外透明地解决可靠性、安全性、策略和通信方面的挑战。&lt;/p&gt;
&lt;p&gt;随着 &lt;a href=&#34;https://istio.io/blog/2018/announcing-1.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.0&lt;/a&gt; 版本在2018年7月31日的发布，我们看到 Istio 的使用和采纳有了很大的增加。我看到的一个问题是“如果 Istio 为我提供了可靠性，那么在应用程序中我还需要在担心它吗？”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我的答案是：绝对要！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/application-network-functions-with-esbs-api-management-and-now-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;就在前一年，我写了一篇文章&lt;/a&gt;，其中包含了这一区别，但并不是足够有力；这篇文章是我试图纠正这一点，&lt;a href=&#34;https://www.slideshare.net/ceposta/evolution-of-integration-and-microservices-patterns-with-service-mesh-107786281&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;并建立在前面提到的谈话的基础上&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因此，设置一些上下文：Istio 提供了应用程序网络的“可靠性”能力，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动重试（automatic retry）&lt;/li&gt;
&lt;li&gt;重试配额/预算（retry quota/budget）&lt;/li&gt;
&lt;li&gt;连接超时（connection timeout）&lt;/li&gt;
&lt;li&gt;请求超时（request timeout）&lt;/li&gt;
&lt;li&gt;客户端负载均衡（client-side load balancing）&lt;/li&gt;
&lt;li&gt;断路器（circuit breaking）&lt;/li&gt;
&lt;li&gt;隔离层（bulkheading）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在处理分布式系统时，这些功能是必不可少的。网络并不是可靠的，并且破坏了我们在一个整体中所拥有的很多好的安全假设/抽象。我们要么迫切的解决这些问题，要么遭受系统范围内不可预测的停机。&lt;/p&gt;
&lt;h2 id=&#34;退一步说&#34;&gt;退一步说&lt;/h2&gt;
&lt;p&gt;这里更大的问题实际上是让应用程序相互通信来解决一些业务的问题。这就是为什么我们编写软件的原因，最终用来提供某种商业价值。同时该软件也使用一些商业领域模型，例如：“客户”、“购物车”、“账户”等。从领域驱动的设计来看，每个服务可能在理解这些概念上都略微有不同。&lt;/p&gt;
&lt;p&gt;这里有一些不太明确的概念和更大的业务约束（例如：客户可以由名称和电子邮件来确认唯一性，或者客户只能拥有一种类型的支票账户等），以及不可靠的网络和整个不可预知的基础设施（假定可以构建这样的服务，可以或者失败）使构建正确是非常困难的。&lt;/p&gt;
&lt;h2 id=&#34;端到端的正确性和安全性&#34;&gt;端到端的正确性和安全性&lt;/h2&gt;
&lt;p&gt;然而，事实上是，在构建正确和安全的应用程序方面，这样的责任归属到了应用程序上（以及所有它支持的人）。我们可以尝试将更低级别的可靠性构建到系统的性能或优化的组件中，但总的责任还是在应用程序中。1984年 Saltzer、Reed 和 Clark 在“系统设计中的端到端论证”中提到了这一原则。具体地说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有在对通信系统端点的应用程序足够了解的情况下，才能完全正确的实现所讨论的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这里，“功能”是应用程序的需求之一，比如“预订”或“向购物车中添加商品”。这种功能不能概括为通信系统或其组件/基础设置（这里的通信系统指的是网络、中间件和任何为应用程序提供基础设施的工作）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，提供被质疑的功能作为通信系统本身的特质是不可能的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，我们可以做一些事情以保证通信系统的部分可靠，这样有助于实现更高层次的应用程序的需求。我们做这些事情后可以优化部分区域，这样不至于过于担心这样的问题，但应用程序不能完全忽略这些事情：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有时，通信系统提供的非完整的版本的功能，可能对于增强性能很有用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如：在 Saltzer 的论文中，他们使用从应用程序 A 传输文件到应用程序 B 的示例：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/006tNbRwgy1fuibtn8kvfj31fc0v2ju4.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们需要做什么（安全）来保证文件被正确的传送到？在图中的任何一点都有能出现错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存储机制可能有失败的区域/移位的比特/损坏，所以当应用程序 A 读取一个文件时，读取的是一个错误的文件；&lt;/li&gt;
&lt;li&gt;应用程序在读取文件到内存中或者发送文件时存在 bug ；&lt;/li&gt;
&lt;li&gt;网络可能混淆字节的顺序，文件部分重复等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以进行优化，例如使用更可靠的传输，如 TCP 协议或消息队列，但是 TCP 不知道“正确传输文件”的语意，所以我们期望的最好结果至少是当我们在网络上处理事情时，网络是可靠的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/006tNbRwgy1fuiihqrv73j31es0eqjsf.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了完整的实现端到端的正确性，我们可能需要使用一些类似文件校验的东西，与文件一起在文件初始化时写入，然后在 B 接收文件时校验其校验和。然而，我们在校验传输的正确性（实现细节），其职责在于找出解决方案并使其正确，而不是使用 TCP 或者消息队列。&lt;/p&gt;
&lt;h2 id=&#34;典型的模式是什么样的&#34;&gt;典型的模式是什么样的？&lt;/h2&gt;
&lt;p&gt;为了解决分布式应用程序中应用程序的正确性和安全性，我们可以使用一些模式。在早些时候，我们提到了 Istio 提供给我们的一些可靠的模式，但这些并不是唯一的。通常，有两类模式可以帮助我们正确和安全的构建应用程序，并且这两类模式是相关的。我们称这类位“应用程序集成”和“应用程序网络”。两者都是应用程序的责任。让我们来看看：&lt;/p&gt;
&lt;h3 id=&#34;应用程序集成&#34;&gt;应用程序集成&lt;/h3&gt;
&lt;p&gt;这些模式以如下这样的形式出现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用排序、多播和编排 （Call sequencing, multicasting, and orchestration）&lt;/li&gt;
&lt;li&gt;聚合响应、转换消息语义、拆分消息等 （Aggregate responses, transforming message semantics, splitting messages, etc）&lt;/li&gt;
&lt;li&gt;原子性、一致性问题、saga模式 （Atomicity, consistency issues, saga pattern）&lt;/li&gt;
&lt;li&gt;反腐败层、适配器、边界转换 （Anti-corruption layers, adapters, boundary transformations）&lt;/li&gt;
&lt;li&gt;消息重试、排重/幂等性 （Message retries, de-duplication/idempotency）&lt;/li&gt;
&lt;li&gt;消息重新排序 （Message re-ordering）&lt;/li&gt;
&lt;li&gt;缓存 （Caching）&lt;/li&gt;
&lt;li&gt;消息级路由 （Message-level routing）&lt;/li&gt;
&lt;li&gt;重试、超时 （Retries, timeouts）&lt;/li&gt;
&lt;li&gt;后端/遗留系统集成 （Backend/legacy systems integration）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用一个简单的例子，”在购物车中添加一个项目“，我们可以来说明这个概念：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/006tNbRwgy1fuikdn3j02j31ks0oa77e.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当一个用户在点击“加入购物车”功能时，用户期望看到的是商品已经加入到他们的购物车中。在系统中，这可能涉及到对推荐引擎的协调、调用顺序（嘿，我们把它加入到购物车中了，想知道是否计算推荐报价来配合它）、库存服务和其他服务等，然后再调用服务插入购物车。我们需要能够将消息转换到不同的后端，处理失败（并回滚我们发起的任何更改），并且在每个服务中我们都需要可以处理重复。如果由于某种原因，调用变得很慢，但用户又再次点击了“加入购物车”时怎么办呢？如果用户这么做了，那么再多可靠的基础设施也拯救不了我们；我们需要在应用程序中检测和实现重复检查/幂等服务。&lt;/p&gt;
&lt;h3 id=&#34;应用程序网络&#34;&gt;应用程序网络&lt;/h3&gt;
&lt;p&gt;这些模式以如下这样的形式出现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动重试 （automatic retry）&lt;/li&gt;
&lt;li&gt;重试指标/预算 （retry quota/budget）&lt;/li&gt;
&lt;li&gt;连接超时 （connection timeout）&lt;/li&gt;
&lt;li&gt;请求超时 （request timeout）&lt;/li&gt;
&lt;li&gt;客户端负载均衡（client-side load balancing）&lt;/li&gt;
&lt;li&gt;熔断器 （circuit breaking）&lt;/li&gt;
&lt;li&gt;隔离层 （bulkheading）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但在通过网络进行通信的应用程序时，还存在其他复杂的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;金丝雀展示 （Canary rollout）&lt;/li&gt;
&lt;li&gt;流量路由 （Traffic routing）&lt;/li&gt;
&lt;li&gt;指标集合 （Metrics collection）&lt;/li&gt;
&lt;li&gt;分布式跟踪 （Distributed tracing）&lt;/li&gt;
&lt;li&gt;影子流量 （Traffic shadowing）&lt;/li&gt;
&lt;li&gt;故障注入 （Fault injection）&lt;/li&gt;
&lt;li&gt;健康检查 （Health checking）&lt;/li&gt;
&lt;li&gt;安全 （Security）&lt;/li&gt;
&lt;li&gt;组织策略 （Organizational policy）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何使用这么模式&#34;&gt;如何使用这么模式？&lt;/h2&gt;
&lt;p&gt;在过去，我们试图将这些领域中的职责混合在一起。我们会做一些事情，比如把所有东西都推入集中式基础设施中，这样它基本上就100%可用的（应用程序网络+应用系统集成）。我们将应用程序的关注点放在集中的基础设施中（它本应该使我们更加敏捷），但是当需要对应用程序做快速的更改时，却遇到了瓶颈和僵化的问题。这些动态体现在我们实现企业服务总线（ESB）的方式上：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/006tNbRwly1fuit5y2mn6j311g0x418y.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;或者，我认为大型云厂商（Netflix、Amazon、Twitter 等）以及认识到了这些模式的“应用程序职责”方面，并将应用程序网络代码混合到应用程序中。想想像 Netflix OSS ，有用于断路器、客户端负载均衡、服务发现等不同的库。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/006tNbRwly1fuitn6o25ij30yy0x0408.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如你所知，围绕应用程序网络的 Netflix OSS 库非常关注 Java。当组织开始采用 Netflix OSS 以及类似spring-cloud-netflix 这样的衍生产品时，他们就会遇到这样一个事实：一旦开始添加其他语言时，操作这样的架构就变的令人望而却步了。Netflix 已经非常成熟了并且实现了自动化，但其他公司并不是 Netflix 。在尝试操作应用程序库和框架来解决应用程序联网问题是遇到的一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每种语言/框架对于这些关注点都有自己的实现方式。&lt;/li&gt;
&lt;li&gt;实现不会完全相同，它们会变化、不同，有时会有错误。&lt;/li&gt;
&lt;li&gt;如何管理、更新以及修补这些库？也就是说，生命周期的管理。&lt;/li&gt;
&lt;li&gt;这些库混淆了应用程序的逻辑。&lt;/li&gt;
&lt;li&gt;对开发人员给与了极大的信任。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 和服务网格的总体目标是解决应用程序网络类问题。将这些问题的解决方案迁移到服务网格中是可操作性的优化。但这并不意味着它不再是应用程序的责任，而是意味着这些功能的实现存在于进程之外了，并且必须是可配置的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/006tNbRwly1fuiuklgkjxj31060wyt9g.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;通过这样做，我们可以通过以下操作来优化可操作性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这些功能的单一实现随处可见。&lt;/li&gt;
&lt;li&gt;一致的功能。&lt;/li&gt;
&lt;li&gt;正确的功能。&lt;/li&gt;
&lt;li&gt;应用程序运维人员和应用程序开发人员都可编程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 和服务网格不允许你将责任推给基础设施，它们只是增加了一定程度的可靠性和可操作性的优化。就像在端到端的参数中一样，TCP 允许卸载应用程序的责任。&lt;/p&gt;
&lt;p&gt;Istio 有助于解决应用程序网络类问题，但是应用程序集成类问题是什么呢？幸运的是，对于开发人员来说，有大量的框架可以帮助他们来实现应用程序的集成。对于 Java 开发者我最喜欢的 Apache Camel ，它提供了许多编写正确和安全的应用程序所需的组件，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.christianposta.com/microservices/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Call sequencing, multicasting, and orchestration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/aggregate-eip.adoc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aggregate responses, transforming message semantics, splitting messages, etc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/saga-eip.adoc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Atomicity, consistency issues, saga pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;Anti-corruption layers, adapters, boundary transformations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/idempotentConsumer-eip.adoc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Message retries, de-duplication/idempotency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/resequence-eip.adoc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Message reordering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/content-based-router-eip.adoc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Message-level routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Retries, timeouts&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/camel/blob/master/components/readme.adoc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backend/legacy systems integration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/006tNbRwly1fuiv4suzo8j316m0xataq.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其他框架包括 &lt;a href=&#34;https://spring.io/projects/spring-integration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Integration&lt;/a&gt;，甚至还有 WSO2 中一个有趣的新编程语言 &lt;a href=&#34;https://ballerina.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ballerina&lt;/a&gt; 。请注意，重用现有的模式和构造是非常好的，特别是当这些模式相对于您选择的语言来说成熟时，但是这些模式都不需要您使用框架。&lt;/p&gt;
&lt;h1 id=&#34;智能端点和dumb管道&#34;&gt;智能端点和dumb管道&lt;/h1&gt;
&lt;p&gt;关于微服务，我有一个朋友提出了一个问题，关于微服务的“智能端点和dumb pipe”这句话很吸引人，但很简单，“让基础设施智能化”是个前提：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/006tNbRwly1fuivligg5sj30g50cygmn.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;管道仍然是dumb的；我们不是通过使用服务网格将应用程序的正确性和安全性的应用程序逻辑强制加入基础设施中。我们只是使它更可靠，优化运维方面，并简化应用程序必须实现的内容（不必为此负责）。如果你不认同或者有其他想法，请随时在 Twitter 上留言或联系 &lt;a href=&#34;https://twitter.com/christianposta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@christianposta&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;如果您想了解更多关于 Istio 的信息，请查看 &lt;a href=&#34;http://istio.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://istio.io&lt;/a&gt; 或者&lt;a href=&#34;http://blog.christianposta.com/our-book-has-been-released-introducing-istio-service-mesh-for-microservices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我写的关于 Istio 的书&lt;/a&gt; 。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
