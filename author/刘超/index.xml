<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刘超 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/%E5%88%98%E8%B6%85/</link>
      <atom:link href="https://cloudnativecn.com/author/%E5%88%98%E8%B6%85/index.xml" rel="self" type="application/rss+xml" />
    <description>刘超</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Sat, 30 Jun 2018 13:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/author/%E5%88%98%E8%B6%85/avatar_hu_993d1b6c8f0963be.jpg</url>
      <title>刘超</title>
      <link>https://cloudnativecn.com/author/%E5%88%98%E8%B6%85/</link>
    </image>
    
    <item>
      <title>Service Mesh Meetup #1 杭州站</title>
      <link>https://cloudnativecn.com/event/service-mesh-meetup-01/</link>
      <pubDate>Sat, 30 Jun 2018 13:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/event/service-mesh-meetup-01/</guid>
      <description>&lt;h2 id=&#34;讲师分享&#34;&gt;讲师分享&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV19h411p7jn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生社区 meetup 第七期深圳站开场致辞 - 宋净超&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1WQ4y1z7zQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 IAST 构建高效的 DevSecOps 流程 - 董志勇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1hf4y1E7KJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生场景下的开发和调试 - 汪晟杰，黄金浩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1LL411476c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 在腾讯游戏云原生平台应用 - 田甜&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1TQ4y1C7xx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 KubeVela 构建混合云应用管理平台 - 邓洪超&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>深入解读 Service Mesh 背后的技术细节</title>
      <link>https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/</link>
      <pubDate>Wed, 23 May 2018 16:09:57 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/</guid>
      <description>&lt;p&gt;在 Kubernetes 称为容器编排的标准之后，Service Mesh 开始火了起来，但是很多文章讲概念的多，讲技术细节的少，所以专门写一篇文章，来解析 Service Mesh 背后的技术细节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、Service Mesh 是 Kubernetes 支撑微服务能力拼图的最后一块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在上一篇文章&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI1NzYzODk4OQ==&amp;amp;mid=2247484871&amp;amp;idx=1&amp;amp;sn=4c40df039911e7ef7d355c1435271eb0&amp;amp;chksm=ea1512e5dd629bf368bae145c6c42ad89f260c529d0eb006779768c6f124e0318b653d2d1821&amp;amp;scene=21#wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么 kubernetes 天然适合微服务&lt;/a&gt;中我们提到，Kubernetes 是一个奇葩所在，他的组件复杂，概念复杂，在没有实施微服务之前，你可能会觉得为什么 Kubernetes 要设计的这么复杂，但是一旦你要实施微服务，你会发现 Kubernetes 中的所有概念，都是有用的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-微服务设计&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;微服务设计&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlc9gw4y0j30u00bm122_hu_ff86f6844e59d6ac.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlc9gw4y0j30u00bm122_hu_19d1f8b86603a422.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlc9gw4y0j30u00bm122_hu_b72b9515807e6d97.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frlc9gw4y0j30u00bm122_hu_ff86f6844e59d6ac.webp&#34;
               width=&#34;760&#34;
               height=&#34;294&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      微服务设计
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在我们微服务设计的十个要点中，我们会发现 Kubernetes 都能够有相应的组件和概念，提供相应的支持。&lt;/p&gt;
&lt;p&gt;其中最后的一块拼图就是服务发现，与熔断限流降级。&lt;/p&gt;
&lt;p&gt;众所周知，Kubernetes 的服务发现是通过 Service 来实现的，服务之间的转发是通过 kube-proxy 下发 iptables 规则来实现的，这个只能实现最基本的服务发现和转发能力，不能满足高并发应用下的高级的服务特性，比较 SpringCloud 和 Dubbo 有一定的差距，于是 Service Mesh 诞生了，他期望讲熔断，限流，降级等特性，从应用层，下沉到基础设施层去实现，从而使得 Kubernetes 和容器全面接管微服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二、以 Istio 为例讲述 Service Mesh 中的技术关键点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle3moclsj30u00gmn2n_hu_ab3fcd388e2322de.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle3moclsj30u00gmn2n_hu_188733752e270797.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle3moclsj30u00gmn2n_hu_e8d0f985e68c7c3f.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle3moclsj30u00gmn2n_hu_ab3fcd388e2322de.webp&#34;
               width=&#34;760&#34;
               height=&#34;421&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;就如 SDN 一样，Service Mesh 将服务请求的转发分为控制面和数据面，因而分析他，也是从数据面先分析转发的能力，然后再分析控制面如何下发命令。今天这篇文章重点讲述两个组件 Envoy 和 Pilot&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一切从 Envoy 开始&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们首先来看，如果没有融入 Service Mesh，Envoy 本身能够做什么事情呢？&lt;/p&gt;
&lt;p&gt;Envoy 是一个高性能的 C++写的 proxy 转发器，那 Envoy 如何转发请求呢？需要定一些规则，然后按照这些规则进行转发。&lt;/p&gt;
&lt;p&gt;规则可以是静态的，放在配置文件中的，启动的时候加载，要想重新加载，一般需要重新启动，但是 Envoy 支持热加载和热重启，一定程度上缓解了这个问题。&lt;/p&gt;
&lt;p&gt;当然最好的方式是规则设置为动态的，放在统一的地方维护，这个统一的地方在 Envoy 眼中看来称为 Discovery Service，过一段时间去这里拿一下配置，就修改了转发策略。&lt;/p&gt;
&lt;p&gt;无论是静态的，还是动态的，在配置里面往往会配置四个东西。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle43cmthj30py0gignh_hu_3bba45451ae9250a.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle43cmthj30py0gignh_hu_1cc24f5de4cd59cb.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle43cmthj30py0gignh_hu_7704be3c5fa1c15c.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle43cmthj30py0gignh_hu_3bba45451ae9250a.webp&#34;
               width=&#34;760&#34;
               height=&#34;483&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一是 listener，也即 envoy 既然是 proxy，专门做转发，就得监听一个端口，接入请求，然后才能够根据策略转发，这个监听的端口称为 listener&lt;/p&gt;
&lt;p&gt;二是 endpoint，是目标的 ip 地址和端口，这个是 proxy 最终将请求转发到的地方。&lt;/p&gt;
&lt;p&gt;三是 cluster，一个 cluster 是具有完全相同行为的多个 endpoint，也即如果有三个容器在运行，就会有三个 IP 和端口，但是部署的是完全相同的三个服务，他们组成一个 Cluster，从 cluster 到 endpoint 的过程称为负载均衡，可以轮询等。&lt;/p&gt;
&lt;p&gt;四是 route，有时候多个 cluster 具有类似的功能，但是是不同的版本号，可以通过 route 规则，选择将请求路由到某一个版本号，也即某一个 cluster。&lt;/p&gt;
&lt;p&gt;这四个的静态配置的例子如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle4hlg1wj30u00kewn6_hu_7b52862c70fac411.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle4hlg1wj30u00kewn6_hu_8bd6cb3f9067aad6.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle4hlg1wj30u00kewn6_hu_b817272fa4668793.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle4hlg1wj30u00kewn6_hu_7b52862c70fac411.webp&#34;
               width=&#34;760&#34;
               height=&#34;517&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如图所示，listener 被配置为监听本地 127.0.0.1 的 10000 接口，route 配置为某个 url 的前缀转发到哪个 cluster，cluster 里面配置负载均衡策略，hosts 里面是所有的 endpoint。&lt;/p&gt;
&lt;p&gt;如果你想简单的将 envoy 使用起来，不用什么 service mesh，一个进程，加上这个配置文件，就可以了，就能够转发请求了。&lt;/p&gt;
&lt;p&gt;对于动态配置，也应该配置发现中心，也即 Discovery Service，对于上述四种配置，各对应相应的 DS，所以有 LDS, RDS, CDS, EDS。&lt;/p&gt;
&lt;p&gt;动态配置的例子如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle4uy7ghj30u00onaie_hu_768ef3aaa7c686fd.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle4uy7ghj30u00onaie_hu_c445227d669f5a9d.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle4uy7ghj30u00onaie_hu_836f517483ef7adf.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle4uy7ghj30u00onaie_hu_768ef3aaa7c686fd.webp&#34;
               width=&#34;760&#34;
               height=&#34;624&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;控制面 Pilot 的工作模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据面 envoy 可以通过加装静态配置文件的方式运行，而动态信息，需要从 Discovery Service 去拿。&lt;/p&gt;
&lt;p&gt;Discovery Service 就是部署在控制面的，在 istio 中，是 Pilot。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5drdsxj30u00l944h_hu_5d384c5453ac650c.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5drdsxj30u00l944h_hu_82db7b7ba82c6698.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5drdsxj30u00l944h_hu_d3dbf748c97c62e6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle5drdsxj30u00l944h_hu_5d384c5453ac650c.webp&#34;
               width=&#34;760&#34;
               height=&#34;538&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如图为 Pilot 的架构，最下面一层是 envoy 的 API，就是提供 Discovery Service 的 API，这个 API 的规则由 envoy 定，但不是 Pilot 调用 Envoy，而是 Envoy 去主动调用 Pilot 的这个 API。&lt;/p&gt;
&lt;p&gt;Pilot 最上面一层称为 Platform Adapter，这一层是干什么的呢？这一层不是 Kubernetes, Mesos 调用 Pilot，而是 Pilot 通过调用 Kubernetes 来发现服务之间的关系。&lt;/p&gt;
&lt;p&gt;这是理解 Istio 比较绕的一个点。也即 pilot 使用 Kubernetes 的 Service，仅仅使用它的服务发现功能，而不使用它的转发功能，pilot 通过在 kubernetes 里面注册一个 controller 来监听事件，从而获取 Service 和 Kubernetes 的 Endpoint 以及 Pod 的关系，但是在转发层面，就不会再使用 kube-proxy 根据 service 下发的 iptables 规则进行转发了，而是将这些映射关系转换成为 pilot 自己的转发模型，下发到 envoy 进行转发，envoy 不会使用 kube-proxy 的那些 iptables 规则。这样就把控制面和数据面彻底分离开来，服务之间的相互关系是管理面的事情，不要和真正的转发绑定在一起，而是绕到 pilot 后方。&lt;/p&gt;
&lt;p&gt;Pilot 另外一个对外的接口是 Rules API，这是给管理员的接口，管理员通过这个接口设定一些规则，这些规则往往是应用于 Routes, Clusters, Endpoints 的，而都有哪些 Clusters 和 Endpoints，是由 Platform Adapter 这面通过服务发现得到的。&lt;/p&gt;
&lt;p&gt;自动发现的这些 Clusters 和 Endpoints，外加管理员设置的规则，形成了 Pilot 的数据模型，其实就是他自己定义的一系列数据结构，然后通过 envoy API 暴露出去，等待 envoy 去拉取这些规则。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5pyxirj30t60tqgsg_hu_e754de6c8ccbd37d.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5pyxirj30t60tqgsg_hu_113da5031269f7d2.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5pyxirj30t60tqgsg_hu_bb1211a053d63b8e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle5pyxirj30t60tqgsg_hu_e754de6c8ccbd37d.webp&#34;
               width=&#34;746&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;常见的一种人工规则是 Routes，通过服务发现，Pilot 可以从 Kubernetes 那里知道 Service B 有两个版本，一般是两个 Deployment，属于同一个 Service，管理员通过调用 Pilot 的 Rules API，来设置两个版本之间的 Route 规则，一个占 99% 的流量，一个占 1% 的流量，这两方面信息形成 Pilot 的数据结构模型，然后通过 Envoy API 下发，Envoy 就会根据这个规则设置转发策略了。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5xv31mj30u00ladlv_hu_b289c491b8598be.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5xv31mj30u00ladlv_hu_20040224e35f4df8.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle5xv31mj30u00ladlv_hu_b613688a6cc4bd35.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle5xv31mj30u00ladlv_hu_b289c491b8598be.webp&#34;
               width=&#34;760&#34;
               height=&#34;539&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;另一个常用的场景就是负载均衡，Pilot 通过 Kubernetes 的 Service 发现 Service B 包含一个 Deployment，但是有三个副本，于是通过 Envoy API 下发规则，使得 Envoy 在这三个副本之间进行负载均衡，而非通过 Kubernetes 本身 Service 的负载均衡机制。&lt;/p&gt;
&lt;p&gt;三、以 Istio 为例解析 Service Mesh 的技术细节&lt;/p&gt;
&lt;p&gt;了解了 Service Mesh 的大概原理，接下来我们通过一个例子来解析其中的技术细节。&lt;/p&gt;
&lt;p&gt;凡是试验过 Istio 的同学都应该尝试过下面这个 BookInfo 的例子，不很复杂，但是麻雀虽小五脏俱全。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle6640jlj30u00kgn3e_hu_7e01a083000d3386.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle6640jlj30u00kgn3e_hu_8c3d14678cd5fc98.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle6640jlj30u00kgn3e_hu_9be4edf84d7cd1ab.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle6640jlj30u00kgn3e_hu_7e01a083000d3386.webp&#34;
               width=&#34;760&#34;
               height=&#34;518&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这个例子中，我们重点关注 ProductPage 这个服务，对 Reviews 服务的调用，这里涉及到路由策略和负载均衡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Productpage 就是个 Python 程序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;productpage 是一个简单的用 python 写的提供 restful API 的程序。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle6n0fjej30u00p2tn6_hu_33e5f9b4108bbde3.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle6n0fjej30u00p2tn6_hu_3a5ebc2ea8724077.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle6n0fjej30u00p2tn6_hu_c41e8d1341415d98.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle6n0fjej30u00p2tn6_hu_33e5f9b4108bbde3.webp&#34;
               width=&#34;760&#34;
               height=&#34;635&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在里面定义了很多的 route，来接收 API 请求，并做相应的操作。&lt;/p&gt;
&lt;p&gt;在需要请求其他服务，例如 reviews, ratings 的时候，则需要向后方发起 restful 调用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle78bzolj30j10lnwhz_hu_6fdba83e89122fc7.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle78bzolj30j10lnwhz_hu_f9657320f1dd9408.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle78bzolj30j10lnwhz_hu_4e3356b77f6bb6b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle78bzolj30j10lnwhz_hu_6fdba83e89122fc7.webp&#34;
               width=&#34;668&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从代码可以看出，productpage 对于后端的调用，都是通过域名来的。&lt;/p&gt;
&lt;p&gt;对于 productpage 这个程序来讲，他觉得很简单，通过这个域名就可以调用了，既不需要通过服务发现系统获取这个域名，也不需要关心转发，更意识不到自己是部署在 kubernetes 上的，是否用了 service mesh，所以服务之间的通信完全交给了基础设施层。&lt;/p&gt;
&lt;p&gt;通过 Kubernetes 编排 productpage&lt;/p&gt;
&lt;p&gt;有了 productpage 程序，接下来就是将他部署到 kubernetes 上，这里没有什么特殊的，用的就是 kubernetes 默认的编排文件。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7huccpj30u00hk452_hu_52a50b30fb275010.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7huccpj30u00hk452_hu_6ccc3871629bed10.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7huccpj30u00hk452_hu_c2b9a36836bd40a7.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle7huccpj30u00hk452_hu_52a50b30fb275010.webp&#34;
               width=&#34;760&#34;
               height=&#34;445&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;首先定义了一个 Deployment，使用 bookinfo 的容器镜像，然后定义一个 Service，用于这个 Deployment 的服务发现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过 Kubernetes 编排 reviews&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7ojet2j30u00ftdkz_hu_39e4f5bccb48f0f6.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7ojet2j30u00ftdkz_hu_3fc5e9b1b508aaba.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7ojet2j30u00ftdkz_hu_f89a0fb58de8a385.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle7ojet2j30u00ftdkz_hu_39e4f5bccb48f0f6.webp&#34;
               width=&#34;760&#34;
               height=&#34;401&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这个稍微有些复杂，定义了三个 Deployment，但是版本号分别为 V1, V2, V3，但是 label 都是 app: reviews。&lt;/p&gt;
&lt;p&gt;最后定义了一个 Service，对应的 label 是 app: reviews，作为这三个 Deployment 的服务发现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;istioctl 对 productpage 进行定制化之一：嵌入 proxy_init 作为 InitContainer&lt;/strong&gt;到目前为止，一切正常，接下来就是见证奇迹的时刻，也即 istio 有个工具 istioctl 可以对于 yaml 文件进行定制化&lt;/p&gt;
&lt;p&gt;定制化的第一项就是添加了一个 initContainer，这种类型的 container 可以做一些初始化的工作后，成功退出，kubernetes 不会保持他长期运行。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7tzrk3j30u00kijw8_hu_48ecb23b476be3d.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7tzrk3j30u00kijw8_hu_fb410a310e402872.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7tzrk3j30u00kijw8_hu_2a1fe0faafffbc70.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle7tzrk3j30u00kijw8_hu_48ecb23b476be3d.webp&#34;
               width=&#34;760&#34;
               height=&#34;519&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这个 InitContainer 里面做什么事情呢？&lt;/p&gt;
&lt;p&gt;我们登录进去发现，在这个 InitContainer 里面运行了一个 shell 脚本。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7xxsqtj30u00bdgsi_hu_112a084183f8c03d.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7xxsqtj30u00bdgsi_hu_fd2abeca3cf417ea.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle7xxsqtj30u00bdgsi_hu_edc3296f87df9e08.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle7xxsqtj30u00bdgsi_hu_112a084183f8c03d.webp&#34;
               width=&#34;760&#34;
               height=&#34;288&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;就是这个 shell 脚本在容器里面写入了大量的 iptables 规则。&lt;/p&gt;
&lt;p&gt;首先定义的一条规则是 ISTIO_REDIRECT 转发链，这条链不分三七二十一，都将网络包转发给 envoy 的 15000 端口。&lt;/p&gt;
&lt;p&gt;但是一开始这条链没有被挂到 iptables 默认的几条链中，所以不起作用。&lt;/p&gt;
&lt;p&gt;接下来就是在 PREROUTING 规则中，使用这个转发链，从而进入容器的所有流量，都被先转发到 envoy 的 15000 端口。&lt;/p&gt;
&lt;p&gt;envoy 作为一个代理，已经被配置好了，将请求转发给 productpage 程序。&lt;/p&gt;
&lt;p&gt;productpage 程序接受到请求，会转向调用外部的 reviews 或者 ratings，从上面的分析我们知道，productpage 只是做普通的域名调用。&lt;/p&gt;
&lt;p&gt;当 productpage 往后端进行调用的时候，就碰到了 output 链，这个链会使用转发链，将所有出容器的请求都转发到 envoy 的 15000 端口。&lt;/p&gt;
&lt;p&gt;这样无论是入口的流量，还是出口的流量，全部用 envoy 做成了汉堡包。&lt;/p&gt;
&lt;p&gt;envoy 根据服务发现的配置，知道 reviews 或者 ratings 如何访问，于是做最终的对外调用。&lt;/p&gt;
&lt;p&gt;这个时候 iptables 规则会对从 envoy 出去的流量做一个特殊处理，允许他发出去，不再使用上面的 output 规则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;istioctl 对 productpage 进行定制化之二：嵌入 proxy 容器作为 sidecar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;istioctl 做的第二项定制化是，嵌入 proxy 容器作为 sidecar。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle8uebg9j30hr12448p_hu_5aa305ef32f1d828.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle8uebg9j30hr12448p_hu_12fce532c60c30cb.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle8uebg9j30hr12448p_hu_f8ef7c3d40cda7cf.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle8uebg9j30hr12448p_hu_5aa305ef32f1d828.webp&#34;
               width=&#34;354&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这个似乎看起来更加复杂，但是进入容器我们可以看到，启动了两个进程。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/006tNc79gy1ft3hlljbllj30u00bn41y_hu_306fa2a8771b0702.webp 400w,
               /blog/deepin-service-mesh-tech-details/006tNc79gy1ft3hlljbllj30u00bn41y_hu_d430520eaf18f95d.webp 760w,
               /blog/deepin-service-mesh-tech-details/006tNc79gy1ft3hlljbllj30u00bn41y_hu_2ce80dd0c8640a5a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/006tNc79gy1ft3hlljbllj30u00bn41y_hu_306fa2a8771b0702.webp&#34;
               width=&#34;760&#34;
               height=&#34;295&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一个是我们熟悉的 envoy，他有一个配置文件是/etc/istio/proxy/envoy-rev0.json&lt;/p&gt;
&lt;p&gt;我们再前面讲述 envoy 的时候说过，有了配置文件，envoy 就能够转发了，我们先来看看配置文件里面都有啥。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/006tNc79gy1ft3hluiu2xj30u00gcmzx_hu_233f59ce73da511e.webp 400w,
               /blog/deepin-service-mesh-tech-details/006tNc79gy1ft3hluiu2xj30u00gcmzx_hu_953251ddaee9871d.webp 760w,
               /blog/deepin-service-mesh-tech-details/006tNc79gy1ft3hluiu2xj30u00gcmzx_hu_4c3c9949c1542317.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/006tNc79gy1ft3hluiu2xj30u00gcmzx_hu_233f59ce73da511e.webp&#34;
               width=&#34;760&#34;
               height=&#34;413&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这里面配置了 envoy 的管理端口，等一下我们会通过这个端口查看 envoy 被 pilot 下发了哪些转发策略。&lt;/p&gt;
&lt;p&gt;然后就是动态资源，也即从各种 discovery service 去拿转发策略。&lt;/p&gt;
&lt;p&gt;还有就是静态资源，也即静态配置的，需要重启才能加载的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9ch3yzj30u00gcte2_hu_b713c18fa13b2784.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9ch3yzj30u00gcte2_hu_b513916767b39ab.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9ch3yzj30u00gcte2_hu_1dc1fbf224582eca.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle9ch3yzj30u00gcte2_hu_b713c18fa13b2784.webp&#34;
               width=&#34;760&#34;
               height=&#34;413&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这就是 pilot-agent 的作用，他是 envoy 的一个简单的管理器，因为有些静态资源，如果 TLS 的证书，envoy 还不支持动态下发，因而需要重新静态配置，然后 pilot-agent 负责将 envoy 进行热重启加载。&lt;/p&gt;
&lt;p&gt;好在 envoy 有良好的热重启机制，重启的时候，会先启动一个备用进程，将转发的统计数据通过 shared memory 在两个进程间共享。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;深入解析 pilot 的工作机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9ka5fnj30u00hytid_hu_9d18d25ba0bf951a.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9ka5fnj30u00hytid_hu_a97c96252a2a3564.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9ka5fnj30u00hytid_hu_f34e813825ef89b6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle9ka5fnj30u00hytid_hu_9d18d25ba0bf951a.webp&#34;
               width=&#34;760&#34;
               height=&#34;454&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Pilot 的工作机制展开后如图所示。&lt;/p&gt;
&lt;p&gt;istio config 是管理员通过管理接口下发的转发规则。&lt;/p&gt;
&lt;p&gt;Service Discovery 模块对于 Kubernetes 来讲，就是创建了一个 controller 来监听 Service 创建和删除的事件，当 service 有变化时，会通知 pilot，pilot 会根据变化更新下发给 envoy 的规则。&lt;/p&gt;
&lt;p&gt;pilot 将管理员输入的转发策略配置和服务发现的当前状态，变成 pilot 自己的数据结构模型，然后暴露成 envoy 的 api，由于是 envoy 来调用，因而要实现一个服务端，这里有 lds, rds, cds, eds。&lt;/p&gt;
&lt;p&gt;接下来我们看，在 pilot 上配置 route 之后会发生什么？&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9rqoj3j30qr0k1n0f_hu_f8e63a9e9b32cbba.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9rqoj3j30qr0k1n0f_hu_a660e7c59bf8ac2e.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frle9rqoj3j30qr0k1n0f_hu_f22cb537005c2dcc.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frle9rqoj3j30qr0k1n0f_hu_f8e63a9e9b32cbba.webp&#34;
               width=&#34;760&#34;
               height=&#34;569&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如图，我们将所有的流量都发给版本 1。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlea2rgpqj30u00gv7it_hu_6a43fbcb3fb8331c.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlea2rgpqj30u00gv7it_hu_c8127945ba149bea.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlea2rgpqj30u00gv7it_hu_600f80a113c7089d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frlea2rgpqj30u00gv7it_hu_6a43fbcb3fb8331c.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们查看 envoy 的管理端口，可以看到只配置了 reviews 的 v1。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frleac3yuwj30u00fmadw_hu_7ac5cf1167fa205e.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frleac3yuwj30u00fmadw_hu_7759526ae7281fae.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frleac3yuwj30u00fmadw_hu_9cbf88bcb42b14a9.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frleac3yuwj30u00fmadw_hu_7ac5cf1167fa205e.webp&#34;
               width=&#34;760&#34;
               height=&#34;395&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当我们修改路由为 v1 和 v3 比例是五十比五十。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlealzahyj30u00mdqpx_hu_fdd3ca2e0d8e5dfb.webp 400w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlealzahyj30u00mdqpx_hu_5bebba4ff1975d9d.webp 760w,
               /blog/deepin-service-mesh-tech-details/00704eQkgy1frlealzahyj30u00mdqpx_hu_824ed51e8dc355d0.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/deepin-service-mesh-tech-details/00704eQkgy1frlealzahyj30u00mdqpx_hu_fdd3ca2e0d8e5dfb.webp&#34;
               width=&#34;760&#34;
               height=&#34;566&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;可以看到 envoy 的管理端口，路由有了两个版本的配置，也对应后端的两个 ip 地址。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
