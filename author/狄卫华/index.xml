<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>狄卫华 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/%E7%8B%84%E5%8D%AB%E5%8D%8E/</link>
      <atom:link href="https://cloudnativecn.com/author/%E7%8B%84%E5%8D%AB%E5%8D%8E/index.xml" rel="self" type="application/rss+xml" />
    <description>狄卫华</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Sun, 09 Aug 2020 14:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/author/%E7%8B%84%E5%8D%AB%E5%8D%8E/avatar_hu5104334185933768982.jpg</url>
      <title>狄卫华</title>
      <link>https://cloudnativecn.com/author/%E7%8B%84%E5%8D%AB%E5%8D%8E/</link>
    </image>
    
    <item>
      <title>eBPF 技术简介</title>
      <link>https://cloudnativecn.com/blog/bpf-intro/</link>
      <pubDate>Sun, 09 Aug 2020 14:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/bpf-intro/</guid>
      <description>&lt;p&gt;















&lt;figure  id=&#34;figure-linux-年内和观测技术-bpf&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Linux 年内和观测技术 BPF&#34; srcset=&#34;
               /blog/bpf-intro/linux-bpf-book_hu1345859831218585850.webp 400w,
               /blog/bpf-intro/linux-bpf-book_hu2996865226085998791.webp 760w,
               /blog/bpf-intro/linux-bpf-book_hu17714897226042649699.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/linux-bpf-book_hu1345859831218585850.webp&#34;
               width=&#34;601&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Linux 年内和观测技术 BPF
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;由范老师和我一起翻译的图书《Linux 内核观测技术 BPF》已经在 JD 上有现货，欢迎感兴趣 BPF 技术的同学选购。链接地址 &lt;a href=&#34;https://item.jd.com/72110825905.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://item.jd.com/72110825905.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“eBPF 是我见过的 Linux 中最神奇的技术，没有之一，已成为 Linux 内核中顶级子模块，从 tcpdump 中用作网络包过滤的经典 cbpf，到成为通用 Linux 内核技术的 eBPF，已经完成华丽蜕变，为应用与神奇的内核打造了一座桥梁，在系统跟踪、观测、性能调优、安全和网络等领域发挥重要的角色。为 Service Mesh 打造了具备 API 感知和安全高效的容器网络方案 Cilium，其底层正是基于 eBPF 技术”&lt;/p&gt;
&lt;h2 id=&#34;1-bpf&#34;&gt;1. BPF&lt;/h2&gt;
&lt;p&gt;BPF（Berkeley Packet Filter），中文翻译为伯克利包过滤器，是类 Unix 系统上数据链路层的一种原始接口，提供原始链路层封包的收发。1992 年，Steven McCanne 和 Van Jacobson 写了一篇名为《BSD 数据包过滤：一种新的用户级包捕获架构》的论文。在文中，作者描述了他们如何在 Unix 内核实现网络数据包过滤，这种新的技术比当时最先进的数据包过滤技术快 20 倍。BPF 在数据包过滤上引入了两大革新：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个新的虚拟机 (VM) 设计，可以有效地工作在基于寄存器结构的 CPU 之上；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用程序使用缓存只复制与过滤数据包相关的数据，不会复制数据包的所有信息。这样可以最大程度地减少 BPF 处理的数据；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这些巨大的改进，所有的 Unix 系统都选择采用 BPF 作为网络数据包过滤技术，直到今天，许多 Unix 内核的派生系统中（包括 Linux 内核）仍使用该实现。&lt;/p&gt;
&lt;p&gt;tcpdump 的底层采用 BPF 作为底层包过滤技术，我们可以在命令后面增加”-d“来查看 tcpdump 过滤条件的底层汇编指令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tcpdump -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;ip and tcp port 8080&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;000&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ldh      &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;12&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;001&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; jeq      &lt;span class=&#34;c1&#34;&gt;#0x800           jt 2	jf 12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;002&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ldb      &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;23&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;003&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; jeq      &lt;span class=&#34;c1&#34;&gt;#0x6             jt 4	jf 12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;004&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ldh      &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;20&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;005&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; jset     &lt;span class=&#34;c1&#34;&gt;#0x1fff          jt 12	jf 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;006&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ldxb     4*&lt;span class=&#34;o&#34;&gt;([&lt;/span&gt;14&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;0xf&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;007&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ldh      &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;x + 14&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;008&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; jeq      &lt;span class=&#34;c1&#34;&gt;#0x1f90          jt 11	jf 9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;009&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ldh      &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;x + 16&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;010&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; jeq      &lt;span class=&#34;c1&#34;&gt;#0x1f90          jt 11	jf 12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;011&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ret      &lt;span class=&#34;c1&#34;&gt;#262144&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;012&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ret      &lt;span class=&#34;c1&#34;&gt;#0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;图 1-1  tcpdump 底层汇编指令&lt;/p&gt;
&lt;p&gt;BPF 工作在内核层，BPF 的架构图如下 [来自于 bpf-usenix93]：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/bpf-intro/tcpdump-bpf_hu3245480783839183849.webp 400w,
               /blog/bpf-intro/tcpdump-bpf_hu7791154659944021547.webp 760w,
               /blog/bpf-intro/tcpdump-bpf_hu13861664749006727326.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/tcpdump-bpf_hu3245480783839183849.webp&#34;
               width=&#34;760&#34;
               height=&#34;625&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图 1-2 tcpdump 运行架构&lt;/p&gt;
&lt;h2 id=&#34;2-ebpf&#34;&gt;2. eBPF&lt;/h2&gt;
&lt;h3 id=&#34;21-ebpf-介绍&#34;&gt;2.1 eBPF 介绍&lt;/h3&gt;
&lt;p&gt;2014 年初，Alexei Starovoitov 实现了 eBPF（extended Berkeley Packet Filter）。经过重新设计，eBPF 演进为一个通用执行引擎，可基于此开发性能分析工具、软件定义网络等诸多场景。eBPF 最早出现在 3.18 内核中，此后原来的 BPF 就被称为经典 BPF，缩写 cBPF（classic BPF），cBPF 现在已经基本废弃。现在，Linux 内核只运行 eBPF，内核会将加载的 cBPF 字节码透明地转换成 eBPF 再执行。&lt;/p&gt;
&lt;p&gt;eBPF 新的设计针对现代硬件进行了优化，所以 eBPF 生成的指令集比旧的 BPF 解释器生成的机器码执行得更快。扩展版本也增加了虚拟机中的寄存器数量，将原有的 2 个 32 位寄存器增加到 10 个 64 位寄存器。由于寄存器数量和宽度的增加，开发人员可以使用函数参数自由交换更多的信息，编写更复杂的程序。总之，这些改进使 eBPF 版本的速度比原来的 BPF 提高了 4 倍。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;cBPF&lt;/th&gt;
          &lt;th&gt;eBPF&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;内核版本&lt;/td&gt;
          &lt;td&gt;Linux 2.1.75（1997 年）&lt;/td&gt;
          &lt;td&gt;Linux 3.18（2014 年）[4.x for kprobe/uprobe/tracepoint/perf-event]&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;寄存器数目&lt;/td&gt;
          &lt;td&gt;2 个：A, X&lt;/td&gt;
          &lt;td&gt;10 个：R0–R9, 另外 R10 是一个只读的帧指针&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;寄存器宽度&lt;/td&gt;
          &lt;td&gt;32 位&lt;/td&gt;
          &lt;td&gt;64 位&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;存储&lt;/td&gt;
          &lt;td&gt;16 个内存位：M[0–15]&lt;/td&gt;
          &lt;td&gt;512 字节堆栈，无限制大小的“map”存储&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;限制的内核调用&lt;/td&gt;
          &lt;td&gt;非常有限，仅限于 JIT 特定&lt;/td&gt;
          &lt;td&gt;有限，通过 bpf_call 指令调用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;目标事件&lt;/td&gt;
          &lt;td&gt;数据包、seccomp-BPF&lt;/td&gt;
          &lt;td&gt;数据包、内核函数、用户函数、跟踪点 PMCs 等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表格 1-1 cBPF 与 eBPF 对比&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;eBPF 在 Linux 3.18 版本以后引入，并不代表只能在内核 3.18+ 版本上运行，低版本的内核升级到最新也可以使用 eBPF 能力，只是可能部分功能受限，比如我就是在 Linux 发行版本 CentOS Linux release 7.7.1908 内核版本 3.10.0-1062.9.1.el7.x86_64 上运行 eBPF 在生产环境上搜集和排查网络问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;eBPF 实现的最初目标是优化处理网络过滤器的内部 BPF 指令集。当时，BPF 程序仍然限于内核空间使用，只有少数用户空间程序可以编写内核处理的 BPF 过滤器，例如：tcpdump 和 seccomp。时至今日，这些程序仍基于旧的 BPF 解释器生成字节码，但内核中会将这些指令转换为高性能的表示。&lt;/p&gt;
&lt;p&gt;2014 年 6 月，&lt;strong&gt;eBPF 扩展到用户空间，这也成为了 BPF 技术的转折点&lt;/strong&gt;。正如 Alexei 在提交补丁的注释中写到：“这个补丁展示了 eBPF 的潜力”。当前，eBPF 不再局限于网络栈，已经成为内核顶级的子系统。eBPF 程序架构强调安全性和稳定性，看上去更像内核模块，但与内核模块不同，eBPF 程序不需要重新编译内核，并且可以确保 eBPF 程序运行完成，而不会造成系统的崩溃。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/bpf-intro/bpf-basic-arch_hu1034991276882877293.webp 400w,
               /blog/bpf-intro/bpf-basic-arch_hu10163064369229915955.webp 760w,
               /blog/bpf-intro/bpf-basic-arch_hu13358102659370132877.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/bpf-basic-arch_hu1034991276882877293.webp&#34;
               width=&#34;600&#34;
               height=&#34;347&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图 2-1 BPF 架构图&lt;/p&gt;
&lt;p&gt;简述概括，eBPF 是一套通用执行引擎，提供了可基于系统或程序事件高效安全执行特定代码的通用能力，通用能力的使用者不再局限于内核开发者；eBPF 可由执行字节码指令、存储对象和 Helper 帮助函数组成，字节码指令在内核执行前必须通过 BPF 验证器 Verfier 的验证，同时在启用 BPF JIT 模式的内核中，会直接将字节码指令转成内核可执行的本地指令运行。&lt;/p&gt;
&lt;p&gt;同时，eBPF 也逐渐在观测（跟踪、性能调优等）、安全和网络等领域发挥重要的角色。Facebook、NetFlix、CloudFlare 等知名互联网公司内部广泛采用基于 eBPF 技术的各种程序用于性能分析、排查问题、负载均衡、防范 DDoS 攻击，据相关信息显示在 Facebook 的机器上内置一系列 eBPF 的相关工具。&lt;/p&gt;
&lt;p&gt;相对于系统的性能分析和观测，eBPF 技术在网络技术中的表现，更是让人眼前一亮，BPF 技术与 XDP（eXpress Data Path）和 TC（Traffic Control）组合可以实现功能更加强大的网络功能，更可为 SDN 软件定义网络提供基础支撑。XDP 只作用与网络包的 Ingress 层面，BPF 钩子位于&lt;strong&gt;网络驱动中尽可能早的位置&lt;/strong&gt;，&lt;strong&gt;无需进行原始包的复制&lt;/strong&gt;就可以实现最佳的数据包处理性能，挂载的 BPF 程序是运行过滤的理想选择，可用于丢弃恶意或非预期的流量、进行 DDOS 攻击保护等场景；而 TC Ingress 比 XDP 技术处于更高层次的位置，BPF 程序在 L3 层之前运行，可以访问到与数据包相关的大部分元数据，是本地节点处理的理想的地方，可以用于流量监控或者 L3/L4 的端点策略控制，同时配合 TC egress 则可实现对于容器环境下更高维度和级别的网络结构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/bpf-intro/packet-processor-xdp_hu13105770296118227938.webp 400w,
               /blog/bpf-intro/packet-processor-xdp_hu9510877955084914643.webp 760w,
               /blog/bpf-intro/packet-processor-xdp_hu15057804861685259243.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/packet-processor-xdp_hu13105770296118227938.webp&#34;
               width=&#34;704&#34;
               height=&#34;460&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图 2-2 XDP 技术架构&lt;/p&gt;
&lt;p&gt;eBPF 相关的知名的开源项目包括但不限于以下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facebook 高性能 4 层负载均衡器 &lt;a href=&#34;https://github.com/facebookincubator/katran&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Katran&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cilium.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt; 为下一代微服务 ServiceMesh 打造了具备 API 感知和安全高效的容器网络方案；底层主要使用 XDP 和 TC 等相关技术；&lt;/li&gt;
&lt;li&gt;IO Visor 项目开源的  &lt;a href=&#34;https://github.com/iovisor/bcc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BCC&lt;/a&gt;、 &lt;a href=&#34;https://github.com/iovisor/bpftrace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BPFTrace&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/iovisor/kubectl-trace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubectl-Trace&lt;/a&gt;：  &lt;a href=&#34;https://github.com/iovisor/bcc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BCC&lt;/a&gt; 提供了更高阶的抽象，可以让用户采用 Python、C++ 和 Lua 等高级语言快速开发 BPF 程序；&lt;a href=&#34;https://github.com/iovisor/bpftrace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BPFTrace&lt;/a&gt; 采用类似于 awk 语言快速编写 eBPF 程序；&lt;a href=&#34;https://github.com/iovisor/kubectl-trace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubectl-Trace&lt;/a&gt; 则提供了在 kubernetes 集群中使用 BPF 程序调试的方便操作；&lt;/li&gt;
&lt;li&gt;CloudFlare 公司开源的 &lt;a href=&#34;https://github.com/cloudflare/ebpf_exporter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF Exporter&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/cloudflare/bpftools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bpf-tools&lt;/a&gt;：&lt;a href=&#34;https://github.com/cloudflare/ebpf_exporter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF Exporter&lt;/a&gt; 将 eBPF 技术与监控 Prometheus 紧密结合起来；&lt;a href=&#34;https://github.com/cloudflare/bpftools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bpf-tools&lt;/a&gt; 可用于网络问题分析和排查；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;越来越多的基于 eBPF 的项目如雨后脆笋一样开始蓬勃发展，而且逐步在社区中异军突起，成为一道风景线。比如 IO Visor 项目的 BCC 工具，为性能分析和观察提供了更加丰富的工具集：&lt;a href=&#34;https://github.com/iovisor/bcc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;图片来源&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/bpf-intro/bcc-tools_hu13056574447683662980.webp 400w,
               /blog/bpf-intro/bcc-tools_hu2575332494131324660.webp 760w,
               /blog/bpf-intro/bcc-tools_hu13164584527076404599.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/bcc-tools_hu13056574447683662980.webp&#34;
               width=&#34;760&#34;
               height=&#34;446&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图 2-3 Linux bcc/BPF 观测工具&lt;/p&gt;
&lt;p&gt;同时，IO Visor 的 &lt;a href=&#34;https://github.com/iovisor/bpf-docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bpf-docs&lt;/a&gt; 包含了日常的文档，可以用于学习。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于 eBPF 还在快速发展期，内核中的功能也日趋增强，一般推荐基于 Linux 4.4+ (4.9 以上会更好) 内核的来使用 eBPF。部分 Linux Event 和 BPF 版本支持见下图：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/bpf-intro/linux_kernel_event_bpf_hu15393669297225012390.webp 400w,
               /blog/bpf-intro/linux_kernel_event_bpf_hu12568608785783326152.webp 760w,
               /blog/bpf-intro/linux_kernel_event_bpf_hu10948574007752354296.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/linux_kernel_event_bpf_hu15393669297225012390.webp&#34;
               width=&#34;760&#34;
               height=&#34;422&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图 2-4 Linux 事件和 BPF 版本支持&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;22-ebpf-架构观测&#34;&gt;2.2 eBPF 架构（观测）&lt;/h3&gt;
&lt;p&gt;基于 Linux 系统的观测工具中，eBPF 有着得天独厚的优势，高效、生产安全且内核中内置，特别的可以在内核中完成数据分析聚合比如直方图，与将数据发送到用户空间分析聚合相比，能够节省大量的数据复制传递带来的 CPU 消耗。&lt;/p&gt;
&lt;p&gt;eBPF 整体结构图如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/bpf-intro/linux_ebpf_internals_hu13209230679471379465.webp 400w,
               /blog/bpf-intro/linux_ebpf_internals_hu17257707130225629637.webp 760w,
               /blog/bpf-intro/linux_ebpf_internals_hu12844226931448414877.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/linux_ebpf_internals_hu13209230679471379465.webp&#34;
               width=&#34;760&#34;
               height=&#34;279&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图 2-5 eBPF 观测架构&lt;/p&gt;
&lt;p&gt;eBPF 分为用户空间程序和内核程序两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户空间程序负责加载 BPF 字节码至内核，如需要也会负责读取内核回传的统计信息或者事件详情；&lt;/li&gt;
&lt;li&gt;内核中的 BPF 字节码负责在内核中执行特定事件，如需要也会将执行的结果通过 maps 或者 perf-event 事件发送至用户空间；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中用户空间程序与内核 BPF 字节码程序可以使用 map 结构实现双向通信，这为内核中运行的 BPF 字节码程序提供了更加灵活的控制。&lt;/p&gt;
&lt;p&gt;用户空间程序与内核中的 BPF 字节码交互的流程主要如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们可以使用 LLVM 或者 GCC 工具将编写的 BPF 代码程序编译成 BPF 字节码；&lt;/li&gt;
&lt;li&gt;然后使用加载程序 Loader 将字节码加载至内核；内核使用验证器（verfier）组件保证执行字节码的安全性，以避免对内核造成灾难，在确认字节码安全后将其加载对应的内核模块执行；BPF 观测技术相关的程序程序类型可能是 kprobes/uprobes/tracepoint/perf_events 中的一个或多个，其中：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;kprobes&lt;/strong&gt;：实现内核中动态跟踪。kprobes 可以跟踪到 Linux 内核中的导出函数入口或返回点，但是不是稳定 ABI 接口，可能会因为内核版本变化导致，导致跟踪失效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uprobes&lt;/strong&gt;：用户级别的动态跟踪。与 kprobes 类似，只是跟踪用户程序中的函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tracepoints&lt;/strong&gt;：内核中静态跟踪。tracepoints 是内核开发人员维护的跟踪点，能够提供稳定的 ABI 接口，但是由于是研发人员维护，数量和场景可能受限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perf_events&lt;/strong&gt;：定时采样和 PMC。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内核中运行的 BPF 字节码程序可以使用两种方式将测量数据回传至用户空间
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maps&lt;/strong&gt; 方式可用于将内核中实现的统计摘要信息（比如测量延迟、堆栈信息）等回传至用户空间；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perf-event&lt;/strong&gt; 用于将内核采集的事件实时发送至用户空间，用户空间程序实时读取分析；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如无特殊说明，本文中所说的 BPF 都是泛指 BPF 技术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;23-ebpf-的限制&#34;&gt;2.3 eBPF 的限制&lt;/h3&gt;
&lt;p&gt;eBPF 技术虽然强大，但是为了保证内核的处理安全和及时响应，内核中的 eBPF 技术也给予了诸多限制，当然随着技术的发展和演进，限制也在逐步放宽或者提供了对应的解决方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;eBPF 程序不能调用任意的内核参数，只限于内核模块中列出的 BPF Helper 函数，函数支持列表也随着内核的演进在不断增加。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eBPF 程序不允许包含无法到达的指令，防止加载无效代码，延迟程序的终止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eBPF 程序中循环次数限制且必须在有限时间内结束，这主要是用来防止在 kprobes 中插入任意的循环，导致锁住整个系统；解决办法包括展开循环，并为需要循环的常见用途添加辅助函数。Linux 5.3 在 BPF 中包含了对有界循环的支持，它有一个可验证的运行时间上限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eBPF 堆栈大小被限制在 MAX_BPF_STACK，截止到内核 Linux 5.8 版本，被设置为 512；参见 &lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.8/include/linux/filter.h&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;include/linux/filter.h&lt;/a&gt;，这个限制特别是在栈上存储多个字符串缓冲区时：一个 char[256]缓冲区会消耗这个栈的一半。目前没有计划增加这个限制，解决方法是改用 bpf 映射存储，它实际上是无限的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* BPF program can access up to 512 bytes of stack space. */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define MAX_BPF_STACK	512
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eBPF 字节码大小最初被限制为 4096 条指令，截止到内核 Linux 5.8 版本，当前已将放宽至 100 万指令（BPF_COMPLEXITY_LIMIT_INSNS），参见：&lt;a href=&#34;https://github.com/torvalds/linux/blob/v5.8/include/linux/bpf.h&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;include/linux/bpf.h&lt;/a&gt;，对于无权限的 BPF 程序，仍然保留 4096 条限制 ( BPF_MAXINSNS )；新版本的 eBPF 也支持了多个 eBPF 程序级联调用，虽然传递信息存在某些限制，但是可以通过组合实现更加强大的功能。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define BPF_COMPLEXITY_LIMIT_INSNS      1000000 &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/* yes. 1M insns */&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24-ebpf-与内核模块对比&#34;&gt;2.4 eBPF 与内核模块对比&lt;/h3&gt;
&lt;p&gt;在 Linux 观测方面，eBPF 总是会拿来与 kernel 模块方式进行对比，eBPF 在安全性、入门门槛上比内核模块都有优势，这两点在观测场景下对于用户来讲尤其重要。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;维度&lt;/th&gt;
          &lt;th&gt;Linux 内核模块&lt;/th&gt;
          &lt;th&gt;eBPF&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;kprobes/tracepoints&lt;/td&gt;
          &lt;td&gt;支持&lt;/td&gt;
          &lt;td&gt;支持&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;安全性&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;可能引入安全漏洞或导致内核 Panic&lt;/td&gt;
          &lt;td&gt;通过验证器进行检查，可以保障内核安全&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;内核函数&lt;/td&gt;
          &lt;td&gt;可以调用内核函数&lt;/td&gt;
          &lt;td&gt;只能通过 BPF Helper 函数调用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;编译性&lt;/td&gt;
          &lt;td&gt;需要编译内核&lt;/td&gt;
          &lt;td&gt;不需要编译内核，引入头文件即可&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;运行&lt;/td&gt;
          &lt;td&gt;基于相同内核运行&lt;/td&gt;
          &lt;td&gt;基于稳定 ABI 的 BPF 程序可以编译一次，各处运行&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;与应用程序交互&lt;/td&gt;
          &lt;td&gt;打印日志或文件&lt;/td&gt;
          &lt;td&gt;通过 perf_event 或 map 结构&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;数据结构丰富性&lt;/td&gt;
          &lt;td&gt;一般&lt;/td&gt;
          &lt;td&gt;丰富&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;入门门槛&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
          &lt;td&gt;低&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;升级&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;需要卸载和加载，可能导致处理流程中断&lt;/td&gt;
          &lt;td&gt;原子替换升级，不会造成处理流程中断&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;内核内置&lt;/td&gt;
          &lt;td&gt;视情况而定&lt;/td&gt;
          &lt;td&gt;内核内置支持&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表格 2-1 eBPF 与 Linux 内核模块方式对比&lt;/p&gt;
&lt;h2 id=&#34;3-应用案例&#34;&gt;3. 应用案例&lt;/h2&gt;
&lt;p&gt;大名鼎鼎的性能分析大师 Brendan Gregg 等编写了诸多的 BCC 或 BPFTrace 的工具集可以拿来直接使用，完全可以满足我们日常问题分析和排查。&lt;/p&gt;
&lt;p&gt;BCC 在 CentOS 7 系统中可以通过 yum 快速安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# yum install bcc -y&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Resolving Dependencies
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--&amp;gt; Running transaction check
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---&amp;gt; Package bcc.x86_64 0:0.8.0-1.el7 will be updated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--&amp;gt; Processing Dependency: bcc&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x86-64&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 0.8.0-1.el7 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; package: python-bcc-0.8.0-1.el7.x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---&amp;gt; Package bcc.x86_64 0:0.10.0-1.el7 will be an update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--&amp;gt; Processing Dependency: bcc-tools &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 0.10.0-1.el7 &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; package: bcc-0.10.0-1.el7.x86_64
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--&amp;gt; Running transaction check
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---&amp;gt; Package bcc-tools.x86_64 0:0.8.0-1.el7 will be updated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---&amp;gt; Package bcc-tools.x86_64 0:0.10.0-1.el7 will be an update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---&amp;gt; Package python-bcc.x86_64 0:0.8.0-1.el7 will be updated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---&amp;gt; Package python-bcc.x86_64 0:0.10.0-1.el7 will be an update
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--&amp;gt; Finished Dependency Resolution
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他系统的安装方式参见：&lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/INSTALL.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;INSTALL.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BCC 中每一个工具都有一个对应的使用样例，比如 &lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/tools/execsnoop.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;execsnoop.py&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/iovisor/bcc/blob/master/tools/execsnoop_example.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;execsnoop_example.txt&lt;/a&gt;，在使用样例中有详细的使用说明，而且 BCC 中的工具使用的帮助文档格式基本类似，上手非常方便。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BCC 的程序一般情况下都需要 root 用户来运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;31-linux-性能分析-60-秒bpf-版本&#34;&gt;3.1 Linux 性能分析 60 秒（BPF 版本）&lt;/h3&gt;
&lt;p&gt;英文原文 &lt;a href=&#34;https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux Performance Analysis in 60,000 Milliseconds&lt;/a&gt;，&lt;a href=&#34;http://www.brendangregg.com/blog/2015-12-03/linux-perf-60s-video.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;视频地址&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;uptime
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;dmesg &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tail
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vmstat &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mpstat -P ALL &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pidstat &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iostat -xz &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;free -m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sar -n DEV &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sar -n TCP,ETCP &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;top
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;60s 系列 BPF 版本如下：&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&#34;ebpf_60s.png&#34; alt=&#34;ebpf_60s&#34; style=&#34;zoom:50%;&#34; /&gt;
&lt;p&gt;图 3-1 60s 排查之 BPF 版本&lt;/p&gt;
&lt;p&gt;对于在系统中运行的 &amp;ldquo;闪电侠&amp;rdquo; 程序，运行周期非常短，但是可能会带来系统的抖动延时，我们采用 &lt;code&gt;top&lt;/code&gt; 命令查看一般情况下难以发现，我们可以使用 BCC 提供的工具 &lt;code&gt;execsnoop &lt;/code&gt; 来进行排查：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Trace file opens with process and filename: opensnoop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#/usr/share/bcc/tools/execsnoop &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PCOMM            PID    PPID   RET ARGS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sleep            &lt;span class=&#34;m&#34;&gt;3334&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;21029&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; /usr/bin/sleep &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sleep            &lt;span class=&#34;m&#34;&gt;3339&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;21029&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; /usr/bin/sleep &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conntrack        &lt;span class=&#34;m&#34;&gt;3341&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;1112&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; /usr/sbin/conntrack --stats
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conntrack        &lt;span class=&#34;m&#34;&gt;3342&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;1112&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; /usr/sbin/conntrack --count
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sleep            &lt;span class=&#34;m&#34;&gt;3344&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;21029&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; /usr/bin/sleep &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables-save    &lt;span class=&#34;m&#34;&gt;3347&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;9211&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; /sbin/iptables-save -t filter
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables-save    &lt;span class=&#34;m&#34;&gt;3348&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;9211&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; /sbin/iptables-save -t nat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;32-slab-dentry-过大导致的网络抖动排查&#34;&gt;3.2 &lt;strong&gt;slab dentry 过大导致的网络抖动排查&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;现象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络 ping 的延时间歇性有规律出现抖动&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题排查&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采用 &lt;code&gt;execsnoop&lt;/code&gt;  分析发现，某个运行命令&lt;code&gt;cat /proc/slabinfo&lt;/code&gt;的运行时间间隔与抖动的频率完全吻合，顺着这个的线索定位，我们发现云厂商提供的 Java 版本的云监控会定期调用 &lt;code&gt;cat /proc/slabinfo&lt;/code&gt; 来获取内核缓存的信息；&lt;/p&gt;
&lt;p&gt;通过命令 &lt;code&gt;slabtop&lt;/code&gt; 发现系统中的 &lt;code&gt;dentry&lt;/code&gt; 项的内存占用非常大，系统内存 128G，&lt;code&gt;dentry&lt;/code&gt; 占用 70G 以上，所以问题很快就定位到是系统在打开文件方面可能有相关问题；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根因分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们使用对于打开文件跟踪的 BCC 工具 &lt;code&gt;opensnoop&lt;/code&gt; 很快就定位到是某个程序频繁创建和删除临时文件，最终定位为某个 PHP 程序设置的调用方式存在问题，导致每次请求会创建和删除临时文件；代码中将 http 调用中的 &lt;code&gt;contentType&lt;/code&gt; 设置成了 &lt;code&gt;Http::CONTENT_TYPE_UPLOAD&lt;/code&gt;，导致每次请求都会生成临时文件，修改成 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 问题解决。&lt;/p&gt;
&lt;p&gt;问题的原理可参考 &lt;a href=&#34;https://developer.aliyun.com/article/697773&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;记一次对网络抖动经典案例的分析&lt;/a&gt; 和 &lt;a href=&#34;https://yq.aliyun.com/articles/131870&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;systemtap 脚本分析系统中 dentry SLAB 占用过高问题&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;33-生成火焰图&#34;&gt;3.3 生成火焰图&lt;/h3&gt;
&lt;p&gt;火焰图是帮助我们对系统耗时进行可视化的图表，能够对程序中那些代码经常被执行给出一个清晰的展现。Brendan Gregg 是火焰图的创建者，他在 &lt;a href=&#34;https://github.com/brendangregg/FlameGraph&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt; 上维护了一组脚本可以轻松生成需要的可视化格式数据。使用 BCC 中的工具 &lt;code&gt;profile&lt;/code&gt; 可很方面地收集道 CPU 路径的数据，基于数据采用工具可以轻松地生成火焰图，查找到程序的性能瓶颈。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 &lt;code&gt;profile&lt;/code&gt; 搜集火焰图的程序没有任何限制和改造&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;profile&lt;/code&gt; 工具可以让我们轻松对于系统或者程序的 CPU 性能路径进行可视化分析：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/share/bcc/tools/profile -h
usage: profile [-h] [-p PID | -L TID] [-U | -K] [-F FREQUENCY | -c COUNT] [-d]
               [-a] [-I] [-f] [--stack-storage-size STACK_STORAGE_SIZE]
               [-C CPU]
               [duration]

Profile CPU stack traces at a timed interval

positional arguments:
  duration              duration of trace, in seconds

optional arguments:
  -h, --help            show this help message and exit
  -p PID, --pid PID     profile process with this PID only
  -L TID, --tid TID     profile thread with this TID only
  -U, --user-stacks-only
                        show stacks from user space only (no kernel space
                        stacks)
  -K, --kernel-stacks-only
                        show stacks from kernel space only (no user space
                        stacks)
  -F FREQUENCY, --frequency FREQUENCY
                        sample frequency, Hertz
  -c COUNT, --count COUNT
                        sample period, number of events
  -d, --delimited       insert delimiter between kernel/user stacks
  -a, --annotations     add _[k] annotations to kernel frames
  -I, --include-idle    include CPU idle stacks
  -f, --folded          output folded format, one line per stack (for flame
                        graphs)
  --stack-storage-size STACK_STORAGE_SIZE
                        the number of unique stack traces that can be stored
                        and displayed (default 16384)
  -C CPU, --cpu CPU     cpu number to run profile on

examples:
    ./profile             # profile stack traces at 49 Hertz until Ctrl-C
    ./profile -F 99       # profile stack traces at 99 Hertz
    ./profile -c 1000000  # profile stack traces every 1 in a million events
    ./profile 5           # profile at 49 Hertz for 5 seconds only
    ./profile -f 5        # output in folded format for flame graphs
    ./profile -p 185      # only profile process with PID 185
    ./profile -L 185      # only profile thread with TID 185
    ./profile -U          # only show user space stacks (no kernel)
    ./profile -K          # only show kernel space stacks (no user)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;profile&lt;/code&gt;  配合 &lt;code&gt;FlameGraph&lt;/code&gt; 可以轻松帮我们绘制出 CPU 使用的火焰图。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ profile -af &lt;span class=&#34;m&#34;&gt;30&lt;/span&gt; &amp;gt; out.stacks01
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone https://github.com/brendangregg/FlameGraph
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; FlameGraph
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./flamegraph.pl --color&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;java &amp;lt; ../out.stacks01 &amp;gt; out.svg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/bpf-intro/flame_hu10034733143225351039.webp 400w,
               /blog/bpf-intro/flame_hu11565770450507282768.webp 760w,
               /blog/bpf-intro/flame_hu6439374634586898143.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/flame_hu10034733143225351039.webp&#34;
               width=&#34;760&#34;
               height=&#34;553&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

图 3-2 火焰图&lt;/p&gt;
&lt;h3 id=&#34;33-排查网络调用来源&#34;&gt;3.3 排查网络调用来源&lt;/h3&gt;
&lt;p&gt;在生产场景下，会有些特定场景需要抓取连接到外网特定地址的程序，这时候我们可以采用 BCC 工具集中的 &lt;code&gt;tcplife&lt;/code&gt; 来定位。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/usr/share/bcc/tools/tcplife -h
usage: tcplife [-h] [-T] [-t] [-w] [-s] [-p PID] [-L LOCALPORT]
               [-D REMOTEPORT]

Trace the lifespan of TCP sessions and summarize

optional arguments:
  -h, --help            show this help message and exit
  -T, --time            include time column on output (HH:MM:SS)
  -t, --timestamp       include timestamp on output (seconds)
  -w, --wide            wide column output (fits IPv6 addresses)
  -s, --csv             comma separated values output
  -p PID, --pid PID     trace this PID only
  -L LOCALPORT, --localport LOCALPORT
                        comma-separated list of local ports to trace.
  -D REMOTEPORT, --remoteport REMOTEPORT
                        comma-separated list of remote ports to trace.

examples:
    ./tcplife           # trace all TCP connect()s
    ./tcplife -t        # include time column (HH:MM:SS)
    ./tcplife -w        # wider colums (fit IPv6)
    ./tcplife -stT      # csv output, with times &amp;amp; timestamps
    ./tcplife -p 181    # only trace PID 181
    ./tcplife -L 80     # only trace local port 80
    ./tcplife -L 80,81  # only trace local ports 80 and 81
    ./tcplife -D 80     # only trace remote port 80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过在机器上使用 &lt;code&gt;tcplife&lt;/code&gt; 来获取的网络连接信息，我们可以看到包括了 PID、COMM、本地 IP 地址、本地端口、远程 IP 地址和远程端口，通过这些信息非常方便排查到连接到特定 IP 地址的程序，尤其是连接的过程非常短暂，通过 &lt;code&gt;netstat&lt;/code&gt; 等其他工具不容易排查的场景。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /usr/share/bcc/tools/tcplife&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PID   COMM             IP LADDR                      LPORT RADDR                  RPORT  TX_KB  RX_KB MS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1776&lt;/span&gt;  blackbox_export  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  169.254.20.10              &lt;span class=&#34;m&#34;&gt;35830&lt;/span&gt; 169.254.20.10          &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt;       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 0.36
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;27150&lt;/span&gt; node-cache       &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  169.254.20.10              &lt;span class=&#34;m&#34;&gt;53&lt;/span&gt;    169.254.20.10          &lt;span class=&#34;m&#34;&gt;35830&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 0.36
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;12511&lt;/span&gt; coredns          &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  127.0.0.1                  &lt;span class=&#34;m&#34;&gt;58492&lt;/span&gt; 127.0.0.1              &lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; 0.32
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们想知道更加详细的 TCP 状态情况，那么 &lt;code&gt;tcptracer&lt;/code&gt; 可展示更加详细的 TCP 状态，其中 C 代表 Connect X 表示关闭，A 代表 Accept。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /usr/share/bcc/tools/tcptracer &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tracing TCP established connections. Ctrl-C to end.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;T  PID    COMM             IP SADDR            DADDR            SPORT  DPORT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C  &lt;span class=&#34;m&#34;&gt;21066&lt;/span&gt;  ilogtail         &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  10.81.128.12     100.100.49.128   &lt;span class=&#34;m&#34;&gt;40906&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X  &lt;span class=&#34;m&#34;&gt;21066&lt;/span&gt;  ilogtail         &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  10.81.128.12     100.100.49.128   &lt;span class=&#34;m&#34;&gt;40906&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C  &lt;span class=&#34;m&#34;&gt;21066&lt;/span&gt;  ilogtail         &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  10.81.128.12     100.100.49.128   &lt;span class=&#34;m&#34;&gt;40908&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X  &lt;span class=&#34;m&#34;&gt;21066&lt;/span&gt;  ilogtail         &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  10.81.128.12     100.100.49.128   &lt;span class=&#34;m&#34;&gt;40908&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;tcpstates&lt;/code&gt; 还能够展示出来 TCP 状态机的流转情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /usr/share/bcc/tools/tcpstates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SKADDR           C-PID C-COMM     LADDR           LPORT RADDR           RPORT OLDSTATE    -&amp;gt; NEWSTATE    MS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ffff9fd7e8192000 &lt;span class=&#34;m&#34;&gt;22384&lt;/span&gt; curl       100.66.100.185  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     52.33.159.26    &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;    CLOSE       -&amp;gt; SYN_SENT    0.000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ffff9fd7e8192000 &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     swapper/5  100.66.100.185  &lt;span class=&#34;m&#34;&gt;63446&lt;/span&gt; 52.33.159.26    &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;    SYN_SENT    -&amp;gt; ESTABLISHED 1.373
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ffff9fd7e8192000 &lt;span class=&#34;m&#34;&gt;22384&lt;/span&gt; curl       100.66.100.185  &lt;span class=&#34;m&#34;&gt;63446&lt;/span&gt; 52.33.159.26    &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;    ESTABLISHED -&amp;gt; FIN_WAIT1   176.042
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样，我们也可以实时获取到 TCP 连接超时或者重连的网络连接；也可以通过抓取 UDP 包相关的连接信息，用于定位诸如 DNS 请求超时或者 DNS 请求的发起进程。&lt;/p&gt;
&lt;h2 id=&#34;4-编写-bpf-程序&#34;&gt;4. 编写 BPF 程序&lt;/h2&gt;
&lt;p&gt;对于大多数开发者而言，更多的是基于 BPF 技术之上编写解决我们日常遇到的各种问题，当前 BCC 和 BPFTrace 两个项目在观测和性能分析上已经有了诸多灵活且功能强大的工具箱，完全可以满足我们日常使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iovisor/bcc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BCC&lt;/a&gt; 提供了更高阶的抽象，可以让用户采用 Python、C++ 和 Lua 等高级语言快速开发 BPF 程序；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/iovisor/bpftrace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BPFTrace&lt;/a&gt; 采用类似于 awk 语言快速编写 eBPF 程序；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更早期的工具则是使用 C 语言来编写 BPF 程序，使用 LLVM clang 编译成 BPF 代码，这对于普通使用者上手有不少门槛当前仅限于对于 eBPF 技术更加深入的学习场景。&lt;/p&gt;
&lt;h3 id=&#34;41-bcc-版本-helloworld&#34;&gt;4.1 BCC 版本 HelloWorld&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/bpf-intro/bcc-internals_hu8492544628316200253.webp 400w,
               /blog/bpf-intro/bcc-internals_hu11558723003937719069.webp 760w,
               /blog/bpf-intro/bcc-internals_hu1490062783330057511.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/bpf-intro/bcc-internals_hu8492544628316200253.webp&#34;
               width=&#34;760&#34;
               height=&#34;416&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图 4-1 BCC 整体架构&lt;/p&gt;
&lt;p&gt;使用 BCC 前端绑定语言 Python 编写的 Hello World 版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/usr/bin/python3

from bcc import BPF

# This may not work for 4.17 on x64, you need replace kprobe__sys_clone with kprobe____x64_sys_clone
prog = &amp;#34;&amp;#34;&amp;#34;
	int kprobe__sys_clone(void *ctx) {
		bpf_trace_printk(&amp;#34;Hello, World!\\n&amp;#34;);
		return 0;
	}
&amp;#34;&amp;#34;&amp;#34;

b = BPF(text=prog, debug=0x04)
b.trace_print()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行程序前需要安装过 bcc 相关工具包，当运行正常的时候我们发现每当 &lt;code&gt;sys_clone&lt;/code&gt; 系统调用时，运行的控制台上就会打印“Hello, World!”，在打印文字前面还包含了调用程序的进程名称，进程 ID 等信息；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果运行报错，可能是缺少头文件，一般安装 kernel-devel 包即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# python ./hello.py
         kubelet-8349  [006] d... 33637334.829981: : Hello, World!
         kubelet-8349  [006] d... 33637334.838594: : Hello, World!
         kubelet-8349  [006] d... 33637334.843788: : Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;43-bpftrace&#34;&gt;4.3 BPFTrace&lt;/h3&gt;
&lt;p&gt;BPFTrace 是基于 BPF 和 BCC 的开源项目，与 BCC 不同的是其提供了更高层次的抽象，可以使用类似 AWK 脚本语言来编写基于 BPF 的跟踪或者性能排查工具，更加易于入门和编写，该工具的主要灵感来自于 Solaris 的 D 语言。BPFTrace 更方便与编写单行的程序。BPFTrace 与 BCC 一样也是 IO Visor 组织下的项目，仓库参见 &lt;a href=&#34;https://github.com/iovisor/bpftrace&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bpftrace&lt;/a&gt;。更加深入的学习资料参见：&lt;a href=&#34;https://github.com/iovisor/bpftrace/blob/master/docs/reference_guide.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reference Guide&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/iovisor/bpftrace/blob/master/docs/tutorial_one_liners.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;One-Liner Tutorial&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;BPFTrace 使用 LLVM 将脚本编译成 BPF 二进制码，后续使用 BCC 与 Linux 内核进行交互。从功能层面上讲，BPFTrace 的定制性和灵活性不如 BCC，但是比 BCC 工具更加易于理解和使用，降低了 BPF 技术的使用门槛。&lt;/p&gt;
&lt;p&gt;使用样例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 统计进程调用 sys_enter 的次数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#bpftrace -e &amp;#39;tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Attaching &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; probe...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;^C
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;bpftrace&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;systemd&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;snmp-pass&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;96&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;sshd&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;125&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 统计内核中函数堆栈的次数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# bpftrace -e &amp;#39;profile:hz:99 { @[kstack] = count(); }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Attaching &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; probe...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;^C
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;filemap_map_pages+181
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;__handle_mm_fault+2905
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;handle_mm_fault+250
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;__do_page_fault+599
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;async_page_fault+69
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpuidle_enter_state+164
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;do_idle+390
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpu_startup_entry+111
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;start_secondary+423
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;secondary_startup_64+165
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;22122&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;43-c-语言原生方式&#34;&gt;4.3 C 语言原生方式&lt;/h3&gt;
&lt;p&gt;采用 LLVM Clang 的方式编译会涉及到内核编译环境搭建，而且还需要自己编译 Makefile 等操作，属于高级用户使用：&lt;/p&gt;
&lt;p&gt;bpf_program.c&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;linux/bpf.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define SEC(NAME) __attribute__((section(NAME), used))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bpf_trace_printk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmt_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                               &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BPF_FUNC_trace_printk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;SEC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;tracepoint/syscalls/sys_enter_execve&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bpf_prog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, BPF World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;bpf_trace_printk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_license&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SEC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;GPL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;loader.c&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;bpf_load.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;load_bpf_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bpf_program.o&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The kernel didn&amp;#39;t load the BPF program&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;read_trace_pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Makefile 文件（部分）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;build: &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BPFCODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.c&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BPFLOADER&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CLANG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -O2 -target bpf -c &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;BPFCODE:&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.c&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CCINCLUDE&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -o &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;BPFCODE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:=.o&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 clang 编译中的选型 &lt;code&gt;-target bpf&lt;/code&gt; 表明我们将代码编译成 bpf 的字节码。&lt;/p&gt;
&lt;p&gt;完整的程序参见：&lt;a href=&#34;https://github.com/DavadDi/linux-observability-with-bpf/tree/master/code/chapter-2/hello_world&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hello_world&lt;/a&gt;；更多的样例代码可以参见对应内核中 &lt;code&gt;kernel-src/samples/bpf/&lt;/code&gt; 下的样例代码。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后续会持续进行 BPF 相关的内容总结和分享，Github &lt;a href=&#34;https://github.com/DavadDi/bpf_study&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bpf_study&lt;/a&gt; 仓库，欢迎提交 PR 和 Star&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;5-参考资料&#34;&gt;5. 参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tcpdump.org/papers/bpf-usenix93.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The BSD Packet Filter: A New Architecture for User-level Packet Capture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arthurchiao.art/blog/cilium-bpf-xdp-reference-guide-zh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[译] Cilium：BPF 和 XDP 参考指南（2019） &lt;/a&gt;   &lt;a href=&#34;https://docs.cilium.io/en/v1.8/bpf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cillum BPF and XDP Reference Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cloudflare.com/zh/cloudflare-architecture-and-how-bpf-eats-the-world-zh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloudflare 架构以及 BPF 如何占据世界&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.luoow.com/dc_tw/106805603&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;關於 BPF 和 eBPF 的筆記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dive into BPF: a list of reading material&lt;/a&gt;  &lt;a href=&#34;https://blog.csdn.net/F8qG7f9YD02Pe/article/details/79815702&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/linux/l-lo-eBPF-history/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF 简史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=znBGt7oHJyQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=znBGt7oHJyQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infradead.org/~mchehab/kernel_docs/bpf/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BPF Documentation&lt;/a&gt;  &lt;a href=&#34;https://www.kernel.org/doc/html/latest/bpf/bpf_devel_QA.html#q-how-do-i-indicate-which-tree-bpf-vs-bpf-next-my-patch-should-be-applied-to&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HOWTO interact with BPF subsystem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infradead.org/~mchehab/kernel_docs/bpf/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 内核 BPF 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.brendangregg.com/ebpf.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux Extended BPF (eBPF) Tracing Tools&lt;/a&gt;  Brendan Gregg&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/3BQU9AYh1ScZ_1V17BJ4wg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;性能提升 40%: 腾讯 TKE 用 eBPF 绕过 conntrack 优化 K8s Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tonydeng.github.io/sdn-handbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SDN handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux BPF 帮助文档 &lt;a href=&#34;https://man7.org/linux/man-pages/man2/bpf.2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bpf(2)&lt;/a&gt;  &lt;a href=&#34;https://man7.org/linux/man-pages/man7/bpf-helpers.7.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bpf-helpers(7)&lt;/a&gt;  &lt;a href=&#34;https://man7.org/linux/man-pages/man8/tc-bpf.8.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tc-bpf(8)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
