<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diógenes Rettori | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/diogenes-rettori/</link>
      <atom:link href="https://cloudnativecn.com/author/diogenes-rettori/index.xml" rel="self" type="application/rss+xml" />
    <description>Diógenes Rettori</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 16 May 2019 12:20:44 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/author/diogenes-rettori/avatar_hu_993d1b6c8f0963be.jpg</url>
      <title>Diógenes Rettori</title>
      <link>https://cloudnativecn.com/author/diogenes-rettori/</link>
    </image>
    
    <item>
      <title>Solo.io 打造的 Gloo——Knative 中 Istio 的替代方案</title>
      <link>https://cloudnativecn.com/blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/</link>
      <pubDate>Thu, 16 May 2019 12:20:44 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://medium.com/solo-io/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-324753586f3a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;[编者按]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前有社区成员询问是不是想尝试 Knative 时，必须要安装 Istio 才行，今天就告诉大家一种 Istio 的替代方案，使用 Solo.io 公司研发的 Gloo 来替代 Istio 来使用 Knative。&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;在 Knative 中，Istio 的主要作用是作为一个 Ingress 技术。Gloo 现在加入 Istio 作为 Knative 的集成和支持 Ingress。有关快速演示 demo，请参阅文章末尾。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;简而言之，&lt;a href=&#34;https://github.com/knative/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative 的存在&lt;/a&gt;是为了定义在&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt;上构建和服务化工作负载的一套标准方法。Knative 的一个显著特性是它的 serverless 特性：它将工作负载的执行与事件关联起来，而只在此类事件发生时消耗计算能力（事件驱动）。&lt;/p&gt;
&lt;p&gt;Knative 是最初在谷歌创建，现在已与 Pivotal、Red Hat、SAP、IBM 等许多公司联合开发的开源协作技术。&lt;/p&gt;
&lt;h2 id=&#34;使用-knative-服务处理请求&#34;&gt;使用 Knative 服务处理请求&lt;/h2&gt;
&lt;p&gt;让我们简要了解一下 Knative 如何处理请求，以及它与“纯”Kubernetes 的比较。&lt;/p&gt;
&lt;p&gt;Kubernetes 上的&lt;em&gt;传统&lt;/em&gt;工作负载，比如 web 应用程序，需要一个运行的 Pod 和一个 Ingress，以允许流量从其他集群流入到当前集群。&lt;/p&gt;
&lt;p&gt;现在，通过 Knative 的视角，让我们考虑下面的示例：有如下一个场景，客户端希望从一个在 Knative 平台上注册但不一定立即运行的应用程序中检索天气预报信息。使用 Knative 术语，有一个服务可以创建必要的配置和路由，以便在调用天气预报应用程序时运行它。在 Knative 上下文中，应用程序包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knative/serving/blob/master/docs/spec/spec.md#service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative Service&lt;/a&gt;（不要与 Kubernetes Service 对象混淆）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knative/serving/blob/master/docs/spec/spec.md#route&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative Route&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knative/serving/blob/master/docs/spec/spec.md#configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个或多个&lt;a href=&#34;https://github.com/knative/serving/blob/master/docs/spec/spec.md#revision&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative Revision&lt;/a&gt;，运行时，Revision 会变成 Kubernetes Pod。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-1_hu_dc93f0a82ba45060.webp 400w,
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-1_hu_1bebaf5ec687cf05.webp 760w,
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-1_hu_92bb4c895b1fedbb.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-1_hu_dc93f0a82ba45060.webp&#34;
               width=&#34;624&#34;
               height=&#34;176&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;深入到流量管理部分，Knative service 有一个名为&lt;a href=&#34;https://github.com/knative/serving/tree/master/pkg/activator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Activator&lt;/a&gt;的组件，它负责报告某个工作负载需要运行相应数量的 pod 来处理请求。&lt;/p&gt;
&lt;p&gt;这种架构的美妙之处在于，如果负责运行应用程序的 Pod 没有运行，那么请求将被搁置，直到流量可以路由到一个或多个 pod 为止。这优化了资源利用率。&lt;/p&gt;
&lt;p&gt;如果您想知道，还有一些特性允许您预热应用程序，这样就不会阻塞任何请求。这使您能够对是否始终保持 Pod 运行做出明智的决策。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-2_hu_66abe16894f2b3cd.webp 400w,
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-2_hu_c6fd194b223bb40d.webp 760w,
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-2_hu_df8145aabbdae609.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-2_hu_66abe16894f2b3cd.webp&#34;
               width=&#34;624&#34;
               height=&#34;378&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如前所述，一旦有一个修订（一个或多个 Pod）来处理请求，流量就可以从 Ingress 网关流到您的修订。Knative Serving 将继续收到请求的通知，以便确定是否需要对服务于修订的 Pod 进行伸缩。这真的太棒了！&lt;/p&gt;
&lt;h2 id=&#34;istio-的必要性&#34;&gt;Istio 的必要性&lt;/h2&gt;
&lt;p&gt;请求可能需要路由到相同配置的不同版本 (请阅读工作负载规范)，特别是在同时运行同一应用程序的不同版本的情况下。为了做到这一点，Knative 需要一个可以执行以下功能的 Ingress 控制器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;流量分流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TLS 终止&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 Header 路由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;追加 Header&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solo.io 拥抱&lt;a href=&#34;https://istio.io/zh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;。我们已经投资构建了一个名为&lt;a href=&#34;https://github.com/solo-io/supergloo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SuperGloo&lt;/a&gt;的服务网格编排器和管理平台，这可能是开始使用 Istio 的最简单方法。就我个人而言，我也很喜欢 Istio。在红帽的时候，我参与了这个项目的&lt;a href=&#34;https://blog.openshift.com/red-hat-istio-launch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;正式启动&lt;/a&gt;，并&lt;a href=&#34;https://www.infoworld.com/article/3273547/the-rise-of-the-istio-service-mesh.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;写下&lt;/a&gt;了为什么 Istio 如此受欢迎。&lt;/p&gt;
&lt;p&gt;但如果我诚实地评价 Istio 在 Knative 上的角色，我的感觉是：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-3_hu_8ff934c29709d509.webp 400w,
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-3_hu_101cc73e90bc5d34.webp 760w,
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-3_hu_80da6d32ab93645d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-3_hu_8ff934c29709d509.webp&#34;
               width=&#34;624&#34;
               height=&#34;177&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Istio 提供了一组令人惊讶的特性，但是 Knative 只使用了其中的一些。作为参考，Istio 目前有 48 个 CRD（CustomResourceDefinition 对象），其中只有一个主要由 Knative（VirtualService）使用。&lt;/p&gt;
&lt;p&gt;现在，如果您的组织也愿意采用服务网格技术，并且 Istio 是您的选择，那么这种痛苦肯定会减少。为此，您必须熟悉或已经熟悉 Istio 的工作原理。现在对于许多用户来说，增加的复杂性可能不值得。&lt;/p&gt;
&lt;h2 id=&#34;gloo下一代通用-api-网关作为网关服务&#34;&gt;Gloo——下一代通用 API 网关，作为网关服务。&lt;/h2&gt;
&lt;p&gt;Gloo 是下一代 API 网关，它既满足 Knative 的需求，又不会带来成熟服务网格技术 (Istio 就是这种情况) 的不必要包袱。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-4_hu_ac6a5ff1ace29611.webp 400w,
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-4_hu_dec8f7697dc54ff5.webp 760w,
               /blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-4_hu_76b10b50c19fda0e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative/gloo-by-solo-io-is-the-first-alternative-to-istio-on-knative-4_hu_ac6a5ff1ace29611.webp&#34;
               width=&#34;317&#34;
               height=&#34;135&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gloo&lt;/a&gt;建立在 Envoy 之上，&lt;a href=&#34;https://knative.dev/docs/install/knative-with-gloo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;是 Knative 第一个官方的 Istio 替代品&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但这在现实中意味着什么呢？当我们决定对这个解决方案投入精力时，我们的主要目标之一就是解决方案的可持续性。当一个新版本出现时，一起工作的项目突然停止工作，这肯定会令人沮丧，我们的集成工作主要集中在三个方面：易用性、实现和持续集成。&lt;/p&gt;
&lt;h2 id=&#34;易用性&#34;&gt;易用性&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solo.io&lt;/a&gt;作为一家公司的一个关键任务是为了弥合先进的开源技术与使用这种技术的企业和用户之间的差距。在这种程度上，我们在&lt;a href=&#34;https://knative.dev/docs/install/knative-with-gloo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Gloo 时改进了 Knative 本身的安装&lt;/a&gt;。整个社区可以立即受益于一种更简单的实验和生产方式。&lt;/p&gt;
&lt;p&gt;流行的&lt;code&gt;glooctl&lt;/code&gt;命令现在包含一个 Knative 选项，该选项&lt;a href=&#34;https://gloo.solo.io/installation/#2c-install-the-gloo-knative-cluster-ingress-to-your-kubernetes-cluster-using-glooctl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;不仅安装 Gloo 网关本身而且还将安装 Knative&lt;/a&gt;（！！！）。在安装过程中，Knative 配置了&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gloo&lt;/a&gt;作为集群 Ingress 网关，它使用一个命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ glooctl install knative
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;虽然这是一个显而易见的问题，但我们创建了必要的控制和监视，以便&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gloo&lt;/a&gt;能够在 Istio Ingress 运行时在相同或更好的容量水平上运行和报告。大部分工作都是在 Gloo 上完成的。在技术层面，Gloo 得到了扩展，包括基于 Knative ClusterIngress CRD 读取和应用配置的能力。&lt;/p&gt;
&lt;h2 id=&#34;持续集成&#34;&gt;持续集成&lt;/h2&gt;
&lt;p&gt;我们在&lt;a href=&#34;https://github.com/knative/serving/pull/3087&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative&lt;/a&gt;的 CI 测试流水线中实现并引入了特定的 Gloo 测试，这意味着如果 Knative 中的一个更改破坏了与 Gloo 的集成，反之亦然，那么社区将得到通知并根据情况采取相应的行动。这为任何正在寻找 Knative 上的 Istio 的替代方案的人提供了可能，在撰写本文时，Knative 是唯一的替代方案。&lt;/p&gt;
&lt;h2 id=&#34;立刻行动吧&#34;&gt;立刻行动吧！&lt;/h2&gt;
&lt;p&gt;如果您能够访问 Kubernetes 集群，只需&lt;a href=&#34;https://github.com/solo-io/gloo/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载&lt;/a&gt;最适合您的操作系统的&lt;code&gt;glooctl&lt;/code&gt;版本，然后立即开始您的 Knative（和&lt;a href=&#34;https://gloo.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gloo&lt;/a&gt;）之旅。我们最近也增加了对 Windows 的支持。要获得更多帮助，请查看我们的 Knative 特定&lt;a href=&#34;https://gloo.solo.io/installation/#2c-install-the-gloo-knative-cluster-ingress-to-your-kubernetes-cluster-using-glooctl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt;并加入我们的&lt;a href=&#34;http://slack.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Gloo 可以做的不仅仅是基本的 Ingress 路由。Gloo 被设计为下一代 API 网关，能够理解功能级别的调用 (HTTP1、HTTP2、gRPC、REST/OpenAPISpec、SOAP、WebSockets、Lambda/Cloud 函数)，并能够帮助您从单一功能到微服务和 serverless 的演进。参加我们的&lt;a href=&#34;https://www.solo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络研讨会&lt;/a&gt;，我们将讨论如何渐进地、安全地发展您的应用程序架构，以利用新功能来满足您的业务需求，而不必对您的单体应用进行危险的更改。&lt;/p&gt;
&lt;h2 id=&#34;观看介绍视频&#34;&gt;观看介绍视频&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_e61MB2Afvs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=_e61MB2Afvs&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
