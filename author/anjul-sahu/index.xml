<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anjul Sahu | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/anjul-sahu/</link>
      <atom:link href="https://cloudnative.to/author/anjul-sahu/index.xml" rel="self" type="application/rss+xml" />
    <description>Anjul Sahu</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/anjul-sahu/avatar_hu3801682002625739492.jpg</url>
      <title>Anjul Sahu</title>
      <link>https://cloudnative.to/author/anjul-sahu/</link>
    </image>
    
    <item>
      <title>服务网格比较：Istio 与 Linkerd</title>
      <link>https://cloudnative.to/blog/service-mesh-comparison-istio-vs-linkerd/</link>
      <pubDate>Mon, 25 Jan 2021 21:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/service-mesh-comparison-istio-vs-linkerd/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://dzone.com/articles/service-mesh-comparison-istio-vs-linkerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Mesh Comparison: Istio vs Linkerd&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;根据 &lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2020/03/CNCF_Survey_Report.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt; 的&lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2020/03/CNCF_Survey_Report.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最新年度调查&lt;/a&gt;，很明显，很多人对在他们的项目中使用服务网格表现出了极大的兴趣，并且许多人已经在他们的生产中使用它们。将近 69％ 的人正在评估 Istio，64％ 的人正在研究 Linkerd。Linkerd 是市场上第一个服务网格，但是 Istio 的服务网格更受欢迎。这两个项目都是最前沿的，而且竞争非常激烈，因此选择哪一个是一个艰难的选择。在此博客文章中，我们将了解有关 Istio 和 Linkerd 的架构，其及组件的更多信息，并比较其特性以帮你做出明智的决定。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-comparison-istio-vs-linkerd/13816813-1596629136427_hu1237333417594804964.webp 400w,
               /blog/service-mesh-comparison-istio-vs-linkerd/13816813-1596629136427_hu7559854240558962042.webp 760w,
               /blog/service-mesh-comparison-istio-vs-linkerd/13816813-1596629136427_hu16095317518166807311.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/service-mesh-comparison-istio-vs-linkerd/13816813-1596629136427_hu1237333417594804964.webp&#34;
               width=&#34;760&#34;
               height=&#34;396&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;服务网格简介&#34;&gt;服务网格简介&lt;/h2&gt;
&lt;p&gt;在过去的几年中，微服务架构已经成为设计软件应用程序的流行风格。在这种架构中，我们将应用程序分解为可独立部署的服务。这些服务通常是轻量级的、多语言的，并且通常由各种职能团队进行管理。直到这些服务的数量变得庞大且难以管理之前，这种架构风格效果很好。突然之间，它们不再简单了。这在管理各个方面（例如安全性、网络流量控制和可观察性）带来了挑战。&lt;strong&gt;服务网格&lt;/strong&gt;可以帮助应对这些挑战。&lt;/p&gt;
&lt;p&gt;术语&lt;strong&gt;服务网格&lt;/strong&gt;用于描述组成此类应用程序的微服务网络及其之间的交互。随着服务数量和复杂性的增加，其扩展和管理变得越来越困难。服务通常提供服务发现、负载均衡、故障恢复、指标和监控。服务网格通常还具有更复杂的操作要求，例如 A/B 测试、金丝雀发布、限流、访问控制和端到端身份验证。服务网格为负载均衡、服务到服务的身份验证、监控等提供了一种创建服务网络的简单方法，同时对服务代码的更改很少或没有更改。&lt;/p&gt;
&lt;p&gt;让我们看一下 Istio 和 Linkerd 的架构。请注意，这两个项目都在快速演进，并且本文基于 Istio 1.6 版本和 Linkerd 2.7 版本。&lt;/p&gt;
&lt;h2 id=&#34;istio&#34;&gt;Istio&lt;/h2&gt;
&lt;p&gt;Istio 是一个提供了作为服务网格的整套解决方案的开源平台，提供了安全、连接和监控微服务的统一方法。它得到了 IBM、Google 和 Lyft 等行业领军者的支持。Istio 是最流行、最完善的解决方案之一，其高级特性适用于各种规模的企业。它是 Kubernetes 的一等公民，被设计成模块化、平台无关的系统。有关 Istio 的快速演示，请参考我们&lt;a href=&#34;https://www.infracloud.io/blogs/service-mesh-demo-istio-sockshop/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;以前的文章&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Istio 架构&#34;
           src=&#34;https://cloudnative.to/blog/service-mesh-comparison-istio-vs-linkerd/arch.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Istio 架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Istio 架构来源：&lt;a href=&#34;https://istio.io/latest/docs/concepts/what-is-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;组件&#34;&gt;组件&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt; 是由 Lyft 用 C++ 编写的高性能代理，它可以协调服务网格中所有服务的所有入站和出站流量。它作为 Sidecar 代理与服务一起部署。&lt;/p&gt;
&lt;p&gt;Envoy 提供以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态服务发现&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;TLS 终止&lt;/li&gt;
&lt;li&gt;HTTP/2 和 gRPC 代理&lt;/li&gt;
&lt;li&gt;断路器&lt;/li&gt;
&lt;li&gt;健康检查&lt;/li&gt;
&lt;li&gt;按百分比分配流量实现的分阶段发布&lt;/li&gt;
&lt;li&gt;故障注入&lt;/li&gt;
&lt;li&gt;丰富的指标&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在较新的 Istio 版本中，Sidecar 代理对 Mixer 的工作承担了额外的责任。在早期版本的 Istio（&amp;lt;1.6）中，使用 Mixer 从网格收集遥测信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pilot&lt;/strong&gt; 为 Sidecar 代理提供服务发现、流量管理功能和弹性。它将控制流量行为的高级路由规则转换为 Envoy 的特定配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Citadel&lt;/strong&gt; 通过内置的身份和凭证管理实现了强大的服务到服务和最终用户身份验证。它可以在网格中启用授权和零信任安全性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Galley&lt;/strong&gt; 是 Istio 配置验证、提取、处理和分发组件。&lt;/p&gt;
&lt;h3 id=&#34;核心功能&#34;&gt;核心功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流量管理&lt;/strong&gt; — 智能流量路由规则、流量控制和服务级别属性（如断路器、超时和重试）的管理。它使我们能够轻松设置 A/B测试、金丝雀发布和并按比例分配流量的分阶段发布。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt; — 在服务之间提供安全的通信通道，并管理大规模身份验证、授权和加密。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可观察性&lt;/strong&gt; — 强大的链路跟踪、监控和日志功能提供了深度洞察（deep insights）和可见性。它有助于有效地检测和解决问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Istio&lt;/strong&gt; 还具有一个附加组件基础结构服务，该服务支持对微服务的监控。Istio 与 Prometheus、Grafana、Jaeger 和服务网格仪表盘 Kiali 等应用程序集成。 &lt;/p&gt;
&lt;h2 id=&#34;linkerd&#34;&gt;Linkerd&lt;/h2&gt;
&lt;p&gt;Linkerd 是 Buoyant 为 Kubernetes 设计的开源超轻量级的服务网格。用 Rust 完全重写以使其超轻量级和高性能，它提供运行时调试、可观察性、可靠性和安全性，而无需在分布式应用中更改代码。&lt;/p&gt;
&lt;h3 id=&#34;架构-1&#34;&gt;架构&lt;/h3&gt;
&lt;p&gt;Linkerd 具有三个组件 — UI、数据平面和控制平面。它通过在每个服务实例旁边安装轻量级透明代理来工作。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-comparison-istio-vs-linkerd/control-plane_hu16547111429427721509.webp 400w,
               /blog/service-mesh-comparison-istio-vs-linkerd/control-plane_hu16178747038414845456.webp 760w,
               /blog/service-mesh-comparison-istio-vs-linkerd/control-plane_hu10781693257869653595.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/service-mesh-comparison-istio-vs-linkerd/control-plane_hu16547111429427721509.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;控制平面&#34;&gt;控制平面&lt;/h3&gt;
&lt;p&gt;Linkerd 的控制平面是一组提供了服务网格的核心功能的服务。它聚合了遥测数据、提供面向用户的 API，并为数据平面代理提供控制数据。以下是控制平面的组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;控制器&lt;/strong&gt; — 它包含一个公共 API 容器，该容器为 CLI 和仪表盘提供 API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标&lt;/strong&gt; — 数据平面中的每个代理都将访问此组件以查找将请求发送到的位置。它有用于每个路由指标、重试和超时的服务描述信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身份&lt;/strong&gt; — 它提供了一个&lt;em&gt;证书颁发机构&lt;/em&gt;，该&lt;em&gt;证书颁发机构&lt;/em&gt;接受来自代理的 CSR 并返回以正确身份签发的证书。它提供了 mTLS 功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代理注入器&lt;/strong&gt; — 它是一个准入控制器，用于查找注解（&lt;code&gt;linkerd.io/inject: enabled&lt;/code&gt;）并更改 pod 规范以添加 &lt;code&gt;initContainer&lt;/code&gt; 和包含代理本身的 sidecar。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务配置文件验证器&lt;/strong&gt; — 这也是一个准入控制器，用于在保存新&lt;a href=&#34;https://linkerd.io/2/reference/service-profiles/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务描述&lt;/a&gt;之前对其进行验证。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tap&lt;/strong&gt; — 它从 CLI 或仪表盘接收实时监控请求和响应的指令，以在应用程序中提供可观察性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web&lt;/strong&gt;  — 提供 Web 仪表盘。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Grafana&lt;/strong&gt; — Linkerd 通过 Grafana 提供开箱即用的仪表盘。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;  — 通过 &lt;code&gt;/metrics&lt;/code&gt; 在端口 4191 上代理的断点来收集和存储所有 Linkerd 指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据平面&#34;&gt;数据平面&lt;/h3&gt;
&lt;p&gt;Linkerd 数据平面由轻量级代理组成，这些轻量级代理作为边车容器与服务容器的每个实例一起部署。在具有特定注解的 Pod 的初始化阶段，将代理注入（请参见上面的代理注入器）。自从 2.x 由 Rust 中完全重写以来，该代理一直非常轻量级和高性能。这些代理拦截与每个 Pod 之间的通信，以提供检测和加密（TLS），而无需更改应用程序代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代理功能：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP、HTTP/2 和任意 TCP 协议的透明、零配置代理。&lt;/li&gt;
&lt;li&gt;自动为 HTTP 和 TCP 流量导出 Prometheus 指标。&lt;/li&gt;
&lt;li&gt;透明的零配置 WebSocket 代理。&lt;/li&gt;
&lt;li&gt;自动的、可感知延迟的 7 层负载均衡。&lt;/li&gt;
&lt;li&gt;非 HTTP 流量的自动的 4 层负载均衡。&lt;/li&gt;
&lt;li&gt;按需诊断 tap API。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;比较&#34;&gt;比较&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;特点&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Istio&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Linkerd&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;易于安装&lt;/td&gt;
          &lt;td&gt;由于各种配置选项和灵活性，对于团队来说可能不堪重负。&lt;/td&gt;
          &lt;td&gt;因为有内置和开箱即用的配置，适配起来是相对容易的&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;平台&lt;/td&gt;
          &lt;td&gt;Kubernetes、虚拟机&lt;/td&gt;
          &lt;td&gt;Kubernetes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;支持的协议&lt;/td&gt;
          &lt;td&gt;gRPC、HTTP/2、HTTP/1.x、Websocket 和所有 TCP 流量。&lt;/td&gt;
          &lt;td&gt;gRPC、HTTP/2、HTTP/1.x、Websocket 和所有 TCP 流量。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;入口控制器&lt;/td&gt;
          &lt;td&gt;Envoy，Istio 网关本身。&lt;/td&gt;
          &lt;td&gt;任何 – Linkerd 本身不提供入口功能。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;多集群网格和扩展支持&lt;/td&gt;
          &lt;td&gt;通过各种配置选项以及在 Kubernetes 集群外部扩展网格的稳定版本支持多集群部署。&lt;/td&gt;
          &lt;td&gt;2.7 版本，多群集部署仍处于试验阶段。根据最新版本 2.8，多群集部署是稳定的。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;服务网格接口（SMI）兼容性&lt;/td&gt;
          &lt;td&gt;通过第三方 CRD。&lt;/td&gt;
          &lt;td&gt;原生的流量拆分和指标，而不用于流量访问控制。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;监控功能&lt;/td&gt;
          &lt;td&gt;功能丰富&lt;/td&gt;
          &lt;td&gt;功能丰富&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;追踪支持&lt;/td&gt;
          &lt;td&gt;Jaeger、Zipkin&lt;/td&gt;
          &lt;td&gt;所有支持 OpenCensus 的后端&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;路由功能&lt;/td&gt;
          &lt;td&gt;各种负载均衡算法（轮训、随机最少连接），支持基于百分比的流量拆分，支持基于标头和路径的流量拆分。&lt;/td&gt;
          &lt;td&gt;支持 EWMA（指数加权移动平均）负载均衡算法，通过 SNI 支持基于百分比的流量拆分。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;弹性&lt;/td&gt;
          &lt;td&gt;断路、重试和超时、故障注入、延迟注入。&lt;/td&gt;
          &lt;td&gt;无断路、无延迟注入支持。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;安全&lt;/td&gt;
          &lt;td&gt;mTLS 支持所有协议、可以使用外部 CA 证书/密钥、支持授权规则。&lt;/td&gt;
          &lt;td&gt;除了 TCP 之外，还支持 mTLS，可以使用外部 CA/密钥，但尚不支持授权规则。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;性能&lt;/td&gt;
          &lt;td&gt;在最新的 1.6 版本中，Istio 的资源占用越来越好并且延迟得到了改善。&lt;/td&gt;
          &lt;td&gt;Linkerd 的设计非常轻巧 - 根据第三方&lt;a href=&#34;https://linkerd.io/2019/05/18/linkerd-benchmarks/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基准测试&lt;/a&gt;，它比 Istio 快 3-5 倍。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;企业支援&lt;/td&gt;
          &lt;td&gt;不适用于 OSS 版本。如果您将 Google 的 GKE 与 Istio 一起使用，或者将 Red Hat OpenShift 与 Istio 作为服务网格使用，则可能会得到各个供应商的支持。&lt;/td&gt;
          &lt;td&gt;开发了 Linkerd OSS 版本的 Buoyant 提供了完整的企业级工程、支持和培训。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;服务网格正成为云原生解决方案和微服务架构中必不可少的组成部分。它完成了所有繁重的工作，例如流量管理、弹性和可观察性，让开发人员专注于业务逻辑。Istio 和 Linkerd 都已经成熟，并已被多家企业用于生产。对需求的计划和分析对于选择要使用哪个服务网格至关重要。请在分析阶段投入足够的时间，因为在游戏的后期从一个迁移到另一个很复杂。&lt;/p&gt;
&lt;p&gt;选择与服务网格一样复杂和关键的技术时，不仅要考虑技术，还要考虑使用技术的背景。缺少背景，很难说 A 是否比 B 好，因为答案确实是“取决于”。我喜欢 Linkerd 的简单，包括入门和以后管理服务网格。此外，多年来，Linkerd 与来自企业公司的用户一起得到了加强。 &lt;/p&gt;
&lt;p&gt;一个中可能有一些功能看起来不错，但请确保检查另一个是否计划在不久的将来发布该功能，并基于不仅是理论上的评估，而且还要在概念验证沙箱中对它们进行尝试，做出明智的决定。这种概念验证应集中在易用性、功能匹配以及更重要的是技术的操作方面。引入技术相对容易，最困难的部分是在其生命周期中运行和管理它。&lt;/p&gt;
&lt;p&gt;请让我们知道你的想法和意见。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/what-is-a-service-mesh-and-why-do-you-need-one&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dzone.com/articles/what-is-a-service-mesh-and-why-do-you-need-one&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/microservices.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://martinfowler.com/articles/microservices.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/docs/concepts/traffic-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://istio.io/docs/concepts/traffic-management/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://servicemesh.es/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.freepik.com/free-vector/versus-vs-fight-battle-screen-background_6972702.htm#page=1&amp;amp;query=versus&amp;amp;position=0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Freepik.com 的标题和特色图片&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;架构图来自 &lt;a href=&#34;https://istio.io/latest/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 和 &lt;a href=&#34;https://linkerd.io/2/reference/architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt; 的文档。&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
