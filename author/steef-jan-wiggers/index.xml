<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steef-Jan Wiggers | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/steef-jan-wiggers/</link>
      <atom:link href="https://cloudnativecn.com/author/steef-jan-wiggers/index.xml" rel="self" type="application/rss+xml" />
    <description>Steef-Jan Wiggers</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnativecn.com/author/steef-jan-wiggers/avatar_hu18353123418502379211.jpg</url>
      <title>Steef-Jan Wiggers</title>
      <link>https://cloudnativecn.com/author/steef-jan-wiggers/</link>
    </image>
    
    <item>
      <title>OpenTelemetry Protocol (OTLP) 1.0.0 发布</title>
      <link>https://cloudnativecn.com/blog/otlp-version-one-released/</link>
      <pubDate>Sun, 06 Aug 2023 13:05:42 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/otlp-version-one-released/</guid>
      <description>&lt;p&gt;摘要：OpenTelemetry Protocol (OTLP) 1.0.0 已发布，它是 OpenTelemetry 项目中的通用遥测数据传递协议。OpenTelemetry 是一个开源的可观测性框架，提供了一组 API、库、代理和收集器服务，用于捕获分布式跟踪和指标。OTLP 在客户端和服务器之间进行数据交换，定义了一个序列化模式，紧密遵循跟踪、指标和日志的数据模型。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&#34;https://www.infoq.com/news/2023/08/otlp-version-one-released/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.infoq.com/news/2023/08/otlp-version-one-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近，&lt;a href=&#34;https://opentelemetry.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry&lt;/a&gt; Protocol (OTLP) 1.0.0 发布了。OTLP 规范描述了遥测数据在遥测源、收集器等中间节点和遥测后端之间的编码、传输和传递机制。它是 OpenTelemetry 项目中设计的通用遥测数据传递协议。&lt;/p&gt;
&lt;p&gt;OpenTelemetry (OTEL) 是一个由 OpenCensus 和 OpenTracing 项目合并形成的开源 Cloud Native Computing Foundation (CNCF) 项目。它是一个供仪表化、生成、收集和导出遥测数据（例如跟踪、指标和日志）使用的供应商中立的开源可观测性框架。该框架提供了一组 API、库、代理和收集器服务，用于捕获分布式跟踪和指标。此外，它的规范在 2021 年早些时候达到了 1.0.0 版本状态，并被 InfoQ 报道。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 通过使用 API 来仪表化应用程序代码，以生成遥测数据，并在不同的 SDK 实现之间无缝地引导收集指标。它提供了针对特定语言的集成和库，例如 Java、Golang、.NET 和 Python 的 OTel SDK，以使开发人员能够仪表化其代码并捕获遥测数据。这些库中的遥测数据被收集并传输到 OpenTelemetry Collector，利用 OTLP 在客户端和服务器之间进行数据交换。OTLP 定义了一个序列化模式，紧密遵循跟踪、指标和日志的数据模型。&lt;/p&gt;
&lt;p&gt;作为中央存储库，OpenTelemetry Collector 接收、处理和导出从各种源收集的遥测数据，既作为单个应用程序的本地代理，也作为多个应用程序的网关。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-opentelemetry-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;OpenTelemetry 架构图&#34;
           src=&#34;https://cloudnativecn.com/blog/otlp-version-one-released/otel-diagram.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OpenTelemetry 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Open Telemetry Diagram（来源：&lt;a href=&#34;https://opentelemetry.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 文档&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OTLP 在数据序列化、反序列化和网络服务之间的传输方面发挥着重要作用。该协议旨在指定一个序列化模式，紧密遵循数据模型并解决其他遥测协议的问题。&lt;/p&gt;
&lt;p&gt;Honeycomb 开发者倡导者 &lt;a href=&#34;https://twitter.com/MartinDotNet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Martin Thwaites&lt;/a&gt; 说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OTLP 是 OpenTelemetry 的生命力，使其比以往任何时候都更强大；转向 v1 将把这一点提升到一个新的水平。已经有大多数供应商适应了使用 OTLP 协议接收数据；通过 V1，这将给人们带来一些急需的信心，希望可以让最后几个顽固分子添加 OTLP 支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，他表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这很重要，因为它开启了更多的互操作性，减少了添加专有协议库到我们堆栈中的需求，这对于希望更好地了解其应用程序的情况下获得更多可见性的人来说只能是一个胜利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，OpenTelemetry 项目目前是 CNCF 的&lt;a href=&#34;https://www.cncf.io/projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;孵化项目&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>初创公司 Fermyon 发布 Spin 1.0 用于 WebAssembly 无服务器应用</title>
      <link>https://cloudnativecn.com/blog/spin-wasm-ga/</link>
      <pubDate>Thu, 13 Apr 2023 16:27:22 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/spin-wasm-ga/</guid>
      <description>&lt;p&gt;本文译自：&lt;a href=&#34;https://www.infoq.com/news/2023/04/first-version-spin-wasm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Startup Fermyon Releases Spin 1.0 for WebAssembly Serverless Applications&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.fermyon.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fermyon&lt;/a&gt; 最近宣布推出 &lt;a href=&#34;https://github.com/fermyon/spin/releases/tag/v1.0.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spin 1.0&lt;/a&gt;，这是一个用于使用 &lt;a href=&#34;https://webassembly.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly&lt;/a&gt; (Wasm) 开发无服务器应用的开源开发者工具和框架。&lt;/p&gt;
&lt;p&gt;Spin 1.0 是其去年推出 &lt;a href=&#34;https://www.fermyon.com/blog/introducing-spin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;介绍&lt;/a&gt; 后的首个稳定版本。在 1.0 版本中，公司增加了对新编程语言（如 JavaScript、TypeScript、Python 或 C#，除了 Rust 和 Go 之外）、连接数据库（&lt;a href=&#34;https://developer.fermyon.com/spin/rdbms-storage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;关系型&lt;/a&gt; 或 &lt;a href=&#34;https://developer.fermyon.com/spin/redis-outbound&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt;）、使用流行的注册表服务分发应用程序（&lt;a href=&#34;https://ghcr.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Container Registry&lt;/a&gt;、&lt;a href=&#34;https://hub.docker.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Hub&lt;/a&gt; 或 &lt;a href=&#34;https://aws.amazon.com/ecr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS ECR&lt;/a&gt;）、内置的 &lt;a href=&#34;https://developer.fermyon.com/spin/kv-store&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;键值存储&lt;/a&gt; 以保持状态、在 Kubernetes 上运行应用程序以及与 &lt;a href=&#34;https://www.hashicorp.com/products/vault&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HashiCorp Vault&lt;/a&gt; 集成以管理运行时配置等方面的支持。&lt;/p&gt;
&lt;p&gt;通过 Spin，该公司为创建运行 Wasm 的应用程序提供了轻松的开发体验，包括部署和安全运行它们的框架。&lt;/p&gt;
&lt;p&gt;Fermyon 的首席技术官 &lt;a href=&#34;https://twitter.com/matei_radu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Radu Matei&lt;/a&gt; 在一篇 &lt;a href=&#34;https://www.fermyon.com/blog/introducing-spin-v1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客文章&lt;/a&gt; 中解释道：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spin 是一个开源的开发者工具和框架，它帮助用户通过创建、构建、分发和运行 Wasm 的无服务器应用程序。我们可以使用 spin new 基于起始模板创建新的应用程序，使用 spin build 将我们的应用程序编译为 Wasm，使用 spin up 在本地运行应用程序。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/spin-wasm-ga/spin_hu14812837257707596977.webp 400w,
               /blog/spin-wasm-ga/spin_hu7518005238026015097.webp 760w,
               /blog/spin-wasm-ga/spin_hu4668784611792189774.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/spin-wasm-ga/spin_hu14812837257707596977.webp&#34;
               width=&#34;760&#34;
               height=&#34;369&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;来源：&lt;a href=&#34;https://www.fermyon.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.fermyon.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了在本地运行 spin 应用程序外，开发人员还可以将应用程序部署到 &lt;a href=&#34;https://www.fermyon.com/cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fermyon 云&lt;/a&gt;（&lt;a href=&#34;https://www.infoq.com/news/2022/11/Fermyon-cloud-webassembly/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;去年公开测试版发布&lt;/a&gt;）。在登录 Fermyon Cloud 后，他们可以在存放其应用程序的 spin.&lt;a href=&#34;https://toml.io/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;toml 文件&lt;/a&gt; 所在目录中运行以下命令来部署其应用程序：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$ spin deploy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此外，开发人员还可以选择 &lt;a href=&#34;https://developer.fermyon.com/spin/distributing-apps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将应用程序推送到容器注册表&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;InfoQ 的一个 &lt;a href=&#34;https://www.infoq.com/podcasts/cloud-computing-web-assembly/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;播客&lt;/a&gt; 中提到的一个关键点是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spin 是 Fermyon 的一个开源开发者工具，专注于快速迭代的本地开发周期，允许您快速构建基于 WebAssembly 的应用程序，而无需担心部署。Spin 有一个 Visual Studio Code 插件，类似于 AWS Lambda 等无服务器事件监听器模型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该公司计划在不久的将来使用 &lt;a href=&#34;https://github.com/bytecodealliance/preview2-prototyping&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WASI Preview 2&lt;/a&gt; 和 &lt;a href=&#34;https://www.fermyon.com/blog/webassembly-component-model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasm 组件模型&lt;/a&gt;。此外，在 Reddit 的一个 &lt;a href=&#34;https://www.reddit.com/r/WebAssembly/comments/123m4md/introducing_spin_10_the_developer_tool_for/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;帖子&lt;/a&gt; 中，Matei 回答了一个关于 Web 支持的问题，并提供了未来发展的更多细节：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在未来，我们希望允许从 Spin 调用 Wasm 组件，可以在浏览器内或浏览器外使用，但 Spin 的功能旨在用于非浏览器场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fermyon 是众多投资 WASM 技术的公司之一。例如，Docker 最近 &lt;a href=&#34;https://www.docker.com/blog/announcing-dockerwasm-technical-preview-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布&lt;/a&gt; 推出了 Docker+Wasm 的首个 &lt;a href=&#34;https://www.docker.com/blog/docker-wasm-technical-preview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;技术预览版&lt;/a&gt;，这是一种独特的构建，使得可以用 WasmEdge 运行时使用 Docker 运行 Wasm 容器。从版本 4.15 开始，每个人都可以通过激活 &lt;a href=&#34;https://docs.docker.com/desktop/wasm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd image store 实验功能&lt;/a&gt; 来尝试这些功能。&lt;/p&gt;
&lt;p&gt;此外，一个名为 &lt;a href=&#34;https://github.com/containerd/runwasi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;runwasi 项目&lt;/a&gt; 是 CNCF 的 containerd 生态系统的一部分，允许开发人员通过 Kubernetes 内部的 containerd shim 运行 WebAssembly 运行时。&lt;/p&gt;
&lt;p&gt;最后，有关 Spin 的更多详细信息可在 &lt;a href=&#34;https://developer.fermyon.com/spin/quickstart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档页面&lt;/a&gt; 上找到。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
