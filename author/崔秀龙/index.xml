<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>崔秀龙 | 云原生社区</title>
    <link>https://cloudnative.to/author/%E5%B4%94%E7%A7%80%E9%BE%99/</link>
      <atom:link href="https://cloudnative.to/author/%E5%B4%94%E7%A7%80%E9%BE%99/index.xml" rel="self" type="application/rss+xml" />
    <description>崔秀龙</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Fri, 11 Jan 2019 11:10:19 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/author/%E5%B4%94%E7%A7%80%E9%BE%99/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>崔秀龙</title>
      <link>https://cloudnative.to/author/%E5%B4%94%E7%A7%80%E9%BE%99/</link>
    </image>
    
    <item>
      <title>在网格的边缘试探——企业服务行业如何试水 Istio</title>
      <link>https://cloudnative.to/blog/explore-at-the-edge-of-istio-service-mesh/</link>
      <pubDate>Fri, 11 Jan 2019 11:10:19 +0800</pubDate>
      <guid>https://cloudnative.to/blog/explore-at-the-edge-of-istio-service-mesh/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;崔秀龙，HPE 软件分析师，Kubernetes 权威指南作者之一，Kubernetes、Istio 项目成员。&lt;/p&gt;
&lt;p&gt;本文根据崔秀龙在 2019 广州 Service Mesh Meetup#5 分享整理，完整的分享 PPT 获取方式见文章底部。&lt;/p&gt;
&lt;p&gt;本文内容收录在崔秀龙的新书：《深入浅出 Istio - Service Mesh 快速入门与实践》的第十章，该书将于近期由博文视点出版发行，敬请关注。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/explore-at-the-edge-of-istio-service-mesh/1547173724138-2dd495ad-ea26-45eb-8d9b-6306df9c7855_huc1b516eb414807dac82cb1340977cb53_277881_d6cb9ede0d89be973deb1fe6983cd3dc.webp 400w,
               /blog/explore-at-the-edge-of-istio-service-mesh/1547173724138-2dd495ad-ea26-45eb-8d9b-6306df9c7855_huc1b516eb414807dac82cb1340977cb53_277881_d3e739204f5b8864f7eefdb5b789a577.webp 760w,
               /blog/explore-at-the-edge-of-istio-service-mesh/1547173724138-2dd495ad-ea26-45eb-8d9b-6306df9c7855_huc1b516eb414807dac82cb1340977cb53_277881_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/explore-at-the-edge-of-istio-service-mesh/1547173724138-2dd495ad-ea26-45eb-8d9b-6306df9c7855_huc1b516eb414807dac82cb1340977cb53_277881_d6cb9ede0d89be973deb1fe6983cd3dc.webp&#34;
               width=&#34;760&#34;
               height=&#34;436&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Service Mesh 概念在 Linkerd 落地之后，让一直漂浮在空中的微服务治理方案有了一个明确的落地点，给微服务架构的具体实现指出了一个清晰的方向，围绕这一概念逐步开始形成新的技术生态，在业界造成不少震动。这种震动对于企业 IT 转型工作带来的影响，甚至比容器化的影响更加深远。对于承担企业 IT 转型工作的企业服务行业来说，也自然首当其冲感觉到新概念带来的压力。&lt;/p&gt;
&lt;p&gt;企业服务行业和互联网行业相比，业务形态、技术积累和人员结构等方面都大相径庭，举几个常见的差异：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发、运维、基础设施所属&lt;/li&gt;
&lt;li&gt;人员结构、水平和年龄&lt;/li&gt;
&lt;li&gt;资源使用率差别&lt;/li&gt;
&lt;li&gt;架构和平台一致性&lt;/li&gt;
&lt;li&gt;负载能力&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前进行 Service Mesh 布道的主力还是互联网行业的旗手们，一味追求跟进互联网同行们的进度和做法，颇有邯郸学步的风险。&lt;/p&gt;
&lt;p&gt;本文中将会针对目前 Service Mesh 方面的一些普遍问题和关注热点发表一些个人意见。并尝试提供一种 Istio 的试用思路，给乙方同行们提供参考。&lt;/p&gt;
&lt;h2 id=&#34;istio-的功能&#34;&gt;Istio 的功能&lt;/h2&gt;
&lt;p&gt;无需赘述，多数用户都很清楚，Istio 使用和应用共享网络栈的方式，利用 Iptables 劫持应用的网络流量，从而在不修改业务源码的情况下，完成一系列的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监控服务质量&lt;/li&gt;
&lt;li&gt;控制服务间的访问路由&lt;/li&gt;
&lt;li&gt;应对服务故障&lt;/li&gt;
&lt;li&gt;在服务间通信之间进行加密&lt;/li&gt;
&lt;li&gt;访问控制和频率限制&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;分布式跟踪和业务紧密相关，无法做到无侵入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这其中最大的优势就是无侵入，这意味着给试用流程留下了全身而退的机会，如果没有回滚的能力，上述种种能力都是空中楼阁。&lt;/p&gt;
&lt;h2 id=&#34;istio-的问题&#34;&gt;Istio 的问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API 稳定性可能是最严重的一个问题。目前最成熟的功能组别应该是流量控制，其版本号也仅是 v1alpha3，一般来说，alpha 阶段的产品，代表着不提供向后兼容的承诺，流量控制 API 在从 v1alpha2 升级为 v1alpha3 的过程中，API 几乎全部改写，使得很多早期用户的精力投入付诸东流。核心功能尚且如此，遑论相对比较边缘的 Mixer、Citadel 以及 Galley 组件的相关内容。&lt;/li&gt;
&lt;li&gt;发布节奏和发布质量的问题也相当严重。Istio并不算长的历史中，出现了多次版本撤回、大版本严重延期、发布质量低下无法使用以及 Bug 反复等状况，这无疑会让每次升级尝试都充满了不确定性，会很大的影响生产过程的连续性。&lt;/li&gt;
&lt;li&gt;Mixer 是一个问题焦点，其数据模型较为复杂，并且集中了所有应用的流量于一点，虽然其中加入了各种缓存等技术来降低延迟，但是其独特地位决定了 Mixer 始终处于一个高风险的位置。同时其 API 结构稍显混乱，重构风险较大。&lt;/li&gt;
&lt;li&gt;Pilot的性能方面也经常为人诟病，虽然经过几次升级，但是即使是 1.0 之后，还是出现了两次 Pilot 在集群中服务/Pod 过多的情况下会超量消耗资源的问题。&lt;/li&gt;
&lt;li&gt;安全、物理机和虚拟机的支持以及网格边缘通信这三组功能，目前用户较少，质量尚不明确。&lt;/li&gt;
&lt;li&gt;最后就是 Istio 的 Sidecar 注入模式，这种模式一定会增加服务间调用的网络延迟，在目前阶段这是一个痼疾，Sidecar 的固定延迟和 Mixer 的不确定行为相结合，有可能会产生严重后果。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里提出的只是被反复提及，或者经常出现在 Issue 列表中的问题，由发布问题来看，面临的风险可能远不止这些。&lt;/p&gt;
&lt;h2 id=&#34;istio-试用工作的理由和规划&#34;&gt;Istio 试用工作的理由和规划&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;试用 Istio，首先应该确定，该技术的采用，是否能够在可控的风险和投入下，得到有效的产出。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微服务模式的推进，必须要有相应的管理能力，Service Mesh 目前看来，是一个确定有效的方案，如果不是 Istio，也会有其它替代产品出现。&lt;/li&gt;
&lt;li&gt;目前看来，Istio 是 Service Mesh 的标志性产品，有一定可能性成为事实标准。&lt;/li&gt;
&lt;li&gt;提供了众多开箱即用的丰富特性，能够迅速进入 Service mesh。&lt;/li&gt;
&lt;li&gt;最后是无侵入的优势：如果试用失败，可以退回，控制损失范围。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Istio 的多数功能，在无需对程序进行修改（分布式跟踪除外）的情况下，能对应用提供如此之多的功能支持，无疑是非常有吸引力的。Istio 的功能集，完全可以说是服务网格技术的典范。一旦确认现有环境有可能支持 Istio 的运行，并且在合理的投入下能够获得有效益的产出，那么这个试用就是有价值的。&lt;/p&gt;
&lt;p&gt;结合 Istio 的现状，以及多数企业的运行状态，个人浅见，Istio 的应用在现阶段只能小范围试探性地进行，在进行过程中要严格定义试用范围，严控各个流程。 按照个人经验，笔者将试用过程分为如下 4 个阶段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;范围定义：选择进入试用的服务，确定受影响的范围，并根据 Istio 项目现 状决定预备使用的 Istio 相关功能。围绕这些需要，制定试用需求。&lt;/li&gt;
&lt;li&gt;方案部署：根据范围定义的决策，制定和执行相关的部署工作。其中包含 Istio 自身的部署和业务服务、后备服务的部署工作。&lt;/li&gt;
&lt;li&gt;测试验证：根据既有业务目标对部署结果进行测试。&lt;/li&gt;
&lt;li&gt;切换演练：防御措施，用于在业务失败时切回到原有的稳定环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;istio-的试用步骤&#34;&gt;Istio 的试用步骤&lt;/h2&gt;
&lt;h3 id=&#34;确定功能范围&#34;&gt;确定功能范围&lt;/h3&gt;
&lt;p&gt;在 Istio 中包含了非常多的功能点，从原则上来说，各种功能都是有其实际作用的。然而，Istio 作为一个新产品，本身也有很多不足，我们在 10.1 节中也提到了这些不足。&lt;/p&gt;
&lt;p&gt;Istio 提供的众多功能对每个公司或者项目，都会有不同价值。我们在采用一个新系统时，首先要考虑的就是性价比问题，这里的“价”代表着 Istio 带来的风险、对业务应用的影响，还包括可能出现的服务停机等问题。&lt;/p&gt;
&lt;p&gt;可以根据性价比，做出一个优先级别列表。在制定了优先级列表之后，就可以根据这一列表，结合项目的实际需求，按照效果明显、功能稳定、部署成本低、少改造或者不改造的标准来进行选择，最终确定待测试的功能点。&lt;/p&gt;
&lt;p&gt;在选定功能点之后，应该遵循目前已有的 Istio 文档，对各个功能点进行单项测试和验证，以确保其有效性。并通过官方 GitHub 的 Issue 列表及讨论组内容，了解现有功能是否存在待解决的问题，以及相关的注意事项等。&lt;/p&gt;
&lt;h3 id=&#34;选择试用业务&#34;&gt;选择试用业务&lt;/h3&gt;
&lt;p&gt;在试用功能点确定之后，就要选择用于试用的业务应用了。Istio 作为一个相对底层的系统，其部署和调试过程必然会对业务产生一定的影响，在运行阶段又有 Sidecar 和各个组件造成的损耗，如下所述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有网格之间的通信都要经过 Sidecar 的中转，会造成大约 10 毫秒的延迟。&lt;/li&gt;
&lt;li&gt;Pilot 对集群规模敏感，集群中的服务数量、Pod 数量都可能对 Pilot 造成较大影响，也会影响到 Istio 各种规则向 Pod 的传输过程。&lt;/li&gt;
&lt;li&gt;所有流量都会经由 Mixer 处理，也有造成瓶颈的可能。&lt;/li&gt;
&lt;li&gt;安全功能设置不当同样会造成服务中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上所述还只是个概要，对业务来说，对这些风险都是必须正视并做好预案的。 为了避免引起过大损失，建议将如下标准作为选择试用服务的依据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够容忍一定的中断时间。&lt;/li&gt;
&lt;li&gt;对延迟不敏感。&lt;/li&gt;
&lt;li&gt;调用深度较浅。&lt;/li&gt;
&lt;li&gt;能够方便地回滚和切换。&lt;/li&gt;
&lt;li&gt;具备成熟完善的功能、性能和疲劳测试方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定义试用目标&#34;&gt;定义试用目标&lt;/h3&gt;
&lt;p&gt;按照现有业务的实际需要，对试用服务进行功能分析。和传统的需求功能分析类似，要在该过程中明确一些具体的需求内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境需求：申请符合 Istio 运行以及业务要求的集群以及资源。&lt;/li&gt;
&lt;li&gt;功能性需求：在 Istio 的功能中选择需要 Istio 为试用服务提供支撑的功能，应形成功能测试案例。&lt;/li&gt;
&lt;li&gt;服务质量需求：根据现有业务的运行状况，对服务质量提出具体要求，例如并发数量、响应时间、成功率等，应形成性能测试案例。&lt;/li&gt;
&lt;li&gt;故障处理需求：对于试点应用发生故障时，如何在网格和非网格版本的试用 服务之间进行切换以降低故障影响，应形成故障预案。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;istio-部署&#34;&gt;Istio 部署&lt;/h3&gt;
&lt;p&gt;首先是基本环境的准备，按照前面提到的环境需求，复查集群环境。 如果是内网部署，应该部署内网可达的私有镜像库，推送全部所需的镜像，并利用 Helm 变量设置合理的镜像地址。 接下来根据试用需求，利用 Helm 对 Istio 部署进行调整，这方面的调整主要分为两类——资源分配和功能裁剪。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源分配方面，在官方提供了资源分配建议可以参考，利用 Helm value 进行设置即可。&lt;/li&gt;
&lt;li&gt;功能裁剪，同样需要对 Helm value 进行设置，关闭不需要的功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;后备业务部署&#34;&gt;后备业务部署&lt;/h3&gt;
&lt;p&gt;在进行试用应用的注入之前，首先应该部署一组备份服务，这组服务需要和整体服务网格进行隔离。这一组备份服务应处于待机模式，以备网格版本的应用在出 现故障时，进行整体切换。基于这一点考虑，负载均衡等前端控制设施也应齐备。&lt;/p&gt;
&lt;h3 id=&#34;试用业务部署&#34;&gt;试用业务部署&lt;/h3&gt;
&lt;p&gt;接下来要把试用服务部署到网格之中，同其他 Kubernetes 一样，网格应用的部署也是从 YAML 代码开始的。原有应用的部署代码需要根据 Istio 标准进行复核，检查其中的端口命名、标签设置。&lt;/p&gt;
&lt;p&gt;除了待注入的应用清单文件，还应该为每个部署单元都提供默认的 VirtualService 和 DestinationRule，建立基本的路由关系，提供一个路由基准，方便在路由调整过程中进行对比。&lt;/p&gt;
&lt;p&gt;然后根据在前面制定的具体网格需求列表，逐个编写所需的路由、规则等方面的配置内容。 在这些都完成之后，就可以按照顺序逐个提交部署了。&lt;/p&gt;
&lt;h3 id=&#34;监控告警部署&#34;&gt;监控告警部署&lt;/h3&gt;
&lt;p&gt;在试用服务部署之后，就有更多的项目可以监测了，这里建议将其自带的 Prometheus 进行变更，连接到能够有效发出告警的 Alert manager 组件上，并根据试用业务的服务质量、Istio 组件进行告警设置。&lt;/p&gt;
&lt;h3 id=&#34;验证测试&#34;&gt;验证测试&lt;/h3&gt;
&lt;p&gt;根据功能需求对试用服务进行功能测试，在测试通过之后进行性能和疲劳测试，观察各方面的性能指标是否符合，如果性能出现下滑，则可以尝试扩容，提高资源分配率。&lt;/p&gt;
&lt;p&gt;关键组件的性能下降有可能是 Istio 自身的问题，应检查社区 Issue 或提出新的 Issue。&lt;/p&gt;
&lt;p&gt;此处是一个关键步骤，如果测试方案不符合实际情况或者预期目标无法达到， 则强烈建议放弃试用。&lt;/p&gt;
&lt;h3 id=&#34;切换演练&#34;&gt;切换演练&lt;/h3&gt;
&lt;p&gt;在功能和性能测试全部通过之后，就应该进行试用服务和后备服务之间的双向切换的演练，在双方切换之后都应该重复进行验证过程，防止故障反复。 切换演练是试点应用的最后一道保险，在网格严重故障之后能否迅速恢复业务，全靠这一步的支持，因此同样需要认真对待。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;虽然很多企业服务团队的研发能力不高，无法像一些高水平技术团队一样，对开源软件进行因地制宜的适应性修改。然而需要理解的重要一点是，不少软件项目其实并非为世界级的流量而生的，互联网 Say No 的时候，其它场景中未必无法接受。通过细致的调查研究，详尽的方案设计，谨慎的执行和验证之后，Service Mesh 或者其它的新技术的试用决策都是可以进行尝试的，甚至也是有可能因此获利的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/explore-at-the-edge-of-istio-service-mesh/1547173702228-fc2a6314-b23b-4f38-95c3-a23f29efc630_hu89b69cae4b9fadce2b00fbfe5ae9b010_245483_2cb477ba054ac24207b3ecbd2103eaa9.webp 400w,
               /blog/explore-at-the-edge-of-istio-service-mesh/1547173702228-fc2a6314-b23b-4f38-95c3-a23f29efc630_hu89b69cae4b9fadce2b00fbfe5ae9b010_245483_e14450ba5fe1aa070abf16c3dec8cea1.webp 760w,
               /blog/explore-at-the-edge-of-istio-service-mesh/1547173702228-fc2a6314-b23b-4f38-95c3-a23f29efc630_hu89b69cae4b9fadce2b00fbfe5ae9b010_245483_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/explore-at-the-edge-of-istio-service-mesh/1547173702228-fc2a6314-b23b-4f38-95c3-a23f29efc630_hu89b69cae4b9fadce2b00fbfe5ae9b010_245483_2cb477ba054ac24207b3ecbd2103eaa9.webp&#34;
               width=&#34;760&#34;
               height=&#34;412&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PPT 下载和视频地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;点击页面回顾按钮，回顾当天所有讲师分享：https://tech.antfin.com/activities/72&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzUzMzU5Mjc1Nw==&amp;amp;mid=2247484533&amp;amp;idx=1&amp;amp;sn=6e574fffc87c334aab896f79b6b03296&amp;amp;chksm=faa0ebafcdd762b91311ac5cebb3f85a695e0c03702278de937eed905f331f9cf9fff9b80a7c&amp;amp;scene=21#wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;蚂蚁金服 Service Mesh 渐进式迁移方案|Service Mesh Meetup 实录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzUzMzU5Mjc1Nw==&amp;amp;mid=2247484541&amp;amp;idx=1&amp;amp;sn=81fefed2ab7f67d032a9f5b90db61890&amp;amp;chksm=faa0eba7cdd762b1498764303188a67e5b3c0628193256d8853fb6018873481c8ac816a09bac&amp;amp;scene=21#wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;蚂蚁金服 Service Mesh 新型网络代理的思考与实践 | GIAC 分享实录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;amp;mid=2651010202&amp;amp;idx=1&amp;amp;sn=742179879a25d526402a5b561b769ed1&amp;amp;scene=21#wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;蚂蚁金服 Service Mesh 实践探索&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh Meetup #5 广州站</title>
      <link>https://cloudnative.to/event/service-mesh-meetup-05/</link>
      <pubDate>Sun, 06 Jan 2019 13:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/event/service-mesh-meetup-05/</guid>
      <description>&lt;h3 id=&#34;讲师与演讲话题&#34;&gt;讲师与演讲话题&lt;/h3&gt;
&lt;h4 id=&#34;唯品会-service-mesh-的实践分享&#34;&gt;唯品会 Service Mesh 的实践分享&lt;/h4&gt;
&lt;p&gt;郑德惠 唯品会Java资深开发工程师，内部Service Mesh框架负责人，唯品会开源项目vjtools重要开发者，10年电信与互联网后台开发经验。&lt;/p&gt;
&lt;h4 id=&#34;sofamosn-持续演进路径及实践案例&#34;&gt;SOFAMosn 持续演进路径及实践案例&lt;/h4&gt;
&lt;p&gt;陈逸凡 花名无钩，蚂蚁集团资深开发工程师。专注于网络接入层，高性能服务器研发，SOFAMosn团队核心成员&lt;/p&gt;
&lt;h4 id=&#34;在网格的边缘试探企业-istio-试水指南&#34;&gt;在网格的边缘试探——企业 Istio 试水指南&lt;/h4&gt;
&lt;p&gt;崔秀龙 HPE 软件分析师，Kubernetes 权威指南作者之一，Kubernetes、Istio 项目成员&lt;/p&gt;
&lt;h4 id=&#34;roundtable回顾2018service-mesh-蓄势待发&#34;&gt;Roundtable：回顾2018，Service Mesh 蓄势待发&lt;/h4&gt;
&lt;p&gt;主持人：宋净超，ServiceMesher 社区联合创始人&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生世界中的隐形人如何拥抱 Istio</title>
      <link>https://cloudnative.to/blog/invisible-men-in-the-world-of-cloudnative/</link>
      <pubDate>Wed, 28 Nov 2018 11:25:53 +0800</pubDate>
      <guid>https://cloudnative.to/blog/invisible-men-in-the-world-of-cloudnative/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;一直想给我所从事的企业服务行业写点啥，又千头万绪不知从何说起。此次 KubeCon 上海一行，眼见 CNCF 高起朱楼大宴宾客，深受触动。企业服务这个巨大的“角落”，似乎已被遗忘。本文尝试给云原生时代的同学们讲讲这个似乎有点蒙昧的角落。也希望能给奋斗在企业服务项目中的朋友们一点启发。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;谁是隐形人&#34;&gt;谁是隐形人&lt;/h2&gt;
&lt;p&gt;身为一个企业服务部门的 IT 工人，在为甲方殚精竭虑的同时，经常有一种跟世界脱节的感觉：流量经济持续不断的冲刷之下，微服务、云原生等新的架构和概念如火如荼；大咖说、InfoQ 等各色机构的活动也是越来越多；新技术产品和新技术偶像层出不穷。云原生时代以来，更大的困扰出现了：漫山遍野的“免费”、“开源”技术，似乎难于学习、无力推进、更不要说做出贡献了。&lt;/p&gt;
&lt;p&gt;各种困境各种难，让这一人群成为了一种隐身的状态：大会的讲台上下、热门的书籍和公众号、开源社区的贡献和参与统统都和他们毫无瓜葛，似乎只剩下了偶尔出现的产业新闻和咨询案例，才能提供一个“可能还在做技术”的证明。隐形人的一些生存特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;产品一般称为 “XXXX 管理系统”。&lt;/li&gt;
&lt;li&gt;在甲方自有数据中心或托管服务器上运行。&lt;/li&gt;
&lt;li&gt;硬件利用率不高，相对硬件规模来说，业务规模相当小。&lt;/li&gt;
&lt;li&gt;令出多头，一些工作内容可能需要多个公司/部门之间的配合。&lt;/li&gt;
&lt;li&gt;基础设施群之间，通常会采用传统的多分区、白名单系统来保证隔离。&lt;/li&gt;
&lt;li&gt;开发环境和生产环境之间经常会没有高速网络连接。&lt;/li&gt;
&lt;li&gt;上线活动需逐级审批、定时定点停服更新。&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这种令人惶惑的情形之下，CNCF、微服务浪潮的出现更加剧了隐形人们的生存危机。尤其是台上大佬们大声疾呼——XX 产品那德行，不改还能用？这种时候，隐形人就更害怕了——我还没学会安装那！大佬们已经上手改了！还怎么活啊！&lt;/p&gt;
&lt;h2 id=&#34;几个问题&#34;&gt;几个问题&lt;/h2&gt;
&lt;h3 id=&#34;开源软件到底能不能用&#34;&gt;开源软件到底能不能用&lt;/h3&gt;
&lt;p&gt;首先要相信，世界上是很有些聪明人的。&lt;/p&gt;
&lt;p&gt;Apache 和 CNCF 都有严格的准入控制，对成熟度有明确的要求，同时热度够高的项目通常会吸引较多的高水平贡献者加入。高成熟度的系统。质量总体来说还是有一定保障的。&lt;/p&gt;
&lt;h3 id=&#34;大佬说不改就不能用是个什么情况&#34;&gt;大佬说不改就不能用是个什么情况&lt;/h3&gt;
&lt;p&gt;这通常是来自百度阿里京东蚂蚁等流量大厂的大佬们的呐喊，并不算是危言耸听。但是有个前提，就是国内几个巨头的流量和应用特点，都是属于极端情况。通常说来，并不会有哪个开源组织，有闲心又有能力，丧心病狂的做出能丢给几大厂一个直接可用适用的大系统。反过来说，经过大厂魔改的系统，很可能不再具备原有版本的普适性以及升级能力。作为透明人的 Istio 体验，应该遵循应用和 Istio 都无伤的做法。&lt;/p&gt;
&lt;h3 id=&#34;等前辈们踩过了坑我们再上会更稳妥&#34;&gt;等前辈们踩过了坑我们再上会更稳妥&lt;/h3&gt;
&lt;p&gt;这是个很不现实的想法，各家公司各个项目的情况千差万别，这些坑还是要自己踩的，多数情况下没人能够用微信帮你完成工作。&lt;/p&gt;
&lt;h3 id=&#34;生产应用性能问题解决了么&#34;&gt;生产应用/性能问题/..解决了么&lt;/h3&gt;
&lt;p&gt;其实这跟上一个问题是一体的，通常需要用户自行严格按照生产环境标准进行相应的测试。&lt;/p&gt;
&lt;p&gt;这里有一个前提，如果采用新的系统对现有系统的性能是有影响的，那么首先应该保证，技术团队有能力应对现有的业务负载，这样通过对新系统的学习，才能够有一个合适的技术基础。对一个服务进行容器化改造，不要希望它的容器化成功之后，立刻就出现十倍的性能提升。稳妥的方式是水平迁移稳定之后，才进一步的挖掘新技术的性能潜力。&lt;/p&gt;
&lt;h3 id=&#34;我们没有上-kubernetes&#34;&gt;我们没有上 Kubernetes&lt;/h3&gt;
&lt;p&gt;这一点上，我认为答案很简单，Istio 并不适合你。&lt;/p&gt;
&lt;h2 id=&#34;istio-的试点&#34;&gt;Istio 的试点&lt;/h2&gt;
&lt;p&gt;这两天学习了小剑同学在上海 ServiceMesh Meetup 上的演讲，在仰望蚁人们在面临棘手情况时展露出来的强大实力的同时，也有一些窃喜——在我们隐形人的隐形系统中，可没这么多麻烦。我们只求在原装系统的支持下，获得其有限的好处。&lt;/p&gt;
&lt;h3 id=&#34;为什么采用-istio&#34;&gt;为什么采用 Istio&lt;/h3&gt;
&lt;p&gt;首先要判断的是，这一系统对我们来说有什么好处，除了官方各种宣传之外，可能还会有一些边际效应，例如采用新系统带来的光环、声明式操作提高了对环境和配置的控制能力等。Istio 的官宣好处非常之多，然而按照开源系统通常的晚熟状况，我们可以仅挑选一些对我们促进最大的亮点来进行验证和测试，对于一些难于掌握的复杂特性或不稳定特性，可以徐徐图之——或者叫眼不见为净。&lt;/p&gt;
&lt;p&gt;而存量应用经常会比较落后于时代，经过各种补丁和重构，以及或真或假的微服务改造之后，往往会变成杂乱不堪的应用丛林；经过 Kubernetes 迁移之后，得益于 K8S 的支持，具备了容器调度、服务注册和发现、初步的配置管理等能力。&lt;/p&gt;
&lt;h4 id=&#34;服务监控和跟踪高性价比推荐&#34;&gt;服务监控和跟踪（高性价比，推荐）&lt;/h4&gt;
&lt;p&gt;现存应用的监控和跟踪通常都是比较欠缺的，Istio 能轻松的为应用注入这两种能力，熟悉 Istio 的用户可能会质疑，分布式跟踪还是要求对代码做出一定改动的，本着能不动就不动的原则，仅获取一对一调用的跟踪信息，也是一个巨大的进步。在这一功能的基础上形成的统一 Dashboard 对存量应用的增值会有非常大的帮助。&lt;/p&gt;
&lt;h4 id=&#34;流量控制高性价比推荐&#34;&gt;流量控制（高性价比，推荐）&lt;/h4&gt;
&lt;p&gt;这是 Istio 的核心功能，应该也是使用率最高的功能，这一功能有效的增强了基于 K8S 的应用支撑，对存量应用的通信控制大幅增强。并且在新应用的开发中，可以协助架构师将部分通信细节延后到部署和运维阶段来实现，也降低了新应用的开发难度。流量控制能力中的超时和重发等小功能，都能很好的提高存量应用的健壮性；而路由部分还为现有应用提供了金丝雀发布和蓝绿部署之类的新能力。&lt;/p&gt;
&lt;h4 id=&#34;边缘通信刚需可用&#34;&gt;边缘通信（刚需可用）&lt;/h4&gt;
&lt;p&gt;这部分的功能通常会使用硬件负载均衡和其它相关的基础设施来实现，因此可以暂不考虑。&lt;/p&gt;
&lt;h4 id=&#34;mtls-和访问控制刚需可用&#34;&gt;mTLS 和访问控制（刚需可用）&lt;/h4&gt;
&lt;p&gt;这部分功能在我们的情况中较少遇到，内网中的服务经常是无需访问控制和加密的，因此仅在存在刚需时候可以尝试使用。&lt;/p&gt;
&lt;h4 id=&#34;限流等其它-mixer-功能慎用&#34;&gt;限流等其它 Mixer 功能（慎用）&lt;/h4&gt;
&lt;p&gt;Mixer 是 Istio 中比较遭人诟病的一个组件，强大但是难于驾驭，并且具体实现又依赖于各个 Adapter，因此这部分功能建议押后采纳。&lt;/p&gt;
&lt;h3 id=&#34;试点服务的选择&#34;&gt;试点服务的选择&lt;/h3&gt;
&lt;p&gt;Sidecar 注入导致的延迟是众所周知的，因此我们会选择调用链条较短、延迟不很敏感的应用来进行试点。&lt;/p&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;h3 id=&#34;环境准备&#34;&gt;环境准备&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;检查 Kubernetes 版本是否符合要求。&lt;/li&gt;
&lt;li&gt;检查试点应用的 Service 是否符合注入要求。&lt;/li&gt;
&lt;li&gt;为试点应用在负载均衡或其它类似基础设施上做好切换准备，防止故障无法恢复。&lt;/li&gt;
&lt;li&gt;获取 Istio 镜像文件并上传到私库。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;安装-istio&#34;&gt;安装 Istio&lt;/h3&gt;
&lt;p&gt;根据选择功能，对 Istio 的 &lt;code&gt;values.yaml&lt;/code&gt; 进行定制，因为是局部试点，不建议使用自动注入方式。另外原始设置中对资源的配置比较谨慎，这里建议适当放大。最后是对于镜像库等的地址进行设置。&lt;/p&gt;
&lt;p&gt;备份 &lt;code&gt;values.yaml&lt;/code&gt; 并部署 Istio，根据实际情况为 Dashboard 等管理功能设置 &lt;code&gt;Ingress&lt;/code&gt;/&lt;code&gt;NodePort&lt;/code&gt; 等开放方式。&lt;/p&gt;
&lt;h3 id=&#34;应用部署&#34;&gt;应用部署&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;加大试点应用的 Deployment 中的实例数量，降低 Istio 开销造成的损耗。&lt;/li&gt;
&lt;li&gt;为试点应用编写缺省路由和目标规则。和 Kubernetes 资源等同样纳入交付物的版本管理中。&lt;/li&gt;
&lt;li&gt;如果使用的是 CI/CD，建议在其中加入注入环节。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;部署完成之后，应该进行功能、压力、疲劳等一系列测试，来完成验证。&lt;/p&gt;
&lt;h3 id=&#34;应用上线&#34;&gt;应用上线&lt;/h3&gt;
&lt;p&gt;负载均衡进行切换，将 Istio 转入生产服务。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;以上步骤执行下来，最终我们用较小的代价，换来较大的系统改观，让传统应用像服务网格一样的运行了起来。另外在系统负载较低的情况下，Istio 的稳定性还是比较有保障的。最终，我们也保留了随时回滚的能力。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
