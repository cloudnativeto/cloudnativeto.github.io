<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Craig Box | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/craig-box/</link>
      <atom:link href="https://cloudnativecn.com/author/craig-box/index.xml" rel="self" type="application/rss+xml" />
    <description>Craig Box</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 24 Apr 2025 18:09:59 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>Craig Box</title>
      <link>https://cloudnativecn.com/author/craig-box/</link>
    </image>
    
    <item>
      <title>Ambient Mesh 中的授权策略指南</title>
      <link>https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/</link>
      <pubDate>Thu, 24 Apr 2025 18:09:59 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/</guid>
      <description>&lt;p&gt;服务网格最受欢迎的功能之一，就是能够对网络流量强制执行访问控制策略。由于所有流量都经过代理服务器，因此你可以确保没有人能够绕过某个强制点直接访问服务，而且这些强制点可以位于每个服务前，而不是仅在网络边缘。&lt;/p&gt;
&lt;p&gt;与传统的防火墙或 Kubernetes 的 NetworkPolicy 功能不同，服务网格还可以访问应用层（第七层，L7）信息，例如请求是 HTTP 的 GET 还是 POST，以及请求中携带的 cookie 中的用户身份。&lt;/p&gt;
&lt;p&gt;Ambient Mesh（由 Istio 的 Ambient 模式和 Gloo Mesh 实现）极大地简化了服务网格的交付方式，并显著降低了成本。它的做法是&lt;a href=&#34;https://ambientmesh.io/docs/about/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 L4 和 L7 的处理拆分为两个不同的代理组件&lt;/a&gt;。但这也意味着我们必须改变对访问控制的默认假设：我们不再默认每个工作负载前都有一个 L7 感知的强制执行点。好消息是，大多数情况下我们并不需要它，如果确实需要，也可以按需部署，仅作用于需要保护的工作负载。&lt;/p&gt;
&lt;h3 id=&#34;ambient-mesh-中的身份认证与授权&#34;&gt;Ambient Mesh 中的身份认证与授权&lt;/h3&gt;
&lt;p&gt;运行在服务网格中的每个工作负载都有一个基于命名空间和 ServiceAccount 的身份。这些身份在网格内会被自动验证：这是 mTLS 提供的特性，Ambient 模式默认启用 mTLS。&lt;/p&gt;
&lt;p&gt;我们使用 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 来控制流量。此类策略指定网格中的目标，并包含规则，用于基于来源（from）、操作（to）以及条件（when）来允许或拒绝访问。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ztunnel&lt;/code&gt; 代理始终可以强制执行策略，但它只了解 L3/L4 层的信息（如主机与端口）；而 &lt;code&gt;waypoint&lt;/code&gt; 代理还可感知 L7 信息（如路径与方法），但不是默认部署的。为了兼顾 Ambient 模式的优势与安全性，我们需要为这两类代理分别定义不同粒度的策略。幸运的是，这并不复杂。&lt;/p&gt;
&lt;h3 id=&#34;两类不同的授权策略&#34;&gt;两类不同的授权策略&lt;/h3&gt;
&lt;p&gt;考虑某个部署在 Ambient Mesh 中的工作负载，没有使用 Waypoint。这时策略只能在服务端的 ztunnel 上强制执行。而 ztunnel 无法识别 L7 信息，因此只能强制 L4 层的策略。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f1_hu_f3f250e26fe4f503.webp 400w,
               /blog/ambient-mesh-authorization-policy/f1_hu_47cda3e656a287dc.webp 760w,
               /blog/ambient-mesh-authorization-policy/f1_hu_77fdf6cb978db31a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f1_hu_f3f250e26fe4f503.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当你为该工作负载&lt;a href=&#34;https://ambientmesh.io/docs/setup/configure-waypoints/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;引入 Waypoint&lt;/a&gt; 时，策略就可以在两个位置被执行：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f2_hu_42b4867cc14f936e.webp 400w,
               /blog/ambient-mesh-authorization-policy/f2_hu_ee3f68c15aa45293.webp 760w,
               /blog/ambient-mesh-authorization-policy/f2_hu_26d72b1a87811898.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f2_hu_42b4867cc14f936e.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当系统存在多个策略执行点时，应该&lt;strong&gt;始终在最早的执行点&lt;/strong&gt;上应用策略。&lt;/p&gt;
&lt;p&gt;例如，若将所有策略都设置在 Waypoint 上，则直接访问工作负载的流量将绕过策略。而对于公开访问的服务，策略可能已在网关处执行。为了避免重复处理，&lt;a href=&#34;https://ambientmesh.io/docs/traffic/gateways/#gateways-and-waypoints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;默认情况下 Gateway 会直接将流量转发给服务&lt;/a&gt;，绕过 Waypoint。&lt;/p&gt;
&lt;p&gt;因此，推荐的做法是：在 ztunnel 上定义“基础设施策略”，强制使用 Waypoint，然后在 Waypoint 或 Gateway 上定义“应用层策略”。&lt;/p&gt;
&lt;h3 id=&#34;策略的作用目标与绑定&#34;&gt;策略的作用目标与绑定&lt;/h3&gt;
&lt;p&gt;上面的示意图未涉及实际场景中工作负载与 waypoint 实例的多副本情况。我们在写策略时，需要明确它的作用目标：即它是对哪个服务或工作负载生效。&lt;/p&gt;
&lt;p&gt;Istio 会自动将策略绑定到正确的代理上：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f3_hu_72aaf51948e34e94.webp 400w,
               /blog/ambient-mesh-authorization-policy/f3_hu_bc5544521b8c41dc.webp 760w,
               /blog/ambient-mesh-authorization-policy/f3_hu_e1317dbbf2760728.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f3_hu_72aaf51948e34e94.webp&#34;
               width=&#34;760&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果策略由 ztunnel 执行，你可以通过指定 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 所在的 namespace 和 label selector 选择其作用的工作负载。这类似于 Kubernetes 的 NetworkPolicy，或 Istio sidecar 模式下的策略绑定方式：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;应用对象&lt;/th&gt;
          &lt;th&gt;Namespace&lt;/th&gt;
          &lt;th&gt;Selector&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;网格中所有工作负载&lt;/td&gt;
          &lt;td&gt;istio-system&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;default 命名空间下的所有工作负载&lt;/td&gt;
          &lt;td&gt;default&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;匹配特定标签的工作负载&lt;/td&gt;
          &lt;td&gt;任意命名空间&lt;/td&gt;
          &lt;td&gt;matchLabels&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;而 Waypoint 使用 Kubernetes Gateway API 配置，策略通过 &lt;code&gt;targetRefs&lt;/code&gt; 字段&lt;a href=&#34;https://ambientmesh.io/docs/setup/configure-waypoints/#attach-policies-and-routes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;绑定到 Gateway&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么 Waypoint 使用不同的绑定方式？&lt;/strong&gt;
使用不同的绑定方式可以明确区分不同层级的策略含义，而 &lt;code&gt;targetRefs&lt;/code&gt; 遵循了 Kubernetes Gateway API 的语义。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;请注意，我们并未直接使用“L4 策略”或“L7 策略”的说法，因为 Waypoint 也可以执行 L4 策略。后文将说明为什么你可能希望这么做。&lt;/p&gt;
&lt;h3 id=&#34;访问控制的基础&#34;&gt;访问控制的基础&lt;/h3&gt;
&lt;p&gt;如果某个工作负载没有配置任何授权策略，则默认允许所有访问。一旦存在至少一个包含 &lt;code&gt;ALLOW&lt;/code&gt; 操作的策略，则&lt;strong&gt;所有未匹配任何 &lt;code&gt;ALLOW&lt;/code&gt; 的流量都会被拒绝&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这点非常重要。例如，你允许来自 Gateway 的流量访问某工作负载，后来引入了 Waypoint，则来自 Waypoint 的流量将会被拒绝，除非你更新策略。&lt;/p&gt;
&lt;h3 id=&#34;使用-ztunnel-强制执行策略&#34;&gt;使用 ztunnel 强制执行策略&lt;/h3&gt;
&lt;p&gt;在很多场景下，不部署 Waypoint，仅使用 Ambient Mesh 的 &lt;em&gt;安全叠加层（secure overlay layer）&lt;/em&gt; 是合理的选择。Istio 的 L4 属性（IP、端口、命名空间、身份主体）即可用于授权策略。&lt;/p&gt;
&lt;p&gt;这使得我们能实现最小权限的微分段：即仅允许必要的服务之间互相通信。当某个服务被攻破时，攻击流量也会携带其真实身份。例如，图像处理服务无权访问支付服务后端，可以轻松通过策略限制这种访问。&lt;/p&gt;
&lt;h3 id=&#34;非法策略属性与拒绝流量&#34;&gt;非法策略属性与拒绝流量&lt;/h3&gt;
&lt;p&gt;前面提到，L4 策略属性可以用于 ztunnel 绑定的策略。你甚至可以复用 Istio sidecar 模式下的策略到 ambient 模式中，其中可能包含 L7 属性（如 HTTP 方法或路径）。但由于 ztunnel 无法识别 L7 属性，会发生什么呢？&lt;/p&gt;
&lt;p&gt;简而言之：&lt;strong&gt;ztunnel 会安全失败（fail-safe）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于包含 L7 属性的 &lt;code&gt;DENY&lt;/code&gt; 策略：忽略 L7 部分，仅保留其余部分。&lt;/li&gt;
&lt;li&gt;对于包含 L7 属性的 &lt;code&gt;ALLOW&lt;/code&gt; 策略：L7 匹配规则会被移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样做的结果比原策略更严格。因为只要有 &lt;code&gt;ALLOW&lt;/code&gt; 策略存在，未被匹配的流量就会被默认拒绝。所以最终结果是，所有流量都匹配默认拒绝规则。&lt;/p&gt;
&lt;h3 id=&#34;引入-waypoint-的策略执行&#34;&gt;引入 Waypoint 的策略执行&lt;/h3&gt;
&lt;p&gt;绑定在 Waypoint 与 ztunnel 上的策略存在两个主要区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;targetRefs&lt;/code&gt; 替代 selector；&lt;/li&gt;
&lt;li&gt;支持 L7 属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你将某个工作负载配置为使用 Waypoint 后，它就成为了该工作负载最合适的策略执行位置，即使仅是执行 L4 策略。原因在于 Ambient 模式下的身份工作机制：&lt;/p&gt;
&lt;p&gt;工作负载间的 mTLS 通信是由两端的 ztunnel 管理的：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f4_hu_b31bb5181e403d4f.webp 400w,
               /blog/ambient-mesh-authorization-policy/f4_hu_b9a8b9e01cea2b70.webp 760w,
               /blog/ambient-mesh-authorization-policy/f4_hu_5ef274a3335ee58a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f4_hu_b31bb5181e403d4f.webp&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了让 Waypoint 能够解密和检查流量，它必须终止原有的 mTLS，重新发起一次连接：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f5_hu_bddfcbe26157fcf.webp 400w,
               /blog/ambient-mesh-authorization-policy/f5_hu_393ba6007e31457f.webp 760w,
               /blog/ambient-mesh-authorization-policy/f5_hu_800904b04429a1ce.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f5_hu_bddfcbe26157fcf.webp&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这意味着，服务器端 ztunnel 所见到的源身份是 &lt;strong&gt;Waypoint 的身份&lt;/strong&gt;，而非原始客户端。如果你希望根据真实源身份做出策略判断，策略应部署在 Waypoint 上。&lt;/p&gt;
&lt;h3 id=&#34;只允许来自-waypoint-的连接&#34;&gt;只允许来自 Waypoint 的连接&lt;/h3&gt;
&lt;p&gt;为了确保策略真正通过 Waypoint 执行，必须防止流量绕过 Waypoint。默认情况下，Ambient Mesh 会自动将服务流量路由到 Waypoint，但服务端的 ztunnel 仍接受来自任何客户端的连接。&lt;/p&gt;
&lt;p&gt;某些场景下这没问题，比如 Prometheus 采集某个 Pod 的 metrics，通常是直接连接，而不经过 Waypoint。&lt;/p&gt;
&lt;p&gt;若你需要阻止其他流量，应在 ztunnel 上定义策略，只&lt;a href=&#34;https://ambientmesh.io/docs/security/waypoint-authz/#restricting-workloads-to-only-accept-traffic-from-waypoints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;允许来自指定 Waypoint 的连接&lt;/a&gt;。必要时可&lt;a href=&#34;https://ambientmesh.io/docs/security/waypoint-authz/#exceptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加例外&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Istio 的环境模式 —— 用更少的资源做更多的事！</title>
      <link>https://cloudnativecn.com/blog/istio-more-for-less/</link>
      <pubDate>Wed, 28 Aug 2024 17:35:23 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/istio-more-for-less/</guid>
      <description>&lt;p&gt;随着 Istio 的环境数据平面模式的推出，平台团队可以高效地采用服务网格功能，并以最小的资源和开销影响为终端用户提供增强功能。&lt;/p&gt;
&lt;h2 id=&#34;什么是-istio-环境模式&#34;&gt;什么是 Istio 环境模式？&lt;/h2&gt;
&lt;p&gt;Istio 的&lt;a href=&#34;https://www.solo.io/blog/istio-ambient-mesh-evolution-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;环境模式&lt;/a&gt;最初于 2022 年 9 月发布。它是一种新的数据平面模式 —— 无需 sidecar —— 旨在简化操作、扩大应用兼容性和降低基础设施成本。环境模式将 Istio 的功能分为两个独立的层：零信任安全覆盖层（&lt;em&gt;ztunnel&lt;/em&gt;）和可选的第 7 层处理层（&lt;em&gt;waypoint&lt;/em&gt;）。与 sidecar 相比，分层方法允许用户从无网格逐渐采用到基于 mTLS 的零信任覆盖，再到完整的第 7 层处理，根据需要进行。这为服务网格用户提供了来自同一专用社区的两个出色选择：传统的 sidecar 方法的 Istio 或无 sidecar 的环境模式。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-环境模式&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Istio 环境模式&#34; srcset=&#34;
               /blog/istio-more-for-less/f1_hu_fbe003605aab01db.webp 400w,
               /blog/istio-more-for-less/f1_hu_1b3b1235c2d2cd89.webp 760w,
               /blog/istio-more-for-less/f1_hu_1639fb26de3909e8.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/istio-more-for-less/f1_hu_fbe003605aab01db.webp&#34;
               width=&#34;760&#34;
               height=&#34;327&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Istio 环境模式
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这篇博客中，我们将探讨与资源成本和操作挑战相关的一些示例场景，这些场景在采用服务网格时常常会引起紧张。我们还将讨论如何采用环境模式来应对这些挑战，并改善平台的总拥有成本（TCO）。&lt;/p&gt;
&lt;h2 id=&#34;istio-的环境模式降低资源成本&#34;&gt;Istio 的环境模式降低资源成本&lt;/h2&gt;
&lt;p&gt;默认情况下，Istio 建议为每个 sidecar 分配 0.1 CPU 核心和 128MB 的内存。虽然服务网格的优势众所周知，但在真实生产工作负载中，资源需求很快就会累积起来。&lt;/p&gt;
&lt;p&gt;对于预算紧张的团队来说，遵守这一要求带来了显著的机会成本。他们面临的抉择包括在招聘额外人员或投资于业务的其他领域与承担应用增加的资源成本之间做出决定，这成为一个关键考量。&lt;/p&gt;
&lt;p&gt;务网格有一系列 7 层网络功能，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高级流量管理和路由控制&lt;/li&gt;
&lt;li&gt;在应用层的细粒度安全策略&lt;/li&gt;
&lt;li&gt;高效处理断路器和容错机制&lt;/li&gt;
&lt;li&gt;促进服务发现和动态服务路由的实施&lt;/li&gt;
&lt;li&gt;简化 A/B 测试和金丝雀发布策略的部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而，如果你近期不需要这些功能，或者不是每个服务都需要？这些功能可能被视为附加价值，并可能不符合你的组织需求或成熟度水平。&lt;/p&gt;
&lt;p&gt;让我们考虑一些与实施服务网格成本相关的挑战场景：&lt;/p&gt;
&lt;h4 id=&#34;场景-1-控制螺旋升高的-sidecar-成本&#34;&gt;场景 1: 控制螺旋升高的 sidecar 成本&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;“我们的安全团队要求整个组织采取零信任姿态，因此我们正在考虑采用服务网格。然而，我们发现采用 sidecar 方法将产生额外的成本（在每个应用的资源预留中）。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;为了遵守安全团队的零信任要求，使用 Istio 的环境模式，你无需为每个应用采用一个 sidecar。相反，你可以利用共享的、每节点 ztunnel 组件，它处理零信任网络的职责。然后，当你准备好时，或只针对需要的服务，可以选择安全地、按命名空间处理第 7 层策略。这种选择方法意味着从非 mTLS 到采用 mTLS 的增量成本现在大大降低了。&lt;/p&gt;
&lt;h4 id=&#34;场景-2-减少重复的资源成本&#34;&gt;场景 2: 减少重复的资源成本&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;“我们的组织要求开发、测试和分层环境复制生产设置，以便及早发现问题并维持高质量的发布。采用服务网格意味着每个环境都会产生额外的资源和操作开销，导致整体成本急剧上升。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们经常看到客户环境复制其生产设置，其中较低级别的环境只接收少量的合成流量 —— 或在某些情况下根本没有流量。这对环境所有者来说是一个挑战，他们需要证明在这些流量低或无流量的环境中运行服务网格的价值。分配给 sidecar 代理的资源很大程度上被浪费，导致利用效率低下和更高的支出。通过移除 sidecar 的要求，环境模式降低了基础资源需求，使得在复制生产环境的标准下实施零信任更具成本效益。&lt;/p&gt;
&lt;h4 id=&#34;场景-3-在不同架构中驾驭变化的速率模式&#34;&gt;场景 3: 在不同架构中驾驭变化的速率模式&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;“我们有一个复杂的微服务架构，不同的服务经历广泛不同的流量模式。一些服务每秒处理数千个请求，而其他服务只处理几百个。尽管如此，sidecar 代理通常在所有服务中分配相同的资源，导致资源利率不高。高流量服务遭受性能瓶颈，而低流量服务则浪费资源。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们看到的另一个常见场景是，sidecar 代理通常采用一刀切的方法进行配置，导致资源利用不效率。在缺乏机制（例如，在应用的 Helm chart中暴露 Istio pod 注解）来覆盖默认代理资源预留请求的情况下，以及开发团队缺乏使用可观察性数据来配置和调整这些资源预留的经验的情况下，应用开发团队能否成功取决于他们的应用特征。彻底移除 sidecar 消除了由资源利用不足造成的低效。此外，由于 ztunnel 是用 Rust 构建的高性能组件，它仍然可以处理高吞吐量的情况。&lt;/p&gt;
&lt;h4 id=&#34;场景-4-实施服务网格以在边缘环境中实现零信任&#34;&gt;场景 4: 实施服务网格以在边缘环境中实现零信任&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;“在资源有限的边缘环境中部署服务网格具有挑战性，因为 sidecar 带来额外的开销。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;边缘计算将数据处理更靠近数据源，通常在较不安全或不受信任的网络中，且资源有限。实现零信任确保每次互动都经过身份验证和授权，显著降低了违规的风险，但在资源有限的环境中可能很困难。通过利用不需要 sidecar 的资源开销的 Istio 环境模式服务网格，IoT、零售和医疗保健等边缘计算用例可以真实地考虑实现零信任原则并达成合规，以增强其边缘环境的安全策略。&lt;/p&gt;
&lt;p&gt;这些只是 Istio 的环境模式可以帮助解决的一些常见 sidecar 挑战。Istio 的环境模式还可以帮助驾驭的其他资源障碍包括减少 sidecar 部署经历的应用程序停机时间和解决出口配置的复杂性。&lt;/p&gt;
&lt;h2 id=&#34;istio-的环境模式有助于简化应用操作&#34;&gt;Istio 的环境模式有助于简化应用操作&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/istio-more-for-less/f2_hu_134f5975cbce2f40.webp 400w,
               /blog/istio-more-for-less/f2_hu_458f76de5d0f991a.webp 760w,
               /blog/istio-more-for-less/f2_hu_d9075ab05c3b5341.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/istio-more-for-less/f2_hu_134f5975cbce2f40.webp&#34;
               width=&#34;760&#34;
               height=&#34;220&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;安全地重启服务以升级 sidecar 版本涉及三种不同的设置：控制 Envoy 排出和拒绝新连接，为活动连接关闭提供宽限时间，以及在所有活动连接关闭时终止 pod。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们看到的服务网格采用中最常见的挑战之一是应用所有者管理 sidecar 生命周期的操作开销增加。例如，在从 Istio 1.19 升级到 1.20 时，集群中的每个应用 pod 都必须重新启动以应用新的代理版本。你必须考虑从工作负载中排出流量、终止连接以及如果 pod 因暂时不可用的依赖而无法重新启动会发生什么。&lt;/p&gt;
&lt;p&gt;采用无 sidecar 的服务网格架构时，所有这些考虑都消失了！环境模式显著减少了操作负担，为开发人员提供了更多时间专注于开发应用功能，而不是管理大规模代理的基础设施相关问题。&lt;/p&gt;
&lt;p&gt;为了帮助具体化这一点，让我们考虑一些与操作服务网格相关的挑战场景：&lt;/p&gt;
&lt;h4 id=&#34;场景-1-通过升级-istio-部署解决复杂性&#34;&gt;场景 1: 通过升级 Istio 部署解决复杂性&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;“我们有一个复杂的 Istio 部署，其中包含许多自定义设置，升级到新版本一直是一个主要的痛点。升级过程经常导致停机、配置偏移和意外问题，这些都会扰乱我们的操作。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Istio 社区的支持时间表目前遵循 N-1 支持状态，这相当于大约每 7-9 个月升级一次 Istio。Istio 的频繁升级可能涉及高度参与，消除 sidecar 大大减少了仅因少数组件升级和管理而扰乱业务操作的风险。&lt;/p&gt;
&lt;p&gt;通过专注于节点级管理而不是服务级 sidecar，操作团队可以更高效地执行升级，并且无需依赖或协调应用团队就更有信心。值得考虑的是，操作成本节省可能真的很可观。例如，如果两名工程师完成 Istio 升级所需的时间从 16 小时减少到仅 2 小时，时间和成本的节省可能是实质性的。&lt;/p&gt;
&lt;h4 id=&#34;场景-2-管理-sidecar-的人才和资源有限&#34;&gt;场景 2: 管理 sidecar 的人才和资源有限&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;“让新的开发团队使用服务网格耗时且需要广泛培训 sidecar 管理。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;开发人员经常表达对管理 sidecar 的挫败感，多年来的众多社区调查已证明这一点。Istio 的环境模式直接解决了这个问题；通过完全消除 sidecar，不再需要对 sidecar 管理进行广泛培训。使用无 sidecar 的服务网格的用户可以信任，如果应用部署在集群上，其流量默认加密。&lt;/p&gt;
&lt;h4 id=&#34;场景-3-集成遗留应用导致中断&#34;&gt;场景 3: 集成遗留应用导致中断&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;“我们有大量对业务运营至关重要的遗留应用。引入基于 sidecar 的服务网格会扰乱这些应用并需要广泛的修改。”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用 Istio 的环境模式，将服务添加到网格现在只需要在命名空间或 pod 上应用一个标签。然后，ztunnel 会拦截流量，而无需重启应用。这大大简化了对容忍中断或修改程度低的关键应用的引导，这些应用此前并未被视为网格的强有力候选者。应用所有者不再需要关心其工作负载中的 sidecar 的存在、sidecar 的生命周期或 sidecar 资源的成本。&lt;/p&gt;
&lt;h2 id=&#34;比较环境模式的使用成本&#34;&gt;比较环境模式的使用成本&lt;/h2&gt;
&lt;p&gt;为了评估服务网格的资源使用情况，我们将在规模上部署一个示例应用。这代表了用户在生产环境中实际使用服务网格的方式，并基于我们与客户关于他们如何使用 Istio 和 Gloo Mesh 的讨论。&lt;/p&gt;
&lt;p&gt;我们的测试工作负载代表了一个在 Namespace-Per-Tenant 模式下配置的应用，其中每个租户在一个隔离的命名空间中操作，以确保资源和安全分离。该应用设计为经典的 3 层扇出架构，其中一个初始服务向多个下游服务发送请求，与客户端针对单个服务的简单基准相比，提供了更具代表性的预期性能评估。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/istio-more-for-less/f3_hu_21ef559d5d5064b1.webp 400w,
               /blog/istio-more-for-less/f3_hu_856f16a0651caa9c.webp 760w,
               /blog/istio-more-for-less/f3_hu_45f414b2cc189f9a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/istio-more-for-less/f3_hu_21ef559d5d5064b1.webp&#34;
               width=&#34;760&#34;
               height=&#34;597&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们在每个租户中部署了 8 个容器，分为两个“应用”，每个应用有四个 pod，安排在三层中。在集群中，我们总共有 200 个微服务。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/istio-more-for-less/f4_hu_bc69560e7cda007a.webp 400w,
               /blog/istio-more-for-less/f4_hu_63c5977b07748f89.webp 760w,
               /blog/istio-more-for-less/f4_hu_45646223a4009556.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/istio-more-for-less/f4_hu_bc69560e7cda007a.webp&#34;
               width=&#34;760&#34;
               height=&#34;596&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了确保“保证”的服务质量类别，每个应用都配置为具有相同的 pod 请求和限制：0.7 CPU 核心和 500MB 内存。（我们使用的应用是 &lt;a href=&#34;https://github.com/nicholasjackson/fake-service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fake-service&lt;/a&gt;，一个由 CNCF TAG Network 联合主席 Nic Jackson 构建的用于测试服务网格的示例应用。）&lt;/p&gt;
&lt;p&gt;考虑到用户倾向于以中等利用率运行他们的集群，我们将我们基线应用在负载下的目标 CPU 利用率设为 &amp;lt; 30%，这相当于一个拥有 n2-standard-8 实例的 21 节点集群。&lt;/p&gt;
&lt;p&gt;为了生成合成负载，我们使用 &lt;a href=&#34;https://github.com/tsenart/vegeta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vegeta&lt;/a&gt;，每个应用有一个实例（每个命名空间两个）。还有四个节点用于负载生成器，向每个第 1 层副本每秒发送 200 个请求。这些请求在显示的边缘生成后续请求到第 2 层和第 3 层，给每个租户带来 2000 RPS 的负载，整个集群总共 50000 RPS。我们确保我们在测试中看到的延迟结果符合我们定义的预期，没有请求在 p50 超过 10ms 或在 p95 超过 15ms。&lt;/p&gt;
&lt;p&gt;我们对我们的应用进行了基线读数，我们可以从网格数字中减去，以了解每个选项的成本。&lt;/p&gt;
&lt;p&gt;然后，我们分别在 Istio sidecar 和环境模式下部署了我们的应用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/solo-io/doing-more-for-less&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;你可以在 GitHub 上找到我们的脚本和输出&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;istio-的环境模式比-sidecar-节省超过-70&#34;&gt;Istio 的环境模式比 Sidecar 节省超过 70%&lt;/h2&gt;
&lt;p&gt;除了我们上面列出的所有操作节省之外，&lt;strong&gt;在环境模式下运行的 Istio 显著地比在 sidecar 模式下运行的 Istio 更便宜&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/istio-more-for-less/f5_hu_cfb3808eb64dd11c.webp 400w,
               /blog/istio-more-for-less/f5_hu_f4b5d268848f7193.webp 760w,
               /blog/istio-more-for-less/f5_hu_1d341382d9ab2242.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/istio-more-for-less/f5_hu_cfb3808eb64dd11c.webp&#34;
               width=&#34;600&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;即使在一个负载重的、配置良好的集群中，L4 下的环境模式使用的 CPU &lt;strong&gt;比 sidecar 模式少 73%&lt;/strong&gt;。在我们的示例集群中，Istio 的环境模式每个命名空间减少了 1.28 个核心。鉴于我们 25 个命名空间的环境，这相当于节省 32 个核心，或相当于 4 台 8 核机器。那是每个月节省 1100 美元！&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/istio-more-for-less/f6_hu_c47993c77af70823.webp 400w,
               /blog/istio-more-for-less/f6_hu_2f21f2644ca7e18.webp 760w,
               /blog/istio-more-for-less/f6_hu_2b812e7647f63277.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/istio-more-for-less/f6_hu_c47993c77af70823.webp&#34;
               width=&#34;600&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;而且，CPU 利用率极低：仅增加 4.78% 的 CPU 以在我们的工作负载中添加 mTLS，而添加 sidecar 相比增加了 24.3%。假设你的集群中的所有节点都至少有 5% 的空闲开销，&lt;strong&gt;你可以在不增加任何额外节点的情况下安装 Istio 的环境模式，从而使其实际上免费运行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户希望在 Istio 的环境模式下实施完整的第 7 层功能和特性，可以放心地进行。你可以按命名空间选择加入，但即使我们为所有租户运行了一个 waypoint —— 与完整的 sidecar 部署的特性相当 —— 我们仍然看到了实质性的 CPU 节省。请留意我们即将发布的博客，它将更深入地讨论第 7 层的成本和价值。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;我们的研究验证了构建环境数据平面的目标：简化服务网格的操作（无 sidecar），以及降低基础设施成本（与 sidecars 相比的显著成本节省，从基线上满足 mTLS 要求的额外成本很少）。&lt;/p&gt;
&lt;p&gt;如果用户决定通过采用 waypoint 代理采用完整的第 7 层功能集，资源成本将远低于 Istio 的传统 sidecar 部署，更不用说更易于管理和改善开发人员的体验了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
