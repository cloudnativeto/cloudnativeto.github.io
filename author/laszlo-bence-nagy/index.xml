<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Laszlo Bence Nagy | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/laszlo-bence-nagy/</link>
      <atom:link href="https://cloudnative.to/author/laszlo-bence-nagy/index.xml" rel="self" type="application/rss+xml" />
    <description>Laszlo Bence Nagy</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/laszlo-bence-nagy/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Laszlo Bence Nagy</title>
      <link>https://cloudnative.to/author/laszlo-bence-nagy/</link>
    </image>
    
    <item>
      <title>Istio 熔断器解析</title>
      <link>https://cloudnative.to/blog/istio-circuit-breaking/</link>
      <pubDate>Tue, 24 Sep 2019 18:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/istio-circuit-breaking/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://banzaicloud.com/blog/istio-circuit-breaking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;作者简要介绍了熔断的概念，然后以实战演练的方式分别演示了如何通过 Backyards UI、CLI 等方式创建并设置熔断功能。注：Backyards 是 Banzai Cloud 开发的一款基于 Istio 的服务网格产品，本文是该产品功能介绍系列中的一篇。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Istio 因灵活的可观察性和安全的服务间通信受到了赞许。然而，其他更重要的功能才真正使得 Istio 成为了服务网格里的瑞士军刀，当遇到运行时长、延迟和错误率等 SLO 问题时，服务间的流量管理能力是至关重要的。&lt;/p&gt;
&lt;p&gt;在今年早些时候发布 &lt;a href=&#34;https://github.com/banzaicloud/istio-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio operator&lt;/a&gt; 时，我们的目标（除了管理 Istio 的安装和升级）是为这些出色的流量路由特性提供支持，同时使所有的功能都更加易用。最后，我们创建了一个简单且自动化的服务网格&lt;a href=&#34;https://banzaicloud.com/blog/istio-the-easy-way/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backyards&lt;/a&gt;，它在 Istio operator 之上提供了管理 UI、&lt;a href=&#34;https://github.com/banzaicloud/backyards-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CLI&lt;/a&gt; 和 GraphQL API 的能力。Backyards 集成到了 Banzai Cloud 的容器管理平台 &lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;中，也可以作为一个单一的产品独立工作。当然，将 Backyards 与 Pipeline 一起使用会为用户提供特别的好处（比如在&lt;a href=&#34;https://banzaicloud.com/blog/istio-multicluster-the-easy-way/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多云和混合云&lt;/a&gt;环境中管理应用程序），Backyards 也可以被用于任何 Kubernetes 的安装环境。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们已经发布了一些 Backyards 相关特性的文章比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/istio-canary/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Backyards 自动金丝雀部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/istio-traffic-shifting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流量切换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;熔断失败是一个选项&#34;&gt;熔断：失败是一个选项&lt;/h2&gt;
&lt;p&gt;在微服务架构中，服务可能会用不同的语言实现并部署在多个节点或集群上，具有不同的响应时间或故障率。如果服务成功（并且及时地）响应了请求，那么它的性能就算是令人满意的。但现实情况并非如此，下游客户端应该在上游服务过于缓慢时受到保护。反之，上游服务也必须被保护，以免被积压的请求拖垮。在多客户端下情况会更加复杂，并可能导致整个基础设施出现一系列的连锁故障。这一问题的解决方案是采用经过时间检验的熔断器模式。&lt;/p&gt;
&lt;p&gt;一个熔断器可以有三种状态：关闭、打开和半开，默认情况下处于关闭状态。在关闭状态下，无论请求成功或失败，到达预先设定的故障数量阈值前，都不会触发熔断。而当达到阈值时，熔断器就会打开。当调用处于打开状态的服务时，熔断器将断开请求，这意味着它会直接返回一个错误，而不去执行调用。通过在客户端断开下游请求的方式，可以在生产环境中防止级联故障的发生。在经过事先配置的超时时长后，熔断器进入半开状态，这种状态下故障服务有时间从其中断的行为中恢复。如果请求在这种状态下继续失败，则熔断器将再次打开并继续阻断请求。否则熔断器将关闭，服务将被允许再次处理请求。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-circuit-breaking&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Circuit Breaking&#34; srcset=&#34;
               /blog/istio-circuit-breaking/circuit-breaking_huc06816c0f4ee2bfebfdd9819e2518731_126456_32995f55fb67437952b5b5b2ec26071f.webp 400w,
               /blog/istio-circuit-breaking/circuit-breaking_huc06816c0f4ee2bfebfdd9819e2518731_126456_fd423b5f3d3e1a26453dde63813d1373.webp 760w,
               /blog/istio-circuit-breaking/circuit-breaking_huc06816c0f4ee2bfebfdd9819e2518731_126456_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-circuit-breaking/circuit-breaking_huc06816c0f4ee2bfebfdd9819e2518731_126456_32995f55fb67437952b5b5b2ec26071f.webp&#34;
               width=&#34;760&#34;
               height=&#34;285&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Circuit Breaking
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;istiohttpsistioio中的熔断&#34;&gt;&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;中的熔断&lt;/h2&gt;
&lt;p&gt;Istio 的 &lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/circuit-breaking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;熔断&lt;/a&gt; 可以在 &lt;a href=&#34;https://istio.io/docs/reference/config/networking/v1alpha3/destination-rule/#TrafficPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流量策略&lt;/a&gt; 中配置。Istio 的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义资源&lt;/a&gt;&lt;code&gt;Destination Rule&lt;/code&gt;里，&lt;code&gt;TrafficPolicy&lt;/code&gt;字段下有两个和熔断相关的配置： &lt;a href=&#34;https://istio.io/docs/reference/config/networking/v1alpha3/destination-rule/#ConnectionPoolSettings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ConnectionPoolSettings&lt;/a&gt; 和 &lt;a href=&#34;https://istio.io/docs/reference/config/networking/v1alpha3/destination-rule/#OutlierDetection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OutlierDetection&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConnectionPoolSettings&lt;/code&gt;可以为服务配置连接的数量。&lt;code&gt;OutlierDetection&lt;/code&gt;用来控制从负载均衡池中剔除不健康的实例。&lt;/p&gt;
&lt;p&gt;例如，&lt;code&gt;ConnectionPoolSettings&lt;/code&gt;控制请求的最大数量，挂起请求，重试或者超时；&lt;code&gt;OutlierDetection&lt;/code&gt; 设置服务被从连接池剔除时发生错误的请求数，可以设置最小逐出时间和最大逐出百分比。有关完整的字段列表，请参考&lt;a href=&#34;https://istio.io/docs/reference/config/networking/v1alpha3/destination-rule/#TrafficPolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Istio 在底层使用了&lt;a href=&#34;https://www.envoyproxy.io/learn/circuit-breaking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 的熔断特性&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们来看看&lt;code&gt;Destination Rule&lt;/code&gt;中有关熔断的配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;notifications&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;notifications&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trafficPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connectionPool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxConnections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http1MaxPendingRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxRequestsPerConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;outlierDetection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;consecutiveErrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;interval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;baseEjectionTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;3m&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxEjectionPercent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用&lt;code&gt;ConnectionPoolSettings&lt;/code&gt;字段中的这些设置，在给定的时间内只能和&lt;code&gt;notifications&lt;/code&gt; 服务建立一个连接：每个连接最多只能有一个挂起的请求。如果达到阈值，熔断器将开始阻断请求。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutlierDetection&lt;/code&gt;部分的设置用来检查每秒调用服务是否有错误发生。如果有，则将服务从负载均衡池中逐出至少三分钟（100% 最大弹出百分比表示，如果需要，所有的服务实例都可以同时被逐出）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在手动创建&lt;code&gt;Destination Rule&lt;/code&gt;资源时有一件事需要特别注意，那就是是否为该服务启用了 mTLS。如果是的话，还需要在&lt;code&gt;Destination Rule&lt;/code&gt;中设置如下字段，否则当调用&lt;code&gt;movies&lt;/code&gt;服务时，调用方可能会收到 503 错误：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;trafficPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ISTIO_MUTUAL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;还可以为特定&lt;a href=&#34;https://istio.io/docs/tasks/security/authn-policy/#namespace-wide-policy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;namespace&lt;/a&gt; 或特定&lt;a href=&#34;https://istio.io/docs/tasks/security/authn-policy/#service-specific-policy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务&lt;/a&gt;启用&lt;a href=&#34;https://istio.io/docs/tasks/security/authn-policy/#globally-enabling-istio-mutual-tls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;全局&lt;/a&gt;的 mTLS。你应该了解这些设置以便确定是否把&lt;code&gt;trafficPolicy.tls.mode&lt;/code&gt;设置为 &lt;code&gt;ISTIO_MUTUAL&lt;/code&gt;。更重要的是，当你试图配置一个完全不同的功能（例如熔断）时，很容易忘记设置此字段。&lt;/p&gt;
&lt;p&gt;提示：在创建&lt;code&gt;Destination Rule&lt;/code&gt;前总是考虑 mTLS！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了触发熔断，让我们同时从两个连接来调用 &lt;code&gt;notifications&lt;/code&gt;服务。&lt;code&gt;maxConnections&lt;/code&gt;字段被设置为 1。这时应该会看到 503 与 200 的响应同时到达。&lt;/p&gt;
&lt;p&gt;当一个服务从客户端接收到的负载大于它所能处理的负载（如熔断器中配置的那样），它会在调用之前返回 503 错误。这是防止错误级联的一种方法。&lt;/p&gt;
&lt;h3 id=&#34;监控&#34;&gt;监控&lt;/h3&gt;
&lt;p&gt;在生产环境中必须要监控你的服务，以便得到通知并能够在系统发生错误时进行检查。因此，如果你已经为你的服务配置了一个熔断器，你就会想知道它什么时候跳闸；熔断器拦截了百分之多少的请求；何时触发，来自哪个下游客户端？如果能够回答这些问题，你就可以确定熔断器是否工作正常，并根据需要微调配置，或者优化服务来处理额外的并发请求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：如果你继续阅读，可以在 Backyards UI 中看到和配置所有的这些设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们看看怎样在 Istio 里确定熔断器跳闸：&lt;/p&gt;
&lt;p&gt;熔断器跳闸时的响应码是 503，因此你无法仅根据该响应与其他的 503 错误区分开来。在 Envoy 中，有一个计数器叫&lt;code&gt;upstream_rq_pending_overflow&lt;/code&gt;，它记录了熔断且失败的请求总数。如果为你的服务深入研究 Envoy 的统计数据就可以获得这些信息，但这并不容易。&lt;/p&gt;
&lt;p&gt;除了响应代码，Envoy 还返回&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log#config-access-log-format-response-flags&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;响应标志&lt;/a&gt; ，并且存在一个专用响应标志来表示熔断器跳闸：&lt;strong&gt;UO&lt;/strong&gt;。如果这个标志只能通过 Envoy 的日志获得，这将不会特别有用。幸运的是，它在 Istio 中&lt;a href=&#34;https://github.com/istio/istio/pull/9945&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;实现&lt;/a&gt;了，因此响应标志在 Istio 指标中是可用的并且能被 Prometheus 获取到。&lt;/p&gt;
&lt;p&gt;熔断器的跳闸可以像这样查询到：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-basic&#34; data-lang=&#34;basic&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;vg&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;istio_requests_total&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;response_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;503&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;response_flags&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;UO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;by&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;source_workload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;destination_workload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;vg&#34;&gt;response_code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;backyardshttpsbanzaicloudcomblogistio-the-easy-way的熔断更简单&#34;&gt;&lt;a href=&#34;https://banzaicloud.com/blog/istio-the-easy-way/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backyards&lt;/a&gt;的熔断更简单&lt;/h2&gt;
&lt;p&gt;使用 Backyards 时，你不需要手动编辑&lt;code&gt;Destination Rules&lt;/code&gt;来设置熔断。可以通过一个方便的 UI 界面或者（如果你愿意的话）是&lt;a href=&#34;https://github.com/banzaicloud/backyards-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backyards CLI&lt;/a&gt; 命令行工具来达到相同的结果。&lt;/p&gt;
&lt;p&gt;不必担心由于忘记把&lt;code&gt;trafficPolicy.tls.mode&lt;/code&gt; 设置为 &lt;code&gt;ISTIO_MUTUAL&lt;/code&gt;而配错了&lt;code&gt;Destination Rules&lt;/code&gt;。Backyards 会为你解决这个问题；它会找到启用了 mTLS 的服务并相应地设置上述字段。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面只是 Backyards 验证特性的一个例子，这能避免你设置错误。后面还有更多的特性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在此之上，你可以看到服务和请求的可视化界面和活动仪表板，因此可以轻松地确定有多少请求被熔断器触发，以及它来自哪个调用者和何时触发。&lt;/p&gt;
&lt;h2 id=&#34;熔断实战&#34;&gt;熔断实战&lt;/h2&gt;
&lt;h3 id=&#34;创建一个集群&#34;&gt;创建一个集群&lt;/h3&gt;
&lt;p&gt;首先，我们需要一个 Kubernetes 集群。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我通过&lt;a href=&#34;https://beta.banzaicloud.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline platform&lt;/a&gt;的免费开发版本在 GKE 上创建了一个 Kubernetes 集群。如果你也想这样做，可以在我们支持的五个云提供商或使用&lt;a href=&#34;https://beta.banzaicloud.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;在本地创建集群。否则，你需要提供自己的 Kubernetes 集群。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;安装-backyards&#34;&gt;安装 BACKYARDS&lt;/h3&gt;
&lt;p&gt;在一个新集群安装 Istio，Backyards 和 demo 应用的最简单的办法是使用&lt;a href=&#34;https://github.com/banzaicloud/backyards-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backyards CLI&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;你只需要执行下面的命令（集群必须设置了&lt;code&gt;KUBECONFIG&lt;/code&gt;）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards install -a --run-demo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令首先使用我们开源的&lt;a href=&#34;https://github.com/banzaicloud/istio-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio operator&lt;/a&gt;安装 Istio，然后安装 Backyards 和 demo 应用程序。安装完成后，Backyards UI 将自动打开并向 demo 应用发送一些流量。通过这个简单的命令，你可以看到 Backyards 在几分钟内启动了一个全新的 Istio 集群！试试吧！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你也可以按顺序执行所有这些步骤。Backyards 需要一个 Istio 集群——如果没有，可以通过&lt;code&gt;$ backyards istio install&lt;/code&gt;安装。一旦安装了 Istio，就可以使用&lt;code&gt;$ backyards install&lt;/code&gt;安装 Backyards。最后，使用&lt;code&gt;$ backyards demoapp install&lt;/code&gt;部署 demo 应用程序。&lt;/p&gt;
&lt;p&gt;提示：Backyards 是&lt;a href=&#34;https://github.com/banzaicloud/pipeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipeline&lt;/a&gt;平台的核心组件——可以尝试&lt;a href=&#34;https://beta.banzaicloud.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开发者版本&lt;/a&gt;（Service Mesh 标签页）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用-backyards-ui-创建熔断&#34;&gt;使用 BACKYARDS UI 创建熔断&lt;/h3&gt;
&lt;h4 id=&#34;配置熔断器&#34;&gt;配置熔断器&lt;/h4&gt;
&lt;p&gt;你不需要手动创建或编辑&lt;code&gt;Destination Rule&lt;/code&gt;，可以很容易的在 UI 界面中改变熔断的配置。让我们先创建一个 demo。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正如你将看到的，Backyards（与 Kiali 相比）不仅是为可观察性构建的 web UI，而且是具有丰富功能的服务网格管理工具，支持单集群和多集群，并且具有强大的 CLI 和 GraphQL API。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-circuit-breaking-set&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Circuit Breaking set&#34; srcset=&#34;
               /blog/istio-circuit-breaking/circuit-breaking-set_hu852d66a96a4d09996821d17516fe81cc_385391_d06ae8c8f1dec33aa7a9b333a905ca1e.webp 400w,
               /blog/istio-circuit-breaking/circuit-breaking-set_hu852d66a96a4d09996821d17516fe81cc_385391_770d7bb1bc3f2901252c27f467689aa1.webp 760w,
               /blog/istio-circuit-breaking/circuit-breaking-set_hu852d66a96a4d09996821d17516fe81cc_385391_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-circuit-breaking/circuit-breaking-set_hu852d66a96a4d09996821d17516fe81cc_385391_d06ae8c8f1dec33aa7a9b333a905ca1e.webp&#34;
               width=&#34;760&#34;
               height=&#34;475&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Circuit Breaking set
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;查看熔断器设置&#34;&gt;查看熔断器设置&lt;/h4&gt;
&lt;p&gt;你不需要通过&lt;code&gt;Destination Rule&lt;/code&gt;（例如通过 kubectl）来查看熔断器的配置，当你点击&lt;code&gt;notification&lt;/code&gt; 服务图标并切换&lt;code&gt;SHOW CONFIGS&lt;/code&gt;滑块时，可以在 Backyards UI 的右侧看到它们。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-circuit-breaking-view&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Circuit Breaking view&#34; srcset=&#34;
               /blog/istio-circuit-breaking/circuit-breaking-view_hu852d66a96a4d09996821d17516fe81cc_330824_73786e6a0a3100f3b79029983eb7803c.webp 400w,
               /blog/istio-circuit-breaking/circuit-breaking-view_hu852d66a96a4d09996821d17516fe81cc_330824_1f7f639edbfb73a841d415f40f8330a7.webp 760w,
               /blog/istio-circuit-breaking/circuit-breaking-view_hu852d66a96a4d09996821d17516fe81cc_330824_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-circuit-breaking/circuit-breaking-view_hu852d66a96a4d09996821d17516fe81cc_330824_73786e6a0a3100f3b79029983eb7803c.webp&#34;
               width=&#34;760&#34;
               height=&#34;475&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Circuit Breaking view
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;监控熔断器&#34;&gt;监控熔断器&lt;/h4&gt;
&lt;p&gt;根据刚才的设置，当两个连接同时产生流量时，熔断器将发出跳闸请求。在 Backyards UI 中，你将看到图形的边缘出现了红色。如果单击该服务，你将了解有关错误的更多信息，并将看到两个专门用来显示熔断器跳闸的实时 Grafana 仪表板。&lt;/p&gt;
&lt;p&gt;第一个仪表板展示了熔断器触发的总请求的百分比。当没有熔断器错误，而你的服务工作正常，这张图将显示&lt;code&gt;0%&lt;/code&gt;。否则，你将能够立即看到有多少请求被熔断器触发。&lt;/p&gt;
&lt;p&gt;第二个仪表板提供了由源熔断器引起的跳闸故障。如果没有发生跳闸，则此图中不会出现尖峰。否则，你将看到哪个服务导致了跳闸，何时跳闸，以及跳闸次数。可以通过此图来追踪恶意的客户端。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-circuit-breaking-trip&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Circuit Breaking trip&#34; srcset=&#34;
               /blog/istio-circuit-breaking/circuit-breaking-trip_hu852d66a96a4d09996821d17516fe81cc_362237_9a6a6fe263d271a5db56d1aa527345e2.webp 400w,
               /blog/istio-circuit-breaking/circuit-breaking-trip_hu852d66a96a4d09996821d17516fe81cc_362237_edaa83bef44730afceba75511266a89a.webp 760w,
               /blog/istio-circuit-breaking/circuit-breaking-trip_hu852d66a96a4d09996821d17516fe81cc_362237_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-circuit-breaking/circuit-breaking-trip_hu852d66a96a4d09996821d17516fe81cc_362237_9a6a6fe263d271a5db56d1aa527345e2.webp&#34;
               width=&#34;760&#34;
               height=&#34;475&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Circuit Breaking trip
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些是实时的 Grafana 仪表盘，用于显示熔断相关的信息。在默认情况下 Backyards 集成了 Grafana 和 Prometheus——还有更多的仪表板可以帮助你深入查看服务的指标。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;移除熔断器配置&#34;&gt;移除熔断器配置&lt;/h4&gt;
&lt;p&gt;可以通过 &lt;code&gt;Remove&lt;/code&gt; 按钮很容易的移除熔断配置。&lt;/p&gt;
&lt;h4 id=&#34;backyards-ui-的熔断实战&#34;&gt;Backyards UI 的熔断实战&lt;/h4&gt;
&lt;p&gt;这个&lt;a href=&#34;https://www.youtube.com/embed/JH2xRv4a37M&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;视频&lt;/a&gt;总结了所有这些 UI 操作（译者注：视频来自 YouTube）&lt;/p&gt;
&lt;h3 id=&#34;使用backyards-clihttpsgithubcombanzaicloudbackyards-cli创建熔断&#34;&gt;使用&lt;a href=&#34;https://github.com/banzaicloud/backyards-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BACKYARDS-CLI&lt;/a&gt;创建熔断&lt;/h3&gt;
&lt;p&gt;从经验来看，可以从 UI 界面做的事一定也可以通过 &lt;a href=&#34;https://github.com/banzaicloud/backyards-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backyards CLI&lt;/a&gt; 命令行工具完成。&lt;/p&gt;
&lt;h4 id=&#34;配置熔断&#34;&gt;配置熔断&lt;/h4&gt;
&lt;p&gt;让我们再做一次创建熔断的测试，这次通过 CLI 命令行。&lt;/p&gt;
&lt;p&gt;可以以交互模式进行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards r cb &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; backyards-demo/notifications
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Maximum number of HTTP1/TCP connections &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? TCP connection timeout 3s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Maximum number of pending HTTP requests &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Maximum number of requests &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Maximum number of requests per connection &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Maximum number of retries &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Number of errors before a host is ejected &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Time interval between ejection sweep analysis 1s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Minimum ejection duration 3m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Maximum ejection percentage &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0043&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; circuit breaker rules successfully applied to &lt;span class=&#34;s1&#34;&gt;&amp;#39;backyards-demo/notifications&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connections  Timeout  Pending Requests  Requests  RPC  Retries  Errors  Interval  Ejection &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;  percentage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            3s       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                 &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;       1s        3m             &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者用非交互模式，指定要设置的值：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards r cb &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; backyards-demo/notifications --non-interactive --max-connections&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --max-pending-requests&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --max-requests-per-connection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --consecutiveErrors&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; --interval&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1s --baseEjectionTime&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3m --maxEjectionPercent&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connections  Timeout  Pending Requests  Requests  RPC  Retries  Errors  Interval  Ejection &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;  percentage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            3s       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                 &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;       1s        3m             &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;命令执行后，熔断配置会立刻获取到并显示出来。&lt;/p&gt;
&lt;h4 id=&#34;查看熔断设置&#34;&gt;查看熔断设置&lt;/h4&gt;
&lt;p&gt;你可以用下面的命令通过 namespace 来列出熔断的设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards r cb get backyards-demo/notifications
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Connections  Timeout  Pending Requests  Requests  RPC  Retries  Errors  Interval  Ejection &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;  percentage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            3s       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                 &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;       1s        3m             &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况结果以表格的方式显示，也支持 JSON 或者 YMAL 格式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards r cb get backyards-demo/notifications -o json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;maxConnections&amp;#34;&lt;/span&gt;: 1,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;connectTimeout&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;3s&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;http1MaxPendingRequests&amp;#34;&lt;/span&gt;: 1,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;http2MaxRequests&amp;#34;&lt;/span&gt;: 1024,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;maxRequestsPerConnection&amp;#34;&lt;/span&gt;: 1,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;maxRetries&amp;#34;&lt;/span&gt;: 1024,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;consecutiveErrors&amp;#34;&lt;/span&gt;: 5,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;interval&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;1s&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;baseEjectionTime&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;3m&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;maxEjectionPercent&amp;#34;&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards r cb get backyards-demo/notifications -o yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  maxConnections: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  connectTimeout: 3s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  http1MaxPendingRequests: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  http2MaxRequests: &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  maxRequestsPerConnection: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  maxRetries: &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  consecutiveErrors: &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  interval: 1s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  baseEjectionTime: 3m
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  maxEjectionPercent: &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;监控熔断&#34;&gt;监控熔断&lt;/h4&gt;
&lt;p&gt;要从 CLI 中查看和前面 Grafana UI 界面类似的仪表板，可以通过从多个连接调用服务来触发跳闸，执行命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards r cb graph backyards-demo/notifications
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到类似下面的结果：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-circuit-breaking-trip-cli&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Circuit Breaking trip cli&#34; srcset=&#34;
               /blog/istio-circuit-breaking/circuit-breaking-trip-cli_hu55b33ca420c42d03a1bf58ab84c87b66_292554_e94afc0e48b4220774d28f9b64a8c227.webp 400w,
               /blog/istio-circuit-breaking/circuit-breaking-trip-cli_hu55b33ca420c42d03a1bf58ab84c87b66_292554_6cdc8f8ebd9e98c75f1c6121213cc6e0.webp 760w,
               /blog/istio-circuit-breaking/circuit-breaking-trip-cli_hu55b33ca420c42d03a1bf58ab84c87b66_292554_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-circuit-breaking/circuit-breaking-trip-cli_hu55b33ca420c42d03a1bf58ab84c87b66_292554_e94afc0e48b4220774d28f9b64a8c227.webp&#34;
               width=&#34;760&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Circuit Breaking trip cli
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;移除熔断配置&#34;&gt;移除熔断配置&lt;/h4&gt;
&lt;p&gt;移除熔断执行下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards r cb delete backyards-demo/notifications
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0000&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; current settings
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connections  Timeout  Pending Requests  Requests  RPC  Retries  Errors  Interval  Ejection &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;  percentage
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;            3s       &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                 &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;1024&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;       1s        3m             &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;? Do you want to DELETE the circuit breaker rules? Yes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INFO&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0008&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; circuit breaker rules &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; to backyards-demo/notifications successfully deleted
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用下面的命令验证是否成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards r cb get backyards-demo/notifications
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  INFO&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;0001&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; no circuit breaker rules &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; backyards-demo/notifications
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-backyards-graphql-api-创建熔断&#34;&gt;使用 BACKYARDS GRAPHQL API 创建熔断&lt;/h3&gt;
&lt;p&gt;Backyards 由多个组件组成，比如 Istio、Banzai Cloud 的&lt;a href=&#34;https://github.com/banzaicloud/istio-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio operator&lt;/a&gt;，多集群&lt;a href=&#34;https://banzaicloud.com/blog/istio-canary/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Canary release operator&lt;/a&gt;，以及多个后端基础设施。所有的这些都在&lt;strong&gt;Backyards’ GraphQL API&lt;/strong&gt;的后面。&lt;/p&gt;
&lt;p&gt;Backyards UI 和 CLI 都使用 Backyards 的 GraphQL API，它将在 9 月底与 GA 版本一起发布。用户将很快能够使用我们的工具来管理 Istio 和构建他们自己的客户端。&lt;/p&gt;
&lt;h3 id=&#34;清理&#34;&gt;清理&lt;/h3&gt;
&lt;p&gt;从你的集群移除 demo 应用、Backyards 和 Istio，执行下面的命令，它将按顺序卸载这些组件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ backyards uninstall -a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;使用 Backyards，你可以通过 UI 或 CLI 命令行工具轻松的配置熔断器。然后通过嵌入的 Grafana 仪表板从 Backyards UI 实时的监控熔断器，来查看跳闸率和按源计算的跳闸次数。&lt;/p&gt;
&lt;p&gt;下一次我们将介绍错误注入，请继续关注！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
