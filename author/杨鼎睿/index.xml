<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杨鼎睿 | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/%E6%9D%A8%E9%BC%8E%E7%9D%BF/</link>
      <atom:link href="https://cloudnative.to/author/%E6%9D%A8%E9%BC%8E%E7%9D%BF/index.xml" rel="self" type="application/rss+xml" />
    <description>杨鼎睿</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Fri, 14 May 2021 15:04:05 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/author/%E6%9D%A8%E9%BC%8E%E7%9D%BF/avatar_hu3801682002625739492.jpg</url>
      <title>杨鼎睿</title>
      <link>https://cloudnative.to/author/%E6%9D%A8%E9%BC%8E%E7%9D%BF/</link>
    </image>
    
    <item>
      <title>Kubernetes1.18 架构设计源码阅读</title>
      <link>https://cloudnative.to/blog/kubernetes-apiserver-cacher/</link>
      <pubDate>Fri, 14 May 2021 15:04:05 +0800</pubDate>
      <guid>https://cloudnative.to/blog/kubernetes-apiserver-cacher/</guid>
      <description>&lt;p&gt;好消息，好消息！源码架构图系列完整啦！&lt;/p&gt;
&lt;p&gt;大家好，我是杨鼎睿，Kubernetes 源码设计图已经整理完整啦，全部放在了云原生社区下，欢迎大家前来阅读！&lt;/p&gt;
&lt;p&gt;为了方便广大读者的阅读，我们将所有的源码图整理到了 GitBook 中，大家不必为阅读的顺序而困扰啦。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://i.cloudnative.to/kubernetes/kubernetes/index&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;阅读点我&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;源码设计图共近 200 余张（100 余张是手绘的架构设计图），覆盖主要组件包括 API Server，Controller，Scheduler，Proxy，Client 等，同时还有 Docker，Golang 等相关部分。源码图理念以架构设计（数据结构的设计）为主，决不为了讲述流程而画流程图，阅读时需要配合源码同时阅读，同时会有一小部分的问题留白，可以引导读者带着问题进入源码中寻求答案，希望能籍此帮助大家在学习 K8S 的同时提高自己的设计能力。&lt;/p&gt;
&lt;p&gt;从去年 6 月开始到今年，很多图例都经过多次打磨，大小，含义保证一致，如虚线箭头代表动作等，对各种流程如循环迭代的画图表达也经过多次改版，除此之外，尤在图中不同实体的相互位置有下功夫，如同一水平线代表同一层次等，欢迎在画图表达上多多交流，共同推进如此理念的源码架构图。（除 Kubernetes 外，不少知名项目的源码架构图也已完成，欢迎交流）&lt;/p&gt;
&lt;p&gt;这一系列完成过程中，超哥（Jimmy Song）给予了我很多支持，还有响哥（李响）的鼓励，也有不少前辈给予肯定，感谢大家的关注和阅读。&lt;/p&gt;
&lt;h2 id=&#34;图例&#34;&gt;图例&lt;/h2&gt;
&lt;h3 id=&#34;部分全览图&#34;&gt;部分全览图&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-部分全览图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;部分全览图&#34; srcset=&#34;
               /blog/kubernetes-apiserver-cacher/all_hu15507910346309014532.webp 400w,
               /blog/kubernetes-apiserver-cacher/all_hu5314912498310537087.webp 760w,
               /blog/kubernetes-apiserver-cacher/all_hu7998244169082290475.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubernetes-apiserver-cacher/all_hu15507910346309014532.webp&#34;
               width=&#34;760&#34;
               height=&#34;344&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      部分全览图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;sharedinfomer&#34;&gt;SharedInfomer&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-sharedinfomer&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;SharedInfomer&#34; srcset=&#34;
               /blog/kubernetes-apiserver-cacher/sharedinformer_hu13357600297952338619.webp 400w,
               /blog/kubernetes-apiserver-cacher/sharedinformer_hu16236558182509384179.webp 760w,
               /blog/kubernetes-apiserver-cacher/sharedinformer_hu1055781749607296559.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubernetes-apiserver-cacher/sharedinformer_hu13357600297952338619.webp&#34;
               width=&#34;378&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SharedInfomer
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;cacher&#34;&gt;Cacher&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cacher&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Cacher&#34; srcset=&#34;
               /blog/kubernetes-apiserver-cacher/cacher_hu4843669606560075173.webp 400w,
               /blog/kubernetes-apiserver-cacher/cacher_hu5528499927364370308.webp 760w,
               /blog/kubernetes-apiserver-cacher/cacher_hu512284341156906751.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubernetes-apiserver-cacher/cacher_hu4843669606560075173.webp&#34;
               width=&#34;684&#34;
               height=&#34;693&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Cacher
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Cacher 包含了 storage.Interface 实例，这个实例是真正的存储后端实例。同时，Cacher 也实现了 storage.Interface 接口，这个是典型的装饰器模式。Kubernetes 源码中，有大量优雅的设计模式的运用，在阅读时可多加注意。&lt;/p&gt;
&lt;h3 id=&#34;node&#34;&gt;Node&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-node&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Node&#34; srcset=&#34;
               /blog/kubernetes-apiserver-cacher/node_hu9764077841731763717.webp 400w,
               /blog/kubernetes-apiserver-cacher/node_hu13774688828539969914.webp 760w,
               /blog/kubernetes-apiserver-cacher/node_hu13128507699920762795.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubernetes-apiserver-cacher/node_hu9764077841731763717.webp&#34;
               width=&#34;671&#34;
               height=&#34;691&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Node
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Nodes 中保存了 Node.Name 到 nodeInfoListItem 链表的映射。每个 nodeInfoListItem 对应一个 NodeInfo 实例，实例中保存了 Node 信息及相关的 Pod 信息。&lt;/p&gt;
&lt;h3 id=&#34;endpoint-controller&#34;&gt;Endpoint Controller&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-endpoint-controller&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Endpoint Controller&#34; srcset=&#34;
               /blog/kubernetes-apiserver-cacher/endpointcontroller_hu17168709454566179869.webp 400w,
               /blog/kubernetes-apiserver-cacher/endpointcontroller_hu1973520761646903273.webp 760w,
               /blog/kubernetes-apiserver-cacher/endpointcontroller_hu16695559554428876111.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubernetes-apiserver-cacher/endpointcontroller_hu17168709454566179869.webp&#34;
               width=&#34;643&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Endpoint Controller
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图为 syncService 完整的流程。第一步，先根据通过 Service 获取的 Key 值，还原 Namespace 与 Name，这两个值是后续向 API Server 查询的核心依据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务删除，那么通知 API Server 删除该服务相关的 Endpoint&lt;/li&gt;
&lt;li&gt;如果是创建、更新服务
&lt;ul&gt;
&lt;li&gt;从 API Server 根据 (Namespace, Name) 拉取与现有与 Service.Spec.Selector 相关的 Pod 列表&lt;/li&gt;
&lt;li&gt;根据 Pod 列表获取子网地址列表&lt;/li&gt;
&lt;li&gt;获取当前与 Service 关联的 Endpoints&lt;/li&gt;
&lt;li&gt;DeepCopy 返回的 Endpoints 对象，并更新 Copy 的 Endpoints 的子网地址列表&lt;/li&gt;
&lt;li&gt;使用新 Endpoints，通知 API Server 创建或更新 Endpoints 资源&lt;/li&gt;
&lt;li&gt;创建/更新过程发生错误时，记录事件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;iptable-proxier&#34;&gt;IPTable Proxier&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-iptable-proxier&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;IPTable Proxier&#34; srcset=&#34;
               /blog/kubernetes-apiserver-cacher/iptable_hu6992857263809304447.webp 400w,
               /blog/kubernetes-apiserver-cacher/iptable_hu4902902797949040384.webp 760w,
               /blog/kubernetes-apiserver-cacher/iptable_hu17387346011684852985.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubernetes-apiserver-cacher/iptable_hu6992857263809304447.webp&#34;
               width=&#34;760&#34;
               height=&#34;547&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      IPTable Proxier
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Chain 如上图中虚线方框所示，代表了包处理过程中，实际的规则执行路径。Table 是可简单理解为规则的分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raw：Connection Tracking 相关操作&lt;/li&gt;
&lt;li&gt;Mangle：修改 IP 包&lt;/li&gt;
&lt;li&gt;Nat：地址转换&lt;/li&gt;
&lt;li&gt;Filter：过滤&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
