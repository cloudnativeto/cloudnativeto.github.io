<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zach Jory | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/zach-jory/</link>
      <atom:link href="https://cloudnative.to/author/zach-jory/index.xml" rel="self" type="application/rss+xml" />
    <description>Zach Jory</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 08 Aug 2018 22:12:16 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>Zach Jory</title>
      <link>https://cloudnative.to/author/zach-jory/</link>
    </image>
    
    <item>
      <title>服务网格加速金融科技向微服务转型</title>
      <link>https://cloudnative.to/blog/enabling-the-financial-services-shift-to-microservices/</link>
      <pubDate>Wed, 08 Aug 2018 22:12:16 +0800</pubDate>
      <guid>https://cloudnative.to/blog/enabling-the-financial-services-shift-to-microservices/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/enabling-the-financial-services-shift-to-microservices/0069RVTdgy1fu2n6mulo0j30p70cdmzh.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://aspenmesh.io/2018/08/enabling-the-financial-services-shift-to-microservices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;金融服务公司通常都拥有沉重的历史包袱，当然对于想要进入这个行业的新秀来说也算是商业壁垒，因为他们很难突破低利润和严苛的监管规则。曾占主导地位的大型金融企业的市场份额正面临着比起小巧、灵活的小金融科技公司的蚕食。这些小科技公司技术嗅觉灵敏、专业、注重客户用户体验。为了保持良好的竞争优势，金融服务公司都计划将自己原有的繁杂的技术架构向更具适应性的方向转变。最近对金融机构的一项调查发现大约 85％的人认为他们的核心技术过于僵化和缓慢。因此，预计在未来五年内约有 80％的金融机构打算替换其核心银行系统架构。&lt;/p&gt;
&lt;p&gt;金融新法则旨在解决新的数字支付问题。例如在欧洲的 PSD2（支付服务指令法则），要求银行采用新的运营方式和交付方式。像 PSD2 这样的变化旨在将银行业带入开放的 API 共享经济，通过开放标准推动互操作性和集成。要成为数据开放、无缝集成、API 共享的世界一流金融科技需要借助微服务的力量。&lt;/p&gt;
&lt;h2 id=&#34;微服务为金融服务提供了三个关键优势&#34;&gt;微服务为金融服务提供了三个关键优势&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;增加安全性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现代金融科技发展过程中给此前已建立的安全基础设施带来挑战。如数字钱包、智能机器人咨询服务和区块链等要求建立新的安全机制。恰恰微服务遵循这些要求正在构建基于最佳实践的独立身份识别服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;快速交付&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快速将新功能推向市场是金融科技在市场上赢得头筹的基石，微服务使得不同应用开发团队独立交付满足新客户需求的功能更易于实现，微服务也具有很强的扩展性去满足更多用户和交易。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无缝集成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;金融科技在集成层面要求一组功能完备用于内部和外部不同服务间通信的服务接口。在大型单体应用中接口层由于改变难以管理而臭名昭著。而微服务利用隔离性、扩展性、弹性等众多特性使得接口更易于管理和更加安全。&lt;/p&gt;
&lt;h2 id=&#34;服务网格使得繁杂的微服务管理易于实现&#34;&gt;服务网格使得繁杂的微服务管理易于实现&lt;/h2&gt;
&lt;p&gt;面对快速变化的客户、业务和监管要求，微服务帮助金融科技快速响应变化，但这不是轻而易举的，在转向微服务期间，公司需要承担增加的运营开销。而服务网格等技术恰可以帮助管理微服务。服务网格提供围绕可观测性、安全性、可控性一系列功能对于大规模管理微服务至关重要。&lt;/p&gt;
&lt;p&gt;以前存在的解决方案（如 DNS 和配置管理）提供了例如服务发现等一些功能，但并没有提供快速重试、负载均衡、跟踪和运行状况监控的能力。管理微服务的老方法要求你在每次出现问题时拼凑出几种不同的解决方案，但是服务网格将它们打包起来使其更易于使用。虽然可以通过单个工具和流程完成服务网络管理的某些功能，但这是手动且耗时的。&lt;/p&gt;
&lt;p&gt;随着初创金融科技公司的竞争，以及客户期望的不断增长，成熟的金融服务公司必须改变他们提供产品和与客户开展业务的方式。在交付层面老系统很难满足这些要求，金融服务公司需要一套灵活、适应性强、可扩展性高、可靠且强大的软件架构。微服务使其成为可能，而服务网络正好满足了微服务大规模管理的需求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文中提到的调研报告：https://www.pwc.com/jg/en/publications/pwc-global-fintech-report-17.3.17-final.pdf&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh 如何解决微服务中的 3 个主要挑战</title>
      <link>https://cloudnative.to/blog/how-service-mesh-addresses-3-major-microservices/</link>
      <pubDate>Sat, 28 Jul 2018 17:11:16 +0800</pubDate>
      <guid>https://cloudnative.to/blog/how-service-mesh-addresses-3-major-microservices/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://dzone.com/articles/how-service-mesh-addresses-3-major-microservices-c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们都知道微服务会增加复杂性。了解服务网络如何解决这一问题和其他挑战。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我最近正在阅读 Dimensional Research 撰写的&lt;a href=&#34;https://go.lightstep.com/global-microservices-trends-report-2018&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;全球微服务趋势报告&lt;/a&gt;，在阅读的同时，我个人也认为“服务网络可以帮助解决这个问题。”所以我将阐述这 3 个挑战以及服务网格是如何解决它们。报告中引用的受访者表明微服务正在得到广泛采用。同样清楚的是，除了微服务带来的无数好处之外，同样也带来了一些严峻的挑战。报告显示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;91％的企业&lt;strong&gt;正在使用&lt;/strong&gt;微服务或有计划使用&lt;/li&gt;
&lt;li&gt;99％的用户认为在使用微服务时遇到了&lt;strong&gt;挑战&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;微服务主要的挑战&#34;&gt;微服务主要的挑战&lt;/h2&gt;
&lt;p&gt;该报告指出了公司面临的一系列挑战。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/how-service-mesh-addresses-3-major-microservices/855e972fly1fto3iki07wj20zh0d9404.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;大量公司既面临着技术上的挑战，同时也面临着组织结构上的挑战。而我将专注于能够用服务网格解决的技术挑战，但值得注意的是，服务网格所做的一件事就是带来一致性，因此可以在团队之间实现相同的愿景，从而减少对某些技能的需求。&lt;/p&gt;
&lt;h2 id=&#34;每个额外的微服务都会增加运维的难度&#34;&gt;每个额外的微服务都会增加运维的难度&lt;/h2&gt;
&lt;p&gt;如果没有服务网格，这句话将成为现实！服务网格可以通过 API 提供监控，可伸缩性和高可用性，而不是通过分离设备。这种灵活的框架消除了与现代应用相关的操作复杂性。基础设施服务传统上是通过分离设备实现的，这意味着需要到达实际的设备来获得服务。因为每个设备的唯一性，导致为每个设备提供监控，扩展和高可用性有很高的难度。服务网格通过 API 在计算集群内部提供这些服务，不需要任何其他设备。实现服务网格意味着添加新的微服务不必增加复杂性。&lt;/p&gt;
&lt;h2 id=&#34;识别性能问题的根本原因更加困难&#34;&gt;识别性能问题的根本原因更加困难&lt;/h2&gt;
&lt;p&gt;服务网格工具箱为您提供了一些有助于解决此问题的方法：&lt;/p&gt;
&lt;h3 id=&#34;分布式跟踪&#34;&gt;分布式跟踪&lt;/h3&gt;
&lt;p&gt;跟踪为不同的微服务提供服务依赖性分析，并在请求穿梭于多个微服务时跟踪此请求。它也是识别性能瓶颈和放大特定请求以定义诸如哪些微服务导致请求延迟或哪些服务产生错误之类的事情的好方法。&lt;/p&gt;
&lt;h3 id=&#34;指标的集合&#34;&gt;指标的集合&lt;/h3&gt;
&lt;p&gt;通过服务网格能够获得的另一个有用的功能是收集指标的能力。指标是在各个时间维度上了解应用程序中发生了什么，以及何时它们是健康的或者不健康的关键。服务网格可以从网格中收集遥测数据，并为每一跳产生一致的指标。这样可以更轻松地快速解决问题，并在将来构建更具弹性的应用程序。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/how-service-mesh-addresses-3-major-microservices/855e972fly1ftobpzbxnzj20rl0b2mya.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;不同的开发语言和框架&#34;&gt;不同的开发语言和框架&lt;/h2&gt;
&lt;p&gt;报告受访者指出的另一个主要挑战是在多语言世界中维护分布式架构的挑战。当从单体服务到微服务的转变时，许多公司都面临着一个现实就是，他们必须使用不同的语言和工具来让系统工作起来。大型企业尤其受此影响，因为他们拥有许多大型分布式团队。服务网格通过提供编程语言不可知性来提供一致性，这解决了多语言世界中的不一致性，其中不同的团队（每个团队都有自己的微服务）可能使用不同的编程语言和框架。网格还提供了统一的、覆盖整个应用程序的观测点，用于将可见性和控制性引入应用程序，同时将服务间的通信从隐含的基础架构领域移出到一个可以轻松查看，监视，管理和控制的位置。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/how-service-mesh-addresses-3-major-microservices/855e972fly1ftobqt0wv7j20ry0ce0uc.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务很酷，但服务网格使得它更酷。如果您正处于微服务的路途中并且发现难以应付基础架构挑战，那么服务网格可能是正确的答案。如果您对如何充分利用服务网格有任何疑问，请告诉我们，我们的工程团队随时可以与您交流。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Mesh 安全：用 Istio 应对攻击</title>
      <link>https://cloudnative.to/blog/service-mesh-security-addressing-attack-vectors-with-istio/</link>
      <pubDate>Thu, 07 Jun 2018 19:27:19 +0800</pubDate>
      <guid>https://cloudnative.to/blog/service-mesh-security-addressing-attack-vectors-with-istio/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://aspenmesh.io/2018/06/service-mesh-security-addressing-attack-vectors-with-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;把单体应用拆分为微服务之后，会得到不少好处，例如稳定性的提高、持续运行时间的增长以及更好的故障隔离等。然而把大应用拆分为小服务的过程中，也会引入一个风险就是——可能的受攻击面积变大了。从前单体应用中通过函数调用完成的通信，现在都要通过网络完成。提高安全性从而避免这个问题带来的安全影响，是微服务之路上必须要着重考虑的问题。&lt;/p&gt;
&lt;p&gt;Aspen Mesh 的基础是一个开源软件：&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;，他的关键能力之一就是为微服务提供安全性和策略控制方面的支持。Istio 为 Service Mesh 增加了很多安全特性，但是这并不是说微服务的安全工作就结束了。网络安全策略也是需要着重考虑的问题（推荐阅读：&lt;a href=&#34;https://medium.com/lightspeed-venture-partners/in-the-land-of-microservices-the-network-is-the-king-maker-37de7ec4119a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;In the land of microservices, the network is the king(maker)&lt;/a&gt;），结合网络策略，可以检测和应对针对服务网格基础设施的攻击，从而解决各种安全威胁。&lt;/p&gt;
&lt;p&gt;后面的内容将会看看 Istio 所能够解决的问题，其中包含边缘通信的流量控制、网格内通信加密以及 7 层策略控制等。&lt;/p&gt;
&lt;h2 id=&#34;边缘通信安全&#34;&gt;边缘通信安全&lt;/h2&gt;
&lt;p&gt;针对不当进入网格的流量，Istio 加入了一个用来进行监控和防范的安全层。Istio 以 Ingress Controller 的形式和 Kubernetes 进行了集成，并完成了 Ingress 的负载均衡任务。用户可以用 Ingress Rule 的方式加入安全控制。可以通过监控来了解进入网格的流量，并通过路由规则来管理非法的边缘通信。&lt;/p&gt;
&lt;p&gt;要保证只有认证用户通过，Istio 的 RBAC（基于角色的访问控制）提供了有弹性的、可定制的访问控制，这种能力在网格内提供了 namespace、service 以及服务方法一级的控制能力。RBAC 引擎监控和跟进 RBAC 策略的变更，在运行时根据 RBAC 策略，根据请求的上下文对请求进行鉴权，最后返回鉴权结果。&lt;/p&gt;
&lt;h2 id=&#34;通信加密&#34;&gt;通信加密&lt;/h2&gt;
&lt;p&gt;边缘通信的安全是个好的开始，但是如果有恶意份子突破了边缘之后，Istio 还为服务之间的通信提供了双向 TLS 认证能力。网格能够对请求和响应进行自动的加密和解密，开发人员就无需在此投入精力了。这个功能还通过对连接的优先复用，减少了连接过程中的运算消耗。&lt;/p&gt;
&lt;p&gt;除了客户端和服务器之间的认证和鉴权能力之外，还让用户能够理解和管理服务间的通信和加密。Istio 把证书和密钥自动分发给服务，代理使用这些输入来给流量进行加密（提供双向 TLS），并周期性的进行证书轮转，从而降低证书暴露造成的威胁。可以利用 TLS 来确认 Istio 中的通信双方的服务实例都是合法的，从而防止中间人攻击。&lt;/p&gt;
&lt;p&gt;Istio 使用 Citadel 来进行密钥管理和认证控制，简化了 TLS 过程。他让用户能够保护流量，同时给每个服务提供基于身份的验证和授权功能。&lt;/p&gt;
&lt;h2 id=&#34;策略控制和执行&#34;&gt;策略控制和执行&lt;/h2&gt;
&lt;p&gt;Istio 给用户在应用级执行策略的能力。对于服务路由、重试、断路以及安全来说，在这一层进行控制是非常恰当的。Istio 为用户提供了黑白名单功能来来对服务进行准入的控制。&lt;/p&gt;
&lt;p&gt;Istio Mixer 可以把扩展集成进系统，用户用标准化的表达式语言来来声明网络以及服务行为方面的约束策略。这样做的好处是，可以用通用 API 在服务边缘来缓存策略的决策结果，如果下游的策略系统出现故障，网络还能保持运行。&lt;/p&gt;
&lt;p&gt;Istio 解决了一些微服务特定的关键问题。例如只允许被批准的服务间通信，加密通信防止通信过程中的入侵，执行应用范围内的策略等。当然还有很多其他方式可以实现这些能力，Mesh 的好处在于将这些能力融会贯通，让用户使用一致的稳定的方式来完成这些任务。&lt;/p&gt;
&lt;p&gt;Aspen Mesh 中正在做一些新的功能，在 Istio 中为用户提供更好的安全能力。近期我们会在博客上发点东西，所以请关注 &lt;a href=&#34;https://aspenmesh.io/blog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aspen Mesh 博客&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;译文原地址：https://blog.fleeto.us/post/service-mesh-security-addressing-attack-vectors-with-istio/&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
