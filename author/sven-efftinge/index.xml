<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sven Efftinge | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/sven-efftinge/</link>
      <atom:link href="https://cloudnative.to/author/sven-efftinge/index.xml" rel="self" type="application/rss+xml" />
    <description>Sven Efftinge</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/sven-efftinge/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Sven Efftinge</title>
      <link>https://cloudnative.to/author/sven-efftinge/</link>
    </image>
    
    <item>
      <title>开发环境即代码：可以运行在云上的开发环境</title>
      <link>https://cloudnative.to/blog/dev-env-as-code/</link>
      <pubDate>Tue, 17 Aug 2021 10:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/dev-env-as-code/</guid>
      <description>&lt;p&gt;本文翻译自 &lt;a href=&#34;https://www.gitpod.io/blog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gitpod&lt;/a&gt; 的 blog 文章 &lt;a href=&#34;https://www.gitpod.io/blog/dev-env-as-code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dev environments as code&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;想象一下，仅在十年前，运维人员还在手动部署、配置和维护软件系统，这大大消耗了他们宝贵的生命和精力。&lt;/p&gt;
&lt;p&gt;而在今天，微服务架构时代，软件系统变得更加复杂，尝试手动维护操作和部署都变的不再可能。在我们进行 “DevOps” 或 “基础设施即代码” 的实践时，发现声明式的描述软件系统对于自动和持续地部署应用程序是必不可少的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/dev-env-as-code/ad5fbf65gy1gtjixqw330j20p007swmz_huba0776d3cfdb00910d9abd2a863be577_323512_e319fc8a2d76f1279b514da8567afe8a.webp 400w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjixqw330j20p007swmz_huba0776d3cfdb00910d9abd2a863be577_323512_36abfd7890b2e0e843b0c528029b5a98.webp 760w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjixqw330j20p007swmz_huba0776d3cfdb00910d9abd2a863be577_323512_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/dev-env-as-code/ad5fbf65gy1gtjixqw330j20p007swmz_huba0776d3cfdb00910d9abd2a863be577_323512_e319fc8a2d76f1279b514da8567afe8a.webp&#34;
               width=&#34;760&#34;
               height=&#34;236&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;那我们的开发环境呢&#34;&gt;那我们的开发环境呢？&lt;/h2&gt;
&lt;p&gt;虽然我们已经自动部署了应用程序，但我们中的大多数人还没有将相同的技术应用于开发环境。相反，在项目中招募新团队成员往往需要几个小时来配置他们的开发环境。&lt;/p&gt;
&lt;p&gt;这种情况通常是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新的开发人员接收到项目文档链接&lt;/li&gt;
&lt;li&gt;阅读冗长且过时的 setup 说明&lt;/li&gt;
&lt;li&gt;在开发终端上安装依赖、更新/降级版本等&lt;/li&gt;
&lt;li&gt;尝试运行构建……等待 20 分钟&lt;/li&gt;
&lt;li&gt;构建失败，尝试寻找哪里出了问题&lt;/li&gt;
&lt;li&gt;询问同事。“哦是的，你还需要做 X 和 Y”&lt;/li&gt;
&lt;li&gt;转回步骤 3&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过多次尝试，构建突然起作用了。您不知道为什么，但这现在不重要了。当然，您无法更新文档，因为您也不确定是如何完成设置的，甚至不确定现在的状态是否可以重现。因此如果更新文档，最好只添加您发现的内容，不敢删除您不理解或跳过的部分，因为它们对您不起作用。&lt;/p&gt;
&lt;p&gt;在接下来的几周里，您将不得不解决这里和那里的小问题，并添加一些没有列出的工具。获取是因为 debug 无法工作，或者您没有看到上游依赖的源。最终，这一切都会平息下来。但当一个同事改变了依赖中的某些内容，整个团队都注意到并相应地改变他们的环境，通常需要两天时间。&lt;/p&gt;
&lt;p&gt;不幸的是，痛苦并不止于此。&lt;/p&gt;
&lt;h3 id=&#34;在我的机器是正常的&#34;&gt;在我的机器是正常的&lt;/h3&gt;
&lt;p&gt;您是否时常会听到 “这个程序在我机器上是正常的，怎么到你机器上就不正常了” 这句话？以及一个 bug 只出现在一台机器上，很难在其他机器上重现？在生产中发生了事故，却无法在本地重现？只要您在使用不同的配置在不同平台上运行代码，发生这些问题都不奇怪。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/dev-env-as-code/ad5fbf65gy1gtjizbacoej20b40b4t9j_hu68509cd7449369b15ea0ebe7c65da484_40775_585cff2e06bb86fa9eb04d11a2a36624.webp 400w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjizbacoej20b40b4t9j_hu68509cd7449369b15ea0ebe7c65da484_40775_c9ede23b96c27b2142e1a98cbaf6fcec.webp 760w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjizbacoej20b40b4t9j_hu68509cd7449369b15ea0ebe7c65da484_40775_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/dev-env-as-code/ad5fbf65gy1gtjizbacoej20b40b4t9j_hu68509cd7449369b15ea0ebe7c65da484_40775_585cff2e06bb86fa9eb04d11a2a36624.webp&#34;
               width=&#34;400&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;修复旧分支上的问题&#34;&gt;修复旧分支上的问题&lt;/h3&gt;
&lt;p&gt;另一个令人讨厌的事情是当您需要在维护分支上修复某些旧代码引起的 bug 时，需要修复的 bug 可能非常简单，但在您完成之前，需要能够构建和测试这个“古老的野兽”，这会花费您无穷无尽的时间。&lt;/p&gt;
&lt;p&gt;修复六个月前的技术栈可是很烦人的，必须处理所有旧的依赖库及其版本，且您仍然必须以某种方式使其可以工作。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/dev-env-as-code/ad5fbf65gy1gtjizogoocj23342224a2_huea9faaed615536fef60730f31c8343c8_436345_721154592d93817a58db8bf17e977194.webp 400w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjizogoocj23342224a2_huea9faaed615536fef60730f31c8343c8_436345_0ed1a0d948ffc9bfd7a9c0fe52a6e59e.webp 760w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjizogoocj23342224a2_huea9faaed615536fef60730f31c8343c8_436345_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/dev-env-as-code/ad5fbf65gy1gtjizogoocj23342224a2_huea9faaed615536fef60730f31c8343c8_436345_721154592d93817a58db8bf17e977194.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果我们也将 “基础设施即代码” 理念应用到我们的开发环境中，所有的痛苦都可以结束。通过将开发环境设置以可执行格式写下来并将其与项目源码一起存入源码存储库，实现开发环境设置的自动化、可复用和版本化。&lt;/p&gt;
&lt;h2 id=&#34;开发环境即代码&#34;&gt;开发环境即代码&lt;/h2&gt;
&lt;p&gt;毕竟，开发环境通常比运行时的应用程序更加复杂，通常需要在满足运行时要求的同时添加所有开发工具，例如构建工具、编译器、linter 与合适的编辑器/IDE。&lt;/p&gt;
&lt;p&gt;如果您想确保更改不会破坏任何内容，那么每个人都要使用与 CI 构建相同环境，并在其中进行编码、运行和测试。&lt;/p&gt;
&lt;p&gt;因此，让我们停止污染我们的 readme 文件，并正式开始编写开发环境配置命令，以便它们可以执行。&lt;/p&gt;
&lt;h3 id=&#34;dockerfiles&#34;&gt;Dockerfiles&lt;/h3&gt;
&lt;p&gt;Dockerfiles 是描述开发环境的一种非常简洁的方式。想象一下，您想在项目的工具链中添加诸如 &lt;em&gt;“asciidoctor”&lt;/em&gt; 之类的工具。您只需将以下行添加到您的开发环境的 Dockerfile 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;RUN&lt;/span&gt; apt-get install -y asciidoctor&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦您将更改 push 到代码仓库并且自动更新 docker 镜像，所有团队成员都可以在他们的开发环境中使用新工具。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/dev-env-as-code/ad5fbf65gy1gtjj015ulpj2334222453_hua0ff09ee828fe493dc720dddb421c498_253070_d2ac54e793f10a2fcb10bc64fa8ce7d6.webp 400w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjj015ulpj2334222453_hua0ff09ee828fe493dc720dddb421c498_253070_092ac57631269c26253ad52dc54c1c9c.webp 760w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjj015ulpj2334222453_hua0ff09ee828fe493dc720dddb421c498_253070_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/dev-env-as-code/ad5fbf65gy1gtjj015ulpj2334222453_hua0ff09ee828fe493dc720dddb421c498_253070_d2ac54e793f10a2fcb10bc64fa8ce7d6.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;ide-自动设置&#34;&gt;IDE 自动设置&lt;/h3&gt;
&lt;p&gt;如果您的开发工具具有诸如桌面 IDE 之类的 UI，那么使用 Docker 的方法会变得有点笨拙。您可以将它们打包到 Docker 中，但是您必须通过 &lt;a href=&#34;https://zh.wikipedia.org/wiki/X%E8%A6%96%E7%AA%97%E7%B3%BB%E7%B5%B1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;X11&lt;/a&gt;(X Window System) 公开 IDE 的 UI。另一种选择是使用像 vim 这样的终端编辑器，但这对我们大多数人来说并不是一个很好选择。&lt;/p&gt;
&lt;p&gt;一些桌面 IDE 具有允许使用自动设置的工具设置。例如，Eclipse 有一个名为 Oomph 的工具，其允许您以声明方式描述 Eclipse IDE，包括插件、配置甚至工作区设置（即 git 信息）。&lt;/p&gt;
&lt;p&gt;到目前为止，最好的选择是在浏览器中运行的 IDE，例如 &lt;a href=&#34;https://theia-ide.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Theia IDE&lt;/a&gt;。Theia 是 Eclipse 基金会旗下的开源项目，它被看作是在浏览器和桌面上运行的 VS Code，且更具可定制性。&lt;/p&gt;
&lt;p&gt;对于简单的基于 Docker 的开发环境，您可以将 Theia 添加到您的 Docker 镜像中，它提供了包含终端的完整 IDE。&lt;/p&gt;
&lt;p&gt;下一步是将您的开发环境视为某种 serverless function，您只在需要时生成并启开发环境，并在完成时进行销毁，&lt;a href=&#34;https://www.gitpod.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitpod&lt;/a&gt; 正是这样做的。&lt;/p&gt;
&lt;p&gt;它与 GitHub、GitLab、Bitbucket 等代码托管平台集成，通过自动化消除所有繁琐的步骤。并允许您提供自定义 Dockerfiles 或 Docker 镜像来运行 Theia IDE。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;将 DevOps 的经验应用在开发环境的设置中，可以为我们节省大量宝贵的时间和精力。&lt;a href=&#34;https://www.activestate.com/developer-survey-2018-open-source-runtime-pains/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ActiveState 的 2018 年开发者调查&lt;/a&gt; 通过一些数据强调了这一点：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/dev-env-as-code/ad5fbf65gy1gtjj0as918j218g0i8tdw_huac1d2859db521c240e5748fcaddbc209_201604_9e826f84d5f7a618d7a14712175fa019.webp 400w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjj0as918j218g0i8tdw_huac1d2859db521c240e5748fcaddbc209_201604_6a180a96e525079a0b35352fc8222034.webp 760w,
               /blog/dev-env-as-code/ad5fbf65gy1gtjj0as918j218g0i8tdw_huac1d2859db521c240e5748fcaddbc209_201604_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/dev-env-as-code/ad5fbf65gy1gtjj0as918j218g0i8tdw_huac1d2859db521c240e5748fcaddbc209_201604_9e826f84d5f7a618d7a14712175fa019.webp&#34;
               width=&#34;760&#34;
               height=&#34;312&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们真的需要用痛苦的入职经历来欢迎新同事或贡献者吗？让我们跳过繁琐的环境配置，让开发环境设置变的&lt;strong&gt;自动化&lt;/strong&gt;、&lt;strong&gt;可复用&lt;/strong&gt;且&lt;strong&gt;版本化&lt;/strong&gt;吧！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
