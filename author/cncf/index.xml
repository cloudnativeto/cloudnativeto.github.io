<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CNCF | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/author/cncf/</link>
      <atom:link href="https://cloudnativecn.com/author/cncf/index.xml" rel="self" type="application/rss+xml" />
    <description>CNCF</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnativecn.com/author/cncf/avatar_hu10012674834579754685.webp</url>
      <title>CNCF</title>
      <link>https://cloudnativecn.com/author/cncf/</link>
    </image>
    
    <item>
      <title>CNCF 将服务网格接口（SMI）项目归档</title>
      <link>https://cloudnativecn.com/blog/cncf-archives-the-service-mesh-interface-smi-project/</link>
      <pubDate>Tue, 12 Dec 2023 12:30:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/cncf-archives-the-service-mesh-interface-smi-project/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://www.cncf.io/blog/2023/10/03/cncf-archives-the-service-mesh-interface-smi-project/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 官方博客&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;CNCF（&lt;a href=&#34;https://github.com/cncf/toc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;技术监督委员会（TOC）&lt;/strong&gt;&lt;/a&gt;）已经投票批准&lt;a href=&#34;https://github.com/cncf/toc/pull/1156&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;归档&lt;/strong&gt;&lt;/a&gt;服务网格接口（SMI）项目。&lt;/p&gt;
&lt;p&gt;SMI 被创建为在 Kubernetes 上为服务网格提供标准接口以及最常见的服务网格用例的基本功能集。它于 2020 年 3 月被接受为 CNCF 沙盒项目。&lt;/p&gt;
&lt;p&gt;SMI 是第五个被 CNCF 归档的项目。开源项目有一个生命周期，项目可能因各种原因而不活跃。还有一些情况下，项目可能不再希望得到 CNCF、维护者或 TOC 的支持。&lt;/p&gt;
&lt;p&gt;CNCF 的 CTO Chris Aniszczyk 表示：“在 CNCF 中，项目有一个生命周期，有时包括归档项目，特别是因为沙盒项目是用于实验的。这实际上是维护一个健康的开源生态系统的一部分。”他还说：“项目将自然地在生命周期中移动，并可能变得不太活跃，或者可能不再适合某个用例。就 SMI 而言，维护者已经决定将精力集中在 Kubernetes SIG Network 倡议下的 &lt;a href=&#34;https://kubernetes.io/blog/2023/08/29/gateway-api-v0-8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GAMMA&lt;/a&gt; 服务网格上。”&lt;/p&gt;
&lt;p&gt;在 2022 年 7 月，SMI 团队更新了项目博客站点：&lt;a href=&#34;https://smi-spec.io/blog/announcing-smi-gateway-api-gamma/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布 SMI 参与 Gateway API GAMMA 倡议&lt;/a&gt;。在 SMI 旗下没有进一步的工作，SMI 维护者目前建议归档 SMI 项目，并鼓励人们参与 GAMMA 倡议。&lt;/p&gt;
&lt;p&gt;一旦项目被归档：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CNCF 将不再为该项目提供支持&lt;/li&gt;
&lt;li&gt;它将在网上列为归档项目&lt;/li&gt;
&lt;li&gt;CNCF 可以提供服务，如文档更新，以帮助用户过渡。&lt;/li&gt;
&lt;li&gt;CNCF 将不再为该项目提供其他营销活动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNCF TOC 感谢 SMI 项目的维护者和贡献者在推动云原生服务网格技术和标准化方面发挥的重要作用。&lt;/p&gt;
&lt;p&gt;了解更多关于 &lt;a href=&#34;https://github.com/cncf/toc/blob/main/process/archiving.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 归档流程&lt;/a&gt; 的信息。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> CNCF 平台白皮书</title>
      <link>https://cloudnativecn.com/blog/cncf-platforms-white-paper/</link>
      <pubDate>Fri, 14 Apr 2023 11:17:22 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/cncf-platforms-white-paper/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;译者注：本文译自 &lt;a href=&#34;https://tag-app-delivery.cncf.io/whitepapers/platforms/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 平台白皮书&lt;/a&gt;，介绍了如何构建云原生计算平台以及平台可能提供的能力。这些能力包括 Web 门户、API、黄金路径模板、自动化、开发环境、可观测性、基础设施服务、数据服务、消息和事件服务、身份和密码管理服务、安全服务和工件存储。此外，该文档还介绍了与平台相关的术语，如平台、平台能力提供者、平台工程师、平台产品经理、平台团队和平台用户。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;
&lt;p&gt;受 DevOps 所承诺的跨职能合作的启发，平台工程正在企业中作为一种明确的合作形式出现。平台策划和呈现基础功能、框架和体验，以促进和加速应用程序开发人员、数据科学家和信息工作者等内部客户的工作。特别是在云计算领域，平台已经帮助企业实现了云计算长期承诺的价值，例如快速的产品发布、跨基础架构的可移植性、更安全和更弹性的产品以及更高的开发者生产力。&lt;/p&gt;
&lt;p&gt;本文旨在支持企业领导、企业架构师和平台团队领导者提倡、调查和计划云计算内部平台。我们相信平台对企业的实际价值流有重大影响，但只是间接的，因此领导共识和支持对平台团队的长期可持续性和成功至关重要。在本文中，我们将通过讨论平台的价值、如何衡量该价值以及如何实施最大化该价值的平台团队来实现这种支持。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;为什么需要平台？&lt;/li&gt;
&lt;li&gt;什么是平台？&lt;/li&gt;
&lt;li&gt;成功平台的属性&lt;/li&gt;
&lt;li&gt;成功平台团队的属性&lt;/li&gt;
&lt;li&gt;实施平台时的挑战&lt;/li&gt;
&lt;li&gt;如何衡量平台的成功&lt;/li&gt;
&lt;li&gt;平台的功能&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么需要平台&#34;&gt;为什么需要平台？&lt;/h2&gt;
&lt;p&gt;云平台和平台工程是当前热门话题。在深入探讨平台构建的定义、技术和测量之前，先探讨一下驱动平台提供的价值。&lt;/p&gt;
&lt;p&gt;在过去 20-30 年的流程改进中，软件应用程序和产品团队的敏捷性显著提高，为它们提供了基础设施（如计算、网络和存储）和开发人员服务（如构建、测试、交付和可观测性）的灵活服务。这种自主权和流程改进也逐渐使越来越多的支持服务责任转移到产品团队，迫使他们花费越来越多的时间和认知精力处理基础设施问题，从而减少了他们为组织创造价值的时间。&lt;/p&gt;
&lt;p&gt;希望重新聚焦交付团队的核心任务并减少组织内重复的工作，促使企业实施云原生计算平台。通过投资平台，企业可以：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减轻产品团队的认知负荷，从而加速产品开发和交付&lt;/li&gt;
&lt;li&gt;通过专家的配置和管理改进依赖于平台能力的产品的可靠性和弹性&lt;/li&gt;
&lt;li&gt;通过在企业内的多个团队之间重用和共享平台工具和知识，加速产品开发和交付&lt;/li&gt;
&lt;li&gt;通过管理平台能力及其周围的用户、工具和流程，减少产品和服务的安全、法规和功能问题的风险&lt;/li&gt;
&lt;li&gt;通过使公共云服务和其他托管提供商的服务具有成本效益和生产力，使其能够代表他们实施实现而保持对用户体验的控制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些好处部分得益于少量的平台团队服务于众多的产品团队，从而扩大了其影响力；部分得益于平台团队集中管理共同的功能，促进了治理；部分得益于平台团队将用户界面和体验置于首位。&lt;/p&gt;
&lt;p&gt;平台专家团队不仅减轻了对产品团队的共同工作负担，还优化了这些产品中使用的平台能力。平台团队还维护了一组传统的模式、知识和工具，这些都在企业中广泛使用，使开发人员能够快速为基于同一基础构建的其他团队和产品做出贡献。共享的平台模式也允许在模板、模式和能力中嵌入治理和控件。最后，因为平台团队管理提供者并为其提供一致的体验，它们可以为基础但无差异化的能力（例如数据库、身份访问、基础架构运营和应用程序生命周期）的有效使用提供支持。&lt;/p&gt;
&lt;h2 id=&#34;平台是什么&#34;&gt;平台是什么&lt;/h2&gt;
&lt;p&gt;云原生计算的平台是根据平台的用户需求定义和呈现的一组集成功能。它是一个跨应用程序和用例集合的横向层，确保为广泛的应用程序和用例组织提供典型的功能和服务的一致体验。一个好的平台提供了一致的用户体验，用于使用和管理其功能和服务，例如 Web 门户、项目模板和自助式 API。&lt;/p&gt;
&lt;p&gt;根据 Atlassian [ &lt;a href=&#34;https://www.atlassian.com/devops/frameworks/team-topologies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;] 的说法，“平台团队创建可以由众多流程对齐的 [产品] 团队使用的功能，减少了流程对齐 [产品] 团队的资源和认知负荷…… 平台团队可以创建跨不同用户体验或产品的连贯体验。”&lt;/p&gt;
&lt;p&gt;根据 Martin Fowler 和 Evan Bottcher [ &lt;a href=&#34;https://martinfowler.com/articles/talk-about-platforms.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt;] 的说法，“数字平台是一个自助式 API、工具、服务、知识和支持基础，按照一个引人注目的内部产品的方式组织。自治交付团队可以利用该平台以更高的速度交付产品功能，并减少协调。”&lt;/p&gt;
&lt;p&gt;平台应支持的具体功能和场景应由利益相关者和用户确定。虽然平台为这些所需的功能提供支持，但关键是要注意，平台团队并不总是必须自己 &lt;em&gt;实现&lt;/em&gt; 它们。托管服务提供商或专用的内部团队可以维护支持实现，而平台是提供一致性的最薄合理层，能够跨提供的实现提供一致性并满足组织的要求。例如，一个非常简单的“平台”可以是一个 wiki 页面，其中包含链接到标准操作程序，以从提供者那里规定能力，如 [ &lt;a href=&#34;https://teamtopologies.com/key-concepts-content/what-is-a-thinnest-viable-platform-tvp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3&lt;/a&gt;] 所述。&lt;/p&gt;
&lt;p&gt;因为这些平台只针对企业的内部用户，所以我们通常将它们称为 &lt;em&gt;内部&lt;/em&gt; 平台。&lt;/p&gt;
&lt;p&gt;平台对于云原生架构尤为重要，因为它们比以前的范式更好地将支持功能与特定于应用程序的逻辑分离。在类似云的环境中，资源和功能通常独立管理，并与自定义业务组件集成；这些资源可能包括数据库和对象存储、消息队列和代理、可观测性收集器和仪表板、用户目录和认证系统、任务运行程序和协调器等。内部平台以使它们易于集成到其应用程序和系统中的方式向企业团队提供这些资源。&lt;/p&gt;
&lt;h3 id=&#34;平台成熟度&#34;&gt;平台成熟度&lt;/h3&gt;
&lt;p&gt;在最基本的层面上，内部平台为获取和使用诸如管道运行器、数据库系统或密钥存储等单个服务提供了一致的体验。随着内部平台的成熟，它们也提供了此类服务的&lt;em&gt;组合&lt;/em&gt;，例如针对关键场景（如 Web 应用程序开发或数据分析，即 MLOps）的自助模板。&lt;/p&gt;
&lt;p&gt;企业可通过平台实现的用例可能按以下顺序发展：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;产品开发人员可以按需提供能力并立即使用它们来运行系统，例如计算、存储、数据库或身份验证。&lt;/li&gt;
&lt;li&gt;产品开发人员可以按需提供服务空间并使用它们来运行管道和任务，存储工件和配置，并 / 或收集遥测。&lt;/li&gt;
&lt;li&gt;第三方软件的管理员可以按需提供所需的依赖项，例如数据库，并轻松安装和运行该软件。&lt;/li&gt;
&lt;li&gt;产品开发人员可以从模板中提供完整的环境，组合运行时和开发时所需的服务，以满足特定场景的需求，例如 Web 开发或 MLOps。&lt;/li&gt;
&lt;li&gt;产品开发人员和经理可以通过自动仪表化和标准仪表板观察已部署服务的功能、性能和成本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过为单个能力或它们的集合提供一致、合规的体验，内部平台最终使用户更轻松、更有效地交付有价值的产品。&lt;/p&gt;
&lt;h2 id=&#34;平台的属性&#34;&gt;平台的属性&lt;/h2&gt;
&lt;p&gt;在定义平台是什么以及组织为什么要建立一个平台之后，让我们识别一些影响平台成功的关键属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;平台作为产品&lt;/strong&gt;。平台存在是为了服务于其用户的要求，它应该基于这些要求进行设计和演进，类似于任何其他软件产品。平台应该提供必要的能力，以支持产品团队中最常见的用例，并优先考虑那些只被单个团队使用的更具体的能力，以最大化提供的价值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户体验&lt;/strong&gt;。平台应该通过一致的接口提供其功能，并专注于用户体验。平台应该尽力满足其用户的需求，这可能意味着使用 GUI、API、命令行工具、IDE 和门户的组合。例如，平台通常提供部署应用程序的功能。开发人员可能会通过 IDE 消费这样的功能，测试人员可能会使用命令行工具，而产品所有者可能会使用基于 GUI 的 Web 门户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档和入门&lt;/strong&gt;。文档是成功软件产品的关键方面之一。为了能够使用平台的功能，用户需要文档和示例。平台应该随着适当的文档交付，以满足其用户的需求。它还应该提供工具来加速新项目的入门，以帮助用户以快速简单的方式消费必要的平台服务。例如，平台可以提供用于在 Kubernetes 上构建、扫描、测试、部署和观察 Web 应用程序的可重用的供应链工作流。这样的工作流可以与一个初始的项目模板和文档捆绑在一起，通常被描述为&lt;em&gt;黄金路径&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自服务&lt;/strong&gt;。平台应该是自服务的。用户必须能够自主和自动地请求和接收功能。这个属性对于平台团队能够启用多个产品团队并根据需要进行扩展是关键的。平台的能力应该随时可用，并且通过上述接口进行最小的手动干预。例如，用户应该能够通过运行命令行工具或在 Web 门户上填写表单来请求数据库并接收其定位器和凭据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少用户的认知负荷&lt;/strong&gt;。平台的一个重要目标是减少产品团队的认知负荷。平台应该封装实现细节，并隐藏由其架构引起的任何复杂性。例如，平台可能将某些服务委托给云提供商，但用户不应该接触到这些细节。同时，平台还应该允许用户根据需要配置和观察某些服务。用户不应该负责操作平台提供的服务。例如，用户经常需要数据库，但他们不应该管理数据库服务器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可选和可组合&lt;/strong&gt;。平台旨在使产品开发更加高效，因此它们不能成为障碍。平台应该是可组合的，并使产品团队仅使用其提供的部分功能。当必要时，它还应该使产品团队在平台的提供范围之外提供和管理自己的能力。例如，如果平台不提供图形数据库，而产品需要它，那么产品团队应该能够自行提供和操作图形数据库。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认安全&lt;/strong&gt;。平台应该默认安全，并提供基于组织规则和标准的合规性和验证能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;平台团队的属性&#34;&gt;平台团队的属性&lt;/h2&gt;
&lt;p&gt;平台团队负责平台能力的接口和体验，如 Web 门户、自定义 API 和黄金路径模板。一方面，平台团队与实施基础设施和支持服务的团队合作，以定义一致的体验；另一方面，他们与产品和用户团队合作，收集反馈并确保这些体验满足要求。&lt;/p&gt;
&lt;p&gt;以下是平台团队应负责的工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;研究平台用户需求并计划功能路线图&lt;/li&gt;
&lt;li&gt;推广和倡导平台提议的价值&lt;/li&gt;
&lt;li&gt;管理和开发用于使用和观察能力和服务的接口，包括门户、API、文档和模板以及 CLI 工具&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最重要的是，平台团队必须了解平台用户的需求，以便为他们的平台提供能力和接口，并持续改进。了解用户需求的方式包括用户访谈、交互式黑客马拉松、问题跟踪器和调查以及通过可观测性工具直接观察使用情况。例如，平台团队可以发布一个表单，供用户提交功能请求，主持路线图会议以共享即将推出的功能并审查用户的使用模式以设置优先级。&lt;/p&gt;
&lt;p&gt;入站反馈和周到的设计是产品交付的一面；另一面是出站市场营销和倡导。如果平台确实是基于用户需求构建的，那么这些用户将会很高兴使用提供的能力。平台团队可以通过内部营销活动来促进用户采用，包括广泛的公告、引人入胜的演示和定期的反馈和沟通会议。关键在于满足用户的需求并带领他们踏上旅程，与平台互动并从中受益。&lt;/p&gt;
&lt;p&gt;平台团队不一定运行计算、网络、存储或其他服务。事实上，内部平台应尽可能依赖于&lt;em&gt;外部&lt;/em&gt;提供的服务和功能；平台团队应仅在从受管理供应商或内部基础架构团队处无法获得这些服务和功能时才构建和维护自己的服务。因此，平台团队最负责的是服务和功能的&lt;em&gt;接口&lt;/em&gt;（即 GUI、CLI 和 API）以及平台提供的服务和功能的用户体验。&lt;/p&gt;
&lt;p&gt;例如，平台中的一个 Web 页面可能描述并甚至提供一个按钮来为应用程序进行身份验证；而该功能的实现可能通过云托管的身份验证服务。内部平台团队可能管理网页和 API，但不管理实际的服务实现。平台团队通常应在所需的功能不可在其他地方获得时考虑创建和维护自己的功能。&lt;/p&gt;
&lt;h2 id=&#34;平台的挑战&#34;&gt;平台的挑战&lt;/h2&gt;
&lt;p&gt;虽然平台承诺了很多价值，但也带来了以下挑战，实施者应该注意这些挑战。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;平台团队必须像产品一样对待他们的平台，并与用户一起开发它们。&lt;/li&gt;
&lt;li&gt;平台团队必须仔细选择其优先事项和初始合作伙伴应用程序团队。&lt;/li&gt;
&lt;li&gt;平台团队必须寻求企业领导的支持，并展示其对价值流的影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也许最重要的是将平台作为面向客户的产品，并认识到其成功直接取决于其用户和产品的成功；因此，平台团队与应用程序团队和其他用户合作以优先考虑、规划、实施和迭代平台的功能和用户体验是至关重要的。发布功能和体验而不考虑反馈或依赖自上而下的命令来实现采用的平台团队几乎肯定会遇到用户的阻力和不满，并错过了很多承诺的价值。为了解决这个问题，平台团队应该从一开始就包括产品经理，分享路线图，收集反馈，并全面了解和代表平台用户的需求。&lt;/p&gt;
&lt;p&gt;在采用平台时，选择要启用的正确能力和体验可能至关重要。通常需要且无差异的能力，如管道、数据库和可观测性等，可能是一个很好的起点。平台团队还可以选择首先关注有限数量的参与度高且技能娴熟的应用程序团队。这些团队的详细反馈将改善第一个平台体验；而这些团队的成员将帮助宣传和推广平台，以吸引后续的采用者。&lt;/p&gt;
&lt;p&gt;最后，在大型企业中，快速获得领导支持对于平台团队至关重要。许多企业领导人认为 IT 基础设施是与其主要价值流不相关的开支，并可能试图限制分配给 IT 平台的成本和资源，导致实现效果不佳、承诺未实现和沮丧。为了减轻这种情况，平台团队需要展示其对产品和价值流团队的直接影响和联系（参见前两段），将平台团队呈现为产品团队在向客户提供价值方面的战略合作伙伴。&lt;/p&gt;
&lt;h3 id=&#34;赋能平台团队&#34;&gt;赋能平台团队&lt;/h3&gt;
&lt;p&gt;从这些挑战中可以清楚地看出，平台团队面临着许多不同的责任，这些责任导致认知负荷。与应用程序团队的同事一样，重点是将平台团队的精力集中在与其特定业务相关的体验和功能上。减轻平台团队负担的方法包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寻求建立最薄的可行平台层，以覆盖来自受管理供应商的实现&lt;/li&gt;
&lt;li&gt;利用开源框架和工具包，为应用程序团队使用创建文档、模板和组合&lt;/li&gt;
&lt;li&gt;确保平台团队在其领域和客户数量方面得到适当的人员配备&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何衡量平台的成功&#34;&gt;如何衡量平台的成功&lt;/h2&gt;
&lt;p&gt;企业将希望衡量其平台计划是否提供了上述价值和属性。此外，在本文中我们强调将内部平台视为产品的重要性，而良好的产品管理取决于定量和定性测量产品的性能。为了满足这些要求，内部平台团队应不断收集用户反馈和测量用户活动。&lt;/p&gt;
&lt;p&gt;与内部平台的其他方面一样，平台团队应使用最小可行的工作量来收集他们需要的反馈。我们将在这里建议度量标准，但最初简单的调查和用户行为分析可能最有价值。&lt;/p&gt;
&lt;p&gt;有助于企业和平台团队了解其平台影响的类别包括以下内容：&lt;/p&gt;
&lt;h3 id=&#34;用户满意度和生产率&#34;&gt;用户满意度和生产率&lt;/h3&gt;
&lt;p&gt;许多平台所寻求的第一个品质是提高用户体验，以增加生产力。反映用户满意度和生产率的指标包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;活跃用户和保留：包括所提供的功能数量和用户增长 / 流失&lt;/li&gt;
&lt;li&gt;“净推荐值”（NPS）或其他调查，衡量用户对产品的满意度&lt;/li&gt;
&lt;li&gt;开发人员生产力的度量，如 SPACE 框架中讨论的那些度量 [ &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=3454124&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;组织效率&#34;&gt;组织效率&lt;/h3&gt;
&lt;p&gt;许多平台所寻求的另一个好处是为大量用户提供常见需求的高效方法。这通常通过启用用户自助服务和减少手动步骤和必要的人类干预来实现，同时实施保障安全和合规性的政策。为了衡量平台在减少常见工作方面的效率，请考虑以下措施：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从请求到服务或功能（如数据库或测试环境）的履行的延迟&lt;/li&gt;
&lt;li&gt;将全新的服务构建并部署到生产环境所需的延迟&lt;/li&gt;
&lt;li&gt;新用户提交第一次代码更改到其产品的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;产品和功能交付&#34;&gt;产品和功能交付&lt;/h3&gt;
&lt;p&gt;内部平台的最终目标是更快地向业务客户提供业务价值，因此衡量对企业自身产品和功能发布的影响，可以证明平台的目标已得到实现。Google 的 DevOps 研究和评估（DORA）研究所建议 [ &lt;a href=&#34;https://cloud.google.com/blog/products/devops-sre/the-2019-accelerate-state-of-devops-elite-performance-productivity-and-scaling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;5&lt;/a&gt;] 跟踪以下度量标准：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部署频率&lt;/li&gt;
&lt;li&gt;变更的领先时间&lt;/li&gt;
&lt;li&gt;服务故障后恢复服务的时间&lt;/li&gt;
&lt;li&gt;变更的失败率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，平台团队的关键目标是将基础架构和其他 IT 能力与企业的价值流 - 其产品 - 对齐。因此，组织的产品和应用程序的成功才是衡量平台成功的真正标准。&lt;/p&gt;
&lt;h2 id=&#34;平台的功能&#34;&gt;平台的功能&lt;/h2&gt;
&lt;p&gt;正如我们所描述的，用于云原生计算的平台提供和组合来自许多支持提供者的功能和服务。这些提供者可以是同一企业内的其他团队，也可以是云服务提供商等第三方。简而言之，平台从基础 &lt;em&gt;能力提供者&lt;/em&gt; 到平台用户（如应用程序开发人员）的中间桥梁；在此过程中，实现和执行所需的安全性、性能、成本治理和一致的体验。以下图形说明了产品、平台和能力提供者之间的关系。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-产品平台和能力提供者之间的关系&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;产品、平台和能力提供者之间的关系&#34; srcset=&#34;
               /blog/cncf-platforms-white-paper/platform_components_hu8667884277402462388.webp 400w,
               /blog/cncf-platforms-white-paper/platform_components_hu673659560375401307.webp 760w,
               /blog/cncf-platforms-white-paper/platform_components_hu6850197946454202449.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cncf-platforms-white-paper/platform_components_hu8667884277402462388.webp&#34;
               width=&#34;760&#34;
               height=&#34;561&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      产品、平台和能力提供者之间的关系
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们在本文中着重讨论了如何构建良好的平台和平台团队；现在在最后一节中，我们将描述平台实际上可能提供的能力。这个列表旨在指导平台构建者，并包括典型的云原生应用程序所需的功能。正如我们一直在强调的，良好的平台反映了其用户的需求，因此最终平台团队应该与其用户一起选择和优先考虑平台所提供的功能。&lt;/p&gt;
&lt;p&gt;能力可以包括几个&lt;em&gt;特性&lt;/em&gt;，意味着父能力域的方面或属性。例如，可观测性可能包括用于收集和发布度量、跟踪和日志以及观察成本和能源消耗的特性。在您的组织中考虑每个特性或方面的需求和优先级。随后的 CNCF 出版物可能会进一步扩展每个域。&lt;/p&gt;
&lt;p&gt;在构建云原生计算平台时要考虑以下能力领域：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用于观察和配置产品和能力的 &lt;strong&gt;Web 门户&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用于自动配置产品和能力的 &lt;strong&gt;APIs&lt;/strong&gt;（和 CLIs）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“黄金路径”模板和文档&lt;/strong&gt;，以便在产品中实现最佳使用&lt;/li&gt;
&lt;li&gt;用于构建和测试服务和产品的&lt;strong&gt;自动化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用于交付和验证服务和产品的&lt;strong&gt;自动化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发环境&lt;/strong&gt;，如托管的 IDE 和远程连接工具&lt;/li&gt;
&lt;li&gt;使用仪器和仪表板的服务和产品的&lt;strong&gt;可观测性&lt;/strong&gt;，包括功能、性能和成本的观察&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基础设施&lt;/strong&gt;服务，包括计算运行时、可编程网络以及块和卷存储&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据&lt;/strong&gt;服务，包括数据库、缓存和对象存储&lt;/li&gt;
&lt;li&gt;包括代理、队列和事件织物的&lt;strong&gt;消息&lt;/strong&gt;和事件服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;身份和密码&lt;/strong&gt;管理服务，例如服务和用户身份和授权、证书和密钥发行以及静态密码存储&lt;/li&gt;
&lt;li&gt;包括代码和工件的静态分析、运行时分析和策略执行的&lt;strong&gt;安全&lt;/strong&gt;服务&lt;/li&gt;
&lt;li&gt;包括容器镜像和特定语言包、自定义二进制文件和库以及源代码的&lt;strong&gt;工件存储&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下表格旨在帮助读者通过松散相关现有 CNCF 或 CDF 项目来理解每种能力。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;能力&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;描述&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;示例 CNCF/CDF 项目&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;用于配置和观察能力的 Web 门户&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;发布文档、服务目录和项目模板。发布有关系统和能力的遥测数据。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Backstage、Skooner、Ortelius&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;自动配置能力的 API&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;用于自动创建、更新、删除和观察能力的结构化格式。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Kubernetes、Crossplane、Operator Framework、Helm、KubeVela&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;黄金路径模板和文档&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;用于快速项目开发的良好集成代码和能力的模板化组合。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ArtifactHub&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;用于构建和测试产品的自动化&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;自动构建和测试数字产品和服务。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Tekton、Jenkins、Buildpacks、ko、Carvel&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;用于交付和验证服务的自动化&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;自动化和观察服务的交付。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Argo、Flux、Keptn、Flagger、OpenFeature&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;开发环境&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;启用应用程序和系统的研究和开发。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Devfile、Nocalhost、Telepresence、DevSpace&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;应用程序可观测性&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;仪表应用程序，收集和分析遥测数据，并将信息发布给利益相关者。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;OpenTelemetry、Jaeger、Prometheus、Thanos、Fluentd、Grafana、OpenCost&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;基础设施服务&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;运行应用程序代码、连接应用程序组件并为应用程序持久化数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Kubernetes、Kubevirt、Knative、WasmEdgeCNI、Istio、Cilium、Envoy、Linkerd、CoreDNSRook、Longhorn、Etcd&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;数据服务&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;持久化应用程序的结构化数据&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;TiKV、Vitess、SchemaHero&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;消息和事件服务&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;使应用程序异步通信&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Strimzi、NATS、gRPC、Knative、Dapr&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;身份和密码服务&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;确保工作负载具有定位器和密码来使用资源和能力。使服务能够向其他服务识别自己&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Dex、External Secrets、SPIFFE/SPIRE、Teller、cert-manager&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;安全服务&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;观察运行时行为并报告 / 纠正异常。验证构建和工件不包含漏洞。根据企业要求限制平台上的活动；通知和 / 或纠正异常&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Falco、In-toto、KubeArmor、OPA、Kyverno、Cloud Custodian&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;工件存储&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;存储、发布和保护用于生产的内置工件。缓存和分析第三方工件。存储源代码。&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ArtifactHub、Harbor、Distribution、Porter&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;术语表&#34;&gt;术语表&lt;/h2&gt;
&lt;p&gt;请参见 &lt;a href=&#34;https://glossary.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://glossary.cncf.io/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台&lt;/strong&gt;聚合能力，为开发人员和运营商开发和交付产品、服务和应用程序提供服务。关于它旨在支持的场景，平台可能被命名为“开发人员平台”、“交付平台”、“应用程序平台”甚至是“云平台”。较旧的术语“平台即服务”或 PaaS 的内涵也具有影响力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台&lt;/strong&gt;通过提供和管理共同的能力，使开发人员和运营人员能够更快地交付应用程序和服务。平台是平台用户和平台能力提供者之间的桥梁，并由平台团队构建和维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台能力提供者&lt;/strong&gt;开发和维护平台提供的能力。提供者可以是外部组织或内部团队，能力可以是基础设施、运行时或其他支持服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台工程师&lt;/strong&gt;负责开发和维护界面和工具，以便根据平台产品经理提供的要求和说明，在应用程序中启用平台能力的配置和集成。平台开发人员通常分组在平台团队中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台产品经理&lt;/strong&gt;负责了解平台用户的体验，建立涵盖平台产品差距、需求和机会的路线图，并管理平台团队的日常工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台团队&lt;/strong&gt;负责开发和维护与平台能力的接口和体验，如 Web 门户、自定义 API 和黄金路径模板。平台团队由平台产品经理管理，并涉及平台开发人员。随着平台的发展和越来越先进，其他角色也可以成为平台团队的一部分，包括但不限于运营商、QA 分析师、UI/UX 设计师、技术作家、开发人员倡导者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;平台用户&lt;/strong&gt;包括但不限于应用程序开发人员和运营人员、数据科学家、COTS 软件操作员和信息工作者 - 在平台上运行软件或使用平台提供的能力的任何人。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最薄可行平台（TVP）&lt;/strong&gt; 是由 Matthew Skelton 和 Manuel Pais 在书籍 &lt;em&gt;Team Topologies&lt;/em&gt; 中最初定义的一个概念。定义说：“TVP 是在保持平台小的同时确保平台有助于加速和简化团队构建平台的软件交付的谨慎平衡。”。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dapr（分布式应用运行时）加入 CNCF 孵化器</title>
      <link>https://cloudnativecn.com/blog/dapr-distributed-application-runtime-joins-cncf-incubator/</link>
      <pubDate>Thu, 04 Nov 2021 02:37:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/dapr-distributed-application-runtime-joins-cncf-incubator/</guid>
      <description>&lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;本文英文原文发布在 CNCF 官方博客 &lt;a href=&#34;https://www.cncf.io/blog/2021/11/03/dapr-distributed-application-runtime-joins-cncf-incubator/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dapr (Distributed Application Runtime) joins CNCF Incubator&lt;/a&gt; 上，译者敖小剑，宋净超参与了审校。另外云原生社区中也成立了 &lt;a href=&#34;https://cloudnative.to/community/sig/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dapr 小组&lt;/a&gt;，欢迎各位爱好者加入。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;CNCF &lt;a href=&#34;https://github.com/cncf/toc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;技术监督委员会&lt;/a&gt;（TOC）已经投票决定接受 Dapr 作为 CNCF 的孵化项目。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dapr.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dapr&lt;/a&gt; 是一套使开发者能够轻松编写分布式应用的 API。无论是在 Kubernetes 还是其他环境中，Dapr 都是以 Sidecar 进程运行在应用程序旁边，为开发者提供了一套形式为 pub/sub、状态管理、秘密管理、事件触发器和服务间调用的安全而可靠的原语。在 Dapr 的帮助下，开发人员可以专注于构建业务逻辑而不是基础设施。&lt;/p&gt;
&lt;p&gt;Dapr 维护者和指导委员会成员 Mark Fussell 说：“我听到开发者说 Dapr 如何缩短了他们在 Kubernetes 和其他托管平台上构建可扩展的分布式应用的时间，并解决了他们的业务需求，这对我产生了巨大的鼓舞。现在，随着 Dapr 成为 CNCF 的一部分，开发人员能够更容易地构建、使用和采纳云原生技术。”&lt;/p&gt;
&lt;p&gt;该项目于 2019 年在微软创建。随着时间的推移，许多社区成员加入该项目并做出贡献，扩展并帮助它在 2021 年 2 月达到了稳定的 1.0 版本。今天，Dapr 技术指导委员会管理该项目，其代表来自阿里巴巴、英特尔和微软。&lt;/p&gt;
&lt;p&gt;Dapr 维护者和指导委员会成员 Yaron Schneider 说：“我最自豪的是日益壮大的 Dapr 社区为项目贡献了新的 API 和构建块。我们在项目的 20 多个仓库中都有贡献，从我们的开发者工具和 SDK 到运行时本身。看到开发者来到这个项目并提出新的 API，帮助解决分布式系统的挑战，这是 Dapr 社区的重要成就。”&lt;/p&gt;
&lt;p&gt;Dapr 和多个 CNCF 项目集成。例如，使用 gRPC 进行内部 sidecar 通信，为 ACL 创建 SPIFFIE 身份，以 OpenTelemetry 格式发出遥测数据，使用 Prometheus 进行指标收集，利用 CloudEvents 作为 pub/sub 消息格式，并使用 Operator 在 Kubernetes 上原生运行。&lt;/p&gt;
&lt;p&gt;该项目被阿里云、Legentic、Tdcare、腾讯、Swoop Funding、Man Group、Zeiss &lt;a href=&#34;https://github.com/dapr/community/blob/master/ADOPTERS.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;等组织&lt;/a&gt;在生产中使用。采用者在所有主流云供应商以及企业内部环境上运行 Dapr。&lt;/p&gt;
&lt;p&gt;前阿里巴巴云的资深技术专家李响说：“在阿里云，我们相信 Dapr 将引领微服务开发的方向。通过采用 Dapr，我们的客户可以更快地建立可移植的、强大的分布式系统。”&lt;/p&gt;
&lt;p&gt;Ignition 集团的首席数字化转型官 Russell Stather 说：“使用 Dapr 可以在不改变其他任何东西的情况下轻易的引入新的基础设施。它改变了我们的业务。”&lt;/p&gt;
&lt;p&gt;蔡司的首席架构师 Kai Walter 说：“在我们的多云环境中，Dapr 给了我们需要的灵活性。它提供了一个抽象层，使开发人员能够专注于手头的业务案例。”&lt;/p&gt;
&lt;p&gt;主要组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dapr sidecar&lt;/strong&gt;：在应用程序旁边运行，包含面向开发者的 API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CLI 和 SDK&lt;/strong&gt;：构成项目的开发者工具体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Components-contrib 仓库&lt;/strong&gt;：开发者可以扩展 Dapr，以集成和支持各种云服务和开源技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显著的里程碑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;15100 个 GitHub Star&lt;/li&gt;
&lt;li&gt;1940 个 Pull Request&lt;/li&gt;
&lt;li&gt;3703 个问题&lt;/li&gt;
&lt;li&gt;1300 个贡献者&lt;/li&gt;
&lt;li&gt;14 次发布，目前稳定版 v1.4&lt;/li&gt;
&lt;li&gt;2600 万次 Docker 拉取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CNCF 首席技术官 Chris Aniszczyk 说：“分布式应用和微服务构成了容器和云原生的基础，但编写可扩展和可靠的分布式应用是非常困难的。Dapr 与其他 CNCF 项目集成的很好，并提供最佳实践，开发人员可以使用任何语言或框架在上面构建。我们很高兴欢迎 Dapr 加入 CNCF 并努力培养他们的社区。”&lt;/p&gt;
&lt;p&gt;Dapr 项目的路线图包括增加新的配置 API，使开发者更容易管理其应用程序的配置，并在配置发生变化时得到通知；以及一个查询 API，使开发者更容易查询和过滤 Dapr 状态存储数据。此外，该项目正在寻求增加对基于 gRPC 和 WASM 的组件的支持，这将支持状态存储、pub/sub broker、binding 和其他 Dapr 组件的动态发现。最后，Dapr 社区还在讨论新的并发性 API，以解锁领导者选举等场景。&lt;/p&gt;
&lt;p&gt;作为由 CNCF 托管的项目，Dapr 是与其技术利益相一致的中立基金会的一部分，也是更大的 Linux 基金会的一部分，后者提供管理、营销支持和社区推广。Dapr 加入了孵化技术的行列：Argo, Buildpacks, Cilium, CloudEvents, CNI, Contour, Cortex, CRI-O, Crossplane, Dragonfly, emissary-ingress, Falco, Flagger, Flux, gRPC, KEDA, KubeEdge, Longhorn, NATS, Notary, OpenTelemetry, Operator Framework, SPIFFE, SPIRE, 和 Thanos。关于每个级别的成熟度要求，请访问 &lt;a href=&#34;https://github.com/cncf/toc/blob/master/process/graduation_criteria.adoc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 的毕业标准&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
