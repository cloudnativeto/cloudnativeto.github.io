<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>陈有坤 | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/%E9%99%88%E6%9C%89%E5%9D%A4/</link>
      <atom:link href="https://cloudnative.to/author/%E9%99%88%E6%9C%89%E5%9D%A4/index.xml" rel="self" type="application/rss+xml" />
    <description>陈有坤</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Tue, 07 Aug 2018 22:20:49 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/author/%E9%99%88%E6%9C%89%E5%9D%A4/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>陈有坤</title>
      <link>https://cloudnative.to/author/%E9%99%88%E6%9C%89%E5%9D%A4/</link>
    </image>
    
    <item>
      <title>基于 Kubernetes 和 Istio 的 Serverless 框架 Knative 解析之 Autoscaler</title>
      <link>https://cloudnative.to/blog/knative-serving-autoscaler-single-tenancy-deep-dive/</link>
      <pubDate>Tue, 07 Aug 2018 22:20:49 +0800</pubDate>
      <guid>https://cloudnative.to/blog/knative-serving-autoscaler-single-tenancy-deep-dive/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;我们都是知道 Kubernetes 中个资源对象叫 autoscaler，该对象在 serverless 架构中更是不可或缺，有了它可以负责应用的自动水平伸缩，用户再也不用关心示例的个数和资源消耗，本文是来自阿里巴巴 UC 事业群基础研发部的陈有坤同学对 Knative 的解析之 autoscaler 部分，还有大量的解析等待放出，起关注本站的后续内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knative&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative&lt;/a&gt;是一款基于 Kubernetes 的平台，用来构建、部署和管理现代 serverless 应用的框架。该框架试图将云原生应用开发的以下三个领域的最佳实践结合起来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建容器（和函数）&lt;/li&gt;
&lt;li&gt;为工作负载提供服务（和动态扩展）&lt;/li&gt;
&lt;li&gt;事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knative 是由谷歌与&lt;a href=&#34;https://content.pivotal.io/blog/knative-powerful-building-blocks-for-a-portable-function-platform&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pivotal&lt;/a&gt;、&lt;a href=&#34;https://www.ibm.com/blogs/cloud-computing/2018/07/24/ibm-cloud-google-knative-serverless/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM&lt;/a&gt;、&lt;a href=&#34;https://blog.openshift.com/state-of-serverless-in-kubernetes-knative-and-openshift-cloud-functions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Red Hat&lt;/a&gt; 和&lt;a href=&#34;https://blogs.sap.com/?p=696354&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SAP&lt;/a&gt;紧密协作开发的。 &lt;/p&gt;
&lt;p&gt;Knative 构建在 Kubernetes 和&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;之上，它的设计考虑到了多种角色通过该框架进行交互，包括开发人员、运维人员和平台提供者。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/knative-serving-autoscaler-single-tenancy-deep-dive/0069RVTdgy1fu1er29srhj30ws0mpgo9_huadbc063bec3796bbad20fe8a9e119a13_99303_7ea126142c02c654dca07fb054e41102.webp 400w,
               /blog/knative-serving-autoscaler-single-tenancy-deep-dive/0069RVTdgy1fu1er29srhj30ws0mpgo9_huadbc063bec3796bbad20fe8a9e119a13_99303_10a5e6e910e091ada69c19d39d7a404f.webp 760w,
               /blog/knative-serving-autoscaler-single-tenancy-deep-dive/0069RVTdgy1fu1er29srhj30ws0mpgo9_huadbc063bec3796bbad20fe8a9e119a13_99303_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/knative-serving-autoscaler-single-tenancy-deep-dive/0069RVTdgy1fu1er29srhj30ws0mpgo9_huadbc063bec3796bbad20fe8a9e119a13_99303_7ea126142c02c654dca07fb054e41102.webp&#34;
               width=&#34;760&#34;
               height=&#34;526&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Knative 所涉及的角色（图片来源于&lt;a href=&#34;https://github.com/knative/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative GitHub 仓库&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;Knative 致力于提供可重用的“通用模式和最佳实践组合”实现，目前可用的组件包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/knative/build&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build&lt;/a&gt;：从源到容器的构建编排；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/knative/eventing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eventing&lt;/a&gt;：管理和交付事件；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/knative/serving&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Serving&lt;/a&gt;：请求驱动的计算，可以缩放到零。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以上内容引用自： &lt;a href=&#34;http://www.infoq.com/cn/news/2018/07/knative-kubernetes-serverless&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InfoQ | 谷歌发布 Knative：用于构建、部署和管理 Serverless 工作负载的 Kubernetes 框架&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上是对 Knative 的基本介绍，关于 Knative 的更多信息大家可以关注其 GitHub：&lt;a href=&#34;https://github.com/knative&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/knative&lt;/a&gt;，我们都是知道 Kubernetes 中个资源对象叫&lt;code&gt;autoscaler&lt;/code&gt;，该对象在 serverless 架构中是不可或缺的，有了它可以负责应用的自动水平伸缩，用户再也不用关心示例的个数和资源消耗，下文是来自阿里巴巴 UC 事业群的陈有坤同学对 Knative 的解析。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面首先解析的是 Serving 中的 Autoscaling 组件，该组件的功能是根据网络流量来自动伸缩应用实例的个数。&lt;/p&gt;
&lt;h2 id=&#34;knative-是如何做伸缩容的&#34;&gt;Knative 是如何做伸缩容的？&lt;/h2&gt;
&lt;p&gt;处理伸缩容问题，首先要解决的问题是根据什么指标判断伸缩容？cpu、内存、请求数？这里 knative 使用的是请求数。&lt;/p&gt;
&lt;p&gt;其次是伸缩多少的问题。&lt;/p&gt;
&lt;p&gt;Knative 的伸缩是依赖修改 deployment 的 replica 数实现的。&lt;/p&gt;
&lt;h2 id=&#34;如何采集请求数&#34;&gt;如何采集请求数？&lt;/h2&gt;
&lt;p&gt;启动 revision 的 pod 时，也会启动一个 autoscaler（一个 knative revision 只启动一个 autoscaler），autoscaler 自己本身也会 scale 到 0，用于接收请求数统计和处理伸缩容。&lt;/p&gt;
&lt;p&gt;业务 pod 中，会注入 queue-proxy sidecar，用于接收请求，在这里会统计并发数，每秒向 autoscaler 汇报，接收到的请求会转发给业务 container。&lt;/p&gt;
&lt;p&gt;注：单租户模式下一个 revision 启动一个 autoscaler，多租户共用一个 autoscaler&lt;/p&gt;
&lt;h2 id=&#34;计算需要-pod-的个数&#34;&gt;计算需要 pod 的个数？&lt;/h2&gt;
&lt;p&gt;autoscaler 接收到并发统计的时候，会根据算法计算需要的 pod 个数。&lt;/p&gt;
&lt;p&gt;算法中有两种模式，分别是 panic 和 stable 模式，一个是短时间，一个是长时间，为了解决短时间内请求突增的场景，需要快速扩容。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knative/docs/blob/master/serving/samples/autoscale-go/README.md#algorithm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档中描述&lt;/a&gt;的算法是，默认的 target concurrency 是 1，如果一个 revision 35QPS，每个请求花费 0.25 秒，Knative Serving 觉得需要 9 个 pod。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ceil&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;35&lt;/span&gt; * .25&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ceil&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;8.75&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;stable-mode稳定模式&#34;&gt;Stable Mode（稳定模式）&lt;/h4&gt;
&lt;p&gt;在稳定模式下，Autoscaler 根据每个 pod 期望的并发来调整 Deployment 的副本个数。根据每个 pod 在 60 秒窗口内的平均并发来计算，而不是根据现有副本个数计算，因为 pod 的数量增加和 pod 变为可服务和提供指标数据有一定时间间隔。&lt;/p&gt;
&lt;h4 id=&#34;panic-mode恐慌模式&#34;&gt;Panic Mode（恐慌模式）&lt;/h4&gt;
&lt;p&gt;Panic 时间窗口默认是 6 秒，如果在 6 秒内达到 2 倍期望的并发，则转换到恐慌模式下。在恐慌模式下，Autoscaler 根据这 6 秒的时间窗口计算，这样更能及时的响应突发的流量请求。每 2 秒调整 Deployment 的副本数达到想要的 pod 个数（或者最大 10 倍当前 pod 的数量），为了避免 pod 数量频繁变动，在恐慌模式下只能增加，不会减少。60 秒后会恢复回稳定模式。&lt;/p&gt;
&lt;h1 id=&#34;autoscaler-单租户图&#34;&gt;autoscaler 单租户图&lt;/h1&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/knative-serving-autoscaler-single-tenancy-deep-dive/0069RVTdgy1fu1g19gvitj31kw13agrp_hu5888a47d055bf1860650e5f7169d5e55_240399_c0ccf771242c4d43afdcd9285b72c164.webp 400w,
               /blog/knative-serving-autoscaler-single-tenancy-deep-dive/0069RVTdgy1fu1g19gvitj31kw13agrp_hu5888a47d055bf1860650e5f7169d5e55_240399_717161cebc2b16917909a5130473804d.webp 760w,
               /blog/knative-serving-autoscaler-single-tenancy-deep-dive/0069RVTdgy1fu1g19gvitj31kw13agrp_hu5888a47d055bf1860650e5f7169d5e55_240399_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/knative-serving-autoscaler-single-tenancy-deep-dive/0069RVTdgy1fu1g19gvitj31kw13agrp_hu5888a47d055bf1860650e5f7169d5e55_240399_c0ccf771242c4d43afdcd9285b72c164.webp&#34;
               width=&#34;760&#34;
               height=&#34;525&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图基于 &lt;a href=&#34;https://github.com/knative/serving/blob/master/docs/scaling/DEVELOPMENT.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/knative/serving/blob/master/docs/scaling/DEVELOPMENT.md&lt;/a&gt; 绘制。&lt;/p&gt;
&lt;h1 id=&#34;模式&#34;&gt;模式&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;// 每个 pod 实例同时只处理一个请求
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;RevisionRequestConcurrencyModelSingle&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;RevisionRequestConcurrencyModelType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Single&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;// 每个 pod 实例同时处理多个请求
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;RevisionRequestConcurrencyModelMulti&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;RevisionRequestConcurrencyModelType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Multi&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;配置&#34;&gt;配置&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind: ConfigMap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  name: config-autoscaler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  namespace: knative-serving
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;data:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Static parameters:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 期望每个pod并发请求数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  multi-concurrency-target: &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 如果是单个并发，值要接近1.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  single-concurrency-target: &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.9&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# stable窗口时间，计算平均并发会用到。如果进入panic模式后，经过stable窗口时间也会恢复stable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  stable-window: &lt;span class=&#34;s2&#34;&gt;&amp;#34;60s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 如果平均并发在panic窗口时间内达到2倍目标并发，autoscaler进入panic模式。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 在panic模式下，自动伸缩按在panic窗口时间的平均并发来操作。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  panic-window: &lt;span class=&#34;s2&#34;&gt;&amp;#34;6s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 最大增长比例，每次调整会根据并发计算增长比例，最大增长不超过这个值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  max-scale-up-rate: &lt;span class=&#34;s2&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 计算并发值的参数，每一段时间得到最大并发，作为一个bucket，最后汇报的时候，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 平均并发 = 各个bucket最大并发之和 / 总bucket数，汇报间隔是1秒（hard coded）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  concurrency-quantum-of-time: &lt;span class=&#34;s2&#34;&gt;&amp;#34;100ms&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 是否开启缩容到0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  enable-scale-to-zero: &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 实验性：开启垂直扩容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Requires a VPA installation (e.g. ./third_party/vpa/install-vpa.sh)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  enable-vertical-pod-autoscaling: &lt;span class=&#34;s2&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 如果开启了enable-vertical-pod-autoscaling，这个值就会替代multi-concurrency-target，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 如果成熟了后期会变成默认值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  vpa-multi-concurrency-target: &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 多长时间调整一次&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  tick-interval: &lt;span class=&#34;s2&#34;&gt;&amp;#34;2s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Dynamic parameters (take effect when config map is updated):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 空闲多长时间缩容到0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  scale-to-zero-threshold: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
