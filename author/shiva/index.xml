<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiva | 云原生社区（中国）</title>
    <link>https://cloudnative.to/author/shiva/</link>
      <atom:link href="https://cloudnative.to/author/shiva/index.xml" rel="self" type="application/rss+xml" />
    <description>Shiva</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/shiva/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Shiva</title>
      <link>https://cloudnative.to/author/shiva/</link>
    </image>
    
    <item>
      <title>为什么要选择 Service Mesh？</title>
      <link>https://cloudnative.to/blog/why-is-service-mesh/</link>
      <pubDate>Thu, 08 Nov 2018 15:20:46 +0800</pubDate>
      <guid>https://cloudnative.to/blog/why-is-service-mesh/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://medium.com/@tak2siva/why-is-service-mesh-8ebcd6ed9eb5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;除非你长期与世隔绝，否则你应该听说过 Kubernetes，他已经称为高速发展的互联网公司的一条准则。最近又有一个热门话题&amp;ndash;Service Mesh（服务网格），它已经被这些高速发展公司用来解决一些特定的问题。所以如果你想了解什么是 Service Mesh，接下来我可以给你一个更好的解释。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx0r3hzbzlj20zk0ilnmj_hu11c28948973826fb8422e505661eb1ef_42818_da6ddedd1feb00f24d3428bbf594214d.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx0r3hzbzlj20zk0ilnmj_hu11c28948973826fb8422e505661eb1ef_42818_952bdaad45036e2215beeee206f24948.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx0r3hzbzlj20zk0ilnmj_hu11c28948973826fb8422e505661eb1ef_42818_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx0r3hzbzlj20zk0ilnmj_hu11c28948973826fb8422e505661eb1ef_42818_da6ddedd1feb00f24d3428bbf594214d.webp&#34;
               width=&#34;690&#34;
               height=&#34;361&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;互联网应用的演进&#34;&gt;互联网应用的演进&lt;/h2&gt;
&lt;p&gt;为了理解 Sevice Mesh 的重要性，我们通过四个阶段来简短的回顾下互联网应用的发展历程。&lt;/p&gt;
&lt;h3 id=&#34;阶段-0单体应用&#34;&gt;阶段 0：单体应用&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx0r9265r7j208s06omxs_hu19ae9bdf9f7666dd0ed16f53afabd4eb_10377_4a46cdf3a90032499f0c8c413c6b67d2.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx0r9265r7j208s06omxs_hu19ae9bdf9f7666dd0ed16f53afabd4eb_10377_1c065da390e36f9a9e1fe1c7a8ff5089.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx0r9265r7j208s06omxs_hu19ae9bdf9f7666dd0ed16f53afabd4eb_10377_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx0r9265r7j208s06omxs_hu19ae9bdf9f7666dd0ed16f53afabd4eb_10377_4a46cdf3a90032499f0c8c413c6b67d2.webp&#34;
               width=&#34;316&#34;
               height=&#34;240&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;还记得那些年吗？所有的代码库都打包成一个可执行和部署的软件包。当然，至今在某些使用场景下这个方式依然是很管用的。但是对于一些业务快速增长的互联网公司，在应用的可扩展性、快速部署和所有权等方面遇到了阻力。&lt;/p&gt;
&lt;h3 id=&#34;阶段-1微服务&#34;&gt;阶段 1：微服务&lt;/h3&gt;
&lt;p&gt;微服务的思思想很简单，依照 SLA（服务等级协议）将单体应用拆分成多个模块。这种方式运行效果显著，所以广泛为企业所接受。现在，每个团队都用他们喜爱的语言、框架等自由地设计他们的微服务。然后它开始看起来就像下面这样。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx0si4ef85j218g0n4tde_hu04ce2ee5a954d26b965fb026420a95b9_27333_dd714173586e9c9832ce91b69a50167b.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx0si4ef85j218g0n4tde_hu04ce2ee5a954d26b965fb026420a95b9_27333_b0add2c344a5695b5e5f5f1028c64758.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx0si4ef85j218g0n4tde_hu04ce2ee5a954d26b965fb026420a95b9_27333_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx0si4ef85j218g0n4tde_hu04ce2ee5a954d26b965fb026420a95b9_27333_dd714173586e9c9832ce91b69a50167b.webp&#34;
               width=&#34;690&#34;
               height=&#34;359&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们曾经在我的一个项目中开玩笑说，那里有各种语言的微服务:)&lt;/p&gt;
&lt;p&gt;尽管微服务解决了单体应用的一些问题，但现在公司有一些严重问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为每个微服务定义 VM（虚拟机）规范&lt;/li&gt;
&lt;li&gt;维护系统级别依赖操作系统版本、自动化工具（如 chef）等&lt;/li&gt;
&lt;li&gt;监控每个服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对负责构建和部署的人来说这就是一个噩梦。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx0vg3ks7aj20dc07iq53_hu01fefa68e3f7c35d88e8bcddfe8b7aa4_24981_6ba1fef70544c8a3f6a6a78d5de76510.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx0vg3ks7aj20dc07iq53_hu01fefa68e3f7c35d88e8bcddfe8b7aa4_24981_6dc2b9e73413707d85e3072ce0b45435.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx0vg3ks7aj20dc07iq53_hu01fefa68e3f7c35d88e8bcddfe8b7aa4_24981_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx0vg3ks7aj20dc07iq53_hu01fefa68e3f7c35d88e8bcddfe8b7aa4_24981_6ba1fef70544c8a3f6a6a78d5de76510.webp&#34;
               width=&#34;480&#34;
               height=&#34;270&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;而且这些服务在虚拟机中共享同一个 OS，但为了达到可移植性，服务之间需要隔离或者被封装到独立的 VM 镜像。微服务典型的架构设计如下图所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx0vt7d9woj218g0n4tc3_huba7e13a4d64c6d0a20b3275bf74a4062_28047_c24ac2a85cf6b777214caee7e3c38675.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx0vt7d9woj218g0n4tc3_huba7e13a4d64c6d0a20b3275bf74a4062_28047_0d4a32bfda5b100a4971449ce8b1da29.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx0vt7d9woj218g0n4tc3_huba7e13a4d64c6d0a20b3275bf74a4062_28047_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx0vt7d9woj218g0n4tc3_huba7e13a4d64c6d0a20b3275bf74a4062_28047_c24ac2a85cf6b777214caee7e3c38675.webp&#34;
               width=&#34;690&#34;
               height=&#34;359&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;但为每个服务/副本安装在一台独立的虚拟机上，花费是非常高的。&lt;/p&gt;
&lt;h3 id=&#34;阶段-2容器化&#34;&gt;阶段 2：容器化&lt;/h3&gt;
&lt;p&gt;容器是利用 Linux 中的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Cgroups&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cgroups&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_namespaces&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;namespace&lt;/a&gt; 的一种新的操作系统级别的虚拟化技术，通过共享主机的操作系统，实现为不同的应用隔离运行环境的。Docker 是目前最流行的容器运行时。&lt;/p&gt;
&lt;p&gt;所以我们会为每个微服务创建一个容器镜像并以容器形式发布成服务。这样不仅可以在一个操作系统上实现应用运行环境的隔离，而且启动新的容器相比于启动新的 VM 速度更快、成本也更低！使用容器技术之后的微服务设计看起来就像这样。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx0wzyguoej218g0n4ju8_hu69dfadd45d72b64fa8401a289cdd9048_25814_b60bac64ea69a53486656c01445f6611.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx0wzyguoej218g0n4ju8_hu69dfadd45d72b64fa8401a289cdd9048_25814_447b386884b0be26f811347ffb2aef56.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx0wzyguoej218g0n4ju8_hu69dfadd45d72b64fa8401a289cdd9048_25814_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx0wzyguoej218g0n4ju8_hu69dfadd45d72b64fa8401a289cdd9048_25814_b60bac64ea69a53486656c01445f6611.webp&#34;
               width=&#34;690&#34;
               height=&#34;359&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;容器化解决了构建和部署的问题，但还没有完美的监控解决方案！那要怎么办？我们还有其他问题吗？管理容器！&lt;/p&gt;
&lt;p&gt;使用容器运行一个可靠的基础设施层需要注意以下几个重要的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器的可用性&lt;/li&gt;
&lt;li&gt;生成容器&lt;/li&gt;
&lt;li&gt;扩容/缩容&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;服务发现&lt;/li&gt;
&lt;li&gt;调度容器到多个主机&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;阶段-3容器编排&#34;&gt;阶段 3：容器编排&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx1kwi5nvpj205t05o74e_hub5cfe3bc1ea6011b16e9626f075998d8_12292_daa9a706502021c3ebe741c1fc53e91a.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx1kwi5nvpj205t05o74e_hub5cfe3bc1ea6011b16e9626f075998d8_12292_d3f0b11def36c2484da970ede507451e.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx1kwi5nvpj205t05o74e_hub5cfe3bc1ea6011b16e9626f075998d8_12292_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx1kwi5nvpj205t05o74e_hub5cfe3bc1ea6011b16e9626f075998d8_12292_daa9a706502021c3ebe741c1fc53e91a.webp&#34;
               width=&#34;209&#34;
               height=&#34;204&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kubernetes 是当下最流行的容器编排工具，它彻底改变了我们对基础设施的看法。Kubernetes 侧重于健康检查，可用性，负载均衡，服务发现，扩展性，跨主机调度容器等等，很神奇！&lt;/p&gt;
&lt;p&gt;我们要的就是这样吗？&lt;/p&gt;
&lt;p&gt;并不完全是，仅仅这样还不能解决在微服务阶段提到的服务监控/观测的问题。这只是冰山一角。微服务是分布式的，所以管理微服务不是件容易的事。&lt;/p&gt;
&lt;p&gt;我们需要考虑一些最佳实践来便捷地运行微服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Metrics（延迟，成功率等）&lt;/li&gt;
&lt;li&gt;分布式链路追踪&lt;/li&gt;
&lt;li&gt;客户端负载均衡&lt;/li&gt;
&lt;li&gt;熔断&lt;/li&gt;
&lt;li&gt;流量迁移&lt;/li&gt;
&lt;li&gt;限速&lt;/li&gt;
&lt;li&gt;访问日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像 Netflix 这样的公司已经推出了几种工具，并接受了那些运行微服务的做法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Netflix Spectator（Metrics）&lt;/li&gt;
&lt;li&gt;Netflix Ribbon（客户端负载均衡/服务发现）&lt;/li&gt;
&lt;li&gt;Netflix Hystrix（熔断器）&lt;/li&gt;
&lt;li&gt;Netflix Zuul（边界路由）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，为了满足这些最佳实践的唯一方法是在每个微服务上使用一个客户端库来解决每个问题。所以每个服务的结构看起来就像这样。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx1ojjkrfuj212g0fymz5_hudd9c3342bc9077d3a122aab93cd79147_20428_dfe7b785c3e317d8ff0f2cd680ea1e6c.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx1ojjkrfuj212g0fymz5_hudd9c3342bc9077d3a122aab93cd79147_20428_78435a5714458218718d6714bfc11120.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx1ojjkrfuj212g0fymz5_hudd9c3342bc9077d3a122aab93cd79147_20428_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx1ojjkrfuj212g0fymz5_hudd9c3342bc9077d3a122aab93cd79147_20428_dfe7b785c3e317d8ff0f2cd680ea1e6c.webp&#34;
               width=&#34;690&#34;
               height=&#34;286&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;但这是针对像 Service A 这样的用 JAVA 写的服务，那其他的服务要怎么办？
如果我使用其他语言没有类似 java 的库要怎么办？
怎样才能让所有团队使用/维护/升级库版本？
我们公司有上百个服务，我要修改所有应用都使用上面的库吗？&lt;/p&gt;
&lt;p&gt;发现了吗？自微服务诞生以来，这些一直都是个问题（语言限制、应用代码改造）。&lt;/p&gt;
&lt;h3 id=&#34;阶段-4服务网格&#34;&gt;阶段 4：服务网格&lt;/h3&gt;
&lt;p&gt;目前有多种代理为 Service Mesh 提供解决方案，如：&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;、Linkerd 和 Nginx。本文只关注 Envoy 的 Service Mesh。&lt;/p&gt;
&lt;p&gt;Envoy 是针对微服务产生的这些问题设计出来的服务代理。&lt;/p&gt;
&lt;p&gt;Envoy 能够作为 &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SideCar&lt;/a&gt; 运行在每个应用的旁边，形成抽象的应用网络。当基础设施中的所有服务流量通过 Envoy 网格流动时，通过一致的可观察性来问题区域变得容易。&lt;/p&gt;
&lt;p&gt;如下图所示，当把 Envoy 作为 SideCar 添加到服务后，所有微服务的入站和出站流量都通过各自的 Envoy 代理&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/why-is-service-mesh/7267315bgy1fx1t3tisq1j218g0n4q5x_hu42be8b958c59438e038b330700875a81_25532_1730e114184b88538a311ac62e399d90.webp 400w,
               /blog/why-is-service-mesh/7267315bgy1fx1t3tisq1j218g0n4q5x_hu42be8b958c59438e038b330700875a81_25532_fe1d1dd723e05983b25198bb7a22fd5b.webp 760w,
               /blog/why-is-service-mesh/7267315bgy1fx1t3tisq1j218g0n4q5x_hu42be8b958c59438e038b330700875a81_25532_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/why-is-service-mesh/7267315bgy1fx1t3tisq1j218g0n4q5x_hu42be8b958c59438e038b330700875a81_25532_1730e114184b88538a311ac62e399d90.webp&#34;
               width=&#34;690&#34;
               height=&#34;359&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Envoy 拥有许多方便的功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 HTTP,HTTP/2 和 gRPC&lt;/li&gt;
&lt;li&gt;健康检查&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;Metrics&lt;/li&gt;
&lt;li&gt;追踪&lt;/li&gt;
&lt;li&gt;访问日志&lt;/li&gt;
&lt;li&gt;熔断&lt;/li&gt;
&lt;li&gt;重试策略&lt;/li&gt;
&lt;li&gt;超时配置&lt;/li&gt;
&lt;li&gt;限速&lt;/li&gt;
&lt;li&gt;支持 Statsd、Prometheus&lt;/li&gt;
&lt;li&gt;流量迁移&lt;/li&gt;
&lt;li&gt;通过发现服务来动态调整配置（XDS）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等……&lt;/p&gt;
&lt;p&gt;所以通过从服务中抽象出整个网络，使用 Envoy 作为 SideCar 形成网格组成数据平面，允许我们控制上面列出的能力。&lt;/p&gt;
&lt;p&gt;欢迎反馈，谢谢！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
