<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Varun Talwar | 云原生社区</title>
    <link>https://cloudnative.to/author/varun-talwar/</link>
      <atom:link href="https://cloudnative.to/author/varun-talwar/index.xml" rel="self" type="application/rss+xml" />
    <description>Varun Talwar</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/varun-talwar/avatar_hu754ccedf18f65d34d2f2ae474c084243_11741_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Varun Talwar</title>
      <link>https://cloudnative.to/author/varun-talwar/</link>
    </image>
    
    <item>
      <title>利用服务网格和智能应用感知网络增强应用弹性</title>
      <link>https://cloudnative.to/blog/resiliency-app-aware-network/</link>
      <pubDate>Mon, 21 Feb 2022 16:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/resiliency-app-aware-network/</guid>
      <description>&lt;p&gt;我是 Vrun Talwar，Tetrate 公司的联合创始人。我们是一家企业级服务网格公司。我要谈的是弹性，更准确地说，是运行时的弹性，是内置于你的网络中的东西。我喜欢从历史上的一个技术话题开始谈起。Cloud 1.0 是云的第一个时代。当时我们看到了虚拟化的浪潮，人们基本上从他们的硬件中获得更多。在我们进入当前的云时代之前，这已经持续了好几年，也就是 Cloud 2.0 时代，这基本上是从别人那里获得计算资源。你不需要在数据中心运行机器，别人为你更有效地运行它们。你刷一下信用卡，就可以得到他们管理的资源。这对配置灵活性和在我们想要的任何地方提供计算有很大的帮助。实际上，下一阶段就是 Cloud 3.0，这是一个更加动态和分布式的计算。从容器和自动伸缩的意义上讲，动态的，通过 Kubernetes 这样的协调器进行调度。分布式是指不同的区域：私有云、公有云、混合云等等。以及在应用组件分布的意义上的分布式。在一个计算如此动态的世界里，我们的网络和安全堆栈是滞后的。这些都是需要迎头赶上的。&lt;/p&gt;
&lt;h2 id=&#34;cloud-30-转型--网络的创新&#34;&gt;Cloud 3.0 转型 —— 网络的创新&lt;/h2&gt;
&lt;p&gt;在创办 Tetrate 之前，我曾有机会在谷歌工作了大约 11 年。很多人都在谈论，谷歌的基础设施怎么会如此可靠和安全？为什么它如此有弹性？尽管推出了更多的服务，尽管每年有数以千计的新开发者加入，但基础设施始终是正常的，可用的。这其中的核心之一是对核心网络的投资。谷歌的网络创新相当少，并不是所有的创新都被谈论过。我有幸参与了其中的两项重要创新，即 gRPC 和 Istio，我是这两个创新的共同创造者。这些都是网络栈被带到应用层面的地方。gRPC 是这个现代 RPC 结构，在 2016 年推出。Istio 是这种基于代理的方法，将代理注入到网络中，并使其成为 L7 代理，知道什么是通过它们进行的。这是在 2017 年推出的。这两个都是今天蓬勃发展的开源项目。&lt;/p&gt;
&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h2&gt;
&lt;p&gt;回到这次谈话的背景，弹性是超级重要的。随着越来越多的公司转向公有云，任何一个云供应商出现故障时，受到影响的品牌名单就会不断增加。这大大阻碍了他们的正常运行时间，不仅仅是正常运行时间，还有他们的业务和品牌形象。&lt;/p&gt;
&lt;h2 id=&#34;弹性不仅仅与软件有关&#34;&gt;弹性不仅仅与软件有关&lt;/h2&gt;
&lt;p&gt;我们如何才能做得更好？在我们讨论这个问题之前，让我们先来看看弹性问题的范围。这是一个多层次的问题，从基础设施层开始，然后延伸到网络层。它们的分布越多，网络层的可靠性就越关键。显然，也延伸到数据层，以及你的人、实践和操作。故障可能是不同类型的。你可以从一个主机到一个节点，到一个特定的服务，到一个特定的数据中心，到一个特定的区域。很明显，在物理层面上，在布线、交换机和路由器方面也是如此。所有这些都会给你的应用程序造成故障模式和可用性问题。问题是，你如何设计你的应用程序以适应它们？我们可以做得更好，而不仅仅是两种部署，主 - 主，或主 - 被？&lt;/p&gt;
&lt;p&gt;在一个计算无处不在的世界里，我的观点是，你应该在多个可用区部署应用程序。无论如何，它们现在更容易配置、运行和管理。部署流水线更加自动化。我们真正需要的是一个智能的、连接的网络，它可以将流量一直路由到正确的健康部署，我们将有弹性的应用程序。说起来容易做起来难，我们如何才能在实践中真正做到这一点？让我们看看一些场景。&lt;/p&gt;
&lt;h2 id=&#34;情景-1服务实例失败&#34;&gt;情景 1：服务实例失败&lt;/h2&gt;
&lt;p&gt;想象一下一个简单的三层应用程序的场景。你有你的前端 Web 服务器数据库，你有流量进入一些边缘。它可能是一个数据中心或一个云区域，进入一些应用代理或入口代理，然后进入你的应用程序。第一件事是应用程序应该部署在多个可用区。这是使其更具弹性的第一个前提。第二是模拟故障，并加强你的服务代码库处理故障的能力。像服务网格和 Istio 有一定的能力，你可以注入和模拟故障，并使它准备好更多的容错。一旦你在可用性区域部署了应用程序，你需要它有故障转移的东西是区域之间的连接，所以你实际上可以将流量路由过去。这些是提高可用性的一些良好做法。&lt;/p&gt;
&lt;h2 id=&#34;服务代理---通往更健康的实例的路由&#34;&gt;服务代理 - 通往更健康的实例的路由&lt;/h2&gt;
&lt;p&gt;比方说，你有一个特定的服务实例在一个给定的节点上停机。它可能是数据库。它可能是网络服务器。它可能是前端。这个弹性网络的方法是在每个服务旁边有一个服务代理，或者在整个应用面前有一个应用代理，它可以检测到一个特定的实例正在发生错误。也许这可以通过更高的延迟或更高的错误率，或其他信号来检测，而且是来自该实例。它通常来自运行在它们旁边的 Sidecar 代理。这可以发出信号说，好吧，我应该把负载均衡到另一个更健康的实例，它有更健康的计算池，它有更健康的 pod，如果你遵循 Kubernetes。这是一个保持可用性和弹性的简单方法。另一个是关于，故障会发生。你如何确保代理足够聪明，内置超时和快速重试，所以他们可以从这些模式中恢复？这些也是很好的提示和做法。&lt;/p&gt;
&lt;h2 id=&#34;情景-2服务失败&#34;&gt;情景 2：服务失败&lt;/h2&gt;
&lt;p&gt;假设整个服务瘫痪了，而且在那个特定的区域或特定的数据中心，没有一个实例是实际可用的。那你该怎么办呢？那么，你需要做的是将其路由到一个不同的可用区。这说起来容易，做起来难。要做到这一点，你需要知道每个服务和所有区域的状态和健康状况，并实时输入控制器，然后可以决定，好吧，我应该把流量发送到哪里？你需要它们之间的连接，以便它能够真正地路由流量。数据的一致性是另一个层面的问题，需要解决的是你要有一个一致的结果。另一个问题是，让这些东西在自动扩展的基础设施上运行总是可取的，所以资源容量不会成为我们可用性的一个问题。&lt;/p&gt;
&lt;h2 id=&#34;可用性数学&#34;&gt;可用性数学&lt;/h2&gt;
&lt;p&gt;有一件事我们都知道，但有时会忘记，用数字来表示是很好的，那就是，什么是可用性？可用性的定义是我在任何一年的平均停机时间是多少。我们经常谈论两个九、四个九、五个九的可用性，但实际上，只要在一到两个可用性区域内有可用性，就可以大大减少我们的停机时间，并提高我们的弹性。即使是一到两个可用区，也是非常有意义的影响。&lt;/p&gt;
&lt;h2 id=&#34;情景-3应用失败&#34;&gt;情景 3：应用失败&lt;/h2&gt;
&lt;p&gt;继续这一趋势，让我们说，不是一个服务或服务实例，而是整个应用系统瘫痪了。那么，你如何将流量路由到该应用程序的一个完全不同的实例？如何设置两层的负载均衡，这样上面的一层，在这种情况下，边缘代理实际上可以知道，将流量发送到哪个应用代理。在这里，重要的是，你的所有其他安全控制，你已经建立的合规控制，你需要操作的应用程序，实际上在所有这些可用性区域都可用。这是通过服务网格的配置来完成的，这些 L7 网格，可以确保相同的配置被发送到所有的区域，因此你可以保证相同的行为。这看起来很容易，但对每个人来说，要实现这样的设置并不容易，即健康信号传播到边缘代理，代理做出正确的决定，你以正确的方式进行负载均衡。&lt;/p&gt;
&lt;h2 id=&#34;情景-4区域故障&#34;&gt;情景 4：区域故障&lt;/h2&gt;
&lt;p&gt;你可以把这个问题提升到不仅仅是一个应用程序，而是整个区域的故障，整个数据中心的故障或容量不足。在这些情况下，你要把路由到一个完全不同的数据中心。在云设置中，它甚至可能意味着到一个完全不同的云。只要你有应用程序部署在这些区域，问题的解决方案是类似的，也就是你有一个上面的层，它在任何时候都有健康和性能的信号，并可以做出路由决策，将流量路由到最佳区域。然后从那里到最佳应用实例，再从那里到实际服务。&lt;/p&gt;
&lt;h2 id=&#34;通过动态自动伸缩的-l7-网络实现复原能力&#34;&gt;通过动态自动伸缩的 L7 网络实现复原能力&lt;/h2&gt;
&lt;p&gt;总之，我的主要观点是，我们可以有这种动态的自动伸缩，应用程序感知的网络。之所以称之为自动伸缩，是因为所有这些负载均衡器也可以在计算中运行，它可以自动伸缩，而且它们也可以是弹性的，就像你的计算节点。这种设置如果部署得当，架构合理，可以做两件事，第一，大大改善你的应用程序的弹性。二，你的开发人员不需要在他们的每个服务和应用程序中建立所有这些，并使其成为服务网格本身的一部分。我们在 Tetrate 是以这个为生的。我们有一个平台来实现这一点。在很多地方做了这些工作后，我们有不少最佳实践和蓝图架构，在实际的、真实的环境中很适合。&lt;/p&gt;
&lt;h2 id=&#34;问答&#34;&gt;问答&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;当你讲述谷歌的网络进化故事时，我想到的是，是什么导致了 gRPC 和 Istio 的诞生？你以前有什么不理想的地方，然后导致了最初 gRPC 的创建？什么问题没有得到解决？你也许想谈一谈这个问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Talwar：gRPC 是谷歌内部一个叫 Stubby 的东西的下一代演绎。Stubby 在谷歌成立之初就存在了，也就是 1999 年。实际上，任何两个服务都可以通过这个 Stubby 机制相互通信。它存在了很长时间。在大约 12 年的时间里经历了一系列的迭代。那么需要它的原因有两个方面。在这种规模下，如果你在 HTTP 上做 JSON，这是客户端流量的经典方式，对于我们的规模来说，这还不够理想。只是给你一些例子，只是通过做 protobuf，也就是通过二进制，比通过文本，与通过 HTTP 的 JSON 相比，你在许多情况下得到 10 倍的改进。这意味着在我们的规模上可以节省数百万甚至数十亿美元的费用。&lt;/p&gt;
&lt;p&gt;然后，渐渐地，发生了很多事情，比如负载均衡，重试，以及发送一些跨度进行追踪。gRPC 只不过是它的下一个版本，它被开放了源代码。原因是在一个组织中，你可以非常有主见，就像，好吧，我只支持三种语言或四种语言，在某些情况下，只支持一种语言，然后这些是我的库。这是好的。当我们把它放在外面的时候，你不能有那种一个组织的意见。谷歌实际上是用三种语言运行的。C++、Java 和 Python。然后一切都在这里面。当我们不得不进入多语言世界，并支持许多现有的服务时，这就是为什么需要一些不基于库和代理的东西，这导致了 Istio。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有一种争论是，对于断路器来说，最好是避免回退或重试，而典型的情况是，它们需要在应用中实现，而不是在网络层。你有什么想法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Talwar：我们正在经历这样一个有趣的时代，什么是在应用程序中，什么是在网络中，在许多情况下，需要合作。与追踪不同的是，对于传递标头值，这是一个很好的例子，你必须在应用中做到这一点。断路器，核心代理，无论是 Envoy，还是其他代理，它们都有这些内置的概念，能够检查上游的健康状况，或者你要把它发送到哪里。定义我何时破坏它的规则，并通过配置做所有这些，所以这些范式存在于这些代理和控制平面中。显然，这一切只是基于代理，而不是基于通过代理的所有流量，就通过代理的请求的延迟和错误率而言。他们不知道你底层计算的其他方面。比方说，你的 CPU 超载了，就像那个应用程序正在消耗，这不会被知道。现在发生的更多的是这些事情被添加到了上面，也就是，从你的节点传递信号，比如 CPU 内存信号，这些被传递到了上面，以做出一些决定，或者能够从应用中获取外部信号，让代理做出决定。&lt;/p&gt;
&lt;p&gt;显然，应用程序本身知道，有最多的背景，但人们在理解方面实际发展了多少，从节点开始，一直到可能出错的不同事情。我认为这很难。我们至少看到的两件事是代理与底层节点和应用程序之间的互动，以及反向的互动。这基本上意味着代理向底层自动扩展基础设施发出信号以进行扩展，所以这实际上也在更多地发生。我知道健康状况正在下降，因为延迟上升，信号下降到像 Kubernetes 这样的自动伸缩基础设施，或者只是云供应商的实例组。这是一个没有被使用的信号，应该被使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有一种观点认为，Istio 没有被企业完全采用。你怎么看？企业需要认识到哪些事情，然后利用你所说的这种智能应用感知网络的优势？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Talwar：Istio 在技术势头之前就已经有了营销的势头。这是其反馈循环的原因之一。它现在变得更好了。现在已经好了很多。另一件事是，它有太多的旋钮和太多的配置，等等，它只是让人们摸索和采用时变得复杂。另一件事是你需要对谁能做什么进行非常干净的控制。我经常告诉人们，与 Kubernetes 和其他类似的东西不同，&lt;strong&gt;Istio 和服务网格总体上是一个多角色的问题&lt;/strong&gt;。这不是一个单一角色的问题。在企业内部，一个平台团队如何管理网关，管理 Sidecar？Sidecar 通常与应用结合在一起，所以现在，如何进行应用升级？这是应用团队的事。网关通常由一个不同的团队管理。如果你要一直走到边缘，通常有边缘代理团队。然后，安全希望总是作为其他人在那里，至少有可见性。在许多情况下，甚至想强制执行必须发生的策略，以及可选择发生的策略。他们甚至希望在工作流程中向外部暴露服务。&lt;/p&gt;
&lt;p&gt;总之，你必须解决的问题是，每个团队在他们的观点和控制方面得到什么？你如何使旋钮更简单地使用？如果你问我，这里有太多的旋钮和太多的 YAML。有一件事是，只要让它简单，这是我的 API，这是我想要的行为。这应该就这样发生。像 Istio 这样的东西只是在平台上实现的，在基础设施中也是如此。这就是我们在 Tetrate 采取的方法。我认为这是一个长期的方法，如果这将被真正地大规模采用，而且时间更长。这就是它将成为的方式。像大多数技术一样，它将变得枯燥和不可见，将有一种方法可以直接使用它们，而不必对它们的细节进行搔扰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当我们谈论服务网格和 Istio，当然还有其他技术时，人们总是担心这与传统的 API 网关有什么关系。路线图变得模糊了。比如，什么是边缘代理？什么是 API 网关？它们有区别吗？它们应该是不同的吗？你对此有什么想法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Talwar：这里显然是有偏见的。我认为它们不应该是不同的。我们正在建立和构建的平台是这样的，全程使用 Envoy，因为你可以把它部署为一级负载均衡器，作为边缘代理。每个应用都可以有一个代理和一个应用代理在前面。然后，你可以拥有同样基于同一数据平面的 Sidecar。一个数据平面贯穿始终，然后每个应用程序，一个应用程序是我们的第一类概念，做它需要做的事情。在某些情况下，你会想，只要在入口层做认证，这就是我想要的一切。这就是我需要做的一切。我暂时不会去做 Sidecar 业务，这很正常。而其他人会想，不，我已经准备好了。这都是 HTTP，我很舒服。它不像超级性能敏感，延迟的东西对我来说并不重要。你也可以走这条路。&lt;/p&gt;
&lt;p&gt;我思考的方式是，人们建立服务。人们部署服务。你可以通过内部 API 将它们暴露给你的内部团队成员，和 / 或你的合作伙伴。你可以通过公共 API 将其暴露给公众。你需要的控制是类似的。传统上的南北和东西之间的界限正在模糊化。人们做更多的微服务和 API 协议，你需要基于内部 API 的互动。唯一的区别是内部 API，你会在那里做基于令牌的认证。在外部 API 中，你会要求像，我需要有 OAuth，你需要通过这个流程。在外部 API 中，你要做的是，不，我想要 WAF 风格的策略，即批量保护这些 IP 的类型。而在内部 API 中，你将只是说，来自这个团队的测试流量不应该对我进行 DoS，所以只是速率限制。场景有一点不同，但技术层面的控制是相似的。我认为把它放在一个平台上是很有意义的，这就是唯一的区别。&lt;/p&gt;
&lt;p&gt;事实上，Istio 所来自的团队，实际上被称为 One Platform，这是谷歌的说法，这是内部 API，外部 API。你只要告诉我们你在你的 API 中想要什么。这些是行为。我们以前在谷歌的团队所做的是，每个团队只是提交他们的 API 规格和他们想要的东西，事情就会发生。今天它是一个内部的，明天就变成了一个外部的 API。你可以在 API 规格上添加一些东西，仅此而已。在推广方面没有其他变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网格的网格，这到底是不是同一个东西？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Talwar：我不太喜欢这个词，但这个概念确实是真的。我们在 Tetrate 所做的，以及我认为更普遍的，在工业界，它正在成为事实，这就是，有三个层次，这还没有被很好地解释。有一个数据平面，它必须通信的地方。还有一个控制平面，需要在它的附近，也就是在同一个集群或同一个 VPC 中，但不能太远。然后还有第三层，也就是我们所说的管理平面，也就是你在上面看，说，好的，我需要为每个应用做什么，做路由决定，做弹性决定，等等。我们正在建立管理平面。Istio 仍然是按原样使用的，随着它的功能不断增加，以及所有这些，作为附近的控制平面。&lt;/p&gt;
&lt;p&gt;当然，它是以一种与计算和云无关的方式完成的。如果我在微软云有 N 个集群，在亚马逊云有 N 个集群，每个集群都可以用 Istio 作为控制平面。你真的能做出那些有弹性的决定，而不是路由到这个微软区，而是路由到这个亚马逊区？人们来问我，为了成本、性能、安全或其他原因选择他们喜欢的云服务，我们可以这样做吗？这绝对是可能的，但对人们来说并不那么容易实现。我们想让这个目标容易实现。我认为我们正在走向那个世界。网格的网格听起来是一个不好的名字，但从架构上看，我们正在走向那里。&lt;/p&gt;
&lt;p&gt;是的，它可以在任何地方。这就是管理机的魅力所在。它可以在任何一个地方，无论你决定它在哪里。问题是，所需的边缘或入口要放在更接近其应用的地方。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我喜欢你的智能应用感知网络的说法，你认为它是否总是可以自动等同于一般的服务网格？如果我不使用边缘技术，那么我的替代方案是什么，如果有的话？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Talwar：服务网格成为这个一切的术语。这个概念就是你的网络和你的平台层更加智能。例如，gRPC 是我的另一个宝贝，它支持 xDS，所以你可以在 gRPC 中建立东西，没有任何代理，并要求控制层有同样的行为，这一切都可以。我认为更多的语言栈和框架将开始支持这些类似 xDS 的功能。一旦他们这样做了，我想我们就可以进入事情本身的构建方式了。这还没有发生。我认为这才是应该发生的。今天是 Envoy 代理。明天可能是更好的东西。这个概念在语言框架和这些代理中都是一样的。让它们更智能，这样你就不会在应用中做了，而且你可以在不加重应用开发者负担的情况下，在你的应用中持续地做。我认为这个概念是非常有用的，而且会继续存在。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>零信任网络的微服务基本要素概述</title>
      <link>https://cloudnative.to/blog/zero-trust-network-for-microservices/</link>
      <pubDate>Mon, 17 Jan 2022 09:24:17 +0800</pubDate>
      <guid>https://cloudnative.to/blog/zero-trust-network-for-microservices/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;编者按&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本博客将向您介绍零信任网络及其基本要素，这是 CISO（首席信息安全官）必须考虑的，以使网络强大，在当今的数字转型中没有安全漏洞，并减少潜在的财务损失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当今所有主要组织都在经历大规模的数字化转型，采用云、移动、微服务和容器技术来高效地提供服务，满足关键业务需求，赶上市场预期。企业的平台和 DevOps 团队必须对分布式和多云的应用程序和服务进行建模，以便随时随地进行访问，从而实现敏捷性。这在组织内部产生了两个重要的趋势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随着越来越多的组织采用多云，他们将其应用程序部署到公有云（谷歌、亚马逊、Azure 等），这意味着数据离开了他们所认为的安全的内部数据中心。&lt;/li&gt;
&lt;li&gt;企业使用微服务和分布式架构来实现大规模和敏捷。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然而，应用程序开发人员现在需要解决一系列新的可靠性和安全性问题，因为越来越多的依赖性是通过网络调用消耗的。当集中式系统在使用时，网络和端点安全在十年前很容易实现和管理。安全团队可以利用防火墙充分保障周边的安全。随着多云中的分散数据和微服务导致的分布式工作负载的新趋势，IT 安全组织需要评估他们的安全态势，并重新思考他们的网络架构。当然，安全不是一个人或一个部门的工作，它是一个组织中的 IT 安全、DevOps 和 Ops 团队的共同责任。&lt;/p&gt;
&lt;h2 id=&#34;什么是零信任网络&#34;&gt;什么是零信任网络？&lt;/h2&gt;
&lt;p&gt;零信任是一个指导原则，它强调 IT 组织在构建网络架构时不信任任何个人、应用程序或设备。在这里，“零 &amp;ldquo;信任意味着&amp;rdquo; 不隐含 &amp;quot; 信任。企业 IT 部门不能假设外部和内部实体是值得信任的，或者对任何实体的安全风险进行一次性评估就足够了（实体可以是应用、人或流量）。&lt;/p&gt;
&lt;p&gt;零信任通常与网络安全相关，因为只有在有数据交换的情况下，信任才会出现。零信任网络是一种通过认证和监控每个网络访问来识别任何外部实体的可信度的方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tetrate.io/white-paper-zero-trust-architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击下载零信任架构白皮书&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;为什么我们比以往任何时候都更需要零信任网络&#34;&gt;为什么我们比以往任何时候都更需要零信任网络？&lt;/h2&gt;
&lt;p&gt;我们想强调零信任网络比以往任何时候都更重要的最常见原因。&lt;/p&gt;
&lt;h3 id=&#34;云中的数据泄露现在很普遍&#34;&gt;云中的数据泄露现在很普遍&lt;/h3&gt;
&lt;p&gt;数据泄露事件在逐年上升，损害了公司的声誉。我仍然记忆犹新，一个分水岭事件是 2020 年的 Solarwinds 攻击事件。Solarwinds Orion 是一个基于 SaaS 的网络监控工具，它被入侵了，木马使用恶意软件攻击来掌握整个网络基础设施。虽然没有任何企业的敏感数据或文件被窃取等附带损害，但入侵是跨领域和跨地域的。即使是先进的公司，对云的网络钓鱼攻击和恶意软件攻击通常也很难发现，而且在未来可能会上升。根据 Verizon &lt;a href=&#34;https://www.verizon.com/business/resources/reports/dbir/2021/masters-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最近的研究结果&lt;/a&gt;，云计算漏洞已经超过了内部数据漏洞 ——2021 年 73% 的网络安全事件涉及外部云资产。而 CISO 的一个标准建议是尽快应用零信任网络的原则以避免安全漏洞。&lt;/p&gt;
&lt;h3 id=&#34;分布式工作负载也不安全由于运行时矢量攻击&#34;&gt;分布式工作负载也不安全，由于运行时矢量攻击&lt;/h3&gt;
&lt;p&gt;虽然企业采用 Kubernetes 技术的速度比以往任何时候都快，但它们并不是 100% 安全的。Kubernetes 和容器化应用经常出现漏洞和黑客攻击的情况。根据 &lt;a href=&#34;https://www.redhat.com/en/resources/kubernetes-adoption-security-market-trends-2021-overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021 年 RedHat 的报告&lt;/a&gt;，90% 的受访者在过去一年中经历了涉及其容器和 Kubernetes 环境的安全事件。&lt;/p&gt;
&lt;p&gt;分布式系统失败的常见原因之一是 Kubernetes 集群在运行时（或实时）的矢量攻击，并带来了一系列新的安全挑战。如果黑客攻破一个 Kubernetes 容器，他们将试图攻破整个集群，这是一种复杂的矢量攻击。美国国家安全局（NSA）指出，黑客针对 Kubernetes 来&lt;a href=&#34;https://www.zdnet.com/article/hacker-target-kubernetes-to-steal-data-and-processing-power-now-the-nsa-has-tips-to-protect-yourself/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;窃取数据和计算能力&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;根本原因往往是隐性信任，假设集群间的资源是可信的，集群内不安全的网络通信是安全的。&lt;/p&gt;
&lt;h3 id=&#34;安全配置不是开发人员的核心能力&#34;&gt;安全配置不是开发人员的核心能力&lt;/h3&gt;
&lt;p&gt;尽管 Kubernetes 给基础设施和应用交付领域带来了敏捷性和规模，但要确保安全是个挑战。有人可能会说，Kubernetes 中有一些固有的安全功能，如使用 ClusterRoleBinding 的 RBAC，Kubernetes 服务的 TLS 等，应该足够了。然而，Kubernetes 需要大量的配置来使工作负载免受外部和内部威胁。例如，在 pod 之间强制执行 TLS，在某些时候需要维护数百个 TLS 证书。&lt;/p&gt;
&lt;p&gt;而那些已经专注于开发业务功能的开发人员可能不会优先考虑安全问题。红帽公司最近发布的一份关于 &lt;a href=&#34;https://www.redhat.com/en/blog/state-kubernetes-security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 安全状况&lt;/a&gt;的报告显示，大型企业面临的安全事件大多与错误配置、重大漏洞有关，并遭遇到运行时安全事件。&lt;/p&gt;
&lt;h3 id=&#34;应用程序的交付在-cicd-的帮助下获得了快速发展而安全问题却没有&#34;&gt;应用程序的交付在 CI/CD 的帮助下获得了快速发展，而安全问题却没有&lt;/h3&gt;
&lt;p&gt;通过 CI/CD 流程、交付协调工具、GitOps 风格的部署，DevOps 团队加快了软件交付速度。许多组织可以每天将应用程序部署到生产中（如果需要，往往在几个小时内）。这种创新速度适合于组织的蓬勃发展和成长，但如果不注重强大的安全性和合规性，就会带来漏洞。&lt;/p&gt;
&lt;p&gt;我们所接触的大多数组织都在他们的 DevOps 流程中逐步发展并开始采用 DevSecOps，将安全检查整合到他们的 SDLC 过程中。作为一种实践，他们的 DevOps 团队、合规经理、安全经理、网络管理员在部署前合作讨论安全要求和构建威胁模型。&lt;/p&gt;
&lt;h2 id=&#34;实施零信任网络的关键因素&#34;&gt;实施零信任网络的关键因素&lt;/h2&gt;
&lt;p&gt;不同的安全组织、分析师和作者提出了许多框架。例如，Forrester 建议零信任扩展（ZTX 模型），并主张保护不同的数据管道以保护数据本身。Gartner 有一个概念，叫做持续适应性风险和信任评估（CARTA），它主要侧重于分析与身份和设备相关的风险态势。&lt;/p&gt;
&lt;p&gt;我们相信，没有任何一个放之四海而皆准的框架能适用于所有的场景和所有的组织。我们为使用微服务范式开发和部署应用程序的企业提供一个零信任框架，以确保网络和应用程序的安全。&lt;/p&gt;
&lt;p&gt;Tetrate 与&lt;a href=&#34;https://www.nist.gov/news-events/events/2022/01/zta-and-devsecops-cloud-native-applications-virtual&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;美国国家标准与技术研究所（NIST）&lt;/a&gt;合作，为联邦机构开发标准，以便为其微服务实施零信任架构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你可以在 NIST 和 Tetrate 共同编写的 NIST 特别出版物中阅读在微服务中实现零信任的详细指南：《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;微服务的安全策略&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》、《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204A.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;使用服务网格构建安全的微服务&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》、《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204B-draft.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;使用服务网格的基于属性的微服务访问控制&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》、《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204C-draft.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;使用服务网格实现微服务的 DevSecOps&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》和《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-207.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;零信任架构&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于 CISO 和 CTO 来说，基于上述研究文件，我们主张采用持续安全框架，以实现其微服务和服务网格的零信任，避免数据泄露。在这个框架下，有 4 个关键因素需要考虑。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-微服务的零信任网络框架&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;微服务的零信任网络框架&#34; srcset=&#34;
               /blog/zero-trust-network-for-microservices/008i3skNly1gygh9tlkvlj31gw0skgnr_huf32e4909b1692b1164be117f57aa091f_89624_39ad8bf42ff6c99fdcde750b118f3be6.webp 400w,
               /blog/zero-trust-network-for-microservices/008i3skNly1gygh9tlkvlj31gw0skgnr_huf32e4909b1692b1164be117f57aa091f_89624_ea766fe7382aa406041577ee5bfbe59f.webp 760w,
               /blog/zero-trust-network-for-microservices/008i3skNly1gygh9tlkvlj31gw0skgnr_huf32e4909b1692b1164be117f57aa091f_89624_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/zero-trust-network-for-microservices/008i3skNly1gygh9tlkvlj31gw0skgnr_huf32e4909b1692b1164be117f57aa091f_89624_39ad8bf42ff6c99fdcde750b118f3be6.webp&#34;
               width=&#34;760&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      微服务的零信任网络框架
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务的零信任网络框架&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 安全网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DevSecOps 团队的首要任务是确保网络和数据的完整性。到你的应用程序的流量可以来自任何地方：包括企业自有网络内部和外部。任何设备或请求都不应该被信任，不管它们是否属于企业网络。所有的通信都应该以加密、认证和授权的方式进行，以保护数据的机密性，防止恶意行为者从网络中窃取数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 保障资源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;资源可以是小型应用（服务或工作负载），可以向网络内的其他应用发送流量。一个网络可能由多个服务组成，每个服务将通过网络使用 API 调用与其他服务对话，以执行某些业务功能和逻辑。在授予访问权以发送处理请求之前，必须根据已建立的资源身份，对每个服务的信任进行评估。认证和授权检查服务身份必须发生在一个会话中，而且服务不应该默认继承对所有资源的访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 确保用户安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对一个应用程序的威胁可能是由内部或外部用户造成的。这就是为什么在授予访问权之前要通过适当的认证来评估每个请求者的可信度。就像保护资源一样，对用户的访问应该以完成任务所需的最小权限来授予，而且应该是基于会话的。当然，各种用户会根据他们的角色获得访问权限。DevOps 团队和安全部门应该谨慎地分配权限，定义角色，并对用户进行治理，以避免安全和合规性威胁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 最大限度地提高可见性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了实施零信任网络，IT 安全组织必须不断实时评估其 IT 环境的安全态势，特别是微服务。为了对任何安全事件做出反应，安全团队必须配备适当的信息和可见性，以加快诊断和分流。应该有一个适当的机制，从企业网络的资源中追踪和隔离损坏的或脆弱的资源或用户或设备。&lt;/p&gt;
&lt;h2 id=&#34;tetrate-service-bridgetsb如何帮助开箱即用&#34;&gt;Tetrate Service Bridge（TSB）如何帮助开箱即用？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge(TSB)&lt;/a&gt; 通过一个与云无关的集中式平台为所有从边缘到工作负载的应用和 API 实现安全、敏捷和可观察性。它为平台所有者提供所有环境的内置安全和集中的可见性和治理，同时授权开发人员为其应用程序做出本地决定。&lt;/p&gt;
&lt;p&gt;TSB 通过为您的应用程序和云平台提供 FIPS 认证的构建，Istio 和 Envoy 的生命周期管理，以及其他增强功能以提高可用性，将 Istio 和 Envoy 增强为企业级服务网格。&lt;/p&gt;
&lt;p&gt;Tetrate Service Bridge（TSB）位于应用边缘，负责控制所有计算集群的请求级流量、多云、Kubernetes 和传统计算集群之间的流量转换，并提供南北 API 网关功能。TSB 还提供了一个带有 &lt;a href=&#34;https://www.tetrate.io/blog/unpacking-next-generation-access-control-ngac-and-tetrate-q/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGAC&lt;/a&gt; 框架的全局管理平面，以定义安全策略和配置，获取遥测数据，并在整个网络拓扑结构中处理 Istio 和 Envoy 的生命周期。有了 TSB，安全团队可以将安全从应用代码栈中剥离出来，放在属于他们的透明网络层中 —— 避免开发人员为安全而耗费精力修改代码。&lt;/p&gt;
&lt;p&gt;DevOps 团队仍然可以继续执行他们的计划，根据业务需求更快地将应用程序部署到多云中，而安全方面可以对微服务的安全策略进行集中控制。让我们看看 TSB 组件如何帮助实现安全。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-微服务的零信任网络的tetrate实现&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;微服务的零信任网络的Tetrate实现&#34; srcset=&#34;
               /blog/zero-trust-network-for-microservices/008i3skNly1gyggs2hdtaj30wi0q20uz_hue4be9851a609910e1a29ee75dc4020f8_93225_a6628e5abb135ed52ca31939bf52e3b7.webp 400w,
               /blog/zero-trust-network-for-microservices/008i3skNly1gyggs2hdtaj30wi0q20uz_hue4be9851a609910e1a29ee75dc4020f8_93225_f429bdf3e270dd23887b2648b7d729bd.webp 760w,
               /blog/zero-trust-network-for-microservices/008i3skNly1gyggs2hdtaj30wi0q20uz_hue4be9851a609910e1a29ee75dc4020f8_93225_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/zero-trust-network-for-microservices/008i3skNly1gyggs2hdtaj30wi0q20uz_hue4be9851a609910e1a29ee75dc4020f8_93225_a6628e5abb135ed52ca31939bf52e3b7.webp&#34;
               width=&#34;760&#34;
               height=&#34;609&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      微服务的零信任网络的Tetrate实现
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务的零信任网络的 Tetrate 实现&lt;/p&gt;
&lt;p&gt;TSB 提供保护您的资源、网络、用户和最大限度地提高可见性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 安全命名，用于服务间的授权，以确保资源安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 Tetrate Service Bridge（TSB）建立在 Istio 上，默认情况下它提供安全命名，以确保工作负载（VM 和 Pod）属于同一个微服务。TSB 为每个工作负载（VM 或 Pod）创建服务身份，并将信息存储在安全名称信息中。服务器身份在证书中进行编码，但服务名称是通过发现服务或 DNS 检索的。安全命名信息将服务器身份映射到服务名称。从（例如）服务 A 到服务名称 B 的身份映射意味着 &amp;ldquo;A 被授权与服务 B 对话”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 基于 mTLS 的服务认证，确保网络安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TSB 提供 Istio 点对点认证资源，以验证客户端与安全工作负载的连接。它使你能够通过 Envoy 代理在你的服务网格中实现 mTLS 认证，这是一个与每个服务一起工作的小应用程序（也被称为 sidecar 代理）。客户端 Envoy 代理与服务端 Envoy 代理进行握手，只有当相互的 TLS 连接建立后，流量才从客户端转移到服务器端。&lt;/p&gt;
&lt;p&gt;基于 mTLS 的认证被称为点对点（P2P）认证，不需要改变任何服务代码。基于 mTLS 的 p2p 认证为每个服务提供了一个强大的识别，以实现跨集群和多云的互操作性。安全管理人员现在可以在 TSB 管理平面中定义基于 mTLS 的认证策略，对网络中的服务间的通信进行加密。有了安全的网络，就没有中间人攻击的机会。&lt;/p&gt;
&lt;p&gt;TSB 提供了一个证书管理系统，自动生成、分发和轮换私钥和证书，以解密请求中的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 基于 JWT 的认证，以确保来自内部和外部用户的应用安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于终端用户的认证，以验证附加在请求上的凭证，TSB 提供现有的 Istio 资源（也称为请求认证）。安全管理人员现在可以利用 Istio 资源，通过验证 JSON 网络令牌（JWT）来验证凭证。该令牌将有令牌的位置、发行者的详细信息和公共 JSON 网络密钥集。安全经理可以根据他们的组织标准指定认证策略和规则，TSB 将根据令牌与策略的匹配程度拒绝或接受用户请求。&lt;/p&gt;
&lt;p&gt;由于 TSB 全局管理使用 Istio，它提供了灵活性，可以与您选择的认证供应商连接，如 OpenID Connect 供应商，例如，KeyCloak、OAuth 2.0、Google Auth、Firebase Auth 等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 对安全资源和用户进行访问控制的授权策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TSB 授权策略允许安全经理创建跨服务网格、命名空间和工作负载的访问控制。比如说，一个真实的用户已经进入了一个系统，但是应该限制他在该系统下采取任何行动。&lt;/p&gt;
&lt;p&gt;安全经理现在可以使用单一资源定义工作负载之间和最终用户之间授权的细化规则（如允许、拒绝或自定义请求）；易于使用和维护。最重要的是，TSB 中的 Istio 授权策略支持通信框架，如 gRPC、HTTP、HTTPS 和 HTTP/2、TCP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 可观察性和实时可见性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tetrate Service Bridge（TSB）允许安全管理人员主动监控和测量微服务的完整性和安全态势。TSB 控制平面产生运行时遥测数据，帮助安全人员、网络管理员和 SRE 不断跟踪服务的行为。除了生成指标，TSB 还提供运行时的可观察性，如每个服务的流量和服务依赖关系。TSB 管理平面提供对信息的可见性，如谁被授权使用什么服务，什么被加密等。&lt;/p&gt;
&lt;p&gt;安全团队现在可以看到每个服务是如何与其他服务互动的，在发生恶意攻击的情况下，他们可以迅速隔离被破解的应用程序，以免损害其声誉，然后准备发布补丁。此外，TSB 为选定的时间段生成审计日志，提供每个访问信息的方式、内容、时间和地点的完整视图。审计日志帮助审计人员和安全经理追踪潜在的安全漏洞或任何违反策略的行为，并帮助迅速找到问题的根源。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;如果安全团队能够保护网络，在每笔交易中验证服务和用户的身份，并获得 360 度的可见性，以便在发生事故时做出更快的反应，他们就达到了微服务的零信任。通过零信任架构，安全团队可以消除从网络中窃取数据（用户凭证、网络访问和横向移动能力）的风险。另一方面，终端用户可以获得一致的、稳定的，更重要的是安全的体验，无论他们在什么地方，使用什么终端，或者他们的应用程序是在企业内部还是在云中。&lt;/p&gt;
&lt;p&gt;如果你对此感兴趣的话，你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册参加即将举行的关于 &lt;a href=&#34;https://www.tetrate.io/zta-devsecops-conference-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZTA 和云原生应用的 DevSecOps 的&lt;/a&gt;安全会议&lt;/li&gt;
&lt;li&gt;阅读更多关于 &lt;a href=&#34;https://www.tetrate.io/zero-trust/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TSB 提供的服务&lt;/a&gt;如何&lt;a href=&#34;https://www.tetrate.io/zero-trust/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;帮助您在微服务中实现零信任的信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载我们的白皮书，了解&lt;a href=&#34;https://www.tetrate.io/white-paper-zero-trust-architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么使用 Istio 服务网格来实现零信任安全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
