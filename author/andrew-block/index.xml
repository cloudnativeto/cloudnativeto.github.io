<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Block | 云原生社区</title>
    <link>https://cloudnative.to/author/andrew-block/</link>
      <atom:link href="https://cloudnative.to/author/andrew-block/index.xml" rel="self" type="application/rss+xml" />
    <description>Andrew Block</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/andrew-block/avatar_hue38add62c87b7486d80c9f3fda25dfc1_12220_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Andrew Block</title>
      <link>https://cloudnative.to/author/andrew-block/</link>
    </image>
    
    <item>
      <title>通过消除对特权容器的需求来提高Istio Deployment的安全性</title>
      <link>https://cloudnative.to/blog/increasing-security-of-istio-deployments-by-removing-the-need-for-privileged-containers/</link>
      <pubDate>Tue, 25 Sep 2018 16:22:22 +0800</pubDate>
      <guid>https://cloudnative.to/blog/increasing-security-of-istio-deployments-by-removing-the-need-for-privileged-containers/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://blog.openshift.com/increasing-security-of-istio-deployments-by-removing-the-need-for-privileged-containers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;随着 Istio 1.0 版本的发布，Istio 正在为开发云原生应用并希望采用服务网格解决方案的公司准备黄金时间。但是，有一个潜在的问题可能会降低这些公司的采用率：服务网格内的 Pod 需要提升权限才能正常运行。&lt;/p&gt;
&lt;p&gt;为了从一定程度上缓解这个问题，本文将介绍一个新的工具：&lt;a href=&#34;https://github.com/sabre1041/istio-pod-network-controller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;istio-pod-network-controller&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;作为服务网格正常操作的一部分，Istio 需要操作 Pod 的 &lt;code&gt;iptables&lt;/code&gt; 规则，以拦截所有的进出 Pod 的流量，并注入使 Istio 能够发挥作用的 &lt;code&gt;Sidecar&lt;/code&gt;。由于 iptables 规则是针对网络命名空间操作的，所以在某个 Pod 中修改 iptables 规则不会影响到其他 Pod 或运行该 Pod 的节点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; 容器是 Istio Pod 的一部分，负责在应用程序容器启动之前添加这些 iptables 规则。如果想在容器中操作 iptables 规则，必须通过开启 &lt;a href=&#34;http://man7.org/linux/man-pages/man7/capabilities.7.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NET_ADMIN capability&lt;/a&gt; 来提升操作权限。&lt;code&gt;NET_ADMIN&lt;/code&gt; 是一种允许你重新配置网络的 &lt;a href=&#34;http://man7.org/linux/man-pages/man7/capabilities.7.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;Linux Capability&lt;/code&gt;&lt;/a&gt;，这意味着具有该特权的 Pod 不仅可以将自身添加到 Istio 网格，还可以干扰其他 Pod 的网络配置以及节点本身的网络配置。但是在通常情况下，我们是不建议在共享租户的集群中运行具有此特权权限的应用程序 Pod 的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OpenShift&lt;/code&gt; 提供了一种通过称为 &lt;a href=&#34;https://docs.openshift.com/container-platform/3.10/admin_guide/manage_scc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Security Context Context (SCC)&lt;/a&gt; 的机制来控制 Pod 可以拥有的权限的方法（在本例中指的是 Linux Capabilities）。Openshift 中提供了一些开箱即用的 &lt;code&gt;SCC&lt;/code&gt; 配置文件，集群管理员还可以添加更多自定义配置文件。允许正常运行 Istio 的唯一开箱即用的 &lt;code&gt;SCC&lt;/code&gt; 配置文件是 &lt;code&gt;privileged&lt;/code&gt; 配置文件。为了将某个命名空间中的 Pod 添加到 Istio 服务网格，必须执行以下命令才能访问 &lt;code&gt;privileged SCC&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ oc adm policy add-scc-to-user privileged -z default -n &amp;lt;target-namespace&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是这样做本质上就为此命名空间中的所有 Pod 提供了 &lt;code&gt;root&lt;/code&gt; 权限。而运行普通应用程序时，由于潜在的安全隐患，通常又不建议使用 root 权限。&lt;/p&gt;
&lt;p&gt;虽然这个问题一直困扰着 Istio 社区，但迄今为止 Kubernetes 还没有提供一种机制来控制给予 Pod 的权限。从 &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 1.11&lt;/a&gt; 开始，&lt;a href=&#34;https://kubernetes.io/docs/concepts/policy/pod-security-policy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pod 安全策略（PSP）&lt;/a&gt;功能已经作为 &lt;code&gt;beta feature&lt;/code&gt; 引入，PSP 与 SCC 的功能类似。一旦其他 Kubernetes 发行版开始支持开箱即用的 PSP，Istio 网格中的 Pod 就需要提升权限才能正常运行。&lt;/p&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;解决这个问题的一种方法是将配置 Pod 的 iptables 规则的逻辑移出 Pod 本身。该方案通过一个名叫 &lt;code&gt;istio-pod-network-controller&lt;/code&gt; 的 DaemonSet 控制器，来监视新 Pod 的创建，并在创建后立即在这些新 Pod 中配置相应的 iptables 规则。下图描绘了该解决方案的整体架构：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-pod-network-controller-架构示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;istio-pod-network-controller 架构示意图&#34; srcset=&#34;
               /blog/increasing-security-of-istio-deployments-by-removing-the-need-for-privileged-containers/006tNbRwgy1fvlv897xs7j30ae06qjrr_hufe5fcdeeef802847ec729c38db403857_19322_f7ae4f0199a9e4b9792cdfa6928f2b90.webp 400w,
               /blog/increasing-security-of-istio-deployments-by-removing-the-need-for-privileged-containers/006tNbRwgy1fvlv897xs7j30ae06qjrr_hufe5fcdeeef802847ec729c38db403857_19322_de2bab9f29555913b17aebdcb580bacd.webp 760w,
               /blog/increasing-security-of-istio-deployments-by-removing-the-need-for-privileged-containers/006tNbRwgy1fvlv897xs7j30ae06qjrr_hufe5fcdeeef802847ec729c38db403857_19322_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/increasing-security-of-istio-deployments-by-removing-the-need-for-privileged-containers/006tNbRwgy1fvlv897xs7j30ae06qjrr_hufe5fcdeeef802847ec729c38db403857_19322_f7ae4f0199a9e4b9792cdfa6928f2b90.webp&#34;
               width=&#34;374&#34;
               height=&#34;242&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      istio-pod-network-controller 架构示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个新 Pod。&lt;/li&gt;
&lt;li&gt;创建该 Pod 的节点上运行的 &lt;code&gt;istio-pod-network-controller&lt;/code&gt; 检测新创建的 Pod 是否属于 Istio 网格，如果属于则对其进行初始化。&lt;/li&gt;
&lt;li&gt;Pod 中的 init 容器等待初始化 &lt;code&gt;annotation&lt;/code&gt; 出现，确保应用程序容器和 &lt;a href=&#34;https://istio.io/zh/docs/setup/kubernetes/sidecar-injection/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecar&lt;/a&gt; Envoy 代理仅在 iptables 初始化完成后再启动。&lt;/li&gt;
&lt;li&gt;启动 Sidecar 容器和应用程序容器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了这个解决方案，由于 Envoy Sidecar 需要以特定的非 root 用户 ID 运行，在 Istio 网格中运行的 Pod 只需要 &lt;code&gt;nonroot&lt;/code&gt; SCC 就行了。&lt;/p&gt;
&lt;p&gt;理想情况下，我们希望 Istio 中的应用程序通过 &lt;code&gt;restricted&lt;/code&gt; SCC 运行，这是 Openshift 中的默认值。虽然 &lt;code&gt;nonroot&lt;/code&gt; SCC 比 &lt;code&gt;restricted&lt;/code&gt; SCC 的权限稍微宽泛一些，但这种折衷方案是可以接受的，这与使用 &lt;code&gt;privileged&lt;/code&gt; SCC 运行每个 Istio 应用程序 Pod 相比，是一个巨大的进步。&lt;/p&gt;
&lt;p&gt;现在，我们通过给 &lt;code&gt;istio-pod-network-controller&lt;/code&gt; 提供 privileged 配置文件和 &lt;code&gt;NET_ADMIN&lt;/code&gt; capability 来允许它修改其他 Pod 的 iptables 规则，这通常是可以接受的方案，因为该组件将由集群管理员以与 Istio 控制平面类似的方式安装和管理。&lt;/p&gt;
&lt;h2 id=&#34;安装指南&#34;&gt;安装指南&lt;/h2&gt;
&lt;p&gt;根据安装指南假设 Istio 已成功安装在 &lt;code&gt;istio-system&lt;/code&gt; 命名空间中，并且已经开启了&lt;a href=&#34;https://istio.io/zh/docs/setup/kubernetes/sidecar-injection/#automatic-sidecar-injection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动注入功能&lt;/a&gt;。克隆 istio-pod-network-controller &lt;a href=&#34;https://github.com/sabre1041/istio-pod-network-controller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;仓库&lt;/a&gt;，然后执行以下命令以使用 &lt;code&gt;Helm&lt;/code&gt; 安装 &lt;code&gt;istio-pod-network-controller&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ helm template -n istio-pod-network-controller ./chart/istio-pod-network-controller &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; kubectl apply -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;测试自动注入功能&#34;&gt;测试自动注入功能&lt;/h4&gt;
&lt;p&gt;执行以下命令测试自动注入功能：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl create namespace bookinfo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl label namespace bookinfo istio-injection&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;enabled
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl annotate namespace bookinfo istio-pod-network-controller/initialize&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f examples/bookinfo.yaml -n bookinfo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他部署方案请参考&lt;a href=&#34;https://github.com/sabre1041/istio-pod-network-controller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方仓库的文档&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;istio-pod-network-controller&lt;/code&gt; 是一个用来提高 Istio Deployment 安全性的可选工具，它通过消除在 Istio 网格中运行使用 privileged SCC 的 Pod 的需求，并让这些 Pod 只通过 nonroot SCC 运行，以此来提高安全性。如果您决定采用此解决方案，请注意这并不是 &lt;code&gt;Red Hat&lt;/code&gt; 正式支持的项目。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
