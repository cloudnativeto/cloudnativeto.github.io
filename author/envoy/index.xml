<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Envoy | 云原生社区</title>
    <link>https://cloudnative.to/author/envoy/</link>
      <atom:link href="https://cloudnative.to/author/envoy/index.xml" rel="self" type="application/rss+xml" />
    <description>Envoy</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://cloudnative.to/author/envoy/avatar_hu1c0f4849bbadc379a94056a8d50f26ca_11389_270x270_fill_q75_lanczos_center.jpg</url>
      <title>Envoy</title>
      <link>https://cloudnative.to/author/envoy/</link>
    </image>
    
    <item>
      <title>Envoy HTTP 连接管理</title>
      <link>https://cloudnative.to/blog/envoy-http-connection-management/</link>
      <pubDate>Thu, 31 Dec 2020 10:03:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/envoy-http-connection-management/</guid>
      <description>&lt;p&gt;本文译自 Envoy 官方文档 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_connection_management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP connection management&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;http-连接管理&#34;&gt;HTTP 连接管理&lt;/h2&gt;
&lt;p&gt;HTTP 是现代面向服务体系架构的重要组成部分，Envoy 实现了大量的 HTTP 特定功能。Envoy 内置了一个叫 &lt;a href=&#34;https://cloudnative.to/envoy/configuration/http/http_conn_man/http_conn_man.html#config-http-conn-man&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP 连接管理器&lt;/a&gt; 的网络层过滤器。 此过滤器将原始字节转换为 HTTP 协议的消息和事件，例如，请求头接收、请求体数据接收、请求标尾 (trailers) 接收等。 过滤器同时处理所有 HTTP 连接和请求的通用功能，例如 &lt;a href=&#34;https://cloudnative.to/envoy/intro/arch_overview/observability/access_logging.html#arch-overview-access-logs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;访问日志&lt;/a&gt;、 &lt;a href=&#34;https://cloudnative.to/envoy/intro/arch_overview/observability/tracing.html#arch-overview-tracing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请求 ID 生成与追踪&lt;/a&gt;、 &lt;a href=&#34;https://cloudnative.to/envoy/configuration/http/http_conn_man/headers.html#config-http-conn-man-headers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请求头/响应头的操作&lt;/a&gt;、 &lt;a href=&#34;https://cloudnative.to/envoy/intro/arch_overview/http/http_routing.html#arch-overview-http-routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由表&lt;/a&gt; 管理和 &lt;a href=&#34;https://cloudnative.to/envoy/configuration/http/http_conn_man/stats.html#config-http-conn-man-stats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;统计&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;HTTP 连接管理器 &lt;a href=&#34;https://cloudnative.to/envoy/configuration/http/http_conn_man/http_conn_man.html#config-http-conn-man&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;配置&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;http-协议&#34;&gt;HTTP 协议&lt;/h2&gt;
&lt;p&gt;Envoy 的 HTTP 连接管理器原生支持 HTTP/1.1、WebSockets 和 HTTP/2。现在还不支持 SPDY。Envoy HTTP 设计的首要目标是成为一个 HTTP/2 多路复用代理。在内部， HTTP/2 术语用于描述系统组件。例如，一个 HTTP 请求和响应发生在流上。一个编解码 API 被用来将不同的电报协议转换为流、请求、响应等协议无关的格式。 对于 HTTP/1.1 来说，编解码器将协议的串行/流功能转换成像 HTTP/2 的某些东西提供给更高层级。这意味着大部分代码不需要理解一个流是来自 HTTP/1.1 还是 HTTP/2 连接。&lt;/p&gt;
&lt;h2 id=&#34;http-头清理&#34;&gt;HTTP 头清理&lt;/h2&gt;
&lt;p&gt;HTTP 连接管理器执行各种 &lt;a href=&#34;https://cloudnative.to/envoy/configuration/http/http_conn_man/header_sanitizing.html#config-http-conn-man-header-sanitizing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;头清理&lt;/a&gt; 操作为了安全因素。&lt;/p&gt;
&lt;h2 id=&#34;路由表配置&#34;&gt;路由表配置&lt;/h2&gt;
&lt;p&gt;每一个 &lt;a href=&#34;https://cloudnative.to/envoy/configuration/http/http_conn_man/http_conn_man.html#config-http-conn-man&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP 连接管理过滤器&lt;/a&gt; 有一个相关的 &lt;a href=&#34;https://cloudnative.to/envoy/intro/arch_overview/http/http_routing.html#arch-overview-http-routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由表&lt;/a&gt;。路由表可以使用下面两种之一来配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态配置。&lt;/li&gt;
&lt;li&gt;基于 &lt;a href=&#34;https://cloudnative.to/envoy/configuration/http/http_conn_man/rds.html#config-http-conn-man-rds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RDS API&lt;/a&gt; 的动态配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重试插件配置&#34;&gt;重试插件配置&lt;/h2&gt;
&lt;p&gt;通常在重试期间，主机选择遵循与原始请求相同的过程。重试插件可以用来修改这种行为，它们分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-retrypolicy-retry-host-predicate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;主机谓词&lt;/a&gt;：这些谓词可以用来“拒绝”一个主机，将导致重新尝试主机选择。 可以指定任意数量的谓词，如果任何谓词拒绝主机，则主机将被拒绝。&lt;/p&gt;
&lt;p&gt;Envoy 支持以下内置的主机谓词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;envoy.retry_host_predicates.previous_hosts&lt;/em&gt;：这将跟踪以前尝试过的主机并且拒绝已经尝试过的主机。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;envoy.retry_host_predicates.omit_canary_hosts&lt;/em&gt;：这将拒绝任何被标记为金丝雀主机的主机。通过在过滤器元数据中为 &lt;code&gt;envoy.lb&lt;/code&gt; 过滤器设置 &lt;code&gt;canary: true&lt;/code&gt; 来标记主机。查看 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/endpoint/v3/endpoint_components.proto.html#envoy-v3-api-msg-config-endpoint-v3-lbendpoint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LbEndpoint&lt;/a&gt; 获得更多信息。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;envoy.retry_host_predicates.omit_host_metadata&lt;/em&gt;：这将拒绝任何符合预定义条件的主机。查看下面的配置示例获得更多信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-retrypolicy-retry-priority&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;优先级谓词&lt;/a&gt;：这类谓词可以用来在为一个重试尝试选择优先级时调整负载的优先级。只可以定义 一个这样的谓词。&lt;/p&gt;
&lt;p&gt;Envoy 内置支持下面的优先级谓词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;envoy.retry_priorities.previous_priorities&lt;/em&gt;：这将跟踪以前尝试过的优先级，并调整优先级负载，以便在后续重试中将其他优先级作为目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主机选择将会继续直到配置的谓词接受主机或者达到了配置的 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-retrypolicy-host-selection-retry-max-attempts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最大尝试次数&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可以组合使用这些插件来影响主机选择和优先级。Envoy 也可以像添加过滤器一样通过自定义的重试插件进行扩展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置示例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例如，想要配置优先重试没有尝试过的主机，可以使用内置的 &lt;code&gt;envoy.retry_host_predicates.previous_hosts&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;retry_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retry_host_predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.retry_host_predicates.previous_hosts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host_selection_retry_max_attempts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将拒绝已经尝试过的主机，并且最多尝试 3 次主机选择。为了处理寻找一个可用主机过程中不可能发生（没有主机满足谓词）或者不太可能发生（唯一 合适的主机相对权重非常低）的情况，尝试次数的上限是有必要的。&lt;/p&gt;
&lt;p&gt;根据主机的元数据拒绝主机，可以使用 &lt;code&gt;envoy.retry_host_predicates.omit_host_metadata&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;retry_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retry_host_predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.retry_host_predicates.omit_host_metadata&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.retry.host.omit_host_metadata.v3.OmitHostMetadataConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata_match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter_metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy.lb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将拒绝任何匹配元数据中存在（key，value）的主机。&lt;/p&gt;
&lt;p&gt;配置在重试期间重试其他优先级，可以使用内置的 &lt;code&gt;envoy.retry_priorities.previous_priorities&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;retry_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retry_priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.retry_priorities.previous_priorities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;update_frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将针对后续重试中尚未使用过的优先级。&lt;code&gt;update_frequency&lt;/code&gt; 参数决定优先级负载应多长时间重新计算一次。&lt;/p&gt;
&lt;p&gt;这些插件可以被组合使用，这将排除以前尝试过的主机和以前尝试过的优先级。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;retry_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retry_host_predicate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.retry_host_predicates.previous_hosts&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host_selection_retry_max_attempts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retry_priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.retry_priorities.previous_priorities&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;update_frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;内部重定向&#34;&gt;内部重定向&lt;/h2&gt;
&lt;p&gt;Envoy 支持处理 3xx 内部重定向，捕获可配置的 3xx 重定向响应，合成一个新的请求，将他发送给新路由匹配指定的上游，将重定向的响应作为对原始请求的响应返回。&lt;/p&gt;
&lt;p&gt;内部重定向可以使用路由配置中的 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-routeaction-internal-redirect-policy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;内部重定向策略&lt;/a&gt; 字段来配置。 当重定向处理开启，任何来自上游的 3xx 响应，只要匹配到配置的 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-internalredirectpolicy-redirect-response-codes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;redirect_response_codes&lt;/a&gt; 的响应都将由 Envoy 来处理。&lt;/p&gt;
&lt;p&gt;要成功地处理重定向，必须通过以下检查：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;响应码匹配到配置的 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-internalredirectpolicy-redirect-response-codes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;redirect_response_codes&lt;/a&gt;，默认是 302， 或者其他的 3xx 状态码（301, 302, 303, 307, 308）。&lt;/li&gt;
&lt;li&gt;拥有一个有效的、完全限定的 URL 的 location 头。&lt;/li&gt;
&lt;li&gt;该请求必须已被 Envoy 完全处理。&lt;/li&gt;
&lt;li&gt;请求不能包含请求体。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-internalredirectpolicy-allow-cross-scheme-redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;allow_cross_scheme_redirect&lt;/a&gt; 是 true（默认是 false）， 或者下游请求的 scheme 和 location 头一致。&lt;/li&gt;
&lt;li&gt;给定的下游请求之前处理的内部重定向次数不超过请求或重定向请求命中的路由配置的 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-internalredirectpolicy-max-internal-redirects&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最大重定向数&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;全部 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-internalredirectpolicy-predicates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;谓词&lt;/a&gt; 接受目标路由。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;任何失败都将导致重定向传递给下游。&lt;/p&gt;
&lt;p&gt;由于重定向请求可能会在不同的路由之间传递，重定向链中的任何满足以下条件的路由都将导致重定向被传递给下游。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有启用内部重定向&lt;/li&gt;
&lt;li&gt;或者当重定向链命中的路由的 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-internalredirectpolicy-max-internal-redirects&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最大重定向次数&lt;/a&gt; 小于等于重定向链的长度。&lt;/li&gt;
&lt;li&gt;或者路由被 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/config/route/v3/route_components.proto.html#envoy-v3-api-field-config-route-v3-internalredirectpolicy-predicates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;谓词&lt;/a&gt; 拒绝。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有两个谓词可以创建一个有向无环图 (DAG) 来定义一个过滤器链，他们是 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/extensions/internal_redirect/previous_routes/v3/previous_routes_config.proto.html#envoy-v3-api-msg-extensions-internal-redirect-previous-routes-v3-previousroutesconfig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;先前的路由&lt;/a&gt; 谓词 和 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/extensions/internal_redirect/allow_listed_routes/v3/allow_listed_routes_config.proto.html#envoy-v3-api-msg-extensions-internal-redirect-allow-listed-routes-v3-allowlistedroutesconfig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;allow_listed_routes&lt;/a&gt;。 具体来说，&lt;em&gt;allow listed routes&lt;/em&gt; 谓词定义的有向无环图（DAG）中各个节点的边，而 先前的路由 谓词定义了边的“访问”状态，如果是这样就可以避免循环。&lt;/p&gt;
&lt;p&gt;第三个谓词 &lt;a href=&#34;https://cloudnative.to/envoy/api-v3/extensions/internal_redirect/safe_cross_scheme/v3/safe_cross_scheme_config.proto.html#envoy-v3-api-msg-extensions-internal-redirect-safe-cross-scheme-v3-safecrossschemeconfig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;safe_cross_scheme&lt;/a&gt; 被用来防止 HTTP -&amp;gt; HTTPS 的重定向。&lt;/p&gt;
&lt;p&gt;一旦重定向通过这些检查，发送到原始上游的请求头将被修改为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将完全限定的原始请求 URL 放到 x-envoy-original-url 头中。&lt;/li&gt;
&lt;li&gt;使用 Location 头中的值替换 Authority/Host、Scheme、Path 头。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改后的请求头将选择一个新的路由，通过一个新的过滤器链发送，然后把所有正常的 Envoy 请求都发送到上游进行清理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，HTTP 连接管理器头清理（例如清除不受信任的标头）仅应用一次。即使原始路由和第二个路由相同，每个路由的头修改也将同时应用于原始路由和第二路由，因此请谨慎配置头修改规则， 以避免重复不必要的请求头值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个简单的重定向流如下所示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送 GET 请求以获取 &lt;em&gt;&lt;a href=&#34;http://foo.com/bar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://foo.com/bar&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;上游 1 发送 302 响应码并携带 “&lt;em&gt;location: &lt;a href=&#34;http://baz.com/eep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://baz.com/eep&lt;/a&gt;&lt;/em&gt;”&lt;/li&gt;
&lt;li&gt;Envoy 被配置为允许原始路由上重定向，并发送新的 GET 请求到上游 2，携带请求头 “&lt;em&gt;x-envoy-original-url: &lt;a href=&#34;http://foo.com/bar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://foo.com/bar&lt;/a&gt;&lt;/em&gt;” 获取 &lt;em&gt;&lt;a href=&#34;http://baz.com/eep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://baz.com/eep&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Envoy 将 &lt;em&gt;&lt;a href=&#34;http://baz.com/eep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://baz.com/eep&lt;/a&gt;&lt;/em&gt; 的响应数据代理到客户端，作为对原始请求的响应。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;超时&#34;&gt;超时&lt;/h2&gt;
&lt;p&gt;各种可配置的超时适用于 HTTP 连接及其组成的流。有关重要超时配置的概述，请参考 &lt;a href=&#34;https://cloudnative.to/envoy/faq/configuration/timeouts.html#faq-configuration-timeouts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此 FAQ 条目&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Envoy 是什么？</title>
      <link>https://cloudnative.to/blog/what-is-envoy/</link>
      <pubDate>Tue, 08 Dec 2020 10:03:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/what-is-envoy/</guid>
      <description>&lt;p&gt;本文译自 Envoy 官方文档 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/what_is_envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Envoy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Envoy 是为面向大型现代服务架构而设计的 L7 代理和通信总线。该项目源于以下理念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于应用来说网络应该是透明的。当网络和应用出现故障时，应该非常容易定位问题发生的根源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事实上，实现上述的目标非常困难。Envoy 试图通过提供以下高级功能来实现这一目标：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程外架构&lt;/strong&gt;：Envoy 是一个独立进程，伴随每个应用服务运行。所有的 Envoy 形成一个透明的通信网格，每个应用与 localhost 收发信息，对网络的拓扑结构无感知。在服务间通信的场景下，进程外架构对比传统软件库的方式有两大优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy 适用于任何应用编程语言。Envoy 部署可以在 Java、C++、Go、PHP、Python 等不同语言编写的应用之间形成一个网格。在面向服务架构中，使用多种应用框架和编程语言变得越来越普遍。Envoy 弥合了它们之间的差异。&lt;/li&gt;
&lt;li&gt;任何与面向大型服务架构打过交道的人都知道部署和升级软件库非常的痛苦。Envoy 可以透明地在整个基础架构上快速部署和升级。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;L3/L4 filter 架构&lt;/strong&gt;：Envoy 的核心是一个 L3/L4 网络代理。可插拔的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/listeners/network_filters#arch-overview-network-filters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;filter&lt;/a&gt; 链机制允许开发 filter 来执行不同 TCP/UDP 代理任务并将其插入到主服务中。现已有多个支持各种任务的 filter，如原始的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/listeners/tcp_proxy#arch-overview-tcp-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCP 代理&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/listeners/udp_proxy#arch-overview-udp-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UDP 代理&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_connection_management#arch-overview-http-conn-man&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP 代理&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/ssl#arch-overview-ssl-auth-filter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS 客户端证书认证&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/redis#arch-overview-redis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/mongo#arch-overview-mongo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MongoDB&lt;/a&gt; 和 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/postgres#arch-overview-postgres&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postgres&lt;/a&gt; 等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP L7 filter 架构&lt;/strong&gt;：HTTP 是现代应用架构中的关键组件，Envoy &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_filters#arch-overview-http-filters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;支持&lt;/a&gt; 额外的 HTTP L7 filter 层。可以将 HTTP filter 插入执行不同任务的 HTTP 连接管理子系统中，如 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/buffer_filter#config-http-filters-buffer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;缓存&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting#arch-overview-global-rate-limit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;限速&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由/转发&lt;/a&gt;、嗅探 Amazon 的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/dynamo#arch-overview-dynamo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DynamoDB&lt;/a&gt; 等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;顶级 HTTP/2 支持&lt;/strong&gt;：当以 HTTP 模式运行时，Envoy 同时 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_connection_management#arch-overview-http-protocols&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;支持&lt;/a&gt; HTTP/1.1 和 HTTP/2。Envoy 可以作为 HTTP/1.1 和 HTTP/2 之间的双向透明代理。这意味着任意 HTTP/1.1 和 HTTP/2 客户端和目标服务器的组合都可以桥接在一起。建议配置所有服务之间的 Envoy 使用 HTTP/2 来创建持久连接的网格，以便可以实现请求和响应的多路复用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP L7 路由&lt;/strong&gt;：当以 HTTP 模式运行时，Envoy 支持一种 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由&lt;/a&gt; 子系统，能够根据路径、权限、内容类型、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/runtime#arch-overview-runtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;运行时&lt;/a&gt; 参数值等对请求进行路由和重定向。这项功能在将 Envoy 用作前端/边缘代理时非常有用，同时在构建服务网格时也会使用此功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gRPC 支持&lt;/strong&gt;：&lt;a href=&#34;https://www.grpc.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC&lt;/a&gt; 是一个来自 Google 的 RPC 框架，它使用 HTTP/2 作为底层多路复用传输协议。Envoy &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_protocols/grpc#arch-overview-grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;支持&lt;/a&gt; 被 gRPC 请求和响应的作为路由和负载均衡底层的所有 HTTP/2 功能。这两个系统是非常互补的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务发现和动态配置&lt;/strong&gt;：Envoy 可以选择使用一组分层的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/operations/dynamic_configuration#arch-overview-dynamic-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;动态配置&lt;/a&gt; API 来实现集中化管理。这些层为 Envoy 提供了以下内容的动态更新：后端集群内的主机、后端集群本身、HTTP 路由、监听套接字和加密材料。对于更简单的部署，可以 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-strict-dns&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;通过 DNS 解析&lt;/a&gt;（甚至完全 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-types-static&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;跳过&lt;/a&gt;）发现后端主机，使用静态配置文件将替代深层配置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;健康检查&lt;/strong&gt;：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/service_discovery#arch-overview-service-discovery-eventually-consistent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;推荐&lt;/a&gt; 使用将服务发现视为最终一致的过程的方式来建立 Envoy 网格。Envoy 包含了一个 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/health_checking#arch-overview-health-checking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;健康检查&lt;/a&gt;，可以选择对上游服务集群执行主动健康检查。然后， Envoy 联合使用服务发现和健康检查信息来确定健康的负载均衡目标。Envoy 还通过 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier#arch-overview-outlier-detection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;异常检查&lt;/a&gt; 子系统支持被动健康检查。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高级负载均衡&lt;/strong&gt;：&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/overview#arch-overview-load-balancing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;负载均衡&lt;/a&gt; 是分布式系统中不同组件之间的一个复杂问题。由于 Envoy 是一个独立代理而不是软件库，因此可以独立实现高级负载均衡以供任何应用程序访问。目前，Envoy 支持 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing-retry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动重试&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking#arch-overview-circuit-break&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;熔断&lt;/a&gt;、通过外部速率限制服务的 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/other_features/global_rate_limiting#arch-overview-global-rate-limit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;全局限速&lt;/a&gt;、&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-routeaction-requestmirrorpolicy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请求映射&lt;/a&gt; 和 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/outlier#arch-overview-outlier-detection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;异常检测&lt;/a&gt;。未来还计划支持请求竞争。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前端/边缘代理支持&lt;/strong&gt;：在边缘使用相同的软件大有好处（可观察性、管理、相同的服务发现和负载均衡算法等）。Envoy 包含足够多的功能，可作为大多数现代 Web 应用程序的边缘代理。包括 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/ssl#arch-overview-ssl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS&lt;/a&gt; 终止、HTTP/1.1 和 HTTP/2 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_connection_management#arch-overview-http-protocols&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;支持&lt;/a&gt;，以及 HTTP L7 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/http/http_routing#arch-overview-http-routing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;路由&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最佳的可观察性&lt;/strong&gt;：如上所述，Envoy 的主要目标是让网络透明化。然而，在网络层面和应用层面都有可能出现问题。Envoy 包含对所有子系统的强大 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/statistics#arch-overview-statistics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;统计&lt;/a&gt; 支持。目前支持 &lt;a href=&#34;https://github.com/etsy/statsd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statsd&lt;/a&gt;（和兼容程序）作为统计信息接收器，但是插入不同的接收器并不困难。统计信息也可以通过 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/operations/admin#operations-admin-interface&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;管理&lt;/a&gt; 端口查看。通过第三方提供商，Envoy 还支持分布式 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing#arch-overview-tracing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;追踪&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Envoy 中的 xDS REST 和 gRPC 协议详解</title>
      <link>https://cloudnative.to/blog/envoy-xds-protocol/</link>
      <pubDate>Fri, 28 Sep 2018 19:07:20 +0800</pubDate>
      <guid>https://cloudnative.to/blog/envoy-xds-protocol/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Envoy 通过查询文件或管理服务器来动态发现资源。概括地讲，对应的发现服务及其相应的 API 被称作  &lt;em&gt;xDS&lt;/em&gt; 。Envoy 通过订阅（ &lt;em&gt;subscription&lt;/em&gt; ）方式来获取资源，如监控指定路径下的文件、启动 gRPC 流或轮询 REST-JSON URL。后两种方式会发送 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#discoveryrequest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;DiscoveryRequest&lt;/code&gt;&lt;/a&gt; 请求消息，发现的对应资源则包含在响应消息 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#discoveryresponse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;DiscoveryResponse&lt;/code&gt;&lt;/a&gt; 中。下面，我们将具体讨论每种订阅类型。&lt;/p&gt;
&lt;h2 id=&#34;文件订阅&#34;&gt;文件订阅&lt;/h2&gt;
&lt;p&gt;发现动态资源的最简单方式就是将其保存于文件，并将路径配置在 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/config_source.proto#core-configsource&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ConfigSource&lt;/a&gt; 中的 &lt;code&gt;path&lt;/code&gt; 参数中。Envoy 使用 &lt;code&gt;inotify&lt;/code&gt;（Mac OS X 上为 &lt;code&gt;kqueue&lt;/code&gt;）来监控文件的变化，在文件被更新时，Envoy 读取保存的 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 数据进行解析，数据格式可以为二进制 protobuf、JSON、YAML 和协议文本等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：core.ConfigSource 配置格式如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;api_config_source&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;ads&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件订阅方式可提供统计数据和日志信息，但是缺少 ACK/NACK 更新的机制。如果更新的配置被拒绝，xDS API 则继续使用最后一个的有效配置。&lt;/p&gt;
&lt;h2 id=&#34;grpc-流式订阅&#34;&gt;gRPC 流式订阅&lt;/h2&gt;
&lt;h3 id=&#34;单资源类型发现&#34;&gt;单资源类型发现&lt;/h3&gt;
&lt;p&gt;每个 xDS API 可以单独配置 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/config_source.proto#core-apiconfigsource&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ApiConfigSource&lt;/code&gt;&lt;/a&gt;，指向对应的上游管理服务器的集群地址。每个 xDS 资源类型会启动一个独立的双向 gRPC 流，可能对应不同的管理服务器。API 交付方式采用最终一致性。可以参考后续聚合服务发现（ADS） 章节来了解必要的显式控制序列。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：core.ApiConfigSource 配置格式如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;api_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;cluster_names&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;grpc_services&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;refresh_delay&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request_timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{...}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;类型-url&#34;&gt;类型 URL&lt;/h4&gt;
&lt;p&gt;每个 xDS API 都与给定的资源的类型存在 1:1 对应。关系如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/lds.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LDS： &lt;code&gt;envoy.api.v2.Listener&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/rds.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RDS： &lt;code&gt;envoy.api.v2.RouteConfiguration&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/cds.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CDS： &lt;code&gt;envoy.api.v2.Cluster&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/eds.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EDS： &lt;code&gt;envoy.api.v2.ClusterLoadAssignment&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/envoyproxy/data-plane-api/blob/master/envoy/api/v2/auth/cert.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SDS：&lt;code&gt;envoy.api.v2.Auth.Secret&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3#any&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;类型 URL&lt;/em&gt;&lt;/a&gt; 的概念如下所示，其采用 &lt;code&gt;type.googleapis.com/&amp;lt;resource type&amp;gt;&lt;/code&gt; 的形式，例如 CDS 对应于  &lt;code&gt;type.googleapis.com/envoy.api.v2.Cluster&lt;/code&gt;。在 Envoy 的请求和管理服务器的响应中，都包括了资源类型 URL。&lt;/p&gt;
&lt;h4 id=&#34;acknack-和版本&#34;&gt;ACK/NACK 和版本&lt;/h4&gt;
&lt;p&gt;每个 Envoy 流以  &lt;code&gt;DiscoveryRequest&lt;/code&gt; 开始，包括了列表订阅的资源、订阅资源对应的类型 URL、节点标识符和空的 &lt;code&gt;version_info&lt;/code&gt;。EDS 请求示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;version_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy }&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resource_names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.api.v2.ClusterLoadAssignment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;response_nonce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;管理服务器可立刻或等待资源就绪时发送 &lt;code&gt;DiscoveryResponse &lt;/code&gt;作为响应，示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;version_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;foo ClusterLoadAssignment proto encoding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;bar ClusterLoadAssignment proto encoding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.api.v2.ClusterLoadAssignment&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nonce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Envoy 在处理 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 响应后，将通过流发送一个新的请求，请求包含应用成功的最后一个版本号和管理服务器提供的 &lt;code&gt;nonce&lt;/code&gt;。如果本次更新已成功应用，则 &lt;code&gt;version_info&lt;/code&gt; 的值设置为 &lt;strong&gt;X&lt;/strong&gt;，如下序列图所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-version-update-after-ack&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/7e0ee03agy1fvmxs5aod1j20cc06y74c.jpg&#34; alt=&#34;Version update after ACK&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Version update after ACK
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在此序列图及后续中，将统一使用以下缩写格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DiscoveryRequest&lt;/code&gt;： (V=&lt;code&gt;version_info&lt;/code&gt;，R=&lt;code&gt;resource_names&lt;/code&gt;，N=&lt;code&gt;response_nonce&lt;/code&gt;，T=&lt;code&gt;type_url&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DiscoveryResponse&lt;/code&gt;： (V=&lt;code&gt;version_info&lt;/code&gt;，R=&lt;code&gt;resources&lt;/code&gt;，N=&lt;code&gt;nonce&lt;/code&gt;，T=&lt;code&gt;type_url&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信息安全&lt;/a&gt;中，&lt;strong&gt;Nonce&lt;/strong&gt;是一个在加密通信只能使用一次的数字。在认证协议中，它往往是一个&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;随机&lt;/a&gt;或&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;伪随机&lt;/a&gt;数，以避免&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;重放攻击&lt;/a&gt;。Nonce也用于&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B5%81%E5%AF%86%E7%A0%81&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流密码&lt;/a&gt;以确保安全。如果需要使用相同的密钥加密一个以上的消息，就需要Nonce来确保不同的消息与该密钥加密的密钥流不同。（引用自&lt;a href=&#34;https://zh.wikipedia.org/wiki/Nonce&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;维基百科&lt;/a&gt;）在本文中&lt;code&gt;nonce&lt;/code&gt;是每次更新的数据包的唯一标识。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;版本为 Envoy 和管理服务器提供了共享当前应用配置的概念和通过 ACK/NACK 来进行配置更新的机制。如果 Envoy 拒绝配置更新 &lt;strong&gt;X&lt;/strong&gt;，则回复 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#envoy-api-field-discoveryrequest-error-detail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;error_detail&lt;/code&gt;&lt;/a&gt; 及前一个的版本号，在当前情况下为空的初始版本号，&lt;code&gt;error_detail&lt;/code&gt; 包含了有关错误的更加详细的信息：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-no-version-update-after-nack&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/7e0ee03agy1fvmxtjqtcsj20cc06y0ss.jpg&#34; alt=&#34;No version update after NACK&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      No version update after NACK
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;后续，API 更新可能会在新版本 &lt;strong&gt;Y&lt;/strong&gt; 上成功：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ack-after-nack&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/7e0ee03agy1fvmxtwzc96j20cc0923yp.jpg&#34; alt=&#34;ACK after NACK&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ACK after NACK
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;每个流都有自己的版本概念，但不存在跨资源类型的共享版本。在不使用 ADS 的情况下，每个资源类型可能具有不同的版本，因为 Envoy API 允许指向不同的 EDS/RDS 资源配置并对应不同的 &lt;code&gt;ConfigSources&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;何时发送更新&#34;&gt;何时发送更新&lt;/h4&gt;
&lt;p&gt;管理服务器应该只向 Envoy 客户端发送上次 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 后更新过的资源。Envoy 则会根据接受或拒绝 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 的情况，立即回复包含 ACK/NACK 的  &lt;code&gt;DiscoveryRequest&lt;/code&gt; 请求。如果管理服务器每次发送相同的资源集结果，而不是根据其更新情况，则会导致 Envoy 和管理服务器通讯效率大打折扣。&lt;/p&gt;
&lt;p&gt;在同一个流中，新的 &lt;code&gt;DiscoveryRequests&lt;/code&gt; 将取代此前具有相同的资源类型 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 请求。&lt;strong&gt;这意味着管理服务器只需要响应给定资源类型最新的 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 请求即可。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;资源提示&#34;&gt;资源提示&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DiscoveryRequest&lt;/code&gt; 中的 &lt;code&gt;resource_names&lt;/code&gt; 信息作为资源提示出现。一些资源类型，例如 &lt;code&gt;Cluster&lt;/code&gt; 和 &lt;code&gt;Listener&lt;/code&gt; 将使用一个空的 &lt;code&gt;resource_names&lt;/code&gt;，因为 Envoy 需要获取管理服务器对应于节点标识的所有 &lt;code&gt;Cluster&lt;/code&gt;（CDS）和  &lt;code&gt;Listener&lt;/code&gt;（LDS）。对于其他资源类型，如 &lt;code&gt;RouteConfigurations&lt;/code&gt;（RDS）和 &lt;code&gt;ClusterLoadAssignments&lt;/code&gt;（EDS），则遵循此前的 CDS/LDS 更新，Envoy 能够明确地枚举这些资源。&lt;/p&gt;
&lt;p&gt;LDS/CDS 资源提示信息将始终为空，并且期望管理服务器的每个响应都提供 &lt;code&gt;LDS/CDS&lt;/code&gt; 资源的完整状态。缺席的 &lt;code&gt;Listener&lt;/code&gt; 或 &lt;code&gt;Cluster&lt;/code&gt; 将被删除。&lt;/p&gt;
&lt;p&gt;对于 EDS/RDS，管理服务器并不需要为每个请求的资源进行响应，而且还可能提供额外未请求的资源。&lt;code&gt;resource_names&lt;/code&gt; 只是一个提示。Envoy 将默默地忽略返回的多余资源。如果请求的资源中缺少相应的 RDS 或 EDS 更新，Envoy 将保留对应资源的最后的值。管理服务器可能会依据  &lt;code&gt;DiscoveryRequest&lt;/code&gt; 中 &lt;code&gt;node&lt;/code&gt; 标识推断其所需的 EDS/RDS 资源，在这种情况下，提示信息可能会被丢弃。从相应的角度来看，空的 EDS/RDS &lt;code&gt;DiscoveryResponse&lt;/code&gt; 响应实际上是表明在 Envoy 中为一个空的资源。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;Listener&lt;/code&gt; 或 &lt;code&gt;Cluster&lt;/code&gt; 被删除时，其对应的 EDS 和 RDS 资源也需要在 Envoy 实例中删除。为使 EDS 资源被 Envoy 已知或跟踪，就必须存在应用过的 &lt;code&gt;Cluster&lt;/code&gt; 定义（如通过 CDS 获取）。RDS 和 &lt;code&gt;Listeners&lt;/code&gt; 之间存在类似的关系（如通过 LDS 获取）。&lt;/p&gt;
&lt;p&gt;对于 EDS/RDS ，Envoy 可以为每个给定类型的资源生成不同的流（如每个 &lt;code&gt;ConfigSource&lt;/code&gt; 都有自己的上游管理服务器的集群）或当指定资源类型的请求发送到同一个管理服务器的时候，允许将多个资源请求组合在一起发送。虽然可以单个实现，但管理服务器应具备处理每个给定资源类型中对单个或多个 &lt;code&gt;resource_names&lt;/code&gt;  请求的能力。下面的两个序列图对于获取两个 EDS 资源都是有效的 &lt;code&gt;{foo，bar}&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-multiple-eds-requests-on-the-same-stream&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/7e0ee03agy1fvmxuviiqsj20eh06ymx9.jpg&#34; alt=&#34;Multiple EDS requests on the same stream&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Multiple EDS requests on the same stream
    &lt;/figcaption&gt;&lt;/figure&gt;

















&lt;figure  id=&#34;figure-multiple-eds-requests-on-distinct-streams&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/7e0ee03agy1fvmxv7cv21j20j20a4wet.jpg&#34; alt=&#34;Multiple EDS requests on distinct streams&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Multiple EDS requests on distinct streams
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;资源更新&#34;&gt;资源更新&lt;/h4&gt;
&lt;p&gt;如上所述，Envoy 可能会更新  &lt;code&gt;DiscoveryRequest&lt;/code&gt; 中出现的 &lt;code&gt;resource_names&lt;/code&gt; 列表，其中 &lt;code&gt;DiscoveryRequest&lt;/code&gt;  是用来 ACK/NACK 管理服务器的特定的 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 。此外，Envoy 后续可能会发送额外的 &lt;code&gt;DiscoveryRequests&lt;/code&gt; ，用于在特定 &lt;code&gt;version_info&lt;/code&gt; 上使用新的资源提示来更新管理服务器。例如，如果 Envoy 在 EDS 版本 &lt;strong&gt;X&lt;/strong&gt; 时仅知道集群 &lt;code&gt;foo&lt;/code&gt;，但在随后收到的 CDS 更新时额外获取了集群 &lt;code&gt;bar&lt;/code&gt; ，它可能会为版本 &lt;strong&gt;X&lt;/strong&gt; 发出额外的 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 请求，并将 &lt;code&gt;{foo，bar}&lt;/code&gt; 作为请求的 &lt;code&gt;resource_names&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cds-response-leads-to-eds-resource-hint-update&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/006tNc79ly1fvph0p7u8zj31fm0lq0ve.jpg&#34; alt=&#34;CDS response leads to EDS resource hint update&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CDS response leads to EDS resource hint update
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这里可能会出现竞争状况；如果 Envoy 在版本 &lt;strong&gt;X&lt;/strong&gt; 上发布了资源提示更新请求，但在管理服务器处理该请求之前发送了新的版本号为 &lt;strong&gt;Y&lt;/strong&gt;  的响应，针对 &lt;code&gt;version_info&lt;/code&gt; 为 &lt;strong&gt;X&lt;/strong&gt; 的版本，资源提示更新可能会被解释为拒绝  &lt;strong&gt;Y&lt;/strong&gt; 。为避免这种情况，通过使用管理服务器提供的 &lt;code&gt;nonce&lt;/code&gt;，Envoy 可用来保证每个 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 对应到相应的 &lt;code&gt;DiscoveryResponse&lt;/code&gt; ：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-eds-update-race-motivates-nonces&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/006tNc79ly1fvph04ln3fj31kw0rogqc.jpg&#34; alt=&#34;EDS update race motivates nonces&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      EDS update race motivates nonces
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;管理服务器不应该为含有过期 &lt;code&gt;nonce&lt;/code&gt; 的 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 发送 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 响应。在向 Envoy 发送的 &lt;code&gt;DiscoveryResponse&lt;/code&gt;  中包含了的新 &lt;code&gt;nonce&lt;/code&gt; ，则此前的 &lt;code&gt;nonce&lt;/code&gt; 将过期。在资源新版本就绪之前，管理服务器不需要向 Envoy 发送更新。同版本的早期请求将会过期。在新版本就绪时，管理服务器可能会处理同一个版本号的多个 &lt;code&gt;DiscoveryRequests&lt;/code&gt;请求。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-requests-become-stale&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/006tNc79ly1fvpgy6xewrj31b415ctcy.jpg&#34; alt=&#34;Requests become stale&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Requests become stale
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上述资源更新序列表明 Envoy 并不能期待其发出的每个 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 都得到 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 响应。&lt;/p&gt;
&lt;h4 id=&#34;最终一致性考虑&#34;&gt;最终一致性考虑&lt;/h4&gt;
&lt;p&gt;由于 Envoy 的 xDS API 采用最终一致性，因此在更新期间可能导致流量被丢弃。例如，如果通过 CDS/EDS 仅获取到了集群 &lt;strong&gt;X&lt;/strong&gt;，而且 &lt;code&gt;RouteConfiguration&lt;/code&gt; 引用了集群  &lt;strong&gt;X&lt;/strong&gt;；在 CDS/EDS 更新集群  &lt;strong&gt;Y&lt;/strong&gt;  配置之前，如果将 &lt;code&gt;RouteConfiguration&lt;/code&gt; 将引用的集群调整为 &lt;strong&gt;Y&lt;/strong&gt; ，那么流量将被吸入黑洞而丢弃，直至集群 &lt;strong&gt;Y&lt;/strong&gt; 被 Envoy 实例获取。&lt;/p&gt;
&lt;p&gt;对某些应用程序，可接受临时的流量丢弃，客户端重试或其他 Envoy sidecar 会掩盖流量丢弃。那些对流量丢弃不能容忍的场景，可以通过以下方式避免流量丢失，CDS/EDS 更新同时携带 &lt;strong&gt;X&lt;/strong&gt; 和 &lt;strong&gt;Y&lt;/strong&gt; ，然后发送 RDS 更新从 &lt;strong&gt;X&lt;/strong&gt; 切换到 &lt;strong&gt;Y&lt;/strong&gt; ，此后发送丢弃 &lt;strong&gt;X&lt;/strong&gt; 的 CDS/EDS 更新。&lt;/p&gt;
&lt;p&gt;一般来说，为避免流量丢弃，更新的顺序应该遵循 &lt;code&gt;make before break&lt;/code&gt; 模型，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必须始终先推送 CDS 更新（如果有）。&lt;/li&gt;
&lt;li&gt;EDS 更新（如果有）必须在相应集群的 CDS 更新后到达。&lt;/li&gt;
&lt;li&gt;LDS 更新必须在相应的 CDS/EDS 更新后到达。&lt;/li&gt;
&lt;li&gt;与新添加的监听器相关的 RDS 更新必须在最后到达。&lt;/li&gt;
&lt;li&gt;最后，删除过期的 CDS 集群和相关的 EDS 端点（不再被引用的端点）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有新的集群/路由/监听器或者允许更新时临时流量丢失的情况下，可以独立推送 xDS 更新。请注意，在 LDS 更新的情况下，监听器须在接收流量之前被预热，例如如其配置了依赖的路由，则先需先从 RDS 进行获取。添加/删除/更新集群信息时，集群也需要进行预热。另一方面，如果管理平面确保路由更新时所引用的集群已经准备就绪，路由可以不用预热。&lt;/p&gt;
&lt;h3 id=&#34;聚合服务发现ads&#34;&gt;聚合服务发现（ADS）&lt;/h3&gt;
&lt;p&gt;当管理服务器进行资源分发时，通过上述保证交互顺序的方式来避免流量丢弃是一项很有挑战的工作。ADS 允许单一管理服务器通过单个 gRPC 流，提供所有的 API 更新。配合仔细规划的更新顺序，ADS 可规避更新过程中流量丢失。使用 ADS，在单个流上可通过类型 URL 来进行复用多个独立的 &lt;code&gt;DiscoveryRequest&lt;/code&gt;/&lt;code&gt;DiscoveryResponse&lt;/code&gt; 序列。对于任何给定类型的 URL，以上 &lt;code&gt;DiscoveryRequest&lt;/code&gt; 和 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 消息序列都适用。 更新序列可能如下所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-edscds-multiplexed-on-an-ads-stream&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/006tNc79ly1fvpgxnl947j313q0wgq62.jpg&#34; alt=&#34;EDS/CDS multiplexed on an ADS stream&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      EDS/CDS multiplexed on an ADS stream
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;每个 Envoy 实例可使用单独的 ADS 流。&lt;/p&gt;
&lt;p&gt;最小化 ADS 配置的 &lt;code&gt;bootstrap.yaml&lt;/code&gt; 片段示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;node identifier&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dynamic_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;nt&#34;&gt;ads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lds_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;nt&#34;&gt;ads&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ads_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GRPC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grpc_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;envoy_grpc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cluster_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ads_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;static_resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clusters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ads_cluster&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connect_timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;seconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;STATIC&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;socket_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;ADS management server IP address&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;ADS management server port&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lb_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ROUND_ROBIN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2_protocol_options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;admin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;增量-xds&#34;&gt;增量 xDS&lt;/h3&gt;
&lt;p&gt;增量 xDS 是可用于允许的 ADS、CDS 和 RDS 单独 xDS 端点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xDS 客户端对跟踪资源列表进行增量更新。这支持 Envoy 按需/惰性地请求额外资源。例如，当与未知集群相对应的请求到达时，可能会发生这种情况。&lt;/li&gt;
&lt;li&gt;xDS 服务器可以增量更新客户端上的资源。这支持 xDS 资源可伸缩性的目标。管理服务器只需交付更改的单个集群，而不是在修改单个集群时交付所有上万个集群。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xDS 增量会话始终位于 gRPC 双向流的上下文中。这允许 xDS 服务器能够跟踪到连接的 xDS 客户端的状态。xDS REST 版本不支持增量。&lt;/p&gt;
&lt;p&gt;在增量 xDS 中，nonce 字段是必需的，用于匹配  &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#discoveryrequest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;IncrementalDiscoveryResponse&lt;/code&gt;&lt;/a&gt; 关联的 ACK 或 NACK &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#discoveryrequest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;IncrementalDiscoveryRequest&lt;/code&gt;&lt;/a&gt;。可选地，存在响应消息级别的 system_version_info，但仅用于调试目的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IncrementalDiscoveryRequest&lt;/code&gt; 可在以下 3 种情况下发送：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;xDS 双向 gRPC 流的初始消息。&lt;/li&gt;
&lt;li&gt;作为对先前的 &lt;code&gt;IncrementalDiscoveryResponse&lt;/code&gt; 的 ACK 或 NACK 响应。在这种情况下，&lt;code&gt;response_nonce&lt;/code&gt; 被设置为响应中的 nonce 值。ACK 或 NACK 由可由 &lt;code&gt;error_detail&lt;/code&gt; 字段是否出现来区分。&lt;/li&gt;
&lt;li&gt;客户端自发的 &lt;code&gt;IncrementalDiscoveryRequest&lt;/code&gt;。此场景下可以采用动态添加或删除被跟踪的 &lt;code&gt;resource_names&lt;/code&gt; 集。这种场景下，必须忽略 &lt;code&gt;response_nonce&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在第一个示例中，客户端连接并接收它的第一个更新并 ACK。第二次更新失败，客户端发送 NACK 拒绝更新。xDS客户端后续会自发地请求 “wc” 相关资源。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-incremental-session-example&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/006tNc79ly1fvpgwfbep7j31kw0vldli.jpg&#34; alt=&#34;Incremental session example&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Incremental session example
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在重新连接时，支持增量的 xDS 客户端可能会告诉服务器其已知资源从而避免通过网络重新发送它们。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-incremental-reconnect-example&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/envoy-xds-protocol/006tNc79ly1fvpgx05z3kj31kw0phwif.jpg&#34; alt=&#34;Incremental reconnect example&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Incremental reconnect example
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;rest-json-轮询订阅&#34;&gt;REST-JSON 轮询订阅&lt;/h2&gt;
&lt;p&gt;单个 xDS  API 可对 REST 端点进行的同步（长）轮询。除了无持久流与管理服务器交互外，消息顺序与上述相似。在任何时间点，只存在一个未完成的请求，因此响应消息中的 &lt;code&gt;nonce&lt;/code&gt; 在 REST-JSON 中是可选的。&lt;code&gt;DiscoveryRequest&lt;/code&gt; 和 &lt;code&gt;DiscoveryResponse&lt;/code&gt; 的消息编码遵循 &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3#json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSON 变换 proto3&lt;/a&gt; 规范。ADS 不支持 REST-JSON 轮询。&lt;/p&gt;
&lt;p&gt;当轮询期间设置为较小的值时，则可以等同于长轮询，这时要求避免发送 &lt;code&gt;DiscoveryResponse&lt;/code&gt;，&lt;a href=&#34;#%e4%bd%95%e6%97%b6%e5%8f%91%e9%80%81%e6%9b%b4%e6%96%b0&#34;&gt;除非对请求的资源发生了更改&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
