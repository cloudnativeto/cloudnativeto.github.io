<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/category/%E5%AE%89%E5%85%A8/</link>
      <atom:link href="https://cloudnativecn.com/category/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <description>安全</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 12 Oct 2023 10:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>安全</title>
      <link>https://cloudnativecn.com/category/%E5%AE%89%E5%85%A8/</link>
    </image>
    
    <item>
      <title>构建安全的 Kubernetes 环境：OWASP Kubernetes Top 10</title>
      <link>https://cloudnativecn.com/blog/top-owasp-kubernetes/</link>
      <pubDate>Thu, 12 Oct 2023 10:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/top-owasp-kubernetes/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/featured_hu9327299635551566122.webp 400w,
               /blog/top-owasp-kubernetes/featured_hu18123557252720037019.webp 760w,
               /blog/top-owasp-kubernetes/featured_hu13576013748946566012.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/featured_hu9327299635551566122.webp&#34;
               width=&#34;760&#34;
               height=&#34;419&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文译自：&lt;a href=&#34;https://sysdig.com/blog/top-owasp-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sysdig.com/blog/top-owasp-kubernetes/&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;摘要：OWASP Kubernetes Top 10 强调了 Kubernetes 生态系统中的关键风险和漏洞。它涵盖了诸如准入控制器中的配置错误，密钥管理故障，漏洞管理，身份验证机制失效以及过时和易受攻击的 Kubernetes 组件等主题。建议包括使用像 Falco 这样的工具来检测安全问题，对静态密钥进行加密，解决安全配置问题，确保日志记录和审计，扫描容器镜像以检测漏洞，管理依赖关系，保护对 Kubernetes 的访问以及及时了解 CVE 情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;使用 Kubernetes 时最大的关切之一是是否符合安全态势，并考虑到所有可能的威胁。因此，OWASP 创造了 OWASP Kubernetes Top 10，以帮助识别最可能的风险。&lt;/p&gt;
&lt;p&gt;OWASP Top 10 项目是对安全从业人员和工程师非常有用的认知和指导资源。它们也可以映射到其他安全框架，帮助事件响应工程师了解 Kubernetes 的威胁。MITRE ATT&amp;amp;CK 技术也常用于记录攻击者的技术，并帮助蓝队了解保护环境的最佳方法。此外，我们可以检查 Kubernetes 的威胁模型，了解所有的攻击面和主要的攻击向量。&lt;/p&gt;
&lt;p&gt;OWASP Kubernetes Top 10 将所有可能的风险按照总体普遍性或可能性排序。在这项研究中，我们略微修改了顺序。我们将其中一些风险分组到同一类别中，如配置错误、监控或漏洞。我们还推荐一些工具或技术来审计您的配置，并确保您的安全态势是最合适的。&lt;/p&gt;
&lt;h2 id=&#34;什么是-owasp-kubernetes&#34;&gt;什么是 OWASP Kubernetes？&lt;/h2&gt;
&lt;p&gt;OWASP（Open Web Application Security Project）是一个致力于改善软件安全的非营利基金会。OWASP 侧重于 Web 应用程序安全（故其名称），但随着现代系统设计的特性，它的范围已经扩大。&lt;/p&gt;
&lt;p&gt;随着应用程序开发从传统运行在虚拟机后面的单片架构转向在云基础设施上运行的现代微服务工作负载，重要的是为每个应用程序环境更新安全要求。&lt;/p&gt;
&lt;p&gt;这就是为什么 OWASP 基金会创建了 OWASP Kubernetes Top 10 - 专为 Kubernetes 环境设计的十大最常见攻击向量列表。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-owasp-kubernetes-top-10&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;OWASP Kubernetes Top 10&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-6_hu2142904019479810602.webp 400w,
               /blog/top-owasp-kubernetes/image-6_hu9196092794568531997.webp 760w,
               /blog/top-owasp-kubernetes/image-6_hu15139744934229054069.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-6_hu2142904019479810602.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OWASP Kubernetes Top 10
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在上图中，我们突出显示了 OWASP Kubernetes 中的每个风险影响的组件或部分，映射到一个通用的 Kubernetes 威胁模型以帮助理解。这项分析还深入研究了每个 OWASP 风险，提供了关于为何该威胁突出的技术细节，以及常见的缓解措施。将风险分组成三类并按可能性排序也很有帮助。风险类别包括：&lt;/p&gt;
&lt;h3 id=&#34;配置错误&#34;&gt;配置错误&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;K01:2022 不安全的工作负载配置&lt;/li&gt;
&lt;li&gt;K09:2022 集群组件配置错误&lt;/li&gt;
&lt;li&gt;K03:2022 过于宽松的 RBAC 配置&lt;/li&gt;
&lt;li&gt;K07:2022 缺失网络分割控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺乏可见性&#34;&gt;缺乏可见性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;K05:2022 日志和监控不足&lt;/li&gt;
&lt;li&gt;K04:2022 缺乏集中策略强制执行&lt;/li&gt;
&lt;li&gt;K08:2022 机密管理故障&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;漏洞管理&#34;&gt;漏洞管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;K02:2022 供应链漏洞&lt;/li&gt;
&lt;li&gt;K06:2022 身份验证机制失效&lt;/li&gt;
&lt;li&gt;K10:2022 过时且容易受攻击的 Kubernetes 组件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置错误-1&#34;&gt;配置错误&lt;/h3&gt;
&lt;h3 id=&#34;不安全的工作负载配置&#34;&gt;不安全的工作负载配置&lt;/h3&gt;
&lt;p&gt;安全始终是云服务提供商提供的所有服务的首要考虑因素。像 AWS、GCP 和 Azure 这样的云服务提供商实施了一系列沙盒功能、虚拟防火墙功能以及对底层服务的自动更新，以确保您的业务在任何时间和地点都保持安全。这些措施也减轻了在本地环境中传统安全负担的一些压力。然而，云环境应用了所谓的共享安全模型，这意味着部分责任在云服务的消费者身上，需要在其响应环境中实施这些安全防护措施。责任也会根据云消费模型和提供类型而变化。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-os&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;OS&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-7_hu5545905747657802492.webp 400w,
               /blog/top-owasp-kubernetes/image-7_hu4537260823856199617.webp 760w,
               /blog/top-owasp-kubernetes/image-7_hu12437399693676492043.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-7_hu5545905747657802492.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OS
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;租户的管理员最终必须确保工作负载使用安全镜像，在已打补丁/更新的操作系统（OS）上运行，并确保基础设施配置持续进行审核和补救。云原生工作负载中的配置错误是对敌手获取访问您环境的最常见途径之一。&lt;/p&gt;
&lt;p&gt;操作系统&lt;/p&gt;
&lt;p&gt;容器化工作负载的好处之一是您选择的镜像通常已预先加载了与您的应用程序基础镜像功能相匹配的依赖关系。这些镜像预先打包了一些通用系统库和其他第三方组件，这些组件对于工作负载并非必需。在某些情况下，例如在微服务体系结构（MSA）中，给定的容器镜像可能太臃肿，无法提供性能良好的操作该微服务的容器。&lt;/p&gt;
&lt;p&gt;我们建议在容器化工作负载中使用最小化、精简的镜像，例如文件大小要小得多的 Alpine Linux 镜像。这些轻量级镜像在大多数情况下都非常理想。由于其中打包的组件较少，也就&lt;/p&gt;
&lt;p&gt;减少了被攻击的可能性。如果需要额外的软件包或库，可以考虑从基本的 Alpine 镜像开始，并逐渐添加所需的软件包/库，以保持预期的行为/性能。&lt;/p&gt;
&lt;p&gt;审核工作负载&lt;/p&gt;
&lt;p&gt;CIS Kubernetes Benchmark 可以作为发现配置错误的起点。比如，开源项目 kube-bench 可以使用 YAML 文件设置测试来检查您的集群是否符合 CIS Kubernetes Benchmark。&lt;/p&gt;
&lt;p&gt;示例 CIS Benchmark 控制&lt;/p&gt;
&lt;p&gt;最小化 root 容器的准入（5.2.6）&lt;/p&gt;
&lt;p&gt;Linux 容器工作负载可以作为任何 Linux 用户运行。然而，作为 root 用户运行的容器会增加容器逃逸（特权升级，然后在 Linux 主机中进行侧向移动）的可能性。CIS 基准建议所有容器应作为定义的非 UID 0 用户运行。&lt;/p&gt;
&lt;p&gt;减少 root 容器准入的 Kubernetes 审核工具之一是 kube-admission-webhook。这是一个 Kubernetes 准入控制器 Webhook，允许您验证和变更传入的 Kubernetes API 请求。您可以使用它来强制执行安全策略，例如禁止在您的集群中创建 root 容器。&lt;/p&gt;
&lt;p&gt;如何使用 OPA 防止工作负载配置错误&lt;/p&gt;
&lt;p&gt;诸如 Open Policy Agent（OPA）之类的工具可用作策略引擎，用于检测这些常见的配置错误。OPA 准入控制器为您提供了高级别的声明性语言，以在整个堆栈上编写和强制执行策略。&lt;/p&gt;
&lt;p&gt;假设您想为前面提到的 Alpine 镜像构建一个准入控制器。但是，Kubernetes 的某些用户想将 securityContext 设置为 privileged=true。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;alpine&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;alpine:3.2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/bin/sh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;sleep 60m&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;alpine&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privileged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restartPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Always&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是 Kubernetes 中的一个特权 pod 的示例。在特权模式下运行 pod 意味着该 pod 可以访问主机的资源和内核功能。为了防止特权 pod，OPA Gatekeeper 准入控制器的 .rego 文件应该看起来类似于：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rego&#34; data-lang=&#34;rego&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;kubernetes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;admission&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deny&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;privileged&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Privileged container is not allowed: %v, securityContext: %v&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，输出应该类似于以下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Error from server (Privileged container is not allowed: alpine, securityContext: {&amp;#34;privileged&amp;#34;: true}): error when creating &amp;#34;STDIN&amp;#34;: admission webhook &amp;#34;validating-webhook.openpolicyagent.org&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;集群组件配置错误&#34;&gt;集群组件配置错误&lt;/h3&gt;
&lt;p&gt;核心 Kubernetes 组件中的配置错误比预期的要常见得多。为了防止这种情况，持续和自动审核基础设施即代码（IaC）和 K8s（YAML）清单，而不是手动检查它们，将减少配置错误。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-集群组件配置错误&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;集群组件配置错误&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-9_hu6761344753907931213.webp 400w,
               /blog/top-owasp-kubernetes/image-9_hu5477247115404367049.webp 760w,
               /blog/top-owasp-kubernetes/image-9_hu18138134925745679427.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-9_hu6761344753907931213.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      集群组件配置错误
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最危险的配置错误之一是 Kubelet 中的匿名认证设置，它允许非经过身份验证的请求发送到 Kubelet。强烈建议检查您的 Kubelet 配置，并确保以下标志设置为 false。&lt;/p&gt;
&lt;p&gt;在审核工作负载时，重要的是要记住有多种部署应用程序的方式。使用各种集群组件的配置文件，可以为这些组件授权特定的读取/写入权限。对于 Kubelet，通常情况下，对于 kubelet 的 HTTPS 端点的所有请求，如果没有被其他配置的身份验证方法拒绝，则被视为匿名请求，并被赋予用户名 system:anonymous 和组 system:unauthenticated。&lt;/p&gt;
&lt;p&gt;要禁用这些未经身份验证的请求的匿名访问，只需在启动 kubelet 时使用特性标志 &amp;ndash;anonymous-auth=false。在审核诸如 kubelet 之类的集群组件时，我们可以看到 kubelet 使用与 API 服务器相同的请求属性方法授权 API 请求。因此，我们可以定义权限，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;PATCH&lt;/li&gt;
&lt;li&gt;DELETE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，还有许多其他集群组件需要关注，不仅仅是 kubelet。例如，kubectl 插件以与 kubectl 命令本身相同的权限运行，因此如果插件受到威胁，可能会用于升级权限并访问集群中的敏感资源。&lt;/p&gt;
&lt;p&gt;根据 Kubernetes 的 CIS 基准报告，我们建议为所有集群组件启用以下设置。&lt;/p&gt;
&lt;h3 id=&#34;etcd&#34;&gt;etcd&lt;/h3&gt;
&lt;p&gt;etcd 数据库提供了一个高可用的键值存储，Kubernetes 使用它来集中存储所有集群数据。保持 etcd 安全很重要，因为它存储配置数据以及 K8s Secrets。我们强烈建议定期备份 etcd 数据，以避免数据丢失。&lt;/p&gt;
&lt;p&gt;幸运的是，etcd 支持一个内置的快照功能。可以使用 etcdctl snapshot save 命令从活动集群成员中获取快照。获取快照不会对性能产生影响。以下是将 keyspace 从 $ENDPOINT 服务到文件 snapshotdb 中获取快照的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ETCDCTL_API&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;etcdctl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endpoints&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ENDPOINT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;snapshot&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;save&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;snapshotdb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;kube-apiserver&#34;&gt;kube-apiserver&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/learn-cloud-native/kubernetes-101/kubernetes-api-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes API 服务器&lt;/a&gt; 用于验证和配置 API 对象的数据，包括 pods、services、ReplicationControllers 等。API 服务器提供 REST 操作服务，并提供了集群共享状态的前端，通过它，所有其他组件进行交互。它对集群的运行至关重要，具有极高的价值，因为攻击目标的重要性不可低估。从安全的角度来看，所有连接到 API 服务器的连接、控制平面内的通信以及控制平面与 kubelet 组件之间的通信都应只能通过 TLS 连接进行访问。&lt;/p&gt;
&lt;p&gt;默认情况下，kube-apiserver 的 TLS 是未配置的。如果在 Kube-bench 的结果中标记了这一点，只需在 kube-apiserver 中使用特性标志 &lt;code&gt;--tls-cert-file=[file]&lt;/code&gt; 和 &lt;code&gt;--tls-private-key-file=[file]&lt;/code&gt; 启用 TLS。由于 Kubernetes 集群往往会定期扩展和缩减，我们建议使用 Kubernetes 的 &lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TLS 引导功能&lt;/a&gt;。这允许在 Kubernetes 集群内自动进行证书签名和 TLS 配置，而不是遵循上述手动工作流程。&lt;/p&gt;
&lt;p&gt;定期旋转这些证书也非常重要，特别是对于寿命较长的 Kubernetes 集群。&lt;/p&gt;
&lt;p&gt;幸运的是，在 Kubernetes v.1.8 或更高版本中，有&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#certificate-rotation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自动化工具可以帮助旋转这些证书&lt;/a&gt;。API 服务器请求也应该进行身份验证，我们将在“破碎的身份验证机制”部分中介绍。&lt;/p&gt;
&lt;h3 id=&#34;coredns&#34;&gt;CoreDNS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://coredns.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CoreDNS&lt;/a&gt; 是一种 DNS 服务器技术，可以作为 Kubernetes 集群的 DNS，由&lt;a href=&#34;https://www.cncf.io/projects/coredns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF&lt;/a&gt; 托管。自 Kubernetes 版本 v.1.11 开始，CoreDNS 取代了 kube-dns。在集群内部进行名称解析对于定位 K8s 中的编排和临时工作负载以及固有的服务至关重要。&lt;/p&gt;
&lt;p&gt;CoreDNS 解决了在 kube-dns 中发现的许多安全漏洞，特别是在 dnsmasq（DNS 解析器）中。这个 DNS 解析器负责缓存来自 SkyDNS 的响应，后者负责执行最终的 DNS 解析服务。&lt;/p&gt;
&lt;p&gt;除了解决 kube-dns 中 dnsmasq 功能的安全漏洞之外，CoreDNS 还解决了 SkyDNS 中的性能问题。使用 kube-dns 还涉及到一个旁路代理，用于监控健康状况并处理 DNS 服务的指标报告。&lt;/p&gt;
&lt;p&gt;CoreDNS 通过在一个容器内提供 kube-dns 的所有功能来解决许多与安全和性能相关的问题。然而，它仍然可能会受到威胁。因此，我们建议再次使用 kube-bench 来进行对 CoreDNS 的合规性检查。&lt;/p&gt;
&lt;h2 id=&#34;过于宽松的-rbac-配置&#34;&gt;过于宽松的 RBAC 配置&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/learn-cloud-native/kubernetes-security/kubernetes-rbac/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于角色的访问控制&lt;/a&gt;（RBAC）是一种根据组织内个别用户的角色来调节对计算机或网络资源的访问的方法。RBAC 配置错误可能会允许攻击者提升权限并完全控制整个集群。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-过于宽松的-rbac-配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;过于宽松的 RBAC 配置&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-10_hu7286201794396708531.webp 400w,
               /blog/top-owasp-kubernetes/image-10_hu15768018257361587805.webp 760w,
               /blog/top-owasp-kubernetes/image-10_hu4148070395178759228.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-10_hu7286201794396708531.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      过于宽松的 RBAC 配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;创建 RBAC 规则相当简单。例如，要创建一个宽松策略以允许对 Kubernetes 集群的“default”网络命名空间中的 pods 进行只读的 CRUD 操作（即获取、监视、列举），但阻止对这些 pods 进行创建、更新或删除操作，策略会类似于以下示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# &amp;#34;&amp;#34; 表示核心 API 组&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;pods&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在长期管理这些 RBAC 规则时会出现问题。管理员可能需要管理 &lt;strong&gt;ClusterRole&lt;/strong&gt; 资源，以避免在每个网络命名空间上构建单独的角色，如上所示。ClusterRoles 允许我们为这些工作负载构建集群范围的规则以授予访问权限。&lt;/p&gt;
&lt;p&gt;然后可以使用 RoleBindings 将上述角色绑定到用户。&lt;/p&gt;
&lt;p&gt;与其他身份验证和访问管理（IAM）实践类似，我们需要确保每个用户在 Kubernetes 中对资源具有正确的访问权限，而不会对单个资源授予过多权限。下面的示例清单应该显示了我们建议在 Kubernetes 中将角色绑定到服务帐户或用户。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;read-pods&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nigeldouglas&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过扫描 RBAC 配置错误，我们可以积极加强集群的安全姿态，同时简化授权流程。云原生团队授予权限过多的主要原因之一是由于在生产环境中管理单个 RBAC 策略的复杂性。换句话说，集群内可能有太多用户和角色需要通过手动审查清单代码来进行管理。这就是为什么有专门的工具来处理 RBAC 的管理、审计和合规性检查的原因。&lt;/p&gt;
&lt;h3 id=&#34;审计-rbac&#34;&gt;审计 RBAC&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cyberark/kubernetes-rbac-audit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RBAC 审计&lt;/a&gt; 是由 CyberArk 团队创建的工具。该工具旨在扫描 Kubernetes 集群中存在的 RBAC 中的风险角色，需要 python3。可以通过以下单个命令运行这个 Python 工具：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ExtensiveRoleCheck&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clusterRole&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clusterroles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;role&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Roles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rolebindings&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rolebindings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cluseterolebindings&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clusterrolebindings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出应该类似于：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-11_hu4941965009054631127.webp 400w,
               /blog/top-owasp-kubernetes/image-11_hu378775957678432977.webp 760w,
               /blog/top-owasp-kubernetes/image-11_hu12762578284156023734.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-11_hu4941965009054631127.webp&#34;
               width=&#34;760&#34;
               height=&#34;369&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;kubiscan&#34;&gt;Kubiscan&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cyberark/KubiScan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubiscan&lt;/a&gt; 是由 CyberArk 团队构建的另一个工具。与 RBAC 审计不同，此工具旨在扫描 Kubernetes 集群中的风险权限，而不是 RBAC 角色。同样，此工具需要 Python v.3.6 或更高版本才能运行。&lt;/p&gt;
&lt;p&gt;要查看所有示例，请运行 &lt;code&gt;python3 KubiScan.py -e&lt;/code&gt; 或在容器内运行 &lt;code&gt;kubiscan -e&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-12_hu8728688497567199926.webp 400w,
               /blog/top-owasp-kubernetes/image-12_hu871933539227739379.webp 760w,
               /blog/top-owasp-kubernetes/image-12_hu7434152962823200407.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-12_hu8728688497567199926.webp&#34;
               width=&#34;760&#34;
               height=&#34;442&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;krane&#34;&gt;Krane&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/appvia/krane&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Krane&lt;/a&gt; 是用于 Kubernetes RBAC 的静态分析工具。与 Kubiscan 类似，它识别 K8s RBAC 设计中可能存在的安全风险，并提出了如何缓解这些风险的建议。&lt;/p&gt;
&lt;p&gt;这些工具之间的主要区别在于 Krane 提供了集群当前 RBAC 安全姿态的仪表板，并允许您浏览其定义。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-13_hu17978382652123343830.webp 400w,
               /blog/top-owasp-kubernetes/image-13_hu423811420159027902.webp 760w,
               /blog/top-owasp-kubernetes/image-13_hu2555715229413445608.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-13_hu17978382652123343830.webp&#34;
               width=&#34;760&#34;
               height=&#34;687&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果您想对正在运行的集群运行 RBAC 报告，您必须提供一个 kubectl 上下文，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;krane&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;report&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;&amp;lt;kubectl-context&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您希望在上述树状设计中查看您的 RBAC 设计，并带有网络拓扑图以及最新的报告发现，您需要通过以下命令启动仪表板服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-perl&#34; data-lang=&#34;perl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;krane&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dashboard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nigel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cluster&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; 特性标志指向您环境中的一个集群名称。如果您想要所有集群的仪表板，请从上述命令中删除 &lt;code&gt;-c&lt;/code&gt; 的引用。&lt;/p&gt;
&lt;h2 id=&#34;缺失的网络分割控制&#34;&gt;缺失的网络分割控制&lt;/h2&gt;
&lt;p&gt;Kubernetes 默认定义了所谓的“&lt;a href=&#34;https://en.wikipedia.org/wiki/Flat_network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扁平网络&lt;/a&gt;”设计。&lt;/p&gt;
&lt;p&gt;这允许工作负载在没有任何先前配置的情况下自由相互通信。然而，他们可以在没有任何限制的情况下执行此操作。如果攻击者能够利用正在运行的工作负载，他们实质上将可以访问对集群中所有其他 pod 进行数据外泄。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-14_hu18198929130632180814.webp 400w,
               /blog/top-owasp-kubernetes/image-14_hu17105676802610894625.webp 760w,
               /blog/top-owasp-kubernetes/image-14_hu16288901588638389779.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-14_hu18198929130632180814.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在其组织中专注于零信任架构的集群运营商将希望更仔细地查看 Kubernetes 网络策略，以确保服务得到适当限制。&lt;/p&gt;
&lt;p&gt;Kubernetes 提供了解决正确配置网络分割控制的解决方案。在这里，我们向您展示了其中的两个。&lt;/p&gt;
&lt;h3 id=&#34;使用-istio-的服务网格&#34;&gt;使用 Istio 的服务网格&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/istio/istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 提供了一种服务网格解决方案。这使得安全和网络团队能够管理跨微服务的流量流向，执行策略，并聚合遥测数据，以便对进出微服务的网络流量进行微分割。&lt;/p&gt;
&lt;p&gt;在撰写本文时，该服务依赖于在集群中的每个微服务实现一组旁路代理。然而，Istio 项目计划在今年某个时候&lt;a href=&#34;https://istio.io/latest/blog/2022/introducing-ambient-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;转向无旁路代理方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;旁路技术称为“Envoy”。我们依赖 Envoy 来处理集群内服务之间的入口/出口流量，以及从服务到服务网格架构中的外部服务的流量。使用代理的明显优势在于它们提供了一个安全的微服务网格，提供流量镜像、发现、丰富的第7层流量路由、熔断器、策略执行、遥测记录/报告功能，以及最重要的是，所有通信都自动使用自动证书轮换的 mTLS！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;security.istio.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AuthorizationPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;httpbin&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DENY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;prod&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;To&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述的 &lt;strong&gt;Istio AuthorizationPolicy&lt;/strong&gt; 将所有来自“prod”生产命名空间的请求的动作设置为“DENY”，并将其应用于“default”命名空间中所有工作负载上的“POST”方法。&lt;/p&gt;
&lt;p&gt;这个策略非常有用。与只能在 L3/L4（网络层）基于 IP 地址和端口丢弃流量的 Calico 网络策略不同，授权策略会根据 HTTP/S 动词（如 POST/GET）在 L7（应用层）拒绝流量。这在实施 Web 应用程序防火墙（WAF）时非常重要。&lt;/p&gt;
&lt;p&gt;了解更多关于 &lt;a href=&#34;https://sysdig.com/blog/monitor-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 监控如何帮助您&lt;/a&gt; 保证您的 Istio 服务处于良好状态的信息。&lt;/p&gt;
&lt;h3 id=&#34;cni&#34;&gt;CNI&lt;/h3&gt;
&lt;p&gt;值得注意的是，虽然服务网格有许多优点，比如通过相互 TLS（mTLS）对工作负载之间的流量进行加密以及 HTTP/s 流量控制，但也存在一些管理服务网格的复杂性。在集群中每个工作负载旁边使用旁路代理会给您的集群增加额外的负担，以及在生产环境中遇到问题时解决这些旁路代理会带来不必要的问题。&lt;/p&gt;
&lt;p&gt;许多组织选择默认仅实施容器网络接口（CNI）。正如其名字所示，CNI 是集群的网络接口。像 &lt;a href=&#34;https://github.com/projectcalico&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Calico&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/cilium&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt; 这样的 CNI 都带有自己的策略实施。而 Istio 则在 L7 流量上执行流量控制，CNI 更倾向于关注网络层流量（L3/L4）。&lt;/p&gt;
&lt;p&gt;下面的 &lt;strong&gt;CiliumNetworkPolicy&lt;/strong&gt; 示例将所有带有标签 app=frontend 的端点限制为仅能够在端口 80 上使用 TCP 发送数据包，发送到任何第三层目的地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;l4-rule&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;frontend&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们提到了使用 Istio AuthorizationPolicy 在 L7/应用层提供类似 WAF 的功能。然而，如果对手向 pod/端点发送大量的 TCP/UDP 流量，网络层仍然可能发生&lt;a href=&#34;https://sysdig.com/learn-cloud-native/cloud-security/what-is-a-dos-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分布式拒绝服务&lt;/a&gt;（DDoS）攻击。类似地，它可以用于防止受损的工作负载与已知/恶意的 C2 服务器通信，这些服务器基于固定的 IP 和端口。&lt;/p&gt;
&lt;p&gt;您想深入了解吗？了解有关 &lt;a href=&#34;https://sysdig.com/blog/denial-of-service-kubernetes-calico-falco/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何在 Kubernetes 中使用 Calico 和 Falco 防止 DDoS 攻击&lt;/a&gt; 的更多信息。&lt;/p&gt;
&lt;h2 id=&#34;缺乏可见性-1&#34;&gt;缺乏可见性&lt;/h2&gt;
&lt;h2 id=&#34;日志和监控不足&#34;&gt;日志和监控不足&lt;/h2&gt;
&lt;p&gt;Kubernetes 默认提供了审计日志记录功能。&lt;a href=&#34;https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;审计日志记录&lt;/a&gt;以时间顺序显示各种与安全相关的事件。这些活动可能是由用户、使用 Kubernetes API 的应用程序或控制平面本身生成的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-15_hu14736028114922933073.webp 400w,
               /blog/top-owasp-kubernetes/image-15_hu15723876776483556125.webp 760w,
               /blog/top-owasp-kubernetes/image-15_hu6004146592057947405.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-15_hu14736028114922933073.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;然而，还有其他日志来源需要关注——不仅限于 Kubernetes 审计日志。它们可以包括特定于主机的操作系统日志、网络活动日志（如 DNS，您可以&lt;a href=&#34;https://sysdig.com/blog/how-to-monitor-coredns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;监视 Kubernetes 附加组件 CoreDNS&lt;/a&gt;），以及还充当 Kubernetes 云基础的云提供商。&lt;/p&gt;
&lt;p&gt;如果没有一个集中的工具来存储所有这些零星的日志来源，我们在发生违规案例时会很难使用它们。这就是像 Prometheus、Grafana 和 Falco 这样的工具有用的地方。&lt;/p&gt;
&lt;h3 id=&#34;prometheus&#34;&gt;Prometheus&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prometheus/prometheus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus&lt;/a&gt; 是一个开源、社区驱动的项目，用于监控现代云原生应用程序和 Kubernetes。它是 CNCF 的一员，并拥有活跃的开发者和用户社区。&lt;/p&gt;
&lt;h3 id=&#34;grafana&#34;&gt;Grafana&lt;/h3&gt;
&lt;p&gt;与 Prometheus 类似，&lt;a href=&#34;https://github.com/grafana/grafana&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana&lt;/a&gt; 是一个拥有庞大社区支持的开源工具。Grafana 允许您查询、可视化、警报和理解您的指标，无论它们存储在何处。用户可以创建、探索并与团队共享仪表板。&lt;/p&gt;
&lt;h3 id=&#34;falco运行时检测&#34;&gt;Falco（运行时检测）&lt;/h3&gt;
&lt;p&gt;Falco 是一个云原生的运行时安全项目，是 Kubernetes 威胁检测的事实标准。Falco 通过观察您的应用程序和容器的行为在运行时检测威胁。Falco 通过 Falco 插件将威胁检测扩展到云环境中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-16_hu5495511516713423706.webp 400w,
               /blog/top-owasp-kubernetes/image-16_hu5064005132418412947.webp 760w,
               /blog/top-owasp-kubernetes/image-16_hu3715399857915859319.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-16_hu5495511516713423706.webp&#34;
               width=&#34;760&#34;
               height=&#34;278&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Falco 是第一个作为 CNCF 孵化级项目加入的运行时安全项目。Falco 充当安全摄像头，实时检测所有 Kubernetes 环境中的意外行为、入侵和数据盗窃。Falco v.0.13 添加了对 &lt;a href=&#34;https://falco.org/docs/event-sources/kubernetes-audit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 审计事件&lt;/a&gt; 的支持，这是对对系统调用事件的现有支持的补充。Kubernetes v1.11 引入了审计事件的改进实现，并提供了对 kube-apiserver 请求和响应的日志记录。&lt;/p&gt;
&lt;p&gt;由于几乎所有的集群管理任务都是通过 API 服务器执行的，审计日志可以有效地跟踪对集群所做的更改。&lt;/p&gt;
&lt;p&gt;示例包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建和销毁 pod、服务、部署、守护进程等。&lt;/li&gt;
&lt;li&gt;创建、更新和删除 ConfigMap 或 secrets。&lt;/li&gt;
&lt;li&gt;订阅对任何端点所做的更改。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缺乏集中策略执行&#34;&gt;缺乏集中策略执行&lt;/h2&gt;
&lt;p&gt;在需要跨多个集群和多云环境执行规则时，强制执行安全策略变得困难。默认情况下，安全团队需要分别在每个异构环境中管理风险。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-17_hu3928855984775237755.webp 400w,
               /blog/top-owasp-kubernetes/image-17_hu3229263816694064075.webp 760w,
               /blog/top-owasp-kubernetes/image-17_hu10899801049734629022.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-17_hu3928855984775237755.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;没有默认的方法可以从集中位置检测、纠正和防止配置错误，这意味着集群可能会潜在地面临威胁。&lt;/p&gt;
&lt;h3 id=&#34;准入控制器&#34;&gt;准入控制器&lt;/h3&gt;
&lt;p&gt;一个&lt;a href=&#34;https://sysdig.com/blog/kubernetes-admission-controllers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;准入控制器&lt;/a&gt;会在请求持久化到 Kubernetes API 服务器之前拦截它。请求必须先经过身份验证和授权，然后才能决定是否允许执行该请求。例如，您可以创建以下准入控制器配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;AdmissionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;plugins&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ImagePolicyWebhook&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;imagePolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubeConfigFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;path-to-kubeconfig-file&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowTTL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;denyTTL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retryBackoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultAllow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ImagePolicyWebhook 配置引用了一个 kubeconfig 格式的文件，该文件设置了与后端的连接。此准入控制器的目的是确保后端通过 TLS 进行通信。&lt;/p&gt;
&lt;p&gt;allowTTL: 50 设置了以秒为单位缓存批准的时间，同样，denyTTL: 50 设置了以秒为单位缓存拒绝的时间。准入控制器可以用于限制创建、删除、修改对象或连接到代理的请求。&lt;/p&gt;
&lt;p&gt;不幸的是，AdmissionConfiguration 资源仍然需要在每个集群中单独管理。如果我们忘记在其中一个集群上应用此文件，它将失去此策略条件。幸运的是，像 Open Policy Agent（OPA）的 &lt;a href=&#34;https://github.com/open-policy-agent/kube-mgmt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kube-Mgmt&lt;/a&gt; 工具可以帮助在 Kubernetes 中管理 OPA 实例的策略和数据，而不是单独管理准入控制器。&lt;/p&gt;
&lt;p&gt;kube-mgmt 工具会自动发现存储在 Kubernetes 中 ConfigMaps 中的策略和 JSON 数据，并将它们加载到 OPA 中。可以使用特性标志 &lt;code&gt;--enable-policy=false&lt;/code&gt; 禁用策略，或者同样可以通过单个标志禁用数据：&lt;code&gt;--enable-data=false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;准入控制是执行需要 Kubernetes 上下文的策略的容器安全策略的重要组成部分，它为您的集群创建了最后一道防线。我们稍后会提及图像扫描，但请知道 &lt;a href=&#34;https://sysdig.com/blog/image-scanning-admission-controller/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;也可以通过 Kubernetes 准入控制器来强制执行图像扫描。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;运行时检测&#34;&gt;运行时检测&lt;/h3&gt;
&lt;p&gt;如果它们镜像相同的配置，我们需要将安全策略配置的部署标准化到所有集群中。在根本不同的集群配置的情况下，它们可能需要设计独特的安全策略。无论哪种情况，我们如何知道在每个集群环境中部署了哪些安全策略？这就是 Falco 发挥作用的地方。&lt;/p&gt;
&lt;p&gt;假设集群没有使用 kube-mgmt，并且没有集中的方式来管理这些准入控制器。用户意外地创建了一个在 ConfigMap 清单中公开了私密凭据的 ConfigMap。不幸的是，新创建的集群中未配置任何准入控制器来阻止此行为。在单个规则中，当发生此行为时，Falco 可以向管理员发出警报：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Create/Modify Configmap With Private Credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    Detect creating/modifying a configmap containing a private credential&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kevt and configmap and kmodify and contains_private_credentials&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    K8s configmap with private credential (user=%ka.user.name verb=%ka.verb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    configmap=%ka.req.configmap.name namespace=%ka.target.namespace)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;warning&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;k8s_audit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;configmaps&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ka.target.namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ka.req.configmap.name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在上述 Falco 规则中，我们使用 Kubernetes 审计日志来显示在任何 Namespace 中可能在 ConfigMaps 中暴露的私密凭据的示例。将私密凭据定义为以下任何条件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;condition: (ka.req.configmap.obj contains &amp;#34;aws_access_key_id&amp;#34; or
ka.req.configmap.obj contains &amp;#34;aws-access-key-id&amp;#34; or
ka.req.configmap.obj contains &amp;#34;aws_s3_access_key_id&amp;#34; or
ka.req.configmap.obj contains &amp;#34;aws-s3-access-key-id&amp;#34; or
ka.req.configmap.obj contains &amp;#34;password&amp;#34; or
ka.req.configmap.obj contains &amp;#34;passphrase&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;机密管理失败&#34;&gt;机密管理失败&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Secret&lt;/a&gt; 是一个旨在保存敏感数据（如密码或令牌）的对象。为了避免将这类敏感数据放在您的应用程序代码中，我们可以在 Pod 规范中简单地引用 K8s 密钥。这使得工程师们可以避免直接在 Pod 清单或容器镜像中硬编码凭据和敏感数据。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-18_hu8823850405471242178.webp 400w,
               /blog/top-owasp-kubernetes/image-18_hu16933755264728629648.webp 760w,
               /blog/top-owasp-kubernetes/image-18_hu7464320197065083680.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-18_hu8823850405471242178.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;尽管存在这种设计，K8s Secrets 仍然可能会受到威胁。本地 K8s 密钥机制实质上是一个抽象层 - 数据仍然存储在前述的 etcd 数据库中，从而构建了一种完整的安全性。因此，对于企业来说，评&lt;/p&gt;
&lt;h3 id=&#34;在静态环境中加密秘密&#34;&gt;在静态环境中加密秘密&lt;/h3&gt;
&lt;p&gt;Kubernetes 使用的 etcd 数据库存在一个主要弱点，即它包含通过 Kubernetes API 可访问的所有数据，因此可能允许攻击者更长时间地查看秘密信息。这就是为什么在静态环境中加密秘密信息非常重要的原因。&lt;/p&gt;
&lt;p&gt;从版本 v.1.7 开始，&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 支持在静态环境中加密&lt;/a&gt;。此选项将在 etcd 中加密 Secret 资源，防止获取 etcd 备份访问权限的方当查看这些秘密内容。虽然此功能目前处于测试阶段并且默认情况下未启用，但在备份未加密或攻击者获得对 etcd 的读取权限时，它提供了额外的防御层。&lt;/p&gt;
&lt;p&gt;以下是创建 EncryptionConfiguration 自定义资源的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apiserver.config.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EncryptionConfiguration&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;providers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;aescbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;BASE 64 ENCODED SECRET&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;identity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解决安全配置错误&#34;&gt;解决安全配置错误&lt;/h3&gt;
&lt;p&gt;除了确保秘密在静态环境中加密之外，我们还需要防止秘密落入错误的手中。我们讨论了漏洞管理、镜像扫描和网络策略强制执行如何保护应用程序免受威胁。然而，为了防止秘密（敏感凭据）泄漏，我们应该尽可能地锁定 RBAC。&lt;/p&gt;
&lt;p&gt;将所有服务账户和用户访问权限保持在&lt;a href=&#34;https://sysdig.com/blog/cspm-least-privilege-principle/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最小特权&lt;/a&gt;水平。不应该出现用户“共享凭据”的情况 - 本质上使用诸如“admin”或“default”之类的服务账户。每个用户都应该有明确定义的服务账户名称，例如‘Nigel’，‘William’或‘Douglas’。在这种情况下，如果服务账户执行了不应该执行的操作，我们可以轻松审计账户活动和/或审计集群中安装的第三方插件和软件的 RBAC 配置，以确保对像‘Nigel’这样的用户不必要地授予对 Kubernetes 秘密的完全提升的管理员权限。&lt;/p&gt;
&lt;p&gt;在下面的场景中，我们将创建一个用于授予对“test”命名空间中的秘密进行读取访问权限的 ClusterRole。在这种情况下，分配给此集群角色的用户将无法访问此奇异特定命名空间之外的秘密。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterRole&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;secret-reader&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;secrets&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;确保已部署日志记录和审计&#34;&gt;确保已部署日志记录和审计&lt;/h3&gt;
&lt;p&gt;应用程序日志帮助开发人员和安全团队更好地了解应用程序内部发生了什么。对于开发人员来说，主要用例是帮助调试影响其应用程序性能的问题。在许多情况下，日志会被发送到监控解决方案（如 Grafana 或 Prometheus）中，以改进响应群集事件（例如可用性或性能问题）的时间。大多数现代应用程序，包括容器引擎，在默认情况下都支持某种日志记录机制。&lt;/p&gt;
&lt;p&gt;容器化应用程序最容易且最常采用的日志记录方法是写入标准输出（&lt;em&gt;stdout&lt;/em&gt;）和标准错误流。在以下针对&lt;a href=&#34;https://falco.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Falco&lt;/a&gt;的示例中，每个警报都会打印一行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;stdout_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了识别由事件引发的潜在安全问题，Kubernetes 管理员可以简单地将事件数据（如云审计日志或一般主机系统调用）流式传输到 Falco 威胁检测引擎中。&lt;/p&gt;
&lt;p&gt;通过将来自 Falco 安全引擎的标准输出（&lt;em&gt;stdout&lt;/em&gt;）流式传输到&lt;a href=&#34;https://www.fluentd.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fluentd&lt;/a&gt;或&lt;a href=&#34;https://www.elastic.co/logstash/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Logstash&lt;/a&gt;，平台工程或安全运维等其他团队可以轻松从云和容器环境中捕获事件数据。组织可以将更有用的安全信号存储在&lt;a href=&#34;https://www.elastic.co/elasticsearch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Elasticsearch&lt;/a&gt;或其他 SIEM 解决方案中，而不仅仅是在原始事件数据中。&lt;/p&gt;
&lt;p&gt;还可以创建仪表板以可视化安全事件并向警报应急响应团队发出警报：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;10:20:22.408091526: File created below /dev by untrusted program &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;nigel.douglas &lt;span class=&#34;nv&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;%proc.cmdline &lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;%fd.name&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;漏洞管理-1&#34;&gt;漏洞管理&lt;/h2&gt;
&lt;h2 id=&#34;供应链漏洞&#34;&gt;供应链漏洞&lt;/h2&gt;
&lt;p&gt;在详述由配置错误引起的四个风险之后，我们现在将详细说明与漏洞相关的风险。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-19_hu8346265231039605437.webp 400w,
               /blog/top-owasp-kubernetes/image-19_hu14030505342138343015.webp 760w,
               /blog/top-owasp-kubernetes/image-19_hu8040696722300068285.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-19_hu8346265231039605437.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/blog/software-supply-chain-security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;供应链攻击&lt;/a&gt;正在上升，就像&lt;a href=&#34;https://www.sans.org/blog/what-you-need-to-know-about-the-solarwinds-supply-chain-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;太阳风暴&lt;/a&gt;事件所示。太阳风暴软件解决方案 &amp;lsquo;Orion&amp;rsquo; 受到了俄罗斯威胁组织&lt;a href=&#34;https://attack.mitre.org/groups/G0016/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;APT29&lt;/a&gt;（通常称为 Cozy Bear）的威胁。这是一次持续很长时间的&lt;a href=&#34;https://en.wikipedia.org/wiki/Zero-day_%28computing%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零日&lt;/a&gt;攻击，这意味着在其环境中运行 Orion 的太阳风暴客户不知道受到了威胁。APT29 的对手可能通过这种太阳风暴漏洞访问非隔离的 Orion 实例。&lt;/p&gt;
&lt;p&gt;太阳风暴只是企业安全堆栈中受到威胁解决方案的一个例子。在 Kubernetes 的情况下，单个容器化工作负载可能依赖于数百个第三方组件和依赖项，使得在每个阶段信任来源变得极其困难。这些挑战包括但不限于图像完整性、图像组成和已知的软件漏洞。&lt;/p&gt;
&lt;p&gt;让我们更深入地了解每个方面。&lt;/p&gt;
&lt;h3 id=&#34;镜像&#34;&gt;镜像&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wr4gpKBO3ug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器镜像&lt;/a&gt;代表了封装了应用程序及其所有软件依赖项的二进制数据。容器镜像是可执行的软件包，可以独立运行（一旦实例化为运行中的容器）并对其运行时环境做出非常明确的假设。&lt;/p&gt;
&lt;p&gt;Sysdig 威胁研究团队对超过 250,000 个 Linux 镜像进行了&lt;a href=&#34;https://sysdig.com/blog/analysis-of-supply-chain-attacks-through-public-docker-images/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分析&lt;/a&gt;，以了解在 Docker Hub 上的容器镜像中隐藏着哪些恶意载荷。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-20_hu4413675455539647337.webp 400w,
               /blog/top-owasp-kubernetes/image-20_hu16693916457920977794.webp 760w,
               /blog/top-owasp-kubernetes/image-20_hu9734796605834527631.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-20_hu4413675455539647337.webp&#34;
               width=&#34;682&#34;
               height=&#34;524&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Sysdig TRT 根据几个类别收集了恶意镜像，如上所示。分析重点放在两个主要类别上：恶意 IP 地址或域名以及机密信息。这两者都对下载和部署在公共注册表（如 Docker Hub）中可用的镜像的人构成威胁，使其环境面临较高风险。&lt;/p&gt;
&lt;p&gt;可以在&lt;a href=&#34;https://sysdig.com/blog/image-scanning-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12 个镜像扫描最佳实践&lt;/a&gt;的研究中找到有关图像扫描的其他指导。无论您是刚开始在生产环境中运行容器和 Kubernetes，还是想要在当前的 DevOps 工作流程中嵌入更多安全性，都可以使用此建议。&lt;/p&gt;
&lt;h3 id=&#34;依赖关系&#34;&gt;依赖关系&lt;/h3&gt;
&lt;p&gt;当您的集群中有大量资源时，您可能会很容易失去了解它们之间所有关系的能力。即使是“小”集群也可能由于容器化和编排而拥有比预期更多的服务。在管理分布式团队跨多集群或多云环境时，跟踪所有服务、资源和依赖关系会更具挑战性。&lt;/p&gt;
&lt;p&gt;Kubernetes 默认情况下不提供可视化显示部署、服务、持久卷索赔（PVC）等之间依赖关系的机制。&lt;a href=&#34;https://github.com/benc-uk/kubeview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeView&lt;/a&gt;是一个出色的开源工具，用于查看和审计集群内部的依赖关系。它绘制了 API 对象及其相互连接的方式。数据实时从 Kubernetes API 中获取。某些对象（Pods、ReplicaSets、部署）的状态以红/绿色进行编码，以表示它们的状态和健康状况。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34;
           src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-21.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;注册表&#34;&gt;注册表&lt;/h3&gt;
&lt;p&gt;注册表是一个无状态、可扩展的服务器端应用程序，用于存储和分发容器镜像。&lt;/p&gt;
&lt;p&gt;实现镜像的 Kubernetes 资源（如 pod、部署等）将使用 imagePull 密钥来保存身份验证所需的凭据，以便对各种镜像注册表进行身份验证。与我们在本节讨论的许多问题一样，在标准的 Kubernetes 部署中，没有固有的方式来扫描镜像以检测漏洞。&lt;/p&gt;
&lt;p&gt;但即使在专用的私有镜像注册表上，您也应该扫描镜像以检测漏洞。但 Kubernetes 默认情况下不提供此功能。您应该在用于构建它们的 CI/CD 流水线中扫描镜像，作为一种“向左移动”的安全方法的一部分。有关更多详细信息，请参阅研究[“向左移动：开发者驱动的安全”](&lt;a href=&#34;https://sysdig.com/blog/strengthen-cybersecurity-with-shift-left-and-shield-right-practices/#:~:text=your&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sysdig.com/blog/strengthen-cybersecurity-with-shift-left-and-shield-right-practices/#:~:text=your&lt;/a&gt; cybersecurity strategy.-,Shift left%3A Developer-driven security,-An exploitable vulnerability)。&lt;/p&gt;
&lt;p&gt;Sysdig 提供了有关如何在常见的 CI/CD 服务中执行此操作的详细技术指导和示例，为防止流水线中的漏洞提供了另一层安全：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/image-scanning-github-actions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/gitlab-ci-cd-image-scanning/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitlab pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/container-image-scanning-for-azure-pipelines-with-sysdig/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/docker-scanning-jenkins/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以添加的另一层安全措施是对发送到我们的注册表或仓库中的镜像进行&lt;a href=&#34;https://sysdig.com/blog/secure-kubernetes-deployment-signature-verification/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;签名和验证&lt;/a&gt;的过程。这通过确保真实性和完整性来减少供应链攻击。它保护了我们的 Kubernetes 开发和部署，并提供了更好的控制，以便随时运行我们正在运行的容器的清单。&lt;/p&gt;
&lt;h2 id=&#34;破损的认证机制&#34;&gt;破损的认证机制&lt;/h2&gt;
&lt;p&gt;安全地访问您的 Kubernetes 集群应该是一项优先任务，而在 Kubernetes 中进行适当的身份验证对于避免在初始攻击阶段面临大多数威胁至关重要。K8s 管理员可以直接通过 K8s API 或通过 K8s 仪表板与集群交互。从技术上讲，K8s 仪表板反过来会与这些 API 进行通信，例如 API 服务器或 Kubelet API。普遍强制执行身份验证是一项关键的安全最佳实践。&lt;/p&gt;
&lt;p&gt;正如&lt;a href=&#34;https://sysdig.com/blog/detecting-cryptomining-attacks-in-the-wild/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019 年特斯拉加密挖矿事件&lt;/a&gt;所示，攻击者渗透了未受密码保护的 Kubernetes 仪表板。由于 Kubernetes 是高度可配置的，许多组件最终未被启用，或者使用基本身份验证以便在许多不同的环境中工作。这在集群和云安全姿态方面存在挑战。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-22_hu16477947105362839112.webp 400w,
               /blog/top-owasp-kubernetes/image-22_hu17816043117190300941.webp 760w,
               /blog/top-owasp-kubernetes/image-22_hu16086173385478840105.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-22_hu16477947105362839112.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果一个人想要对我们的集群进行身份验证，主要关注的区域将是凭证管理。最可能的情况是它们会因偶然错误而暴露，例如在 &lt;em&gt;.kubeconfig&lt;/em&gt; 等配置文件中泄露。&lt;/p&gt;
&lt;p&gt;在您的 Kubernetes 集群内部，服务和机器之间的&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;身份验证&lt;/a&gt;基于服务账户。避免使用证书进行最终用户身份验证或集群外部的服务账户令牌是很重要的，因为这会增加风险。因此，建议定期扫描可能因错误而暴露的密钥或证书。&lt;/p&gt;
&lt;p&gt;OWASP 建议，无论选择哪种身份验证机制，&lt;strong&gt;我们都应该强制人们提供第二种身份验证方法&lt;/strong&gt;。例如，如果您使用云 IAM 功能而未启用 2FA，我们应该能够在运行时在您的云或 Kubernetes 环境中检测它，以加快检测和响应速度。为此，我们可以使用&lt;a href=&#34;https://falco.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Falco&lt;/a&gt;，这是一个开源的威胁检测引擎，它根据一组 YAML 格式的规则在运行时触发警报。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- &lt;span class=&#34;nt&#34;&gt;rule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Console Login Without Multi Factor Authentication&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;desc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Detects a console login without using MFA.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;condition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    aws.eventName=&amp;#34;ConsoleLogin&amp;#34; and not aws.errorCode exists and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    jevt.value[/userIdentity/type]!=&amp;#34;AssumedRole&amp;#34; and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    jevt.value[/responseElements/ConsoleLogin]=&amp;#34;Success&amp;#34; and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    jevt.value[/additionalEventData/MFAUsed]=&amp;#34;No&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    Detected a console login without MFA (requesting user=%aws.user, requesting
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;    IP=%aws.sourceIP, AWS region=%aws.region)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;priority&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;critical&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;aws_cloudtrail&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;exceptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;过时和易受攻击的-kubernetes-组件&#34;&gt;过时和易受攻击的 Kubernetes 组件&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中进行有效的漏洞管理是困难的。然而，有一组&lt;a href=&#34;https://sysdig.com/blog/vulnerability-assessment/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最佳实践要遵循&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/top-owasp-kubernetes/image-23_hu5394068222404145939.webp 400w,
               /blog/top-owasp-kubernetes/image-23_hu2196907190618560174.webp 760w,
               /blog/top-owasp-kubernetes/image-23_hu17450338920585436053.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/top-owasp-kubernetes/image-23_hu5394068222404145939.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kubernetes 管理员必须遵循最新的 CVE 数据库，监视漏洞披露，并在适用的情况下应用相关的补丁。否则，Kubernetes 集群可能会受到这些已知漏洞的影响，使得攻击者更容易执行技术以完全控制您的基础设施，并有可能向您部署集群的云租户进行攻击。&lt;/p&gt;
&lt;p&gt;Kubernetes 中开源组件的大量存在，以及项目发布的节奏，使得 CVE 管理特别困难。在版本&lt;a href=&#34;https://sysdig.com/blog/kubernetes-1-25-whats-new/#3203&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.25 的 Kubernetes&lt;/a&gt;中，推出了一个新的安全 Feed 到 Alpha 阶段，其中对影响 Kubernetes 组件的 CVE 列表进行了分组和更新，详见&lt;a href=&#34;https://kubernetes.io/docs/reference/issues-security/official-cve-feed/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;（官方 CVE Feed）&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下是一些著名的漏洞：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/cve-2021-25735-kubernetes-admission-bypass/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2021-25735&lt;/a&gt; – Kubernetes 验证入场网络钩子绕过&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/detect-cve-2020-8554-using-falco/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-8554&lt;/a&gt; – Kubernetes 中未修补的中间人攻击（MITM）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/how-to-detect-kubernetes-vulnerability-cve-2019-11246-using-falco/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2019-11246&lt;/a&gt; – 影响 kubectl 工具的高严重性漏洞。如果利用，可能导致目录遍历。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/blog/privilege-escalation-kubernetes-dashboard/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2018-18264&lt;/a&gt; – 通过 Kubernetes 仪表板进行特权升级&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要检测这些易受攻击的组件，您应该使用检查或扫描 Kubernetes 集群的工具，例如 &lt;a href=&#34;https://github.com/kubescape/kubescape&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubescape&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/openclarity/kubeclarity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubeclarity&lt;/a&gt; – 或者考虑使用商业平台，例如 &lt;a href=&#34;https://sysdig.com/products/secure/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sysdig Secure&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;今天，发布的漏洞直接针对 Linux Kernel，影响运行在我们集群上的容器，而不是 Kubernetes 组件本身。即便如此，我们必须密切关注每一个新发现的漏洞，并制定尽快减轻风险的计划。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;OWASP Kubernetes 前 10 名旨在帮助安全从业者、系统管理员和软件开发人员在 Kubernetes 生态系统周围优先考虑风险。前 10 名是一个根据从不同成熟度和复杂性的组织收集的数据支持的常见风险的优先级排序列表。&lt;/p&gt;
&lt;p&gt;我们涵盖了许多可以帮助解决 OWASP Kubernetes 前 10 名中概述的差距的开源项目。然而，部署和操作这些零散的工具需要大量的人力和广泛的技能集来进行有效的管理。虽然没有单一的解决方案可以解决上述所有功能，但 Sysdig Secure 提供了一种统一的平台方法，用于检测和防止在构建、交付和运行时出现的威胁。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检测镜像、容器注册表或 Kubernetes 依赖项中已知的漏洞。&lt;/li&gt;
&lt;li&gt;在 Sysdig Secure 平台中集成了 Kubernetes 入场控制器，用户可以接受或阻止容器工作负载中的易受攻击的部分进入运行时。&lt;/li&gt;
&lt;li&gt;通过自动生成网络策略来自动修复与网络相关的威胁。&lt;/li&gt;
&lt;li&gt;最后，通过一个托管的 Prometheus 实例提供了对所有集群活动的深度可见性。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>什么是 CNAPP（容器化应用保护平台）?</title>
      <link>https://cloudnativecn.com/blog/what-is-cnapp/</link>
      <pubDate>Thu, 06 Jul 2023 11:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/what-is-cnapp/</guid>
      <description>&lt;p&gt;译者注：本文译自 Sysdig 公司的网站，Sysdig 是一家提供容器安全、监控和故障排除解决方案的公司，其产品帮助用户在容器化环境中实现可观测性和安全性。这篇文章介绍了 CNAPP，CNAPP 是一个端到端的云安全解决方案，可提供实时威胁检测、简化符合性、改善 DevOps 协作、操作效率等多种好处。它通过整合安全控件、提供集中式管理和运行时洞察力等方式，增强组织的整体安全姿态。&lt;/p&gt;
&lt;h2 id=&#34;总览&#34;&gt;总览&lt;/h2&gt;
&lt;p&gt;CNAPP（容器化应用程序保护平台）是一种综合性的、全方位的安全策略，贯穿整个应用程序的生命周期（SDLC）。随着云计算的快速普及和现代应用程序的日益复杂，传统的安全措施往往无法有效地保护免受复杂的网络威胁。&lt;/p&gt;
&lt;p&gt;CNAPP 结合了“向左倾斜”和“向右防御”安全概念，提供了全面和强大的安全策略，确保了应用程序在整个生命周期中的保护。&lt;/p&gt;
&lt;p&gt;通过将安全向左移动，组织可以利用从应用程序开发过程的最开始阶段就开始的安全控制、漏洞扫描和合规性检查。&lt;/p&gt;
&lt;p&gt;“向右防御”概念侧重于在应用程序运行时阶段实时检测和响应安全事件。尽管在开发过程中尽最大努力保护应用程序，但漏洞可能仍然存在，或者新的威胁可能出现，因此 CNAPP 必须采用并简化这两个概念。&lt;/p&gt;
&lt;h2 id=&#34;cnapp-解决方案的关键特征是什么&#34;&gt;CNAPP 解决方案的关键特征是什么？&lt;/h2&gt;
&lt;p&gt;CNAPP 提供的安全功能涵盖软件供应链的许多阶段，确保了在开发和运营生命周期中的全面保护。Gartner 将这些功能分为四个主要类别。&lt;/p&gt;
&lt;h3 id=&#34;构件扫描&#34;&gt;构件扫描&lt;/h3&gt;
&lt;p&gt;构件扫描是支持向左安全方法的关键 CNAPP 组件之一。向左移动风险可见性和扫描需要与开发组织使用的开发管道工具集成。&lt;/p&gt;
&lt;p&gt;构件扫描有两个主要领域，无论构件是源代码还是已编译的二进制文件。它们是软件组成分析（SCA）和应用程序安全测试。&lt;/p&gt;
&lt;p&gt;SCA 评估构件以查找它所包含的任何开放源代码库。然后，它标记所使用的库的版本和许可证。有了这些信息，它可以列出任何常见漏洞和曝光（CVE）及其评级，并将其作为报告或元数据附加到存储库中该构件的附加信息。&lt;/p&gt;
&lt;p&gt;应用程序安全测试分为三个主要分组：静态（SAST）、动态（DAST）和交互式（IAST）。SAST 查看源代码或已构建的构件，寻找代码中可以发现的最佳实践和常见错误，例如未经检查的缓冲区。DAST 将构件视为黑盒子，运行时对其进行探测。它像攻击者一样戳它，寻找诸如输入验证或未安全页面之类的内容。IAST 在应用程序运行时内部工作，但仅分析应用程序代码的执行方式。它最常在 QA 团队运行功能测试的环境中看到。&lt;/p&gt;
&lt;h3 id=&#34;云配置&#34;&gt;云配置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;云安全姿态管理（CSPM）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSPM 是持续监控、检测和纠正云安全配置不正确以确保云基础架构正确配置和锁定的过程。它验证正在运行的内容，并对任何与其预期的不匹配的内容发出警报。例如，开放的端口或拥有比所需权限更多访问权限的安全角色。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云基础架构权限管理（CIEM）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CIEM 是管理单个或多云环境中的身份标识的访问权、权限或特权的安全过程。此过程有助于识别和避免由权限高于或广泛于应有权限而产生的风险。&lt;/p&gt;
&lt;p&gt;CIEM 安全涵盖的问题示例包括未吊销长期未使用的凭据或向 EC2 实例授予不需要的通配符权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础架构即代码（IaC）扫描&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生生态系统的一个重要吸引力是自动化应用程序运行所需的一切。IaC 可以是 CloudFormation 模板、Kubernetes 清单、Docker 文件或 Terraform 计划等。IaC 扫描的想法是在它们进入生产环境之前发现明显的安全漏洞并防止它们发生问题。&lt;/p&gt;
&lt;p&gt;IaC 扫描解决方案应包括以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;防止漂移：在部署之前扫描 IaC 文件。将生产中的误配置映射回源。&lt;/li&gt;
&lt;li&gt;优先风险：根据应用程序上下文、要求和依赖关系优先处理安全修复。&lt;/li&gt;
&lt;li&gt;在源处修正：接收源处的修复建议，自动生成拉取请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行时保护&#34;&gt;运行时保护&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;云工作负载保护（CWPP）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是 CNAPP 安全套件的运行时执行部分。它支持实现零信任模型，其中没有任何内容自动信任。&lt;/p&gt;
&lt;p&gt;它将执行以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行时检测：在容器运行时检测和防止可疑行为。自动化容器威胁响应。&lt;/li&gt;
&lt;li&gt;系统硬化：通过使用限制性配置减少其漏洞表面，保护在主机上运行的 Linux 主机或基于 VM 的工作负载。&lt;/li&gt;
&lt;li&gt;漏洞管理：在容器映像中（CI/CD 流水线）和注册表中检测容器映像中的漏洞。&lt;/li&gt;
&lt;li&gt;网络安全：强制执行 Kubernetes 原生网络策略，包括分段，并向下提供网络流量可视化到容器级别。&lt;/li&gt;
&lt;li&gt;合规性：验证容器合规性并确保在容器内进行文件完整性监视。&lt;/li&gt;
&lt;li&gt;事件响应：为 Kubernetes 和其管理的容器提供取证分析和事件响应，即使容器已消失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;近期 Gartner 强调了运行时安全的重要性，并指出“支持提供多种运行时可见性技术的 CNAPP 供应商，包括传统代理、&lt;a href=&#34;https://sysdig.com/blog/sysdig-and-falco-now-powered-by-ebpf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扩展的伯克利数据包过滤器（eBPF）支持&lt;/a&gt;、快照、特权容器和 Kubernetes（K8s）集成，以提供最大的部署灵活性。”&lt;/p&gt;
&lt;h3 id=&#34;云检测和响应cdr&#34;&gt;云检测和响应（CDR）&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://sysdig.com/learn-cloud-native/detection-and-response/cdr-an-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云检测和响应（CDR）&lt;/a&gt;在 CNAPP 中发挥关键作用，为云环境专门设计高级威胁检测、事件响应和持续监控能力。CNAPP 中的 CDR 利用云本地安全控制（如云工作负载保护平台（CWPP）和云安全姿态管理（CSPM）工具）实时获取云资产、配置和活动的可见性。通过持续监控和分析云日志、网络流量和用户行为，CDR 有助于检测威胁指标（IOCs）、异常和可疑活动，这些活动可能表明安全事件或漏洞。&lt;/p&gt;
&lt;p&gt;一旦检测到潜在的威胁或漏洞，CDR 通过提供自动化或指导响应操作来实现快速的事件响应。它促进了安全事件的隔离、调查和纠正，帮助组织最小化潜在影响并减轻进一步的风险。&lt;/p&gt;
&lt;p&gt;将 CDR 集成到 CNAPP 中创建了一个综合性的安全解决方案，结合了主动的云安全控制、漏洞管理、安全编码实践和持续监控和响应能力。它确保云原生应用在其整个生命周期中都受到保护，从开发到部署等，预防新兴威胁，并使组织能够在其云环境中保持强大的安全姿态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图 1：Gartner 的 CNAPP 详细视图&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;为什么-cnapp-必须具有运行时洞见&#34;&gt;为什么 CNAPP 必须具有运行时洞见？&lt;/h2&gt;
&lt;p&gt;CNAPP 正在成为一个接受和分析多个数据源的平台。随着采用基于容器/Kubernetes 的微服务，数据量正在爆炸式增长。这可能很快导致大量高保真和低保真信号，最终引发一个问题：你如何集中注意力处理云本地基础架构中最关键的风险？&lt;/p&gt;
&lt;p&gt;这就是拥有关于当前运行情况的深入了解如何帮助您缩小需要紧急关注的事项列表的地方。简单地说，了解当前正在运行的情况（即运行时见解）是安全和 DevOps 团队采取行动处理最关键的风险所需的必要上下文。最终，这个上下文可以在开发生命周期的早期反馈回来，使 CNAPP 的“向左位移”使用案例更好地具有可操作的优先级。&lt;/p&gt;
&lt;h2 id=&#34;运行时见解在日常工作中的实际应用示例&#34;&gt;运行时见解在日常工作中的实际应用示例&lt;/h2&gt;
&lt;p&gt;以下是 CNAPP 将有助于实现有价值和一致的策略执行的一些示例：&lt;/p&gt;
&lt;h3 id=&#34;示例-1正在使用的软件包&#34;&gt;示例 1：正在使用的软件包&lt;/h3&gt;
&lt;p&gt;构建团队已经在构建和测试管道中实施了安全扫描，这非常棒。假设一个 SCA 工具正在针对存储艺术品的注册表运行，并使用 CVE 数据库中的已知漏洞标记它们。如果已经在生产中使用的某个东西被标记为新的关键警报会发生什么？如果它足够严重，比如 Log4Shell 漏洞，那么受影响的应用程序需要立即关闭或以其他方式减轻潜在攻击。强大的 CNAPP 利用运行时见解来确定是否已经在使用易受攻击的库，然后根据情况优先考虑风险和减轻措施。此外，您应该能够自动响应这种类型的事件。&lt;/p&gt;
&lt;h3 id=&#34;示例-2正在使用的权限&#34;&gt;示例 2：正在使用的权限&lt;/h3&gt;
&lt;p&gt;一个组织利用 Amazon Web Services（AWS）作为云基础架构。为特定项目创建了一个名为“CreateS3BucketAdmin”的自定义权限，但不再使用。此权限授予完全管理访问权限，以创建和管理 AWS 帐户中的 S3 存储桶。&lt;/p&gt;
&lt;p&gt;这种情况带来了重大的安全风险。如果被攻击，攻击者可以利用这个未使用的权限创建和操作 S3 存储桶，可能导致数据暴露、数据丢失或未经授权访问敏感信息。&lt;/p&gt;
&lt;p&gt;CNAPP 可以在识别和减轻此类安全风险方面发挥关键作用。它可以根据您的用户行为和其通常使用的权限进行自动定义策略。这些信息可以用于生成理想的基线，最好是编码化的，并且可以强制执行。这个“正在使用”的权限策略作为过滤器工作，并自动生成建议，可以使这个过程更加高效。&lt;/p&gt;
&lt;h2 id=&#34;cnapp-如何工作&#34;&gt;CNAPP 如何工作？&lt;/h2&gt;
&lt;p&gt;CNAPP 通过将运行时风险可见性、云风险可见性和开发工件风险可见性的需求结合在一个坚实的平台中，实现了云安全的整合。&lt;/p&gt;
&lt;p&gt;为了具有这种集成的能力，CNAPP 通常遵循两种不同的工具仪表板：&lt;a href=&#34;https://sysdig.com/blog/cloud-kill-security-agents/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于代理和无代理&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于代理&lt;/strong&gt; 保持接近工作负载。它需要在受检测机器上与工作负载一起执行的代理（通常称为传感器或探针）。在同一主机上可以实时查看运行时情况，并且可以访问系统级上下文信息，这是其他情况下不可用的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无代理&lt;/strong&gt; 是由云提供商提供的 API 启用的，可以在不需要代理运行的工作负载中收集相关上下文。它通常利用快照的能力，在时间点上的副本上推迟安全扫描，使原始工作负载保持不变。虽然这种方法缺乏代理提供的深入运行时见解，但它为处理不需要依赖实时数据的问题提供了无摩擦的解决方案，例如构建资产清单或在审计日志中识别已知的漏洞和异常行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;强大的 CNAPP 解决方案需要采用这两种工具仪表板方法，以达到最大的有效性。使用代理获得运行时实时可见性和更好的系统级上下文信息，使用无代理在审计日志中识别已知的漏洞和异常行为。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;cnapp-解决方案能否与我的现有安全工具和系统集成&#34;&gt;CNAPP 解决方案能否与我的现有安全工具和系统集成？&lt;/h2&gt;
&lt;p&gt;CNAPP 需要集成到开发组织使用的运行时云环境和开发流程工具中。&lt;/p&gt;
&lt;h3 id=&#34;集成到cicd管道中&#34;&gt;集成到CI/CD管道中&lt;/h3&gt;
&lt;p&gt;CNAPP必须集成到您的CI/CD开发工具集中，以限制构建时的漏洞和配置错误暴露的风险。此集成对于工件扫描（无论是源代码还是编译二进制文件）都是至关重要的，并且它扩展到涵盖工件审计/日志记录遥测。&lt;/p&gt;
&lt;h3 id=&#34;与云提供商集成&#34;&gt;与云提供商集成&lt;/h3&gt;
&lt;p&gt;随着无代理工具的发展，CNAPP 供应商增加了与云提供商的集成水平，以利用提供的 API 来收集相关上下文，而不需要代理运行在工作负载的旁边。&lt;/p&gt;
&lt;p&gt;大多数现有的 CNAPP 都支持三个主要的云提供商：Amazon Web Services（AWS）、Microsoft Azure 和 Google Cloud Platform（GCP）。此外，一些供应商将其集成扩展到其他提供商，如 Oracle Cloud、IBM Cloud、Alibaba Cloud、VMware Tanzu 等。因此，请确保选择支持您基础架构的解决方案。&lt;/p&gt;
&lt;h3 id=&#34;与基础架构即代码iac工具集成&#34;&gt;与基础架构即代码（IaC）工具集成&lt;/h3&gt;
&lt;p&gt;通过这种集成，CNAPP 可以在部署之前扫描 IaC 文件并检测运行时漂移。一个例子是 Git 集成，用于根据预定义策略扫描传入的 Pull Request（PR），以查找安全违规行为。扫描评估的结果在 PR 本身中呈现。如果通过，用户可以合并；如果失败，用户无法合并。在 PR 中提供的信息也针对问题区域进行了定位，以帮助用户进行纠正。&lt;/p&gt;
&lt;h3 id=&#34;与关键管理系统kms的集成&#34;&gt;与关键管理系统（KMS）的集成&lt;/h3&gt;
&lt;p&gt;这是允许对加密或签名资源进行&lt;a href=&#34;https://blog.sigstore.dev/how-to-verify-container-images-with-kyverno-using-kms-cosign-and-workload-identity-1e07d2b85061/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扫描&lt;/a&gt;的必要条件。&lt;/p&gt;
&lt;h2 id=&#34;案例研究一家领先的机器人公司如何通过-cnapp-实现成本节约减少警报和工具整合&#34;&gt;案例研究：一家领先的机器人公司如何通过 CNAPP 实现成本节约、减少警报和工具整合&lt;/h2&gt;
&lt;p&gt;最近，一家领先的机器人公司采用了 CNAPP 来增强其云安全基础设施。通过实施 CNAPP，公司实现了显著的收益，包括安全工具的整合、警报的减少和成本节约。&lt;/p&gt;
&lt;p&gt;在采用 CNAPP 之前，该公司使用了 6 种不同的安全工具，每种工具在其云环境中具有特定的安全功能。这种分散的方法导致了操作复杂性、重叠的功能和增加的维护成本。随着 CNAPP 的引入，该公司能够将所有安全工具整合到一个平台上，简化其安全操作并减少管理开销。&lt;/p&gt;
&lt;p&gt;CNAPP 的实施也在优化警报管理流程方面发挥了关键作用。通过利用该平台的先进&lt;a href=&#34;https://sysdig.com/learn-cloud-native/detection-and-response/what-is-threat-detection-and-response-tdr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;威胁检测和响应能力&lt;/a&gt;以及运行时洞察力来关注正在使用的软件包并优先考虑风险，该公司的安全警报数量显著减少了 30%。通过智能和上下文驱动的警报优先级排序，实现了这一改进，使安全团队能够专注于最重要的威胁，同时最小化噪音和误报。因此，团队的效率和响应能力显着提高，使他们能够迅速处理真正的安全事件。&lt;/p&gt;
&lt;p&gt;此外，通过 CNAPP 合并安全工具带来了实质性的成本节约。通过消除多个安全工具的许可费用、维护成本和操作开销，该组织实现了总体安全支出的 20% 的降低。CNAPP 提供的简化管理和流程优化不仅降低了成本，还释放了宝贵的资源，使公司能够将它们用于其他战略性举措。&lt;/p&gt;
&lt;p&gt;总的来说，采用 CNAPP 导致了整合的安全基础设施、简化的警报管理和显著的成本节约。这种全面统一的云安全方法促进了操作效率的提高、改善了事件响应能力，并增强了组织的安全姿态。&lt;/p&gt;
&lt;h2 id=&#34;cnapp-工具能为我的组织提供什么好处&#34;&gt;CNAPP 工具能为我的组织提供什么好处？&lt;/h2&gt;
&lt;h3 id=&#34;1-增强云安全&#34;&gt;1. 增强云安全&lt;/h3&gt;
&lt;p&gt;CNAPP 是一个端到端的解决方案，可在任何工作负载、云或服务上提供广度，使组织能够在其云基础设施中保持一致的威胁检测和可见性。它还提供了深度，通过结合各种技术，如机器学习（ML）、规则、威胁供稿等，使其能够有效地检测和应对威胁。CNAPP 还通过提供攻击路径分析等预防性控制来减少云原生环境中的攻击面。&lt;/p&gt;
&lt;h3 id=&#34;2-实时威胁检测&#34;&gt;2. 实时威胁检测&lt;/h3&gt;
&lt;p&gt;CNAPP 提供实时的先进威胁检测能力。它利用云原生安全控件和运行时可见性技术，及时识别安全事件、异常和威胁迹象（IOCs）。CNAPP 提供端到端的检测，使组织能够迅速响应新兴威胁并最小化安全漏洞的影响。&lt;/p&gt;
&lt;h3 id=&#34;3-简化符合性&#34;&gt;3. 简化符合性&lt;/h3&gt;
&lt;p&gt;CNAPP 通过提供符合行业标准和最佳实践的安全控件和机制，帮助组织满足监管和合规要求。它有助于识别和消除安全漏洞，确保应用程序符合 PCI DSS、HIPAA、GDPR 等合规框架。&lt;/p&gt;
&lt;h3 id=&#34;4-改善-devops-协作&#34;&gt;4. 改善 DevOps 协作&lt;/h3&gt;
&lt;p&gt;CNAPP 促进了开发和安全团队之间的协作和对齐，并在安全和数字创新之间找到了平衡。它与&lt;a href=&#34;https://sysdig.com/blog/essential-workflows-for-secure-devops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps 工具和流程&lt;/a&gt;集成，使安全能够无缝地纳入持续集成和持续部署（CI/CD）流程中。&lt;/p&gt;
&lt;h3 id=&#34;5-操作效率&#34;&gt;5. 操作效率&lt;/h3&gt;
&lt;p&gt;通过整合安全控件并提供集中式管理，CNAPP 简化了安全操作。它为检测、响应和管理安全事件提供了一个单一的视图。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;使用 CNAPP，组织可以整合云原生安全工具，简化操作，优先考虑风险，增强其整体安全姿态。&lt;/p&gt;
&lt;p&gt;通过利用 CNAPP 的运行时洞察力，企业可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于组织使用的内容&lt;strong&gt;优先考虑风险&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;实现持续和&lt;strong&gt;实时检测&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用&lt;strong&gt;攻击路径分析&lt;/strong&gt;增强数据可视化，突出环境配置中存在的差距。&lt;/li&gt;
&lt;li&gt;在云环境中&lt;strong&gt;实现端到端的检测&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>基于角色的访问控制：五种常见的授权模型</title>
      <link>https://cloudnativecn.com/blog/role-based-access-control-five-common-authorization-patterns/</link>
      <pubDate>Fri, 24 Feb 2023 15:20:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/role-based-access-control-five-common-authorization-patterns/</guid>
      <description>&lt;p&gt;我们从最简单的基于 IDP 的 RBAC 开始，最终将基于组的 RBAC 与细粒度的权限和细粒度的资源相结合。&lt;/p&gt;
&lt;p&gt;授权很复杂，因为每个应用程序都必须发明自己的授权模型。但是，有一些陈旧的路径可以作为大多数应用程序的良好起点。这篇文章将描述这些模式以及 &lt;a href=&#34;https://topaz.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Topaz&lt;/a&gt; 开源项目或 &lt;a href=&#34;https://www.aserto.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aserto&lt;/a&gt; 授权服务等授权平台如何帮助你实施他们。&lt;/p&gt;
&lt;h2 id=&#34;角色作为用户属性&#34;&gt;角色作为用户属性&lt;/h2&gt;
&lt;p&gt;最简单的授权模式将一组角色建模为用户的属性。这些角色可以在身份提供者 (IDP) 中配置，并且通常作为范围嵌入到 IDP 生成的访问令牌中。&lt;/p&gt;
&lt;p&gt;一些应用程序完全基于嵌入在访问令牌中的角色（或离散权限）进行授权。但这有一些&lt;a href=&#34;https://www.aserto.com/blog/oauth2-scopes-are-not-permissions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;缺点&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;角色/权限/范围爆炸&lt;/strong&gt;：角色/权限越多，访问令牌中需要嵌入的范围就越多，从而导致大小问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IDP 和应用程序之间的耦合&lt;/strong&gt;：每当向应用程序添加新权限时，也必须修改访问令牌中生成其他范围的代码。这通常由有权访问 IDP 的安全/身份和访问团队完成，并且它引入了工作流程的复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一旦发布&lt;/strong&gt;，访问令牌就很难失效。只要访问令牌有效，经过身份验证的用户就拥有权限，即使他们的角色在令牌颁发后发生了变化。这反过来又会导致安全漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这种情况下，使用 Topaz 等授权服务具有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加了一个明确的授权系统，让应用程序实时检查用户是否仍然拥有该角色或权限。&lt;/li&gt;
&lt;li&gt;授权代码可以从应用程序中提取并表示为策略。这使得在整个应用程序中更容易推理授权逻辑。&lt;/li&gt;
&lt;li&gt;每个 API 可以有不同的授权策略，其中包含授权操作的逻辑。一个示例策略可以是“如果用户具有‘管理员’或‘编辑者’角色，或者‘创建’权限，则允许该操作。”&lt;/li&gt;
&lt;li&gt;任何角色更改（或用户全局“禁用”标志的值）都可以近乎实时地传输到授权系统。这解决了与盲目信任访问令牌中嵌入的范围相关的安全问题。&lt;/li&gt;
&lt;li&gt;角色到权限的映射可以在授权系统中完成。因此，IDP 只需要知道用户到角色的映射，而不需要知道权限。这有助于将应用程序与 IDP 分离。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于组的-rbac&#34;&gt;基于组的 RBAC&lt;/h2&gt;
&lt;p&gt;下一个模式依赖组（和组层次结构）作为组织用户。&lt;/p&gt;
&lt;p&gt;通常通过使用户成为组的成员来分配这些角色。组成员身份意味着用户已被授予角色。组可以组织成层次结构。例如，“auditor”组可以包括“internal-auditors”和“external-auditors”。这两个组又可以包括特定用户。&lt;/p&gt;
&lt;p&gt;这本质上是 LDAP 和 Active Directory 所围绕的模型。因此，大多数授权系统都支持将组作为其模型的核心部分。&lt;/p&gt;
&lt;p&gt;例如，Topaz 和 Aserto 有一个内置的“组”对象类型。组对象类型具有“成员”关系类型，其目标可以是任何主体（用户或组）。此模型允许一个组包含在其他组中。检查组成员资格是传递性的：当使用用户和组实例调用 Topaz 的 check_relation 内置函数时，它将遍历组层次结构并直接或传递地返回 true，如果用户是组的成员。&lt;/p&gt;
&lt;p&gt;以下策略（用 Open Policy Agent 的 &lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/policy-language/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rego&lt;/a&gt; 语言编写）使用 Topaz 的内置 check_relation 来评估用户是否是一个组并允许行动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;relation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于可以通过多个角色授予权限，因此策略可能需要检查每个相应组的组成员资格。例如，如果用户是任何 Viewers、Editors 或 Administrators 组的成员，则可以授予 Can View 权限。这将通过以下策略实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;viewer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;editor&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_relation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;relation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;object_type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;member&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但这可能会变得复杂，并且可以说它只是将复杂性从应用程序逻辑转移到了策略上。下一个模式旨在解决这个问题。&lt;/p&gt;
&lt;h2 id=&#34;具有细粒度权限的基于组的-rbac&#34;&gt;具有细粒度权限的基于组的 RBAC&lt;/h2&gt;
&lt;p&gt;RBAC 代表基于角色的访问控制。权限可以包含在多个角色中。在上面的示例中，可以查看权限可能包含在查看者、编辑者和管理员角色中。更具可扩展性的授权系统将定义一组离散的权限并将这些权限分配给角色。&lt;/p&gt;
&lt;p&gt;授权系统通常将权限定义为一级的概念。策略可以检查用户是否具有权限，而不是检查用户是否是组的成员。&lt;/p&gt;
&lt;p&gt;下面的 Aserto 清单文件就是这样做的。它定义了一个“系统”对象类型，其下有两种关系类型：“editor”和“viewer”。“editor”关系类型包括“viewer”关系类型的所有权限，加上 can-edit 权限。查看者关系类型包含一种权限：can-view。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;editor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;viewer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;permissions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;can-edit&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;viewer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;permissions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;can-view&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果用户（或组）具有“editor”角色，Topaz 内置的 check_permission 会在评估用户是否具有 can-view 权限时返回 true。这是因为“editor”角色可传递地包含“viewer 角色”，因此具有可以查看的权限。&lt;/p&gt;
&lt;h2 id=&#34;专有域对象的细粒度的授权&#34;&gt;专有域对象的细粒度的授权&lt;/h2&gt;
&lt;p&gt;到目前为止，我们一直在处理“全局”角色。许多应用程序希望将权限授予它们管理的一组对象。例如，Google Drive 等文件共享应用程序将“文件夹”和“文件”定义为对象类型。文件夹和文件都可以有一个父文件夹。这些对象中的每一个都有一组关系（“所有者”、“编辑者”、“评论者”和“查看者”），并且“所有者”可以将这些角色授予用户和组。因此，可以将这些权限分配给离散的文件夹和文件，而不是对每个文件和文件夹具有编辑权限的全局“编辑器”角色。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://research.google/pubs/pub48190/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google 的 Zanzibar&lt;/a&gt; 是支持 Google 文档和许多其他 Google 应用程序的授权系统，它实现了这个模型。Zanzibar 启发了许多授权系统，包括 Airbnb 的 Himeji、Carta 的 AuthZ 和几个开源实现，包括 Topaz。&lt;/p&gt;
&lt;p&gt;使用 Topaz，你可以定义特定领域的对象类型和关系类型。可以为每种关系类型定义权限（和/或其他关系类型的联合）。可以在&lt;a href=&#34;https://github.com/aserto-dev/topaz-samples/blob/main/gdrive/model/manifest.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;/a&gt;找到支持此模型的清单的完整示例。&lt;/p&gt;
&lt;p&gt;纯粹以评估主体（用户和组）和客体（例如文件夹和文件）之间的关系（例如“viewer”、“editor”）的形式建立的授权模型可以用非常简单的策略来表达：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_permission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;permission&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;policy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结合基于组的-rbac-和-fga&#34;&gt;结合基于组的 RBAC 和 FGA&lt;/h2&gt;
&lt;p&gt;大多数现实世界的应用程序都实现了基于组的 RBAC 和细粒度授权的某种组合。通常，授权涉及检查全局角色（例如，“editor”），然后检查用户是否有权访问特定资源（例如，列表）。用户需要满足这两个条件才能编辑此列表中的项目。&lt;/p&gt;
&lt;p&gt;另一个例子是“super-admin”，一个可以做任何事情的角色。访问检查包括允许用户通过关系访问特定对象的逻辑，以及允许访问具有这些提升角色的用户的逻辑。&lt;/p&gt;
&lt;p&gt;Topaz 还支持这些场景，因为它建立在策略和基于关系的访问控制的组合之上。为了扩展前面的示例，我们可以在策略中添加另一个“允许”子句。如果用户已被授予对特定对象的特定权限，或者如果他们是“super-admin”，则此子句将允许操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;ds&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check_permission&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;subject&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;permission&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;policy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;allowed&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nb&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;super-admin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;我们介绍了五种常见的授权模型，从最简单的基于 IDP 的 RBAC，到基于组的 RBAC 与细粒度权限和细粒度资源的结合。&lt;/p&gt;
&lt;p&gt;Topaz 支持所有这些模型，同样重要的是，它可以通过改进授权策略轻松地从简单模型发展到更复杂的模型。&lt;/p&gt;
&lt;p&gt;最终，每个成功的应用程序都需要一套深入的授权功能。在你的旅程中尽早采用像 Topaz 或 Aserto 这样的授权平台可以使你的应用程序面向未来，并且可以更轻松地根据你不断扩展的需求改进你的授权模型。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>深入探讨：ACME DNS 质询验证的自动化</title>
      <link>https://cloudnativecn.com/blog/technical-deep-dive-securing-automation-acme-dns-challenge-validation/</link>
      <pubDate>Tue, 10 Jan 2023 08:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/technical-deep-dive-securing-automation-acme-dns-challenge-validation/</guid>
      <description>&lt;p&gt;注：原文发布于 2018 年 2 月 26 日。&lt;/p&gt;
&lt;p&gt;2018 年 &lt;a href=&#34;https://www.letsencrypt.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; （免费、自动化、开放的证书颁发机构 EFF 在两年前帮助推出）达到了一个巨大的里程碑： &lt;a href=&#34;https://www.eff.org/deeplinks/2018/02/lets-encrypt-hits-50-million-active-certificates-and-counting&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;颁发了超过 5000 万个有效证书&lt;/a&gt;。而且这个数字只会继续增长，因为几周后 Let&amp;rsquo;s Encrypt 也将开始颁发“通配符”证书 —— 这是许多系统管理员一直要求的功能。&lt;/p&gt;
&lt;h2 id=&#34;什么是通配符证书&#34;&gt;什么是通配符证书？&lt;/h2&gt;
&lt;p&gt;为了验证 HTTPS 证书，用户的浏览器会检查以确保证书中实际列出了网站的域名。例如，来自 &lt;code&gt;www.eff.org&lt;/code&gt; 的证书实际上必须将 &lt;code&gt;www.eff.org&lt;/code&gt; 列为该证书的有效域。如果所有者只想对他的所有域使用一个证书，则证书还可以列出多个域（例如，&lt;code&gt;www.eff.org&lt;/code&gt;、&lt;code&gt;ssd.eff.org&lt;/code&gt;、&lt;code&gt;sec.eff.org&lt;/code&gt; 等）。通配符证书只是一个证书，上面写着“我对这个域中的所有子域都有效”，而不是明确地将它们全部列出。（在证书中，这是通过使用通配符来表示的，用星号表示。所以如果你今天检查 eff.org 的证书，它会说它对 *.eff.org 有效。）这样，&lt;/p&gt;
&lt;p&gt;为了颁发通配符证书，Let&amp;rsquo;s Encrypt 将要求用户通过使用基于 &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain_Name_System&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DNS&lt;/a&gt; 的质询来证明他们对域的控制，DNS 是一种域名系统，可将 &lt;code&gt;www.eff.org&lt;/code&gt; 等域名转换为 69.50.232.54 等 IP 地址。从像 Let&amp;rsquo;s Encrypt 这样的证书颁发机构 (CA) 的角度来看，没有比修改其 DNS 记录更好的证明您控制域的方法，因为控制域是 DNS 的本质。&lt;/p&gt;
&lt;p&gt;但 Let&amp;rsquo;s Encrypt 背后的一个关键思想是获取证书应该是一个自动过程。但是，为了实现自动化，请求证书的软件还需要能够修改该域的 DNS 记录。为了修改 DNS 记录，该软件还需要能够访问 DNS 服务的凭据（例如登录名和密码，或加密令牌），并且这些凭据必须存储在自动化发生的任何地方。在许多情况下，这意味着如果处理该过程的机器受到威胁，DNS 凭据也会受到威胁，这才是真正的危险所在。在本文的其余部分，我们将深入探讨该过程中涉及的组件，以及使它更安全的选项。&lt;/p&gt;
&lt;h2 id=&#34;dns-质询如何运作&#34;&gt;DNS 质询如何运作？&lt;/h2&gt;
&lt;p&gt;在高层次上，DNS 质询的工作方式与作为 ACME 协议一部分的所有其他自动质询一样 —— 证书颁发机构 (CA)（如 Let&amp;rsquo;s Encrypt）和客户端软件（如 Certbot）使用该协议来就服务器请求的证书进行通信，以及服务器应该如何证明相应域名的所有权。在 DNS 质询中，用户使用支持 DNS 质询类型的 Certbot 等 ACME 客户端软件向 CA 申请证书。当客户端请求证书时，CA 要求客户端通过向其 DNS 区域添加特定的 TXT 记录来证明对该域的所有权。更具体地说，CA 向 ACME 客户端发送一个唯一的随机令牌，并且控制域的任何人都应该将此 TXT 记录放入其 DNS 区域，在名为 &lt;code&gt;_acme-challenge&lt;/code&gt; 的预定义记录中。当令牌值添加到 DNS 区域时，客户端告诉 CA 继续验证质询，之后 CA 将向域的权威服务器执行 DNS 查询。如果权威 DNS 服务器回复包含正确质询令牌的 DNS 记录，则证明域的所有权并且证书颁发过程可以继续。&lt;/p&gt;
&lt;h2 id=&#34;dns-控制数字身份&#34;&gt;DNS 控制数字身份&lt;/h2&gt;
&lt;p&gt;DNS 区域泄露之所以如此危险，是因为 DNS 是用户的浏览器所依赖的，以了解他们在尝试访问您的域时应该联系的 IP 地址。这适用于在您的域下使用可解析名称的每项服务，从电子邮件到 Web 服务。当 DNS 受到威胁时，恶意攻击者可以轻松拦截指向您的电子邮件或其他受保护服务的所有连接，终止 TLS 加密（因为他们现在可以证明对该域的所有权并为其获取自己的有效证书），阅读明文数据，然后重新加密数据并将连接传递到您的服务器。对于大多数人来说，这很难被发现。&lt;/p&gt;
&lt;h2 id=&#34;独立和有限的特权&#34;&gt;独立和有限的特权&lt;/h2&gt;
&lt;p&gt;严格来说，为了让 ACME 客户端以自动方式处理更新，客户端只需要访问可以更新 &lt;code&gt;_acme-challenge&lt;/code&gt; 子域的 TXT 记录的凭据。不幸的是，大多数 DNS 软件和 DNS 服务提供商不提供允许限制这些权限的精细访问控制，或者根本不提供 API 来处理基本 DNS 区域更新或传输之外的自动化。这使得可能的自动化方法无法使用或不安全。&lt;/p&gt;
&lt;p&gt;一个简单的技巧可以帮助克服这些限制：使用 &lt;a href=&#34;https://en.wikipedia.org/wiki/CNAME_record&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNAME 记录&lt;/a&gt;。CNAME 记录本质上充当到另一个 DNS 记录的链接。Let&amp;rsquo;s Encrypt 遵循 CNAME 记录链，并将解析链中最后一条记录的质询验证令牌。&lt;/p&gt;
&lt;h2 id=&#34;缓解问题的方法&#34;&gt;缓解问题的方法&lt;/h2&gt;
&lt;p&gt;即使使用 CNAME 记录，潜在的问题仍然存在，即 ACME 客户端仍然需要访问允许它修改某些 DNS 记录的凭据。有不同的方法可以缓解这个潜在的问题，在泄露的情况下具有不同程度的复杂性和安全影响。在接下来的部分中，本文将介绍其中一些方法，同时尝试解释如果凭据被泄露可能产生的影响。除了一个例外，它们都使用 CNAME 记录。&lt;/p&gt;
&lt;h3 id=&#34;只允许更新-txt-记录&#34;&gt;只允许更新 TXT 记录&lt;/h3&gt;
&lt;p&gt;第一种方法是创建一组具有仅允许更新 TXT 记录的权限的凭证。在泄露的情况下，此方法将影响限制为攻击者能够为 DNS 区域内的所有域颁发证书（因为他们可以使用 DNS 凭据来获取自己的证书），以及中断邮件传递。对邮件传递的影响源于邮件特定的 TXT 记录，即 &lt;a href=&#34;https://en.wikipedia.org/wiki/Sender_Policy_Framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPF&lt;/a&gt;、 &lt;a href=&#34;https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DKIM&lt;/a&gt;、其扩展名 &lt;a href=&#34;https://en.wikipedia.org/wiki/Author_Domain_Signing_Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ADSP&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/DMARC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DMARC&lt;/a&gt;。泄露这些还可以很容易地发送网络钓鱼电子邮件，这些电子邮件冒充来自相关受感染域的发件人。&lt;/p&gt;
&lt;h3 id=&#34;使用一次性验证域&#34;&gt;使用“一次性”验证域&lt;/h3&gt;
&lt;p&gt;第二种方法是为 &lt;code&gt;_acme-challenge&lt;/code&gt; 子域手动创建 CNAME 记录，并将它们指向一个验证域，该验证域位于由一组不同的凭据控制的区域中。例如，如果您想获得涵盖 &lt;code&gt;yourdomain.tld&lt;/code&gt; 和 &lt;code&gt;www.yourdomain.tld&lt;/code&gt; 的证书，则必须创建两个 CNAME 记录 ——&lt;code&gt;_acme-challenge.yourdomain.tld&lt;/code&gt; 和 &lt;code&gt;_acme-challenge.www.yourdomain.tld&lt;/code&gt;—— 并将它们都指向外部域以进行验证。&lt;/p&gt;
&lt;p&gt;用于质询验证的域应位于外部 DNS 区域或具有自己的一组管理凭据的子委托 DNS 区域中。（子委托 DNS 区域是使用 NS 记录定义的，它有效地将对该区域的一部分的完全控制委托给外部机构。）&lt;/p&gt;
&lt;p&gt;这种方法的泄露影响相当有限。由于实际存储的凭据是针对外部 DNS 区域的，因此获得凭据的攻击者只能获得为指向该区域中的记录的所有域颁发证书的能力。&lt;/p&gt;
&lt;p&gt;然而，弄清楚哪些域确实指向那里是微不足道的：攻击者只需阅读 &lt;a href=&#34;https://www.certificate-transparency.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书透明度&lt;/a&gt; 日志并检查这些证书中的域是否具有指向受感染 DNS 区域的神奇子域。&lt;/p&gt;
&lt;h3 id=&#34;有限的-dns-区域访问&#34;&gt;有限的 DNS 区域访问&lt;/h3&gt;
&lt;p&gt;如果您的 DNS 软件或提供商允许创建绑定到子域的权限，这可以帮助您缓解整个问题。不幸的是，在发布时，我们发现唯一允许这样做的提供商是 &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/dns/dns-protect-zones-recordsets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Azure DNS&lt;/a&gt;。据推测，Dyn 也有细粒度的权限，但我们无法在他们的服务中找到除“更新记录”之外的更低级别的权限，这仍然使该区域完全容易受到攻击。&lt;/p&gt;
&lt;p&gt;Route53 和其他可能允许他们的用户创建子委托区域、新用户凭据、将 NS 记录指向新区域，并使用 CNAME 记录将 &lt;code&gt;_acme-challenge&lt;/code&gt; 验证子域指向他们。使用这种方法正确地进行特权分离需要做很多工作，因为人们需要为他们想要使用 DNS 挑战的每个域完成所有这些步骤。&lt;/p&gt;
&lt;h3 id=&#34;使用-acme-dns&#34;&gt;使用 ACME-DNS&lt;/h3&gt;
&lt;p&gt;作为免责声明，下面讨论的软件由作者编写，并用作以安全方式处理 DNS 质询自动化所需凭据所需功能的示例。最后一种方法是一款名为 ACME-DNS 的软件，专为解决这个问题而编写，它能够完全缓解这个问题。一个缺点是它为您的基础设施增加了一项需要维护的东西，以及对公共互联网开放 DNS 端口 (53) 的要求。ACME-DNS 充当具有有限 HTTP API 的简单 DNS 服务器。API 本身只允许更新自动生成的随机子域的 TXT 记录。没有方法可以请求丢失的凭据、更新或添加其他记录。它提供了两个端点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/register：此端点生成一个新的子域供您使用，并附有用户名和密码。作为可选参数，注册端点采用 CIDR 范围列表，以从中进行白名单更新。&lt;/li&gt;
&lt;li&gt;/update：此端点用于将实际质询令牌更新到服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了使用 ACME-DNS，您首先必须为其创建 A/AAAA 记录，然后将 NS 记录指向它以创建委托节点。之后，您只需通过 /register 端点创建一组新的凭据，并将 CNAME 记录从原始区域的 &lt;code&gt;_acme-challenge&lt;/code&gt; 验证子域指向新生成的子域。&lt;/p&gt;
&lt;p&gt;唯一保存在本地的凭据是用于 ACME-DNS 的凭据，它们仅适用于更新验证子域的确切 TXT 记录。这有效地限制了可能的危害对攻击者能够为这些域颁发证书的影响。有关 ACME-DNS 的更多信息，请访问 &lt;a href=&#34;https://github.com/joohoi/acme-dns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/joohoi/acme-dns/&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;为了缓解 ACME DNS 挑战验证的问题，已经讨论了向 IETF 的 ACME 工作组提出的&lt;a href=&#34;https://mailarchive.ietf.org/arch/msg/acme/6_j3fecaxIgwNTpJ3693U_n0Kec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;辅助 DNS 等提案，但目前仍未得到解决&lt;/a&gt;。由于限制泄露的唯一方法是将 DNS 区域凭据权限限制为仅更改特定的 TXT 记录，因此当前安全地实现 DNS 验证自动化的可能性很小。唯一可持续的选择是让 DNS 软件和服务提供商要么实施方法来创建更细粒度的区域凭据，要么为这个确切的用例提供全新类型的凭据。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes 安全的 6 大零信任原则</title>
      <link>https://cloudnativecn.com/blog/the-top-6-zero-trust-principles-for-kubernetes-security/</link>
      <pubDate>Tue, 13 Dec 2022 13:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/the-top-6-zero-trust-principles-for-kubernetes-security/</guid>
      <description>&lt;p&gt;传统的网络安全依赖于围绕可信内部网络的强大防御边界，以将不良行为者拒之门外，将敏感数据拒之门外。在日益复杂的网络环境中，维护强大的边界越来越困难。&lt;/p&gt;
&lt;p&gt;零信任安全正在成为企业保护其传统和现代云原生应用程序的首选方法。零信任网络架构颠覆了边界安全的假设。在零信任网络中，每个资源都在内部受到保护，就好像它暴露在开放的互联网中一样。&lt;/p&gt;
&lt;p&gt;为了为行业和美国联邦政府建立零信任安全指南，美国国家标准与技术研究院 (NIST) 在一系列出版物中建立了零信任安全指南，从 SP 800-207 开始，介绍一般的零信任架构及其配套&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SP 800-204 微服务安全标准系列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下是 NIST 的核心零信任架构原则以及建议在实践中应用它们的 Kubernetes 和 Istio 参考架构。&lt;/p&gt;
&lt;h2 id=&#34;零信任网络的六项原则&#34;&gt;零信任网络的六项原则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;无论网络位置如何，所有通信都应该是安全的&lt;/strong&gt;。网络位置和可达性并不意味着信任。企业拥有或其他专用网络内部的访问请求必须满足与来自任何其他位置的通信相同的安全要求。零信任系统的一个标准是，您可以将它暴露在开放的互联网上，并且它仍然是安全的，没有未经授权的系统、数据或通信访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有通信都应加密&lt;/strong&gt;。线路上的加密可防止窃听，并确保消息真实且未被篡改。这意味着至少为所有通信实施 TLS，将&lt;a href=&#34;https://tetr8.io/3Na982k&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mTLS 和相关的安全工作负载身份作为服务间通信的最佳实践&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对每个资源的访问都应该根据动态策略进行身份验证和授权&lt;/strong&gt;。在允许任何访问之前，对服务身份和最终用户凭据进行动态身份验证和授权。访问请求的动态上下文应该是访问决策的一部分。这可能包括行为属性，如与观察到的使用模式的偏差或请求资产的状态，如安装的软件版本、网络位置和请求的时间 / 日期。授予访问权限时，应以所需的最低权限授予它。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对资源的访问应该在空间上有界&lt;/strong&gt;。围绕资源的信任范围应尽可能小 —— 理想情况下为零。访问应该由每个能够检索和执行访问决策的资源前面的策略执行点 (PEP) 进行调解。这应该适用于所有入站、出站和服务到服务的访问。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应及时限制对资源的访问&lt;/strong&gt;。身份验证和授权绑定到一个短暂的会话，之后它们必须重新建立。这可确保频繁做出访问决策，并使用最新的可用上下文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对资源的访问应该是可观察的&lt;/strong&gt;。应收集并使用尽可能多的信息来改善安全态势。这允许持续监控所有资产的完整性和安全状况，并持续确保策略执行。此外，应反馈从观察中获得的见解以改进政策。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么零信任安全性更好&#34;&gt;为什么零信任安全性更好&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络可达性不是授权&lt;/strong&gt;。与边界安全性不同，对服务的访问不会仅仅因为该服务可访问而被授予。它也必须经过明确的身份验证和授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;周边突破口的有限爆炸半径可防止攻击者横向移动&lt;/strong&gt;。经过身份验证和授权的工作负载免受边界破坏。及时限制凭证泄露的风险。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;细粒度策略&lt;/strong&gt;。空间边界允许高粒度的策略执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;频繁的政策评估&lt;/strong&gt;。通过在短期会话上执行动态策略来及时绑定可确保授权基于最新的策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全、真实的通信&lt;/strong&gt;。加密和强大的工作负载身份限制了侦察并提供了通信的真实性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全状况和合规性的实时和可审计保证&lt;/strong&gt;。细粒度的可观察性允许实时保证和政策实施的事后审计以及故障排除和分析所需的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何使用-istio-在-kubernetes-中实现零信任安全现代微服务应用程序的参考架构&#34;&gt;如何使用 Istio 在 Kubernetes 中实现零信任安全：现代微服务应用程序的参考架构&lt;/h2&gt;
&lt;p&gt;作为 NIST 的一般零信任架构标准的补充，NIST 还发布了如何将零信任原则专门应用于微服务应用程序的标准。这些标准由 Tetrate 创始工程师 Zack Butcher 共同编写，并编入&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIST 的 SP 800-204 系列&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在该标准中，NIST 建立了一个由 Kubernetes 组成的参考平台，用于编排和资源管理，并使用 Istio 服务网格提供核心安全功能。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-安全漏洞&#34;&gt;Kubernetes 安全漏洞&lt;/h2&gt;
&lt;p&gt;由于 Kubernetes 主要专注于编排、资源管理和基本连接，因此它将零信任网络安全问题留给其他方解决。Kubernetes 中的主要网络安全漏洞是（NIST SP 800-204B，§2.1.1）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认情况下不安全的通信&lt;/li&gt;
&lt;li&gt;缺少在 pod 之间强制执行 TLS 所需的内置证书管理机制&lt;/li&gt;
&lt;li&gt;缺乏身份和访问管理机制&lt;/li&gt;
&lt;li&gt;在 OSI L3 而非 L7 运行的防火墙策略，因此无法窥视数据包或做出元数据驱动的决策&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务网格填补了-kubernetes-的安全漏洞微服务应用程序的安全内核&#34;&gt;服务网格填补了 Kubernetes 的安全漏洞：微服务应用程序的安全内核&lt;/h2&gt;
&lt;p&gt;为了增强 Kubernetes 的安全性，Istio 充当 NIST 参考架构中的安全内核。Istio 满足参考监视器的三个要求（NIST SP 800-204B，§5.1）。Istio 是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可旁路&lt;/li&gt;
&lt;li&gt;防止修改&lt;/li&gt;
&lt;li&gt;验证和测试是正确的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Envoy 数据平面通过每个服务前面以及每个入口和出口网关的不可绕过的策略执行点 (PEP) 提供参考监视器。服务网格代码独立于应用程序，因此它的生命周期可以独立管理，并且不能在运行时修改。而且，网格是系统的一个严格控制的元素，可以通过更多的眼睛和更仔细的检查来强化（NIST SP 800-204B，§5.1）。&lt;/p&gt;
&lt;p&gt;而且，作为专用的基础架构层，Istio 提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决&lt;strong&gt;横切应用程序问题的&lt;/strong&gt;统一方法；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速解决这些问题的标准插件&lt;/strong&gt;和构建自定义插件的框架；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简化&lt;/strong&gt;操作复杂性；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易于管理&lt;/strong&gt;第三方开发人员和集成商；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;降低&lt;/strong&gt;开发和运营成本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;要从联邦安全标准的合著者那里了解有关&lt;strong&gt;如何实施零信任架构的更多信息，&lt;/strong&gt;&lt;a href=&#34;https://tetr8.io/zta-wp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请阅读 Zack Butcher 的零信任架构白皮书&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;有关 NIST 安全建议的深入指南以及 Tetrate 如何帮助您实施该标准，请查看&lt;a href=&#34;https://tetr8.io/3Ccg6Qt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 的微服务联邦安全要求指南&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果您正在寻找使用 Istio 投入生产的最快方式，请查看我们的开源&lt;a href=&#34;https://istio.tetratelabs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distro (TID)&lt;/a&gt;。TID 是经过审查的 Istio 上游发行版 ——Istio 的强化映像，具有持续支持，更易于安装、管理和升级。对于在联邦监管环境中运营的组织，Tetrate Istio Distro 是唯一&lt;a href=&#34;https://istio.tetratelabs.io/fips-request/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;具有可用 FIPS 验证构建&lt;/a&gt;的 Istio 发行版。&lt;/p&gt;
&lt;p&gt;如果您需要一种统一且一致的方式来保护和管理一系列应用程序中的服务，请查看 &lt;a href=&#34;https://tetrate.io/tetrate-service-bridge/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge (TSB)&lt;/a&gt;，这是我们基于 Istio 和 Envoy 构建的全面的边缘到工作负载应用程序连接平台。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>零信任 Kubernetes 安全的三大 mTLS 最佳实践</title>
      <link>https://cloudnativecn.com/blog/top-3-mtls-best-practices-for-zero-trust-kubernetes-security/</link>
      <pubDate>Tue, 13 Dec 2022 10:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/top-3-mtls-best-practices-for-zero-trust-kubernetes-security/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 是编排现代云原生工作负载的事实标准。但是，它不提供开箱即用的安全通信。这意味着每个需要实施传输中加密以对其 Kubernetes 部署&lt;a href=&#34;https://tetr8.io/3FCXsDn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;采用零信任安全态势的&lt;/a&gt;人都需要自己解决这个问题。&lt;/p&gt;
&lt;p&gt;幸运的是，有很多易于理解的方法可以实现，在本文中，我们将介绍在 Kubernetes 中实现双向 TLS（mTLS）的三大最佳实践。&lt;/p&gt;
&lt;h2 id=&#34;什么是-mtls为什么对安全来说很重要&#34;&gt;什么是 mTLS，为什么对安全来说很重要？&lt;/h2&gt;
&lt;p&gt;传输层安全性（SSL 的后继者）是部署最广泛的安全通信标准，在 HTTPS 中最为明显。TLS 非常适合在需要向客户端证明其身份的服务器之间建立既保密（防窃听）又真实（防篡改）的安全通信。但是，在双方都需要向对方证明身份的情况下（例如在 Kubernetes 应用程序中的微服务之间），TLS 是不够的。&lt;/p&gt;
&lt;p&gt;这就是双向 TLS (mTLS) 的用武之地。mTLS 是 TLS，但双方在建立安全通信通道之前向对方证明自己的身份。这是 Kubernetes 中安全通信所需的必要部分。mTLS 提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在线加密以确保机密性和防篡改&lt;/li&gt;
&lt;li&gt;相互的、加密的安全身份证明以确保真实性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要深入了解 mTLS 的工作原理，请参阅我们关于 &lt;a href=&#34;https://tetr8.io/3NEcL0Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mTLS 的文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;mtls-的困难部分证明身份&#34;&gt;mTLS 的困难部分：证明身份&lt;/h2&gt;
&lt;p&gt;困难的部分是为服务建立一个安全机制来向彼此证明它们的身份。&lt;/p&gt;
&lt;p&gt;对于常规 TLS，过去很难管理向其客户端证明服务器身份的证书。&lt;a href=&#34;https://letsencrypt.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;随着 Let&amp;rsquo;s Encrypt&lt;/a&gt; 和 &lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ACME 协议&lt;/a&gt;的出现，这变得容易多了。然而，在像 Kubernetes 这样的动态（并且主要是私有的）环境中管理服务身份和证书更加困难，因为有许多通常是短暂的服务需要强大的、可证明的身份，但实际上不能使用公共 ACME 服务。&lt;/p&gt;
&lt;p&gt;推出自己的自动化证书管理系统是不切实际且有风险的。正确管理 mTLS 证书很困难，错误的后果很严重。您需要一种可信赖的、经过验证的方法来做到这一点；这就是服务网格的用武之地。&lt;/p&gt;
&lt;h2 id=&#34;使用服务网格nist-微服务安全标准&#34;&gt;使用服务网格，NIST 微服务安全标准&lt;/h2&gt;
&lt;p&gt;在&lt;a href=&#34;https://tetr8.io/3zi85IC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务安全标准&lt;/a&gt;中，美国国家标准与技术研究院 (NIST) 建议使用服务网格作为专用基础设施层来提供核心网络安全功能。这些核心功能之一是支持 mTLS 的强大服务身份和证书管理。而且，Istio——&lt;a href=&#34;https://tetr8.io/3UsARgY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用最广泛的服务网格&lt;/a&gt;—— 为您提供开箱即用的 mTLS 支持。Istio 透明地提供基础设施 —— 包括安全命名、强大的服务身份和证书管理 —— 用于 Kubernetes 工作负载之间的安全通信以及与外界的连接。&lt;/p&gt;
&lt;p&gt;如果您想详细了解 NIST 的微服务安全标准以及 Tetrate 如何帮助满足这些标准，请查看 &lt;a href=&#34;https://tetr8.io/3Ccg6Qt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 的微服务联邦安全要求指南&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践一不要使用自签名证书&#34;&gt;最佳实践一：不要使用自签名证书&lt;/h2&gt;
&lt;p&gt;虽然 Istio 将为您实施 mTLS，但它默认使用自签名证书，因此您可以立即看到网格工作，只需最少的配置。这使得初始用户体验变得简单，但它并非不适合生产环境。NIST 的指南（NIST SP 800-204A，SM-DR12）是完全禁用生成自签名证书的能力。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践二将-istio-的信任根植于现有-pki&#34;&gt;最佳实践二：将 Istio 的信任根植于现有 PKI&lt;/h2&gt;
&lt;p&gt;如果不应该使用 Istio 的默认自签名证书，还有什么选择？简短的回答是，您应该 &lt;a href=&#34;https://tetr8.io/3DDcAOJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 Istio 的信任根植于您现有的公钥基础设施 (PKI) 中&lt;/a&gt;。这将通过确保它们都具有相同的信任根来实现跨其他集群中的 Istio 部署的通信。观看我们关于 &lt;a href=&#34;https://www.youtube.com/watch?v=4b3H7isIAnQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Istio 的外部 CA 的视频，了解更多信息&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;最佳实践三使用中间证书&#34;&gt;最佳实践三：使用中间证书&lt;/h2&gt;
&lt;p&gt;确切地说，您如何让 Istio 信任您现有的 PKI？Tetrate 的创始工程师和 NIST 微服务安全标准的合著者 Zack Butcher &lt;a href=&#34;https://tetr8.io/3DDcAOJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在此处提供了所有详细信息&lt;/a&gt;。但是，简而言之，我们的建议是使用您组织的根证书颁发机构颁发的中间证书。这将：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许细粒度的证书撤销，而无需同时在整个基础架构中强制使用新证书。&lt;/li&gt;
&lt;li&gt;启用签名证书的轻松轮换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关如何自动化 Istio 证书颁发机构 (CA) 轮换的分步说明，请参阅我们关于 &lt;a href=&#34;https://tetrate.io/blog/automate-istio-ca-rotation-in-production-at-scale/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在大规模生产中自动化 Istio CA 轮换的&lt;/a&gt;文章。&lt;/p&gt;
&lt;h2 id=&#34;下一步&#34;&gt;下一步&lt;/h2&gt;
&lt;p&gt;如果您不熟悉服务网格和 Kubernetes 安全性，我们在 &lt;a href=&#34;https://tetr8.io/academy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Academy&lt;/a&gt; 提供一系列免费在线课程，可以让您快速了解 Istio 和 Envoy。&lt;/p&gt;
&lt;p&gt;如果您正在寻找一种快速将 Istio 投入生产的方法，请查看 &lt;a href=&#34;https://tetr8.io/tid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Istio Distribution (TID)&lt;/a&gt;。TID 是 Tetrate 的强化、完全上游的 Istio 发行版，具有经过 FIPS 验证的构建和支持。这是开始使用 Istio 的好方法，因为您知道您有一个值得信赖的发行版，有一个支持您的专家团队，并且如果需要，还可以选择快速获得 FIPS 合规性。&lt;/p&gt;
&lt;p&gt;一旦启动并运行 Istio，您可能需要更简单的方法来管理和保护您的服务，而不仅仅是 Istio 中可用的方法，这就是 Tetrate Service Bridge 的用武之地。您可以&lt;a href=&#34;https://tetr8.io/tsb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在这里&lt;/a&gt;详细了解 Tetrate Service Bridge 如何使服务网格更安全、更易于管理和弹性，或&lt;a href=&#34;https://tetr8.io/contact&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系我们进行快速演示&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;更多资源&#34;&gt;更多资源&lt;/h2&gt;
&lt;p&gt;观看我们的视频：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4b3H7isIAnQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Istio 的外部 CA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nYJJ57WCkxE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio Ingress Gateway 中的 SSL 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=o8AnLk4Da7M&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何将服务网格用于混合云和遗留工作负载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mHR7rR83KjM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何将 VM 工作负载连接到网格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=E_D4bjvX8Xw&amp;amp;t=2s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate 如何帮助美国国防部将 Istio 用于零信任架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>写给 Kubernetes 工程师的 mTLS 指南</title>
      <link>https://cloudnativecn.com/blog/mtls-guide/</link>
      <pubDate>Thu, 16 Jun 2022 11:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/mtls-guide/</guid>
      <description>&lt;h2 id=&#34;编者的话&#34;&gt;编者的话&lt;/h2&gt;
&lt;p&gt;本文翻译节选自 &lt;a href=&#34;https://buoyant.io/mtls-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Kubernetes engineer’s guide to mTLS&lt;/a&gt;，为了便于读者理解，笔者对原文做了一点修改 &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。因为笔者最近在研究 Istio 中的身份认证及 SPIFFE，对如何在 Kubernetes 中应用 mTLS 以及为什么要使用 mTLS 产生了浓厚的兴趣，再回想起五年前手动安装 Kubernetes 时，因为给集群开启 TLS 问题而导致安装停滞不前。&lt;/p&gt;
&lt;p&gt;本文的主要观点是：在 Kubernetes 中我们不能仅依靠网络层加密，还需要 mTLS 来对客户端和服务端进行双向的传输层认证。本文将聚焦于 TLS 的真实性，以及证书管理的难题，说明服务网格对于在 Kubernetes 中开启 mTLS 带来的便利。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;Mutual TLS（双向 TLS），或称 mTLS，是 Kubernetes 中的一个热门话题，尤其是对于那些负责为应用程序提供传输层加密的人来说。但是，你有没有考虑过，什么是 mTLS，它提供什么样的安全，为什么需要 mTLS？&lt;/p&gt;
&lt;p&gt;本指南我将介绍什么是 mTLS，它与常规 TLS 的关系，以及为什么它与 Kubernetes 有关。我还会谈论 mTLS 的一些优缺点及替代方案。&lt;/p&gt;
&lt;h2 id=&#34;什么是-mtls&#34;&gt;什么是 mTLS？&lt;/h2&gt;
&lt;p&gt;对于常规 TLS，只需要服务端认证，mTLS 相对来说有一个额外的规定：客户端也要经过认证。但这意味着什么，为什么要这样做呢？&lt;/p&gt;
&lt;p&gt;在回答这些问题之前，我们需要先对 TLS 有一个基本的了解。TLS 是一个传输层协议，旨在为 TCP 连接提供安全保障（我们将在下面看到安全的确切含义）。TLS 在传输层工作，可以与任何使用 TCP 的应用层协议结合使用。例如，HTTPS 是 HTTP 与 TLS 的结合（HTTPS 中的 S 指的是 SSL，即 TLS 的前身），HTTP 不需要做任何改变来适应 TLS &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;因为 TLS 中存在各种各样的问题，使得其从安全的角度来看是不理想的。TLS 规范复杂，而且没有得到充分的说明，有些地方并没有真正的意义，而且不管怎样，实现起来也不会 100% 符合 TLS 规范。&lt;/p&gt;
&lt;p&gt;尽管有这些担忧，TLS 还是无处不在。你现在就在使用 TLS：这个页面是通过 HTTPS 提供的，你可能在浏览器的 URL 栏中看到一个小锁图标。&lt;/p&gt;
&lt;h2 id=&#34;tls-提供什么样的安全性&#34;&gt;TLS 提供什么样的安全性？&lt;/h2&gt;
&lt;p&gt;大多数人把 TLS 与加密联系起来。但 TLS 不仅仅是这样。TLS 为连接提供了三种安全保证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;真实性&lt;/strong&gt;：任何一方都能证明他们是自己所声称的身份。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保密性&lt;/strong&gt;：其他人无法看到正在交换的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完整性&lt;/strong&gt;：收到的数据与发送的数据相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，虽然 TLS 确实给你提供了加密 —— 这就是它实现保密的方式 —— 但从 TLS 的角度来看，这对安全通信来说是不够的：你需要所有这三种属性。如果你没有真实性，那么有人就可以在连接的另一端进行欺骗。如果你没有完整性，那么有人可以修改通信中的关键信息。如果你没有保密性，那么任何人都可以监听。&lt;/p&gt;
&lt;p&gt;在这三种保证中，本文主要关注真实性。&lt;/p&gt;
&lt;h2 id=&#34;mtls-什么时候有用&#34;&gt;mTLS 什么时候有用？&lt;/h2&gt;
&lt;p&gt;回到我们最初的定义：mTLS 是简单的常规 TLS，其中有一个额外的规定，即客户端也要经过认证。有了对 TLS 的基本了解，我们现在可以解析这个声明了。TLS 保证了真实性，但默认情况下，这只发生在一个方向上：客户端对服务器进行认证，但服务器并不对客户端进行认证。&lt;/p&gt;
&lt;p&gt;为什么 TLS 的默认只在一个方向进行认证？因为客户端的身份往往是不相关的。例如，在加载这个页面时，你的浏览器已经验证了要访问的网站服务端的身份，但服务端并没有验证你的浏览器的身份。它实际上并不关心你的浏览器的身份。&lt;/p&gt;
&lt;p&gt;当然，不验证客户端身份对于提供网页服务是有意义的，但有很多类型的通信，客户端的身份也很重要。例如 API 调用：如果你调用像 GitHub 这样的服务，那么 GitHub 需要知道你是谁 —— 除其他原因外，这样他们就可以给你发送账单。如果不向 GitHub 提供某种客户端身份，你就不能对 GitHub 的 API 进行调用。&lt;/p&gt;
&lt;p&gt;但 GitHub 并不使用 mTLS。相反，你通过给 GitHub 一个秘密的认证令牌（token）来认证自己，这个令牌是创建账户时分配给你的。坦率地说，mTLS 设置起来很烦人（后面会有很多这方面的内容），所以如果你提供像 GitHub 这样的公共 API，你可能会只使用 auth token。&lt;/p&gt;
&lt;p&gt;然而，使用 mTLS 的认证有一些非常强大的 auth token 方法没有的优势。首先，mTLS 认证可以完全在应用程序之外完成，不需要任何应用程序级别的功能来创建、注册或管理身份。使用 auth token 时，在你进行第一次 GitHub API 调用之前，你需要登录网站，创建一个账户，获得令牌 &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;。GitHub 的 API 必须知道这个 auth token，并提供将其传递给 API 调用和管理它的方法。但有了 mTLS，一个全新的客户端就可以直接认证自己，即使从没有人见过它。而应用程序不需要知道任何关于认证的事情，也不需要提供端点来管理认证。&lt;/p&gt;
&lt;p&gt;综上所述，我们看到 mTLS 非常适合以下情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你需要安全通信；&lt;/li&gt;
&lt;li&gt;你关心客户端的身份；&lt;/li&gt;
&lt;li&gt;不想为管理身份建立应用级流程；&lt;/li&gt;
&lt;li&gt;你可以管理实际实施的复杂性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有种场景具有所有这些特征，那就是微服务！&lt;/p&gt;
&lt;h2 id=&#34;使用-mtls-来保护微服务的安全&#34;&gt;使用 mTLS 来保护微服务的安全&lt;/h2&gt;
&lt;p&gt;mTLS 是保证微服务之间跨服务通信安全的好方法，原因就在上面。&lt;/p&gt;
&lt;p&gt;首先，你想要安全的通信。当我们把我们的应用程序拆分为多个服务时，我们最终会在这些服务之间的网络上发送敏感数据。任何能够进入网络的人都有可能读取这些敏感数据并伪造请求。&lt;/p&gt;
&lt;p&gt;第二，你关心客户端的身份。首先，你要确保你能知道调用是什么时候发生的，以便进行诊断，并正确记录指标等事项。此外，你可能想对这些身份进行授权（允许 A 调用 B 吗）。我们将在后面讨论更多关于授权的问题。&lt;/p&gt;
&lt;p&gt;第三，你并不真的想为管理服务身份建立应用级的流程。这不是业务逻辑，开发人员的时间最好用在其他地方。&lt;/p&gt;
&lt;p&gt;最后，如果你控制了平台，你实际上可以管理实施 mTLS 的复杂性。或者至少，比 GitHub 做得更好。在我们的 GitHub 例子中，每个用户都必须解决对 GitHub 进行身份验证的难题。这个挑战越难，对用户就越不利（对 GitHub 的底线也越不利）。但是，如果我们能在平台层面上实现 mTLS，我们就能一次性支付成本，而不是为每个服务或每个用户支付。&lt;/p&gt;
&lt;p&gt;综上所述，mTLS 非常适用于确保微服务之间的通信安全。但是有一个问题。&lt;/p&gt;
&lt;h2 id=&#34;实施-tls-的难点证书管理&#34;&gt;实施 TLS 的难点：证书管理&lt;/h2&gt;
&lt;p&gt;到目前为止，我们已经为 mTLS 描绘了一幅美好的图景。客户端和服务器愉快地相互认证，然后它们之间的通信就安全了。在实践中，阻碍 mTLS 工作的最大挑战是&lt;strong&gt;证书管理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;TLS 中的认证是通过 &lt;strong&gt;公钥密码学&lt;/strong&gt;和&lt;strong&gt;公钥基础设施（PKI）进行的&lt;/strong&gt; 。这两者本身就是一个巨大的话题，在这篇文章中我们不会去讨论这些细节。但简而言之，它们涉及大量的证书。&lt;/p&gt;
&lt;p&gt;TLS 认证基于 X.509 证书。X.509 证书中包含&lt;strong&gt;身份&lt;/strong&gt;和&lt;strong&gt;公钥&lt;/strong&gt;。公钥有一个相应的&lt;strong&gt;私钥&lt;/strong&gt;，它不是证书的一部分。TLS 认证分两步，第一步是向对方展示你的证书，然后用私钥来证明证书中包含的身份属于你（公钥密码学的神奇之处在于，任何复制证书的人都无法进行这种证明，因为他们没有私钥。因此，你可以非常自由地使用证书，包括通过明文渠道发送证书或将其存储在公开场合）。&lt;/p&gt;
&lt;p&gt;X.509 证书是由一个 &lt;strong&gt;证书授权机构（Certificate Authority，简称 CA）&lt;/strong&gt; 签署，其中包括受 CA 信任该的身份。证书用于 TLS 认证的第二步：如果有人向你展示他们的身份并证明他们拥有该身份，你现在必须决定是否信任该身份。TLS 在这里使用了一个简单的规则：如果证书是由 CA 签署的，且你信任该 CA，那么你就应该信任该身份。如何验证 CA 对证书的签名？通过使用该 CA 本身的 X.509 证书。怎么知道是否应该信任该 CA？嗯，这个就与 TLS 协议本身无关，你会被外界告知应该信任它 &lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;CA 也签发证书。要获得证书，你首先要创建公钥和私钥对。你保留私钥，嗯，私钥 —— 千万不要在网络上发送私钥 —— 你向 CA 发送一个包含公钥和你身份的&lt;strong&gt;证书签名请求（Certificate Signing Request，简称 CSR）&lt;/strong&gt;。如果 CA 批准了这个请求，它就会创建和签署证书，并把证书发送给你。&lt;/p&gt;
&lt;p&gt;所以，证书管理就是就成了证书创建和分发流程中的挑战。我们需要确保有一个 CA，每个服务都可以向其发送 CSR，而且 CA 可以把证书发送给服务。我们还需要确保 CA 的安全，没有人能够访问任何服务的私钥，而且每个服务都知道自己的身份，而且不能被改变。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 这样的环境中，服务实际上是一组不断变化的副本，可以随时创建或销毁，每个副本都需要自己的证书，这使得证书分发的挑战更加严峻。&lt;/p&gt;
&lt;p&gt;而且，由于在实践中，减少证书暴露损失（即当有人未经授权获得秘钥时）的最好方法是&lt;strong&gt;证书轮换&lt;/strong&gt;：缩短证书的寿命，在证书过期前重新颁发。这意味着我们需要每隔 n 小时为每个副本重复整个证书请求和签名的流程。&lt;/p&gt;
&lt;p&gt;如果我们想在多个集群之间扩展安全通信，需要一种方法来确保在一个集群中产生的身份可以被其他集群所使用，而且如果某个集群被破坏，我们可以禁用该集群而不禁用其他集群，这就进一步增加了证书管理的复杂性，因为这将产生更多的证书。&lt;/p&gt;
&lt;p&gt;总之，实施 mTLS 涉及到管理大量的证书，消耗大量的时间。这一挑战的复杂性令人生畏。但尽管如此，mTLS 在 Kubernetes 的世界里已经看到了一些复兴的趋势。这是因为有一门技术使 mTLS 变得可行：服务网格。&lt;/p&gt;
&lt;h2 id=&#34;kubernetesmtls-和服务网格&#34;&gt;Kubernetes、mTLS 和服务网格&lt;/h2&gt;
&lt;p&gt;服务网格是为集群开启 mTLS 的一个绝佳的机制。它不仅可以处理证书管理的挑战，还可以处理建立和接收 TLS 连接本身。它使得为集群添加 mTLS 成为一个零配置的操作：当你在 Kubernetes 集群上安装服务网格的时候，网格化的 pod 之间的所有通信都自动被 mTLS 化。对于像 mTLS 这样复杂的东西来说，这是很不可思议的。&lt;/p&gt;
&lt;p&gt;这一切之所以能够实现，是因为 Kubernetes 使一些本来非常复杂的事情，如 sidecar 模式，变得简单易行。得益于 Kubernetes，服务网格可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透明地将一个 sidecar 代理注入到每个应用程序的 pod 中，并通过该代理路由所有进出 pod 的 TCP 通信。&lt;/li&gt;
&lt;li&gt;将一个内部 CA 作为其控制平面的一部分，签发 TLS 证书，并将该 CA 的证书安全地分配给所有代理。&lt;/li&gt;
&lt;li&gt;使用这个 CA 向每个代理发放短期的证书，与 pod 的 Kubernetes ServiceAccount 身份相联系。&lt;/li&gt;
&lt;li&gt;每隔 N 小时重新签发这些证书。&lt;/li&gt;
&lt;li&gt;让每个代理对所有使用这些证书的 pod 的连接执行 mTLS，确保客户端和服务器双方都有有效的身份。&lt;/li&gt;
&lt;li&gt;在连接进入应用程序之前，使用这些身份应用授权策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，这只是一种简化的描述。例如，Linkerd 实际上使用了两级 CA，一个在集群层面，一个在全局层面，以便允许跨集群通信。Linkerd 可以使用多个信任根，所以你也可以轮流使用 CA。&lt;/p&gt;
&lt;h2 id=&#34;常见问题mtls-实际上能保护什么&#34;&gt;常见问题：mTLS 实际上能保护什么？&lt;/h2&gt;
&lt;p&gt;事实上，mTLS 只能用于防止特定的攻击：未经授权的网络访问。阻止入侵者嗅探网络请求中的内容，阻止冒充服务进行访问。&lt;/p&gt;
&lt;p&gt;但是有很多东西是 mTLS 不能保护的，例如未经授权主机访问。如果黑客入侵进了主机，mTLS 保护就无济于事了：入侵者可以读取密匙，嗅探或欺骗连接，颠覆 CA 并造成破坏，或任何其他恶意活动。&lt;/p&gt;
&lt;p&gt;确保 Kubernetes 的安全并不容易，实际上 mTLS 只解决了 Kubernetes 的一小部分安全漏洞。&lt;/p&gt;
&lt;h2 id=&#34;mtls-与-ipsec-或-wireguard-等网络层加密相比怎么样&#34;&gt;mTLS 与 IPSec 或 Wireguard 等网络层加密相比怎么样？&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，一些 CNI 插件如 Calico 和 Cilium 可以通过 IPSec 或 Wireguard 等协议提供网络层加密。像服务网格一样，这种网络层加密可以提供传输层加密，而应用程序本身不需要做任何事情。&lt;/p&gt;
&lt;p&gt;虽然网络层加密可以与 mTLS 结合使用，作为一种深度防御的形式，但有几个原因可以说明网络层加密不足以替代 mTLS。&lt;/p&gt;
&lt;p&gt;如你所料，网络层加密的最大缺点是围绕身份的。因为它们在网络层工作，Wireguard 和 IPSec 只能提供网络身份，而不是工作负载身份。换句话说，它们不是使用工作负载本身固有的身份（比如 &lt;a href=&#34;https://spiffe.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt; 或者 Kubernetes 的 ServiceAccount），而是使用该工作负载运行的 IP 地址。&lt;/p&gt;
&lt;p&gt;依靠网络身份有一系列的问题，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;身份终止在集群边界。Kubernetes 中的 IP 地址是以集群为范围的，当跨越集群边界的时候，你就必须想出另一种身份机制。因此，如果你正在进行跨集群通信，或者想要一个涵盖非 Kubernetes 工作负载的身份系统，IP 地址就会落空。&lt;/li&gt;
&lt;li&gt;没有直接的机制进行细粒度的授权。网络层方法不能访问七层信息，如 HTTP 路由、动词以及 gRPC 方法（有些复杂的 CNI 通过启动一个七层代理来解析数据，以服务网格模式来解决这个问题）。&lt;/li&gt;
&lt;li&gt;这不是零信任。零信任的安全模式要求我们将安全边界转移到尽可能细的层次。在 Kubernetes 中，这个单位就是 pod。有了服务网格的 mTLS，你的安全边界就在 pod 层面，但对于网络层的加密，你的安全边界最多只能在主机层面执行；你必须信任网络，等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于这些原因，在 Kubernetes 中 mTLS 为你提供了比仅仅依靠网络层加密更好的安全态势。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;本文删除了原文中的 Linkerd 安装的部分，将 Twillio 替换成国内读者比较熟悉的 GitHub。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;至少，在协议层面。在实践中，随着 HTTPS 的引入，HTTP 的使用方式肯定已经发生了变化。例如，像 HSTS 这样的功能现在被用来防止 HTTPS 可能发生的某些类型的攻击。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;尽管这个客户端令牌流程没有使用 TLS 客户端认证，但它仍然依靠 TLS 服务器认证来保证安全。TLS 确保令牌来自 GitHub 而不是一个伪装者。&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;例如，你的浏览器带有知名公共 CA 的证书，如 Verisign、Digicert 等，这些证书在发布时被打包在一起。当你下载 Firefox 时，你相信 Mozilla 已经把正确的证书放进了浏览器。对于集群内的通信，我们将创建我们自己的 CA，这意味着我们也必须以一种安全的方式，将这个 CA 的证书分发给集群的每个部分，这些部分需要做出信任决定。&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>零信任网络的微服务基本要素概述</title>
      <link>https://cloudnativecn.com/blog/zero-trust-network-for-microservices/</link>
      <pubDate>Mon, 17 Jan 2022 09:24:17 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/zero-trust-network-for-microservices/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;编者按&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本博客将向您介绍零信任网络及其基本要素，这是 CISO（首席信息安全官）必须考虑的，以使网络强大，在当今的数字转型中没有安全漏洞，并减少潜在的财务损失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当今所有主要组织都在经历大规模的数字化转型，采用云、移动、微服务和容器技术来高效地提供服务，满足关键业务需求，赶上市场预期。企业的平台和 DevOps 团队必须对分布式和多云的应用程序和服务进行建模，以便随时随地进行访问，从而实现敏捷性。这在组织内部产生了两个重要的趋势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随着越来越多的组织采用多云，他们将其应用程序部署到公有云（谷歌、亚马逊、Azure 等），这意味着数据离开了他们所认为的安全的内部数据中心。&lt;/li&gt;
&lt;li&gt;企业使用微服务和分布式架构来实现大规模和敏捷。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然而，应用程序开发人员现在需要解决一系列新的可靠性和安全性问题，因为越来越多的依赖性是通过网络调用消耗的。当集中式系统在使用时，网络和端点安全在十年前很容易实现和管理。安全团队可以利用防火墙充分保障周边的安全。随着多云中的分散数据和微服务导致的分布式工作负载的新趋势，IT 安全组织需要评估他们的安全态势，并重新思考他们的网络架构。当然，安全不是一个人或一个部门的工作，它是一个组织中的 IT 安全、DevOps 和 Ops 团队的共同责任。&lt;/p&gt;
&lt;h2 id=&#34;什么是零信任网络&#34;&gt;什么是零信任网络？&lt;/h2&gt;
&lt;p&gt;零信任是一个指导原则，它强调 IT 组织在构建网络架构时不信任任何个人、应用程序或设备。在这里，“零 &amp;ldquo;信任意味着&amp;rdquo; 不隐含 &amp;quot; 信任。企业 IT 部门不能假设外部和内部实体是值得信任的，或者对任何实体的安全风险进行一次性评估就足够了（实体可以是应用、人或流量）。&lt;/p&gt;
&lt;p&gt;零信任通常与网络安全相关，因为只有在有数据交换的情况下，信任才会出现。零信任网络是一种通过认证和监控每个网络访问来识别任何外部实体的可信度的方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tetrate.io/white-paper-zero-trust-architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击下载零信任架构白皮书&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;为什么我们比以往任何时候都更需要零信任网络&#34;&gt;为什么我们比以往任何时候都更需要零信任网络？&lt;/h2&gt;
&lt;p&gt;我们想强调零信任网络比以往任何时候都更重要的最常见原因。&lt;/p&gt;
&lt;h3 id=&#34;云中的数据泄露现在很普遍&#34;&gt;云中的数据泄露现在很普遍&lt;/h3&gt;
&lt;p&gt;数据泄露事件在逐年上升，损害了公司的声誉。我仍然记忆犹新，一个分水岭事件是 2020 年的 Solarwinds 攻击事件。Solarwinds Orion 是一个基于 SaaS 的网络监控工具，它被入侵了，木马使用恶意软件攻击来掌握整个网络基础设施。虽然没有任何企业的敏感数据或文件被窃取等附带损害，但入侵是跨领域和跨地域的。即使是先进的公司，对云的网络钓鱼攻击和恶意软件攻击通常也很难发现，而且在未来可能会上升。根据 Verizon &lt;a href=&#34;https://www.verizon.com/business/resources/reports/dbir/2021/masters-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最近的研究结果&lt;/a&gt;，云计算漏洞已经超过了内部数据漏洞 ——2021 年 73% 的网络安全事件涉及外部云资产。而 CISO 的一个标准建议是尽快应用零信任网络的原则以避免安全漏洞。&lt;/p&gt;
&lt;h3 id=&#34;分布式工作负载也不安全由于运行时矢量攻击&#34;&gt;分布式工作负载也不安全，由于运行时矢量攻击&lt;/h3&gt;
&lt;p&gt;虽然企业采用 Kubernetes 技术的速度比以往任何时候都快，但它们并不是 100% 安全的。Kubernetes 和容器化应用经常出现漏洞和黑客攻击的情况。根据 &lt;a href=&#34;https://www.redhat.com/en/resources/kubernetes-adoption-security-market-trends-2021-overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021 年 RedHat 的报告&lt;/a&gt;，90% 的受访者在过去一年中经历了涉及其容器和 Kubernetes 环境的安全事件。&lt;/p&gt;
&lt;p&gt;分布式系统失败的常见原因之一是 Kubernetes 集群在运行时（或实时）的矢量攻击，并带来了一系列新的安全挑战。如果黑客攻破一个 Kubernetes 容器，他们将试图攻破整个集群，这是一种复杂的矢量攻击。美国国家安全局（NSA）指出，黑客针对 Kubernetes 来&lt;a href=&#34;https://www.zdnet.com/article/hacker-target-kubernetes-to-steal-data-and-processing-power-now-the-nsa-has-tips-to-protect-yourself/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;窃取数据和计算能力&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;根本原因往往是隐性信任，假设集群间的资源是可信的，集群内不安全的网络通信是安全的。&lt;/p&gt;
&lt;h3 id=&#34;安全配置不是开发人员的核心能力&#34;&gt;安全配置不是开发人员的核心能力&lt;/h3&gt;
&lt;p&gt;尽管 Kubernetes 给基础设施和应用交付领域带来了敏捷性和规模，但要确保安全是个挑战。有人可能会说，Kubernetes 中有一些固有的安全功能，如使用 ClusterRoleBinding 的 RBAC，Kubernetes 服务的 TLS 等，应该足够了。然而，Kubernetes 需要大量的配置来使工作负载免受外部和内部威胁。例如，在 pod 之间强制执行 TLS，在某些时候需要维护数百个 TLS 证书。&lt;/p&gt;
&lt;p&gt;而那些已经专注于开发业务功能的开发人员可能不会优先考虑安全问题。红帽公司最近发布的一份关于 &lt;a href=&#34;https://www.redhat.com/en/blog/state-kubernetes-security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes 安全状况&lt;/a&gt;的报告显示，大型企业面临的安全事件大多与错误配置、重大漏洞有关，并遭遇到运行时安全事件。&lt;/p&gt;
&lt;h3 id=&#34;应用程序的交付在-cicd-的帮助下获得了快速发展而安全问题却没有&#34;&gt;应用程序的交付在 CI/CD 的帮助下获得了快速发展，而安全问题却没有&lt;/h3&gt;
&lt;p&gt;通过 CI/CD 流程、交付协调工具、GitOps 风格的部署，DevOps 团队加快了软件交付速度。许多组织可以每天将应用程序部署到生产中（如果需要，往往在几个小时内）。这种创新速度适合于组织的蓬勃发展和成长，但如果不注重强大的安全性和合规性，就会带来漏洞。&lt;/p&gt;
&lt;p&gt;我们所接触的大多数组织都在他们的 DevOps 流程中逐步发展并开始采用 DevSecOps，将安全检查整合到他们的 SDLC 过程中。作为一种实践，他们的 DevOps 团队、合规经理、安全经理、网络管理员在部署前合作讨论安全要求和构建威胁模型。&lt;/p&gt;
&lt;h2 id=&#34;实施零信任网络的关键因素&#34;&gt;实施零信任网络的关键因素&lt;/h2&gt;
&lt;p&gt;不同的安全组织、分析师和作者提出了许多框架。例如，Forrester 建议零信任扩展（ZTX 模型），并主张保护不同的数据管道以保护数据本身。Gartner 有一个概念，叫做持续适应性风险和信任评估（CARTA），它主要侧重于分析与身份和设备相关的风险态势。&lt;/p&gt;
&lt;p&gt;我们相信，没有任何一个放之四海而皆准的框架能适用于所有的场景和所有的组织。我们为使用微服务范式开发和部署应用程序的企业提供一个零信任框架，以确保网络和应用程序的安全。&lt;/p&gt;
&lt;p&gt;Tetrate 与&lt;a href=&#34;https://www.nist.gov/news-events/events/2022/01/zta-and-devsecops-cloud-native-applications-virtual&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;美国国家标准与技术研究所（NIST）&lt;/a&gt;合作，为联邦机构开发标准，以便为其微服务实施零信任架构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你可以在 NIST 和 Tetrate 共同编写的 NIST 特别出版物中阅读在微服务中实现零信任的详细指南：《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;微服务的安全策略&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》、《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204A.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;使用服务网格构建安全的微服务&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》、《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204B-draft.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;使用服务网格的基于属性的微服务访问控制&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》、《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-204C-draft.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;使用服务网格实现微服务的 DevSecOps&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》和《&lt;/strong&gt;&lt;a href=&#34;https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-207.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;零信任架构&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;》。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于 CISO 和 CTO 来说，基于上述研究文件，我们主张采用持续安全框架，以实现其微服务和服务网格的零信任，避免数据泄露。在这个框架下，有 4 个关键因素需要考虑。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-微服务的零信任网络框架&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;微服务的零信任网络框架&#34; srcset=&#34;
               /blog/zero-trust-network-for-microservices/008i3skNly1gygh9tlkvlj31gw0skgnr_hu2762205821105459836.webp 400w,
               /blog/zero-trust-network-for-microservices/008i3skNly1gygh9tlkvlj31gw0skgnr_hu13443000594862177009.webp 760w,
               /blog/zero-trust-network-for-microservices/008i3skNly1gygh9tlkvlj31gw0skgnr_hu9013413548465693573.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/zero-trust-network-for-microservices/008i3skNly1gygh9tlkvlj31gw0skgnr_hu2762205821105459836.webp&#34;
               width=&#34;760&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      微服务的零信任网络框架
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务的零信任网络框架&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 安全网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DevSecOps 团队的首要任务是确保网络和数据的完整性。到你的应用程序的流量可以来自任何地方：包括企业自有网络内部和外部。任何设备或请求都不应该被信任，不管它们是否属于企业网络。所有的通信都应该以加密、认证和授权的方式进行，以保护数据的机密性，防止恶意行为者从网络中窃取数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 保障资源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;资源可以是小型应用（服务或工作负载），可以向网络内的其他应用发送流量。一个网络可能由多个服务组成，每个服务将通过网络使用 API 调用与其他服务对话，以执行某些业务功能和逻辑。在授予访问权以发送处理请求之前，必须根据已建立的资源身份，对每个服务的信任进行评估。认证和授权检查服务身份必须发生在一个会话中，而且服务不应该默认继承对所有资源的访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 确保用户安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对一个应用程序的威胁可能是由内部或外部用户造成的。这就是为什么在授予访问权之前要通过适当的认证来评估每个请求者的可信度。就像保护资源一样，对用户的访问应该以完成任务所需的最小权限来授予，而且应该是基于会话的。当然，各种用户会根据他们的角色获得访问权限。DevOps 团队和安全部门应该谨慎地分配权限，定义角色，并对用户进行治理，以避免安全和合规性威胁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 最大限度地提高可见性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了实施零信任网络，IT 安全组织必须不断实时评估其 IT 环境的安全态势，特别是微服务。为了对任何安全事件做出反应，安全团队必须配备适当的信息和可见性，以加快诊断和分流。应该有一个适当的机制，从企业网络的资源中追踪和隔离损坏的或脆弱的资源或用户或设备。&lt;/p&gt;
&lt;h2 id=&#34;tetrate-service-bridgetsb如何帮助开箱即用&#34;&gt;Tetrate Service Bridge（TSB）如何帮助开箱即用？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge(TSB)&lt;/a&gt; 通过一个与云无关的集中式平台为所有从边缘到工作负载的应用和 API 实现安全、敏捷和可观察性。它为平台所有者提供所有环境的内置安全和集中的可见性和治理，同时授权开发人员为其应用程序做出本地决定。&lt;/p&gt;
&lt;p&gt;TSB 通过为您的应用程序和云平台提供 FIPS 认证的构建，Istio 和 Envoy 的生命周期管理，以及其他增强功能以提高可用性，将 Istio 和 Envoy 增强为企业级服务网格。&lt;/p&gt;
&lt;p&gt;Tetrate Service Bridge（TSB）位于应用边缘，负责控制所有计算集群的请求级流量、多云、Kubernetes 和传统计算集群之间的流量转换，并提供南北 API 网关功能。TSB 还提供了一个带有 &lt;a href=&#34;https://www.tetrate.io/blog/unpacking-next-generation-access-control-ngac-and-tetrate-q/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGAC&lt;/a&gt; 框架的全局管理平面，以定义安全策略和配置，获取遥测数据，并在整个网络拓扑结构中处理 Istio 和 Envoy 的生命周期。有了 TSB，安全团队可以将安全从应用代码栈中剥离出来，放在属于他们的透明网络层中 —— 避免开发人员为安全而耗费精力修改代码。&lt;/p&gt;
&lt;p&gt;DevOps 团队仍然可以继续执行他们的计划，根据业务需求更快地将应用程序部署到多云中，而安全方面可以对微服务的安全策略进行集中控制。让我们看看 TSB 组件如何帮助实现安全。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-微服务的零信任网络的-tetrate-实现&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;微服务的零信任网络的 Tetrate 实现&#34; srcset=&#34;
               /blog/zero-trust-network-for-microservices/008i3skNly1gyggs2hdtaj30wi0q20uz_hu6271304069410243291.webp 400w,
               /blog/zero-trust-network-for-microservices/008i3skNly1gyggs2hdtaj30wi0q20uz_hu4347530615364539107.webp 760w,
               /blog/zero-trust-network-for-microservices/008i3skNly1gyggs2hdtaj30wi0q20uz_hu9586028103452303691.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/zero-trust-network-for-microservices/008i3skNly1gyggs2hdtaj30wi0q20uz_hu6271304069410243291.webp&#34;
               width=&#34;760&#34;
               height=&#34;610&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      微服务的零信任网络的 Tetrate 实现
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务的零信任网络的 Tetrate 实现&lt;/p&gt;
&lt;p&gt;TSB 提供保护您的资源、网络、用户和最大限度地提高可见性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 安全命名，用于服务间的授权，以确保资源安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于 Tetrate Service Bridge（TSB）建立在 Istio 上，默认情况下它提供安全命名，以确保工作负载（VM 和 Pod）属于同一个微服务。TSB 为每个工作负载（VM 或 Pod）创建服务身份，并将信息存储在安全名称信息中。服务器身份在证书中进行编码，但服务名称是通过发现服务或 DNS 检索的。安全命名信息将服务器身份映射到服务名称。从（例如）服务 A 到服务名称 B 的身份映射意味着 &amp;ldquo;A 被授权与服务 B 对话”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 基于 mTLS 的服务认证，确保网络安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TSB 提供 Istio 点对点认证资源，以验证客户端与安全工作负载的连接。它使你能够通过 Envoy 代理在你的服务网格中实现 mTLS 认证，这是一个与每个服务一起工作的小应用程序（也被称为 sidecar 代理）。客户端 Envoy 代理与服务端 Envoy 代理进行握手，只有当相互的 TLS 连接建立后，流量才从客户端转移到服务器端。&lt;/p&gt;
&lt;p&gt;基于 mTLS 的认证被称为点对点（P2P）认证，不需要改变任何服务代码。基于 mTLS 的 p2p 认证为每个服务提供了一个强大的识别，以实现跨集群和多云的互操作性。安全管理人员现在可以在 TSB 管理平面中定义基于 mTLS 的认证策略，对网络中的服务间的通信进行加密。有了安全的网络，就没有中间人攻击的机会。&lt;/p&gt;
&lt;p&gt;TSB 提供了一个证书管理系统，自动生成、分发和轮换私钥和证书，以解密请求中的数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 基于 JWT 的认证，以确保来自内部和外部用户的应用安全&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于终端用户的认证，以验证附加在请求上的凭证，TSB 提供现有的 Istio 资源（也称为请求认证）。安全管理人员现在可以利用 Istio 资源，通过验证 JSON 网络令牌（JWT）来验证凭证。该令牌将有令牌的位置、发行者的详细信息和公共 JSON 网络密钥集。安全经理可以根据他们的组织标准指定认证策略和规则，TSB 将根据令牌与策略的匹配程度拒绝或接受用户请求。&lt;/p&gt;
&lt;p&gt;由于 TSB 全局管理使用 Istio，它提供了灵活性，可以与您选择的认证供应商连接，如 OpenID Connect 供应商，例如，KeyCloak、OAuth 2.0、Google Auth、Firebase Auth 等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 对安全资源和用户进行访问控制的授权策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TSB 授权策略允许安全经理创建跨服务网格、命名空间和工作负载的访问控制。比如说，一个真实的用户已经进入了一个系统，但是应该限制他在该系统下采取任何行动。&lt;/p&gt;
&lt;p&gt;安全经理现在可以使用单一资源定义工作负载之间和最终用户之间授权的细化规则（如允许、拒绝或自定义请求）；易于使用和维护。最重要的是，TSB 中的 Istio 授权策略支持通信框架，如 gRPC、HTTP、HTTPS 和 HTTP/2、TCP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 可观察性和实时可见性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tetrate Service Bridge（TSB）允许安全管理人员主动监控和测量微服务的完整性和安全态势。TSB 控制平面产生运行时遥测数据，帮助安全人员、网络管理员和 SRE 不断跟踪服务的行为。除了生成指标，TSB 还提供运行时的可观察性，如每个服务的流量和服务依赖关系。TSB 管理平面提供对信息的可见性，如谁被授权使用什么服务，什么被加密等。&lt;/p&gt;
&lt;p&gt;安全团队现在可以看到每个服务是如何与其他服务互动的，在发生恶意攻击的情况下，他们可以迅速隔离被破解的应用程序，以免损害其声誉，然后准备发布补丁。此外，TSB 为选定的时间段生成审计日志，提供每个访问信息的方式、内容、时间和地点的完整视图。审计日志帮助审计人员和安全经理追踪潜在的安全漏洞或任何违反策略的行为，并帮助迅速找到问题的根源。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;如果安全团队能够保护网络，在每笔交易中验证服务和用户的身份，并获得 360 度的可见性，以便在发生事故时做出更快的反应，他们就达到了微服务的零信任。通过零信任架构，安全团队可以消除从网络中窃取数据（用户凭证、网络访问和横向移动能力）的风险。另一方面，终端用户可以获得一致的、稳定的，更重要的是安全的体验，无论他们在什么地方，使用什么终端，或者他们的应用程序是在企业内部还是在云中。&lt;/p&gt;
&lt;p&gt;如果你对此感兴趣的话，你可以：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册参加即将举行的关于 &lt;a href=&#34;https://www.tetrate.io/zta-devsecops-conference-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZTA 和云原生应用的 DevSecOps 的&lt;/a&gt;安全会议&lt;/li&gt;
&lt;li&gt;阅读更多关于 &lt;a href=&#34;https://www.tetrate.io/zero-trust/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TSB 提供的服务&lt;/a&gt;如何&lt;a href=&#34;https://www.tetrate.io/zero-trust/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;帮助您在微服务中实现零信任的信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载我们的白皮书，了解&lt;a href=&#34;https://www.tetrate.io/white-paper-zero-trust-architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么使用 Istio 服务网格来实现零信任安全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ZTNA 能取代 VPN 吗？——三种远程访问方法对比</title>
      <link>https://cloudnativecn.com/blog/can-ztna-replace-vpn/</link>
      <pubDate>Wed, 13 Oct 2021 10:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/can-ztna-replace-vpn/</guid>
      <description>&lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;本文译自 Cloudflare 出品的白皮书 &lt;a href=&#34;https://assets.ctfassets.net/slt3lc6tev37/IcpGyTHplQhOeB60k1Egp/e49211fc4482b67f3bf264c22923ef5c/Can_ZTNA_replace_your_VPN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Can ZTNA replace your VPN? Compare 3 remote access approaches&lt;/em&gt;&lt;/a&gt;，本文对比了 VPN 和 ZTNA 远程访问解决方案，阐明了它们的好处和局限性，同时阐明了迁移项目的最重要考虑因素。同时给出了 Cloudflare 的解决方案及迁移到 ZTNA 的步骤建议。&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;安全、无缝的远程访问是一个业务促进因素——提高远程用户的生产力，减少 IT 团队花在入职和维护用户与应用连接的时间，并具有灵活性和弹性。然而，远程访问对许多企业来说仍然是一个挑战。&lt;/p&gt;
&lt;p&gt;很久以前，VPN 提供了一种简单的方法，将一些远程用户短暂地连接到企业网络。然而，随着劳动力的分布越来越广——企业需要在更长时间内保持远程用户的安全连接——这种方法的缺陷变得很明显，从性能低下、安全风险增加到扩展性问题。&lt;/p&gt;
&lt;p&gt;随着远程访问需求的增长，企业正越来越多地从传统的 VPN 实施方式转向更安全、性能更高的远程访问解决方案。零信任网络访问（Zero Trust Network Access），或称 ZTNA，围绕特定的应用程序、私有 IP 和主机名创建安全边界，用基于身份和背景授予访问权的默认拒绝策略取代默认允许的 VPN 连接。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/can-ztna-replace-vpn/008i3skNly1gvco15q2jsj619a0nead202_hu8012865061791934216.webp 400w,
               /blog/can-ztna-replace-vpn/008i3skNly1gvco15q2jsj619a0nead202_hu18294201437393585988.webp 760w,
               /blog/can-ztna-replace-vpn/008i3skNly1gvco15q2jsj619a0nead202_hu9709797042715940246.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/can-ztna-replace-vpn/008i3skNly1gvco15q2jsj619a0nead202_hu8012865061791934216.webp&#34;
               width=&#34;760&#34;
               height=&#34;393&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;2020 年，大约 5% 的远程访问使用主要由 ZTNA 提供服务。由于传统 VPN 访问的局限性以及提供更精确的访问和会话控制的需要，预计到 2024 年，这一数字将跃升至 40%。&lt;/p&gt;
&lt;p&gt;虽然 ZTNA 为企业提供了比 VPN 更明显的优势和更多的功能，但许多组织发现它并不能完全替代 VPN 基础设施。但是，随着 ZTNA 变得更加强大，VPN 问题变得更加严重，这种情况正在迅速改变。本文对比了 VPN 和 ZTNA 远程访问解决方案，阐明了它们的好处和局限性，同时阐明了迁移项目的最重要考虑因素。它解释了 Cloudflare 如何提供 ZTNA，并推荐了一套行动步骤，将传统的 VPN 基础设施过渡到更快、更安全的远程用户零信任连接。&lt;/p&gt;
&lt;h2 id=&#34;方法-1传统的-vpn&#34;&gt;方法 1：传统的 VPN&lt;/h2&gt;
&lt;p&gt;几十年来，VPN 使组织能够将其远程用户连接到公司网络，并具有一定的隐私和安全性。在公共互联网上访问敏感信息，任何攻击者都可能窥探或窃取数据，而 VPN 允许用户通过加密连接安全访问内部资源。&lt;/p&gt;
&lt;p&gt;两种最常见的 VPN 实施模式是基于客户端的 VPN 和无客户端的 SSL-VPN。每种模式都有各自的好处和挑战。&lt;/p&gt;
&lt;p&gt;基于客户端的 VPN 通过加密的隧道将远程用户连接到一个私人网络。这种连接是通过一个软件应用程序或客户端建立的，它要求用户用用户名和密码进行一次认证，以获得对该网络内任何资源的持续访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一旦建立连接，就自由的横向移动使用户很容易通过访问应用程序和连接到内部主机来快速访问多种资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挑战&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不是为漫游用户和移动设备设计的。当用户四处漫游时，他们的笔记本电脑和移动设备都会随着无线网络的变化而无缝地重新连接。然而，VPN 客户端不善于流畅地处理这些重新连接，要求用户反复强迫 VPN 客户端重新启动和重新认证——造成生产力的损失，并产生 IT 票据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可见性差。采用这种方法，VPN 基础设施在数据中心的内部防火墙背后终止了来自 VPN 客户端的加密隧道。虽然这些连接被记录下来，但没有特定的应用集中日志来显示用户访问了哪些应用或他们在应用中采取了哪些行动。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无客户端的 SSL-VPN 门户允许少数远程用户连接到私人网络中的一些基于浏览器的应用程序。这种连接是通过运行 VPN 服务的网络设备中内置的 Web 服务器实现的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挑战&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安全问题。数据中心内的大多数 VPN 设置允许用户完全访问，这给那些不希望非雇员（如承包商）不受限制地访问敏感资源和应用程序的组织带来了问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不是为支持大量的并发用户而建立的。与现代云服务不同，门户网站的网络服务器不能弹性扩展以满足更高需求。相反，必须安装更多的网络设备并进行负载均衡，以扩大门户的规模，这通常是昂贵、复杂和无效的，因为设备的其他功能可能没有被充分利用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无客户端的 SSL-VPN 门户使防火墙端口和网络服务器暴露在攻击之下。为了让托管门户的网络服务器能够到达内部应用，管理员必须开放入站防火墙端口，使其暴露在外部攻击之下。开放的端口和网络服务器本身都必须屏蔽 DDoS 和网络应用的攻击，这需要更复杂的配置和更高的成本，以确保这种连接方法的安全。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/can-ztna-replace-vpn/wpsfkrjr5_hu2121897924746161044.webp 400w,
               /blog/can-ztna-replace-vpn/wpsfkrjr5_hu943986673502863621.webp 760w,
               /blog/can-ztna-replace-vpn/wpsfkrjr5_hu1970745215856602055.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/can-ztna-replace-vpn/wpsfkrjr5_hu2121897924746161044.webp&#34;
               width=&#34;760&#34;
               height=&#34;383&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;虽然 VPN 为远程用户提供了基本的隐私，但在设计时并没有考虑到安全性或可扩展性。传统上，企业使用 VPN 将少数远程用户短期连接到企业网络。然而，随着远程工作变得越来越普遍，VPN 问题开始成倍增加。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户体验到性能低下。如果 VPN 基础设施没有能力处理其员工创造的流量吞吐量和并发连接，用户的互联网连接就会变慢。此外，当 VPN 距离用户和他们试图访问的应用服务器都很远时，就会造成访问延迟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;企业网络容易受到攻击。VPN 通常采用城堡和山丘模式，即用户一旦连接到网络，就可以不受限制地访问所有企业资源。由于没有内置的方法来限制对关键基础设施和数据的访问，企业被迫配置昂贵、复杂的安全服务，如下一代防火墙和网络访问控制——或者容易受到恶意的横向移动，导致更大的数据泄露。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;托管 VPN 服务的挑战&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一些供应商已经将运行 VPN 服务的网络设备转移到公有云中，作为虚拟机在一个或多个数据中心运行。VPN 可能与其他安全服务捆绑在一起，也可能不与之捆绑在一起（或与之串联）。&lt;/p&gt;
&lt;p&gt;将 VPN 置于云中，似乎可以解决硬件 VPN 设备固有的一些可扩展性问题。然而，这样做也带来了一些重大的安全和可扩展性挑战。&lt;/p&gt;
&lt;p&gt;例如有一个组织托管一个完整的 NGFW（下一代防火墙），将 VPN 与防火墙和其他安全功能结合起来。由于 NGFW 是作为一个捆绑服务提供的，因此不可能根据需求独立扩展任何特定功能。扩大一个功能需要扩大整个服务；要做到这一点，必须启动更多的虚拟机，以平衡每个虚拟机中执行的少量计算的负载。这不仅是一个不切实际且不便的解决方案，而且随着组织的远程访问需求不断扩大，很可能会产生高额费用。&lt;/p&gt;
&lt;h2 id=&#34;方法-2零信任网络访问&#34;&gt;方法 2：零信任网络访问&lt;/h2&gt;
&lt;p&gt;零信任安全规避了 VPN 所固有的许多挑战。它所依据的原则是，网络内部或外部的任何用户或设备都不能被默认信任。为了减少数据泄露、内部攻击和其他威胁的风险和影响，零信任方法——&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对每一次登录和请求进行认证和记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要求对所有用户和设备进行严格的核查。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据身份和背景，限制每个用户和设备可以访问的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并增加了端对端加密，以隔离网络中的应用和数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/can-ztna-replace-vpn/008i3skNly1gvcoksofzvj61o80u0q5q02_hu3340148557395684127.webp 400w,
               /blog/can-ztna-replace-vpn/008i3skNly1gvcoksofzvj61o80u0q5q02_hu10398194100011145569.webp 760w,
               /blog/can-ztna-replace-vpn/008i3skNly1gvcoksofzvj61o80u0q5q02_hu962888777791521483.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/can-ztna-replace-vpn/008i3skNly1gvcoksofzvj61o80u0q5q02_hu3340148557395684127.webp&#34;
               width=&#34;760&#34;
               height=&#34;378&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;与 VPN 一样，ZTNA 有两种配置方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无客户端（或服务发起的）ZTNA 使用现有的浏览器，而不是客户端，来创建一个安全连接并验证用户设备。传统上，无客户端 ZTNA 仅限于具有 HTTP/HTTPS 协议的应用，但兼容性正在快速发展。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;优点：无客户端 ZTNA 使用反向代理连接，防止直接访问应用程序，阻止用户访问他们可能没有权限查看的应用程序和数据，并允许管理员在管理方面有更强的控制和灵活性。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;基于客户端（终端启动）的 ZTNA 在控制代理和授权应用之间建立加密连接之前，在用户设备上安装软件。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;优点：基于客户端的 ZTNA 使管理员能够更深入地了解用户访问应用程序的设备状态、位置和风险背景，因此可以创建和执行更精细的策略。而且，由于这种方法不限于 HTTP/HTTPS，它可以用来访问更广泛的非 HTTP 应用——例如那些依赖 SSH、RDP、VNC、SMB 和其他 TCP 连接的应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实施 ZTNA 的挑战&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然 ZTNA 与传统的 VPN 相比具有明显的优势，但它并不是一个确保远程用户网络访问安全的完美方法。当企业权衡采用零信任的利弊时，他们可能会遇到以下一个或多个挑战。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解决方案并不是真正的云原生。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果供应商不提供基于云的 ZTNA——意味着他们的客户需要在自己的数据中心部署软件，那么用户就会失去即时可扩展性和无限吞吐量等关键优势。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;供应商可能不提供基于客户端和无客户端的 ZTNA 选项。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这限制了那些需要将用户连接到非 HTTP 应用（如远程桌面、SSH 应用或文件共享）的组织的价值。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;配置可能是复杂和耗时的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不提供策略协调和自动化支持的供应商（通过 Terraform 等工具）可能会给管理员带来更多的手动工作——除了在身份提供者中已经发生的配置之外。&lt;/p&gt;
&lt;h2 id=&#34;方法-3cloudflare-的远程访问方法&#34;&gt;方法 3：Cloudflare 的远程访问方法&lt;/h2&gt;
&lt;p&gt;保护和扩展远程访问应该是一个无缝的过程，一个不分层的笨重的安全解决方案，创造性能的权衡，减少不必要的成本。Cloudflare 使团队能够处理所有的远程访问用例，具有以下好处。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为用户和管理员提供简单、无风险的入职培训。Cloudflare 很容易与现有的身份供应商和终端保护平台集成，以执行限制访问企业应用程序和资源的零信任政策。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于客户端和无客户端的 ZTNA 部署的灵活性。Cloudflare 为网络、SSH、VNC（以及即将推出的 RDP）应用程序的连接提供无客户端支持，为非 HTTP 应用程序和内部 IP（以及即将推出的主机名）的私有路由提供基于客户端的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/can-ztna-replace-vpn/wpsxPzRG3_hu18340378448655200174.webp 400w,
               /blog/can-ztna-replace-vpn/wpsxPzRG3_hu16383886458351275290.webp 760w,
               /blog/can-ztna-replace-vpn/wpsxPzRG3_hu14441053633610203751.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/can-ztna-replace-vpn/wpsxPzRG3_hu18340378448655200174.webp&#34;
               width=&#34;760&#34;
               height=&#34;480&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;表 1：Cloudflare 如何应对远程访问挑战&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;问题&lt;/th&gt;
          &lt;th&gt;解决方案&lt;/th&gt;
          &lt;th&gt;Cloudflare 的实施&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;难以扩展&lt;/td&gt;
          &lt;td&gt;全局边缘网络&lt;/td&gt;
          &lt;td&gt;可扩展性问题困扰着非云原生的 VPN 和 ZTNA 服务，使远程用户难以访问应用程序和数据。Cloudflare 的全球 Anycast 网络不仅使用户的连接速度比 VPN 快，而且还确保任何规模的远程工作者都能根据需要安全、迅速地连接到企业资源，而不需要管理员进行额外的耗时配置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;与移动设备的兼容性差&lt;/td&gt;
          &lt;td&gt;轻量级客户端&lt;/td&gt;
          &lt;td&gt;利用 IPSec 和 SSL 协议的 VPN 和 ZTNA 解决方案在移动和漫游设备上的性能往往不佳。Cloudflare 的 WARP 客户端利用更现代的 Wireguard 协议，该协议在用户空间运行，支持更广泛的操作系统选项，与传统选项相比，用户体验更好。Cloudflare 的 WARP 客户端可以在 Windows、MacOS、iOS、Android 和即将到来的 Linux 设备上配置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;没有集成的或薄弱的 DDoS 保护&lt;/td&gt;
          &lt;td&gt;内置行业领先的 DDoS 保护&lt;/td&gt;
          &lt;td&gt;如果没有集成的 DDoS 保护，企业往往被迫以 daisy-chain 方式提供额外的安全服务，这可能会造成配置上的麻烦、可扩展性问题和安全挑战。Cloudflare 的 67+Tbps 网络为任何 ZTNA 模式提供内置的 DDoS 保护，抵御最大规模的攻击。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;协议的限制&lt;/td&gt;
          &lt;td&gt;非网络应用程序支持&lt;/td&gt;
          &lt;td&gt;模式兼容性：用于 SSH/VNC 应用的无客户端 ZTNA；用于所有其他非网络应用的基于客户端的 ZTNA。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;没有集成的网络防火墙&lt;/td&gt;
          &lt;td&gt;内置网络防火墙&lt;/td&gt;
          &lt;td&gt;随着企业网络的发展，企业必须平衡的安全硬件堆栈也在不断增加——导致成本、性能和安全方面的折衷。Cloudflare 使管理员能够在边缘执行网络防火墙策略，使他们能够精细地控制哪些数据允许进出网络，并提高流量流经网络的可见性。  ✓ 模式兼容性：基于客户端的 ZTNA&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;缺乏细粒度的控制&lt;/td&gt;
          &lt;td&gt;内置安全网关（SWG）&lt;/td&gt;
          &lt;td&gt;未经批准使用应用程序会给企业带来严重的安全问题；如果没有严格的政策，用户可能会访问和篡改敏感数据和其他企业资源。结合 ZTNA 和 SWG，Cloudflare 允许管理员对应用程序内的用户和设备访问权限进行更精细的控制，因此用户和基于角色的组只能访问他们需要的资源。✓ 模式兼容性：基于客户端的 ZTNA&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;用零信任网络访问取代传统-vpn&#34;&gt;用零信任网络访问取代传统 VPN&lt;/h2&gt;
&lt;p&gt;在向无 VPN 安全过渡的漫长而痛苦的过程中，IT 安全领导可能会觉得零信任的承诺很空洞。但是，用零信任网络访问取代 VPN 是可能的，而不需要在协议支持或功能上做出取舍。&lt;/p&gt;
&lt;p&gt;推荐的迁移路径根据驱动你的项目的业务专家而有所不同。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果更快连接到应用程序是你的首要任务，请部署基于客户端的 ZTNA，首先用于非网络应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果加强你的应用程序访问规则的安全性更为重要，那么就从网络应用开始。替换 VPN 只是整个网络转型的第一步。由于向 SASE 模式的过渡可能是压倒性的，我们根据客户采取的方法，分解了一条通往零信任安全的常见路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/can-ztna-replace-vpn/008i3skNly1gvcoknm2onj61tx0u0thb02_hu9976836176459187849.webp 400w,
               /blog/can-ztna-replace-vpn/008i3skNly1gvcoknm2onj61tx0u0thb02_hu3782544902699075597.webp 760w,
               /blog/can-ztna-replace-vpn/008i3skNly1gvcoknm2onj61tx0u0thb02_hu7514404450077187465.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/can-ztna-replace-vpn/008i3skNly1gvcoknm2onj61tx0u0thb02_hu9976836176459187849.webp&#34;
               width=&#34;760&#34;
               height=&#34;346&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes 云集群面临通过 Argo Workflows 实施的网络攻击</title>
      <link>https://cloudnativecn.com/blog/kubernetes-cyberattacks-argo-workflows/</link>
      <pubDate>Wed, 18 Aug 2021 21:05:42 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/kubernetes-cyberattacks-argo-workflows/</guid>
      <description>&lt;p&gt;本文翻译自 &lt;a href=&#34;https://threatpost.com/kubernetes-cyberattacks-argo-workflows/167997/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Cloud Clusters Face Cyberattacks via Argo Workflows&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;译者点评&#34;&gt;译者点评&lt;/h2&gt;
&lt;p&gt;行业中一直不缺安全的声音，安全也是永远绕不过的槛。再优雅再先进的架构设计，无法保障安全也是一文不值，甚至干系到企业的存活。&lt;/p&gt;
&lt;p&gt;近期在云原生领域，安全也是被屡次被提起重视。从 &lt;a href=&#34;https://cloudnative.to/blog/istio-first-security-assessment/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 首次安全评估结果公布&lt;/a&gt;、&lt;a href=&#34;https://mp.weixin.qq.com/s/W8oT2YabhHNSLsWXJbPSnw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 云原生安全白皮书发布&lt;/a&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/PRXtfz2Vc3Q8dhjoazY8Pw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;美国国家安全局出品《Kubernetes 加固指南》&lt;/a&gt;、&lt;a href=&#34;http://www.gov.cn/zhengce/content/2021-08/17/content_5631671.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《关键信息基础设施安全保护条例》的颁布&lt;/a&gt;看出，下到社区到基金会，上到国内外政府对安全的重视。&lt;/p&gt;
&lt;p&gt;近几年开源越来越热，各种的工具层出不穷。仪表盘可以说是离用户最近的一层，也是安全最容易被疏忽的一处，尤其是很多仪表盘并未提供用户校验或者容易配置错误。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文&lt;/h2&gt;
&lt;p&gt;Argo 的 web 仪表盘权限配置错误，会允许未经身份验证的攻击者在 Kubernetes 目标上运行代码，包括加密币挖掘容器。&lt;/p&gt;
&lt;p&gt;安全研究人员发出警告，Kubernetes 集群正受到配置错误的 Argo Workflow 实例的攻击。&lt;/p&gt;
&lt;p&gt;Argo Workflow 是一个开源的、容器原生的工作流引擎，用于在 Kubernetes 上编排并行作业 &amp;ndash; 以加快机器学习和大数据处理等计算密集型作业的处理时间。与此同时，Kubernetes 是一种流行的用于管理云部署的容器编排引擎。&lt;/p&gt;
&lt;p&gt;根据 Intezer 的一项分析，由于一些实例不需要外部用户的认证可以直接通过仪表盘访问，恶意软件运营商正在通过 Argo 将加密旷工投放到云中。因此，这些错误配置的权限可以让威胁者在受害者的环境中运行未经授权的代码。&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&#34;https://www.intezer.com/blog/container-security/new-attacks-on-kubernetes-via-misconfigured-argo-workflows&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;周二发布&lt;/a&gt;的 Intezer 的分析，&amp;ldquo;在许多情况下，配置了允许任何访问用户部署工作流程的权限。在权限配置错误的情况下，攻击者有可能访问一个开放的 Argo 仪表盘并提交他们自己的工作流程。&lt;/p&gt;
&lt;p&gt;研究人员说，这些错误配置还可能暴露敏感信息，如代码、凭证和私有容器镜像名称（可用于协助其他类型的攻击）。&lt;/p&gt;
&lt;p&gt;Intezer 对网络的扫描发现了大量未受保护的实例，这些实例由多个行业的公司运营，包括技术、金融和物流。&lt;/p&gt;
&lt;p&gt;Intezer 表示：&amp;ldquo;我们已经确定了受感染的节点，由于存在数百个错误配置的部署，有可能出现更大规模的攻击&amp;rdquo;。在一个案例中，坏代码在 Docker Hub 的一个暴露的集群上运行了 9 个月才被发现并删除。&lt;/p&gt;
&lt;p&gt;攻击的实施并不困难。研究人员观察到，不同的流行 Monero（门罗币）挖掘恶意软件被部署在位于 Docker Hub 等资源库的容器中，包括 Kannix 和 XMRig。网络犯罪分子只需要通过 Argo 或其他途径将这些容器中的一个拉入 Kubernetes。例如，微软最近&lt;a href=&#34;https://threatpost.com/microsoft-cryptomining-kubeflow/166777/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;标记了&lt;/a&gt; 通过运行机器学习工作流程的 Kubeflow 框架侵占 Kubernetes 的一些矿工。&lt;/p&gt;
&lt;p&gt;研究人员称：“在 Docker Hub 中，仍然存在许多攻击者可以使用的门罗币挖矿选择。通过简单的搜索，可以看到至少有 45 个有数百万下载量的容器”&lt;/p&gt;
&lt;h2 id=&#34;如何检查-argo-的错误配置&#34;&gt;如何检查 Argo 的错误配置&lt;/h2&gt;
&lt;p&gt;研究人员指出，查看权限是否配置正确的最快方法是简单地尝试从企业环境之外的未经认证的隐身浏览器访问 Argo Workflows 仪表盘。&lt;/p&gt;
&lt;p&gt;研究人员补充说，一种更主动技术的检查方法是访问实例的 API 并检查状态码。&lt;/p&gt;
&lt;p&gt;根据分析，“向 [实例：端口]/api/v1/info 发送 HTTP GET 请求，未经授权的用户将收到‘411 Unauthorized’响应状态码，这说明实例配置正确，而成功的响应状态码‘200 Success’可能表明未经授权的用户能够访问该实例”。&lt;/p&gt;
&lt;p&gt;管理员还可以检查日志和工作流时间线中的任何可疑活动。Intezer 指出，任何运行时间过长的工作流都可能表明存在加密挖矿活动。&lt;/p&gt;
&lt;p&gt;研究人员指出，“即使你的集群部署在 Amazon Web Services（AWS）、EKS 或者 Azure Kubernetes Service（AKS）等托管的云 Kubernetes 服务上，责任共担模型仍声明需要为部署的应用安全负责的是云用户，而不是供应商。”&lt;/p&gt;
&lt;h2 id=&#34;云错误配置为网络攻击提供媒介&#34;&gt;云错误配置为网络攻击提供媒介&lt;/h2&gt;
&lt;p&gt;错误配置&lt;a href=&#34;https://threatpost.com/google-cloud-buckets-exposed-misconfiguration/159429/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;持续困扰&lt;/a&gt;着云计算部门和各种规模的组织。去年秋天的一项分析发现，6% 的谷歌云存储桶被错误配置，并向公网开放，任何人都可以访问其内容。&lt;/p&gt;
&lt;p&gt;有时这些失误会成为头条新闻。3 月，&lt;a href=&#34;https://threatpost.com/hobby-lobby-customer-data-cloud-misconfiguration/164980/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有消息称&lt;/a&gt;，Hobby Lobby 将 138GB 的敏感信息放在一个向公网开放的云存储桶中。这些信息包括客户的姓名、支付卡的部分详细信息、电话号码以及实际地址和电子邮件地址。&lt;/p&gt;
&lt;p&gt;根据云原生计算基金会（CNCF）&lt;a href=&#34;https://www.cncf.io/wp-content/uploads/2020/11/CNCF_Survey_Report_2020.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020 年调查&lt;/a&gt;，91% 的受访者正在使用 Kubernetes，受访者称使用和部署容器的首要挑战是复杂性、安全性和缺乏培训。&lt;/p&gt;
&lt;p&gt;Intezer 研究人员指出，“Kubernetes&amp;hellip;&amp;hellip;是 GitHub 上最受欢迎的存储库之一，有超过 10 万个提交，超过 3000 个贡献者。每年，使用 Kubernetes 的企业和他们部署的集群数量都在稳步增加。由于企业使用容器和 Kubernetes 集群所面临的这些挑战，攻击者从未有更大的机会来利用安全方面的弱点&amp;hellip;&amp;hellip;仍然存在错误配置或利用的可能性。”&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DevSecOps——在多云环境中确保供应链安全的关键</title>
      <link>https://cloudnativecn.com/blog/devsecops/</link>
      <pubDate>Fri, 30 Jul 2021 13:05:42 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/devsecops/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://www.infoq.com/articles/devsecops-supply-chain/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevSecOps: the Key to Securing Your Supply Chain in a Multi-Cloud Threatscape&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;主要收获&#34;&gt;主要收获&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以将最近的供应链攻击作为 DevSecOps 的一个试金石，我们可以看到在 DevOps 中确实需要一个改进的安全框架。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随着网络安全的关注度的提升以及 IT 安全支持的激增，企业应该首先评估他们的 DevOps 做法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DevSecOps 是这样的：利用 CI/CD 平台和容器化，在 SDLC（软件开发生命周期）内增加测试和扫描，并且使用 AI/ML 来最大限度的减少手动安全措施。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全左移或许需要整个组织在多个业务部门之间进行组织架构改变，但整体安全态势将很快得到大幅改善。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用 DevSecOps 框架的企业不仅可以加强对漏洞的预防，还可以增加商业价值，因为他们可以提供更安全的产品和服务，更好地保护其业务和客户。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;devsecops-恰逢其时&#34;&gt;DevSecOps 恰逢其时&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;随着近期的供应链和云攻击，企业现在正在寻求开发人员来增强企业安全&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;由于迅速转变为远程和混合工作模式，我们看到了所有部门在云计算应用和数字转型方面的爆炸式增长。这种转变本质上并不坏，但是企业需要记住的是——使用的服务越多，可以暴漏的&lt;a href=&#34;https://www.infoq.com/news/2021/05/aqua-security-report/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;漏洞&lt;/a&gt;和风险也就越多。随着漏洞暴露数量的增多，企业正在寻求新的方法来增强安全。2021 年的 &lt;a href=&#34;https://www.gartner.com/en/newsroom/press-releases/2021-05-17-gartner-forecasts-worldwide-security-and-risk-managem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gartner 预测&lt;/a&gt;中，全世界花费在信息安全和风险管理技术和服务上的费用将增长 12.4%，达到了 $1504 亿。&lt;/p&gt;
&lt;p&gt;你或许在想——但今天的企业已经有了一些安全流程以及供应商风险管理计划。你想的没有错，企业拥有几个项目和合作伙伴，旨在帮助企业和客户对公司的安全态势感到满意。直到现在，这也是企业安全的主要内容——走过场和打擦边球。这将永远不会真正确保一个公司的安全。事实上，供应商风险管理的缺失或不足可能是当今公司在供应链安全方面面临的最严重威胁。&lt;/p&gt;
&lt;p&gt;随着 2021 年网络安全的盘点，出现了一种转变，也许是由于云计算的利害关系比以往任何时候都高。企业正感受到优先考虑和花费在更现代安全上的压力。Gartner 在&lt;a href=&#34;https://www.gartner.com/en/newsroom/press-releases/2020-10-20-gartner-survey-of-nearly-2000-cios-reveals-top-performing-enterprises-are-prioritizing-digital-innovation-during-the-pandemic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CIO in 2021&lt;/a&gt;中发现，网络安全是新支出的首要任务。&lt;/p&gt;
&lt;p&gt;GitLab 最新的年度&lt;a href=&#34;https://about.gitlab.com/developer-survey/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevSecOps 报告&lt;/a&gt;中指出，绝大多数的 IT 和安全从业人员会将他们的投资聚焦在云计算上，其次是 AI。在企业奔向供应商以确保自己和客户的安全之前，他们应该评估从 DevOps 开始，在内部可以采取哪些实际的、积极的措施。&lt;/p&gt;
&lt;p&gt;曾几何时，开发人员和企业领导者很少考虑安全的问题——他们认为这是 CIO 和安全团队的事情。尽管我们已经被推到了一个多云环境中，但是云安全和合规问题依旧是事后才考虑的，参考 PwC 的&lt;a href=&#34;https://www.pwc.com/us/en/tech-effect/cloud/cloud-business-survey.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云业务安全&lt;/a&gt;。好消息是，在调查中发现，这些 C 开头的大佬们，不仅仅是 CIO，正在对云安全和整个组织的安全负责。&lt;/p&gt;
&lt;p&gt;随着现代人对于进入市场的期待，今天的安全领导正在为快速开发踩刹车，并将开发人员纳入安全范畴。当开发人员通过 CI/CD Pipeline 匆忙写代码时，企业发现安全测试和检查往往是可以被绕过的，是不充分的，是可以妥协的。他们仍然在努力解决这个难题，寻找正确的答案。&lt;/p&gt;
&lt;p&gt;进入 DevSecOps——这个框架不仅仅是一个流行词或者是一时的趋势。我认为 DevSecOps 正在成为 DevOps 的同义词。因为今天的开发者对安全的期望越来越高。在&lt;a href=&#34;https://about.gitlab.com/solutions/dev-sec-ops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitlab&lt;/a&gt;，我们将这些组件定义为 DevSecOps 端到端安全框架的关键：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用程序安全测试和修复&lt;/strong&gt;：采用大量的扫描，如 SAST、DAST 和安全检测&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云原生应用保护&lt;/strong&gt;：使用 Kubernetes 和容器扫描来识别漏洞和保护应用程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;政策合规性和可审计性&lt;/strong&gt;：通过持续的文件和透明度，满足许可证合规标准&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SDLC 平台安全&lt;/strong&gt;：在业界领先的 CI/CD 平台上创建代码，优先考虑并满足 IT 安全标准&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;企业的主要目的就是创建有价值和成功的产品或者服务，以期在市场占据主导地位，但是我们看到，在未来的企业中，安全将把好的和伟大的分开。为了避免重大泄漏，就像近期的 Kaseya，Colonial Pipeline，SolarWinds 和 JBS 供应链攻击，所有领导人都必须深入研究他们的安全程序，并成为安全倡议的积极参与者。领导人在安全的重要性上没有保持一致和统一，如果要改善整个工程和产品组织的安全，他们必须从这里开始。&lt;/p&gt;
&lt;h2 id=&#34;devsecops-现状&#34;&gt;DevSecOps 现状&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;研究表明，安全人员正在采用安全第一的思维模式，但仍然需要更多安全和 IT 的协作，积极有效的框架以及增加对 AI/ML 工具的使用。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;GitLab 公司的年度 DevSecOps 报告发现，在使用 DevOps 的组织中，安全性显著提高。事实上，72% 的安全专家将他们自己组织的安全努力评为“良好”或“强大”。再者，DevOps 中运行安全扫描的也比以往多：超过一半的运行了 SAST，44% 的运行了 DAST 扫描，接近 50% 的扫描了容器和依赖。所有这些都表明，行业对 DevSecOps 方法的接受程度在不断提高。实际中，70% 的安全团队表明安全已经左移了。&lt;/p&gt;
&lt;p&gt;然而，在将安全继承到 DevOps 时依旧有一些绊脚石。超过四分之三的安全团队受访者仍然认为开发人员发现的错误太少，而且在 SDLC 中发现的时间太晚。在 DevOps 团队中，42% 的受访者感觉到安全测试在流程中发生的太晚了，近 37% 的受访者表示追踪缺陷修复的状态非常具有挑战性。所有这些都表明在开发过程中对安全采取了一种被动的方法。开发人员和安全团队往往停留在他们各自的专业领域，然后在出现漏洞时做出反应。&lt;/p&gt;
&lt;p&gt;为了减少手动测试和扫描，DevOps 从业者开始利用 AI/ML 工具和技术。GitLab 的 DevSecOps 调查报告发现，四分之一的受访者声称实现了全自动化测试，比 2020 年增长了 13%。调查进一步发现，使用 AI/ML 或者机器人来测试和评审代码的数量在急剧飙升。75% 的团队已经在用或者正在计划使用此技术，比 2020 年上升了 41%。CI/CD 平台正在加强其 ML 能力，以实现更顺畅、更安全的 DevOps 流程，这些工具的使用在未来几年只会越来越普遍。&lt;/p&gt;
&lt;p&gt;自动 DevSecOps 成为主流以来，已经取得了一些进展，在企业开始以积极主动的心态对待安全问题之前，他们不会成功采用 DevSecOps。由于安全和 IT 部门在一个单一的愿景上保持一致，成功地执行一个既定策略，并使他们的工作流程现代化和安全化，他们的被动将减少，主动将增加，同时更具协同性。&lt;/p&gt;
&lt;h2 id=&#34;克服困难采用-devsecops-框架&#34;&gt;克服困难，采用 DevSecOps 框架&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;随着公司持续向云迁移，越来越明显的是，他们应该将 DevSecOps 继承到云基础设施中。可能会产生一些痛点，但是持续时间不会太长而且回报率极高。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;有效采用 DevSecOps 的一个最大的障碍就是人们认为它会与进入市场的速度相悖。现如今，企业的成功取决于快速部署和快速、迭代开发。最初，实施 DevSecOps 框架可能会感觉到在你的 CI/CD 管道中设置了减速带。新的安全流程有可能会给优先考虑安全问题的安全团队和专注于推进发布的 IT 团队带来挑战，但伴随着这种 &amp;ldquo;摩擦 &amp;ldquo;也会带来 DevSecOps 实施的最初结果——端到端的安全处于起步阶段。实施后不需要很长时间就能看到积极的结果。&lt;/p&gt;
&lt;p&gt;最重要的就是在 DevSecOps 中，要让球转起来。组织必须从某个地方开始，他们不需要几个安全平台和工具。企业可以马上开始，当你开发出适合你的组织的 DevSecOps 框架时，你的安全实践将不得不与你的业务一起发展。&lt;/p&gt;
&lt;p&gt;随着组织的演变，扩容是 DevSecOps 扩容的另外一个常见痛点。企业在扩大业务规模时，可能很难预测扩展 DevSecOps 的成本。除此以外，云工具链也变得越来越复杂，因此很难在一个工具中设置政策或工作流程，并知道它们在整个工具链中得到了遵守。然而，这些问题可以通过采用单一的、包括安全在内的端到端 DevOps 工具来解决。单一的 DevSecOps 平台有可能实现检测和缓解应用程序威胁的全新方法，同时比非集成平台更有效地做到这一点。&lt;/p&gt;
&lt;p&gt;企业可以通过以下方式确保他们正在进行适当的安全调查，加强他们的供应链，并改进他们的 DevSecOps 方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保持依赖的可视化，确保开发软件的每个人都熟知依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 CI/CD Pipeline 来将 SAST 和 DAST 测试自动集成到开发流程中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让开发人员在编写代码时完成漏洞和依赖性扫描，甚至在提交或合并之前就完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现自动化的 AI/ML 工具，减少人工安全，增加支持扫描、监控和审查&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调研在多云环境中敏感信息管理的解决方案&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;加强漏洞预防和改善整体安全态势&#34;&gt;加强漏洞预防和改善整体安全态势&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;长期以来，像供应链、勒索软件或云计算攻击等重大违规事件都是以反应性措施来处理的。通过在整个软件开发生命周期中优先考虑安全问题。团队可以抓住并解决许多这类攻击中所利用的漏洞，并大大降低漏洞的风险。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;通过安全左移，领导者可以优先进行安全测试，从而更快地修复漏洞，并允许开发人员更快地发布代码。&lt;/p&gt;
&lt;p&gt;事实上，这种新的运作模式超越了左移，使安全成为各学科和组织部门的优先事项。DevSecOps 将改变潜在的企业文化，使其拥抱安全并考虑决策对于下游安全的影响。这种文化上的转变对安全来说似乎并不重要，但是，最近针对国家供应链的重大勒索软件攻击的增加表明，目前的学科划分在安全方面留下了缺口，导致了可利用的漏洞。&lt;/p&gt;
&lt;p&gt;IT、安全和企业领导必须通力协作来确保他们的组织是一个成功的、被保护的整体。随着越来越多的部门承担起安全责任，企业可以发布从第一天起就考虑到安全的应用程序。&lt;/p&gt;
&lt;p&gt;为了变成一个安全优先的组织并且构建出 DevSecOps 框架，这里有一些你的组织应该采取的具体的下一步措施：&lt;/p&gt;
&lt;p&gt;1 定义你的 KPI：全面审视你的企业在哪些方面可以提高安全性——评估你的供应商风险、合规要求和安全漏洞。这一阶段的探索将确定你的流程、你的投资以及你认为可以改进的地方。&lt;/p&gt;
&lt;p&gt;2 内部集会：在你的董事会和你的团队中，你需要一个组织性的安全优先级。表明企业的每一块都要发挥作用，而保护企业的最好办法就是一起行动。&lt;/p&gt;
&lt;p&gt;3 流程一致性：在各业务部门之间划分安全职责的所有权，并准备好与组织内的新人进行合作。&lt;/p&gt;
&lt;p&gt;4 确保提议的优先级：在开始的时候，你的安全计划可能会感觉更多的是被动的，并且关注眼前的需求。开始时，要立即修补明显的安全漏洞，然后努力建立一个更积极主动的长期模式。&lt;/p&gt;
&lt;p&gt;5 执行策略：在你的团队中积极主动与协作，在整个组织中分享反馈和进展。&lt;/p&gt;
&lt;p&gt;6 发展你的战略：你不能设置和忘记安全措施。你的协议和优先事项应该随着你业务的发展而发展。安全就像其他管道一样，它需要不断的迭代和改进。&lt;/p&gt;
&lt;p&gt;向 DevSecOps 框架的过渡，一开始会感觉像其他组织转变一样，但接受这一转变的公司将迅速改善其整体安全状况。加强安全是一项商业决策，需要整个组织的支持，它影响着整体商业价值。成功地实施 DevSecOps 框架使企业能够：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;增加商业价值：你的企业将能够提供更安全的数据、更安全的产品和竞争优势，从而加强你的品牌和形象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增加客户价值：有了这个框架，你可以满足客户的安全要求，提高对客户数据的保护。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持合规：随着更多行业标准和政府标准合规要求的推出，你需要做好满足需求的准备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立共同体：当你把安全放在首位时，你将与你的客户和合作伙伴建立信任和信心。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;以被动的方式来应对安全是有缺陷的。伴随着大面积的向云迁移，攻击面比以往更大了，组织需要在他们的开发中认真考虑安全所处的角色。企业越积极主动，他们及他们的用户就会得到更好的回报。&lt;/p&gt;
&lt;p&gt;公有和私有部门在网络安全方面采取了比以往更强硬的立场。五月份，拜登政府宣布了&lt;a href=&#34;https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;行政命令&lt;/a&gt;，旨在为整个私营和公共部门建立新的安全标准。随着网络安全标准和审查的增加，强制性报告和信息共享，企业将被期望，甚至更多，给予安全他们应有的注意。公司一直有自己的安全和客户的安全需要考虑，但在国家安全方面也要发挥越来越大的作用。企业不能等待。他们需要一个决定性的转变。他们需要一个 DevSecOps 框架。&lt;/p&gt;
&lt;p&gt;这是一个 IT 和安全专业人士奋起直追的时刻。一个 DevSecOps 框架或一个更敏锐的风险管理流程可以为 Kaseya、Colonial Pipeline、SolarWinds 和 JBS 做什么。我们永远不会知道，我们所知道的是我们现在可以采取的实际行动。&lt;/p&gt;
&lt;p&gt;虽然几年来业界一直在讨论向左转移的问题，现在是时候停止口头宣告并开始采取行动的时候了，风险是巨大的：成为网络攻击的受害者、失去竞争力或者失去客户的信任。雇员、用户和消费者应该得到果断的行动，以提供更安全的产品并使他们得到保护。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>零信任架构白皮书</title>
      <link>https://cloudnativecn.com/blog/zero-trust-architecture/</link>
      <pubDate>Thu, 22 Apr 2021 12:03:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/zero-trust-architecture/</guid>
      <description>&lt;p&gt;本文译自 Tetrate 发布的&lt;a href=&#34;https://www.tetrate.io/white-paper-zero-trust-architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《零信任架构白皮书》&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h2&gt;
&lt;p&gt;传统的数据中心网络安全架构试图在一个优美的内部花园周围建立强大的围墙。这种堡垒模型长久以来存在一个固有的弱点，即当（而不是如果）入侵者渗透到周边时，他们就可以控制整个花园。虽然这个弱点早就存在，但随着进入数据中心的入口的增加及工作负载的扩展的趋势增加，这个弱点越发严重。&lt;/p&gt;
&lt;p&gt;零信任网络架构提供了一条前进的道路，它解决了基于周界安全的弱点，采取的立场是网络本身就是敌对的；周界背后的安全是一种幻觉，野蛮人已经撞开了大门。&lt;/p&gt;
&lt;p&gt;虽然零信任需要对现状进行重大反思，但它远不是一个崇高的、不可实现的目标。现在就有一些工具可以开始实施零信任网络架构。这些工具和实践可以逐步实施，以满足你的需要，而不是要求你全盘重新构建你的整个网络安全基础设施。&lt;/p&gt;
&lt;h2 id=&#34;传统安全模式的弱点&#34;&gt;传统安全模式的弱点&lt;/h2&gt;
&lt;p&gt;周边安全薄弱的原因与现代军队放弃大规模固定防御的原因类似：一旦被渗透，战斗就会失败；而周边安全最终也会被渗透。&lt;/p&gt;
&lt;p&gt;**单纯的周边安全提供了糟糕的控制粒度。**如果周界内的所有流量都是可信的，那么一个漏洞就会使周界内的一切都变得脆弱。当网络服务只有几十种时，这可能是可控的，而且可以通过物理位置严格限制访问，但服务激增到几十万种，而且都是以相同的访问水平相互通信，这使得目前的技术状态无法维持，特别是由于一个被破坏的服务可以转移到许多其他服务。&lt;/p&gt;
&lt;p&gt;多年来，业务需求已经削弱了外围的完整性。出于需要，防火墙上被打了很多洞，导致了多个暴露的入口点和难以管理的防火墙规则的扩散，使外围更像是一条马奇诺防线，而不是围墙和城堡。&lt;/p&gt;
&lt;p&gt;面对周界几乎消失的情况，为改善周界安全模式所做的新努力，如微分割和软件定义网络，有助于减少服务周围的攻击面。但是，它们也只是部分解决方案，其代价是复杂性的增加和配置规则的爆炸。分割仍然提供了糟糕的粒度。例如，隔离网络服务器和数据库服务器可以减少这些服务周围的攻击面，但网络服务器可能支持许多应用程序，它们各自可能引入的漏洞仍然是不透明的。&lt;/p&gt;
&lt;h2 id=&#34;零信任的信条&#34;&gt;零信任的信条&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;信任不是理想的状态，信任是你想避免的失败点&lt;/em&gt;&amp;quot;——约翰·金德瓦格&lt;/p&gt;
&lt;p&gt;零信任是一种方法，一种对网络安全的思考方式，而不是任何特定的架构或实现。它从一个假设开始，即网络上没有安全的地方。你应该把你的数据中心，不管它是否喜欢，当作它所有的数据和服务都暴露在公共互联网上。&lt;/p&gt;
&lt;p&gt;在零信任模式中，与传统的周边安全不同，可及性并不意味着授权。零信任旨在缩小资源周围的隐性信任区域，最好是缩小到零。在一个零信任的网络中，所有对资源的访问都应该是这样的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;经过认证和动态授权&lt;/strong&gt;：不仅在网络层和服务间层，而且在应用层。网络位置并不意味着信任。在允许任何访问之前，服务身份和终端用户凭证是经过认证和动态授权的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时间限制&lt;/strong&gt;：认证和授权被约束在一个短暂的会话中，之后必须重新建立。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在空间上有界限&lt;/strong&gt;：一个服务周围的信任周界应该尽可能小。加密，既是为了防止窃听，也是为了确保信息的真实性和未被篡改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可观察&lt;/strong&gt;：所以所有资产的完整性和安全态势可以被持续监控，策略的执行可以持续得到保证。另外，从观察中获得的洞察力应该被反馈到改进策略上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么它更好&#34;&gt;为什么它更好？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可访问性不是授权——与周边安全不同，对一个服务的访问并不仅仅是因为该服务是可以到达的，它还必须经过明确的认证和授权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;经过认证和授权的工作负载受到保护，不受周边漏洞的影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在时间上的约束限制了凭证受损的风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在空间上的约束允许策略执行的高颗粒度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态策略执行确保授权策略是最新的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加密限制了侦查，并提供了通信的真实性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;细粒度的可观察性允许实时保证策略的执行，以及对历史上如何执行策略的事后审计，还有用于故障排除和分析的必要数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;零信任系统的试金石是，部署在该系统中的应用程序在公开曝光时不会有任何变化。如果实施得当，一个零信任的安全架构在公开的互联网上运行时与在防火墙后面运行时一样安全。&lt;/p&gt;
&lt;h3 id=&#34;我什么时候需要它&#34;&gt;我什么时候需要它？&lt;/h3&gt;
&lt;p&gt;虽然每个组织都可能从采用零信任原则中受益，但期望几十年的基础设施和业务流程全盘转变为新模式是不现实的。&lt;/p&gt;
&lt;p&gt;特定的压力可能会促使你尽早这样做。当你的基础设施跨越不同的供应商时，例如，分裂的企业内部和云部署或混合云部署，在这些扩展的网络上大规模应用 VPN 和 NAT 的复杂性和脆弱性可能使得在短期内对这些部署应用零信任网络原则具有成本效益和风险效率。&lt;/p&gt;
&lt;h2 id=&#34;zta-组件&#34;&gt;ZTA 组件&lt;/h2&gt;
&lt;p&gt;NIST 提出了三个逻辑组件来实现动态授权和认证。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个策略引擎（Policy Engine，简称 PE），负责确定授权。&lt;/li&gt;
&lt;li&gt;一个策略管理员（Policy Aadminstrator，简称 PA），用于根据策略引擎的结果建立和/或关闭通往资源的通信路径。&lt;/li&gt;
&lt;li&gt;策略执行点（Policy Enforcement Point，简称 PEP），位于提出请求的主体和目标资源之间，启用、监测和终止它们之间的连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图一&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图一&#34; srcset=&#34;
               /blog/zero-trust-architecture/008i3skNly1gpsrzpm3cvj31n40u0whm_hu11535618639255025632.webp 400w,
               /blog/zero-trust-architecture/008i3skNly1gpsrzpm3cvj31n40u0whm_hu16620584165763131605.webp 760w,
               /blog/zero-trust-architecture/008i3skNly1gpsrzpm3cvj31n40u0whm_hu15605684477509360029.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/zero-trust-architecture/008i3skNly1gpsrzpm3cvj31n40u0whm_hu11535618639255025632.webp&#34;
               width=&#34;760&#34;
               height=&#34;386&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图一
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这种模式下，主体要求的所有工作负载必须有一个身份，可以在 PEP 进行认证和授权。策略决策点对这些身份执行策略，并在允许访问之前执行认证和授权。在这里，授权是基于细粒度的策略；可及性不算作授权。数据平面的 PEP 允许在运行时对系统进行观察，并确保持续的合规性和治理控制。&lt;/p&gt;
&lt;h2 id=&#34;实施&#34;&gt;实施&lt;/h2&gt;
&lt;p&gt;由于零信任不是一个蓝图，而更像是一种设计理念，因此有许多潜在的方法来实现零信任架构。作为服务网格和下一代访问控制（NGAC）技术的创始人和实施者，我们认为服务网格与 NGAC 相结合，为建立零信任架构网络提供了最佳基础。&lt;/p&gt;
&lt;p&gt;服务网格提供了你所需要的重要基元：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集中管理的策略授权&lt;/li&gt;
&lt;li&gt;分布式策略执行点——PEP 与资源访问点（RAP 共同部署）&lt;/li&gt;
&lt;li&gt;内置支持基于运行时身份而非网络位置的工作负载身份&lt;/li&gt;
&lt;li&gt;内置支持终端用户的应用级认证和授权，允许对网状结构中的每个应用进行全局和一致的策略执行&lt;/li&gt;
&lt;li&gt;对线上数据进行加密&lt;/li&gt;
&lt;li&gt;内置可观察性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网格提供了操作上的保证，你可以在部署认证和授权系统时使用网格，使它们更安全，更容易管理。我们可以很容易地用服务网格中的组件来重新绘制图一中所代表的 NIST 的逻辑架构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图二&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图二&#34; srcset=&#34;
               /blog/zero-trust-architecture/008i3skNly1gpsrzq4xikj31da0u0acq_hu12885104785955618909.webp 400w,
               /blog/zero-trust-architecture/008i3skNly1gpsrzq4xikj31da0u0acq_hu10549407337952430914.webp 760w,
               /blog/zero-trust-architecture/008i3skNly1gpsrzq4xikj31da0u0acq_hu9806111517326918898.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/zero-trust-architecture/008i3skNly1gpsrzq4xikj31da0u0acq_hu12885104785955618909.webp&#34;
               width=&#34;760&#34;
               height=&#34;463&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图二
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;服务网格的透明性允许我们逐步采用，而不需要对你的安全基础设施和业务流程全面推倒重建。网格对应用程序、部署和安全问题的解耦意味着你可以开始在现有的基础设施上建立一个零信任的架构，而不扰乱你的业务流程和应用程序交付生命周期。&lt;/p&gt;
&lt;h2 id=&#34;案例研究美国国防部-platform-one&#34;&gt;案例研究——美国国防部 Platform One&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;老实说，我任务在没有服务网格的情况下无法获得任何有意义的成功；也许在 2018 年可以，但在 2020 年和这以后不可能。&amp;rdquo; ——美国空军首席软件官尼古拉斯·M·查兰（Nicolas M. Chaillan）。&lt;/p&gt;
&lt;p&gt;美国国防部在空军首席软件官 Nicolas M. Chaillan 的主持下，对其开发和运营软件的方式进行了革新。由 Chaillan 领导的在整个国防部发展 DevSecOps 实践的团队 Platform One，提供了多种企业服务，将 &amp;ldquo;自动化的软件工具、服务和标准带到国防部的项目中，使作战人员能够在安全、灵活的情况下创建、部署和操作软件应用。&lt;/p&gt;
&lt;p&gt;这些服务包括他们的 DevSecOps 平台（DSOP），这是一个经批准的、符合 CNCF 标准的 Kubernetes 发行版的集合，还有 Istio、基础设施即代码的手册和加固的容器。&lt;/p&gt;
&lt;p&gt;根据 Chaillan 的说法，&amp;ldquo;拥有一个集中的、由政府提供的、团队可以来使用的 DevSecOps 堆栈，这改变了游戏规则。&amp;ldquo;过去，软件更新周期长达数年，而现在国防部 &amp;ldquo;每天都在推送代码，一天推送多次&amp;hellip;&amp;hellip;每个项目的初始计划时间每 5 年平均节省 12 至 18 个月。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Istio 是他们架构的一个主要支柱，它提供了服务网格的能力，特别是它实现零信任模型的方式。当被问及为什么他们使用服务网格而不是仅使用入口控制器时，他不仅提到每个应用程序默认都有 mTLS 传输加密，而且 &amp;ldquo;一旦你转向微服务和容器，你必须管理东西向流量，这与南北向完全不同……你需要确保横向移动受到限制。你不希望一个坏人获得一个容器的访问权，并能够&amp;hellip;&amp;hellip;横向移动到其他容器。除了 SSO 和 mTLS，Platform One 的架构使用 Istio 来执行东西向白名单，并在容器之间提供策略执行点。&lt;/p&gt;
&lt;p&gt;该网格将策略执行从应用堆栈中剥离出来，并将其透明地转移到 sidecar 代理上。Platform One 能够将不同应用团队独立构建的多个 &amp;ldquo;雪花 &amp;ldquo;应用级 SSO 和加密实现整合为一个加固的单点登录和授权库，可供企业范围内所有应用使用。这就减轻了开发团队在每个应用中构建安全的负担。它还通过对单一的、经过严格审查的实施方案进行标准化，大大降低了漏洞风险。&lt;/p&gt;
&lt;p&gt;Chaillan 说，&amp;ldquo;如果你不使用服务网格，你最终不得不按语言、按微服务来做。而现在你是紧密耦合的。而且，比方说，在过去如果你想要更新加密位数，你就必须更新所有容器，而现在只需要更新服务网格中的 sidecar，现在你已经解耦了。仅此一点，就值得使用服务网格。”&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;周边安全模式及其渐进式的后继者过于脆弱和复杂，无法满足现代应用开发和部署的需要。现在应用程序的构建方式需要一个动态的、灵活的安全解决方案，一个既能集中管理又能普遍适用于所有应用程序开发团队的解决方案。零信任架构在网络和应用层面提供了急需的安全改进，而服务网格为实现零信任提供了最强大、动态和灵活的方式。&lt;/p&gt;
&lt;p&gt;在所有服务和所有应用之间部署全局管理的策略执行点，服务网格提供了插入零信任功能的模拟点，如 SSO、mTLS 和动态授权。通过在全局范围内将安全责任从单个应用程序抽离到服务网格，企业有可能逐步采用零信任原则，而无需重写应用程序或改变现有流程。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云安全策略的创建</title>
      <link>https://cloudnativecn.com/blog/cloud-security-policy/</link>
      <pubDate>Fri, 18 Dec 2020 13:05:42 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/cloud-security-policy/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://phoenixnap.com/blog/cloud-security-policy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Creating a Cloud Security Policy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;任何想要保护他们自己云资产的公司都需要云安全策略。安全策略有助于保持云数据的安全，且能赋予快速应对威胁和挑战的能力。&lt;/p&gt;
&lt;p&gt;文章将解释云安全策略的价值。请继续阅读来了解这些策略都包含什么、它们能够带来什么收益以及如何为你的业务作出正确的选择。&lt;/p&gt;
&lt;h2 id=&#34;什么是云安全策略&#34;&gt;什么是云安全策略？&lt;/h2&gt;
&lt;p&gt;云安全策略是公司在云运营过程中的一些正式准则。这些指导定义了安全策略，对于所有对云资产安全的决策进行指导。云安全策略指：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够或不能够迁移至云上的数据类型&lt;/li&gt;
&lt;li&gt;团队如何应对每种数据类型的风险&lt;/li&gt;
&lt;li&gt;将负载迁移至云上的决定由谁来做&lt;/li&gt;
&lt;li&gt;谁应该被授权来对数据进行访问或者迁移&lt;/li&gt;
&lt;li&gt;法规条款和&lt;a href=&#34;https://phoenixnap.com/blog/soc-2-audit-compliance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;当前合规状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;正确应对威胁，黑客攻击和&lt;a href=&#34;https://phoenixnap.com/blog/what-is-data-breach-how-to-prevent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据泄漏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;围绕风险优先级的规则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;云安全策略是一个公司安全项目中的重要组成部分。安全策略能够保证信息的完整性和私密性，而且能够帮助团队快速作出正确的决定。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/cloud-security-policy/what-is-a-cloud-security-policy_hu15701812384022434077.webp 400w,
               /blog/cloud-security-policy/what-is-a-cloud-security-policy_hu14060012386831594797.webp 760w,
               /blog/cloud-security-policy/what-is-a-cloud-security-policy_hu16001436370954020076.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cloud-security-policy/what-is-a-cloud-security-policy_hu15701812384022434077.webp&#34;
               width=&#34;760&#34;
               height=&#34;386&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;云安全策略的必要性&#34;&gt;云安全策略的必要性&lt;/h2&gt;
&lt;p&gt;尽管云计算能够带来很多收益，但是云计算服务也具有一些安全隐患：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第三方设置中缺乏安全控制&lt;/li&gt;
&lt;li&gt;多云环境中可见性差&lt;/li&gt;
&lt;li&gt;有足够的空间来窃取和滥用数据&lt;/li&gt;
&lt;li&gt;云是 &lt;a href=&#34;https://phoenixnap.com/blog/prevent-ddos-attacks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DDos 攻击&lt;/a&gt; 的常见目标&lt;/li&gt;
&lt;li&gt;攻击会从一个环境快速扩散至另一个环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;云计算的风险会波及着每个部门以及网络中的所有设备。因此，保护必须是强劲的、多样的以及大范围的。可靠的云安全策略能够提供上述所有的品质。如果一家公司依赖 &lt;a href=&#34;https://phoenixnap.com/security/data-security-cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云服务&lt;/a&gt;。下述实践提供了需要保护云数据方面的一定层次的可见性和控制性。&lt;/p&gt;
&lt;h3 id=&#34;云安全策略-vs-标准&#34;&gt;云安全策略 vs 标准&lt;/h3&gt;
&lt;p&gt;云安全标准定义了支持云安全策略执行的一些流程。安全策略和标准协同工作，相辅相成。&lt;/p&gt;
&lt;p&gt;标准涵盖了公司云计算的如下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用云平台来托管工作负载&lt;/li&gt;
&lt;li&gt;DevOps 模型以及在开发中包含云应用程序、API 和服务&lt;/li&gt;
&lt;li&gt;分割策略&lt;/li&gt;
&lt;li&gt;资产标记和分类&lt;/li&gt;
&lt;li&gt;评估资产配置和安全等级的流程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常，策略规则都是静态的。标准都是动态的，而你需要经常修改它们来确保能够跟上最新的技术和网络威胁。&lt;/p&gt;
&lt;p&gt;请参考我们的文章 &lt;a href=&#34;https://phoenixnap.com/blog/security-vs-compliance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《安全 vs 合规》&lt;/a&gt; 来查看关于这两个术语之间核心区别的深度分析。&lt;/p&gt;
&lt;h2 id=&#34;如何创建云安全策略8-步法&#34;&gt;如何创建云安全策略（8 步法）&lt;/h2&gt;
&lt;p&gt;在你开始创建策略以前，请确保你对你的云运维具有充足的认识。在撰写策略以前了解它们可以避免一些不必要的修改和返工。&lt;/p&gt;
&lt;h3 id=&#34;第一步相关法律的说明&#34;&gt;第一步：相关法律的说明&lt;/h3&gt;
&lt;p&gt;如果你的公司必须要遵守一些隐私和规格规定，你就要考虑它们是如何影响安全策略的，所有基于云计算的活动都必须遵守法律法规。&lt;/p&gt;
&lt;h3 id=&#34;第二步评估云厂商的安全控制&#34;&gt;第二步：评估云厂商的安全控制&lt;/h3&gt;
&lt;p&gt;不同的云厂商提供不同等级的安全控制。检查你合作伙伴的安全实践并形成与产品一致的解决方案。&lt;/p&gt;
&lt;h3 id=&#34;第三步分配角色和访问权限&#34;&gt;第三步：分配角色和访问权限&lt;/h3&gt;
&lt;p&gt;为你的员工制定明确的角色，设置他们对于应用和数据的访问权限。只允许员工访问他们需要执行任务时所需的资产。此外，需要定义你的公司如何记录和检查访问权限。&lt;/p&gt;
&lt;h3 id=&#34;第四步保护你的数据&#34;&gt;第四步：保护你的数据&lt;/h3&gt;
&lt;p&gt;确定如何保护公司数据。大多数业务选择对迁移至云和互联网的所有数据进行加密。你还应该记录内部和外部数据存储的安全规则。&lt;/p&gt;
&lt;p&gt;通常，厂商提供应用程序接口 (API) 来作为他们服务的一部分。可以考虑使用 API 来增强加密和 &lt;a href=&#34;https://phoenixnap.com/blog/data-loss-prevention-best-practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;防止数据丢失 (DLP) &lt;/a&gt;策略。&lt;/p&gt;
&lt;h3 id=&#34;第五步保护端点&#34;&gt;第五步：保护端点&lt;/h3&gt;
&lt;p&gt;被感染的单个端点会造成数据在多云中的泄漏。因此，你必须围绕云计算连接来设置明确的规则以避免此事的发生。这些步骤包括安全套接字层（&lt;a href=&#34;https://phoenixnap.com/kb/types-of-ssl-certificates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSLs&lt;/a&gt;）网络流量扫描和监控规则。&lt;/p&gt;
&lt;h3 id=&#34;第六步定义响应&#34;&gt;第六步：定义响应&lt;/h3&gt;
&lt;p&gt;策略不应仅仅包含预防。应该考虑一些团队能够处理数据泄漏、异常报告流程及制定取证功能的实际方法。这也能帮助你针对 &lt;a href=&#34;https://phoenixnap.com/disaster-recovery-as-a-service-draas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;灾难恢复&lt;/a&gt; 建立一些规则。&lt;/p&gt;
&lt;h3 id=&#34;第七步确保良好的集成&#34;&gt;第七步：确保良好的集成&lt;/h3&gt;
&lt;p&gt;如果你有多种安全策略，确保团队正确的对它们进行了集成。差劲的结合方案反而会制造出漏洞，因此应找到一条合适的路来集成和利用公司的安全设备。&lt;/p&gt;
&lt;h3 id=&#34;第八步执行安全审计&#34;&gt;第八步：执行安全审计&lt;/h3&gt;
&lt;p&gt;定期检查和升级组件，以确保走在最新威胁之前。因此，对厂商的 &lt;a href=&#34;https://phoenixnap.com/blog/service-level-agreement-best-practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SLA&lt;/a&gt; 做例行检查就不会使你因为一个有问题的更新而被蒙蔽了双眼。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/cloud-security-policy/how-to-create-a-cloud-security-policy_hu6428688480397619429.webp 400w,
               /blog/cloud-security-policy/how-to-create-a-cloud-security-policy_hu10083822927079876537.webp 760w,
               /blog/cloud-security-policy/how-to-create-a-cloud-security-policy_hu15970363321419660922.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/cloud-security-policy/how-to-create-a-cloud-security-policy_hu6428688480397619429.webp&#34;
               width=&#34;760&#34;
               height=&#34;506&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;云安全策略应遵守的原则&#34;&gt;云安全策略应遵守的原则&lt;/h2&gt;
&lt;h3 id=&#34;保持简单&#34;&gt;保持简单&lt;/h3&gt;
&lt;p&gt;所有雇员都应该能够理解安全策略。避免过度复杂，应使指南清晰简单。保持简单能够让所有工作人员都遵循规则，也会使你的安全培训费用下降。&lt;/p&gt;
&lt;p&gt;每项策略都要有明确的意图。意图应清楚地概述该规则的要点，以帮助工作人员理解和掌握法规&lt;/p&gt;
&lt;h3 id=&#34;让规则透明&#34;&gt;让规则透明&lt;/h3&gt;
&lt;p&gt;对执行和遵守策略负责的所有团队都应该有安全指南的所有访问权限。建立相关人员已阅读、理解并同意遵守规则的记录。&lt;/p&gt;
&lt;h3 id=&#34;策略性的限制访问&#34;&gt;策略性的限制访问&lt;/h3&gt;
&lt;p&gt;内部控制规定能够组织对云资产的非授权访问。遵从零信任模型，仅允许那些对资源具有真实访问需求的个体来访问。一些工作人员仅需只读权限，像那些为运行报告负责的人。其他人可能必须能够做一些运维的工作，比如重启 VM，但是没有理由给他们赋予修改 VM 或 VM 资源的权限。&lt;/p&gt;
&lt;h3 id=&#34;每月数据加密更新&#34;&gt;每月数据加密更新&lt;/h3&gt;
&lt;p&gt;安排每月数据加密更新。常规更新确保云资源的安全性，这样你就可以安心的知道一切都是最新的。&lt;/p&gt;
&lt;h3 id=&#34;监控云环境&#34;&gt;监控云环境&lt;/h3&gt;
&lt;p&gt;监控应该是你策略里面重要的一方面。&lt;a href=&#34;https://phoenixnap.com/blog/cloud-monitoring-tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云监控工具&lt;/a&gt; 提供一种简单的方法来发现活动模式和潜在的漏洞。&lt;/p&gt;
&lt;h3 id=&#34;让策略做到雇员友好&#34;&gt;让策略做到雇员友好&lt;/h3&gt;
&lt;p&gt;不要因为云安全策略扰乱公司的工作流。尝试创建与公司文化相契合的规则，来帮助雇员更顺利的工作。如果你的策略对日常工作的影响很大，就可以能导致有人走捷径。&lt;/p&gt;
&lt;h3 id=&#34;收集整个公司的意见&#34;&gt;收集整个公司的意见&lt;/h3&gt;
&lt;p&gt;策略不应该仅仅由某个团队负责。最佳实践来自于多个部门的通力协作。&lt;/p&gt;
&lt;p&gt;收集跨业务单元的利益干系人的意见。这种方式能够对现有安全层级提供一个清晰的视图，以此来找到正确的方法进行改进。&lt;/p&gt;
&lt;h3 id=&#34;不要外包你的策略&#34;&gt;不要外包你的策略&lt;/h3&gt;
&lt;p&gt;将策略构建流程授权给第三方是一个错误。尽管你的云服务提供者能够处理这些任务，但是最安全的云安全策略来自于自身努力。&lt;/p&gt;
&lt;h3 id=&#34;使用组访问而非个人访问&#34;&gt;使用组访问而非个人访问&lt;/h3&gt;
&lt;p&gt;创建管理组然后给组而不是个人分配争取的权限。组访问在不影响安全性的情况下能使日常任务更轻松。&lt;/p&gt;
&lt;h3 id=&#34;考虑-two-factor-认证&#34;&gt;考虑 Two-Factor 认证&lt;/h3&gt;
&lt;p&gt;大多数云厂商允许使用 Two-Factor 认证 (2FA)。使用 2FA 来保护新部署和功能免受恶意登陆尝试的攻击。&lt;/p&gt;
&lt;h3 id=&#34;严格限制&#34;&gt;严格限制&lt;/h3&gt;
&lt;p&gt;有些工作负载仅为单个地理区域中的客户或客户机提供服务。考虑在这些场景中添加访问限制。针对特定区域、特定 IP 的访问限制能够限制对黑客、蠕虫和其他威胁的暴漏。&lt;/p&gt;
&lt;h3 id=&#34;使用密钥而非密码&#34;&gt;使用密钥而非密码&lt;/h3&gt;
&lt;p&gt;考虑让公共密钥基础设施 (PKI) 成为你云安全策略的一部分。PKI 协议使用一对公钥和私钥来在数据交换钱对用户身份进行验证。切换至 PKI 消除了密码被偷的危险，&lt;a href=&#34;https://phoenixnap.com/kb/prevent-brute-force-attacks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;防止了暴力攻击&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;云安全策略对任何谨慎的公司都是必须的&#34;&gt;云安全策略对任何谨慎的公司都是必须的&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://phoenixnap.com/blog/data-breach-statistics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;修复数据泄漏的成本&lt;/a&gt; 远远超过适当预防措施的代价。云安全策略提供了当操作云环境时候的适当告诫步骤。此策略允许你利用 &lt;a href=&#34;https://phoenixnap.com/blog/benefits-of-cloud-computing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云的优势&lt;/a&gt; 而无须承担非必要的风险。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>零信任网络安全：“从不信任，永远验证”</title>
      <link>https://cloudnativecn.com/blog/zero-trust-cybersecurity/</link>
      <pubDate>Fri, 06 Nov 2020 13:05:42 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/zero-trust-cybersecurity/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://www.nist.gov/blogs/taking-measure/zero-trust-cybersecurity-never-trust-always-verify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Zero Trust Cybersecurity:&amp;lsquo;Never Trust, Always Verify&amp;rsquo;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;啊？什么？这是我第一次听到零信任网络安全这个词时候的反应，我是从 2018 年秋天开始在国家标准技术研究所 (NIST) 的国家网络安全中心部门 &lt;a href=&#34;https://www.nccoe.nist.gov/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;(NCCoE)&lt;/a&gt; 开始工作的。值得注意的是，我有了一个新的开始，同时也是一个巨大的转变，即从通常意义上讲的软件开发工程师转变为网络安全工程师。当然，在我的职业生涯中我曾经设计和开发了一些安全软件方案，甚至会做一些安全系统的平台的工作，但是零信任网络对我来讲，完全是另一回事。一方面，它没有围栏（意指防火墙之类的网络安全，后文有介绍）。&lt;/p&gt;
&lt;p&gt;我为什么这么说呢？传统的网络安全方式依赖的是网络屏障——防火墙——它控制着进出网络的流量。从另一个角度来讲，零信任网络是指没有这些网络屏障的情况。它通常和“消除边界”，“缩小边界”，“减小边界”，“无边界”这些词语一起提及。这些都是“去边界化”思想的常见提法，这种提法最早是在 2005 年由一个叫做 Jericho Forum 的团队首次提出的。2010 年，在 Forrester Research 工作的网络安全专家 John Kindervag 创造了“零信任”这个词语。简单来说，零信任假设系统一定会被损坏，就好像没有任何边界一样设计安全性。因此，默认情况下不信任任何事情，从网络开始重新设计。&lt;/p&gt;
&lt;p&gt;我们即将深入了解零信任网络到底意味着什么。但是首先，NCCoE 和我是怎么涉入到零信任的呢？这是一个很长的故事。&lt;/p&gt;
&lt;h2 id=&#34;一次数据泄漏引发的大动作&#34;&gt;一次数据泄漏引发的大动作&lt;/h2&gt;
&lt;p&gt;我敢说事情是由 &lt;a href=&#34;https://www.opm.gov/cybersecurity/cybersecurity-incidents/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015 年人事管理局 (OPM) 的数据泄漏&lt;/a&gt; 引起的。据估计大约有 2210 万条记录被泄漏！如果你的脑海中还没有概念的话，你现在应该明白，这次事件被认定为美国历史上政府数据泄漏最严重的一次事件。它暴漏了那些接受过背景调查的人的信息，以及他们的家庭、朋友、熟人，他们中的大部分甚至都不是政府职员。社会保险号码，姓名，生日和出生地，还有地址都是被泄漏的个人身份信息类型。&lt;/p&gt;
&lt;p&gt;人事管理局的数据泄漏给美国政府强化他们的信息系统和基础设施敲响了警钟。此后，美国政府发起了多个用来改善安全态势并使其变得现代化的行动。2017 年 5 月，在总统的领导下成立了 &lt;a href=&#34;https://www.whitehouse.gov/articles/american-technology-council-summit-modernize-government-services/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;美国技术委员会&lt;/a&gt;，并在同年晚些时候协调并编写了一份联邦 IT 现代化报告。&lt;/p&gt;
&lt;p&gt;尔后，在一年以后的 2018 年 2 月，由联邦 IT 官员组成的 CIO 服务、战略与基础设施委员会，特许成立了零信任和软件定义网络的指导小组。这个小组的工作就是支持，在零信任网络的指导原则下，采用更有效的方法和技术来对联邦政府数据资产的访问做验证、保障、执行和连续监测。在 2018 年 12 月 25 日，该小组在 NCCoE 召开了一次研讨会。此次研讨会包括来自联邦民用和国防机构的 21 名代表和主题专家，讨论零信任网络和软件定义网络的定义并达成共识。在研讨会之后不久，我开始到 NIST/NCCoE 工作并以技术负责人的身份被要求加入指导小组会议。这种互动促使 CIO 理事会和 NIST NCCoE 在 2019 年 2 月共同发起了一个项目，来调查研究零信任和零信任架构 (ZTA)，目的是为了产生一个采用零信任架构 (ZTA) 的指导文档来加强美国政府信息系统和基础设施的安全防护。&lt;/p&gt;
&lt;p&gt;2020 年 8 月，NIST NCCoE 发布了通用指导文件 NIST SP 800-207：&lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-207/final&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;零信任架构&lt;/a&gt;，以便让联邦政府采用 ZTA。这份指导文档对零信任和零信任架构提供了概念层面的解释，包括部署模式，使用场景以及技术差距的挖掘。&lt;/p&gt;
&lt;p&gt;我们即将深入了解零信任网络到底意味着什么。但是首先，NCCoE 和我是怎么涉入到零信任的呢？这是一个很长的故事。&lt;/p&gt;
&lt;h2 id=&#34;从今往后让网络保持安全&#34;&gt;从今往后，让网络保持安全&lt;/h2&gt;
&lt;p&gt;让你的意识快速接受零信任的最好方式就是考虑传统和当前的网络环境。早些时候从事于 IT 行业的人员肯定会记得那些我们把网络组合在一起的天真时代。至少可以说，他们有着很大的不同，因为我们没有像今天这样在云中远程访问资源、应用程序和服务。当然，我们使用数字化资源和应用程序来完成我们的工作；然而，它们是专用的内部网络，在这个环境中的工作人员可以通过个人电脑和笔记本电脑来获取网络访问。但是我们如何保护它们免受互联网的威胁呢？我们围绕着它们建立了一个数字防御——一个边界，它以一种经过验证和授权的方式让外部访问通过一个入口点。这样可以允许内部用户访问被保护在边界内的资源池和应用。这是一个在很长时间内被广泛采用的策略。&lt;/p&gt;
&lt;p&gt;如今，随着云计算的普及，网络全球化达程度到了前所未有高度。很多人都采用移动设备远程办理业务。我们在私有云、公有云、混合云以及其他变种云环境中来消费、交换和存储我们的数字化数据。毋庸置疑，传统的边界已经得到了扩展和变得越来越模糊，以允许应用程序和服务能在任何地点被访问。当然，随着这种变化，网络安全漏洞的数量也随之上升。现在我们的受攻击面变大了，受攻击点变多了。我们尤其容易受到来自网络内部——也就是边界内的网络安全漏洞的攻击。&lt;/p&gt;
&lt;p&gt;事实上，在上面提到的臭名昭著的人事管理局数据泄漏中，黑客首先使用偷来的凭证信息来获取人事管理局内部网络的访问权限，然后放置了安装在内网中的恶意软件包，该程序包将自身安装在人事管理局的网络中从而做为一个数据泄漏的后门。然后，黑客从那里升级了自己的权限来获取其他人事管理局系统的访问权限，一个典型的权限升级场景，也是通常被称之为外围安全漏洞的“横向移动”或“东西向通信”。传统边界防御的缺点是一旦在边界内部发生安全威胁，它没有提供安全控制机制来阻止内部威胁“横向移动”的发生，因为在策略上总是认定内部是安全的或可信任的区域。&lt;/p&gt;
&lt;p&gt;这就是“零信任”来拯救这一天的原因。你可以在企业专属的网络里、咖啡店、家里或者世界上的任何一个地方工作，可以跨越多种边界去访问资源，从内部环境到多云环境。无论你的网络位置如何，零信任网络安全的表现总是：“我对你是零信任的，在我能够信任你并给你赋予你所需要资源的访问权限之前，我需要对你进行验证”。因此，“从不信任，坚持验证”——要针对每一个访问请求！&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/zero-trust-cybersecurity/security_hu6151457716423141477.webp 400w,
               /blog/zero-trust-cybersecurity/security_hu9288564271049268474.webp 760w,
               /blog/zero-trust-cybersecurity/security_hu17410023938535978136.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/zero-trust-cybersecurity/security_hu6151457716423141477.webp&#34;
               width=&#34;760&#34;
               height=&#34;415&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

&lt;em&gt;易受东西方流量攻击的传统防火墙网络与具有零信任体系结构的网络之间的区别说明。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;进一步强调一下，验证流程是零信任网络方法中很关键的一方面。在权限被赋予之前，对资源的每一个访问请求都必须依据现有的访问策略和使用凭证、设备、应用程序和服务等的当前状态以及其他一些可观测的行为表现和环境属性来进行全面且实时的动态评估。比如说，一个正式员工或者合同工，甚至是一个客户可能已经被验证并被赋予特定资源的权限，但是在零信任网络的环境中，当他们需要访问其他资源时，依旧需要被重新验证。这种持续审查是一种安全控制机制，可以阻止受恶意行为影响的受损系统在整个网络环境中进行扩散，这基本上是任何零信任方案的本质。&lt;/p&gt;
&lt;p&gt;在我的职业生涯中有很多惊奇的工作经历，但是我必须承认，NIST/NCCoE 的这份零信尝试的经验在目前为止绝对是排在榜首的。更令人感到欣慰的是我们的零信任尝试正受到其他政府部门或者业内人士的密切关注和高度评价，所有的荣誉都应该归功于我们团队的所有成员在我们的零信任尝试和活动中所做出的努力。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
