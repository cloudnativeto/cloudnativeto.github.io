<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>持续交付 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/category/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98/</link>
      <atom:link href="https://cloudnativecn.com/category/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98/index.xml" rel="self" type="application/rss+xml" />
    <description>持续交付</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Fri, 21 Jul 2023 11:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>持续交付</title>
      <link>https://cloudnativecn.com/category/%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98/</link>
    </image>
    
    <item>
      <title>企业级 CI/CD 最佳实践</title>
      <link>https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/</link>
      <pubDate>Fri, 21 Jul 2023 11:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;译者注：本文译自 Codefresh 公司发布的系列博客 &lt;a href=&#34;https://codefresh.io/blog/enterprise-ci-cd-best-practices-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Enterprise CI/CD Best Practices&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你正在学习持续集成/交付/部署，你可能会发现主要有两类资源：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;CI/CD 是什么以及为什么需要它的概述。这些对于初学者很好，但不涵盖有关 Day2 操作或如何优化现有流程的任何内容。&lt;/li&gt;
&lt;li&gt;仅涵盖 CI/CD 的特定方面（例如仅单元测试或仅部署）的详细教程，使用特定的编程语言和工具。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们相信这两个极端之间存在差距。我们缺少一份恰当的指南，介于这两个类别之间，讨论最佳实践，但不是以抽象的方式。如果你一直想阅读有关 CI/CD 的指南，不仅解释“为什么”，还解释“如何”应用最佳实践，那么这份指南适合你。&lt;/p&gt;
&lt;p&gt;我们将描述所有有效的 CI/CD 工作流程的基本原理，但不仅以一般术语谈论，而且还将解释每个最佳实践背后的技术细节，更重要的是，如果你不采用它，它可能会对你产生什么影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置优先级&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一些公司试图在掌握基础知识之前跳上 DevOps 的列车。你很快会发现，CI/CD 流程中出现的一些问题通常是现有流程问题，只有当该公司试图遵循 CI/CD 流程的最佳实践时，才会变得明显。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下表总结了本指南中讨论的要求。我们还根据优先级分了要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关键要求是在采用 DevOps 或选择 CI/CD 解决方案之前必须具备的要求。你应该首先解决它们。如果你不这样做，它们将在后面阻止该过程。&lt;/li&gt;
&lt;li&gt;具有高优先级的要求仍然很重要，但你可以在采用 CI/CD 平台时进行修复。&lt;/li&gt;
&lt;li&gt;具有中等优先级的要求可以在长期解决。尽管它们将改善你的部署流程，但你可以绕过它们，直到找到合适的解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;编号&lt;/th&gt;
          &lt;th&gt;最佳实践&lt;/th&gt;
          &lt;th&gt;类别&lt;/th&gt;
          &lt;th&gt;重要性&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;所有项目资产都在源代码控制中&lt;/td&gt;
          &lt;td&gt;Artifacts&lt;/td&gt;
          &lt;td&gt;关键&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;所有环境都生成一个单一的工件&lt;/td&gt;
          &lt;td&gt;Artifacts&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;3&lt;/td&gt;
          &lt;td&gt;工件在管道中移动（而不是源代码修订）&lt;/td&gt;
          &lt;td&gt;Artifacts&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;开发使用短期分支（每个特性一个）&lt;/td&gt;
          &lt;td&gt;Build&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;5&lt;/td&gt;
          &lt;td&gt;可以在一个步骤中执行构建&lt;/td&gt;
          &lt;td&gt;Build&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6&lt;/td&gt;
          &lt;td&gt;构建速度快（少于 5 分钟）&lt;/td&gt;
          &lt;td&gt;Build&lt;/td&gt;
          &lt;td&gt;中等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;7&lt;/td&gt;
          &lt;td&gt;存储你的依赖&lt;/td&gt;
          &lt;td&gt;Build&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;测试自动化&lt;/td&gt;
          &lt;td&gt;Testing&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;9&lt;/td&gt;
          &lt;td&gt;测试速度快&lt;/td&gt;
          &lt;td&gt;Testing&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;10&lt;/td&gt;
          &lt;td&gt;测试自动清理其副作用&lt;/td&gt;
          &lt;td&gt;Testing&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;11&lt;/td&gt;
          &lt;td&gt;存在多个测试套件&lt;/td&gt;
          &lt;td&gt;Testing&lt;/td&gt;
          &lt;td&gt;中等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;12&lt;/td&gt;
          &lt;td&gt;根据需要进行测试环境测试&lt;/td&gt;
          &lt;td&gt;Testing&lt;/td&gt;
          &lt;td&gt;中等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;13&lt;/td&gt;
          &lt;td&gt;并行运行测试套件&lt;/td&gt;
          &lt;td&gt;Testing&lt;/td&gt;
          &lt;td&gt;中等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;14&lt;/td&gt;
          &lt;td&gt;安全扫描是流程的一部分&lt;/td&gt;
          &lt;td&gt;Quality and Audit&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;15&lt;/td&gt;
          &lt;td&gt;质量扫描/代码审核是流程的一部分&lt;/td&gt;
          &lt;td&gt;Quality and Audit&lt;/td&gt;
          &lt;td&gt;中等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;16&lt;/td&gt;
          &lt;td&gt;数据库更新具有其生命周期&lt;/td&gt;
          &lt;td&gt;Databases&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;17&lt;/td&gt;
          &lt;td&gt;数据库更新是自动化的&lt;/td&gt;
          &lt;td&gt;Databases&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;18&lt;/td&gt;
          &lt;td&gt;数据库更新是向前和向后兼容的&lt;/td&gt;
          &lt;td&gt;Databases&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;19&lt;/td&gt;
          &lt;td&gt;部署通过单个路径（CI/CD 服务器）进行&lt;/td&gt;
          &lt;td&gt;Deployments&lt;/td&gt;
          &lt;td&gt;关键&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;20&lt;/td&gt;
          &lt;td&gt;部署逐步进行&lt;/td&gt;
          &lt;td&gt;Deployments&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;21&lt;/td&gt;
          &lt;td&gt;指标和日志可以检测到错误的部署&lt;/td&gt;
          &lt;td&gt;Deployments&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;22&lt;/td&gt;
          &lt;td&gt;自动回滚已实施&lt;/td&gt;
          &lt;td&gt;Deployments&lt;/td&gt;
          &lt;td&gt;中等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;23&lt;/td&gt;
          &lt;td&gt;部署与生产匹配&lt;/td&gt;
          &lt;td&gt;Deployments&lt;/td&gt;
          &lt;td&gt;中等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;1-将所有内容放在源代码控制下&#34;&gt;1. 将所有内容放在源代码控制下&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;工件管理可能是流程的最重要特征。在最基本的级别上，流程从源代码创建二进制/包工件开始，并将其部署到支持应用程序的适当基础架构中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于资产和源代码的最重要规则是：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f1_hu6443447832378253911.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f1_hu13854069604880760245.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f1_hu16269815188045511539.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f1_hu6443447832378253911.webp&#34;
               width=&#34;760&#34;
               height=&#34;317&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所有构成应用程序的文件都应使用源代码控制进行管理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不幸的是，尽管这个规则似乎非常基本，但还是有很多组织没有遵循它。传统上，开发人员仅使用版本控制系统管理应用程序的源代码，但是忽略了其他支持文件，例如安装脚本、配置值或测试数据。&lt;/p&gt;
&lt;p&gt;参与应用程序生命周期的所有内容都应检入源代码控制。这包括但不限于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;源代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建脚本&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管道定义&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试和测试数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库更新脚本&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基础架构定义脚本&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;清理/安装/清除脚本&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相关的文档&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最终目标是任何人都可以检出与应用程序相关的所有内容，并在本地或任何其他替代环境中重新创建它。&lt;/p&gt;
&lt;p&gt;我们经常看到的常见反模式是使用特殊脚本在特定计算机或特定团队成员的工作站上进行部署，甚至是在 Wiki 页面中进行附件等。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f2_hu14093650120950194809.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f2_hu890823315912440668.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f2_hu8569219164749991799.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f2_hu14093650120950194809.webp&#34;
               width=&#34;760&#34;
               height=&#34;395&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;版本控制也意味着所有这些资源都经过审核，并具有详细的更改历史记录。如果你想查看应用程序 6 个月前的样子，可以轻松使用版本控制系统的功能获取该信息。&lt;/p&gt;
&lt;p&gt;请注意，即使所有这些资源都应该使用版本控制，它们也不一定必须在同一个存储库中。你是否使用多个存储库或单个存储库都需要仔细考虑，而且没有明确的答案。然而，重要的一点是确保确实对所有内容进行了版本控制。&lt;/p&gt;
&lt;p&gt;即使 GitOps 是使用 Git 操作进行升级和部署的新兴实践，你也不需要专门遵循 GitOps 来遵循这一最佳实践。具有项目资产的历史和审计信息始终是一件好事，无论你遵循哪种软件范例。&lt;/p&gt;
&lt;h2 id=&#34;2-为所有环境创建单个包二进制容器&#34;&gt;2. 为所有环境创建单个包/二进制/容器&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;CI/CD流程的主要功能之一是验证新功能是否适合部署到生产环境。这是逐步进行的，因为每个流程步骤都在实际上执行附加检查。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，为此范例工作，你需要确保在管道中测试和探测的内容与部署的内容相同。在实践中，这意味着特性/版本应该只打包一次，并以相同的方式部署到所有后续环境中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f3_hu3811656667625975324.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f3_hu17896731160280979945.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f3_hu8786465021986371176.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f3_hu3811656667625975324.webp&#34;
               width=&#34;760&#34;
               height=&#34;253&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;不幸的是，许多组织陷入了为 dev/staging/prod 环境创建不同工件的常见陷阱，因为它们尚未掌握一个通用的配置基础架构。这意味着他们会部署与管道中测试的稍有不同版本。配置差异和最后一刻的更改是导致部署失败的最大罪魁祸首之一，并且每个环境都拥有不同的包，加剧了这个问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f4_hu10763049829337315622.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f4_hu13777634704542180440.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f4_hu11166064509545203048.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f4_hu10763049829337315622.webp&#34;
               width=&#34;760&#34;
               height=&#34;625&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;与其为每个环境创建多个版本，更好的做法是拥有一个单一的工件，仅在不同环境之间更改配置。随着容器的出现以及创建应用程序的自包容能力（即 Docker 镜像形式的应用程序的自包容能力），没有理由不遵循这一做法。&lt;/p&gt;
&lt;p&gt;关于配置，有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;二进制工件/容器具有嵌入其中的所有配置，并根据运行环境更改活动配置（易于开始，但不太灵活。我们不建议采用此方法）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器根本没有配置。它在运行时按需从发现机制（例如键/值数据库、文件系统卷、服务发现机制等）中获取所需的配置。（推荐的方法）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;结果是保证在生产中部署的确切二进制/包与管道中测试的确切二进制/包相同。&lt;/p&gt;
&lt;h2 id=&#34;3-工件而不是-git-提交应在管道中移动&#34;&gt;3. 工件，而不是 Git 提交，应在管道中移动&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;与先前一点的推论（所有环境都应部署相同的二进制/包）是部署工件应仅构建一次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;容器的整个概念（以及过去的 VM 映像）是具有不变的工件。应用程序仅在最新特性或即将发布的特性的情况下构建一次。&lt;/p&gt;
&lt;p&gt;一旦构建了该工件，它应作为未更改的实体从每个管道步骤移动到下一个步骤。容器是这种不变性的完美载体，因为它们允许你只创建一次映像（在管道开始时）并随着每个连续的管道步骤向生产推广。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f5_hu5856385073467552050.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f5_hu11017015229437802541.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f5_hu10038893492725354505.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f5_hu5856385073467552050.webp&#34;
               width=&#34;760&#34;
               height=&#34;466&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;不幸的是，常见的反模式是公司推广提交而不是容器映像。源代码提交在管道阶段中旅行，每个步骤都会通过再次检出源代码来重新构建。&lt;/p&gt;
&lt;p&gt;这是一种不好的实践，主要有两个原因。首先，它使管道非常缓慢，因为打包和编译软件是非常耗时的过程，在每个步骤中重复这些过程是浪费时间和资源。&lt;/p&gt;
&lt;p&gt;其次，它破坏了先前的规则。在每个管道步骤中重新编译代码提交，留下了造成不同于之前的工件的空间。你失去了在生产中部署的确切内容与管道中测试的确切内容相同的保证。&lt;/p&gt;
&lt;h2 id=&#34;4-对每个功能使用短期分支&#34;&gt;4. 对每个功能使用短期分支&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个完善的流水线拥有多个质量检测点（例如单元测试或安全扫描），以测试功能的质量和适用性于生产部署。在高速开发环境（并且有庞大的开发团队）中，并不是所有功能都被期望立即达到生产。一些功能甚至在最初的部署版本中会相互冲突。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了允许对功能进行细粒度的质量检测，流水线应该有权否决单个功能，并且能够选择其中一部分进行生产部署。获得这种保证的最简单方法是遵循每个功能一个分支的方法，其中短期功能（即在单个开发迭代中完成）对应于单个源代码控制分支。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f6_hu4055248304885456594.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f6_hu2409536362276157492.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f6_hu5380775295067184459.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f6_hu4055248304885456594.webp&#34;
               width=&#34;760&#34;
               height=&#34;353&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这使得流水线设计非常简单，因为所有操作都围绕单个功能展开。对代码分支运行测试套件仅测试新功能。对分支进行安全扫描会显示新功能中的问题。&lt;/p&gt;
&lt;p&gt;项目利益相关者随后可以部署和回滚单个功能或阻止完整分支合并到主线代码中。&lt;/p&gt;
&lt;p&gt;不幸的是，仍然有一些公司拥有长期的功能分支，这些分支在单个批次中收集多个和不相关的功能。这不仅使合并变得困难，而且在单个功能发现问题时也变得棘手（因为难以单独恢复它）。&lt;/p&gt;
&lt;p&gt;短期分支的演进是遵循基于主干的开发和功能切换。这可能是你的最终目标，但只有你掌握了短期分支，才能实现它。&lt;/p&gt;
&lt;h2 id=&#34;5-基本构建应仅需要一步&#34;&gt;5. 基本构建应仅需要一步&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;CI/CD流水线的全部内容都围绕着自动化展开。自动化本身非常容易，只要最初的运行方式就很容易自动化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;理想情况下，项目的简单构建应为单个命令。该命令通常调用构建系统或脚本（例如 Bash、PowerShell），该系统或脚本负责获取源代码、运行基本测试并打包最终构件/容器。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f7_hu18021497510104982612.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f7_hu14417603286338207010.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f7_hu18401016153950425307.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f7_hu18021497510104982612.webp&#34;
               width=&#34;760&#34;
               height=&#34;292&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果需要进行更高级的检查（例如负载测试），则需要额外的步骤。但是，基本构建（生成可部署构件）应仅涉及一步命令。新的开发人员应该能够检出源代码的全新副本，执行此单个命令，并立即获取可部署构件。&lt;/p&gt;
&lt;p&gt;部署也应该用单个命令完成，然后如果需要创建任何流水线，则可以简单地将该单个步骤插入流水线的任何部分。&lt;/p&gt;
&lt;p&gt;不幸的是，仍然有许多公司需要执行许多手动步骤才能运行基本构建。下载额外的文件、更改属性以及一般需要遵循的大型检查表等步骤应在同一脚本中自动化。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f8_hu235077877840764892.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f8_hu14714647702026345264.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f8_hu7072934357268977343.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f8_hu235077877840764892.webp&#34;
               width=&#34;760&#34;
               height=&#34;478&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果你的开发团队中的新雇员需要超过 15 分钟来完成基本构建（在他们的工作站上检查代码之后），那么你几乎可以肯定存在此问题。&lt;/p&gt;
&lt;p&gt;构建完善的CI/CD流水线只是重复了本地工作站上已经可能的操作。在将其移动到CI/CD平台之前，基本构建和部署过程应该已经得到很好的优化。&lt;/p&gt;
&lt;h2 id=&#34;6-基本构建速度快5-10-分钟&#34;&gt;6. 基本构建速度快（5-10 分钟）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;快速构建对开发人员和运营人员/系统管理员都是一个巨大的优势。&lt;/p&gt;
&lt;p&gt;开发人员在提交和其副作用之间的反馈循环尽可能短暂时会感到高兴。在你的脑海中，刚刚提交的代码中修复错误非常容易。必须等待一个小时才能检测到失败的构建是一种非常令人沮丧的经历。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;构建应该在 CI 平台和本地站点上都很快。在任何给定时间点，多个功能正在尝试进入代码主干。如果构建它们需要很长时间，CI 服务器可能会轻松地被压垮。&lt;/p&gt;
&lt;p&gt;运营人员也从快速构建中获得巨大的好处。在生产环境中推送热更新或回滚到以前的版本始终是一种紧张的体验。这种体验越短暂，越好。需要 30 分钟的回滚比需要 3 分钟的回滚更难处理。&lt;/p&gt;
&lt;p&gt;总之，基本构建应该非常快。理想情况下不超过 5 分钟。如果需要超过 10 分钟，则你的团队应该调查原因并缩短时间。现代构建系统具有出色的缓存机制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;库依赖项应从内部代理存储库中获取，而不是从互联网中获取&lt;/li&gt;
&lt;li&gt;除非必要，否则避免使用代码生成器&lt;/li&gt;
&lt;li&gt;将单元测试（快速）和集成测试（慢速）分开，并仅使用单元测试进行基本构建&lt;/li&gt;
&lt;li&gt;调整你的容器映像以充分利用 Docker 层缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获得更快的构建也是你应该探索的原因之一，如果要转向微服务。&lt;/p&gt;
&lt;h2 id=&#34;7-存储缓存依赖项&#34;&gt;7. 存储/缓存依赖项&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这已经是新闻了。&lt;a href=&#34;https://www.theregister.com/2016/03/23/npm_left_pad_chaos/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;左侧填充事件&lt;/a&gt;。&lt;a href=&#34;https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;依赖项混淆攻击&lt;/a&gt;。虽然这两起事件都具有很强的安全影响，但事实是，存储你的依赖项也是一个非常重要的原则，是你的构建稳定性的根本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所有重要的代码都使用库或相关工具的外部依赖项。当然，你的代码应始终存储在 Git 中。但是，所有外部库也应存储在某种工件存储库中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f9_hu9604906797800819482.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f9_hu11457658531964466274.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f9_hu17277780595557342191.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f9_hu9604906797800819482.webp&#34;
               width=&#34;760&#34;
               height=&#34;295&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;花一些时间收集依赖项并了解它们来自何处。除了代码库之外，还需要其他不太明显的移动部件，例如基础 Docker 映像、构建所需的任何命令行实用程序等。&lt;/p&gt;
&lt;p&gt;测试你的构建稳定性的最佳方法是在构建服务器中完全断开互联网访问（实质上是模拟空气隔离环境）。尝试启动流水线构建，其中所有内部服务（git、数据库、工件存储、容器注册表）都可用，但是公共互联网上没有其他内容，并查看发生了什么。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f10_hu16299213197593803823.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f10_hu17085294957218695941.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f10_hu6812935772430820799.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f10_hu16299213197593803823.webp&#34;
               width=&#34;760&#34;
               height=&#34;490&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果你的构建抱怨缺少依赖项，则意味着如果该特定外部资源也出现问题，则在实际情况下也会发生相同的问题。&lt;/p&gt;
&lt;h2 id=&#34;8-自动化所有测试&#34;&gt;8. 自动化所有测试&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;单元/集成/功能测试的主要目标是增加部署的每个新版本的信心。理论上，全面的测试量将保证每个新功能都没有回退。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要实现这个目标，测试应该完全自动化并由 CI/CD 平台管理。测试不仅应在每次部署之前运行，还应在创建拉取请求之后运行。实现自动化的唯一方法是使测试套件能够在单个步骤中运行。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f11_hu613442839014661870.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f11_hu15818347003799161248.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f11_hu5826901506071678117.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f11_hu613442839014661870.webp&#34;
               width=&#34;760&#34;
               height=&#34;494&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;不幸的是，一些公司仍然以旧方式创建测试，其中一群测试工程师被分配执行各种测试套件的手动执行。这会阻止所有新版本，因为测试速度实际上变成了部署速度。&lt;/p&gt;
&lt;p&gt;测试工程师只应编写新测试。他们不应自己执行测试，因为这会使新功能的反馈循环大大延长。测试始终由 CI/CD 平台在各种工作流程和管道中自动执行。&lt;/p&gt;
&lt;p&gt;如果一些测试需要由人手动运行以进行冒烟测试，则可以手动运行少量测试。但是，除此之外的所有主要测试套件都应完全自动化。&lt;/p&gt;
&lt;h2 id=&#34;9-让测试快速&#34;&gt;9. 让测试快速&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;上一节的推论是测试的快速执行。如果测试套件将集成到交付管道中，则它们应该非常快速。理想情况下，测试时间不应大于打包/编译时间，这意味着测试应该在五分钟内完成，而不超过 15 分钟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;快速测试执行为开发人员提供了信心，即他们刚提交的功能没有回退，并且可以安全地推广到下一个工作流阶段。测试时间为两个小时是开发人员的灾难，因为他们不可能在提交功能后等待那么长时间。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f12_hu5722004780198536478.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f12_hu5608544991351124874.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f12_hu5031275914467615674.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f12_hu5722004780198536478.webp&#34;
               width=&#34;760&#34;
               height=&#34;298&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果测试期间时间太长，开发人员只会转到下一个任务并更改他们的思维上下文。一旦测试结果到达，就更难在不活跃的功能上修复问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f13_hu9755743952609878191.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f13_hu14129232001839012326.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f13_hu880678391519559547.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f13_hu9755743952609878191.webp&#34;
               width=&#34;760&#34;
               height=&#34;303&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;不幸的是，大多数测试等待时间都来自于低效的测试实践和缺乏优化。测试速度缓慢的常见因素是代码“休眠”或“等待”事件，使测试运行时间比应该运行时间更长。所有这些 sleep 语句都应该被删除，并且测试应该遵循事件驱动架构（即响应事件而不是等待事情发生）&lt;/p&gt;
&lt;p&gt;测试数据创建也是测试花费大量数据的另一个领域。测试数据创建代码应该集中并重复使用。如果测试具有长时间的设置阶段，则可能会测试过多的内容或需要对不相关服务进行一些模拟。&lt;/p&gt;
&lt;p&gt;总之，测试套件应该快速（5-10 分钟），需要几个小时的巨型测试应该进行重构和重新设计。&lt;/p&gt;
&lt;h2 id=&#34;10-每个测试自动清理其副作用&#34;&gt;10. 每个测试自动清理其副作用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一般来说，你可以将单元测试分为两种类别（除了单元/集成或慢速/快速之外），这与它们的副作用有关：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;没有副作用的测试。它们仅从外部源读取信息，从不修改任何内容，并且可以随意运行（甚至可以并行）多次，没有任何复杂性。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具有副作用的测试。这些测试将写入数据库、将数据提交给外部系统、对依赖项执行输出操作等。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f14_hu7502278305594304825.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f14_hu3825848837046757998.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f14_hu17941112906208258728.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f14_hu7502278305594304825.webp&#34;
               width=&#34;760&#34;
               height=&#34;218&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;第一类（只读测试）很容易处理，因为它们不需要特殊维护。但是，第二类（读/写测试）更复杂，因为你需要确保在测试完成后立即清除其操作。有两种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;让所有测试运行，然后在测试套件结束时清除所有测试的操作&lt;/li&gt;
&lt;li&gt;让每个测试在运行后自行清理（推荐方法）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让每个测试清理其副作用是更好的方法，因为这意味着你可以随时以任何次数运行所有测试套件（即在套件中运行单个测试，然后再次运行它两次或三次）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f15_hu9799310124016788590.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f15_hu11662993857871442243.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f15_hu8465360232446043646.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f15_hu9799310124016788590.webp&#34;
               width=&#34;760&#34;
               height=&#34;286&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;能够并行执行测试是使用动态测试环境的先决条件，我们将在本指南的后面看到这一点。&lt;/p&gt;
&lt;h2 id=&#34;11-使用多个测试套件&#34;&gt;11. 使用多个测试套件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;测试不仅仅是在CI/CD流程的一个步骤中发生的事情。
测试是一个连续的过程，涉及到管道的所有阶段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这意味着任何精心设计的应用程序中都应该存在多个测试类型。最常见的一些例子包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速单元测试，查找主要回归并非常快速地完成&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更长的集成测试，寻找更复杂的情况（例如事务或安全性）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;压力和负载测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用于检测使用的外部服务的 API 更改的合同测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以在生产环境中运行以验证发布的烟雾测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试用户体验的 UI 测试&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这只是不同测试类型的样本。每个公司可能有多个类别。这些类别背后的想法是，开发人员和运营人员可以为他们创建的特定管线选择不同的测试类型。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f16_hu8852426909144411344.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f16_hu11244404542765135363.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f16_hu283531533840328537.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f16_hu8852426909144411344.webp&#34;
               width=&#34;760&#34;
               height=&#34;220&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;例如，拉取请求管线可能不包括压力和负载测试阶段，因为它们仅在生产发布之前需要。创建拉取请求将仅运行快速单元测试和可能的联系测试套件。&lt;/p&gt;
&lt;p&gt;然后，在批准拉取请求之后，其余的测试（例如生产中的烟雾测试）将运行以验证预期的行为。&lt;/p&gt;
&lt;p&gt;某些测试套件可能非常缓慢，对于每个拉取请求按需运行它们太困难了。运行压力和负载测试通常是在发布之前发生的事情（可能将多个拉取请求分组），或者以计划的方式进行（即夜间构建）&lt;/p&gt;
&lt;p&gt;确切的工作流程并不重要，因为每个组织都有不同的流程。重要的是能够隔离每个测试套件并能够为软件生命周期中的每个阶段选择一个或多个。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f17_hu18260874414481731338.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f17_hu13809524755727392601.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f17_hu13926949120412730778.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f17_hu18260874414481731338.webp&#34;
               width=&#34;760&#34;
               height=&#34;236&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用单个测试套件来进行所有测试很麻烦，会强制开发人员跳过本地测试。理想情况下，作为开发人员，我应该能够选择任意数量的测试套件针对我的功能分支进行测试，以便能够灵活地测试我的功能。&lt;/p&gt;
&lt;h2 id=&#34;12-根据需要创建测试环境&#34;&gt;12. 根据需要创建测试环境&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;传统的应用程序测试方法是在生产之前的暂存环境中进行的。拥有单个暂存环境是一个很大的缺点，因为这意味着开发人员必须同时测试所有功能，或者他们必须进入队列并“预订”暂存环境仅供其功能使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f18_hu14784816090145851085.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f18_hu626272268978774206.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f18_hu14945807459386502896.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f18_hu14784816090145851085.webp&#34;
               width=&#34;760&#34;
               height=&#34;271&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这迫使许多组织创建测试环境的一组（例如 QA1、QA2、QA3），以便多个开发人员可以并行测试其功能。这种技术仍然不理想，因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最多 N 名开发人员可以并行测试其功能（与环境数量相同）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试环境始终使用资源（即使它们没有使用）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境的静态特性意味着它们必须进行清理和更新，这为负责测试环境的团队增加了额外的维护工作量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，使用基于云的架构，更容易根据需要创建测试环境。你应该修改管线工作流程，使每当开发人员创建拉取请求时，一个专用的测试环境也会创建，其中包含该特定拉取请求的内容。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f19_hu15403395502015299107.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f19_hu9774242940927482379.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f19_hu12659419534577783112.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f19_hu15403395502015299107.webp&#34;
               width=&#34;760&#34;
               height=&#34;394&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;动态测试环境的优点不言而喻：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;每个开发人员都可以在不与其他开发人员冲突的情况下进行测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;你只在使用测试环境时支付其资源&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;由于测试环境在结束时被丢弃，因此无需维护或清理任何内容&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;动态测试环境适用于开发计划不规则的团队（例如在冲刺结束时有太多功能）&lt;/p&gt;
&lt;h2 id=&#34;13-并发运行测试套件&#34;&gt;13. 并发运行测试套件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是前面最佳实践的一个推论。如果你的开发过程具有动态测试环境，那么不同的测试套件可以在任何时候运行于任何数量的这些环境中，甚至可以同时运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你的测试具有特殊的依赖关系（例如，它们必须按特定顺序启动，或它们需要在功能执行之前期望特定数据），那么动态测试环境的数量将进一步加剧你为测试运行的前运行和后运行函数。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f20_hu13831842751410912843.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f20_hu12453897589013611535.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f20_hu3531291489857290326.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f20_hu13831842751410912843.webp&#34;
               width=&#34;760&#34;
               height=&#34;283&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;解决方案是采用最佳实践 10，使每个测试准备其状态并在自己之后进行清理。只读测试（即没有任何副作用的测试）可以根据定义并行运行。&lt;/p&gt;
&lt;p&gt;需要编写/读取信息的测试需要自给自足。例如，如果测试在数据库中编写实体，然后读取它，你不应该使用硬编码的主键，因为这意味着如果两个测试套件同时运行此测试，则第二个测试套件将因数据库约束而失败。&lt;/p&gt;
&lt;p&gt;虽然大多数开发人员认为测试并行性仅是加速测试的一种方法，但实际上它也是具有正确测试且没有任何不受控制的副作用的一种方法。&lt;/p&gt;
&lt;h2 id=&#34;14-安全扫描是流程的一部分&#34;&gt;14. 安全扫描是流程的一部分&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;许多组织仍然遵循软件开发的传统瀑布模型。在大多数情况下，安全分析是在最后进行的。软件被生产出来，然后对源代码进行安全扫描（甚至渗透测试）。结果发布，开发人员赶紧修复所有问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在发布的最后阶段放置安全扫描是徒劳的。一些重要的架构决策会影响漏洞的检测，并且提前了解它们对于开发人员和所有项目相关方都是必要的。&lt;/p&gt;
&lt;p&gt;安全是一个持续的过程。应在开发时检查应用程序中的漏洞。这意味着安全扫描应该是预合并过程的一部分（即拉取请求的检查之一）。在完成软件包中解决安全问题比在开发过程中更难。&lt;/p&gt;
&lt;p&gt;安全扫描还应具有适当的深度。你需要至少检查：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;应用程序源代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序运行的容器或基础运行时&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将托管应用程序的计算节点和操作系统&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;许多公司仅关注其中两个（甚至一个）领域，并忘记了安全的工作方式恰好像链条一样（最弱的环节负责整体安全）&lt;/p&gt;
&lt;p&gt;如果你还想积极处理安全问题，最好在拉取请求级别上强制执行安全性。与其仅扫描源代码然后报告其漏洞，不如在首次未通过某个安全门槛时防止合并的发生。&lt;/p&gt;
&lt;h2 id=&#34;15-质量扫描代码审核是流程的一部分&#34;&gt;15. 质量扫描/代码审核是流程的一部分&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;与安全扫描类似，代码扫描也应成为日常开发人员操作的一部分。这包括：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用于公司批准样式/格式的代码的静态分析&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用于安全问题、隐藏错误的代码的静态分析&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用于错误和其他问题的运行时代码分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然存在处理分析部分的现有工具（例如 Sonarqube），但并非所有组织都以自动化方式执行这些工具。我们看到的非常常见的模式是，热情的软件团队誓言在下一个软件项目中使用这些工具，但在一段时间后忘记了它们或完全忽略了分析报告中呈现的警告和错误。&lt;/p&gt;
&lt;p&gt;与安全扫描一样，代码质量扫描应该是拉取请求过程的一部分。与其仅向开发人员报告最终结果，不如通过防止合并存在一定数量的警告来强制执行良好的质量实践。&lt;/p&gt;
&lt;h2 id=&#34;16-数据库更新有其生命周期&#34;&gt;16. 数据库更新有其生命周期&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;随着越来越多的公司采用持续交付，我们看到一个令人担忧的趋势，即将数据库视为存在于交付过程之外的外部实体。这种说法根本不属实。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数据库（以及其他支持系统，例如消息队列、缓存、服务发现解决方案等）应像任何其他软件项目一样处理。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;它们的配置和内容应存储在版本控制中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有相关的脚本、维护操作和升级/降级说明也应在版本控制中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置更改应像任何其他软件更改一样经过批准（从 自动化分析、拉取请求审查、安全扫描、单元测试等）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应有专门的管道负责安装/升级/回滚每个新版本的数据库&lt;/p&gt;
&lt;p&gt;最后一点尤为重要。有许多编程框架（例如 rails migrations、Java Liquibase、ORM migrations），它们允许应用程序本身处理 DB 迁移。通常情况下，应用程序第一次启动时，它还可以将关联数据库升级到正确的架构。虽然很方便，但是这种做法使回滚变得非常困难，最好避免使用。&lt;/p&gt;
&lt;p&gt;数据库迁移应像隔离的软件升级一样处理。你应该具有仅处理数据库的自动化管道，应用程序管道不应以任何方式触及数据库。这将为你提供最大的灵活性，以通过控制数据库升级的时间和方式来处理数据库升级和回滚。&lt;/p&gt;
&lt;h2 id=&#34;17-数据库更新是自动化的&#34;&gt;17. 数据库更新是自动化的&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一些组织拥有出色的应用程序代码管道，但很少关注自动化数据库更新。处理数据库应该像处理应用程序本身一样重要（如果不是更重要）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这意味着你应该像应用程序代码一样自动化数据库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在源代码中存储数据库更改集&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创建管道，当创建新更改集时自动更新数据库&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为数据库创建动态临时环境，在此环境中审查更改集，然后才合并到主要环境中&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对数据库更改集进行代码审查和其他质量检查&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有一种策略，在数据库升级失败后进行回滚&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它还有助于自动化生产数据到测试数据的转换，以便在应用程序代码的测试环境中使用。在大多数情况下，由于安全限制，保留所有生产数据的副本在测试环境中是低效的（甚至不可能）。最好有一个被匿名/简化的小数据子集，以便更有效地处理它。&lt;/p&gt;
&lt;h2 id=&#34;18进行逐步数据库升级&#34;&gt;18.进行逐步数据库升级&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;应用程序回滚已经得到很好的理解，现在我们已经有了专用工具，在失败的应用程序部署后执行回滚操作。通过渐进式交付技术，如金丝雀和蓝/绿部署，我们甚至可以将停机时间进一步减少。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于内在状态的缘故，渐进式交付技术无法用于数据库，但我们可以计划数据库升级并采用&lt;a href=&#34;https://martinfowler.com/articles/evodb.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;进化数据库设计原则&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;通过遵循进化设计，你可以使所有数据库更改集向前和向后兼容，从而允许你随时回滚应用程序和数据库更改，而不会产生任何负面影响。&lt;/p&gt;
&lt;p&gt;例如，如果要重命名列，而不是简单地创建更改集以重命名该列并执行单个数据库升级，你可以按照以下逐步更新的计划进行更新：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;仅添加具有新名称的新列的数据库更改集（并从旧列复制现有数据）。应用程序代码仍在从旧列中写入/读取&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序升级，其中应用程序代码现在同时写入两个列，但从新列中读取&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用程序升级，其中应用程序代码仅写入/读取新列&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;删除旧列的数据库升级&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该过程需要纪律严明的团队，因为它使每个数据库更改跨越多个部署。但是，这个过程的优点不能过分强调。在此过程的任何阶段，你都可以回到先前的版本，而不会丢失数据，也不需要停机时间。&lt;/p&gt;
&lt;p&gt;有关全部技术列表，请参见数据库重构网站。&lt;/p&gt;
&lt;h2 id=&#34;19-所有部署都必须通过-cd-平台进行绝不从工作站进行&#34;&gt;19. 所有部署都必须通过 CD 平台进行（绝不从工作站进行）&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;继续不可变工件和将已部署内容发送到生产的部署主题，我们还必须确保管道本身是唯一通向生产的单一路径。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f21_hu1177058344118110384.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f21_hu5410479720349931383.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f21_hu12733896764293124354.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f21_hu1177058344118110384.webp&#34;
               width=&#34;760&#34;
               height=&#34;267&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用CI/CD管道的主要方法是确保CI/CD平台是&lt;strong&gt;唯一&lt;/strong&gt;可以部署到生产环境的应用程序。这种做法保证了生产环境正在运行预期运行的内容（即最后部署的工件）。&lt;/p&gt;
&lt;p&gt;不幸的是，许多组织允许开发人员直接从他们的工作站进行部署，甚至在各个阶段“注入”其工件到管道中。&lt;/p&gt;
&lt;p&gt;这是一种非常危险的做法，因为它破坏了适当的 CI/CD 平台提供的可追溯性和监控。它允许开发人员部署到生产中可能没有在源代码控制中提交的功能。许多失败的部署源于在开发人员工作站上存在但不在源代码控制中的缺少文件。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f22_hu6417839071827005896.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f22_hu8695361138043077387.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f22_hu11398270332555102587.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f22_hu6417839071827005896.webp&#34;
               width=&#34;760&#34;
               height=&#34;265&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;总之，部署只有一个关键路径，而这个路径严格由 CI/CD 平台掌握。在网络/访问/硬件级别禁止从开发人员工作站部署生产代码。&lt;/p&gt;
&lt;h2 id=&#34;20使用渐进式部署模式&#34;&gt;20.使用渐进式部署模式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我们已经讨论了最佳实践 18 中的数据库部署以及每个数据库升级应该是向前和向后兼容的。此模式与应用程序端的渐进式交付模式相辅相成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;传统的部署采用全有或全无的方法，其中所有应用程序实例都向前移动到软件的下一个版本。这是非常简单的部署方法，但使回滚成为一个具有挑战性的过程。&lt;/p&gt;
&lt;p&gt;你应该转而考虑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/BlueGreenDeployment.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;蓝/绿部署&lt;/a&gt;，部署新版本的整个新实例集，但仍然保留旧版本，以便轻松回滚&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/CanaryRelease.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;金丝雀发布&lt;/a&gt;，其中只有应用程序实例的子集移动到新版本。大多数用户仍然路由到上一个版本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果将这些技术与逐步数据库部署相结合，你可以在新部署发生时将停机时间最小化。采用这两种方法，回滚也变得不复杂，因为在两种情况下，你只需更改负载平衡器/服务网格以返回到原始版本的应用程序。&lt;/p&gt;
&lt;p&gt;确保还查看涉及部署过程的指标（请参见最佳实践 21 和 22）以进行完全自动化的回滚。&lt;/p&gt;
&lt;h2 id=&#34;21指标和日志可以检测到错误的部署&#34;&gt;21.指标和日志可以检测到错误的部署&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;拥有部署应用程序的管道（即使使用渐进式交付）是不够的，如果你想要知道部署的真实结果。首先看起来“成功”的部署，但不久就会被证明引入回归是大型软件项目中非常普遍的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;许多开发团队在部署结束后仅执行视觉检查/冒烟测试，并且如果一切“看起来”良好，就会结束。但这种做法是不够的，并且可能很快导致引入微妙的错误或性能问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f23_hu2573049506403212569.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f23_hu12796628931853487988.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f23_hu6330424783992783144.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f23_hu2573049506403212569.webp&#34;
               width=&#34;760&#34;
               height=&#34;369&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;正确的方法是采用应用程序（和基础设施）指标。这包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用程序事件的详细日志&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算和监视应用程序关键特性的指标&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以提供单个请求正在执行的深入了解的跟踪信息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦这些指标到位，应根据这些指标的前/后比较来判断部署的影响。这意味着指标不应仅是调试机制（事后），而应作为针对失败部署的早期警告措施。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f24_hu7243594373646691902.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f24_hu17764656040946519238.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f24_hu8182701841457118533.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f24_hu7243594373646691902.webp&#34;
               width=&#34;760&#34;
               height=&#34;313&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;选择监视哪些事件以及在何处放置日志是一个复杂的过程。对于大型应用程序，最好根据过去的部署逐步重新定义关键指标。建议的工作流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;在你猜测将显示失败部署的事件上放置日志和指标&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进行多个部署，看看你的指标是否可以检测到失败的部署&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如果你看到未在指标中检测到的失败部署，则意味着它们不够。相应地微调你的指标，以便下次出现相同方式的部署失败时，你实际上知道它的发生&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;太多时候，开发团队关注“虚荣”的指标，即表面上看起来很好但对于失败的部署没有任何意义。&lt;/p&gt;
&lt;h2 id=&#34;22自动回滚已准备就绪&#34;&gt;22.自动回滚已准备就绪&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是先前最佳实践的延续。如果你已经准备好了良好的指标（可以验证部署的成功），你可以将它们带到下一个依赖于他们的自动回滚级别。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;许多组织已经准备好了很好的指标，但仅手动使用它们：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;开发人员在部署之前查看一些关键指标&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;触发部署&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开发人员以临时方式查看指标，以查看部署情况&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尽管这种技术非常流行，但效果并不好。根据应用程序的复杂性，观察指标的时间可能为 1-2 小时，以便部署的影响变得可见。&lt;/p&gt;
&lt;p&gt;由于没有人关注正确的指标或人们只是认为这不是部署结果的警告和错误，因此部署标记为“失败”后的 6-24 小时并不罕见。&lt;/p&gt;
&lt;p&gt;还有一些组织被迫只能在工作时间部署，因为只有在那个时间才有足够的人眼来观察指标。&lt;/p&gt;
&lt;p&gt;指标应成为部署流程的一部分。部署管道应在部署完成后自动查看指标，并将其与已知阈值或其上一个状态进行比较。然后，在完全自动化的方式下，部署应完成，甚至可以回滚。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/enterprise-ci-cd-best-practices/f25_hu30564843532075311.webp 400w,
               /blog/enterprise-ci-cd-best-practices/f25_hu18108465343251481.webp 760w,
               /blog/enterprise-ci-cd-best-practices/f25_hu10611253555706699018.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/enterprise-ci-cd-best-practices/f25_hu30564843532075311.webp&#34;
               width=&#34;760&#34;
               height=&#34;254&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这是部署的圣杯，因为它完全将人为因素排除在外，是迈向连续部署的一步（而不是连续交付）。采用这种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;你可以在任何时间点执行部署，因为无论时间是凌晨 3 点，指标都将得到同样的关注&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;你可以精确地捕捉早期回归&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回滚（通常是一种压力的行动）现在由部署平台处理，使非技术人员更容易访问部署过&lt;/strong&gt;程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;结果是，开发人员可以在星期五下午 5 点进行部署，并立即回家。要么更改将被批准（并将在星期一仍然存在），要么将自动回滚，而不会产生任何不良影响（如果你还遵循最佳实践 20 进行渐进式交付，则不会有任何停机时间）&lt;/p&gt;
&lt;h2 id=&#34;23-暂存与生产匹配&#34;&gt;23. 暂存与生产匹配&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我们在最佳实践 12 中解释了应为开发人员测试单个功能而雇用动态环境的原因。这使你有信心每个在将其部署到生产之前，功能都是正确的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还习惯于拥有单个暂存环境（也称为预生产环境），它充当部署应用程序部署到真实生产环境之前的最后网关。此特定环境应尽可能接近生产环境，以便可以快速发现任何配置错误或不匹配，然后将应用程序部署推入真正的生产环境。&lt;/p&gt;
&lt;p&gt;不幸的是，大多数组织将暂存环境与生产环境分开处理。拥有一个与生产分开的暂存环境是一种繁琐的做法，因为这意味着你必须手动维护它并确保它也获得了到达生产环境的任何更新（不仅在应用程序方面，还包括任何配置更改）。&lt;/p&gt;
&lt;p&gt;使用暂存环境的另外两种有效方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;通过克隆生产环境创建一个按需暂存环境，每次部署前都会进行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将特别的生产部分（有时称为阴影生产）用作暂存&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种方法非常适用于小型或中型应用程序，它在部署之前以类似但可能更小的配置克隆生产环境，这意味着你还可以获取一部分数据库以及为服务流量提供较少数量的副本/实例。重要的是，此暂存环境仅在发布期间存在。你在发布前创建它，一旦发布被标记为“成功”，就会销毁它。&lt;/p&gt;
&lt;p&gt;当然，主要好处是在部署之前克隆生产环境可以保证暂存和生产之间具有相同的配置。此外，没有什么需要维护或更新，因为完成部署后你总是会丢弃暂存环境。&lt;/p&gt;
&lt;p&gt;然而，对于具有许多微服务或大型外部资源（例如数据库和消息队列）的大型应用程序来说，这种方法并不现实。在这些情况下，将暂存作为生产的一部分使用要容易得多。重要的是，你使用的生产部分不会得到任何用户流量，因此如果部署失败，用户不会受到影响。优点再次是，由于这是生产的一部分，所以你可以保证配置是最新的，你正在测试的内容将像“真正”的生产一样运行。&lt;/p&gt;
&lt;h2 id=&#34;将这些最佳实践应用于你的组织&#34;&gt;将这些最佳实践应用于你的组织&lt;/h2&gt;
&lt;p&gt;我们希望现在你已经有了一些改进 CI / CD 过程的想法。但请记住，最好采取逐步措施，而不是一次性尝试改变所有内容。&lt;/p&gt;
&lt;p&gt;请参阅本指南的第一部分，其中我们谈到了优先事项。首先关注标记为“关键”的最佳实践，一旦征服了它们，再转向具有“高”重要性的最佳实践。&lt;/p&gt;
&lt;p&gt;我们相信，如果你采用了我们在本指南中描述的大多数实践，你的开发团队将能够专注于发布功能，而不是处理失败的部署和缺少的配置问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nocalhost - 重新定义云原生开发环境</title>
      <link>https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/</link>
      <pubDate>Fri, 19 Feb 2021 13:56:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;随着业务的快速发展，技术部门的组织架构在横向及纵向不断扩大和调整，与此同时，企业的生产资料：应用系统，也变得越来越庞大。为了让应用系统适配企业组织架构的调整，梳理组织架构对于应用权责的边界，大部分组织会选择使用“微服务”架构来对应用系统进行横向拆分，使得应用系统的维护边界适配组织架构的权责边界。&lt;/p&gt;
&lt;p&gt;一般来说，越庞大的组织架构，应用系统会被拆分地越来越细，“微服务”的数量也变得越来越多。而在“微服务”的拆分的实践中，很容易出现将组织架构的权责边界一股脑地对标到“微服务”的拆分粒度中，这可能导致“微服务”拆分粒度过细，数量进一步剧增的问题。最终，“微服务”之间的调用关系就像跨部门协作，也变得越来越复杂，问题在想要新增需求时尤为突出。&lt;/p&gt;
&lt;p&gt;“微服务”带来便利的同时，对开发人员而言，还带来了额外的挑战：如何快速启动完整的开发环境？开发的需求依赖于其他同事怎么联调？如何快速调试这些微服务？&lt;/p&gt;
&lt;p&gt;而对于管理人员来说，也同样带来了一系列的挑战：如何管理开发人员的开发环境？如何让新入职的同事快速进行开发？&lt;/p&gt;
&lt;p&gt;试想一下，要开发由 200 个“微服务”组成的云原生应用，会遇到哪些困难呢？&lt;/p&gt;
&lt;h2 id=&#34;localhost-时代&#34;&gt;Localhost 时代&lt;/h2&gt;
&lt;p&gt;在单体应用的时代，对于开发者来说是极为友好的，开发者使用本机运行应用，修改代码后实时生效，通过浏览器访问 &lt;code&gt;Localhost&lt;/code&gt; 实时查看代码效果。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-localhost-开发&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Localhost 开发&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-1_hu12386046969854329017.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-1_hu4933103223518858958.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-1_hu11162528257929915319.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-1_hu12386046969854329017.webp&#34;
               width=&#34;638&#34;
               height=&#34;239&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Localhost 开发
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;单体应用和“微服务”应用不同，单体应用是“ALL-IN-ONE”组织方式，所有的调用关系仅限于在自身的类和函数，应用对硬件的要求一般也不会太高。&lt;/p&gt;
&lt;p&gt;而开发“微服务”应用则大不相同，由于相互间的依赖关系，当需要开发某一个功能或微服务时，不得不将所有依赖的服务都启动起来。随着微服务数量的增加，开发应用所需要的本地资源越来越多，最终导致本地无法满足开发的配置需求。&lt;/p&gt;
&lt;h2 id=&#34;云原生解放了部署和运维开发呢&#34;&gt;云原生解放了部署和运维，开发呢？&lt;/h2&gt;
&lt;p&gt;云原生和 Kubernetes 的普及，进一步屏蔽了“微服务”应用的复杂度，这主要体现在部署和运维阶段。&lt;/p&gt;
&lt;p&gt;为了解决微服务应用在开发、测试和生产阶段环境一致性的问题，现代的微服务应用开发，都会将每一个组件打包成 Docker 镜像，并以工作负载的形式对其进行部署。利用 DevOps 流水线中的持续集成和持续部署，配合 Kubernetes 探针、HPA、应用自愈的能力，彻底解放了微服务应用的部署和运维环节。&lt;/p&gt;
&lt;p&gt;但我们忽略了一个关键节点：开发阶段&lt;/p&gt;
&lt;p&gt;微服务应用使用 Kubernetes 工作负载封装后，解决了开发过程应用的快速启动问题，开发人员只需要在本地安装单节点的 Kubernetes 集群，例如 Minikube、Kind 等即可快速启动微服务应用。&lt;/p&gt;
&lt;p&gt;但对于开发人员来说，原来单体应用的开发体验变得不复存在，由于应用很难在 Docker 容器之外运行，所以每次代码修改，都需要经历以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行 docker build 构建镜像&lt;/li&gt;
&lt;li&gt;执行 docker tag 对镜像进行标记&lt;/li&gt;
&lt;li&gt;执行 docker push 推送镜像到仓库&lt;/li&gt;
&lt;li&gt;修改 Kubernetes 工作负载的镜像版本&lt;/li&gt;
&lt;li&gt;等待镜像拉取结束&lt;/li&gt;
&lt;li&gt;等待 Pod 重建&lt;/li&gt;
&lt;li&gt;查看修改后的代码效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这直接拖慢了开发的循环反馈过程，每次修改，动辄需要数分钟甚至十分钟的等待时间。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-单体架构和微服务容器架构的开发循环&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;单体架构和微服务容器架构的开发循环&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-2_hu12770405714205214479.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-2_hu8604924210237512596.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-2_hu6428287165452616892.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-2_hu12770405714205214479.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      单体架构和微服务容器架构的开发循环
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;nocalhost---重新定义云原生开发环境&#34;&gt;Nocalhost - 重新定义云原生开发环境&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Nocalhost 是一个云原生开发环境，希望让开发云原生应用像开发单体应用原始又简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nocalhost 重新梳理了开发过程所涉及到的角色和资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;团队管理人员&lt;/li&gt;
&lt;li&gt;开发者&lt;/li&gt;
&lt;li&gt;应用&lt;/li&gt;
&lt;li&gt;集群&lt;/li&gt;
&lt;li&gt;开发空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过对这些角色和资源的重新整合，Nocalhost 重新定义了云原生开发环境，并带来了全新的云原生开发体验。&lt;/p&gt;
&lt;p&gt;为了快速理解 Nocalhost 重新定义的云原生开发环境，让我们首先站在不同的角色来看 Nocalhost 能给他们带来什么。&lt;/p&gt;
&lt;p&gt;开发人员：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;摆脱每次修改需要重新 build 新镜像以及长时间的循环反馈，修改代码立即生效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一键部署开发环境，摆脱本地环境搭建和资源不足的限制&lt;/li&gt;
&lt;li&gt;本地 IDE 编辑器和开发环境联动，支持远程调试&lt;/li&gt;
&lt;li&gt;图形化的 IDE 插件，无需熟悉 &lt;code&gt;kubectl&lt;/code&gt; 命令即可完成云原生环境下的开发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;管理人员：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统一管理微服务应用包，降低应用的维护成本&lt;/li&gt;
&lt;li&gt;统一管理开发环境和集群，提高集群资源的利用率，同时具备隔离特性&lt;/li&gt;
&lt;li&gt;为新员工快速分配开发环境，分配环境后立刻能进行应用开发&lt;/li&gt;
&lt;li&gt;弹性的开发环境资源，用完销毁，降低开发成本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以 &lt;code&gt;Nocalhost&lt;/code&gt; 内置的 &lt;code&gt;Demo&lt;/code&gt;：&lt;code&gt;Bookinfo&lt;/code&gt; 为例，开发 &lt;code&gt;Productpage&lt;/code&gt; 微服务，变成了以下简单的几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一键部署开发环境&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-一键部署开发环境&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;一键部署开发环境&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-3_hu10768139783949067371.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-3_hu7431486951683505808.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-3_hu4719264158970651551.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-3_hu10768139783949067371.webp&#34;
               width=&#34;760&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      一键部署开发环境
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;环境部署完成，选择要开发的组件，点击“锤子”进入开发模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-环境部署完成选择要开发的组件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;环境部署完成，选择要开发的组件&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-4_hu10867230016452162734.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-4_hu13167203652305213141.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-4_hu5543175884761484077.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-4_hu10867230016452162734.webp&#34;
               width=&#34;760&#34;
               height=&#34;412&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      环境部署完成，选择要开发的组件
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;克隆业务代码或选择本地代码目录打开&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-克隆业务代码或打开本地代码目录&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;克隆业务代码或打开本地代码目录&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-5_hu6109291924647363168.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-5_hu10335698870935858224.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-5_hu14244366364316631281.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-5_hu6109291924647363168.webp&#34;
               width=&#34;760&#34;
               height=&#34;412&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      克隆业务代码或打开本地代码目录
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;进入开发模式，本地修改代码并保存，无需重新构建镜像，远端开发环境实时生效，支持远程调试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-本地修改代码远端实时生效&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;本地修改代码，远端实时生效&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-6_hu14171003937426566506.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-6_hu17847966643532716792.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-6_hu679477612743303887.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-6_hu14171003937426566506.webp&#34;
               width=&#34;760&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      本地修改代码，远端实时生效
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-本地修改代码远端实时生效&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;本地修改代码，远端实时生效&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-7_hu15373209810282875262.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-7_hu10952297224754066944.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-7_hu16141477197680003199.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-7_hu15373209810282875262.webp&#34;
               width=&#34;760&#34;
               height=&#34;411&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      本地修改代码，远端实时生效
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;快速体验&#34;&gt;快速体验&lt;/h2&gt;
&lt;p&gt;想要快速体验 Nocalhost，有以下几点前置条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备一个 Kubernetes 集群（1.16+），支持 TKE、Mnikube、Kind 等&lt;/li&gt;
&lt;li&gt;已配置好 &lt;code&gt;kubectl&lt;/code&gt; 且能访问 Kubernetes 集群&lt;/li&gt;
&lt;li&gt;集群开启了 RBAC&lt;/li&gt;
&lt;li&gt;安装 Visual Studio Code（1.52+）和 Nocalhost 插件&lt;/li&gt;
&lt;li&gt;安装 nhctl cli 工具（&lt;a href=&#34;https://nocalhost.dev/installation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://nocalhost.dev/installation/&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于 TKE 等支持 LoadBalancer 的集群，运行以下命令来快速初始化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nhctl init -n nocalhost -p &lt;span class=&#34;m&#34;&gt;7000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 Minikube、Kind、K3S、MicroK8s 等，运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nhctl init -n nocalhost -t nodeport --set mariadb.primary.persistence.enabled&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以 TKE 为例，init 将自动部署 Nocalhost 组件（默认读取 ~/.kube/config 集群）。init 结束后，得到管理员和自动创建的开发者两个角色默认的账号密码，并输出了 Nocalhost Web 控制台的登陆地址：&lt;code&gt;http://81.71.77.28&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-nocalhost-init-初始化&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Nocalhost Init 初始化&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-9_hu16719856163484891999.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-9_hu7412222456545489457.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-9_hu10295854927580275473.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-9_hu16719856163484891999.webp&#34;
               width=&#34;760&#34;
               height=&#34;470&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Nocalhost Init 初始化
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;打开登陆地址，使用默认管理员用户名 &lt;a href=&#34;mailto:admin@admin.com&#34;&gt;admin@admin.com&lt;/a&gt; 和密码 &lt;code&gt;123456&lt;/code&gt; 登陆 Web 控制台，控制台能够管理用户、集群和应用。&lt;code&gt;init&lt;/code&gt; 阶段自动使用部署 Nocalhost 的集群作为开发集群，同时创建了 &lt;code&gt;Bookinfo&lt;/code&gt; 应用和开发者，并为开发者分配了 &lt;code&gt;Bookinfo&lt;/code&gt; 应用的开发空间。&lt;/p&gt;
&lt;p&gt;现在打开 VS Code，进入 Nocalhost 插件，点击上方的“地球”按钮，同样输入 Web 控制台的地址，回车确定。&lt;/p&gt;
&lt;p&gt;点击“Sign In”按钮，输入开发者的登陆账号：&lt;code&gt;foo@nocalhost.dev&lt;/code&gt;，密码：&lt;code&gt;123456&lt;/code&gt;，登陆后即可一键部署 &lt;code&gt;Bookinfo&lt;/code&gt; 并体验无需重新构建镜像的应用开发。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-登陆-nocalhost-vs-code-插件&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;登陆 Nocalhost VS Code 插件&#34; srcset=&#34;
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-10_hu8490962026718239974.webp 400w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-10_hu3437241792547777443.webp 760w,
               /blog/nocalhost-redefine-cloud-native-dev-environment/1-10_hu12312180912278696370.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/nocalhost-redefine-cloud-native-dev-environment/1-10_hu8490962026718239974.webp&#34;
               width=&#34;760&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      登陆 Nocalhost VS Code 插件
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;落地案例&#34;&gt;落地案例&lt;/h2&gt;
&lt;p&gt;目前，腾讯云 CODING DevOps（近 200 微服务）正在使用 Nocalhost 进行开发，实践验证 Nocalhost 能够大大提高开发效率，缩短循环反馈。&lt;/p&gt;
&lt;h2 id=&#34;开源与社区共建&#34;&gt;开源与社区共建&lt;/h2&gt;
&lt;p&gt;Nocalhost 目前是完全开源的，并已进入 CNCF Landscape: &lt;a href=&#34;https://landscape.cncf.io/?selected=nocalhost&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://landscape.cncf.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github 地址：&lt;a href=&#34;https://github.com/nocalhost/nocalhost&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/nocalhost/nocalhost&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用 Apache-2.0 开源协议，可以无限制免费使用。&lt;/p&gt;
&lt;p&gt;想了解更多关于 Nocalhost 的信息，欢迎访问官网：&lt;a href=&#34;https://nocalhost.dev&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://nocalhost.dev&lt;/a&gt; 获取。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Helm Chart 仓库弃用更新</title>
      <link>https://cloudnativecn.com/blog/helm-chart-repository-deprecation-update/</link>
      <pubDate>Thu, 12 Nov 2020 13:05:42 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/helm-chart-repository-deprecation-update/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://www.cncf.io/blog/2020/11/05/helm-chart-repository-deprecation-update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm Chart Repository Deprecation Update&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 2019 年，当 Helm v2 的支持时间表和 &lt;a href=&#34;https://github.com/helm/charts#deprecation-timeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;终止计划&lt;/a&gt; 被宣布的时候，&lt;a href=&#34;https://github.com/helm/charts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;helm/charts GitHub 仓库&lt;/a&gt; 的弃用也同时被宣布。对于弃用的最主要原因是 &lt;a href=&#34;https://github.com/helm/charts/blob/master/OWNERS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;仓库维护人员&lt;/a&gt; 的维护成本显著增加。在过去的几年里，受维护的 charts 数量从约 100 增加到 300 个以上，这也导致了对于仓库的拉取请求和更新需求相应增加。很不幸的是，尽管采取了很多的措施来实现自动 review 和维护任务，但是维护人员能抽出的可用时间却没有增加。&lt;/p&gt;
&lt;p&gt;当我们开始宣布弃用的时候，我们已经开始着手分享我们曾经用来维护 helm/charts 仓库的工具和指导文档。对于那些想要自己保持和维护自己仓库的小伙伴们，你们现在已经有工具能完成以下流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/helm/chart-testing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chart 测试&lt;/a&gt; 为你的 charts PR 提供 lint 和测试&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/helm/chart-releaser&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chart 发布&lt;/a&gt; 提供工具来帮助你使用 GitHub Releases 和 pages 功能来管理你自己的 chart 仓库&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/helm?q=chart&amp;#43;action&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;测试和发布 GitHub Action&lt;/a&gt; 自动化调用上述工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上述工具的帮助下我们就能使很多 charts 迁移到 &lt;a href=&#34;https://github.com/helm/charts/issues/21103&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;他们自己的仓库&lt;/a&gt; 了，以便于进一步的维护。&lt;/p&gt;
&lt;h2 id=&#34;关键时间点和建议行动&#34;&gt;关键时间点和建议行动&lt;/h2&gt;
&lt;p&gt;我们对上述计划和接下来发生的事情可能会有的困惑/疑问进行了提炼，并提供了关键事件时间表和建议的后续行动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2020 年 11 月 2 号——所有非弃用 charts 的 README 中将会添加一个注释信息，以表明这些 charts 将不再更新&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐行动&lt;/strong&gt; —— 如果你依赖于 Charts 仓库中的 chart，那么就需要寻找新的官方地址了。如果没有依赖，那就使用自己的 chart 即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020 年 11 月 6 号——稳定和孵化 charts 仓库将从 &lt;a href=&#34;https://artifacthub.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artifact Hub&lt;/a&gt; 中删除&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐行动&lt;/strong&gt;——无&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020 年 11 月 13 号——&lt;a href=&#34;https://github.com/helm/charts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;helm/charts 仓库&lt;/a&gt; 中的 CI 将被停用并且不再接受拉取请求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐行动&lt;/strong&gt;——关于正在进行的重新安置 charts 到新仓库的方案的更多信息，可以查看 &lt;a href=&#34;https://github.com/helm/charts/issues/21103&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个 issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2020 年 11 月 13 号以后——使用旧地址下载 Charts 将会被重定向到在 GitHub pages 上可用的归档地址。在这个日期以后旧下载地址将不再可用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;推荐行动&lt;/strong&gt;——查看 &lt;a href=&#34;https://helm.sh/docs/faq/#i-am-getting-a-warning-about-unable-to-get-an-update-from-the-stable-chart-repository&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;切换至归档的稳定和孵化仓库&lt;/a&gt; 的相关信息。切记那些 charts 将不再被更新，包括 bug 修复和安全补丁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/helm/charts/issues/23944&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Charts 仓库弃用时间表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/helm/charts/issues/23850&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;历史版本的归档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/helm/community/issues/114&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请求让 CNCF 托管 Helm Charts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tekton 的工作原理</title>
      <link>https://cloudnativecn.com/blog/how-tekton-works/</link>
      <pubDate>Sat, 23 May 2020 22:47:14 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/how-tekton-works/</guid>
      <description>&lt;p&gt;&lt;strong&gt;这篇文章是基于 Tekton Pipeline 的最新版本&lt;code&gt;v0.12.1&lt;/code&gt;版本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快速入门请参考：&lt;a href=&#34;https://atbug.com/tekton-trigger-practice/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生 CICD: Tekton Pipeline 实战&lt;/a&gt; ，实战是基于版本 v0.10.x。&lt;/p&gt;
&lt;h2 id=&#34;pipeline-crd-与核心资源的关系&#34;&gt;Pipeline CRD 与核心资源的关系&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ k api-resources --api-group&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;tekton.dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                SHORTNAMES   APIGROUP     NAMESPACED   KIND
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;clustertasks                     tekton.dev   &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;        ClusterTask
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conditions                       tekton.dev   &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;         Condition
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipelineresources                tekton.dev   &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;         PipelineResource
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipelineruns        pr,prs       tekton.dev   &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;         PipelineRun
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pipelines                        tekton.dev   &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;         Pipeline
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;taskruns            tr,trs       tekton.dev   &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;         TaskRun
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tasks                            tekton.dev   &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;         Task
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tekton Pipelines 提供了上面的 CRD，其中部分 CRD 与 Kubernetes core 中资源相对应&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Task =&amp;gt; Pod&lt;/li&gt;
&lt;li&gt;Task.Step =&amp;gt; Container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902164552270.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;工作原理&#34;&gt;工作原理&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902280074872.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

(图片来自 tekton.dev)&lt;/p&gt;
&lt;p&gt;Tekton Pipeline 是基于 Knative 的实现，pod &lt;code&gt;tekton-pipelines-controller&lt;/code&gt; 中有两个 &lt;a href=&#34;https://knative.dev/docs/eventing/samples/writing-receive-adapter-source/03-controller/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative Controller&lt;/a&gt;的实现：PipelineRun 和 TaskRun。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://atbug.oss-cn-hangzhou.aliyuncs.com/2020/05/23/15902270934199.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;task-的执行顺序&#34;&gt;Task 的执行顺序&lt;/h3&gt;
&lt;p&gt;PipelineRun Controller 的 &lt;code&gt;#reconcile()&lt;/code&gt;方法，监控到有&lt;code&gt;PipelineRun&lt;/code&gt;被创建。然后从&lt;code&gt;PipelineSpec&lt;/code&gt;的 tasks 列表，构建出一个图（&lt;code&gt;graph&lt;/code&gt;），用于描述&lt;code&gt;Pipeline&lt;/code&gt;中 Task 间的依赖关系。依赖关系是通过&lt;code&gt;runAfter&lt;/code&gt;和&lt;code&gt;from&lt;/code&gt;，进而控制&lt;a href=&#34;#Task%e7%9a%84%e6%89%a7%e8%a1%8c%e9%a1%ba%e5%ba%8f&#34;&gt;Task 的执行顺序&lt;/a&gt;。与此同时，准备&lt;code&gt;PipelineRun&lt;/code&gt;中定义的&lt;code&gt;PipelineResources&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Node represents a Task in a pipeline.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// Task represent the PipelineTask in Pipeline
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Task&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// Prev represent all the Previous task Nodes for the current Task
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Prev&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;// Next represent all the Next task Nodes for the current Task
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Graph represents the Pipeline Graph
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Graph&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;c1&#34;&gt;//Nodes represent map of PipelineTask name to Node in Pipeline Graph
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Nodes&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tasks&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;PipelineRun&lt;/code&gt;中定义的参数（parameters）也会注入到&lt;code&gt;PipelineSpec&lt;/code&gt;中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;pipelineSpec&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ApplyParameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipelineSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来就是调用&lt;code&gt;dag#GetSchedulable()&lt;/code&gt;方法，获取未完成（通过 Task 状态判断）的 Task 列表；&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetSchedulable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;doneTasks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为 Task A 创建&lt;code&gt;TaskRun&lt;/code&gt;，假如&lt;code&gt;Task&lt;/code&gt;配置了&lt;code&gt;Condition&lt;/code&gt;。会先为 condition 创建一个&lt;code&gt;TaskRun&lt;/code&gt;，只有在 condition 的&lt;code&gt;TaskRun&lt;/code&gt;运行成功，才会运行 A 的&lt;code&gt;TaskRun&lt;/code&gt;；否则就跳过。&lt;/p&gt;
&lt;h3 id=&#34;step-的执行顺序&#34;&gt;Step 的执行顺序&lt;/h3&gt;
&lt;p&gt;这一部分篇幅较长，之前的文章 &lt;a href=&#34;https://atbug.com/control-process-order-of-pod-containers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;控制 Pod 内容器的启动顺序&lt;/a&gt; 中提到过。&lt;/p&gt;
&lt;p&gt;这里补充一下&lt;a href=&#34;https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#the-downward-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Downward API&lt;/a&gt;的使用，Kubernetes Downward API 的引入，控制着 &lt;code&gt;Task&lt;/code&gt; 的第一个 &lt;code&gt;Step&lt;/code&gt; 在何时执行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TaskRun&lt;/code&gt; Controller 在 reconciling 的过程中，在相应的 &lt;code&gt;Pod&lt;/code&gt; 状态变为&lt;code&gt;Running&lt;/code&gt;时，会将&lt;code&gt;tekton.dev/ready=READY&lt;/code&gt;写入到 Pod 的 annotation 中，来通知第一个&lt;code&gt;Step&lt;/code&gt;的执行。&lt;/p&gt;
&lt;p&gt;Pod 的部分内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;wait_file&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/tekton/downward/ready&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;wait_file_content&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;post_file&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/tekton/tools/0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;termination_path&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/tekton/termination&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;entrypoint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/ko-app/git-init&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- --&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ssh://git@gitlab.nip.io:8022/addozhang/logan-pulse.git&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;revision&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;develop&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/workspace/git-source&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/tekton/tools/entrypoint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/tekton/downward&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tekton-internal-downward&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;downwardAPI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;defaultMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;420&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;fieldRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fieldPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;metadata.annotations[&amp;#39;tekton.dev/ready&amp;#39;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ready&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tekton-internal-downward&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对原生的排序 step container 进一步处理：启动命令使用&lt;code&gt;entrypoint&lt;/code&gt;提供，并设置执行参数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;entrypoint.go&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;orderContainers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;entrypointImage&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;steps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;corev1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;v1alpha1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TaskResult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;corev1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;corev1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;initContainer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;corev1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;         &lt;span class=&#34;s&#34;&gt;&amp;#34;place-tools&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;entrypointImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/ko-app/entrypoint&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;entrypointBinary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;nx&#34;&gt;VolumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;corev1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;VolumeMount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toolsMount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;corev1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;No steps specified&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;steps&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;argsForEntrypoint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;nx&#34;&gt;argsForEntrypoint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;c1&#34;&gt;// First step waits for the Downward volume file.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;				&lt;span class=&#34;s&#34;&gt;&amp;#34;-wait_file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;downwardMountPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;downwardMountReadyFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;s&#34;&gt;&amp;#34;-wait_file_content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Wait for file contents, not just an empty file.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;				&lt;span class=&#34;c1&#34;&gt;// Start next step.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;				&lt;span class=&#34;s&#34;&gt;&amp;#34;-post_file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mountPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;s&#34;&gt;&amp;#34;-termination_path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;terminationPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;c1&#34;&gt;// All other steps wait for previous file, write next file.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;			&lt;span class=&#34;nx&#34;&gt;argsForEntrypoint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;s&#34;&gt;&amp;#34;-wait_file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mountPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;s&#34;&gt;&amp;#34;-post_file&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mountPoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;s&#34;&gt;&amp;#34;-termination_path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;terminationPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;自动运行的容器&#34;&gt;自动运行的容器&lt;/h3&gt;
&lt;p&gt;这些自动运行的容器作为 pod 的&lt;code&gt;initContainer&lt;/code&gt;会在 step 容器运行之前运行&lt;/p&gt;
&lt;h4 id=&#34;credential-initializer&#34;&gt;&lt;code&gt;credential-initializer&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;用于将 &lt;code&gt;ServiceAccount&lt;/code&gt; 的相关 secrets 持久化到容器的文件系统中。比如 ssh 相关秘钥、config 文件以及 know_hosts 文件；docker registry 相关的凭证则会被写入到 docker 的配置文件中。&lt;/p&gt;
&lt;h4 id=&#34;working-dir-initializer&#34;&gt;&lt;code&gt;working-dir-initializer&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;收集&lt;code&gt;Task&lt;/code&gt;内的各个&lt;code&gt;Step&lt;/code&gt;的&lt;code&gt;workingDir&lt;/code&gt;配置，初始化目录结构&lt;/p&gt;
&lt;h4 id=&#34;place-scripts&#34;&gt;&lt;code&gt;place-scripts&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;假如&lt;code&gt;Step&lt;/code&gt;使用的是&lt;code&gt;script&lt;/code&gt;配置（与 command+args 相对），这个容器会将脚本代码（&lt;code&gt;script&lt;/code&gt;字段的内容）持久化到&lt;code&gt;/tekton/scripts&lt;/code&gt;目录中。&lt;/p&gt;
&lt;p&gt;注：所有的脚本会自动加上&lt;code&gt;#!/bin/sh\nset -xe\n&lt;/code&gt;，所以&lt;code&gt;script&lt;/code&gt;字段里就不必写了。&lt;/p&gt;
&lt;h4 id=&#34;place-tools&#34;&gt;&lt;code&gt;place-tools&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;将&lt;code&gt;entrypoint&lt;/code&gt;的二进制文件，复制到&lt;code&gt;/tekton/tools/entrypoint&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;taskstep间的数据传递&#34;&gt;Task/Step间的数据传递&lt;/h3&gt;
&lt;p&gt;针对不同的数据，有多种不同的选择。比如&lt;code&gt;Workspace&lt;/code&gt;、&lt;code&gt;Result&lt;/code&gt;、&lt;code&gt;PipelineResource&lt;/code&gt;。对于由于&lt;code&gt;Task&lt;/code&gt;的执行是通过&lt;code&gt;Pod&lt;/code&gt;来完成的，而&lt;code&gt;Pod&lt;/code&gt;会调度到不同的节点上。因此&lt;code&gt;Task&lt;/code&gt;间的数据传递，需要用到持久化的卷。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;Step&lt;/code&gt;作为&lt;code&gt;Pod&lt;/code&gt;中的容器来运行，&lt;/p&gt;
&lt;h4 id=&#34;workspace&#34;&gt;Workspace&lt;/h4&gt;
&lt;p&gt;工作区，可以理解为一个挂在到容器上的卷，用于文件的传递。&lt;/p&gt;
&lt;h5 id=&#34;persistentvolumeclaim&#34;&gt;&lt;code&gt;persistentVolumeClaim&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;引用已存在&lt;code&gt;persistentVolumeClaim&lt;/code&gt;卷（volume）。这种工作空间，可多次使用，需要先进行创建。比如 Java 项目的 &lt;code&gt;maven&lt;/code&gt;，编译需要本地依赖库，这样可以节省每次编译都要下载依赖包的成本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;workspaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;m2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;claimName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;m2-pv-claim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PersistentVolume&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;m2-pv&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storageClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;manual&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;10Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessModes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ReadWriteMany&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/data/.m2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PersistentVolumeClaim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;m2-pv-claim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storageClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;manual&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# volumeName: m2-pv&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessModes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ReadWriteMany&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;10Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;volumeclaimtemplate&#34;&gt;&lt;code&gt;volumeClaimTemplate&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;为每个&lt;code&gt;PipelineRun&lt;/code&gt;或者&lt;code&gt;TaskRun&lt;/code&gt;创建&lt;code&gt;PersistentVolumeClaim&lt;/code&gt;卷（volume）的模板。比如一次构建需要从 git 仓库克隆代码，而针对不同的流水线代码仓库是不同的。这里就会用到&lt;code&gt;volumeClaimTemplate&lt;/code&gt;，为每次构建创建一个&lt;code&gt;PersistentVolumeClaim&lt;/code&gt;卷。（从 0.12.0 开始）&lt;/p&gt;
&lt;p&gt;生命周期同&lt;code&gt;PipelineRun&lt;/code&gt;或者&lt;code&gt;TaskRun&lt;/code&gt;，运行之后释放。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;workspaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;git-source&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeClaimTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;accessModes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ReadWriteMany&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;1Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;相较于&lt;code&gt;persistantVolumeClain&lt;/code&gt;类型的 workspace，&lt;code&gt;volumeClaimTemplate&lt;/code&gt;不需要在每次在&lt;code&gt;PipelineRun&lt;/code&gt;完成后清理工作区；并发情况下可能会出现问题。&lt;/p&gt;
&lt;h5 id=&#34;emptydir&#34;&gt;&lt;code&gt;emptyDir&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;引用&lt;code&gt;emptyDir&lt;/code&gt;卷，跟随&lt;code&gt;Task&lt;/code&gt;生命周期的临时目录。适合在&lt;code&gt;Task&lt;/code&gt;的&lt;code&gt;Step&lt;/code&gt;间共享数据，无法在多个&lt;code&gt;Task&lt;/code&gt;间共享。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;workspaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;emptyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;configmap&#34;&gt;&lt;code&gt;configMap&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;引用一个&lt;code&gt;configMap&lt;/code&gt;卷，将&lt;code&gt;configMap&lt;/code&gt;卷作为工作区，有如下限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;挂载的卷是&lt;code&gt;只读&lt;/code&gt;的&lt;/li&gt;
&lt;li&gt;需要提前创建&lt;code&gt;configMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configMap&lt;/code&gt;的&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/f16bfb069a22241a5501f6fe530f5d4e2a82cf0e/pkg/apis/core/validation/validation.go#L5042&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大小限制为 1MB（Kubernetes 的限制）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用场景，比如使用&lt;code&gt;maven&lt;/code&gt;编译 Java 项目，配置文件&lt;code&gt;settings.xml&lt;/code&gt;可以使用&lt;code&gt;configMap&lt;/code&gt;作为工作区&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;workspaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;maven-settings&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configmap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;maven-settings&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;secret&#34;&gt;&lt;code&gt;secret&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;用于引用&lt;code&gt;secret&lt;/code&gt;卷，同&lt;code&gt;configMap&lt;/code&gt;工作区一样，也有限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;挂载的卷是&lt;code&gt;只读&lt;/code&gt;的&lt;/li&gt;
&lt;li&gt;需要提前创建&lt;code&gt;secret&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;secret&lt;/code&gt;的&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/f16bfb069a22241a5501f6fe530f5d4e2a82cf0e/pkg/apis/core/validation/validation.go#L5042&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大小限制为 1MB（Kubernetes 的限制）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;results&#34;&gt;&lt;code&gt;results&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;results&lt;/code&gt;字段可以用来配置多个文件用来存储&lt;code&gt;Tasks&lt;/code&gt;的执行结果，这些文件保存在&lt;code&gt;/tekton/results&lt;/code&gt;目录中。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Pipeline&lt;/code&gt;中，可以通过&lt;code&gt;tasks.[task-nanme].results.[result-name]&lt;/code&gt;注入到其他&lt;code&gt;Task&lt;/code&gt;的参数中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tekton.dev/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Task&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;print-date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      A simple task that prints the date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;current-date-unix-timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;The current date in unix timestamp format&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;current-date-human-readable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;The current date in human readable format&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;print-date-unix-timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bash:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        #!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        date +%s | tee $(results.current-date-unix-timestamp.path)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;print-date-humman-readable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bash:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        #!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        date | tee $(results.current-date-human-readable.path)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tekton.dev/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PipelineRun&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pass-date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pipelineSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;print-date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;taskRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;print-date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;read-date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runAfter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#配置执行顺序&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;print-date&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;taskSpec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;current-date-unix-timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;current-date-human-readable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                echo $(params.current-date-unix-timestamp)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                echo $(params.current-date-human-readable)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;current-date-unix-timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;$(tasks.print-date.results.current-date-unix-timestamp)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 注入参数&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;current-date-human-readable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;$(tasks.print-date.results.current-date-human-readable)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 注入参数      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;┌──────Logs&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tekton-pipelines/pass-date-read-date-rhlf2-pod-9b2sk&lt;span class=&#34;o&#34;&gt;)[&lt;/span&gt;all&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ──────────                                                                       │
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│ place-scripts stream closed                                                                                                                                                                                                                                                             ││ step-read &lt;span class=&#34;m&#34;&gt;1590242170&lt;/span&gt;                                                                                                                                                                                                                                                                    │
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│ step-read Sat May &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; 13:56:10 UTC &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt;                                                                                                                                                                                                                                                  ││ step-read + &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1590242170&lt;/span&gt;                                                                                                                                                                                                                                                             │
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│ step-read + &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; Sat May &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; 13:56:10 UTC &lt;span class=&#34;m&#34;&gt;2020&lt;/span&gt;                                                                                                                                                                                                                                           │
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│ place-tools stream closed                                                                                                                                                                                                                                                               │
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│ step-read stream closed                                                                                                                                                                                                                                                                 │
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;pipelineresource&#34;&gt;PipelineResource&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;PipelineResource&lt;/code&gt;在最后提，因为目前只是&lt;code&gt;alpha&lt;/code&gt;版本，何时会进入&lt;code&gt;beta&lt;/code&gt;或者弃用目前还是未知数。有兴趣的可以看下这里：&lt;a href=&#34;https://tekton.dev/docs/pipelines/resources/#why-aren-t-pipelineresources-in-beta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why Aren’t PipelineResources in Beta?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说，&lt;code&gt;PipelineResource&lt;/code&gt;可以通过其他的方式实现，而其本身也存在弊端：比如实现不透明，debug 有难度；功能不够强；降低了 Task 的重用性等。&lt;/p&gt;
&lt;p&gt;比如&lt;code&gt;git&lt;/code&gt;类型的&lt;code&gt;PipelineResource&lt;/code&gt;，可以通过&lt;code&gt;workspace&lt;/code&gt;和&lt;code&gt;git-clone&lt;/code&gt; Task 来实现；存储类型的，也可以通过&lt;code&gt;workspace&lt;/code&gt;来实现。&lt;/p&gt;
&lt;p&gt;这也就是为什么&lt;a href=&#34;#Workspace&#34;&gt;上面介绍 workspace 的篇幅&lt;/a&gt;比较大。个人也偏向于使用&lt;code&gt;workspace&lt;/code&gt;，灵活度高；使用 workspace 的 Task 重用性强。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://atbug.com/tekton-trigger-practice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生 CICD: Tekton Pipeline 实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atbug.com/control-process-order-of-pod-containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;控制 Pod 内容器的启动顺序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://knative.dev/docs/eventing/samples/writing-receive-adapter-source/03-controller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tekton.dev/docs/pipelines/resources/#why-aren-t-pipelineresources-in-beta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why Aren’t PipelineResources in Beta?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Google 混合云多云平台 Anthos Config Management 产品设计分析</title>
      <link>https://cloudnativecn.com/blog/anthos-config-management-intro/</link>
      <pubDate>Wed, 08 May 2019 22:40:05 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/anthos-config-management-intro/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文通过对 Google 近期发布的 Anthos 混合云产品的核心组件 Anthos Config Management 进行分析，探究其背后设计的核心理念——Infrastructure as Code 是如何推动业内一直以来非标准的混合云慢慢走向标准化、供应商无锁定化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;0-anthos-config-management-是什么&#34;&gt;0. Anthos Config Management 是什么？&lt;/h2&gt;
&lt;h3 id=&#34;hello-world-demo&#34;&gt;Hello World Demo&lt;/h3&gt;
&lt;p&gt;大家可以看 Arctiq 公司搞的修改 node 数量 Demo：&lt;a href=&#34;https://www.arctiq.ca/our-blog/2019/4/9/gke-on-prem-and-anthos-config-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.arctiq.ca/our-blog/2019/4/9/gke-on-prem-and-anthos-config-management/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单说，当你修改某个 git 管理下的 yaml 配置文件，里面描述了某个 GKE 私有集群某个 cluster 的 node 数量，然后 Anthos Config Management 会帮你自动的发命令并让节点数量变成你想要的那个。&lt;/p&gt;
&lt;h3 id=&#34;anthos-是啥&#34;&gt;Anthos 是啥？&lt;/h3&gt;
&lt;p&gt;是 Google 发布的混合云多云平台&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GKE：Anthos 的命令和控制核心。用户通过 GKE 的控制平面来对分散在 Google 云、私有数据中心一级其它云平台上的基础设施进行管理。&lt;/li&gt;
&lt;li&gt;GKE On-Prem：Google 推出了一个基于 Kubernetes 的和 GKE 一致的软件平台。用户能够在任何的兼容硬件上部署这一产品，而 Google 将会对其进行管理。从升级 Kubernetes 版本到应用最新补丁，Google 都视其为 GKE 的逻辑扩展。尤其需要注意的是 GKE On-Prem 运行在 VMWare vSphere 6.5 的虚拟化基础上，Hyper-V 和 KVM 等其它虚拟化技术的支持还在开发之中。&lt;/li&gt;
&lt;li&gt;Istio：这一技术让跨平台的联邦网络管理成为可能。Anthos 需要为部署在不同数据中心、GCP 以及其它云上的多种应用程序的组件建立服务网格，Istio 自然是首选。它会和 VMWare NSX、Cisco ACI 以及 Google 自己的 Andromeda 等 SDN 进行无缝集成。已经在网络设施上（例如 F5）进行投资的客户，可以将 Istio 和负载均衡及防火墙集成起来。&lt;/li&gt;
&lt;li&gt;Velostrata：Google 在 2018 年收购了这一云迁移技术，来增强 Kubernetes 的竞争力。Velostrata 的主要功能——在 GCE 实例中复制物理机/虚拟机，并把现有虚拟机转换为 Kubernetes 应用（Pod）。这是业界首个物理机到 Kubernetes 的迁移工具，由 Google 提供。这一技术以 Anthos Migrate 的面目出现，目前是 Beta 阶段。&lt;/li&gt;
&lt;li&gt;Anthos 配置管理：Kubernetes 是一个可扩展的策略驱动的平台。Anthos 的客户必须面对运行在不同环境中的多个 Kubernetes，因此 Google 尝试利用 Anthos 来简化配置管理工作。从发布工件、配置项目、网络策略、密文和密码等类型的配置，Anthos 配置管理都能够进行管理并将配置应用到一或多个集群之中。&lt;/li&gt;
&lt;li&gt;Stackdriver：Stackdriver 为 Anthos 基础设施和应用提供了可观察性的支持。客户能够使用这一组件跟踪运行在 Anthos 集群状态，以及部署在各个托管集群上的应用的健康情况。该组件负责集中地提供监控、日志、跟踪以及观察的支持。&lt;/li&gt;
&lt;li&gt;GCP Cloud Interconnect：在企业数据中心以及云基础设施之间的高速互联，是混合云平台的必要条件。Cloud Interconnect 能够在数据中心和云间交付高达 100Gbps 的高速网络。客户也可以使用 Equinix、NTT Communications、Softbank 等电信厂商的网络将其数据中心延伸到 GCP&lt;/li&gt;
&lt;li&gt;GCP Marketplace：Google 为能够在 Kubernetes 上运行的（来自 ISV 和开源的）软件列表。用户能够在 Anthos 中一键部署 Cassandra 数据库或者 GitLab 等软件。最终 Google 可能还会为内部 IT 提供一个私有的 Catalog 服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大家可以看到，在这 8 大组件里面，大概只有 4 和 5 是最近推出的，其他的早就投入生产并有不少企业在用了，这些组件到底是什么关系？我们把这些组件放到一张图上，就排着这个样子（原谅我忽略了可怜的 StackDriver 和 Marketplace，我假定读者对这 2 个东西很熟悉）&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-acm&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;acm&#34; srcset=&#34;
               /blog/anthos-config-management-intro/14967e6ac3f093b185936e12cc02c46e_hu5781295694362157792.webp 400w,
               /blog/anthos-config-management-intro/14967e6ac3f093b185936e12cc02c46e_hu9957367245513538588.webp 760w,
               /blog/anthos-config-management-intro/14967e6ac3f093b185936e12cc02c46e_hu928289227912848207.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/anthos-config-management-intro/14967e6ac3f093b185936e12cc02c46e_hu5781295694362157792.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      acm
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;也就是说，Anthos Config Management 是一瓶胶水，把混合云里面应用的配置工作给自动化了。&lt;/p&gt;
&lt;h3 id=&#34;且慢什么叫做配置自动化&#34;&gt;且慢，什么叫做配置自动化？&lt;/h3&gt;
&lt;p&gt;这个词过于宽泛，所以在这里提几个常见的 k8s 用户场景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你是否碰到过，一个典型的 Web 应用，在测试环境有一份配置文件（我们假定这个配置文件是一个 k8s 的 deployment 的 yaml），在准生产环境有一份配置文件，在公有云有一份配置文件，在私有云也有一份配置文件？每次你都复制黏贴并修改一些参数，并指望这些环境能够混合起来给终端用户提供合理的服务，但手工修改往往会造成差错&lt;/li&gt;
&lt;li&gt;你是否碰到过，配置文件存在多个 k8s 集群里面，每次都要手忙脚乱的用 kubectl 挨个修改，但没法看到这些配置的历史版本？你可以回滚应用的 docker 镜像，但你没法回滚配置。如果你是一个资深 k8s 玩家，你当然知道在 etcd 的某个角落里面存有所有 yaml 的历史版本，通过某种黑魔法般的命令行操作你还是可以找回历史的，但肯定没有 git 那么爽快&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是的，Anthos Config Management 就是用来解决这些问题的，并且，是按照&lt;a href=&#34;https://cloud.google.com/solutions/infrastructure-as-code/?hl=zh-cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Infrastructure as code&lt;/a&gt;的理念来做这个事情的&lt;/p&gt;
&lt;h3 id=&#34;继续问另外一个问题为什么配置这么重要&#34;&gt;继续问另外一个问题，为什么配置这么重要？&lt;/h3&gt;
&lt;p&gt;众所周知，在传统的 Unix/Linux 环境下，在/etc 下有不少配置文件，大部分苦逼的运维工程师每天的工作就是修改这些文件，并且通过重启进程或者给进程发信号让这些配置生效，并且要修改上百台机器；过去几年有了 ansible 或者 salt 这类批处理工具，把登陆几百台机器的工作量给省了；而 k8s 除了解决集群的批量问题，还引入了一个新的理念，就是声明式配置，运维工程师不需要苦逼的重启进程，这些“进程”会自动按照你的配置达到期望的状态（当然，由于这是在一个集群内，所以需要一定的时间），也就是说&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;声明式配置&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 面向终态
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以，你写的配置和传统的配置文件，那种静态的文本配置已经完全不一样了，最后这些配置会变成生产系统的某个状态，并且，如果使用了合理的工具链，这一系列工作都是自动化的。&lt;/p&gt;
&lt;p&gt;那么现在这些“配置文件”还是配置吗？运维工程师的工作流程就变成了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;li&gt;read, think, modify&lt;/li&gt;
&lt;li&gt;git push // all things done automatically&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的，你会发现运维工程师的工作流程就和开发工程师一样了！&lt;/p&gt;
&lt;p&gt;这些配置，无论是什么语言写的，本质上变成了&lt;strong&gt;源代码&lt;/strong&gt;，只是没有通过编译工具链而是通过运维工具链达到了鲁棒性，这样就把传统运维的重复劳动工作从大部分人手中拿出来交给少部分的&lt;strong&gt;运维工具链专家&lt;/strong&gt;去维护。&lt;/p&gt;
&lt;h2 id=&#34;1-内部设计&#34;&gt;1. 内部设计&lt;/h2&gt;
&lt;p&gt;关于这点，Google 并没有放出这个东西的源代码，但是有一张图&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-acm2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;acm2&#34; srcset=&#34;
               /blog/anthos-config-management-intro/6587d93de31ac21cdb7c0aad02223d7f_hu16770245030359285299.webp 400w,
               /blog/anthos-config-management-intro/6587d93de31ac21cdb7c0aad02223d7f_hu6778606950449527220.webp 760w,
               /blog/anthos-config-management-intro/6587d93de31ac21cdb7c0aad02223d7f_hu15006374698241125998.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/anthos-config-management-intro/6587d93de31ac21cdb7c0aad02223d7f_hu16770245030359285299.webp&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      acm2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;是的，这张图在组件上画的非常清晰，Anthos Config Management，在运行形态上是一个 k8s 的 operator，部署在多个集群里面，并且应该可以从同一个远程 git repo 里面读取配置，从这个&lt;a href=&#34;https://github.com/GoogleCloudPlatform/csp-config-management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;demo 库&lt;/a&gt;里面，我们可以看到这个 operator 读取 git 库的配置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;addons.sigs.k8s.io/v1alpha1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ConfigManagement&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;config-management&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;syncRepo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;git@github.com:GoogleCloudPlatform/csp-config-management.git&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;syncBranch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;syncWait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ssh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;policyDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo-corp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里几个参数清晰的标明，Anthos Config Management 会去每 5 秒钟读取一次 git repo 的 0.1.0 分支，并按照这个分支上的配置来进行后续的操作。那么，这些操作具体能干啥，怎么干呢？&lt;a href=&#34;https://cloud.google.com/anthos/docs/concepts/anthos-overview#centralized_config_management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方文档&lt;/a&gt;实在是太可怜了，就几句话就想打发我们，不过，从 Demo 里面我们可以试图寻找这些功能和配置的对应关系。读者可以把&lt;a href=&#34;https://github.com/GoogleCloudPlatform/csp-config-management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;demo 库&lt;/a&gt; git clone 下来，比对着看。&lt;/p&gt;
&lt;p&gt;官方的功能描述是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从单一代码库衍生的真实，控制和管理
&lt;ul&gt;
&lt;li&gt;允许使用代码审查，验证和回滚工作流程。&lt;/li&gt;
&lt;li&gt;避免阴影操作，由于手动更改导致的 Kubernetes 集群之间不同步。&lt;/li&gt;
&lt;li&gt;允许使用 CI / CD 管道进行自动化测试和部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;跨所有集群的一步式部署
&lt;ul&gt;
&lt;li&gt;Anthos Config Management 将单个 Git 提交转换为跨所有集群的多个 kubectl 命令。&lt;/li&gt;
&lt;li&gt;只需还原 Git 中的更改即可回滚。然后，大规模自动部署恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;丰富的继承模型，简化修改
&lt;ul&gt;
&lt;li&gt;使用命名空间，您可以为所有集群，某些集群，某些命名空间甚至自定义资源创建配置。&lt;/li&gt;
&lt;li&gt;使用命名空间继承，您可以创建一个分层的命名空间模型，该模型允许跨 repo 文件夹结构进行配置继承。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是 demo 的树形目录结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── cluster
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── namespace-reader-clusterrole.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── namespace-reader-clusterrolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── pod-creator-clusterrole.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── pod-security-policy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── audit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── namespace.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── online
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── shipping-app-backend
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       ├── pod-creator-rolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       ├── quota.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       ├── shipping-dev
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       │   ├── job-creator-role.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       │   ├── job-creator-rolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       │   ├── namespace.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       │   └── quota.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       ├── shipping-prod
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       │   └── namespace.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │       └── shipping-staging
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │           └── namespace.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── sre-rolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── sre-supported-selector.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── viewers-rolebinding.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── config-management.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── resourcequota-hierarchy.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我相信应该是 anthos 的工作流应该是读取 cluster 里面的一些安全配置，并且在所有集群上都创建这里的 namespace 目录所描述的命名空间。&lt;/p&gt;
&lt;p&gt;在一些 demo 视频里面我们还看到了 clusterregistry 目录，应该是用来修改集群的一些属性，达到动态修改节点数量的目的。&lt;/p&gt;
&lt;p&gt;但如何让一个应用在多个集群的多个 namespace 流转，当前还没能看到痕迹，从 namespace 的嵌套目录来看，应用 WorkLoad 会经过这些目录的层级，然后动态的修改自己的一些配置。这些细节还有待研究。&lt;/p&gt;
&lt;h2 id=&#34;2-结语&#34;&gt;2. 结语&lt;/h2&gt;
&lt;h3 id=&#34;核心洞察&#34;&gt;核心洞察&lt;/h3&gt;
&lt;p&gt;Anthos 是在多 k8s 集群的场景下，想到了这两点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;既然 k8s 把所有东西的状态变为静态的 yaml 文本描述，那么这些配置存在 etcd 里面并用 kubectl 去修改就是低效的，完全可以用 git 存起来&lt;/li&gt;
&lt;li&gt;这些配置之间是有冗余的，完全可以通过模板化的方式去自动搞定单个应用多集群的配置&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;遗留问题&#34;&gt;遗留问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Anthos Config Management 可以替代 Federation 吗？&lt;/li&gt;
&lt;li&gt;Anthos Config Management 和 Knative 是啥关系？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anthos 深度分析，看懂谷歌云的三级火箭：&lt;a href=&#34;https://www.tmtpost.com/3895215.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.tmtpost.com/3895215.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;关于 Anthos：&lt;a href=&#34;https://toutiao.io/posts/2a1ymm/preview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://toutiao.io/posts/2a1ymm/preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anthos Config Management 官方文档：&lt;a href=&#34;https://cloud.google.com/anthos/docs/concepts/anthos-overview#centralized_config_management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloud.google.com/anthos/docs/concepts/anthos-overview#centralized_config_management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;产品主页：&lt;a href=&#34;https://cloud.google.com/anthos-config-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cloud.google.com/anthos-config-management/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;官方 Demo：&lt;a href=&#34;https://github.com/GoogleCloudPlatform/csp-config-management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/GoogleCloudPlatform/csp-config-management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Arctiq 公司搞的修改 node 数量 Demo：&lt;a href=&#34;https://www.arctiq.ca/our-blog/2019/4/9/gke-on-prem-and-anthos-config-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.arctiq.ca/our-blog/2019/4/9/gke-on-prem-and-anthos-config-management/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;另一个 Demo：&lt;a href=&#34;https://www.youtube.com/watch?v=00f7aE8cfY0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=00f7aE8cfY0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
