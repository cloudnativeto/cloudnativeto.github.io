<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>可观测性 | 云原生社区</title>
    <link>https://cloudnative.to/category/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link>
      <atom:link href="https://cloudnative.to/category/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/index.xml" rel="self" type="application/rss+xml" />
    <description>可观测性</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 06 May 2021 02:04:05 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>可观测性</title>
      <link>https://cloudnative.to/category/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link>
    </image>
    
    <item>
      <title>New Relic 开源 Pixie，其 Kubernetes 原生集群内观察平台</title>
      <link>https://cloudnative.to/blog/new-relic-open-sources-pixie-its-kubernetes-native-in-cluster-observability-platform/</link>
      <pubDate>Thu, 06 May 2021 02:04:05 +0800</pubDate>
      <guid>https://cloudnative.to/blog/new-relic-open-sources-pixie-its-kubernetes-native-in-cluster-observability-platform/</guid>
      <description>&lt;p&gt;本文译自 ZDNet 的文章 &lt;a href=&#34;https://www.zdnet.com/article/new-relic-open-sources-pixie-its-kubernetes-native-in-cluster-observability-platform/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;New Relic open sources Pixie, its Kubernetes-native in-cluster observability platform&lt;/a&gt;，译者&lt;a href=&#34;https://jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宋净超&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;好消息是，云计算、&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 和云原生计算结合在一起，使软件开发比以前更快、更强大。坏消息是，保持对所有这些的关注比以往任何时候都更难。这就是为什么 &lt;a href=&#34;https://newrelic.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;New Relic&lt;/a&gt; 将其 Kubernetes 原生集群内观察平台 &lt;a href=&#34;http://px.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixie&lt;/a&gt; 作为一个新的开源项目，在 &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache 2.0 许可&lt;/a&gt;下贡献给&lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生计算基金会（CNCF）的&lt;/a&gt;原因，这是一个好消息。&lt;/p&gt;
&lt;p&gt;Pixie 是一个新的云原生应用程序的可观察性平台。有了它，开发人员可以通过一个 shell 命令看到他们应用程序的所有指标、事件、日志和追踪。有了 Pixie，你不需要添加度量（instrumentation ）代码，设置临时仪表板，或将数据移出集群，就能看到正在发生的事情。这将为你节省宝贵的时间，这样你就可以致力于建立更好的软件，而不是用更好的方法来监控它。&lt;/p&gt;
&lt;p&gt;该程序作为一组 Kubernetes 服务部署在被监控的集群内。简而言之，Pixie 是一个原生的 Kubernetes 程序。它的 Pixie 边缘模块（PEM）被部署为 DaemonSet。在你的集群内，PEM 利用 Pixie 的 &lt;a href=&#34;https://lwn.net/Articles/740157/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt; 程序来收集网络事务和系统指标，而不需要修改代码。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;亚马逊网络服务（AWS）&lt;/a&gt;可观察性服务总经理 Mark Carter 补充说：“有了 &lt;a href=&#34;https://newrelic.com/blog/best-practices/what-is-ebpf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt;，即 Pixie 平台支持的 Linux 中的新度量能力，开发和运维可以利用一种新的可观察性的超级力量。”&lt;/p&gt;
&lt;p&gt;这是非常方便的。正如 New Relic 总裁 Bill Staples 在博客中所说。“这些&lt;a href=&#34;https://newrelic.com/blog/nerd-life/open-source-observability-pixie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生环境&lt;/a&gt;的动态、分布式性质&lt;a href=&#34;https://newrelic.com/blog/nerd-life/open-source-observability-pixie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;带来了一系列新的可观察性挑战&lt;/a&gt;。我们相信开源的、社区驱动是解决这些挑战的最好方法”。因此，通过使用 &lt;a href=&#34;https://opensource.newrelic.com/projects/open-telemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 作为度量化标准&lt;/a&gt;，分析和故障排除都变得更加容易。&lt;/p&gt;
&lt;p&gt;Staples 继续说道。“通过一个命令，你可以点亮你的整个云环境并立即获得遥测数据。我们相信所有的开发者都应该获得这种惊人的开发者体验，它可以减少观察的摩擦，节省宝贵的时间以用来开发更好的软件。为了实现这一目标，我们还将 Pixie 的大部分工程资源投入到这个开源项目中。”&lt;/p&gt;
&lt;p&gt;展望未来，New Relic 公司 Pixie 和 New Relic 开源部总经理、最近收购的 &lt;a href=&#34;https://pixielabs.ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixie 实验室&lt;/a&gt;的首席执行官兼联合创始人 Zain Asgar 说，“开源是 New Relic 和 Pixie 的决定性价值，这就是为什么我们正在用 OpenTelemetry 对我们的可观察性产品进行标准化，并正在将 Pixie 作为一个开源项目进行贡献。我们已经亲眼看到了开放治理对开源项目的积极影响，我们期待着通过我们在 CNCF 的 [新] 白金会员资格，在全行业范围内支持这一倡议。”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/opensource/gathering-insights-on-kubernetes-applications-services-and-network-traffic-with-pixie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixie 开源现在也将在 AWS 上运行&lt;/a&gt;，作为 OpenTelemetry 项目的一个安全的、可生产的、由 AWS 支持的发行版。&lt;/p&gt;
&lt;p&gt;CNCF 总经理 Priyanka Sharma 欢迎 New Relic 加入该组织。“我们很高兴欢迎 New Relic 成为白金会员和 Zain Asgar 加入我们的董事会。Zain 和 New Relic 对推进我们的使命和支持我们的社区的承诺将有很大的帮助。我们特别期待着他们在可观察性方面细致入微的专业知识和观点”。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SkyWalking 前端监控的应用</title>
      <link>https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/</link>
      <pubDate>Tue, 13 Apr 2021 18:05:42 +0800</pubDate>
      <guid>https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/</guid>
      <description>&lt;p&gt;网络应用性能会影响用户的留存率。如果页面加载时间过长，用户就会放弃。所以我们需要监控 Web 应用来了解性能，确保服务稳定、可用、健康。&lt;a href=&#34;https://github.com/apache/skywalking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache SkyWalking&lt;/a&gt; 是一款专门为云原生和基于容器架构设计的应用性能监控（APM）工具。其 &lt;a href=&#34;https://github.com/apache/skywalking-client-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;skywalking-client-js&lt;/a&gt; 是一个轻量级的客户端 JavaScript 异常、性能和追踪库。&lt;/p&gt;
&lt;p&gt;本文介绍了 skywalking-client-js 如何将其监控扩展到浏览器，为 SkyWalking 后端提供性能指标和错误收集。&lt;/p&gt;
&lt;h2 id=&#34;性能指标&#34;&gt;性能指标&lt;/h2&gt;
&lt;p&gt;skywalking-client-js 使用 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/performance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;window.performance&lt;/a&gt; 来收集性能数据。从 MDN 文档来看，性能接口提供了对当前页面的性能相关信息的访问。它是 High Resolution Time API 的一部分，但对 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Performance_Timeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Performance Timeline API&lt;/a&gt;、&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Navigation_timing_API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Navigation Timing API&lt;/a&gt;、&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;User Timing API&lt;/a&gt; 和 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Resource_Timing_API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Resource Timing API&lt;/a&gt; 有所增强。&lt;/p&gt;
&lt;p&gt;在 skywalking-client-js 中，所有的性能指标都是根据 W3C 规范中定义的 &lt;a href=&#34;https://www.w3.org/TR/navigation-timing/?spm=a2c4g.11186623.2.12.2f495c7cmRef8Q#sec-navigation-timing-interface&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Navigation Timing API&lt;/a&gt; 来计算的。我们可以使用 window.performance.timing 属性获得一个描述页面的 PerformanceTiming 对象。PerformanceTiming 接口包含的属性提供了当前页面加载和使用过程中发生的各种事件的性能计时信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3x19976j30oa0bnac9_hu036958af73a4c58cd47b604adbdaac50_59550_4121cb529d3f5a310add56f8d738f2db.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3x19976j30oa0bnac9_hu036958af73a4c58cd47b604adbdaac50_59550_8a6f0aa86f62469fa31ea6ad39835f26.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3x19976j30oa0bnac9_hu036958af73a4c58cd47b604adbdaac50_59550_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3x19976j30oa0bnac9_hu036958af73a4c58cd47b604adbdaac50_59550_4121cb529d3f5a310add56f8d738f2db.webp&#34;
               width=&#34;760&#34;
               height=&#34;364&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们把这些属性放在一起看，可以更好地理解 &lt;a href=&#34;https://www.w3.org/TR/navigation-timing/?spm=a2c4g.11186623.2.14.2f495c7cmRef8Q#processing-model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;W3C&lt;/a&gt; 的下图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3xf13fjj30pc0ff74i_hu4a29a54dd8178a67ea343928796a9d32_69367_3415d74b8d64f3f29d3ad03ac1727b0b.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3xf13fjj30pc0ff74i_hu4a29a54dd8178a67ea343928796a9d32_69367_58669b4d9838a1bb08245434866decf3.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3xf13fjj30pc0ff74i_hu4a29a54dd8178a67ea343928796a9d32_69367_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3xf13fjj30pc0ff74i_hu4a29a54dd8178a67ea343928796a9d32_69367_3415d74b8d64f3f29d3ad03ac1727b0b.webp&#34;
               width=&#34;760&#34;
               height=&#34;463&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下表包含了 skywalking-client-js 的性能指标。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Metrics 名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;计算公式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;redirectTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Page redirection time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;redirectEnd – redirectStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If the current document and the document that is redirected to are not from the same &lt;a href=&#34;http://tools.ietf.org/html/rfc6454&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;origin&lt;/a&gt;, set redirectStart, redirectEnd to 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ttfbTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to First Byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;responseStart – requestStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;According to &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/network/reference?spm=a2c4g.11186623.2.16.2f495c7cmRef8Q#timing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Development&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dnsTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to DNS query&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;domainLookupEnd – domainLookupStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tcpTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to TCP link&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;connectEnd – connectStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to content transfer&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;responseEnd – responseStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sslTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to SSL secure connection&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;connectEnd – secureConnectionStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Only supports HTTPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;resTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to resource loading&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;loadEventStart – domContentLoadedEventEnd&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Represents a synchronized load resource in pages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fmpTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to First Meaningful Paint&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Listen for changes in page elements. Traverse each new element, and calculate the total score of these elements. If the element is visible, the score is 1 * weight; if the element is not visible, the score is 0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;domAnalysisTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to DOM analysis&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;domInteractive – responseEnd&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fptTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;First Paint Time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;responseEnd – fetchStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;domReadyTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to DOM ready&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;domContentLoadedEventEnd – fetchStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;loadPageTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Page full load time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;loadEventStart – fetchStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ttlTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to interact&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;domInteractive – fetchStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;firstPackTime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Time to first package&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;responseStart – domainLookupStart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;skywalking-client-js 收集这些性能指标，并发送给 &lt;a href=&#34;https://skywalking.apache.org/docs/main/latest/en/concepts-and-designs/backend-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OAP（Observability Analysis Platform）服务器&lt;/a&gt;，服务器在后台汇总数据，然后在 UI 端以可视化的方式展示出来。用户可以根据这些数据来优化页面。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3yjrgk5j30q90abwfa_huc82276cb30f693cde10cde237f53a440_45929_c5c622c2786d7c361694abfdf49b2fec.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3yjrgk5j30q90abwfa_huc82276cb30f693cde10cde237f53a440_45929_79d5810175805f82c2bf4ad0e162345b.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3yjrgk5j30q90abwfa_huc82276cb30f693cde10cde237f53a440_45929_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3yjrgk5j30q90abwfa_huc82276cb30f693cde10cde237f53a440_45929_c5c622c2786d7c361694abfdf49b2fec.webp&#34;
               width=&#34;760&#34;
               height=&#34;298&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;异常指标&#34;&gt;异常指标&lt;/h2&gt;
&lt;p&gt;在 skywalking-client-js 中可以捕捉到五种错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;window.addeventlistener (&#39;error &#39;, callback, true)&lt;/code&gt; 捕捉资源加载错误。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.onerror&lt;/code&gt; 抓取 JS 执行错误。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.addEventListener (&#39;unhandledrejection&#39;, callback)&lt;/code&gt; 用来捕捉Promise错误。&lt;/li&gt;
&lt;li&gt;Vue 错误由 &lt;code&gt;Vue.config.errorHandler&lt;/code&gt; 捕获。&lt;/li&gt;
&lt;li&gt;Ajax 错误由 &lt;code&gt;addEventListener (&#39;error&#39;，callback);addEventListener (&#39;abort&#39;，callback);addEventListener (&#39;timeout&#39;，callback);&lt;/code&gt; 在 send callback 中捕获。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;skywalking-client-js 将错误数据追踪到 OAP 服务器，最后在 UI 端将数据可视化呈现。对于 App 的错误概况，有几个指标可以进行基本的统计和错误的趋势，包括以下指标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;App Error Count，选定时间段内的错误总数。&lt;/li&gt;
&lt;li&gt;App JS 错误率，选定时间段内有 JS 错误的 PV 占总 PV 的比例。&lt;/li&gt;
&lt;li&gt;All of Apps Error Count，Top N Apps 错误数排名。&lt;/li&gt;
&lt;li&gt;All of Apps JS Error Rate，前 N 个 Apps JS 错误率排名。&lt;/li&gt;
&lt;li&gt;所选 App 中的版本错误数，所选 App 中的版本错误数排名前 N 名。&lt;/li&gt;
&lt;li&gt;所选 App 中的版本错误率，所选 App 中的版本错误率排名前 N 名 JS 错误率排名。&lt;/li&gt;
&lt;li&gt;所选 App 的出错率，所选 App 的出错率排名前 N 名。&lt;/li&gt;
&lt;li&gt;所选 App 的错误率，所选 App 排名的前 N 个 JS 错误率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3zef9w5j31530rn425_hu53d82cd1ce8666165a0a2be9bd990440_149373_7f9532e857bb1bc7c48dd18746ea1c9a.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3zef9w5j31530rn425_hu53d82cd1ce8666165a0a2be9bd990440_149373_f6496a2f74549967eca112427273ad9a.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3zef9w5j31530rn425_hu53d82cd1ce8666165a0a2be9bd990440_149373_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph3zef9w5j31530rn425_hu53d82cd1ce8666165a0a2be9bd990440_149373_7f9532e857bb1bc7c48dd18746ea1c9a.webp&#34;
               width=&#34;760&#34;
               height=&#34;511&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于页面，我们使用多个指标进行基本统计和错误趋势，包括以下指标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Top Unstable Pages / Error Rate, Top N Error Count pages of the Selected version ranking.&lt;/li&gt;
&lt;li&gt;Top Unstable Pages / Error Count，Top N Error Count 页面的 Selected 版本排名。&lt;/li&gt;
&lt;li&gt;页面错误数布局，一段时间内不同错误的数据显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph4797f9nj31360jxmyo_hu9d2ebf8a00ee69d497dbc95026e41897_81254_69e17557e09c6fc94e9a8bd31659fbf3.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph4797f9nj31360jxmyo_hu9d2ebf8a00ee69d497dbc95026e41897_81254_bef967aaf6aa09bc801d8f128931e897.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph4797f9nj31360jxmyo_hu9d2ebf8a00ee69d497dbc95026e41897_81254_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph4797f9nj31360jxmyo_hu9d2ebf8a00ee69d497dbc95026e41897_81254_69e17557e09c6fc94e9a8bd31659fbf3.webp&#34;
               width=&#34;760&#34;
               height=&#34;386&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;用户指标&#34;&gt;用户指标&lt;/h2&gt;
&lt;p&gt;SkyWalking 浏览器监控还提供了访客使用被监控网站的指标，如 PV（页面浏览量）、UV（独立访客）、前 N 名 PV（页面浏览量）等。&lt;/p&gt;
&lt;p&gt;在 SPA（单页应用）中，页面只会被刷新一次。传统方法只在页面加载后报告一次 PV，但无法统计每个子页面的 PV，也无法使其他类型的日志按子页面进行汇总。&lt;/p&gt;
&lt;p&gt;SkyWalking 浏览器监控针对 SPA 页面提供了两种处理方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启用 SPA 自动解析。该方法适用于大多数以 URL 哈希为路由的单页应用场景。在初始化配置项中，将 enableSPA 设置为 true，将开启页面的哈希变化事件监听器（触发重报 PV），在其他数据报送中使用 URL 哈希作为页面字段。&lt;/li&gt;
&lt;li&gt;手动上报。如果第一种方法无法使用，该方法可以用于所有单页应用场景。下面的例子提供了一个设置页面的方法，当数据上报时，可以手动更新页面名称。调用此方法时，页面 PV 将被默认重新上报：&lt;a href=&#34;https://gist.github.com/Fine0830/53d36508671882e210d7fca861555ce9%e3%80%82&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gist.github.com/Fine0830/53d36508671882e210d7fca861555ce9。&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们来看看下图中的结果。它显示了最受欢迎的应用和版本，以及一段时间内 PV 的变化。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph4820dzsj30du0n975k_hub800e8cb9bd255e134b8eccaf591e5c1_40812_5e66265e4fae17fa7205da8ccbdf1414.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph4820dzsj30du0n975k_hub800e8cb9bd255e134b8eccaf591e5c1_40812_269ba06ad5f24e15567746594b12d211.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph4820dzsj30du0n975k_hub800e8cb9bd255e134b8eccaf591e5c1_40812_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph4820dzsj30du0n975k_hub800e8cb9bd255e134b8eccaf591e5c1_40812_5e66265e4fae17fa7205da8ccbdf1414.webp&#34;
               width=&#34;452&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;让浏览器成为分布式追踪的起点。&lt;/p&gt;
&lt;p&gt;SkyWalking 浏览器监控拦截 HTTP 请求，追踪段（Segment）和跨度（Span）。它支持追踪以下模式的 HTTP 请求。&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;XMLHttpRequest&lt;/a&gt; 和 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fetch.&lt;/a&gt;。它还支持追踪基于 XMLHttpRequest 和 fetch 的库和工具 —— 如 &lt;a href=&#34;https://github.com/axios/axios&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Axios&lt;/a&gt;、&lt;a href=&#34;https://github.com/visionmedia/superagent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SuperAgent&lt;/a&gt;、&lt;a href=&#34;https://www.openapis.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenApi&lt;/a&gt; 等。&lt;/p&gt;
&lt;p&gt;我们来看看 SkyWalking 浏览器监控是如何拦截 HTTP 请求的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph48ldgzhj30u00uudo1_hu5866f2ef945b9d7ce6a4a8721bdce7ba_133694_3f4f42644a5f514462ed32544345e329.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph48ldgzhj30u00uudo1_hu5866f2ef945b9d7ce6a4a8721bdce7ba_133694_577177a680477753a2676fade7f971d2.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph48ldgzhj30u00uudo1_hu5866f2ef945b9d7ce6a4a8721bdce7ba_133694_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph48ldgzhj30u00uudo1_hu5866f2ef945b9d7ce6a4a8721bdce7ba_133694_3f4f42644a5f514462ed32544345e329.webp&#34;
               width=&#34;739&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;之后，使用 &lt;code&gt;window.addEventListener (&#39;xhrReadyStateChange&#39;, callback)&lt;/code&gt;，在请求头中设置sw8=xxxx。同时，向后端报告请求信息。最后，我们可以在追踪页面上查看追踪数据。下图展示的追踪页面。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph49850myj30po0fsaas_hu23fb1eb96e630a4724f8ee511d75d990_40205_6eac6187a3e4bbf43aadac77f5db5d80.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph49850myj30po0fsaas_hu23fb1eb96e630a4724f8ee511d75d990_40205_174fd6e1ed164b6209f0f39f109c41ab.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph49850myj30po0fsaas_hu23fb1eb96e630a4724f8ee511d75d990_40205_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph49850myj30po0fsaas_hu23fb1eb96e630a4724f8ee511d75d990_40205_6eac6187a3e4bbf43aadac77f5db5d80.webp&#34;
               width=&#34;760&#34;
               height=&#34;467&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了了解我们是如何监听 fetch 请求的，我们来看看 &lt;a href=&#34;https://github.com/github/fetch/blob/90fb680c1f50181782f276122c1b1115535b1603/fetch.js#L506&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fetch&lt;/a&gt; 的源码。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph49lzy3wj30v40sq0xk_hu38d05b2abda17b762139a260ffae4fc8_116605_e4a5774a7dd8af3f8a5bb0f834612180.webp 400w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph49lzy3wj30v40sq0xk_hu38d05b2abda17b762139a260ffae4fc8_116605_39299593af292520be1e5bb5491a9608.webp 760w,
               /blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph49lzy3wj30v40sq0xk_hu38d05b2abda17b762139a260ffae4fc8_116605_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/end-user-tracing-in-a-skywalking-observed-browser/008eGmZEly1gph49lzy3wj30v40sq0xk_hu38d05b2abda17b762139a260ffae4fc8_116605_e4a5774a7dd8af3f8a5bb0f834612180.webp&#34;
               width=&#34;760&#34;
               height=&#34;702&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如你所见，它创建了一个 Promise 和一个新的 XMLHttpRequest 对象。由于 fetch 的代码是内置在浏览器中的，它必须先监控代码执行。因此，当我们添加监听事件时，我们无法监控 fetch 中的代码。只是在监控完代码执行后，我们重写一下 fetch： &lt;code&gt;import {fetch} from &#39;whatwg-fetch&#39;; window.fetch = fetch;&lt;/code&gt; 这样，我们就可以通过上面的方法拦截 fetch 请求了。&lt;/p&gt;
&lt;h2 id=&#34;其他资源&#34;&gt;其他资源&lt;/h2&gt;
&lt;p&gt;从 &lt;a href=&#34;https://skywalking.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方网站&lt;/a&gt;、Tetrate &lt;a href=&#34;https://www.tetrate.io/blog/category/open-source/apache-skywalking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;博客&lt;/a&gt; 以及可免费下载的 &lt;a href=&#34;https://www.tetrate.io/apache-skywalking-ebook-tetrate/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;电子书&lt;/a&gt; 中阅读更多关于 SKyWalking 的内容。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
