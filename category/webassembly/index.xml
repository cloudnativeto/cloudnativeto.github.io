<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebAssembly | 云原生社区（中国）</title>
    <link>https://cloudnative.to/category/webassembly/</link>
      <atom:link href="https://cloudnative.to/category/webassembly/index.xml" rel="self" type="application/rss+xml" />
    <description>WebAssembly</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 07 Aug 2023 13:05:42 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>WebAssembly</title>
      <link>https://cloudnative.to/category/webassembly/</link>
    </image>
    
    <item>
      <title>WebAssembly 的采用受到了什么阻碍？</title>
      <link>https://cloudnative.to/blog/whats-holding-up-webassemblys-adoption/</link>
      <pubDate>Mon, 07 Aug 2023 13:05:42 +0800</pubDate>
      <guid>https://cloudnative.to/blog/whats-holding-up-webassemblys-adoption/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;译者注：WebAssembly 的采用情况受到了组件模型的阻碍，这是一个需要解决的关键问题。尽管 WebAssembly 已经被广泛部署以提高应用程序在浏览器或后端运行时的性能，但其全部潜力尚未得到实现。为了实现一次编写、多处部署范例，需要一个通用的标准来将不同语言与其特定的功能集和设计范式集成起来。许多公司和大学的工程师正在开发组件模型、Wasi 提议和语言工具链，这些工程师的目标是将规范放入 W3C 中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&#34;https://thenewstack.io/whats-holding-up-webassemblys-adoption/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thenewstack.io/whats-holding-up-webassemblys-adoption/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WebAssembly 的承诺是：将应用程序放在 WebAssembly（Wasm）模块中，可以提高运行时性能和降低延迟速度，同时提高跨平台的兼容性。&lt;/p&gt;
&lt;p&gt;WebAssembly 只需要 CPU 指令集。这意味着在 WebAssembly 模块中部署一个应用程序理论上应该能够在不同的不同的设备上运行和更新，无论是服务器、边缘设备、多云、无服务器环境等等。&lt;/p&gt;
&lt;p&gt;因此，WebAssembly 已经被广泛部署以提高应用程序在浏览器或后端运行时的性能。然而，WebAssembly 的全部潜力尚未得到实现。&lt;/p&gt;
&lt;p&gt;尽管 &lt;a href=&#34;https://webassembly.github.io/spec/core/bikeshed/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 核心规范&lt;/a&gt; 已经成为标准，但服务器端 Wasm 仍然是一个正在进行中的工作。服务器端 Wasm 层有助于确保在部署 Wasm 应用程序的不同设备和服务器之间的端点兼容性。如果没有一个服务器端 WebAssembly 的标准化机制，那么将需要为每种语言构建导出和导入，以便每个运行时将以不同的方式理解导出/导入。&lt;/p&gt;
&lt;p&gt;截至今天，“Wasm 组件”是组件模型，但还有其他品种正在被研究；“&lt;a href=&#34;https://thenewstack.io/mozilla-extends-webassembly-beyond-the-browser-with-wasi/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasi&lt;/a&gt;”是一种为特定硬件配置 WASM 的方法。wasi-libc 是“posixlike kernel”组或“world”；wasi-cloud-core 是一个无服务器“world”的提议。因此，开发人员可以使用他们选择的语言创建应用程序，同时在任何环境中同时分发，无论是在 Kubernetes 集群、服务器、边缘设备等等。&lt;/p&gt;
&lt;p&gt;“超音速”性能、降低操作成本和平台中立性是 WebAssembly 的价值主张，但组件模型仍然是关键问题，Butcher 说。“性能是最容易解决的问题，我认为我们已经能够核对它了。在 Fermyon，我们看到成千上万的用户注册我们的云服务，使总拥有成本直线下降，”Butcher 说。“但是，平台中立性——在我们关心的层面上——需要组件模型。在这方面，明天来临得越快越好。”&lt;/p&gt;
&lt;p&gt;WebAssembly 设计成可以运行使用多种语言编写的应用程序。它现在可以容纳 Python、JavaScript、C++、Rust 等。使用不同编程语言编写的不同应用程序应该能够在单个模块内运行，但这种能力仍然在开发中。&lt;/p&gt;
&lt;p&gt;“在系统级别上使编程语言真正可互换可能是实现一次编写、多处部署范例的最后一个领域。但是为了使这项工作成功，我们需要一个通用的标准来将不同语言与其特定的功能集和设计范式集成起来，”Enterprise Management Associates（EMA）的分析师 Torsten Volk 表示。&lt;/p&gt;
&lt;p&gt;“这是一个经典的集体行动问题，其中单独的营利组织必须合作才能共同实现语言互操作的最终目标。此外，当涉及到在跨语言上标准化和完善功能集时，它们需要就务实妥协达成一致。”&lt;/p&gt;
&lt;h2 id=&#34;汇聚在一起&#34;&gt;汇聚在一起&lt;/h2&gt;
&lt;p&gt;与此同时，来自许多公司和大学的工程师正在开发组件模型、Wasi 提议和语言工具链，这些工程师的目标是将规范放入 World Wide Web Consortium (W3C) 中，Microsoft 的主要项目经理、Azure Core Upstream 的负责人 Ralph Squillace 表示。&lt;/p&gt;
&lt;p&gt;这些工程师通过为开源项目做出贡献或维护开源项目，参与 ByteCode Alliance 等工作，积极为知识共享做出贡献，或在会议上分享他们的知识和经验，例如在 KubeCon + CloudNativeCon Europe 的联合活动 Cloud Native Wasm Day 上。&lt;/p&gt;
&lt;p&gt;“当涉及到标准时，所有主要的相关方都需要能够告诉他们的利益相关者为什么有必要在这个努力上花费宝贵的开发人员时间。当不同的当事方遵循不同的激励结构时，这变得特别棘手，例如，云服务提供商有兴趣让客户在他们的服务上花费尽可能多的钱，而不会因移动到另一个云而感到不满，”Volk 表示。“这意味着需要某种程度的锁定，而企业软件供应商需要专注于高度可定制性和可移植性，从而将其产品开放给尽可能多的受众。所有这些组合显示了实现 Wasm 的互操作性的困难程度之高。我希望我们可以，因为回报肯定应该是值得的。”&lt;/p&gt;
&lt;p&gt;许多提供 PaaS 提供的工具成员继续不断涌现，以等待预期的 WebAssembly 时代的到来。参与者包括 Fermyon 和 Cosmonic。新的玩家 Dylibso 正在开发定制解决方案进行观察性分析；这些解决方案包括 Modsurfer，用于分析在您的环境中运行特定代码的复杂性和潜在风险。&lt;/p&gt;
&lt;p&gt;与此同时，大多数大型软件公司正在积极为 Wasm 做出贡献，而不一定创建正式的部门来支持 Wasm 相关的开源项目、开发、基础设施和网络拓扑的集成，或为 Wasm 开发应用程序，技术领袖几乎都在生产中或作为沙盒项目使用 Wasm。&lt;/p&gt;
&lt;p&gt;为了促进 WebAssembly（Wasm）的整合并弥合任何现有的差距，VMware 的 Wasm Labs 推出了 Wasm Language Runtimes 项目。主要目标是准备运行语言运行时、库和组件，供对 WebAssembly 感兴趣的开发人员使用，根据 VMware 的高级主管、Bitnami 的 CEO Daniel Lopez Ridruejo 表示。&lt;/p&gt;
&lt;p&gt;这些语言运行时可以与其他各种倡议结合使用，包括 mod_wasm（用于运行传统的 Web 应用程序，例如 WordPress）和 Wasm Workers Server（用于执行边缘/无服务器应用程序）。Ridruejo 还提到了 Language Runtime 项目与 Fermyon 的 Spin 等开源努力的兼容性。&lt;/p&gt;
&lt;p&gt;其他公司，如 Chronosphere 和 Microsoft，已经开始使用 WebAssembly 支持其操作，同时继续积极为社区的 Wasm 开发做出贡献。在 Microsoft 的情况下，它与 WebAssembly 的工作可以追溯到多年前。例如，Microsoft Flight Simulator 多年来一直在使用 WebAssembly 进行模块保护，例如当它被证明可以提高分发为 WebAssembly 模块的附加组件的安全性和可移植性时。Excel Online 使用 WebAssembly 计算 Lambda 函数。&lt;/p&gt;
&lt;p&gt;如今，Microsoft 的大部分工作都集中在即将到来的组件模型上，Microsoft 的 Squillace 表示。例如，Microsoft 正在扩大 Azure Kubernetes Service WASI NodePool 的预览，并在 Wasm 沙盒之上为其服务提供额外的超级监视保护，用于请求。这为非常小的裸机微型虚拟机非常快速地提供了用于 wasm 函数的使用。）&lt;/p&gt;
&lt;p&gt;在边缘浏览器之外，Microsoft 主要投资于基于服务器的 Wasm、系统接口（wasi）和围绕 Bytecode Alliance Foundation 的 Wasm 组件生态系统，以及基础设施和语言工具链，以实现有效的使用，Squillace 表示。“这意味着像 CNCF 的 Containerd runwasi shim 用于 Kubernetes 集成这样的开源投资，但也意味着与 TinyGo 兼容的 Wasm 组件工具、VSCode 扩展和 serverless 提案，例如 wasi-cloud-core，以及 Azure 投资于安全性，例如 hyperlight 和诸如 AKS WASI NodePool Preview 和 AKS Edge Essentials 等 Azure 服务。”&lt;/p&gt;
&lt;h2 id=&#34;大炒作&#34;&gt;大炒作&lt;/h2&gt;
&lt;p&gt;WebAssembly 的轨迹反映了类似技术（如 Java、容器等）发生的周期。 Ridruejo 表示：“每一个都看到了一个围绕它的生态系统增长的周期，有了新的监控方式、安全等等。现在还太早，不知道它看起来是什么样子，”Ridruejo 表示。“问题是，在工具提供商和大型企业开始利用 WebAssembly 赚钱之前，需要发生什么。对此，Squillace 表示：&lt;/p&gt;
&lt;p&gt;“客户已经告诉我们，他们需要一个可理解的（如果不是伟大的）开发体验和一个稳固的部署和管理体验。他们还需要网络支持（在第二个预览版中推出）；没有网络支持意味着 IoT 中没有服务主机的运行时支持。最后，他们需要一致的交互式调试。这最后一个在所有语言和运行时上都很难。”&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2023 年 WebAssembly 技术五大趋势预测</title>
      <link>https://cloudnative.to/blog/webassembly-5-predictions-for-2023/</link>
      <pubDate>Mon, 09 Jan 2023 11:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/webassembly-5-predictions-for-2023/</guid>
      <description>&lt;p&gt;2022 年，WebAssembly（通常缩写为 Wasm）成为了&lt;a href=&#34;https://thenewstack.io/yes-webassembly-can-replace-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;焦点&lt;/a&gt;。新的 Wasm 初创企业出现。老牌公司宣布支持 Wasm。Bytecode Alliance 发布了许多 Wasm 标准。Cloud Native Computing Foundation 举办了两次 WasmDay 活动。而其中最大的 Wasm 用户之一 Figma 被 Adobe 以惊人的 200 亿美元的价格收购。&lt;/p&gt;
&lt;p&gt;Wasm 是一种二进制格式。许多不同的语言都可以编译为相同的格式，并且该二进制格式可以在大量操作系统和体系结构上运行。Java 和 .NET 在这方面也很相似，但是 Wasm 有一个重要的区别：Wasm 运行时不信任执行的二进制文件。&lt;/p&gt;
&lt;p&gt;Wasm 应用程序被隔离在沙盒中，只能访问用户明确允许的资源（如文件或环境变量）。Wasm 还有许多其他理想的特性（例如非常出色的性能），但正是它的安全模型使 Wasm 在广泛的环境中使用，从浏览器到边缘和 IoT，甚至到云端。&lt;/p&gt;
&lt;p&gt;如果要在 2022 年发现 Wasm 趋势，那就是 Wasm 现在在浏览器之外也同样成功。这一趋势是 2023 年的基础。随着 Wasm 出现在嵌入式设备到大数据中心的各个地方，2023 年将成为 Wasm 的一年。以下是我对 2023 Wasm 生态系统的五个预测。&lt;/p&gt;
&lt;h2 id=&#34;1-组件模型将是分水岭时刻&#34;&gt;1. 组件模型将是分水岭时刻&lt;/h2&gt;
&lt;p&gt;标准很少是一个生态系统中最令人兴奋的部分。而且，随着 “组件模型” 这样的名字，激起兴奋感确实是一项艰巨的任务。但是，在这个乏味的名字背后是 Wasm 为软件世界带来的最重要的创新。&lt;/p&gt;
&lt;p&gt;组件模型描述了 Wasm 二进制文件之间如何交互的方式。更具体地说，两个组件可以告诉对方它们提供的服务以及需要履行的期望。然后，Wasm 模块可以利用彼此的能力。这为软件开发人员提供了一种新的建立应用程序的方式。开发人员可以声明应用程序所需的组件（或者更抽象地说，应用程序所需的功能），然后 Wasm 运行时可以代表用户组装正确的组件集合。&lt;/p&gt;
&lt;p&gt;Wasm 最多产的贡献者之一 &lt;a href=&#34;https://github.com/sunfishcode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dan Gohman&lt;/a&gt; 写了一篇很好的&lt;a href=&#34;https://blog.sunfishcode.online/what-is-a-wasm-component/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;概述文章&lt;/a&gt;。Fermyon 的 &lt;a href=&#34;https://github.com/dicej&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Joel Dice&lt;/a&gt; 则为那些对内部更感兴趣的人写了一篇&lt;a href=&#34;https://www.fermyon.com/blog/webassembly-component-model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;技术概述&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;组件模型正在迅速成熟，已经出现了参考实现。2023 年将是组件模型开始重新定义我们如何编写软件的一年。&lt;/p&gt;
&lt;h2 id=&#34;2-serverless-将是-wasm-的最佳应用场景&#34;&gt;2. Serverless 将是 Wasm 的最佳应用场景&lt;/h2&gt;
&lt;p&gt;Serverless 的承诺已经在过去几年中显而易见。AWS Lambda 让我们看到了一种新的、简单的编程模型 —— 函数即服务（FaaS）。然而，尽管 Serverless的概念的势头正在建立，但是底层技术的运行成本仍然很高。这种成本已经转嫁给用户。此外，虽然 FaaS 应用的启动速度比容器快，但仍然满足不了当前对于网络性能的期望。还有提升速度的空间。&lt;/p&gt;
&lt;p&gt;Wasm &lt;a href=&#34;https://www.fermyon.com/blog/serverless-reckoning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;改变了&lt;/a&gt; Serverless 的潜力。几乎立即的启动时间、小的二进制大小和平台和体系结构的中立性，使得 Wasm 二进制文件可以使用比运行今天的 Serverless基础设施所需的资源少得多的资源来执行。&lt;/p&gt;
&lt;p&gt;如果全球经济正在进入一个不确定的时期，那么知道 Wasm 可以帮助我们控制成本，同时还能推进开发人员喜欢的 Serverless函数模型，这是件好事。Wasm 的更快的启动时间和适度的资源消耗需要的计算能力比基于容器的系统少得多，并且比 Lambda 等 FaaS 系统更便宜。&lt;/p&gt;
&lt;p&gt;这种对 Wasm 可以改变 Serverless环境的认识，促使 Fermyon 创建了 &lt;a href=&#34;https://developer.fermyon.com/spin/index&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spin&lt;/a&gt;。Spin 是一个面向开发者的工具，用于引导、构建、测试和部署 Serverless功能。Spin 的核心是其基于 Wasm 运行时。它是开源的，已经得到 &lt;a href=&#34;https://www.fermyon.com/cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fermyon Cloud&lt;/a&gt; 和微软 Azure 的 AKS 的支持，2023 年还会有更多的支持。&lt;/p&gt;
&lt;p&gt;小、快、便宜、更好。这就是 Wasm 在 2023 年为 Serverless世界带来的组合。&lt;/p&gt;
&lt;h2 id=&#34;3-wasm-应用程序将存储在-dockerhub-和容器注册表中&#34;&gt;3. Wasm 应用程序将存储在 DockerHub 和容器注册表中&lt;/h2&gt;
&lt;p&gt;包管理——这是从编程语言到操作系统再到像 Kubernetes 这样的集群编排器的必要功能。每次我们发明一项新技术时，我们似乎注定要（重新）发明一个管理该技术资产的系统。&lt;/p&gt;
&lt;p&gt;早在 2022 年初，我们看到了几种管理 Wasm 对象的方法。没有一种方法流行起来。一小群工程师一直坚持把 OCI Registry（也称为 Docker Registry）作为存储 Wasm 的系统。但事实是，OCI Registry 格式不支持非容器工件。它是用来存储 Docker 镜像的。&lt;/p&gt;
&lt;p&gt;然后 OCI Registries 的一项重大变化改变了景观。OCI（&lt;a href=&#34;https://thenewstack.io/open-container-initiative-creates-a-distribution-specification-for-registries/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Container Initiative&lt;/a&gt;）是一个小型标准机构，致力于管理围绕 OCI 容器（或我们过去所称的 Docker 容器）的标准。OCI 定义了容器格式、安全模型和运行时。它还定义了如何在注册表和客户端之间传输容器映像。&lt;/p&gt;
&lt;p&gt;在 2022 年底，OCI Registries 工作组宣布了一种官方方法来存储除容器映像之外的其他内容。这可能包括 Helm 图表、照片或（你猜到了）Wasm 应用程序。这项新功能被称为 “工件存储”。&lt;/p&gt;
&lt;p&gt;当 DockerHub &lt;a href=&#34;https://www.docker.com/blog/announcing-docker-hub-oci-artifacts-support/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布支持&lt;/a&gt;这一新的工件存储规范时，Wasm 生态系统中传遍了信号：我们可以简单地将我们的应用程序存储在像 DockerHub 这样的 OCI 注册表中，而不是重新发明轮子。Wasm 生态系统必须进行新的工作，使这成为现实，但这项工作正在进行中。2023 年将是 Wasm 应用程序在 OCI 注册表中找到家的一年。&lt;/p&gt;
&lt;h2 id=&#34;4-所有大型编程语言都将支持-wasm&#34;&gt;4. 所有大型编程语言都将支持 Wasm&lt;/h2&gt;
&lt;p&gt;语言支持是 Wasm 成功的关键因素。随着能够将 Wasm 编译成 Wasm 的新语言的出现，新的开发人员群体可以获得 Wasm 的优势。几乎所有排名前 20 的编程语言都在&lt;a href=&#34;https://www.fermyon.com/wasm-languages/webassembly-language-support&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加 Wasm 支持&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在 2022 年，我们看到 Wasm 取得了三个巨大的进步。&lt;a href=&#34;https://pythondev.readthedocs.io/wasm.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt; 添加了支持。然后是 &lt;a href=&#34;https://www.ruby-lang.org/en/news/2022/12/06/ruby-3-2-0-rc1-released/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ruby&lt;/a&gt;。10 月，一直支持浏览器内的 Wasm 的 .NET 增加了更深入的 Wasm 支持，使其&lt;a href=&#34;https://www.fermyon.com/blog/dotnet-wasi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;能够在浏览器之外运行&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另外三种语言在今年也取得了一些进展，但 2023 年将是这些语言可以使用的一年。这三种语言是 Kotlin、Dart 和当然是世界上最流行的编程语言：JavaScript。&lt;/p&gt;
&lt;p&gt;Kotlin 和 Dart 社区都一直积极参与构建 Wasm 编译目标。但是两者都在等待 Wasm 的一项标准成熟 —— 一项描述垃圾收集的标准，这是语言运行时中的一项功能，允许内存在程序执行时清理。我们的预测是 &lt;a href=&#34;https://github.com/WebAssembly/gc/blob/main/proposals/gc/Overview.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wasm-GC 建议书&lt;/a&gt;将在 2023 年初可用并支持，因此 Kotlin 和 Dart 将很快发布 Wasm 编译器。&lt;/p&gt;
&lt;p&gt;我们的最后一种语言非常重要，因此它值得特别预测。&lt;/p&gt;
&lt;h2 id=&#34;5-javascript-将成为最受欢迎的-wasm-语言&#34;&gt;5. JavaScript 将成为最受欢迎的 Wasm 语言&lt;/h2&gt;
&lt;p&gt;JavaScript 与 Wasm 的关系最为复杂。在最初的设想中，Wasm 与浏览器中的 JavaScript 交互。事实上，Wasm 最初的承诺是，它将延伸浏览器语言支持超出 JavaScript。&lt;/p&gt;
&lt;p&gt;但实际使用情况会使假设渐渐淡化。&lt;/p&gt;
&lt;p&gt;由于 Wasm 在浏览器外，许多开发人员希望能够在任何可以运行 Wasm 的地方运行他们的 JavaScript 代码。最好的方法是使 JavaScript 在 Wasm 运行时内部运行（而不是浏览器中的下方）。在 2022 年，我们看到几个新的 Wasm 项目专注于将 JS 带入新的运行时。这些项目中的大多数使用了一个叫 &lt;a href=&#34;https://bellard.org/quickjs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QuickJS&lt;/a&gt; 的优秀开源项目。&lt;/p&gt;
&lt;p&gt;QuickJS 有许多优点，其中最重要的是它完全符合最新的 JavaScript 标准。但它不是设计成最快或最强大的 JavaScript 引擎的。它非常易于嵌入，许多早期的 Wasm 项目已经找到了将解释器编译到 Wasm 并在 Wasm 运行时内部运行 JavaScript 的方法。&lt;/p&gt;
&lt;p&gt;但是有一个主流的 JavaScript 运行时正在加入竞争。Mozilla 的 &lt;a href=&#34;https://spidermonkey.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SpiderMonkey&lt;/a&gt; 引擎以其性能和健壮性而闻名，正在进入 Wasm 世界。它最著名的用途是在 Mozilla Firefox 浏览器中使用，但也可以在浏览器外使用。作为一个可以不断优化执行的脚本的运行时，SpiderMonkey 引擎将是 Wasm 世界中最快的 JS 引擎。早期数据表明，由于在这种环境中可以进行的优化，JavaScript 在 Wasm 版本的 SpiderMonkey 中运行的速度可能&lt;a href=&#34;https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;比浏览器中的 JavaScript 快 13 倍&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;JavaScript 是世界上最受欢迎的编程语言。随着 QuickJS 和 SpiderMonkey 等 Wasm 运行时的出现，Wasm 的潜力突然对巨大的开发人员社区开放。是的，C 是第一种支持 Wasm 的编程语言。是的，Rust 有相当大的红利。当然，我们也看到 Python 和 Ruby 在行动。但 JavaScript 将像火箭一样冲入 Wasm 宇宙。&lt;/p&gt;
&lt;h2 id=&#34;结论2023-年是-wasm-年&#34;&gt;结论：2023 年是 Wasm 年&lt;/h2&gt;
&lt;p&gt;我对 Wasm 生态系统内将发生什么做出了五个大胆的预测。随着这些里程碑的实现，Wasm 将作为浏览器以外的通用技术变得更加有用。在文章开头，我提出 2023 年有望成为 Wasm 的一年。考虑到这五个预测，很容易看出为什么：新功能、巧妙的用例、与 Docker Hub 的集成以及广泛的语言支持相结合，使得这种对开发人员友好的技术具有巨大的前途。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;Matt Butcher，他是 WebAssembly Cloud 公司 Fermyon 的联合创始人和 CEO。Matt 是 Helm、Brigade、CNAB、OAM、Glide 和 Krustlet 的原始创建者之一。他撰写和合作撰写了许多书籍，包括《学习 Helm》和《Go in Practice》。他是 &amp;ldquo;Kubernetes 插图儿童指南&amp;quot;系列的共同创造者。目前，他主要从事 WebAssembly 项目，如 Spin、Fermyon Cloud 和 Bartholomew。他拥有哲学博士学位，住在科罗拉多州。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
