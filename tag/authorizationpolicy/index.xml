<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AuthorizationPolicy | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/authorizationpolicy/</link>
      <atom:link href="https://cloudnativecn.com/tag/authorizationpolicy/index.xml" rel="self" type="application/rss+xml" />
    <description>AuthorizationPolicy</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 24 Apr 2025 18:09:59 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>AuthorizationPolicy</title>
      <link>https://cloudnativecn.com/tag/authorizationpolicy/</link>
    </image>
    
    <item>
      <title>Ambient Mesh 中的授权策略指南</title>
      <link>https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/</link>
      <pubDate>Thu, 24 Apr 2025 18:09:59 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/</guid>
      <description>&lt;p&gt;服务网格最受欢迎的功能之一，就是能够对网络流量强制执行访问控制策略。由于所有流量都经过代理服务器，因此你可以确保没有人能够绕过某个强制点直接访问服务，而且这些强制点可以位于每个服务前，而不是仅在网络边缘。&lt;/p&gt;
&lt;p&gt;与传统的防火墙或 Kubernetes 的 NetworkPolicy 功能不同，服务网格还可以访问应用层（第七层，L7）信息，例如请求是 HTTP 的 GET 还是 POST，以及请求中携带的 cookie 中的用户身份。&lt;/p&gt;
&lt;p&gt;Ambient Mesh（由 Istio 的 Ambient 模式和 Gloo Mesh 实现）极大地简化了服务网格的交付方式，并显著降低了成本。它的做法是&lt;a href=&#34;https://ambientmesh.io/docs/about/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 L4 和 L7 的处理拆分为两个不同的代理组件&lt;/a&gt;。但这也意味着我们必须改变对访问控制的默认假设：我们不再默认每个工作负载前都有一个 L7 感知的强制执行点。好消息是，大多数情况下我们并不需要它，如果确实需要，也可以按需部署，仅作用于需要保护的工作负载。&lt;/p&gt;
&lt;h3 id=&#34;ambient-mesh-中的身份认证与授权&#34;&gt;Ambient Mesh 中的身份认证与授权&lt;/h3&gt;
&lt;p&gt;运行在服务网格中的每个工作负载都有一个基于命名空间和 ServiceAccount 的身份。这些身份在网格内会被自动验证：这是 mTLS 提供的特性，Ambient 模式默认启用 mTLS。&lt;/p&gt;
&lt;p&gt;我们使用 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 来控制流量。此类策略指定网格中的目标，并包含规则，用于基于来源（from）、操作（to）以及条件（when）来允许或拒绝访问。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ztunnel&lt;/code&gt; 代理始终可以强制执行策略，但它只了解 L3/L4 层的信息（如主机与端口）；而 &lt;code&gt;waypoint&lt;/code&gt; 代理还可感知 L7 信息（如路径与方法），但不是默认部署的。为了兼顾 Ambient 模式的优势与安全性，我们需要为这两类代理分别定义不同粒度的策略。幸运的是，这并不复杂。&lt;/p&gt;
&lt;h3 id=&#34;两类不同的授权策略&#34;&gt;两类不同的授权策略&lt;/h3&gt;
&lt;p&gt;考虑某个部署在 Ambient Mesh 中的工作负载，没有使用 Waypoint。这时策略只能在服务端的 ztunnel 上强制执行。而 ztunnel 无法识别 L7 信息，因此只能强制 L4 层的策略。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f1_hu_f3f250e26fe4f503.webp 400w,
               /blog/ambient-mesh-authorization-policy/f1_hu_47cda3e656a287dc.webp 760w,
               /blog/ambient-mesh-authorization-policy/f1_hu_77fdf6cb978db31a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f1_hu_f3f250e26fe4f503.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当你为该工作负载&lt;a href=&#34;https://ambientmesh.io/docs/setup/configure-waypoints/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;引入 Waypoint&lt;/a&gt; 时，策略就可以在两个位置被执行：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f2_hu_42b4867cc14f936e.webp 400w,
               /blog/ambient-mesh-authorization-policy/f2_hu_ee3f68c15aa45293.webp 760w,
               /blog/ambient-mesh-authorization-policy/f2_hu_26d72b1a87811898.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f2_hu_42b4867cc14f936e.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当系统存在多个策略执行点时，应该&lt;strong&gt;始终在最早的执行点&lt;/strong&gt;上应用策略。&lt;/p&gt;
&lt;p&gt;例如，若将所有策略都设置在 Waypoint 上，则直接访问工作负载的流量将绕过策略。而对于公开访问的服务，策略可能已在网关处执行。为了避免重复处理，&lt;a href=&#34;https://ambientmesh.io/docs/traffic/gateways/#gateways-and-waypoints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;默认情况下 Gateway 会直接将流量转发给服务&lt;/a&gt;，绕过 Waypoint。&lt;/p&gt;
&lt;p&gt;因此，推荐的做法是：在 ztunnel 上定义“基础设施策略”，强制使用 Waypoint，然后在 Waypoint 或 Gateway 上定义“应用层策略”。&lt;/p&gt;
&lt;h3 id=&#34;策略的作用目标与绑定&#34;&gt;策略的作用目标与绑定&lt;/h3&gt;
&lt;p&gt;上面的示意图未涉及实际场景中工作负载与 waypoint 实例的多副本情况。我们在写策略时，需要明确它的作用目标：即它是对哪个服务或工作负载生效。&lt;/p&gt;
&lt;p&gt;Istio 会自动将策略绑定到正确的代理上：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f3_hu_72aaf51948e34e94.webp 400w,
               /blog/ambient-mesh-authorization-policy/f3_hu_bc5544521b8c41dc.webp 760w,
               /blog/ambient-mesh-authorization-policy/f3_hu_e1317dbbf2760728.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f3_hu_72aaf51948e34e94.webp&#34;
               width=&#34;760&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果策略由 ztunnel 执行，你可以通过指定 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 所在的 namespace 和 label selector 选择其作用的工作负载。这类似于 Kubernetes 的 NetworkPolicy，或 Istio sidecar 模式下的策略绑定方式：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;应用对象&lt;/th&gt;
          &lt;th&gt;Namespace&lt;/th&gt;
          &lt;th&gt;Selector&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;网格中所有工作负载&lt;/td&gt;
          &lt;td&gt;istio-system&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;default 命名空间下的所有工作负载&lt;/td&gt;
          &lt;td&gt;default&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;匹配特定标签的工作负载&lt;/td&gt;
          &lt;td&gt;任意命名空间&lt;/td&gt;
          &lt;td&gt;matchLabels&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;而 Waypoint 使用 Kubernetes Gateway API 配置，策略通过 &lt;code&gt;targetRefs&lt;/code&gt; 字段&lt;a href=&#34;https://ambientmesh.io/docs/setup/configure-waypoints/#attach-policies-and-routes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;绑定到 Gateway&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么 Waypoint 使用不同的绑定方式？&lt;/strong&gt;
使用不同的绑定方式可以明确区分不同层级的策略含义，而 &lt;code&gt;targetRefs&lt;/code&gt; 遵循了 Kubernetes Gateway API 的语义。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;请注意，我们并未直接使用“L4 策略”或“L7 策略”的说法，因为 Waypoint 也可以执行 L4 策略。后文将说明为什么你可能希望这么做。&lt;/p&gt;
&lt;h3 id=&#34;访问控制的基础&#34;&gt;访问控制的基础&lt;/h3&gt;
&lt;p&gt;如果某个工作负载没有配置任何授权策略，则默认允许所有访问。一旦存在至少一个包含 &lt;code&gt;ALLOW&lt;/code&gt; 操作的策略，则&lt;strong&gt;所有未匹配任何 &lt;code&gt;ALLOW&lt;/code&gt; 的流量都会被拒绝&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这点非常重要。例如，你允许来自 Gateway 的流量访问某工作负载，后来引入了 Waypoint，则来自 Waypoint 的流量将会被拒绝，除非你更新策略。&lt;/p&gt;
&lt;h3 id=&#34;使用-ztunnel-强制执行策略&#34;&gt;使用 ztunnel 强制执行策略&lt;/h3&gt;
&lt;p&gt;在很多场景下，不部署 Waypoint，仅使用 Ambient Mesh 的 &lt;em&gt;安全叠加层（secure overlay layer）&lt;/em&gt; 是合理的选择。Istio 的 L4 属性（IP、端口、命名空间、身份主体）即可用于授权策略。&lt;/p&gt;
&lt;p&gt;这使得我们能实现最小权限的微分段：即仅允许必要的服务之间互相通信。当某个服务被攻破时，攻击流量也会携带其真实身份。例如，图像处理服务无权访问支付服务后端，可以轻松通过策略限制这种访问。&lt;/p&gt;
&lt;h3 id=&#34;非法策略属性与拒绝流量&#34;&gt;非法策略属性与拒绝流量&lt;/h3&gt;
&lt;p&gt;前面提到，L4 策略属性可以用于 ztunnel 绑定的策略。你甚至可以复用 Istio sidecar 模式下的策略到 ambient 模式中，其中可能包含 L7 属性（如 HTTP 方法或路径）。但由于 ztunnel 无法识别 L7 属性，会发生什么呢？&lt;/p&gt;
&lt;p&gt;简而言之：&lt;strong&gt;ztunnel 会安全失败（fail-safe）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于包含 L7 属性的 &lt;code&gt;DENY&lt;/code&gt; 策略：忽略 L7 部分，仅保留其余部分。&lt;/li&gt;
&lt;li&gt;对于包含 L7 属性的 &lt;code&gt;ALLOW&lt;/code&gt; 策略：L7 匹配规则会被移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样做的结果比原策略更严格。因为只要有 &lt;code&gt;ALLOW&lt;/code&gt; 策略存在，未被匹配的流量就会被默认拒绝。所以最终结果是，所有流量都匹配默认拒绝规则。&lt;/p&gt;
&lt;h3 id=&#34;引入-waypoint-的策略执行&#34;&gt;引入 Waypoint 的策略执行&lt;/h3&gt;
&lt;p&gt;绑定在 Waypoint 与 ztunnel 上的策略存在两个主要区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;targetRefs&lt;/code&gt; 替代 selector；&lt;/li&gt;
&lt;li&gt;支持 L7 属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你将某个工作负载配置为使用 Waypoint 后，它就成为了该工作负载最合适的策略执行位置，即使仅是执行 L4 策略。原因在于 Ambient 模式下的身份工作机制：&lt;/p&gt;
&lt;p&gt;工作负载间的 mTLS 通信是由两端的 ztunnel 管理的：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f4_hu_b31bb5181e403d4f.webp 400w,
               /blog/ambient-mesh-authorization-policy/f4_hu_b9a8b9e01cea2b70.webp 760w,
               /blog/ambient-mesh-authorization-policy/f4_hu_5ef274a3335ee58a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f4_hu_b31bb5181e403d4f.webp&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了让 Waypoint 能够解密和检查流量，它必须终止原有的 mTLS，重新发起一次连接：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f5_hu_bddfcbe26157fcf.webp 400w,
               /blog/ambient-mesh-authorization-policy/f5_hu_393ba6007e31457f.webp 760w,
               /blog/ambient-mesh-authorization-policy/f5_hu_800904b04429a1ce.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f5_hu_bddfcbe26157fcf.webp&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这意味着，服务器端 ztunnel 所见到的源身份是 &lt;strong&gt;Waypoint 的身份&lt;/strong&gt;，而非原始客户端。如果你希望根据真实源身份做出策略判断，策略应部署在 Waypoint 上。&lt;/p&gt;
&lt;h3 id=&#34;只允许来自-waypoint-的连接&#34;&gt;只允许来自 Waypoint 的连接&lt;/h3&gt;
&lt;p&gt;为了确保策略真正通过 Waypoint 执行，必须防止流量绕过 Waypoint。默认情况下，Ambient Mesh 会自动将服务流量路由到 Waypoint，但服务端的 ztunnel 仍接受来自任何客户端的连接。&lt;/p&gt;
&lt;p&gt;某些场景下这没问题，比如 Prometheus 采集某个 Pod 的 metrics，通常是直接连接，而不经过 Waypoint。&lt;/p&gt;
&lt;p&gt;若你需要阻止其他流量，应在 ztunnel 上定义策略，只&lt;a href=&#34;https://ambientmesh.io/docs/security/waypoint-authz/#restricting-workloads-to-only-accept-traffic-from-waypoints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;允许来自指定 Waypoint 的连接&lt;/a&gt;。必要时可&lt;a href=&#34;https://ambientmesh.io/docs/security/waypoint-authz/#exceptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加例外&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
