<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GKE | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/gke/</link>
      <atom:link href="https://cloudnativecn.com/tag/gke/index.xml" rel="self" type="application/rss+xml" />
    <description>GKE</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 10 Apr 2025 20:54:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>GKE</title>
      <link>https://cloudnativecn.com/tag/gke/</link>
    </image>
    
    <item>
      <title>Istio 在 GKE 上的无缝 TLS 体验：使用自定义 Admission Controller 自动签发证书</title>
      <link>https://cloudnativecn.com/blog/seamless-tls-istio-gke-auto-provision-certificates/</link>
      <pubDate>Thu, 10 Apr 2025 20:54:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/seamless-tls-istio-gke-auto-provision-certificates/</guid>
      <description>&lt;p&gt;Istio 已经成为 Kubernetes 中服务间通信管理的事实标准，提供了强大的流量治理、安全防护和可观测性能力。然而，当我们在 &lt;strong&gt;Google Kubernetes Engine (GKE)&lt;/strong&gt; 上通过 Istio Gateway 暴露服务时，TLS 证书的管理仍然是一项挑战。&lt;/p&gt;
&lt;p&gt;尽管 &lt;strong&gt;cert-manager&lt;/strong&gt; 在 Kubernetes 中简化了证书的签发过程，但目前它并不支持基于注解自动为 Istio Gateway 签发证书。这使得用户需要手动创建 &lt;code&gt;Certificate&lt;/code&gt; 和 &lt;code&gt;Issuer&lt;/code&gt; 等资源，不仅繁琐，还容易产生配置不一致，增加了运维负担。&lt;/p&gt;
&lt;p&gt;为了填补这一空缺，本文提出了一种基于 &lt;strong&gt;Kubernetes Admission Controller&lt;/strong&gt; 的自动化方案，实现证书的自动签发与注入。&lt;/p&gt;
&lt;h2 id=&#34;gke-用户为何需要关注&#34;&gt;GKE 用户为何需要关注？&lt;/h2&gt;
&lt;p&gt;对于在 GKE 上运行 Istio 的团队而言，尤其是在大规模多微服务场景下，手动管理证书效率低下。虽然 GKE 支持 Google 托管证书，但出于灵活性和对多种 CA 支持的考虑，许多团队依然倾向于使用 &lt;strong&gt;cert-manager&lt;/strong&gt;。本文介绍的解决方案，正是为了让 cert-manager 能无缝与 Istio Gateway 集成，在保持安全性与可靠性的前提下，实现自动化证书管理。&lt;/p&gt;
&lt;h2 id=&#34;技术栈&#34;&gt;技术栈&lt;/h2&gt;
&lt;p&gt;Admission Controller 采用以下技术实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;FastAPI&lt;/strong&gt;：高性能 Python Web 框架，作为 Webhook 服务的主干。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uvicorn&lt;/strong&gt;：轻量级 ASGI 服务器，用于部署 FastAPI 应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Python SDK&lt;/strong&gt;：用于与 K8s API 交互，动态创建证书资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;：用于容器化 webhook 服务，方便部署与交付。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Kubernetes Engine (GKE)&lt;/strong&gt;：控制器的运行平台。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/Sayed-Imran/istio-cert-manager-webhook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio-Cert Admission Controller&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在进入具体实现前，我们先了解一下 Kubernetes 中的 webhook 机制。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-admission-webhook验证与修改&#34;&gt;Kubernetes Admission Webhook：验证与修改&lt;/h2&gt;
&lt;p&gt;Admission Webhook 可拦截 Kubernetes API 请求，在资源落库前进行校验或修改，是实现策略控制与自动化的关键机制。Kubernetes 支持两种主要类型的 Webhook：&lt;/p&gt;
&lt;h3 id=&#34;1-validating-webhook验证型&#34;&gt;1. Validating Webhook（验证型）&lt;/h3&gt;
&lt;p&gt;用于在资源创建或修改前进行校验，若不符合预期规范可直接拒绝该请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;典型场景&lt;/strong&gt;：校验每个 Istio Gateway 是否包含合法的 &lt;code&gt;host&lt;/code&gt; 字段。&lt;/p&gt;
&lt;h3 id=&#34;2-mutating-webhook变更型&#34;&gt;2. Mutating Webhook（变更型）&lt;/h3&gt;
&lt;p&gt;可对资源进行修改，如注入默认值或自动添加注解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;典型场景&lt;/strong&gt;：为 Istio Gateway 自动添加 &lt;code&gt;cert-manager.io/issuer&lt;/code&gt; 注解，触发证书自动签发。&lt;/p&gt;
&lt;p&gt;在本文中，我们实现的是一个 &lt;strong&gt;Validating Webhook&lt;/strong&gt;，它不仅校验 &lt;code&gt;issuer&lt;/code&gt; 是否存在，还在条件满足时自动创建对应的 &lt;code&gt;Certificate&lt;/code&gt; 资源；若 &lt;code&gt;issuer&lt;/code&gt; 不存在，则直接拒绝请求。&lt;/p&gt;
&lt;h2 id=&#34;架构设计概览&#34;&gt;架构设计概览&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-架构设计概览&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;架构设计概览&#34; srcset=&#34;
               /blog/seamless-tls-istio-gke-auto-provision-certificates/f1_hu16163274552010729362.webp 400w,
               /blog/seamless-tls-istio-gke-auto-provision-certificates/f1_hu12018648231365090295.webp 760w,
               /blog/seamless-tls-istio-gke-auto-provision-certificates/f1_hu10685229775563423765.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/seamless-tls-istio-gke-auto-provision-certificates/f1_hu16163274552010729362.webp&#34;
               width=&#34;760&#34;
               height=&#34;124&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      架构设计概览
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Admission Controller 主要分为三个层次：&lt;/p&gt;
&lt;h3 id=&#34;api-层&#34;&gt;&lt;strong&gt;API 层&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;负责接收来自 K8s API Server 的 AdmissionReview 请求，提取 JSON Payload 并转交给 Handler 层进行处理。&lt;/p&gt;
&lt;h3 id=&#34;handler-层&#34;&gt;&lt;strong&gt;Handler 层&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;核心校验逻辑所在，判断 Istio Gateway 是否包含以下注解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cert-manager.io/issuer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cert-manager.io/cluster-issuer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;场景-1未包含注解&#34;&gt;场景 1：未包含注解&lt;/h4&gt;
&lt;p&gt;直接返回允许响应（&lt;code&gt;allowed: true&lt;/code&gt;），跳过进一步处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;admission.k8s.io/v1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;AdmissionReview&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;response&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;allowed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxx-xxx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Validation passed&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;注意：返回响应的 &lt;code&gt;uid&lt;/code&gt; 字段必须与请求中的完全一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;场景-2包含注解&#34;&gt;场景 2：包含注解&lt;/h4&gt;
&lt;p&gt;Webhook 会进一步查询指定的 &lt;code&gt;Issuer&lt;/code&gt; 或 &lt;code&gt;ClusterIssuer&lt;/code&gt; 是否存在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若存在：放行请求。&lt;/li&gt;
&lt;li&gt;若不存在：返回 &lt;code&gt;allowed: false&lt;/code&gt;，并提示该 Issuer 不存在，防止错误引用导致证书无法生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一机制确保了 Gateway 不会引用不存在的 CA，提高配置安全性。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-工具层实现证书自动创建&#34;&gt;Kubernetes 工具层：实现证书自动创建&lt;/h2&gt;
&lt;p&gt;不同于传统 webhook 仅验证请求，该层进一步实现了 &lt;strong&gt;资源创建功能&lt;/strong&gt;。一旦校验通过，将自动创建 &lt;code&gt;Certificate&lt;/code&gt; 资源，并配置以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据注解设定 &lt;code&gt;issuerRef&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;支持注解配置有效期（&lt;code&gt;duration&lt;/code&gt;）、续期时间（&lt;code&gt;renewBefore&lt;/code&gt;）等字段。&lt;/li&gt;
&lt;li&gt;自动注入 &lt;code&gt;ownerReference&lt;/code&gt;，绑定到原始 Gateway 对象上，实现生命周期联动，当 Gateway 删除时自动清理证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这一机制，原本繁琐的证书配置过程被自动化处理，极大减少人为错误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无需手动创建 Gateway 后再手动生成证书。&lt;/li&gt;
&lt;li&gt;不需手动填写各种元数据或维护引用关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;与-kubernetes-对接注册-validatingwebhookconfiguration&#34;&gt;与 Kubernetes 对接：注册 ValidatingWebhookConfiguration&lt;/h2&gt;
&lt;p&gt;最后一步是将 Admission Controller 注册为 Kubernetes 的 Validating Webhook，配置拦截哪些操作。具体设置为监听对 Istio Gateway 的 &lt;code&gt;CREATE&lt;/code&gt; 与 &lt;code&gt;UPDATE&lt;/code&gt; 操作。&lt;/p&gt;
&lt;p&gt;示意配置如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-示意配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;示意配置&#34; srcset=&#34;
               /blog/seamless-tls-istio-gke-auto-provision-certificates/f2_hu9618232604218857826.webp 400w,
               /blog/seamless-tls-istio-gke-auto-provision-certificates/f2_hu3432124741495777229.webp 760w,
               /blog/seamless-tls-istio-gke-auto-provision-certificates/f2_hu7144883279989152317.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/seamless-tls-istio-gke-auto-provision-certificates/f2_hu9618232604218857826.webp&#34;
               width=&#34;523&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      示意配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：Webhook 服务必须通过 HTTPS 提供服务，K8s API Server 仅支持加密通信。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过扩展传统 Admission Controller 的功能，实现了与 Istio Gateway 紧密集成的 TLS 自动签发方案。它兼具自动化与生命周期感知，不仅提升了配置一致性，也减少了证书管理的复杂性。&lt;/p&gt;
&lt;p&gt;尽管此方案主要面向 Istio + cert-manager，但该模式也适用于其他资源的自动创建与治理场景。只需结合合理的校验逻辑、资源绑定策略与安全机制，Admission Controller 就能成为 Kubernetes 中强大的自动化利器。&lt;/p&gt;
&lt;p&gt;如果你对云原生安全治理、证书生命周期管理或 Istio Gateway 的自动化感兴趣，可以进一步参考项目代码并进行实践部署：https://github.com/Sayed-Imran/istio-cert-manager-webhook&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
