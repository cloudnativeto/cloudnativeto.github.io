<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenTelemetry | 云原生社区（中国）</title>
    <link>https://cloudnative.to/tag/opentelemetry/</link>
      <atom:link href="https://cloudnative.to/tag/opentelemetry/index.xml" rel="self" type="application/rss+xml" />
    <description>OpenTelemetry</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Tue, 02 Jan 2024 08:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>OpenTelemetry</title>
      <link>https://cloudnative.to/tag/opentelemetry/</link>
    </image>
    
    <item>
      <title>OpenTelemetry 与可观测性：展望未来</title>
      <link>https://cloudnative.to/blog/opentelemetry-and-observability-looking-forward/</link>
      <pubDate>Tue, 02 Jan 2024 08:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/opentelemetry-and-observability-looking-forward/</guid>
      <description>&lt;p&gt;本文译自：&lt;a href=&#34;https://thenewstack.io/opentelemetry-and-observability-looking-forward/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry and Observability: Looking Forward&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;让我们探讨一些令人兴奋的趋势，考虑到我们期待 2024 年会有什么样的可观测性发展。&lt;/p&gt;
&lt;p&gt;随着年底的临近，现在是一个停下来思考的好时机。2023 年对于 OpenTelemetry 来说是一个里程碑，因为其三个基本信号，跟踪、度量和日志，都达到了稳定版本。这一成就标志着&lt;a href=&#34;https://thenewstack.io/opentelemetry-gaining-traction-from-companies-and-vendors/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry&lt;/a&gt;最初愿景的实现，即提供一个基于标准的框架，用于仪器化和收集可观测性数据。&lt;/p&gt;
&lt;p&gt;让我们抓住这个机会，探讨一下我们所见证的一些令人兴奋的趋势，深入研究创新的产品和用例，并在期待 2024 年的到来时深思熟虑地考虑可观测性的不断演变。&lt;/p&gt;
&lt;h2 id=&#34;度量标准的崭露头角&#34;&gt;度量标准的崭露头角&lt;/h2&gt;
&lt;p&gt;尽管 OpenTelemetry 关于度量的规范在 2022 年 5 月被宣布为稳定版本，但今年看到了其被广泛采用。以下是一些从业者的文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由 VMware 的 Matthew Kocher 和 Carson Long 撰写的文章，标题为“&lt;a href=&#34;https://opentelemetry.io/blog/2023/cloud-foundry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;体验报告：在 Cloud Foundry 中采用 OpenTelemetry 进行度量&lt;/a&gt;”。&lt;/li&gt;
&lt;li&gt;我们自己的 Matheus Nogueira 撰写的文章，标题为“&lt;a href=&#34;https://tracetest.io/blog/adding-opentelemetry-metrics-in-your-go-app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在你的 Go 应用程序中添加 OpenTelemetry 度量&lt;/a&gt;”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;展望 2024 年，可以预期会看到类似的日志运动和采用。&lt;/p&gt;
&lt;h2 id=&#34;关注在负载测试中使用分布式跟踪&#34;&gt;关注在负载测试中使用分布式跟踪&lt;/h2&gt;
&lt;p&gt;2023 年，两个领先的负载测试工具，&lt;a href=&#34;https://k6.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grafana k6&lt;/a&gt;和&lt;a href=&#34;https://artillery.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artillery.io&lt;/a&gt;，都添加了对 OpenTelemetry 的支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grafana k6 &lt;a href=&#34;https://github.com/grafana/xk6-distributed-tracing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;引入了跟踪&lt;/a&gt;功能，使性能工程师能够在&lt;a href=&#34;https://thenewstack.io/trace-based-testing-the-next-step-in-observability/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;负载测试&lt;/a&gt;期间识别系统瓶颈或故障。&lt;/li&gt;
&lt;li&gt;Artillery.io 随后也&lt;a href=&#34;https://www.artillery.io/blog/introducing-opentelemetry-support&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加了度量和分布式跟踪&lt;/a&gt;，提供了对系统性能更详细的分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tracetest 利用了 k6 测试中暴露的功能，以&lt;a href=&#34;https://docs.tracetest.io/tools-and-integrations/k6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;启用基于跟踪的负载测试&lt;/a&gt;，在运行测试时进行深入的断言。我们已经看到许多客户广泛使用了这个功能，比如&lt;a href=&#34;https://tracetest.io/case-studies/how-sigma-software-built-load-testing-for-their-microservices-with-k6-tracetest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sigma Software&lt;/a&gt;。在 2024 年，Tracetest 团队将考虑将这一能力添加到&lt;a href=&#34;http://artillery.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Artillery.io&lt;/a&gt;和其他负载测试工具中。&lt;/p&gt;
&lt;h2 id=&#34;opentelemetry-的支持和用例扩展&#34;&gt;OpenTelemetry 的支持和用例扩展&lt;/h2&gt;
&lt;p&gt;越来越多的供应商正在采用 OpenTelemetry 标准，以支持典型但非常重要的遥测数据分析之外的行动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些公司，比如&lt;a href=&#34;https://opentelemetry.io/blog/2023/tyk-api-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tyk 正在仪器化其 API 网关，以原生支持 OpenTelemetry&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;终端用户正在发现 OpenTelemetry 的新用例，比如&lt;a href=&#34;https://thenewstack.io/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用分布式跟踪来观察你的 CI/CD 流水线&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tracetest.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tracetest&lt;/a&gt;利用分布式跟踪数据进行集成和端到端测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;强调-opentelemetry-收集器&#34;&gt;强调 OpenTelemetry 收集器&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/how-adobe-uses-opentelemetry-collector/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 收集器&lt;/a&gt;位于 OpenTelemetry 世界的中心，接收来自应用程序的信号，处理和转换这些信号，然后将它们导出到任意数量的后端系统。随着对 OpenTelemetry 的集成和供应商支持的扩展，对这个集中式收集器的需求和要求也在增加。&lt;/p&gt;
&lt;p&gt;2023 年引入了 OpenTelemetry Transformation Language (OTTL)，增强了 OpenTelemetry 收集器处理和转换传入信号的能力。&lt;/p&gt;
&lt;p&gt;在 Tracetest 中，我们能够利用&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/processor/filterprocessor/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在过滤器处理器中使用 OTTL&lt;/a&gt;的能力，改进了我们从输出大量遥测数据的生产环境中收集跟踪数据的方式。这一变化对&lt;a href=&#34;https://tracetest.io/blog/opentelemetry-collectors-new-filter-processor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 收集器的过滤器处理器&lt;/a&gt;使 Tracetest 适用于在高负载环境中运行测试，包括生产环境。&lt;/p&gt;
&lt;h2 id=&#34;无处不在的可观测性&#34;&gt;无处不在的可观测性&lt;/h2&gt;
&lt;p&gt;在最近的讨论中，我们发现了一种客户中不断增长的趋势，即“无处不在的可观测性”方法。这些公司不仅限于由网站可靠性工程师和 DevOps 传统使用，还包括了每个人，包括开发人员和测试人员，参与到可观测性中。这种转变重新定义&lt;/p&gt;
&lt;p&gt;了可观测性，使其从生产问题的一种反应性工具变成了在开发和测试中都有益的一种主动工具。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.honeycomb.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Honeycomb&lt;/a&gt;强调了&lt;a href=&#34;https://www.honeycomb.io/blog/observability-driven-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在开发过程中使用可观测性&lt;/a&gt;，而像&lt;a href=&#34;http://digma.ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Digma.ai&lt;/a&gt;和 Tracetest 这样的工具正在推动这一前进。&lt;/p&gt;
&lt;h2 id=&#34;浏览器&#34;&gt;浏览器&lt;/h2&gt;
&lt;p&gt;OpenTelemetry 的主要作用一直局限于仪器化后端系统，而基于开放标准的浏览器仪器化仍然是实验性的，进展缓慢。正在努力改进和标准化这种仪器化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tracetest.io/case-studies/how-uzufly-built-end-to-end-testing-serverless-web-app-with-distributed-traces&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Uzufly&lt;/a&gt;在这方面脱颖而出。它使用现有的客户端仪器化来构建测试。展望未来，它的雄心是扩展基于跟踪的测试，以覆盖浏览器内部发起的前端操作所进行的测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这将实现前端和后端的全面端到端测试。请关注 2024 年更多关于这个主题的信息！&lt;/p&gt;
&lt;h2 id=&#34;2023-已经过去&#34;&gt;2023 已经过去&lt;/h2&gt;
&lt;p&gt;告别 2023，我们怀着热情期待 2024 年的到来。OpenTelemetry 具有势头，得到了标准和广泛采用的支持，推动了其增长。新的一年承诺带来令人兴奋的发展，围绕 OpenTelemetry 出现了创新的产品和用例。我迫不及待地想看到 2024 年将揭示的进步和创新。愿 OpenTelemetry 长存！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 OpenTelemetry 提升 CI/CD 管道的可观察性</title>
      <link>https://cloudnative.to/blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/</link>
      <pubDate>Tue, 12 Dec 2023 14:30:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/</guid>
      <description>&lt;p&gt;本文译自：&lt;a href=&#34;https://thenewstack.io/how-to-observe-your-ci-cd-pipelines-with-opentelemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thenewstack.io/how-to-observe-your-ci-cd-pipelines-with-opentelemetry&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：这篇文章介绍了 OpenTelemetry 这个开源框架，它可以帮助你生成、收集换和导出 CI/CD 管道的遥测数据，以实现性能、可靠性、安全性等方面的度量、监控、告警、分析等功能。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如今的软件比 20 多年前的软件复杂得多，这带来了在故障排除代码时面临新挑战。幸运的是，通过将可观测性引入我们的系统，我们在理解应用程序的性能如何以及问题发生在何处方面取得了相当大的进展。&lt;/p&gt;
&lt;p&gt;然而，不仅软件发生了演变 - 创建和开发软件的过程也发生了变化。&lt;a href=&#34;https://roadmap.sh/devops&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps&lt;/a&gt;引入了&lt;a href=&#34;https://thenewstack.io/a-primer-continuous-integration-and-continuous-delivery-ci-cd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CI/CD的概念&lt;/a&gt;。随着交付周期从每月、每季度，到现在每周甚至一天多次，我们正在全面采用自动化来进行软件交付。&lt;/p&gt;
&lt;p&gt;不幸的是，与应用程序软件相比，&lt;a href=&#34;https://thenewstack.io/ci-cd/&#34; title=&#34;CI/CD pipelines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CI/CD流水线&lt;/a&gt;的可观测性进展不大。考虑到这些流水线是软件交付流程的基础，这令人惊讶：如果你没有可见性，那么当出现问题且无法将软件投入生产时，你该如何排除问题？&lt;/p&gt;
&lt;p&gt;这正是本文将重点讨论的内容：CI/CD 流水线的可观测性。首先，我们将定义一些概念；然后，我们将深入探讨观察流水线的重要性以及如何使其可观测；最后，我们将讨论一些尚未解决的挑战。&lt;/p&gt;
&lt;h2 id=&#34;关键概念&#34;&gt;关键概念&lt;/h2&gt;
&lt;p&gt;以下是一些需要了解的定义：&lt;/p&gt;
&lt;h3 id=&#34;可观测性&#34;&gt;可观测性&lt;/h3&gt;
&lt;p&gt;有关&lt;a href=&#34;https://thenewstack.io/observability/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可观测性&lt;/a&gt;有多种定义，因此我们将其缩小为我们最喜欢的定义：&lt;/p&gt;
&lt;p&gt;可观测性，或简称 o11y（发音为“ollie”），允许你通过不了解系统内部运作方式就能从外部了解系统。有趣的是：“o11y”中的数字 11 代表了“可观测性”一词中的字母“o”和“y”之间的字符数。&lt;/p&gt;
&lt;p&gt;这意味着即使你不了解系统的所有细节业务逻辑，系统仍会发出足够的信息，使你能够通过跟踪线索来回答：“为什么会发生这种情况？”但是，如果你的系统不发出信息，那么你就无法进行观察。你如何获取这些信息呢？一种方式是使用 OpenTelemetry。&lt;/p&gt;
&lt;h3 id=&#34;opentelemetry&#34;&gt;OpenTelemetry&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/introducing-opentelemetry-in-your-organization-3-steps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry（OTel）&lt;/a&gt;是一个用于生成、收集、转换和导出遥测数据的开源可观测性框架。它提供了一组 API、软件开发工具包（SDK）、仪器库和工具，帮助你完成这些任务。自 2019 年正式成立以来，它已成为应用程序仪器和遥测生成和收集的事实标准，被包括&lt;a href=&#34;https://innovation.ebayinc.com/tech/engineering/why-and-how-ebay-pivoted-to-opentelemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBay&lt;/a&gt;和&lt;a href=&#34;https://www.infoq.com/presentations/opentelemetry-observability/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Skyscanner&lt;/a&gt;在内的公司使用。&lt;/p&gt;
&lt;p&gt;其最大的好处之一是不受供应商锁定的限制。你可以为应用程序添加遥测一次，并将遥测发送到最适合你的后端。它还提供一些非常酷的工具，例如 Collector。&lt;/p&gt;
&lt;p&gt;Collector 是一个供应商中立的服务，用于接收、转换和导出数据到一个或多个可观测性后端。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-otel-collector-组件的图示&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;OTel Collector 组件的图示&#34; srcset=&#34;
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/1_hub324021bb8008512e57337f27dac5f93_39000_7e054da520dcf8fbfadfe76b5f62f958.webp 400w,
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/1_hub324021bb8008512e57337f27dac5f93_39000_a71a87fc736a69596d4529a63c625ad8.webp 760w,
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/1_hub324021bb8008512e57337f27dac5f93_39000_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/1_hub324021bb8008512e57337f27dac5f93_39000_7e054da520dcf8fbfadfe76b5f62f958.webp&#34;
               width=&#34;760&#34;
               height=&#34;272&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OTel Collector 组件的图示
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Collector 由四个主要组件组成，这些组件访问遥测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Receivers&lt;/strong&gt; 接收数据，无论是来自你的应用程序代码还是基础架构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Processors&lt;/strong&gt; 转换数据。处理器可以执行诸如模糊化数据、添加属性、删除属性或过滤数据等操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exporters&lt;/strong&gt; 将数据转换为与你选择的可观测性后端兼容的格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connectors&lt;/strong&gt; 允许你连接两个流水线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以将 OTel Collector 视为数据管道。&lt;/p&gt;
&lt;h3 id=&#34;cicd-流水线&#34;&gt;CI/CD 流水线&lt;/h3&gt;
&lt;p&gt;CI/CD 是一种自动化的软件交付方法，依赖于两个关键实践：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连续集成（CI）是指在进行代码更改时构建、打包和测试软件。&lt;/li&gt;
&lt;li&gt;连续交付（CD）是指立即将该软件包部署到生产环境中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cicd-流水线-gif其中有只猫在其中移动&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CI/CD 流水线 GIF，其中有只猫在其中移动&#34;
           src=&#34;https://cloudnative.to/blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/2.gif&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CI/CD 流水线 GIF，其中有只猫在其中移动
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;自动化的流水线通过允许你更快地向客户提供新功能、修复错误和一般更新来实现快速的产品迭代。它们消除了手动错误的风险，并标准化了对开发人员的反馈循环。&lt;/p&gt;
&lt;h2 id=&#34;为何-cicd-流水线的可观测性很重要&#34;&gt;为何 CI/CD 流水线的可观测性很重要&lt;/h2&gt;
&lt;p&gt;当你的流水线健康时，你的团队可以持续编写、构建、测试和部署代码和配置更改到生产环境。你还可以改进或实现开发敏捷性，这意味着你可以更改运营方式并最小化确定这些修改是否对应用程序的健康产生了积极或消极影响所需的时间。&lt;/p&gt;
&lt;p&gt;相反，当你的流水线不健康时，你可能会遇到以下一种或多种问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;部署缓慢&lt;/strong&gt;：修复错误可能不够快，以制止用户的不满，问题可能会变得严重。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试问题&lt;/strong&gt;：不得不等待测试完成，或没有足够的时间来测试不同的配置，可能会导致延迟的部署和难以在用户群中实现足够的应用程序性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术债务&lt;/strong&gt;：难以确定底层问题可能导致技术债务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-处于燃烧房间中的猫说一切正常&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;处于燃烧房间中的猫说：“一切正常。”&#34; srcset=&#34;
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/3_hucc598ff7983effda9403f72784f50a7e_342512_f81563b07d737636c0c5d022ee172e2b.webp 400w,
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/3_hucc598ff7983effda9403f72784f50a7e_342512_638c70f7bba482d7f806ec2ff825d8e2.webp 760w,
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/3_hucc598ff7983effda9403f72784f50a7e_342512_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/3_hucc598ff7983effda9403f72784f50a7e_342512_f81563b07d737636c0c5d022ee172e2b.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      处于燃烧房间中的猫说：“一切正常。”
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;流水线是-devops-工程师的生产系统&#34;&gt;流水线是 DevOps 工程师的生产系统&lt;/h3&gt;
&lt;p&gt;虽然流水线可能不是外部用户与之互动的生产环境，但它们绝对是内部用户 - 例如，软件工程师和&lt;a href=&#34;https://thenewstack.io/our-2023-site-reliability-engineering-wish-list/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;站点可靠性工程师&lt;/a&gt;（SRE）- 与之互动的生产环境。能够观察你的生产环境意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免不必要的长周期时间或更改的引导时间，这会影响提交进入生产所需的时间。&lt;/li&gt;
&lt;li&gt;减少推出新功能和错误修复的等待时间。&lt;/li&gt;
&lt;li&gt;缩短用户等待时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码可能会失败&#34;&gt;代码可能会失败&lt;/h3&gt;
&lt;p&gt;CI/CD 流水线由定义其工作方式的代码运行，尽管你付出了最大的努力，代码仍然可能会失败。使应用程序代码可观测有助于你在遇到生产问题时理清头绪。同样，了解你的流水线可以帮助你了解它们失败时发生了什么。&lt;/p&gt;
&lt;h3 id=&#34;故障排除更容易&#34;&gt;故障排除更容易&lt;/h3&gt;
&lt;p&gt;具有可观测的流水线有助于回答以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么失败了？&lt;/li&gt;
&lt;li&gt;为什么失败了？&lt;/li&gt;
&lt;li&gt;是否曾经失败过？&lt;/li&gt;
&lt;li&gt;最常发生了什么失败？&lt;/li&gt;
&lt;li&gt;流水线的正常运行时间是多少？&lt;/li&gt;
&lt;li&gt;是否存在任何瓶颈？如果有，它们是什么？&lt;/li&gt;
&lt;li&gt;你能够缩短修复流水线问题的导向时间吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;想要收集什么样的数据&#34;&gt;想要收集什么样的数据？&lt;/h3&gt;
&lt;p&gt;要回答这些问题，你需要收集有关你的流水线的信息。但是这些信息应该是什么呢？捕获诸如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分支名称。&lt;/li&gt;
&lt;li&gt;提交的安全哈希算法（SHA）。&lt;/li&gt;
&lt;li&gt;机器 IP。&lt;/li&gt;
&lt;li&gt;运行类型（按计划执行，由合并/推送触发）。&lt;/li&gt;
&lt;li&gt;失败的步骤。&lt;/li&gt;
&lt;li&gt;步骤持续时间。&lt;/li&gt;
&lt;li&gt;构建编号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何观察流水线&#34;&gt;如何观察流水线&lt;/h2&gt;
&lt;p&gt;请记住，当系统发出足够的信息来回答问题：“为什么会发生这种情况？”时，系统就是可观测的。首先，你需要一种方法来发出这些信息；然后，你需要一个发送信息的地方；最后，你需要分析信息并找出需要修复的问题。&lt;/p&gt;
&lt;p&gt;这就是 OpenTelemetry 的用武之地。你可以在系统中实施 OpenTelemetry，以发出你需要实现系统可观测性的信息。与用于应用程序的方式一样，你也可以将其用于 CI/CD 流水线！仍然需要将生成的遥测数据发送到后端进行分析，但我们将专注于第一个部分，即仪器化。&lt;/p&gt;
&lt;h3 id=&#34;使用-opentelemetry&#34;&gt;使用 OpenTelemetry&lt;/h3&gt;
&lt;p&gt;对于仪器化 CI/CD 流水线来说，OpenTelemetry 是一个很合理的选择，因为许多人已经在应用程序中使用它进行仪器化；在过去的几年中，采用和实施逐渐增加。&lt;/p&gt;
&lt;h3 id=&#34;有哪些选项&#34;&gt;有哪些选项？&lt;/h3&gt;
&lt;p&gt;目前，情况有些复杂。存在以下选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商业 SaaS 监控解决方案，如&lt;a href=&#34;https://www.datadoghq.com/product/ci-cd-monitoring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Datadog&lt;/a&gt;和&lt;a href=&#34;https://www.splunk.com/en_us/blog/learn/ci-cd-devops-analytics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Splunk&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;供应商创建的工具，你可以将其插入现有的 CI/CD 工具中，以帮助实现 CI/CD 可观测性（例如，&lt;a href=&#34;https://github.com/honeycombio/buildevents&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Honeycomb buildevents&lt;/a&gt;、&lt;a href=&#34;https://docs.newrelic.com/docs/codestream/how-use-codestream/cicd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;New Relic 的 Codestream 与 CircleCI 集成&lt;/a&gt;和&lt;a href=&#34;https://docs.newrelic.com/docs/change-tracking/ci-cd/change-tracking-github-actions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Actions 的更改跟踪&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;自制的 GitHub actions（请参阅&lt;a href=&#34;https://github.com/inception-health/otel-export-trace-action&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;、&lt;a href=&#34;https://words.boten.ca/GitHub-Action-to-OTLP/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;和&lt;a href=&#34;https://cloud-native.slack.com/archives/C0598R66XAP/p1698393723861129&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;的示例），以在 CI/CD 流水线中启用可观测性。&lt;/li&gt;
&lt;li&gt;自制的 &lt;a href=&#34;https://github.com/DavidS/circleci-hook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CircleCI OTel webhook&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;自制的 &lt;a href=&#34;https://cloud-native.slack.com/archives/C0598R66XAP/p1698408390701199&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Drone CI OTel webhook&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;将 OpenTelemetry 原生集成到 &lt;a href=&#34;https://plugins.jenkins.io/opentelemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jenkins&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/tektoncd/community/blob/main/teps/0124-distributed-tracing-for-tasks-and-pipelines.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tekton&lt;/a&gt; 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你还可以将这些工具集成到你的 CI/CD 流水线中；它们会发出 OpenTelemetry 信号，从而帮助使你的流水线可观测：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-java-contrib/blob/main/maven-extension/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maven 构建 OTel 扩展&lt;/a&gt;发出 Java 构建的分布式跟踪。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/community/general/opentelemetry_callback.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ansible OpenTelemetry 回调&lt;/a&gt;跟踪 Ansible playbooks。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dynatrace-oss/junit-jupiter-open-telemetry-extension&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dynatrace 的 JUnit Jupiter OpenTelemetry 扩展&lt;/a&gt;是用于通过 OpenTelemetry 收集 JUnit 测试执行数据的 Gradle 插件。还有一个&lt;a href=&#34;https://github.com/dynatrace-oss/junit-jupiter-open-telemetry-extension/packages/1061205&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maven 版本&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pytest-otel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pytest-otel&lt;/a&gt;记录执行的 Python 测试的分布式跟踪。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/equinix-labs/otel-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;otel-cli&lt;/a&gt;是用 Go 编写的命令行界面（CLI）工具，可使 shell 脚本发出跟踪信号。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Filelog 接收器&lt;/a&gt;（OTel Collector）从文件中读取和解析日志。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/gitproviderreceiver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git 提供商接收器&lt;/a&gt;（OTel Collector）从 Git 供应商处获取数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可观测的流水线示例&#34;&gt;可观测的流水线示例&lt;/h2&gt;
&lt;p&gt;以下图表显示了如何使用上述提到的一些工具实现流水线可观测性。假设你正在构建和部署一个 Java 应用程序。你正在使用 Jenkins 来编排构建和部署过程。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-启用了-otel-的-jenkins-cicd-流水线&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;启用了 OTel 的 Jenkins CI/CD 流水线&#34; srcset=&#34;
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/4_huc1771516b10019a0f9db7a99859b125f_108196_04bf2a16501e0d7fe30c9ce76e39afad.webp 400w,
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/4_huc1771516b10019a0f9db7a99859b125f_108196_a5d0354f3fb81ef664dca8f74520c5b4.webp 760w,
               /blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/4_huc1771516b10019a0f9db7a99859b125f_108196_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-to-observe-your-ci-cd-pipelines-with-opentelemetry/4_huc1771516b10019a0f9db7a99859b125f_108196_04bf2a16501e0d7fe30c9ce76e39afad.webp&#34;
               width=&#34;760&#34;
               height=&#34;333&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      启用了 OTel 的 Jenkins CI/CD 流水线
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jenkins CI/CD 流水线可以通过&lt;a href=&#34;https://plugins.jenkins.io/opentelemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jenkins OTel 插件&lt;/a&gt;发出遥测信号。&lt;/li&gt;
&lt;li&gt;在构建阶段中：
&lt;ul&gt;
&lt;li&gt;你可以使用&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-java-contrib/blob/main/maven-extension/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maven OTel 扩展&lt;/a&gt;发出 Java 构建的分布式跟踪。&lt;/li&gt;
&lt;li&gt;如果你的构建包括 shell 脚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本，你可以使用&lt;a href=&#34;https://github.com/equinix-labs/otel-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;otel-cli&lt;/a&gt;工具来使你的 shell 脚本能够发出跟踪信号。
3. 在测试阶段中，&lt;a href=&#34;https://github.com/dynatrace-oss/junit-jupiter-open-telemetry-extension/packages/1061205&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maven 的 JUnit Jupiter 插件&lt;/a&gt;允许你通过 OpenTelemetry 收集 JUnit 测试执行数据。
4. 在打包阶段中，使用 Artifactory 来打包你的应用程序，你可以将其日志发送给 OTel Collector，通过&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/filelogreceiver/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Filelog 接收器&lt;/a&gt;进行解析，该接收器会从文件中读取和解析日志。
5. 在部署阶段，使用 Ansible 来编排你的部署，&lt;a href=&#34;https://docs.ansible.com/ansible/latest/collections/community/general/opentelemetry_callback.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ansible OpenTelemetry 回调&lt;/a&gt;会将跟踪添加到你的 Ansible playbooks 中。如果你的 Ansible playbook 还使用 shell 脚本，它可以利用&lt;a href=&#34;https://github.com/equinix-labs/otel-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;otel-cli&lt;/a&gt;工具，使你的 shell 脚本发出额外的跟踪数据。
6. 各种插件发出的信号被 OTel Collector 捕获。可以使用标准的&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OTLP 接收器&lt;/a&gt;来接收遥测数据，以及&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/gitproviderreceiver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git 提供商接收器&lt;/a&gt;和&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/filelogreceiver/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Filelog 接收器&lt;/a&gt;。然后，Collector 将遥测信号发送到可观测性后端。
7. 一旦你的数据到达可观测性后端，你可以查看和查询数据，设置警报等等。&lt;/p&gt;
&lt;h2 id=&#34;实现可观测流水线的挑战&#34;&gt;实现可观测流水线的挑战&lt;/h2&gt;
&lt;p&gt;虽然使用 OpenTelemetry 实现 CI/CD 流水线可观测性是有道理的，但缺乏标准化，工具情况有点混乱。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 并未集成到大多数 CI/CD 工具中。虽然有人希望将观察能力添加到诸如 GitLab 和 GitHub Actions 等 CI/CD 工具中，但这些倡议进展缓慢。例如，尽管&lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab/-/issues/338943&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitLab 有关使用 OTel 进行流水线可观测性的请求&lt;/a&gt;存在活动，但该请求已经开放了两年。&lt;a href=&#34;https://github.com/open-telemetry/oteps/pull/223&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有关 CI/CD 流水线可观测性的 OTel 提案&lt;/a&gt;于 2023 年 1 月提出，但（截至 2023 年 11 月）自 7 月以来尚未有任何活动。&lt;/p&gt;
&lt;p&gt;因此，如果你想使用这些工具，你将取决于创建自己工具的个人和组织是否愿意维护这些工具。如果他们决定不再维护这些工具，会发生什么呢？&lt;/p&gt;
&lt;h2 id=&#34;了解更多&#34;&gt;了解更多&lt;/h2&gt;
&lt;p&gt;使你的 CI/CD 流水线可观测有助于更有效地排除问题，实现开发敏捷性，并深入了解其内部工作原理，以便你可以调整它们以使其运行更高效。&lt;/p&gt;
&lt;p&gt;健康的流水线意味着你可以连续编写、构建、测试和部署新代码。相反，不健康的流水线可能意味着部署较慢，测试问题和技术债务。&lt;/p&gt;
&lt;p&gt;你可以使用 OpenTelemetry 在流水线中添加可观测性；尽管当前选项有限，但事情正在朝着正确的方向发展，我们对 CI/CD 的未来充满期待！&lt;/p&gt;
&lt;p&gt;进一步阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://logz.io/learn/cicd-observability-jenkins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;解决慢和不稳定的 CI/CD 流水线始于可观测性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/leveraging-opentelemetry-enhance-ansible-jaeger-tracing-infralovers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 OpenTelemetry 增强 Ansible 的 Jaeger 跟踪&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.splunk.com/en_us/blog/learn/monitoring-ci-cd.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CI/CD 流水线监控：简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在&lt;a href=&#34;https://communityinviter.com/apps/cloud-native/cncf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF Slack&lt;/a&gt;的&lt;a href=&#34;https://cloud-native.slack.com/archives/C0598R66XAP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cicd-o11y&lt;/a&gt;频道中查看更多信息。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OpenTelemetry Protocol (OTLP) 1.0.0 发布</title>
      <link>https://cloudnative.to/blog/otlp-version-one-released/</link>
      <pubDate>Sun, 06 Aug 2023 13:05:42 +0800</pubDate>
      <guid>https://cloudnative.to/blog/otlp-version-one-released/</guid>
      <description>&lt;p&gt;摘要：OpenTelemetry Protocol (OTLP) 1.0.0 已发布，它是 OpenTelemetry 项目中的通用遥测数据传递协议。OpenTelemetry 是一个开源的可观测性框架，提供了一组 API、库、代理和收集器服务，用于捕获分布式跟踪和指标。OTLP 在客户端和服务器之间进行数据交换，定义了一个序列化模式，紧密遵循跟踪、指标和日志的数据模型。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&#34;https://www.infoq.com/news/2023/08/otlp-version-one-released/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.infoq.com/news/2023/08/otlp-version-one-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近，&lt;a href=&#34;https://opentelemetry.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry&lt;/a&gt; Protocol (OTLP) 1.0.0 发布了。OTLP 规范描述了遥测数据在遥测源、收集器等中间节点和遥测后端之间的编码、传输和传递机制。它是 OpenTelemetry 项目中设计的通用遥测数据传递协议。&lt;/p&gt;
&lt;p&gt;OpenTelemetry (OTEL) 是一个由 OpenCensus 和 OpenTracing 项目合并形成的开源 Cloud Native Computing Foundation (CNCF) 项目。它是一个供仪表化、生成、收集和导出遥测数据（例如跟踪、指标和日志）使用的供应商中立的开源可观测性框架。该框架提供了一组 API、库、代理和收集器服务，用于捕获分布式跟踪和指标。此外，它的规范在 2021 年早些时候达到了 1.0.0 版本状态，并被 InfoQ 报道。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 通过使用 API 来仪表化应用程序代码，以生成遥测数据，并在不同的 SDK 实现之间无缝地引导收集指标。它提供了针对特定语言的集成和库，例如 Java、Golang、.NET 和 Python 的 OTel SDK，以使开发人员能够仪表化其代码并捕获遥测数据。这些库中的遥测数据被收集并传输到 OpenTelemetry Collector，利用 OTLP 在客户端和服务器之间进行数据交换。OTLP 定义了一个序列化模式，紧密遵循跟踪、指标和日志的数据模型。&lt;/p&gt;
&lt;p&gt;作为中央存储库，OpenTelemetry Collector 接收、处理和导出从各种源收集的遥测数据，既作为单个应用程序的本地代理，也作为多个应用程序的网关。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-opentelemetry-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;OpenTelemetry 架构图&#34;
           src=&#34;https://cloudnative.to/blog/otlp-version-one-released/otel-diagram.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OpenTelemetry 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Open Telemetry Diagram（来源：&lt;a href=&#34;https://opentelemetry.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 文档&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OTLP 在数据序列化、反序列化和网络服务之间的传输方面发挥着重要作用。该协议旨在指定一个序列化模式，紧密遵循数据模型并解决其他遥测协议的问题。&lt;/p&gt;
&lt;p&gt;Honeycomb 开发者倡导者 &lt;a href=&#34;https://twitter.com/MartinDotNet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Martin Thwaites&lt;/a&gt; 说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OTLP 是 OpenTelemetry 的生命力，使其比以往任何时候都更强大；转向 v1 将把这一点提升到一个新的水平。已经有大多数供应商适应了使用 OTLP 协议接收数据；通过 V1，这将给人们带来一些急需的信心，希望可以让最后几个顽固分子添加 OTLP 支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，他表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这很重要，因为它开启了更多的互操作性，减少了添加专有协议库到我们堆栈中的需求，这对于希望更好地了解其应用程序的情况下获得更多可见性的人来说只能是一个胜利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，OpenTelemetry 项目目前是 CNCF 的&lt;a href=&#34;https://www.cncf.io/projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;孵化项目&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生社区 meetup 第二期北京站</title>
      <link>https://cloudnative.to/event/cloud-native-meetup-beijing-02/</link>
      <pubDate>Sun, 20 Dec 2020 13:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/event/cloud-native-meetup-beijing-02/</guid>
      <description>&lt;h3 id=&#34;istio-18还是从前那个少年&#34;&gt;Istio 1.8——还是从前那个少年&lt;/h3&gt;
&lt;p&gt;讲师：宋净超（Tetrate 布道师、云原生社区创始人）&lt;/p&gt;
&lt;p&gt;个人介绍：Tetrate 布道师、CNCF Ambassador、云原生社区 创始人、电子工业出版社优秀译者、出品人。Kubernetes、Istio 等技术的早期使用及推广者。曾就职于科大讯飞、TalkingData 和蚂蚁集团。&lt;/p&gt;
&lt;p&gt;议题简介：带你回顾 Istio 的发展历程，看他是否还是从前那个少年，“没有一丝丝改变”，能够经历时间的考验。带你一起来了解 Istio 1.8 的新特性，看它是如何作为传统和现代应用的桥接器，成为云原生应用中的中流砥柱。同时也会为你分享云原生社区的规划，为了推行云原生，我们在行动。&lt;/p&gt;
&lt;h3 id=&#34;百度服务网格在金融行业的大规模落地实践&#34;&gt;百度服务网格在金融行业的大规模落地实践&lt;/h3&gt;
&lt;p&gt;讲师：孙召昌（百度高级研发工程师）&lt;/p&gt;
&lt;p&gt;个人介绍：百度高级研发工程师，现就职于百度基础架构部云原生团队，参与了服务网格产品的研发工作和大规模落地实践，对云原生、微服务、Service Mesh 等方向有深入的研究和实践经验。&lt;/p&gt;
&lt;p&gt;议题简介：百度服务网格技术在金融行业大规模落地过程的实践经验和思考，主要包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持传统微服务应用的平滑迁移，兼容 SpringCloud 和 Dubbo 应用；&lt;/li&gt;
&lt;li&gt;灵活对接多种注册中心，支持百万级别的服务注册和发现；&lt;/li&gt;
&lt;li&gt;提供丰富的流量治理策略，包括自定义路由、全链路灰度等；&lt;/li&gt;
&lt;li&gt;实现业务无侵入的指标统计和调用链展示，满足用户的可观测性需求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;apachedubbo-go-在云原生时代的实践与探索&#34;&gt;Apache/Dubbo-go 在云原生时代的实践与探索&lt;/h3&gt;
&lt;p&gt;讲师：赵新（于雨）&lt;/p&gt;
&lt;p&gt;个人介绍：于雨（GitHub ID AlexStocks），dubbogo 社区负责人，一个有十多年服务端基础架构研发经验的一线程序员，陆续改进过 Redis/Muduo/Pika/Dubbo/Dubbo-go/Sentinel-go 等知名项目，目前在蚂蚁集团可信原生部从事容器编排和 Service Mesh 工作。&lt;/p&gt;
&lt;p&gt;议题简介：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 Kubernetes 的微服务通信能力&lt;/li&gt;
&lt;li&gt;基于 MOSN 的云原生 Service Mesh 能力&lt;/li&gt;
&lt;li&gt;基于应用级注册的服务自省能力&lt;/li&gt;
&lt;li&gt;dubbo-go 3.0 规划&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;合影中场休息签售&#34;&gt;合影、中场休息、签售&lt;/h3&gt;
&lt;p&gt;中场休息时会有《云原生操作系统 Kubernetes》作者之一张城为大家现场签售。&lt;/p&gt;
&lt;h3 id=&#34;云原生下的可观测性&#34;&gt;云原生下的可观测性&lt;/h3&gt;
&lt;p&gt;讲师：张城（元乙）&lt;/p&gt;
&lt;p&gt;个人介绍：阿里云技术专家，负责阿里巴巴集团、蚂蚁金服、阿里云等日志采集基础设施，服务数万内外部客户，日流量数十 PB。同时负责云原生相关的日志/监控解决方案，包括系统组件，负载均衡，审计，安全，Service Mesh，事件，应用等监控方案。目前主要关注可观测性、AIOps、大规模分析引擎等方向。&lt;/p&gt;
&lt;p&gt;议题简介：近年来随着云原生技术的普及，PaaS 和 SaaS 化的程度越来越高，传统的监控系统正在朝可观测性系统的方向演进。在这背景下 OpenTelemetry 诞生，OpenTelemetry 为我们带来了 Metric、Tracing、Logging 的统一标准，便于我们构建一个统一的可观测性平台。&lt;/p&gt;
&lt;h3 id=&#34;云原生分布式存储解决方案实践&#34;&gt;云原生分布式存储解决方案实践&lt;/h3&gt;
&lt;p&gt;讲师：刘硕然（OPPO）&lt;/p&gt;
&lt;p&gt;个人介绍：OPPO 互联网云平台分布式文件存储技术负责人，ChubaoFS 初创成员及项目维护者。&lt;/p&gt;
&lt;p&gt;议题简介：ChubaoFS 是云原生的分布式存储系统，目前已经在多家公司生产环境为大规模容器平台的云原生应用提供分布式存储解决方案。主要特点包括高可用，高可扩展，多租户，文件及对象双接口等。与云原生社区的生态也有非常紧密的结合，目前监控使用 Prometheus，部署支持 Helm，使用支持 CSI driver。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
