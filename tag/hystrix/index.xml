<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hystrix | 云原生社区（中国）</title>
    <link>https://cloudnative.to/tag/hystrix/</link>
      <atom:link href="https://cloudnative.to/tag/hystrix/index.xml" rel="self" type="application/rss+xml" />
    <description>hystrix</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 20 May 2019 12:10:44 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>hystrix</title>
      <link>https://cloudnative.to/tag/hystrix/</link>
    </image>
    
    <item>
      <title>微服务中的熔断简介及工作原理详解（第2部分）</title>
      <link>https://cloudnative.to/blog/preventing-systemic-failure-circuit-breaking-part-2/</link>
      <pubDate>Mon, 20 May 2019 12:10:44 +0800</pubDate>
      <guid>https://cloudnative.to/blog/preventing-systemic-failure-circuit-breaking-part-2/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://glasnostic.com/blog/preventing-systemic-failure-circuit-breaking-part-2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编者按&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文是一篇来自Glasnostic官网的博客。作为介绍熔断系列文章的第二篇，本文通过介绍开发人员和运维人员两种不同视角下的微服务典型应用场景，引入进阶的熔断功能。进而分别介绍和对比了熔断功能的三种不同实现：Hystrix, Service Mesh (Istio、Linkerd) 和 Glasnostic。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/preventing-systemic-failure-circuit-breaking-part-2/cover_huc39ba88d511ddea9e2b9d707ac544f4a_832958_2ea281ec9db567cb04c43ab8da35e524.webp 400w,
               /blog/preventing-systemic-failure-circuit-breaking-part-2/cover_huc39ba88d511ddea9e2b9d707ac544f4a_832958_7306ae4327217ca3bc6a30a545b5861f.webp 760w,
               /blog/preventing-systemic-failure-circuit-breaking-part-2/cover_huc39ba88d511ddea9e2b9d707ac544f4a_832958_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/preventing-systemic-failure-circuit-breaking-part-2/cover_huc39ba88d511ddea9e2b9d707ac544f4a_832958_2ea281ec9db567cb04c43ab8da35e524.webp&#34;
               width=&#34;760&#34;
               height=&#34;564&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;这是关于熔断的两部分系列文章的第二部分。在&lt;a href=&#34;https://glasnostic.com/blog/preventing-systemic-failure-circuit-breaking-part-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;第一部分&lt;/a&gt;中，我们介绍了该模式以及开发人员和运维人员如何以不同的方式处理它。而在本文中，我们将探讨它的典型应用场景以及如何在现代服务中间件中实现它。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;典型的微服务应用场景&#34;&gt;典型的微服务应用场景&lt;/h2&gt;
&lt;p&gt;开发人员和运维人员通常为不同的目的使用熔断。开发人员主要关心的是保护他们的代码，他们把熔断作为补偿上游故障的一种方法。另一方面，运维人员负责整个服务环境的稳定性和可用性，因此主要使用熔断来监控和补救。&lt;/p&gt;
&lt;h3 id=&#34;开发人员对上游故障的补偿&#34;&gt;开发人员：对上游故障的补偿&lt;/h3&gt;
&lt;p&gt;除了“熔断”和继续前进，开发人员主要关心断路器的三个好处。首先，由于断路器允许开发人员处理服务故障，客户端可以以一种优雅的方式随时间动态地适应服务可用性的变化。其次，在微服务架构中共享状态的断路器提供了网络效果，可以显著提高故障响应能力。第三，断路器与智能路由和负载均衡相结合，可以自动用健康的服务实例替换故障的服务实例，从而促进自修复。&lt;/p&gt;
&lt;h3 id=&#34;运维人员监控和补救&#34;&gt;运维人员：监控和补救&lt;/h3&gt;
&lt;p&gt;断路器是运维团队在问题升级为更大问题之前发现问题的好方法。当断路器跳闸时，负责的工程团队调查相关日志和指标，运维员可能会决定将部分或大部分流量从服务中分流。由于它缓解了系统的急性压力、分流或削减负荷，因此成为了运维团队中对于断路器最流行的使用方式。&lt;/p&gt;
&lt;p&gt;另一个密切相关的变体是将断路器定义为这种架构中预先确定的断点。理想情况下，这种断路器应该安装在已知能够承受与关键系统成正比的负载的地方。这类断路器在本质上就像架构中的金丝雀(canaries)一样工作，通过卸载来促进再修复。&lt;/p&gt;
&lt;h3 id=&#34;进阶的熔断&#34;&gt;进阶的熔断&lt;/h3&gt;
&lt;p&gt;随着断路器从客户端库发展到中间件、共享状态断路器和平台，它们的定义也变得越来越多样化。断路器的开发人员和运维人员的应用场景出现了分歧，其定义涉及越来越多的参数。目前云流量控制器(如Glasnostic)所提供的熔断功能，可以应用于由任意端点集定义的通信链路，并结合一些互补模式(如超时、反压或&lt;a href=&#34;https://blog.acolyer.org/2014/10/24/brownout-building-more-robust-cloud-applications/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Brownouts&lt;/a&gt;)。然后，随着时间的推移，结合一些参数(如请求速率、并发性、带宽或延迟)对这些模式组合进行优化。&lt;/p&gt;
&lt;h2 id=&#34;hystrix的熔断&#34;&gt;Hystrix的熔断&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Netflix/Hystrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netflix&amp;rsquo; Hystrix&lt;/a&gt;是第一个专门用于熔断的服务中间件。当它在2012年向公众发布，以提供“对延迟和失败有更大容忍度”的微服务架构时，Netflix已经在内部广泛使用了一年多的时间了。根据这个&lt;a href=&#34;https://github.com/Netflix/Hystrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;项目&lt;/a&gt;的描述，Hystrix一直是Netflix服务中间件的基本组成部分之一，直到2018年底进入维护模式，这标志着“[关注点]转向更适应应用程序实时性能的实现，而不是预先配置的设置。”&lt;/p&gt;
&lt;p&gt;Hystrix是一个Java库，开发人员可以使用它用熔断逻辑封装服务调用。它基于阈值，可以立即判定调用失败并执行回滚逻辑，具体参考&lt;a href=&#34;https://glasnostic.com/blog/preventing-systemic-failure-circuit-breaking-part-1#figure-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;第一部分&lt;/a&gt;。除了提供超时和并发限制之外，它还可以向监视工具发布度量metrics。最后，当与&lt;a href=&#34;https://github.com/Netflix/archaius&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Archaius&lt;/a&gt;库一起使用时，它还可以支持动态配置更改。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/preventing-systemic-failure-circuit-breaking-part-2/hystrix_hu2268fbf1541bbd396e2fd1f6f51b2a65_305163_be9446ac539e0080fed406deb551ffb1.webp 400w,
               /blog/preventing-systemic-failure-circuit-breaking-part-2/hystrix_hu2268fbf1541bbd396e2fd1f6f51b2a65_305163_4a85f86080126f5566933ead9dd26ec1.webp 760w,
               /blog/preventing-systemic-failure-circuit-breaking-part-2/hystrix_hu2268fbf1541bbd396e2fd1f6f51b2a65_305163_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/preventing-systemic-failure-circuit-breaking-part-2/hystrix_hu2268fbf1541bbd396e2fd1f6f51b2a65_305163_be9446ac539e0080fed406deb551ffb1.webp&#34;
               width=&#34;760&#34;
               height=&#34;452&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 1&lt;/strong&gt;. &lt;em&gt;Hystrix&lt;/em&gt; &lt;a href=&#34;https://github.com/Netflix-Skunkworks/hystrix-dashboard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dashboard&lt;/a&gt; &lt;em&gt;显示了请求量、各种交互指标和中断状态。圆圈表示请求量，火花线表示过去2分钟内的呼叫量的变化。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;尽管Hystrix支持将熔断与超时和并发池相结合等改进，但最终证明它对于现代有机体系结构中日益动态的交互行为不够灵活。设置阈值和客户端并发池的能力为服务开发人员提供了足够的控制，使他们能够将代码与上游故障隔离开来，但是当系统和运维关注点变得重要时，这种能力就不再有用了。因此，Hystrix的衰落是作为开发者模式下的熔断带来的限制的直接后果。&lt;/p&gt;
&lt;h2 id=&#34;服务网格中的熔断&#34;&gt;服务网格中的熔断&lt;/h2&gt;
&lt;h3 id=&#34;istio&#34;&gt;Istio&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://glasnostic.com/blog/kubernetes-service-mesh-what-is-istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;是一个服务网格，它支持基于连接池、每个连接的请求和故障检测参数的熔断。它是在所谓的“目的地规则(destination rules)”的帮助下做到这一点的，该规则告诉每个Envoy代理应用于通信的策略是什么，以及如何应用。这个步骤发生在路由之后，然而这并不总是理想的。目标规则可以指定负载均衡的限制、连接池大小以及最终符合“异常值”条件的参数，以便可以从负载均衡池中删除不健康的实例。这种类型的熔断擅长于使客户端免受服务端故障的影响，但是由于目标规则总是在集群范围内应用，所以它缺乏一种方法来将断路器限制在客户端的一个子集内。为了实现断路器与服务质量模式(quality-of-service)的组合，必须创建多个客户机子集的路由规则，并且每个子集都有自己的目标规则。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;some_microservice&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;some_microservice_host&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;trafficPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;connectionPool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxConnections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http1MaxPendingRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http2MaxRequests&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxRequestsPerConnection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;outlierDetection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;consecutiveErrors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;interval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;2s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;baseEjectionTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;30s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;maxEjectionPercent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Figure 2&lt;/strong&gt;. &lt;em&gt;示例Istio断路器配置，可以直接通过kubectl命令执行。这种配置指定了基于连接池和故障(&amp;lsquo;outlier detection&amp;rsquo;)参数的熔断。在连接端，超过10个打开的TCP连接、超过20个挂起的HTTP请求或每个连接超过3个挂起的请求都会触发断路器。在故障检测方面，任何两个连续错误在两秒内相继发生，都会导致目标主机从负载均衡池中弹出至少30秒。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;linkerd&#34;&gt;Linkerd&lt;/h3&gt;
&lt;p&gt;Linkerd中的熔断有点复杂，作为一种开发者模式，它反映了熔断的一般冲突状态。在Linkerd 1继续支持由原先花里胡哨的代码实现的&lt;a href=&#34;https://linkerd.io/1/features/circuit-breaking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;完整的断路器&lt;/a&gt;的同时，一个完整的、轻量级的由Rust和Go重写的&lt;a href=&#34;https://glasnostic.com/blog/an-introduction-to-what-is-linkerd-service-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd 2&lt;/a&gt;，却不&lt;a href=&#34;https://github.com/linkerd/linkerd2/issues/1255&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;直接&lt;/a&gt;这么做。相反，它在其Conduit代理中提供了相关的功能，虽然不支持重试和超时，但它现在已经合并到Linkerd 2中。&lt;/p&gt;
&lt;p&gt;为了支持重试和超时，Linkerd 2.1引入了“service profiles”的概念，这是定制化的Kubernetes资源，用于向Linkerd提供关于服务的额外信息。使用服务profile文件，运维人员现在可以将路由定义为“可重试”或具有特定超时机制。虽然这提供了一些与之相关的基本功能，但是Linkerd中的熔断仍然是一个很长的路要走。&lt;/p&gt;
&lt;h2 id=&#34;glasnostic中的熔断&#34;&gt;Glasnostic中的熔断&lt;/h2&gt;
&lt;p&gt;Glasnostic是一个云流量控制器，它使运维团队能够有效控制他们的有机架构所衍生的复杂的紧急异常。这使公司能够以敏捷的方式运行不同的架构模式，而无需对每个更改进行昂贵的重新验证。因此，开发和运营都处于理想的位置，以适应公司快速变化的业务需求。&lt;/p&gt;
&lt;p&gt;与Hystrix和service meshes不同的是，它们从开发人员的角度实现了熔断，而Glasnostic将熔断作为一种运维模式来实现，这是为运维人员设计的。&lt;/p&gt;
&lt;p&gt;Glasnostic的控制平面提供了大规模、复杂和动态交互行为的高可视性，使运维人员能够快速修复问题。通过对任意服务端点集之间的交互进行细粒度控制，运维人员能够应用经过实践验证的、可预测的运维模式，比如断路。因为运维模式可以很容易地结合起来形成高度精炼的复合模式，所以断路器同样可以根据请求速率、带宽或并发数，通过将它们与&lt;a href=&#34;https://glasnostic.com/blog/preventing-systems-fail-backpressure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;backpressure&lt;/a&gt;等结合起来，轻松地进行改进。&lt;/p&gt;
&lt;p&gt;例如，&lt;strong&gt;Figure 3&lt;/strong&gt;显示了一个通道（channel）的设置，该通道用于监视和控制一组互不相关的服务中间歇重复出现的延迟峰值。在不寻找假定的出错根源的情况下，运维人员决定首先通过中断更长时间运行的请求来控制这种情况。他们首先定义一个覆盖有问题的服务和任何潜在客户端的新通道，然后对通道控制的交互施加适当的延迟限制，从而实现这一点。这使得运营团队能够在发生问题时控制局面，直到工程师能够提供一个修复方案。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/preventing-systemic-failure-circuit-breaking-part-2/monitor-control_hu6e6df1cfb8045ffa24511ae8dda3001e_508174_1482a0513124232c9bdc5d5837c7078a.webp 400w,
               /blog/preventing-systemic-failure-circuit-breaking-part-2/monitor-control_hu6e6df1cfb8045ffa24511ae8dda3001e_508174_e28be0d8262cd76c06ceda0bc045c4c0.webp 760w,
               /blog/preventing-systemic-failure-circuit-breaking-part-2/monitor-control_hu6e6df1cfb8045ffa24511ae8dda3001e_508174_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/preventing-systemic-failure-circuit-breaking-part-2/monitor-control_hu6e6df1cfb8045ffa24511ae8dda3001e_508174_1482a0513124232c9bdc5d5837c7078a.webp&#34;
               width=&#34;760&#34;
               height=&#34;376&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 3&lt;/strong&gt;. &lt;em&gt;Glasnostic 控制台，显示一个通道(1)，用于监视和控制一系列服务中间歇重复出现的延迟峰值。将断路器配置为延时达到1800毫秒(2)时跳闸，作为运维团队的早期预警系统，同时控制情况。一旦负责维修的工程团队确定了修复方案，就可以移除断路器了。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当然，最初的政策往往只是首先尝试补救局面，并且需要对调整保持开放的态度。调整或补充开放政策既快又容易。例如，运维团队可能会发现，初始通道策略可以通过第一个断开非关键任务客户机的电路来进一步细化，从而使关键任务客户机尽可能长时间地不受影响。为了实现这一点，他们可以定义一个只覆盖非关键任务客户端的细化通道，并添加一个基于连接和请求许可中断它们的策略。&lt;strong&gt;Figure 4&lt;/strong&gt;显示了这样一个辅助细化通道，在原始延迟断路器跳闸之前，通过设置的并发性和请求策略切断链路中非关键的客户端，从而提高了关键任务系统的可用性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/preventing-systemic-failure-circuit-breaking-part-2/refine_hu72f4741130618ce5209dd292ee766e77_464445_57a6b32696d5332fc44e1d7a134f46a0.webp 400w,
               /blog/preventing-systemic-failure-circuit-breaking-part-2/refine_hu72f4741130618ce5209dd292ee766e77_464445_a82fbcd89038ed06d5dfb7c5dc246127.webp 760w,
               /blog/preventing-systemic-failure-circuit-breaking-part-2/refine_hu72f4741130618ce5209dd292ee766e77_464445_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/preventing-systemic-failure-circuit-breaking-part-2/refine_hu72f4741130618ce5209dd292ee766e77_464445_57a6b32696d5332fc44e1d7a134f46a0.webp&#34;
               width=&#34;760&#34;
               height=&#34;366&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 4&lt;/strong&gt;. &lt;em&gt;Glasnostic控制台显示之前设置的通道(2)的细化通道(1)，首先根据连接池和请求速率参数配置断开非关键任务客户端，从而延迟了关键客户端(3)的熔断。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;与通常由服务中间件(如API网关和服务网格)提供的断路器不同，Glasnostic支持将断路器作为一种运维模式，在任意端点集之间实时进行，而不是通过静态部署描述符进行。这允许运维人员指定断路器，这些断路器不仅是对本地交互的战术调整，而且是改善稳定性和可用性的步骤，这对整个服务领域都是有意义的。例如，当Istio基于目的地规则实现熔断时，Glasnostic可以将熔断应用于任何一组交互、客户端或服务端，过去、现在或未来。因此，运维人员可以为不同的流量类型设置不同的策略。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;熔断是一种基本模式，旨在将故障的影响降到最低，防止级联故障和雪崩，并确保端到端性能。因为可以同时作为开发人员模式和运维模式使用，熔断被广泛地应用，但这也常常会引起混淆。&lt;/p&gt;
&lt;p&gt;作为一种开发人员模式，它主要用作一种相当基本的补偿策略，如果不考虑每个特定的调用，就很难对其进行细化。另一方面，断路器作为一种运维模式，旨在减轻系统的压力，以管理系统的稳定性和性能。通过将其与其他稳定模式(如超时或背压)相结合，通常可以进一步改进其行为。运维断路器过去依赖于单独部署的服务中间件，如API网关或服务网格。然而，由于服务网格主要解决了开发人员的关注点，所以作为一种运维模式对断路的支持是有限的，而且在实现之间是不一致的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>微服务断路器模式实现：Istio vs Hystrix</title>
      <link>https://cloudnative.to/blog/istio-vs-hystrix-circuit-breaker/</link>
      <pubDate>Fri, 08 Mar 2019 15:12:41 +0800</pubDate>
      <guid>https://cloudnative.to/blog/istio-vs-hystrix-circuit-breaker/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://www.exoscale.com/syslog/istio-vs-hystrix-circuit-breaker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;本文作者由浅及深，从核心问题的引入到具体模式的代码实现，阐述了微服务两种断路器模式的实现原理、优缺点以及二者的比较。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;不可否认的是，在过去的几年里，Docker和Kubernetes等技术已经彻底改变了我们对软件开发和部署的理解。&lt;/p&gt;
&lt;p&gt;但是，尽管软件开发行业的快速发展促使开发人员采用最新的技术，但是后退一步，更好地查看支持这些技术的已建立的模式是很重要的。&lt;/p&gt;
&lt;p&gt;断路器模式是微服务体系结构中广泛采用的模式之一。我们将比较使用两种不同方法实现它的优缺点: Hystrix和Istio。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-vs-hystrixjpg&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;istio-vs-hystrix.jpg&#34; srcset=&#34;
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdlvuhijj20xc0hggnu_hua280d62dd75239ae00ea9372944169b9_92636_ae9ae0a28abfc063801459708f71c14e.webp 400w,
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdlvuhijj20xc0hggnu_hua280d62dd75239ae00ea9372944169b9_92636_088fc985fae00d20ad0ce8716c3e44cf.webp 760w,
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdlvuhijj20xc0hggnu_hua280d62dd75239ae00ea9372944169b9_92636_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdlvuhijj20xc0hggnu_hua280d62dd75239ae00ea9372944169b9_92636_ae9ae0a28abfc063801459708f71c14e.webp&#34;
               width=&#34;760&#34;
               height=&#34;398&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      istio-vs-hystrix.jpg
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;微服务同步通信的核心问题&#34;&gt;微服务同步通信的核心问题&lt;/h2&gt;
&lt;p&gt;设想一个非常简单的微服务体系结构，包括:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个后端服务&lt;/li&gt;
&lt;li&gt;一个前端服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们假设&lt;em&gt;后端&lt;/em&gt;和&lt;em&gt;前端&lt;/em&gt;通过同步HTTP调用进行通信。&lt;/p&gt;
&lt;p&gt;客户端&lt;code&gt;C1&lt;/code&gt; 和 &lt;code&gt;C2&lt;/code&gt; 调用 &lt;em&gt;前端&lt;/em&gt; 获取一些信息。由于&lt;em&gt;前端&lt;/em&gt;没有客户端所需的所有数据，因此它调用&lt;em&gt;后端&lt;/em&gt;以获得缺失的部分数据。&lt;/p&gt;
&lt;p&gt;但是因为网络通信，很多事情会发生:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;前端&lt;/em&gt;和&lt;em&gt;后端&lt;/em&gt;之间的网络故障&lt;/li&gt;
&lt;li&gt;&lt;em&gt;后端&lt;/em&gt;可能会因为错误而宕机&lt;/li&gt;
&lt;li&gt;一个被&lt;em&gt;后端&lt;/em&gt;依赖的服务(*e.g.*数据库)可能宕机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据墨菲定律(“任何可能出错的都会出错”)，前端和后端之间的通信迟早会失败。&lt;/p&gt;
&lt;p&gt;如果我们研究从前端到后端单个调用的生命周期，并考虑后端由于某种原因宕机，那么在某个时候，前端将因超时取消调用。&lt;/p&gt;
&lt;p&gt;将范围缩小到应用程序级别，多个客户机同时调用前端，这将转换为对后端的多个调用: 前端将很快被请求淹没，并淹没在超时中。&lt;/p&gt;
&lt;p&gt;在这个场景中，唯一合理的解决方案是&lt;em&gt;fail-fast&lt;/em&gt;: 前端应该意识到后端出现了问题，并立即将故障返回给自己的客户端。&lt;/p&gt;
&lt;h2 id=&#34;断路器模式&#34;&gt;断路器模式&lt;/h2&gt;
&lt;p&gt;在电路领域中，断路器是为保护电路而设计的一种自动操作的电气开关。它的基本功能是在检测到故障后中断电流。然后可以重置(手动或自动)，以在故障解决后恢复正常操作。&lt;/p&gt;
&lt;p&gt;这看起来与我们的问题非常相似: 为了保护应用程序不受过多请求的影响，最好在&lt;em&gt;后端&lt;/em&gt;检测到重复出现的错误时立即中断&lt;em&gt;前端&lt;/em&gt;和&lt;em&gt;后端&lt;/em&gt;之间的通信。&lt;/p&gt;
&lt;p&gt;在他的&lt;em&gt;Release It&lt;/em&gt;一书中， &lt;a href=&#34;https://twitter.com/mtnygard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Michael Nygard&lt;/a&gt; 使用了这个类比，并为应用于上述超时问题的设计模式提供了一个案例。它背后的流程非常简单:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果调用失败，将失败调用的数量增加1&lt;/li&gt;
&lt;li&gt;如果调用失败次数超过某个阈值，则打开电路&lt;/li&gt;
&lt;li&gt;如果电路打开，立即返回错误&lt;strong&gt;或默认响应&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果电路是打开的，过了一段时间，半打开电路&lt;/li&gt;
&lt;li&gt;如果电路是半开的，下一个呼叫失败，再打开它&lt;/li&gt;
&lt;li&gt;如果电路是半开的，下一个呼叫成功，关闭它&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这可以用下图来总结:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-state-diagramjpg&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;state-diagram.jpg&#34; srcset=&#34;
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdvft88xj21gk0qiwih_hubad085560499dd14ea1482bcbc073459_157669_f2695eceb5d94da8e70fae1514adb41d.webp 400w,
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdvft88xj21gk0qiwih_hubad085560499dd14ea1482bcbc073459_157669_9fd2f589951448468f3ec9f3363a641f.webp 760w,
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdvft88xj21gk0qiwih_hubad085560499dd14ea1482bcbc073459_157669_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdvft88xj21gk0qiwih_hubad085560499dd14ea1482bcbc073459_157669_f2695eceb5d94da8e70fae1514adb41d.webp&#34;
               width=&#34;760&#34;
               height=&#34;383&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      state-diagram.jpg
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;istio断路器&#34;&gt;Istio断路器&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;是一个&lt;strong&gt;服务网格(Service Mesh)&lt;/strong&gt;，微服务应用程序的可配置基础结构层。它使服务实例之间的通信灵活、可靠和快速，并提供服务发现、负载平衡、加密、身份验证和授权、对断路器模式的支持等功能。&lt;/p&gt;
&lt;p&gt;Istio的控制平面在底层集群管理平台(如Kubernetes、Mesos等)上提供了一个抽象层，并要求以这种方式管理应用程序。&lt;/p&gt;
&lt;p&gt;作为其核心，Istio由位于应用程序实例前面的Envoy代理实例组成，并且使用了&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/architecture/patterns/sidecar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sidecar容器模式&lt;/a&gt;和Pilot(一个管理它们的工具)。这种代理策略有很多优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动为HTTP, gRPC, WebSocket和TCP流量做负载平衡。&lt;/li&gt;
&lt;li&gt;通过丰富的路由规则、重试、失败和错误注入对流量行为进行细粒度控制。&lt;/li&gt;
&lt;li&gt;可插入的策略层和配置API，支持访问控制、速率限制和配额。&lt;/li&gt;
&lt;li&gt;一个集群内所有流量的自动度量、日志和跟踪，包括集群的加入和退出。&lt;/li&gt;
&lt;li&gt;在具有强大的身份验证和授权的集群中进行安全的服务间通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为对&lt;em&gt;后端&lt;/em&gt;的出站调用通过Envoy代理，所以很容易检测到它们何时超时。然后代理可以拦截进一步的调用并立即返回，从而有效地执行fail-fast。特别地，这使得断路器模式能够以黑箱方式运行。&lt;/p&gt;
&lt;h3 id=&#34;配置istio断路器&#34;&gt;配置Istio断路器&lt;/h3&gt;
&lt;p&gt;正如我们所说，Istio构建在您选择的集群管理平台上，并要求应用程序在这个平台部署。Kubernetes通过&lt;code&gt;DestinationRule&lt;/code&gt;实现断路器模式，或者更具体的路径&lt;code&gt;TrafficPolicy&lt;/code&gt;(原&lt;code&gt;断路器&lt;/code&gt;)-&amp;gt;&lt;code&gt;OutlierDetection&lt;/code&gt;，根据以下模型:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-class-diagramjpg&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;istio-class-diagram.jpg&#34; srcset=&#34;
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdwafn1kj21qv18tn4m_hu6590acf696684edd8d77eb099214fa35_285378_d34aae50c221c65bb2ed8885681ec2d7.webp 400w,
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdwafn1kj21qv18tn4m_hu6590acf696684edd8d77eb099214fa35_285378_9b0e9178febb9f4914d33ee26e6e97c6.webp 760w,
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdwafn1kj21qv18tn4m_hu6590acf696684edd8d77eb099214fa35_285378_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdwafn1kj21qv18tn4m_hu6590acf696684edd8d77eb099214fa35_285378_d34aae50c221c65bb2ed8885681ec2d7.webp&#34;
               width=&#34;760&#34;
               height=&#34;542&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      istio-class-diagram.jpg
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;参数如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;域&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;consecutiveErrors&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;断路器打开前的出错次数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;断路器检查分析的时间间隔。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;baseEjectionTime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最小的开放时间。该电路将保持一段时间，等于最小弹射持续时间和电路已打开的次数的乘积。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;maxEjectionPercent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可以弹出的上游服务的负载平衡池中主机的最大百分比。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;与上述公称断路器相比，有两个主要偏差:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有半开放的状态。然而，断路器持续打开的时间取决于被调用服务之前失败的次数。持续的故障服务将导致断路器的开路时间越来越长。&lt;/li&gt;
&lt;li&gt;在基本模式中，只有一个被调用的应用程序(&lt;em&gt;后端&lt;/em&gt;)。在更实际的生产环境中，负载均衡器后面可能部署同一个应用程序的多个实例。某些情况下有些实例可能会失败，而有些实例可能会工作。因为Istio也有负载均衡器的功能，能够追踪失败的实例，并把它们从负载均衡池中移除，在一定程度上: ‘maxEjectionPercent’属性的作用是保持一小部分的实例池。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Istio实现断路器的方法是一种黑盒方法。它的视角很高，只有出了问题才能打开电路。另一方面，它的设置非常简单，不需要任何底层代码的知识，并且可以作为事后配置。&lt;/p&gt;
&lt;h2 id=&#34;hystrix断路器&#34;&gt;Hystrix断路器&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Netflix/Hystrix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hystrix&lt;/a&gt;是一个最初由Netflix提供的开源Java库。它是一个延迟容忍和容错的库，用于隔离对远程系统、服务和第三方库的访问点，停止级联故障，并在不可避免出现故障的复杂分布式系统中启用弹性。&lt;/p&gt;
&lt;p&gt;Hystrix有很多特点，包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保护通过第三方客户端库访问(通常是通过网络)的依赖项的延迟和失败。&lt;/li&gt;
&lt;li&gt;防止复杂分布式系统中的级联故障。&lt;/li&gt;
&lt;li&gt;失败快，恢复快。&lt;/li&gt;
&lt;li&gt;回退并尽可能优雅地降级。&lt;/li&gt;
&lt;li&gt;启用近实时监视、警报和操作控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，断路器的模式体现了这些特点。因为Hystrix是一个库，它以&lt;strong&gt;白盒方式&lt;/strong&gt;实现它。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resilience4J&lt;/strong&gt;
Netflix最近宣布，它已经停止开发Hystrix库，转而开发目前知名度较低的 &lt;a href=&#34;https://github.com/resilience4j/resilience4j&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Resilience4J&lt;/a&gt; 项目。
即使客户端代码可能稍有不同，Hystrix和Resilience4J的实现方法也是相似的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一个hystrix断路器的例子&#34;&gt;一个Hystrix断路器的例子&lt;/h3&gt;
&lt;p&gt;以电子商务web应用程序为例。该应用的架构由不同的微服务组成，每个微服务都基于一个业务特性:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身份验证&lt;/li&gt;
&lt;li&gt;目录浏览&lt;/li&gt;
&lt;li&gt;购物车管理&lt;/li&gt;
&lt;li&gt;定价和引用&lt;/li&gt;
&lt;li&gt;其它&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当显示目录项时，将查询定价/报价微服务的价格。如果它坏了，不管是不是断路器，价格都不会退回来，也不可能订购任何东西。&lt;/p&gt;
&lt;p&gt;从企业的角度来看，任何停机时间不仅会影响品牌的认知度，还会降低销售。大多数销售策略都倾向于销售，尽管价格并不完全正确。实现此销售策略的解决方案可以是缓存定价/报价服务在可用时返回的价格，并在服务关闭时返回缓存的价格。&lt;/p&gt;
&lt;p&gt;Hystrix提供了一个断路器实现，允许在电路打开时执行fallback机制，从而实现了这种方法。&lt;/p&gt;
&lt;p&gt;这是Hystrix模型的一个非常简单的类图:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-hystrix-class-diagramjpg&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;hystrix-class-diagram.jpg&#34; srcset=&#34;
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdwaxlekj21fz1rbak7_hu6590acf696684edd8d77eb099214fa35_384336_637fed9e521846d73fbd011841efd1cd.webp 400w,
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdwaxlekj21fz1rbak7_hu6590acf696684edd8d77eb099214fa35_384336_8b85b35b0bf029664548f82377f8fae8.webp 760w,
               /blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdwaxlekj21fz1rbak7_hu6590acf696684edd8d77eb099214fa35_384336_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-vs-hystrix-circuit-breaker/bf8f1836ly1g0vdwaxlekj21fz1rbak7_hu6590acf696684edd8d77eb099214fa35_384336_637fed9e521846d73fbd011841efd1cd.webp&#34;
               width=&#34;624&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      hystrix-class-diagram.jpg
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最关键的地方就在 &lt;code&gt;HystrixCommand&lt;/code&gt;方法 &lt;code&gt;run()&lt;/code&gt;和 &lt;code&gt;getFallback()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run()&lt;/code&gt; 是要实际执行的代码 &lt;em&gt;e.g.&lt;/em&gt; 从报价服务中获取价格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getFallabck()&lt;/code&gt; 获取当断路器打开时的fallback结果 &lt;em&gt;e.g.&lt;/em&gt; 返回缓存的价格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这可以转化为以下代码，使用Spring的&lt;code&gt;RestTemplate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FetchQuoteCommand&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HystrixCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;                                               &lt;span class=&#34;c1&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;                                        &lt;span class=&#34;c1&#34;&gt;// 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;                                    &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;FetchQuoteCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                             &lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                             &lt;span class=&#34;n&#34;&gt;Cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HystrixCommandGroupKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Factory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;asKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GetQuote&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;productId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getForObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://acme.com/api/quote/{id}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                                             &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                             &lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;                                            &lt;span class=&#34;c1&#34;&gt;// 6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getFallback&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;                                            &lt;span class=&#34;c1&#34;&gt;// 7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这需要作出一些解释:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该命令包装产品的id，将其建模为&lt;code&gt;UUID&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Spring的&lt;code&gt;RestTemplate&lt;/code&gt; 用于进行REST调用。任何其他实现方式都可以。&lt;/li&gt;
&lt;li&gt;一个共享的JCache实例，用于在服务可用时存储引号。&lt;/li&gt;
&lt;li&gt;Hystrix命令需要一个组键，以便在需要时将它们组合在一起。这是Hystrix的另一个特性，超出了本文的范围。有兴趣的读者可以在&lt;a href=&#34;https://github.com/Netflix/Hystrix/wiki/How-To-Use#command-group&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hystrix wiki&lt;/a&gt;中阅读有关命令组的内容。&lt;/li&gt;
&lt;li&gt;执行对引用服务的调用。如果它失败，Hystrix断路器流程启动。&lt;/li&gt;
&lt;li&gt;如果调用成功，则将返回的引用缓存到JCache共享实例中。&lt;/li&gt;
&lt;li&gt;当断路器打开时调用getFallback()。在这种情况下，从缓存中获取引用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hystrix wiki提供了&lt;a href=&#34;https://github.com/Netflix/Hystrix/wiki/How-To-Use#fallback-cache-via-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更高级的例子&lt;/a&gt;，例如fallback本身就是一个需要执行的命令。&lt;/p&gt;
&lt;h3 id=&#34;将hystrix与spring-cloud集成&#34;&gt;将Hystrix与Spring Cloud集成&lt;/h3&gt;
&lt;p&gt;虽然上面的代码可以工作，但是每次引用时都需要创建一个Hystrix命令对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://spring.io/projects/spring-cloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Cloud&lt;/a&gt;是建立在Spring Boot(本身依赖Spring框架)之上的库，它提供了与Spring的良好集成。它让你在处理Hystrix命令对象的实例化时，只需注释所需的fallback方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FetchQuoteService&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;SpringCloudFetchQuoteCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RestTemplate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                        &lt;span class=&#34;n&#34;&gt;Cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@HystrixCommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fallbackMethod&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;getQuoteFromCache&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getQuoteFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;                                 &lt;span class=&#34;c1&#34;&gt;// 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getForObject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://acme.com/api/quote/{id}&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                                             &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                             &lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;put&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;                                            &lt;span class=&#34;c1&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quote&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getQuoteFromCache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UUID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;                           &lt;span class=&#34;c1&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;productId&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;这个方法应该用&lt;code&gt;@HystrixCommand&lt;/code&gt;注释. &lt;code&gt;fallbackMethod&lt;/code&gt;元素引用fallback方法. 显然，这将通过反射来处理，并且不是类型安全的——毕竟这是一个字符串。&lt;/li&gt;
&lt;li&gt;Spring Cloud Hystrix允许在方法调用时传递产品的id参数。与上面简单的Hystrix命令相比，这允许有一个通用的服务对象。Hystrix命令的创建由Spring Cloud在运行时处理。&lt;/li&gt;
&lt;li&gt;核心逻辑没有改变。&lt;/li&gt;
&lt;li&gt;同样，缓存过程保持不变。&lt;/li&gt;
&lt;li&gt;fallback方法是一种常规方法。 &lt;strong&gt;它将使用与主方法完全相同的参数值来调用&lt;/strong&gt;， 因此，它必须具有相同的参数类型(以相同的顺序)。因为&lt;code&gt;getQuoteFor()&lt;/code&gt;方法接受&lt;code&gt;UUID&lt;/code&gt;，所以这个方法也接受&lt;code&gt;UUID&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无论是独立的还是由Spring Boot Cloud封装的，Hystrix都需要在代码级处理断路器。因此，需要提前计划，更改需要部署更新后的二进制文件。然而，当事情出错时，这允许有一个非常好的自定制的行为。&lt;/p&gt;
&lt;h2 id=&#34;istio-vs-hystrix-battle-of-circuit-breakers&#34;&gt;Istio vs Hystrix: battle of circuit breakers&lt;/h2&gt;
&lt;p&gt;如果存在失败的可能性，给定时间，就会出现失败，严重依赖网络的微服务需要针对失败进行设计。断路器模式是处理服务缺乏可用性的一种方法: 它不会对请求进行排队并阻塞调用者，而是快速失败(fail-fast)并立即返回。&lt;/p&gt;
&lt;p&gt;实现断路器的方法有两种，一种是黑盒方式，另一种是白盒方式。Istio作为一种代理管理工具，使用了黑盒方式.它实现起来很简单，不依赖于底层技术栈，而且可以在事后配置。&lt;/p&gt;
&lt;p&gt;另一方面，Hystrix库使用白盒方式。它允许所有不同类型的fallback:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个默认值&lt;/li&gt;
&lt;li&gt;一个缓存&lt;/li&gt;
&lt;li&gt;调用其他服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它还提供了级联回退(cascading fallbacks)。这些额外的特性是有代价的: 它需要在开发阶段就做出fallback的决策。&lt;/p&gt;
&lt;p&gt;这两种方法之间的最佳匹配可能会依靠自己的上下文: 在某些情况下，如引用的服务，一个白盒战略后备可能是一个更好的选择，而对于其他情况下快速失败可能是完全可以接受的，如一个集中的远程登录服务。&lt;/p&gt;
&lt;p&gt;当然，没有什么能阻止你同时使用它们。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/CircuitBreaker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CircuitBreaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://Microservices.io/patterns/reliability/circuit-breaker.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pattern: Circuit Breaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Circuit breaker design pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/docs/tasks/traffic-management/circuit-breaking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio/Circuit Breaking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.spring.io/spring-cloud-netflix/multi/multi__circuit_breaker_hystrix_clients.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Cloud | Circuit Breaker: Hystrix Clients&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
