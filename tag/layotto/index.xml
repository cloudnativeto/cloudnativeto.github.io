<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Layotto | 云原生社区（中国）</title>
    <link>https://cloudnative.to/tag/layotto/</link>
      <atom:link href="https://cloudnative.to/tag/layotto/index.xml" rel="self" type="application/rss+xml" />
    <description>Layotto</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Sat, 03 Jul 2021 13:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>Layotto</title>
      <link>https://cloudnative.to/tag/layotto/</link>
    </image>
    
    <item>
      <title>云原生社区 meetup 第五期成都站</title>
      <link>https://cloudnative.to/event/cloud-native-meetup-chengdu-05/</link>
      <pubDate>Sat, 03 Jul 2021 13:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/event/cloud-native-meetup-chengdu-05/</guid>
      <description>&lt;h2 id=&#34;话题&#34;&gt;话题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1zh411h7vH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开场演讲：欢迎来到云原生社区成都站&lt;/a&gt;，宋净超，云原生社区创始人、Tetrate 布道师&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1to4y1C7Sm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon EKS Distro 开源项目解析 &amp;amp; 演示&lt;/a&gt;，粟伟，亚马逊云科技资深解决方案架构师&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ih411h7HA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;面向量化投资的 AI 平台 ——AI 赋能投资：打造以大数据 + AI 为核心的下一代投资平台&lt;/a&gt;，梁举，宽邦科技 CEO&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1NM4y1M7gg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 TiDB 的云原生数据库实践&lt;/a&gt;，王天宜，TiDB 社区部门架构师&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1ty4y1M7SX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Layotto: 开启服务网格 + 应用运行时新篇章&lt;/a&gt;，石建伟（卓与），蚂蚁集团高级技术专家&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>蚂蚁开源多运行时项目 Layotto 简介</title>
      <link>https://cloudnative.to/blog/mosn-layotto-intro/</link>
      <pubDate>Mon, 21 Jun 2021 10:03:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/mosn-layotto-intro/</guid>
      <description>&lt;p&gt;Service Mesh 在微服务领域已经非常流行，越来越多的公司开始在内部落地，蚂蚁从 Service Mesh 刚出现的时候开始，就一直在这个方向上大力投入，到目前为止，内部的 Mesh 方案已经覆盖数千个应用、数十万容器并且经过了多次大促考验，Service Mesh 带来的业务解耦，平滑升级等优势大大提高了中间件的迭代效率。&lt;/p&gt;
&lt;p&gt;在大规模落地以后，我们又遇到了新的问题，本文主要对 Service Mesh 在蚂蚁内部落地情况进行回顾总结，并分享对 Service Mesh 落地后遇到的新问题的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;一service-mesh-回顾与总结&#34;&gt;一、Service Mesh 回顾与总结&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A、Service Mesh 的初衷&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq157p298j30u00gv13d_hu8d4fe8e7bb9eed5bbb8d0188392c1b97_94997_591764547f7b28df80510327f32a067d.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq157p298j30u00gv13d_hu8d4fe8e7bb9eed5bbb8d0188392c1b97_94997_16d3f3c82ded56109d73e02d1274f276.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq157p298j30u00gv13d_hu8d4fe8e7bb9eed5bbb8d0188392c1b97_94997_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq157p298j30u00gv13d_hu8d4fe8e7bb9eed5bbb8d0188392c1b97_94997_591764547f7b28df80510327f32a067d.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在微服务架构下，基础架构团队一般会为应用提供一个封装了各种服务治理能力的 SDK，这种做法虽然保障了应用的正常运行，但缺点也非常明显，每次基础架构团队迭代一个新功能都需要业务方参与升级才能使用，尤其是 bugfix 版本，往往需要强推业务方升级，这里面的痛苦程度每一个基础架构团队成员都深有体会。&lt;/p&gt;
&lt;p&gt;伴随着升级的困难，随之而来的就是应用使用的 SDK 版本差别非常大，生产环境同时跑着各种版本的 SDK，这种现象又会让新功能的迭代必须考虑各种兼容，就好像带着枷锁前进一般，这样随着不断迭代，会让代码维护非常困难，有些祖传逻辑更是一不小心就会掉坑里。&lt;/p&gt;
&lt;p&gt;同时这种“重”SDK 的开发模式，导致异构语言的治理能力非常薄弱，如果想为各种编程语言都提供一个功能完整且能持续迭代的 SDK 其中的成本可想而知。&lt;/p&gt;
&lt;p&gt;18 年的时候，Service Mesh 在国内持续火爆，这种架构理念旨在把服务治理能力跟业务解耦，让两者通过进程级别的通信方式进行交互。在这种架构模式下，服务治理能力从应用中剥离，运行在独立的进程中，迭代升级跟业务进程无关，这就可以让各种服务治理能力快速迭代，并且由于升级成本低，因此每个版本都可以全部升级，解决了历史包袱问题，同时 SDK 变“轻”直接降低了异构语言的治理门槛，再也不用为需要给各个语言开发相同服务治理能力的 SDK 头疼了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B、Service Mesh 落地现状&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq157uliyj30u00gy14n_hu72ed139280963ad9fa7f5b5f2113d994_94125_b1bd298485f33fa6df4fb9e1e71f6409.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq157uliyj30u00gy14n_hu72ed139280963ad9fa7f5b5f2113d994_94125_a732fbd2fc4bd8c492391bcb1b4a5d5f.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq157uliyj30u00gy14n_hu72ed139280963ad9fa7f5b5f2113d994_94125_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq157uliyj30u00gy14n_hu72ed139280963ad9fa7f5b5f2113d994_94125_b1bd298485f33fa6df4fb9e1e71f6409.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;蚂蚁很快意识到了 Service Mesh 的价值，全力投入到这个方向，用 Go 语言开发了 MOSN 这样可以对标 envoy 的优秀数据面，全权负责服务路由，负载均衡，熔断限流等能力的建设，大大加快了公司内部落地 Service Mesh 的进度。&lt;/p&gt;
&lt;p&gt;现在 MOSN 在蚂蚁内部已经覆盖了数千个应用、数十万容器，新创建的应用默认接入 MOSN，形成闭环。而且在大家最关心的资源占用、性能损耗方面 MOSN 也交出了一份让人满意的答卷：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;RT 小于 0.2ms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU 占用增加 0%~2%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存消耗增长小于 15M&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于 Service Mesh 降低了异构语言的服务治理门槛，NodeJS、C++ 等异构技术栈也在持续接入到 MOSN 中。&lt;/p&gt;
&lt;p&gt;在看到 RPC 能力 Mesh 化带来的巨大收益之后，蚂蚁内部还把 MQ，Cache，Config 等中间件能力都进行了 Mesh 化改造，下沉到 MOSN，提高了中间件产品整体的迭代效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C、新的挑战&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应用跟基础设施强绑定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15ggwwej30u00gs7ek_hu746d4a532f50bd5a50b0b4c1ebec4e07_97409_49c3ca7f2dee890297a00b95aea8357a.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15ggwwej30u00gs7ek_hu746d4a532f50bd5a50b0b4c1ebec4e07_97409_280dcda6604f35974df9621d93e75111.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15ggwwej30u00gs7ek_hu746d4a532f50bd5a50b0b4c1ebec4e07_97409_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15ggwwej30u00gs7ek_hu746d4a532f50bd5a50b0b4c1ebec4e07_97409_49c3ca7f2dee890297a00b95aea8357a.webp&#34;
               width=&#34;760&#34;
               height=&#34;425&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一个现代分布式应用，往往会同时依赖 RPC、Cache、MQ、Config 等各种分布式能力来完成业务逻辑的处理。&lt;/p&gt;
&lt;p&gt;当初看到 RPC 下沉的红利以后，其他各种能力也都快速下沉。初期，大家都会以自己最熟悉的方式来开发，这就导致没有统一的规划管理，如上图所示，应用依赖了各种基础设施的 SDK，而每种 SDK 又以自己特有的方式跟 MOSN 进行交互，使用的往往都是由原生基础设施提供的私有协议，这直接导致了复杂的中间件能力虽然下沉，但应用本质上还是被绑定到了基础设施，比如想把缓存从 Redis 迁移到 Memcache 的话，仍旧需要业务方升级 SDK，这种问题在应用上云的大趋势下表现的更为突出，试想一下，如果一个应用要部署在云上，由于该应用依赖了各种基础设施，势必要先把整个基础设施搬到云上才能让应用顺利部署，这其中的成本可想而知。&lt;/p&gt;
&lt;p&gt;因此如何让应用跟基础设施解绑，使其具备可移植能力，能够无感知跨平台部署是我们面临的第一个问题。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;异构语言接入成本高&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15drahdj30u00grwp1_hu11d75988adaa27f45837d1b960eb25f0_117100_514af093394ffc0f21d8f2ecf2eb7ed3.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15drahdj30u00grwp1_hu11d75988adaa27f45837d1b960eb25f0_117100_2799a750ce7d533dce88cd58b68d21f9.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15drahdj30u00grwp1_hu11d75988adaa27f45837d1b960eb25f0_117100_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15drahdj30u00grwp1_hu11d75988adaa27f45837d1b960eb25f0_117100_514af093394ffc0f21d8f2ecf2eb7ed3.webp&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;事实证明 Service Mesh 确实降低了异构语言的接入门槛，但在越来越多的基础能力下沉到 MOSN 以后，我们逐渐意识到为了让应用跟 MOSN 交互，各种 SDK 里都需要对通信协议，序列化协议进行开发，如果再加上需要对各种异构语言都提供相同的功能，那维护难度就会成倍上涨，&lt;/p&gt;
&lt;p&gt;Service Mesh 让重 SDK 成为了历史，但对于现在各种编程语言百花齐放、各种应用又强依赖基础设施的场景来说，我们发现现有的 SDK 还不够薄，异构语言接入的门槛还不够低，如何进一步降低异构语言的接入门槛是我们面临的第二个问题。&lt;/p&gt;
&lt;h2 id=&#34;二multi-runtime-理论概述&#34;&gt;二、Multi Runtime 理论概述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A、什么是 Runtime?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15huvpcj30u00h1aj0_hu5b61d5bfeedae16301d897e3df55f287_73953_2bf82611724039cafc7303f3b58a043f.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15huvpcj30u00h1aj0_hu5b61d5bfeedae16301d897e3df55f287_73953_5377dc98e880d586da98a1783d4074eb.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15huvpcj30u00h1aj0_hu5b61d5bfeedae16301d897e3df55f287_73953_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15huvpcj30u00h1aj0_hu5b61d5bfeedae16301d897e3df55f287_73953_2bf82611724039cafc7303f3b58a043f.webp&#34;
               width=&#34;760&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;20 年初的时候，Bilgin lbryam 发表了一篇名为&lt;/p&gt;
&lt;p&gt;Multi-Runtime Microservices Architecture&lt;/p&gt;
&lt;p&gt;的文章，里面对微服务架构下一阶段的形态进行了讨论。&lt;/p&gt;
&lt;p&gt;如上图所示，作者把分布式服务的需求进行了抽象，总共分为了四大类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生命周期（Lifecycle）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要指应用的编译、打包、部署等事情，在云原生的大趋势下基本被 docker、kubernetes 承包。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;网络（Networking）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可靠的网络是微服务之间进行通信的基本保障，Service Mesh 正是在这方面做了尝试，目前 MOSN、envoy 等流行的数据面的稳定性、实用性都已经得到了充分验证。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;状态（State）&lt;/p&gt;
&lt;p&gt;分布式系统需要的服务编排，工作流，分布式单例，调度，幂等性，有状态的错误恢复，缓存等操作都可以统一归为底层的状态管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绑定（Binding）&lt;/p&gt;
&lt;p&gt;在分布式系统中，不仅需要跟其他系统通信，还需要集成各种外部系统，因此对于协议转换，多种交互模型、错误恢复流程等功能也都有强依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;明确了需求以后，借鉴了 Service Mesh 的思路，作者对分布式服务的架构演进进行了如下总结：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15hhinxj30u00gn13d_hu8c06b763264dcc881d164d08814a775b_88471_d6f1eb2362d0c91d63c1f6ff2f262c69.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15hhinxj30u00gn13d_hu8c06b763264dcc881d164d08814a775b_88471_9235b9966dabe19d7f653adc6544e593.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15hhinxj30u00gn13d_hu8c06b763264dcc881d164d08814a775b_88471_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15hhinxj30u00gn13d_hu8c06b763264dcc881d164d08814a775b_88471_d6f1eb2362d0c91d63c1f6ff2f262c69.webp&#34;
               width=&#34;760&#34;
               height=&#34;422&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;第一阶段就是把各种基础设施能力从应用中剥离解耦，通通变成独立 sidecar 模型伴随着应用一起运行。&lt;/p&gt;
&lt;p&gt;第二阶段是把各种 sidecar 提供的能力统一抽象成若干个 Runtime，这样应用从面向基础组件开发就演变成了面向各种分布式能力开发，彻底屏蔽掉了底层实现细节，而且由于是面向能力，除了调用提供各种能力的 API 之外，应用再也不需要依赖各种各样基础设施提供的 SDK 了。&lt;/p&gt;
&lt;p&gt;作者的思路跟我们希望解决的问题一致，我们决定使用 Runtime 的理念来解决 Service Mesh 发展到现在所遇到的新问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B, Service Mesh vs Runtime&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15awmo2j30u00fhgxm_huc4aa9e81e3ce0a972f1055204f286e5a_86241_1370e75eabfca64a9cce5aea00e83882.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15awmo2j30u00fhgxm_huc4aa9e81e3ce0a972f1055204f286e5a_86241_03a55c11009de917086688d2a2585502.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15awmo2j30u00fhgxm_huc4aa9e81e3ce0a972f1055204f286e5a_86241_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15awmo2j30u00fhgxm_huc4aa9e81e3ce0a972f1055204f286e5a_86241_1370e75eabfca64a9cce5aea00e83882.webp&#34;
               width=&#34;760&#34;
               height=&#34;392&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了让大家对 Runtime 有一个更加清晰的认识，上图针对 Service Mesh 跟 Runtime 两种理念的定位、交互方式、通信协议以及能力丰富度进行了总结，可以看到相比 Service Mesh 而言，Runtime 提供了语义明确、能力丰富的 API，可以让应用跟它的交互变得更加简单直接。&lt;/p&gt;
&lt;h2 id=&#34;三mosn-子项目-layotto&#34;&gt;三、MOSN 子项目 Layotto&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A、dapr 调研&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq159kxfej30u00gz13c_hu71ac205a6893e9932403d2e84fb9cf4b_96190_be698ca04086ddd58c88d6e1ff4a85dc.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq159kxfej30u00gz13c_hu71ac205a6893e9932403d2e84fb9cf4b_96190_cdba39dd16a1ee9ada18634003a4674f.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq159kxfej30u00gz13c_hu71ac205a6893e9932403d2e84fb9cf4b_96190_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq159kxfej30u00gz13c_hu71ac205a6893e9932403d2e84fb9cf4b_96190_be698ca04086ddd58c88d6e1ff4a85dc.webp&#34;
               width=&#34;760&#34;
               height=&#34;430&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;dapr 是社区中一款知名的 Runtime 实现产品，活跃度也比较高，因此我们首先调研了 dapr 的情况，发现 dapr 具有如下优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;提供了多种分布式能力，API 定义清晰，基本能满足一般的使用场景。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;针对各种能力都提供了不同的实现组件，基本涵盖了常用的中间件产品，用户可以根据需要自由选择。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当考虑如何在公司内部落地 dapr 时，我们提出了两种方案，如上图所示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;替换：废弃掉现在的 MOSN，用 dapr 进行替换，这种方案存在两个问题：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a.  dapr 虽然提供了很多分布式能力，但目前并不具备 Service Mesh 包含的丰富的服务治理能力。&lt;/p&gt;
&lt;p&gt;b.  MOSN 在公司内部已经大规模落地，并且经过了多次大促考验，直接用 dapr 来替换 MOSN 稳定性有待验证。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;共存：新增一个 dapr 容器，跟 MOSN 以两个 sidecar 的模式进行部署。这种方案同样存在两个问题：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a.  引入一个新的 sidecar，我们就需要考虑它配套的升级、监控、注入等等事情，运维成本飙升。&lt;/p&gt;
&lt;p&gt;b.  多维护一个容器意味着多了一层挂掉的风险，这会降低现在的系统可用性。&lt;/p&gt;
&lt;p&gt;同样的，如果你目前正在使用 envoy 作为数据面，也会面临上述问题。&lt;/p&gt;
&lt;p&gt;因此我们希望把 Runtime 跟 Service Mesh 两者结合起来，通过一个完整的 sidecar 进行部署，在保证稳定性、运维成本不变的前提下，最大程度复用现有的各种 Mesh 能力。此外我们还希望这部分 Runtime 能力除了跟 MOSN 结合起来之外，未来也可以跟 envoy 结合起来，解决更多场景中的问题，Layotto 就是在这样的背景下诞生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B、Layotto 架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15gyopkj60u00ggako02_hu6b103296c956d640cd23c34167e8519a_101622_287be284a2a795eb712203fff85242b7.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15gyopkj60u00ggako02_hu6b103296c956d640cd23c34167e8519a_101622_e197ccf773fd585912062bce2eba051a.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15gyopkj60u00ggako02_hu6b103296c956d640cd23c34167e8519a_101622_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15gyopkj60u00ggako02_hu6b103296c956d640cd23c34167e8519a_101622_287be284a2a795eb712203fff85242b7.webp&#34;
               width=&#34;760&#34;
               height=&#34;417&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如上图所示，Layotto 是构建在 MOSN 之上，在下层对接了各种基础设施，向上层应用提供了统一的，具有各种各样分布式能力的标准 API。对于接入 Layotto 的应用来说，开发者不再需要关心底层各种组件的实现差异，只需要关注应用需要什么样的能力，然后调用对应能力的 API 即可，这样可以彻底跟底层基础设施解绑。&lt;/p&gt;
&lt;p&gt;对应用来说，交互分为两块，一个是作为 gRPC Client 调用 Layotto 的标准 API，一个是作为 gRPC Server 来实现 Layotto 的回调，得利于 gRPC 优秀的跨语言支持能力，应用不再需要关心通信、序列化等细节问题，进一步降低了异构技术栈的使用门槛。&lt;/p&gt;
&lt;p&gt;除了面向应用，Layotto 也向运维平台提供了统一的接口，这些接口可以把应用跟 sidecar 的运行状态反馈给运维平台，方便 SRE 同学及时了解应用的运行状态并针对不同状态做出不同的举措，该功能考虑到跟 k8s 等已有的平台集成，因此我们提供了 HTTP 协议的访问方式。&lt;/p&gt;
&lt;p&gt;除了 Layotto 本身设计以外，项目还涉及两块标准化建设，首先想要制定一套语义明确，适用场景广泛的 API 并不是一件容易的事情，为此我们跟阿里、dapr 社区进行了合作，希望能够推进 Runtime API 标准化的建设，其次对于 dapr 社区已经实现的各种能力的 Components 来说，我们的原则是优先复用、其次开发，尽量不把精力浪费在已有的组件上面，重复造轮子。&lt;/p&gt;
&lt;p&gt;最后 Layotto 目前虽然是构建在 MOSN 之上，未来我们希望 Layotto 可以跑在 envoy 上，这样只要应用接入了 Service Mesh，无论数据面使用的是 MOSN 还是 envoy，都可以在上面增加 Runtime 能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C、Layotto 的移植性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq1582qecj30u00h949f_hud3d350890c3104af090c29f51e8b5223_96597_69660c56fc61a94e2ddb1251d13b6a70.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq1582qecj30u00h949f_hud3d350890c3104af090c29f51e8b5223_96597_f7df6ee04004a31fd0b296567490eec2.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq1582qecj30u00h949f_hud3d350890c3104af090c29f51e8b5223_96597_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq1582qecj30u00h949f_hud3d350890c3104af090c29f51e8b5223_96597_69660c56fc61a94e2ddb1251d13b6a70.webp&#34;
               width=&#34;760&#34;
               height=&#34;437&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如上图所示，一旦完成 Runtime API 的标准化建设，接入 Layotto 的应用天然具备了可移植性，应用不需要任何改造就可以在私有云以及各种公有云上部署，并且由于使用的是标准 API，应用也可以无需任何改造就在 Layotto 跟 dapr 之间自由切换。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D、名字含义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15f2gjnj30u00gwwod_hua1efe1fec2c945866d66c54dd177c53d_79156_974badaf60d89fa103eaa86142d84baa.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15f2gjnj30u00gwwod_hua1efe1fec2c945866d66c54dd177c53d_79156_ff5f590fd0ad9d543bb17e032a99f82a.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15f2gjnj30u00gwwod_hua1efe1fec2c945866d66c54dd177c53d_79156_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15f2gjnj30u00gwwod_hua1efe1fec2c945866d66c54dd177c53d_79156_974badaf60d89fa103eaa86142d84baa.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从上面的架构图可以看出，Layotto 项目本身是希望屏蔽基础设施的实现细节，向上层应用统一提供各种分布式能力，这种做法就好像是在应用跟基础设施之间加了一层抽象，因此我们借鉴了 OSI 对网络定义七层模型的思路，希望 Layotto 可以作为第八层对应用提供服务，otto 是意大利语中 8 的意思，Layer otto 就是第八层的意思，简化了一下变成了 Layotto，同时项目代号 L8，也是第八层的意思，这个代号也是设计我们项目 LOGO 时灵感的来源。&lt;/p&gt;
&lt;p&gt;介绍完项目的整体情况，下面对其中四个主要功能的实现细节进行说明。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;E、配置原语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15g0osxj30u00gu48w_huc14aae144d277425f08131ccc486eb55_99786_deb496ad8141f1739fe44d550c0553d4.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15g0osxj30u00gu48w_huc14aae144d277425f08131ccc486eb55_99786_bfb0d94e29220c4ec9a0abc79732637f.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15g0osxj30u00gu48w_huc14aae144d277425f08131ccc486eb55_99786_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15g0osxj30u00gu48w_huc14aae144d277425f08131ccc486eb55_99786_deb496ad8141f1739fe44d550c0553d4.webp&#34;
               width=&#34;760&#34;
               height=&#34;426&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;首先是分布式系统中经常使用的配置功能，应用一般使用配置中心来做开关或者动态调整应用的运行状态。Layotto 中配置模块的实现包括两部分，一个是对如何定义配置这种能力的 API 的思考，一个是具体的实现，下面逐个来看。&lt;/p&gt;
&lt;p&gt;想要定义一个能满足大部分实际生产诉求的配置 API 并不是一件容易的事，dapr 目前也缺失这个能力，因此我们跟阿里以及 dapr 社区一起合作，为如何定义一版合理的配置 API 进行了激烈讨论。&lt;/p&gt;
&lt;p&gt;目前讨论结果还没有最终确定，因此 Layotto 是基于我们提给社区的第一版草案进行实现，下面对我们的草案进行简要说明。&lt;/p&gt;
&lt;p&gt;我们先定义了一般配置所需的基本元素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;appId：表示配置属于哪个应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;key：配置的 key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;content：配置的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;group：配置所属的分组，如果一个 appId 下面的配置过多，我们可以给这些配置进行分组归类，便于维护。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此外我们追加了两种高级特性，用来适配更加复杂的配置使用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;label，用于给配置打标签，比如该配置属于哪个环境，在进行配置查询的时候，我们会使用 label + key 来查询配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tags，用户给配置追加的一些附加信息，如描述信息、创建者信息，最后修改时间等等，方便配置的管理，审计等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于上述定义的配置 API 的具体实现，目前支持查询、订阅、删除、创建、修改五种操作，其中订阅配置变更后的推送使用的是 gRPC 的 stream 特性，而底层实现这些配置能力的组件，我们选择了国内流行的 apollo，后面也会根据需求增加其他实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;F、Pub/Sub 原语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq158ic3jj30u00gwn6v_hub380fc5841b617fcf71ac29d1a0b9be7_96348_b6983c401904b0f90bb21511ebff9660.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq158ic3jj30u00gwn6v_hub380fc5841b617fcf71ac29d1a0b9be7_96348_5abf5fb88229650114477668f776f571.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq158ic3jj30u00gwn6v_hub380fc5841b617fcf71ac29d1a0b9be7_96348_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq158ic3jj30u00gwn6v_hub380fc5841b617fcf71ac29d1a0b9be7_96348_b6983c401904b0f90bb21511ebff9660.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于 Pub/Sub 能力的支持，我们调研了 dapr 现在的实现，发现基本上已经可以满足我们的需求，因此我们直接复用了 dapr 的 API 以及 components，只是在 Layotto 里面做了适配，这为我们节省了大量的重复劳动，我们希望跟 dapr 社区保持一种合作共建的思路，而不是重复造轮子。&lt;/p&gt;
&lt;p&gt;其中 Pub 功能是 App 调用 Layotto 提供的 PublishEvent 接口，而 Sub 功能则是应用通过 gRPC Server 的形式实现了 ListTopicSubscriptions 跟 OnTopicEvent 两个接口，一个用来告诉 Layotto 应用需要订阅哪些 topic，一个用于接收 topic 变化时 Layotto 的回调事件。&lt;/p&gt;
&lt;p&gt;dapr 对于 Pub/Sub 的定义基本满足我们的需求，但在某些场景下仍有不足，dapr 采用了 CloudEvent 标准，因此 Pub 接口没有返回值，这无法满足我们生产场景中要求 Pub 消息以后服务端返回对应的 messageID 的需求，这一点我们已经把需求提交给了 dapr 社区，还在等待反馈，考虑到社区异步协作的机制，我们可能会先社区一步增加返回结果，然后再跟社区探讨一种更好的兼容方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;G、RPC 原语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15fi4ftj30u00h3wou_hub70513d1787434d5200af73124ddda99_86187_02c60873115d0dcbb18fb36991f2ac72.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15fi4ftj30u00h3wou_hub70513d1787434d5200af73124ddda99_86187_1f910b500126d5b7bb257c08c3adee80.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15fi4ftj30u00h3wou_hub70513d1787434d5200af73124ddda99_86187_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15fi4ftj30u00h3wou_hub70513d1787434d5200af73124ddda99_86187_02c60873115d0dcbb18fb36991f2ac72.webp&#34;
               width=&#34;760&#34;
               height=&#34;433&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;RPC 的能力大家不会陌生，这可能是微服务架构下最最基础的需求，对于 RPC 接口的定义，我们同样参考了 dapr 社区的定义，发现完全可以满足我们的需求，因此接口定义就直接复用 dapr 的，但目前 dapr 提供的 RPC 实现方案还比较薄弱，而 MOSN 经过多年迭代，能力已经非常成熟完善，因此我们大胆把 Runtime 跟 Service Mesh 两种思路结合在一起，把 MOSN 本身作为我们实现 RPC 能力的一个 Component，这样 Layotto 在收到 RPC 请求以后交给 MOSN 进行实际数据传输，这种方案可以通过 istio 动态改变路由规则，降级限流等等设置，相当于直接复用了 Service Mesh 的各种能力，这也说明 Runtime 不是要推翻 Service Mesh，而是要在此基础上继续向前迈一步。&lt;/p&gt;
&lt;p&gt;具体实现细节上，为了更好的跟 MOSN 融合，我们在 RPC 的实现上面加了一层 Channel，默认支持 dubbo，bolt，http 三种常见的 RPC 协议，如果仍然不能满足用户场景，我们还追加了 Before/After 两种 Filter，可以让用户做自定义扩展，实现协议转换等需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;H、Actuator 原语&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15c8kvcj30u00h0til_hu352b34e0bbec2c36e6d2881e2826f88c_88345_5db3d335f867e72b2d98522aeb5e5ab4.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15c8kvcj30u00h0til_hu352b34e0bbec2c36e6d2881e2826f88c_88345_d3647c3b27e2d444164c1571824fbabf.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15c8kvcj30u00h0til_hu352b34e0bbec2c36e6d2881e2826f88c_88345_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15c8kvcj30u00h0til_hu352b34e0bbec2c36e6d2881e2826f88c_88345_5db3d335f867e72b2d98522aeb5e5ab4.webp&#34;
               width=&#34;760&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在实际生产环境中，除了应用所需要的各种分布式能力以外，PaaS 等运维平台往往需要了解应用的运行状态，基于这种需求，我们抽象了一套 Actuator 接口，目前 dapr 还没有提供这方面的能力，因此我们根据内部的需求场景进行了设计，旨在把应用在启动期、运行期等阶段各种各样的信息暴露出去，方便 PaaS 了解应用的运行情况。&lt;/p&gt;
&lt;p&gt;Layotto 把暴露信息分为两大类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Health：该模块判断应用当前运行状态是否健康，比如某个强依赖的组件如果初始化失败就需要表示为非健康状态，而对于健康检查的类型我们参考了 k8s，分为：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a.  Readiness：表示应用启动完成，可以开始处理请求。&lt;/p&gt;
&lt;p&gt;b.  Liveness：表示应用存活状态，如果不存活则需要切流等。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Info：该模块预期会暴露应用的一些依赖信息出去，如应用依赖的服务，订阅的配置等等，用于排查问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Health 对外暴露的健康状态分为以下三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;INIT：表示应用还在启动中，如果应用发布过程中返回该值，这个时候 PaaS 平台应该继续等待应用完成启动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UP：表示应用启动正常，如果应用发布过程中返回该值，意味着 PasS 平台可以开始放入流量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DOWN：表示应用启动失败，如果应用发布过程中返回该值，意味着 PaaS 需要停止发布并通知应用 owner。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到这里关于 Layotto 目前在 Runtime 方向上的探索基本讲完了，我们通过定义明确语义的 API，使用 gRPC 这种标准的交互协议解决了目前面临的基础设施强绑定、异构语言接入成本高两大问题。随着未来 API 标准化的建设，一方面可以让接入 Layotto 的应用无感知的在各种私有云、公有云上面部署，另一方面也能让应用在 Layotto，dapr 之间自由切换，提高研发效率。&lt;/p&gt;
&lt;p&gt;目前 Serverless 领域也是百花齐放，没有一种统一的解决方案，因此 Layotto 除了在上述 Runtime 方向上的投入以外，还在 Serverless 方向上也进行了一些尝试，下面就尝试方案进行介绍。&lt;/p&gt;
&lt;h2 id=&#34;四webassembly-的探索&#34;&gt;四、WebAssembly 的探索&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A、WebAssembly 简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq1590y7tj30u00ggwqv_hu692954758ca580050c4029cc950d8031_90204_05b605369a334139875e34af47665a26.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq1590y7tj30u00ggwqv_hu692954758ca580050c4029cc950d8031_90204_9c87a79599918602e60259ef94117c2d.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq1590y7tj30u00ggwqv_hu692954758ca580050c4029cc950d8031_90204_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq1590y7tj30u00ggwqv_hu692954758ca580050c4029cc950d8031_90204_05b605369a334139875e34af47665a26.webp&#34;
               width=&#34;760&#34;
               height=&#34;417&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;WebAssembly，简称 WASM，是一个二进制指令集，最初是跑在浏览器上来解决 JavaScript 的性能问题，但由于它良好的安全性，隔离性以及语言无关性等优秀特性，很快人们便开始让它跑在浏览器之外的地方，随着 WASI 定义的出现，只需要一个 WASM 运行时，就可以让 WASM 文件随处执行。&lt;/p&gt;
&lt;p&gt;既然 WebAssembly 可以在浏览器以外的地方运行，那么我们是否能把它用在 Serverless 领域？目前已经有人在这方面做了一些尝试，不过如果这种方案真的想落地的话，首先要考虑的就是如何解决运行中的 WebAssembly 对各种基础设施的依赖问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B、WebAssembly 落地原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前 MOSN 通过集成 WASM Runtime 的方式让 WASM 跑在 MOSN 上面，以此来满足对 MOSN 做自定义扩展的需求。同时，Layotto 也是构建在 MOSN 之上，因此我们考虑把二者结合在一起，实现方案如下图所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15d6x2tj30u00g9wng_hu6e75edc20876f0b7ac3207a92bb4cfd3_77590_74aab99dc7e871934ce61ba9caae681a.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15d6x2tj30u00g9wng_hu6e75edc20876f0b7ac3207a92bb4cfd3_77590_a43726d5b74c33d7c373eb4519920949.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15d6x2tj30u00g9wng_hu6e75edc20876f0b7ac3207a92bb4cfd3_77590_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15d6x2tj30u00g9wng_hu6e75edc20876f0b7ac3207a92bb4cfd3_77590_74aab99dc7e871934ce61ba9caae681a.webp&#34;
               width=&#34;760&#34;
               height=&#34;412&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;开发者可以使用 Go/C++/Rust 等各种各样自己喜欢的语言来开发应用代码，然后把它们编译成 WASM 文件跑在 MOSN 上面，当 WASM 形态的应用在处理请求的过程中需要依赖各种分布式能力时就可以通过本地函数调用的方式调用 Layotto 提供的标准 API，这样直接解决了 WASM 形态应用的依赖问题。&lt;/p&gt;
&lt;p&gt;目前 Layotto 提供了 Go 跟 Rust 版 WASM 的实现，虽然只支持 demo 级功能，但已经足够让我们看到这种方案的潜在价值。&lt;/p&gt;
&lt;p&gt;此外，WASM 社区目前还处于初期阶段，有很多地方需要完善，我们也给社区提交了一些 PR 共同建设，为 WASM 技术的落地添砖加瓦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C、WebAssembly 落地展望&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq159zou3j30u00g7wqn_hud3907d0ce773b9ce3415f9f23742d185_92602_85092a4bac92fcedea7b94fbfd95722d.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq159zou3j30u00g7wqn_hud3907d0ce773b9ce3415f9f23742d185_92602_a2bb21fb90df13ac3d2c0a904a26ffb5.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq159zou3j30u00g7wqn_hud3907d0ce773b9ce3415f9f23742d185_92602_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq159zou3j30u00g7wqn_hud3907d0ce773b9ce3415f9f23742d185_92602_85092a4bac92fcedea7b94fbfd95722d.webp&#34;
               width=&#34;760&#34;
               height=&#34;410&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;虽然现在 Layotto 中对 WASM 的使用还处于试验阶段，但我们希望它最终可以成为 Serverless 的一种实现形态，如上图所示，应用通过各种编程语言开发，然后统一编译成 WASM 文件，最后跑在 Layotto+MOSN 上面，而对于应用的运维管理统一由 k8s、docker、prometheus 等产品负责。&lt;/p&gt;
&lt;h2 id=&#34;五社区规划&#34;&gt;五、社区规划&lt;/h2&gt;
&lt;p&gt;最后来看下 Layotto 在社区的做的一些事情。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A, Layotto vs Dapr&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15ahwq0j30u00gztjk_hu6235f3a1b4a4c4db7a9f3ddff7f56e6b_94527_01e76f12b9bfdb79ffe5d7a513ca0601.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15ahwq0j30u00gztjk_hu6235f3a1b4a4c4db7a9f3ddff7f56e6b_94527_97abb64e82a8726fe321cf8106fd199c.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15ahwq0j30u00gztjk_hu6235f3a1b4a4c4db7a9f3ddff7f56e6b_94527_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15ahwq0j30u00gztjk_hu6235f3a1b4a4c4db7a9f3ddff7f56e6b_94527_01e76f12b9bfdb79ffe5d7a513ca0601.webp&#34;
               width=&#34;760&#34;
               height=&#34;430&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图列出了 Layotto 跟 dapr 现有的能力对比，在 Layotto 的开发过程中，我们借鉴 dapr 的思路，始终以优先复用、其次开发为原则，旨在达成共建的目标，而对于正在建设或者未来要建设的能力来说，我们计划优先在 Layotto 上落地，然后再提给社区，合并到标准 API，鉴于社区异步协作的机制，沟通成本较高，因此短期内可能 Layotto 的 API 会先于社区，但长期来看一定会统一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;B、API 共建计划&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15bgf6ej30u00gp46v_hud843dbaf9ec415eaba0a3f96a27cd6b1_94768_1c22cda18f5f01cf989620e57c0ed7d4.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15bgf6ej30u00gp46v_hud843dbaf9ec415eaba0a3f96a27cd6b1_94768_e200a371c25c1caf6dc77579a5882e4a.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15bgf6ej30u00gp46v_hud843dbaf9ec415eaba0a3f96a27cd6b1_94768_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15bgf6ej30u00gp46v_hud843dbaf9ec415eaba0a3f96a27cd6b1_94768_1c22cda18f5f01cf989620e57c0ed7d4.webp&#34;
               width=&#34;760&#34;
               height=&#34;423&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;关于如何定义一套标准的 API 以及如何让 Layotto 可以跑在 envoy 上等等事项，我们已经在各个社区进行了深入讨论，并且以后也还会继续推进。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C、Roadmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15cshaej30u00gwdpz_hu46fcbf37ac67d8848309ffddde600f1b_91014_aed27256466edee33ea82ca7ab421ae7.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15cshaej30u00gwdpz_hu46fcbf37ac67d8848309ffddde600f1b_91014_137608cea3905081bad86b9c3eb1ec7a.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15cshaej30u00gwdpz_hu46fcbf37ac67d8848309ffddde600f1b_91014_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15cshaej30u00gwdpz_hu46fcbf37ac67d8848309ffddde600f1b_91014_aed27256466edee33ea82ca7ab421ae7.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Layotto 在目前主要支持 RPC、Config、Pub/Sub、Actuator 四大功能，预计在九月会把精力投入到分布式锁、State、可观测性上面，十二月份会支持 Layotto 插件化，也就是让它可以跑在 envoy 上，同时希望对 WebAssembly 的探索会有进一步的产出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;D、正式开源&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-image&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Image&#34; srcset=&#34;
               /blog/mosn-layotto-intro/008i3skNly1grq15by16mj30u00ffdpf_hu7135be4e487d68acc48721570be4ecb1_73099_fbfc9131b85a30ece833811be4ff03c2.webp 400w,
               /blog/mosn-layotto-intro/008i3skNly1grq15by16mj30u00ffdpf_hu7135be4e487d68acc48721570be4ecb1_73099_01a058e6a189971e5e2dda18640ae8c8.webp 760w,
               /blog/mosn-layotto-intro/008i3skNly1grq15by16mj30u00ffdpf_hu7135be4e487d68acc48721570be4ecb1_73099_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/mosn-layotto-intro/008i3skNly1grq15by16mj30u00ffdpf_hu7135be4e487d68acc48721570be4ecb1_73099_fbfc9131b85a30ece833811be4ff03c2.webp&#34;
               width=&#34;760&#34;
               height=&#34;391&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Image
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;前面详细介绍了 Layotto 项目，最重要的还是该项目今天作为 MOSN 的子项目正式开源，我们提供了详细的文档以及 demo 示例方便大家快速上手体验。&lt;/p&gt;
&lt;p&gt;对于 API 标准化的建设是一件需要长期推动的事情，同时标准化意味着不是满足一两种场景，而是尽可能的适配大多数使用场景，为此我们希望更多的人可以参与到 Layotto 项目中，描述你的使用场景，讨论 API 的定义方案，一起提交给社区，最终达成 Write once, Run anywhere 的终极目标！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
