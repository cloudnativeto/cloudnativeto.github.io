<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Waypoint | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/waypoint/</link>
      <atom:link href="https://cloudnativecn.com/tag/waypoint/index.xml" rel="self" type="application/rss+xml" />
    <description>Waypoint</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 24 Apr 2025 18:09:59 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>Waypoint</title>
      <link>https://cloudnativecn.com/tag/waypoint/</link>
    </image>
    
    <item>
      <title>Ambient Mesh 中的授权策略指南</title>
      <link>https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/</link>
      <pubDate>Thu, 24 Apr 2025 18:09:59 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/</guid>
      <description>&lt;p&gt;服务网格最受欢迎的功能之一，就是能够对网络流量强制执行访问控制策略。由于所有流量都经过代理服务器，因此你可以确保没有人能够绕过某个强制点直接访问服务，而且这些强制点可以位于每个服务前，而不是仅在网络边缘。&lt;/p&gt;
&lt;p&gt;与传统的防火墙或 Kubernetes 的 NetworkPolicy 功能不同，服务网格还可以访问应用层（第七层，L7）信息，例如请求是 HTTP 的 GET 还是 POST，以及请求中携带的 cookie 中的用户身份。&lt;/p&gt;
&lt;p&gt;Ambient Mesh（由 Istio 的 Ambient 模式和 Gloo Mesh 实现）极大地简化了服务网格的交付方式，并显著降低了成本。它的做法是&lt;a href=&#34;https://ambientmesh.io/docs/about/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 L4 和 L7 的处理拆分为两个不同的代理组件&lt;/a&gt;。但这也意味着我们必须改变对访问控制的默认假设：我们不再默认每个工作负载前都有一个 L7 感知的强制执行点。好消息是，大多数情况下我们并不需要它，如果确实需要，也可以按需部署，仅作用于需要保护的工作负载。&lt;/p&gt;
&lt;h3 id=&#34;ambient-mesh-中的身份认证与授权&#34;&gt;Ambient Mesh 中的身份认证与授权&lt;/h3&gt;
&lt;p&gt;运行在服务网格中的每个工作负载都有一个基于命名空间和 ServiceAccount 的身份。这些身份在网格内会被自动验证：这是 mTLS 提供的特性，Ambient 模式默认启用 mTLS。&lt;/p&gt;
&lt;p&gt;我们使用 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 来控制流量。此类策略指定网格中的目标，并包含规则，用于基于来源（from）、操作（to）以及条件（when）来允许或拒绝访问。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ztunnel&lt;/code&gt; 代理始终可以强制执行策略，但它只了解 L3/L4 层的信息（如主机与端口）；而 &lt;code&gt;waypoint&lt;/code&gt; 代理还可感知 L7 信息（如路径与方法），但不是默认部署的。为了兼顾 Ambient 模式的优势与安全性，我们需要为这两类代理分别定义不同粒度的策略。幸运的是，这并不复杂。&lt;/p&gt;
&lt;h3 id=&#34;两类不同的授权策略&#34;&gt;两类不同的授权策略&lt;/h3&gt;
&lt;p&gt;考虑某个部署在 Ambient Mesh 中的工作负载，没有使用 Waypoint。这时策略只能在服务端的 ztunnel 上强制执行。而 ztunnel 无法识别 L7 信息，因此只能强制 L4 层的策略。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f1_hu_f3f250e26fe4f503.webp 400w,
               /blog/ambient-mesh-authorization-policy/f1_hu_47cda3e656a287dc.webp 760w,
               /blog/ambient-mesh-authorization-policy/f1_hu_77fdf6cb978db31a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f1_hu_f3f250e26fe4f503.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当你为该工作负载&lt;a href=&#34;https://ambientmesh.io/docs/setup/configure-waypoints/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;引入 Waypoint&lt;/a&gt; 时，策略就可以在两个位置被执行：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f2_hu_42b4867cc14f936e.webp 400w,
               /blog/ambient-mesh-authorization-policy/f2_hu_ee3f68c15aa45293.webp 760w,
               /blog/ambient-mesh-authorization-policy/f2_hu_26d72b1a87811898.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f2_hu_42b4867cc14f936e.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当系统存在多个策略执行点时，应该&lt;strong&gt;始终在最早的执行点&lt;/strong&gt;上应用策略。&lt;/p&gt;
&lt;p&gt;例如，若将所有策略都设置在 Waypoint 上，则直接访问工作负载的流量将绕过策略。而对于公开访问的服务，策略可能已在网关处执行。为了避免重复处理，&lt;a href=&#34;https://ambientmesh.io/docs/traffic/gateways/#gateways-and-waypoints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;默认情况下 Gateway 会直接将流量转发给服务&lt;/a&gt;，绕过 Waypoint。&lt;/p&gt;
&lt;p&gt;因此，推荐的做法是：在 ztunnel 上定义“基础设施策略”，强制使用 Waypoint，然后在 Waypoint 或 Gateway 上定义“应用层策略”。&lt;/p&gt;
&lt;h3 id=&#34;策略的作用目标与绑定&#34;&gt;策略的作用目标与绑定&lt;/h3&gt;
&lt;p&gt;上面的示意图未涉及实际场景中工作负载与 waypoint 实例的多副本情况。我们在写策略时，需要明确它的作用目标：即它是对哪个服务或工作负载生效。&lt;/p&gt;
&lt;p&gt;Istio 会自动将策略绑定到正确的代理上：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f3_hu_72aaf51948e34e94.webp 400w,
               /blog/ambient-mesh-authorization-policy/f3_hu_bc5544521b8c41dc.webp 760w,
               /blog/ambient-mesh-authorization-policy/f3_hu_e1317dbbf2760728.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f3_hu_72aaf51948e34e94.webp&#34;
               width=&#34;760&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果策略由 ztunnel 执行，你可以通过指定 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 所在的 namespace 和 label selector 选择其作用的工作负载。这类似于 Kubernetes 的 NetworkPolicy，或 Istio sidecar 模式下的策略绑定方式：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;应用对象&lt;/th&gt;
          &lt;th&gt;Namespace&lt;/th&gt;
          &lt;th&gt;Selector&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;网格中所有工作负载&lt;/td&gt;
          &lt;td&gt;istio-system&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;default 命名空间下的所有工作负载&lt;/td&gt;
          &lt;td&gt;default&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;匹配特定标签的工作负载&lt;/td&gt;
          &lt;td&gt;任意命名空间&lt;/td&gt;
          &lt;td&gt;matchLabels&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;而 Waypoint 使用 Kubernetes Gateway API 配置，策略通过 &lt;code&gt;targetRefs&lt;/code&gt; 字段&lt;a href=&#34;https://ambientmesh.io/docs/setup/configure-waypoints/#attach-policies-and-routes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;绑定到 Gateway&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么 Waypoint 使用不同的绑定方式？&lt;/strong&gt;
使用不同的绑定方式可以明确区分不同层级的策略含义，而 &lt;code&gt;targetRefs&lt;/code&gt; 遵循了 Kubernetes Gateway API 的语义。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;请注意，我们并未直接使用“L4 策略”或“L7 策略”的说法，因为 Waypoint 也可以执行 L4 策略。后文将说明为什么你可能希望这么做。&lt;/p&gt;
&lt;h3 id=&#34;访问控制的基础&#34;&gt;访问控制的基础&lt;/h3&gt;
&lt;p&gt;如果某个工作负载没有配置任何授权策略，则默认允许所有访问。一旦存在至少一个包含 &lt;code&gt;ALLOW&lt;/code&gt; 操作的策略，则&lt;strong&gt;所有未匹配任何 &lt;code&gt;ALLOW&lt;/code&gt; 的流量都会被拒绝&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这点非常重要。例如，你允许来自 Gateway 的流量访问某工作负载，后来引入了 Waypoint，则来自 Waypoint 的流量将会被拒绝，除非你更新策略。&lt;/p&gt;
&lt;h3 id=&#34;使用-ztunnel-强制执行策略&#34;&gt;使用 ztunnel 强制执行策略&lt;/h3&gt;
&lt;p&gt;在很多场景下，不部署 Waypoint，仅使用 Ambient Mesh 的 &lt;em&gt;安全叠加层（secure overlay layer）&lt;/em&gt; 是合理的选择。Istio 的 L4 属性（IP、端口、命名空间、身份主体）即可用于授权策略。&lt;/p&gt;
&lt;p&gt;这使得我们能实现最小权限的微分段：即仅允许必要的服务之间互相通信。当某个服务被攻破时，攻击流量也会携带其真实身份。例如，图像处理服务无权访问支付服务后端，可以轻松通过策略限制这种访问。&lt;/p&gt;
&lt;h3 id=&#34;非法策略属性与拒绝流量&#34;&gt;非法策略属性与拒绝流量&lt;/h3&gt;
&lt;p&gt;前面提到，L4 策略属性可以用于 ztunnel 绑定的策略。你甚至可以复用 Istio sidecar 模式下的策略到 ambient 模式中，其中可能包含 L7 属性（如 HTTP 方法或路径）。但由于 ztunnel 无法识别 L7 属性，会发生什么呢？&lt;/p&gt;
&lt;p&gt;简而言之：&lt;strong&gt;ztunnel 会安全失败（fail-safe）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于包含 L7 属性的 &lt;code&gt;DENY&lt;/code&gt; 策略：忽略 L7 部分，仅保留其余部分。&lt;/li&gt;
&lt;li&gt;对于包含 L7 属性的 &lt;code&gt;ALLOW&lt;/code&gt; 策略：L7 匹配规则会被移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样做的结果比原策略更严格。因为只要有 &lt;code&gt;ALLOW&lt;/code&gt; 策略存在，未被匹配的流量就会被默认拒绝。所以最终结果是，所有流量都匹配默认拒绝规则。&lt;/p&gt;
&lt;h3 id=&#34;引入-waypoint-的策略执行&#34;&gt;引入 Waypoint 的策略执行&lt;/h3&gt;
&lt;p&gt;绑定在 Waypoint 与 ztunnel 上的策略存在两个主要区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;targetRefs&lt;/code&gt; 替代 selector；&lt;/li&gt;
&lt;li&gt;支持 L7 属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你将某个工作负载配置为使用 Waypoint 后，它就成为了该工作负载最合适的策略执行位置，即使仅是执行 L4 策略。原因在于 Ambient 模式下的身份工作机制：&lt;/p&gt;
&lt;p&gt;工作负载间的 mTLS 通信是由两端的 ztunnel 管理的：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f4_hu_b31bb5181e403d4f.webp 400w,
               /blog/ambient-mesh-authorization-policy/f4_hu_b9a8b9e01cea2b70.webp 760w,
               /blog/ambient-mesh-authorization-policy/f4_hu_5ef274a3335ee58a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f4_hu_b31bb5181e403d4f.webp&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了让 Waypoint 能够解密和检查流量，它必须终止原有的 mTLS，重新发起一次连接：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f5_hu_bddfcbe26157fcf.webp 400w,
               /blog/ambient-mesh-authorization-policy/f5_hu_393ba6007e31457f.webp 760w,
               /blog/ambient-mesh-authorization-policy/f5_hu_800904b04429a1ce.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f5_hu_bddfcbe26157fcf.webp&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这意味着，服务器端 ztunnel 所见到的源身份是 &lt;strong&gt;Waypoint 的身份&lt;/strong&gt;，而非原始客户端。如果你希望根据真实源身份做出策略判断，策略应部署在 Waypoint 上。&lt;/p&gt;
&lt;h3 id=&#34;只允许来自-waypoint-的连接&#34;&gt;只允许来自 Waypoint 的连接&lt;/h3&gt;
&lt;p&gt;为了确保策略真正通过 Waypoint 执行，必须防止流量绕过 Waypoint。默认情况下，Ambient Mesh 会自动将服务流量路由到 Waypoint，但服务端的 ztunnel 仍接受来自任何客户端的连接。&lt;/p&gt;
&lt;p&gt;某些场景下这没问题，比如 Prometheus 采集某个 Pod 的 metrics，通常是直接连接，而不经过 Waypoint。&lt;/p&gt;
&lt;p&gt;若你需要阻止其他流量，应在 ztunnel 上定义策略，只&lt;a href=&#34;https://ambientmesh.io/docs/security/waypoint-authz/#restricting-workloads-to-only-accept-traffic-from-waypoints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;允许来自指定 Waypoint 的连接&lt;/a&gt;。必要时可&lt;a href=&#34;https://ambientmesh.io/docs/security/waypoint-authz/#exceptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加例外&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio Ambient 模式使用 Waypoint 代理简化 Istio 部署</title>
      <link>https://cloudnativecn.com/blog/waypoint-proxy-made-simple/</link>
      <pubDate>Tue, 04 Apr 2023 08:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/waypoint-proxy-made-simple/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;译者注：本文介绍了 Istio 的新的目的地导向的 waypoint 代理，它可以简化和扩展 Istio 的功能。文章介绍了 waypoint 代理的架构，部署方式，以及如何将源代理的配置转移到目的地代理，从而提高可扩展性，可调试性，一致性和安全性。文章还展示了如何使用 Istio 的策略和遥测来管理和监控 waypoint 代理。文章的来源是 Istio 官方博客。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ambient 将 Istio 的功能分为两个不同的层，一个安全覆盖层和一个七层流量处理层。Waypoint 代理是一个可选组件，它基于 Envoy 并为其管理的工作负载进行七层流量处理。自 2022 年&lt;a href=&#34;https://istio.io/latest/blog/2022/introducing-ambient-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;首次启动 Ambient&lt;/a&gt; 以来，我们进行了重大更改以简化路点配置、可调试性和可扩展性。&lt;/p&gt;
&lt;h2 id=&#34;waypoint-代理的架构&#34;&gt;Waypoint 代理的架构&lt;/h2&gt;
&lt;p&gt;与 sidecar 类似，waypoint 代理也是基于 Envoy 的，由 Istio 动态配置以服务于您的应用程序。Waypoint 代理的独特之处在于它运行每个命名空间（默认）或每个服务账户。通过在应用程序 pod 之外运行，waypoint 代理可以独立于应用程序安装、升级和扩展，并降低运营成本。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-waypoint-代理架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Waypoint 代理架构&#34; srcset=&#34;
               /blog/waypoint-proxy-made-simple/waypoint-architecture_hu_c8dcee4b7bddcbd1.webp 400w,
               /blog/waypoint-proxy-made-simple/waypoint-architecture_hu_7e93c705330ffbcd.webp 760w,
               /blog/waypoint-proxy-made-simple/waypoint-architecture_hu_e8d5ef2b6871855b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/waypoint-proxy-made-simple/waypoint-architecture_hu_c8dcee4b7bddcbd1.webp&#34;
               width=&#34;760&#34;
               height=&#34;333&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Waypoint 代理架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用 Kubernetes Gateway 资源或 &lt;code&gt;istioctl&lt;/code&gt; 命令以声明方式部署 waypoint 代理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl experimental waypoint generate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apiVersion: gateway.networking.k8s.io/v1beta1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kind: Gateway
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  name: namespace
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  gatewayClassName: istio-waypoint
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  listeners:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  - name: mesh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    port: &lt;span class=&#34;m&#34;&gt;15008&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    protocol: HBONE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Istiod 将监控这些资源并自动为用户部署和管理相应的 waypoint 部署。&lt;/p&gt;
&lt;h2 id=&#34;将源代理配置转移到目标代理&#34;&gt;将源代理配置转移到目标代理&lt;/h2&gt;
&lt;p&gt;在现有的 sidecar 架构中，大多数流量整形（例如&lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/request-routing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请求路由&lt;/a&gt;或&lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/traffic-shifting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;流量转移&lt;/a&gt;或&lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/fault-injection/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;故障注入&lt;/a&gt;）策略由源（客户端）代理实现，而大多数安全策略由目标（服务器）代理实现。这导致了一些担忧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缩放 —— 每个源 sidecar 都需要知道关于网格中每个其他目的地的信息。这是一个多项式缩放问题。更糟糕的是，如果任何目标配置发生变化，我们需要立即通知所有 sidecar。&lt;/li&gt;
&lt;li&gt;调试 —— 因为策略执行在客户端和服务器 sidecar 之间分开，所以在故障排除时很难理解系统的行为。&lt;/li&gt;
&lt;li&gt;混合环境 —— 如果我们的系统不是所有客户端都是网格的一部分，我们就会得到不一致的行为。例如，非网格客户端不会遵守金丝雀部署策略，从而导致意外的流量分配。&lt;/li&gt;
&lt;li&gt;所有权和归属 —— 理想情况下，在一个命名空间中编写的策略应该只影响在同一命名空间中运行的代理。然而，在这个模型中，它是由每个 sidecar 分发和执行的。尽管 Istio 已围绕此约束进行设计以确保其安全，但它仍然不是最佳选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Ambient 中，所有策略都由目的地 waypoint 代理强制执行。在许多方面，waypoint 充当进入命名空间（默认范围）或服务账户的网关。Istio 强制所有进入命名空间的流量都经过 waypoint，然后该 waypoint 执行该命名空间的所有策略。因此，每个 waypoint 只需要了解其自己命名空间的配置。&lt;/p&gt;
&lt;p&gt;可扩展性问题对于在大型集群中运行的用户来说尤其麻烦。如果我们将其可视化，我们可以看到新架构的改进有多大。&lt;/p&gt;
&lt;p&gt;考虑一个简单的部署，我们有 2 个命名空间，每个命名空间有 2 个（颜色编码）部署。对 sidecar 进行编程所需的 Envoy (XDS) 配置显示为圆圈：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-每个-sidecar-都有关于所有其他-sidecar-的配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;每个 sidecar 都有关于所有其他 sidecar 的配置&#34; srcset=&#34;
               /blog/waypoint-proxy-made-simple/sidecar-config_hu_d4af6fdec18b774b.webp 400w,
               /blog/waypoint-proxy-made-simple/sidecar-config_hu_ff96c3579390f163.webp 760w,
               /blog/waypoint-proxy-made-simple/sidecar-config_hu_2d1db116a4b9945c.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/waypoint-proxy-made-simple/sidecar-config_hu_d4af6fdec18b774b.webp&#34;
               width=&#34;753&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      每个 sidecar 都有关于所有其他 sidecar 的配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在 sidecar 模型中，我们有 4 个工作负载，每个工作负载有 4 组配置。如果这些配置中的任何一个发生更改，则所有这些配置都需要更新。总共有 16 个配置分布。&lt;/p&gt;
&lt;p&gt;然而，在 waypoint 架构中，配置得到了极大的简化：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-每个-waypoint-只有自己的命名空间的配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;每个 waypoint 只有自己的命名空间的配置&#34; srcset=&#34;
               /blog/waypoint-proxy-made-simple/waypoint-config_hu_1f0701be3a718e3f.webp 400w,
               /blog/waypoint-proxy-made-simple/waypoint-config_hu_85b207f8fe33452e.webp 760w,
               /blog/waypoint-proxy-made-simple/waypoint-config_hu_3639d77110b334aa.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/waypoint-proxy-made-simple/waypoint-config_hu_1f0701be3a718e3f.webp&#34;
               width=&#34;760&#34;
               height=&#34;456&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      每个 waypoint 只有自己的命名空间的配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这里，我们看到了一个截然不同的故事。我们只有 2 个 waypoint 代理，因为每个代理都能够为整个命名空间提供服务，并且每个代理只需要为自己的命名空间进行配置。总的来说，我们发送了 25% 的配置，即使是一个简单的例子。&lt;/p&gt;
&lt;p&gt;如果我们将每个命名空间扩展到最多 25 个部署，每个部署有 10 个 pod，每个 waypoint 部署有 2 个 pod 以实现高可用性，这些数字会更令人印象深刻 —— waypoint 配置分布只需要 sidecar 配置分布的 0.8%，如表下面说明！&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;配置分发&lt;/th&gt;
          &lt;th&gt;命名空间 1&lt;/th&gt;
          &lt;th&gt;命名空间 2&lt;/th&gt;
          &lt;th&gt;总数&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Sidecar&lt;/td&gt;
          &lt;td&gt;25 种配置 * 250 个 sidecar&lt;/td&gt;
          &lt;td&gt;25 种配置 * 250 个 sidecar&lt;/td&gt;
          &lt;td&gt;12500&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Waypoint&lt;/td&gt;
          &lt;td&gt;25 种配置 * 2 个 waypoint&lt;/td&gt;
          &lt;td&gt;25 种配置 * 2 个 waypoint&lt;/td&gt;
          &lt;td&gt;100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Waypoint/Sidecar&lt;/td&gt;
          &lt;td&gt;0.8%&lt;/td&gt;
          &lt;td&gt;0.8%&lt;/td&gt;
          &lt;td&gt;0.8%&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;虽然我们使用命名空间范围的 waypoint 代理来说明上面的简化，但当您将其应用于服务账户 waypoint 代理时，简化是相似的。&lt;/p&gt;
&lt;p&gt;这种减少的配置意味着控制平面和数据平面的资源使用率（CPU、RAM 和网络带宽）较低。虽然今天的用户可以通过谨慎使用 &lt;code&gt;exportTo&lt;/code&gt; Istio 网络资源或 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/sidecar/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sidecar&lt;/a&gt; API 看到类似的改进，但在 Ambient 模式下不再需要这样做，从而使扩展变得轻而易举。&lt;/p&gt;
&lt;h2 id=&#34;如果我的目的地没有-waypoint-代理怎么办&#34;&gt;如果我的目的地没有 waypoint 代理怎么办？&lt;/h2&gt;
&lt;p&gt;Ambient 模式的设计围绕这样一个假设，即大多数配置最好由服务生产者而不是服务消费者实施。然而，情况并非总是如此 —— 有时我们需要为我们无法控制的目的地配置流量管理。一个常见的例子是连接到具有更高弹性的外部服务，以处理偶尔的连接问题（例如，为 &lt;code&gt;example.com&lt;/code&gt; 调用添加超时）。&lt;/p&gt;
&lt;p&gt;这是社区中正在积极开发的一个领域，我们在其中设计如何将流量路由到您的出口网关，以及您如何使用所需的策略配置出口网关。留意这方面的未来博客文章！&lt;/p&gt;
&lt;h2 id=&#34;深入了解-waypoint-代理配置&#34;&gt;深入了解 waypoint 代理配置&lt;/h2&gt;
&lt;p&gt;假设您已遵循 &lt;a href=&#34;http://preliminary.istio.io/latest/docs/ops/ambient/getting-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient 入门指南&lt;/a&gt;直至并包括&lt;a href=&#34;http://preliminary.istio.io/latest/docs/ops/ambient/getting-started/#control&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;控制流量部分&lt;/a&gt;，您已经为 bookinfo-reviews 服务账户部署了一个 waypoint 代理，以将 90% 的流量引导至 reviews v1，将 10% 的流量引导至 reviews v2。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;istioctl&lt;/code&gt;检索 &lt;code&gt;reviews&lt;/code&gt; waypoint 代理的监听器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl proxy-config listener deploy/bookinfo-reviews-istio-waypoint --waypoint
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LISTENER              CHAIN                                                 MATCH                                         DESTINATION
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_originate                                                       ALL                                           Cluster: connect_originate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;reviews.default.svc.cluster.local-http  &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.96.104.108 -&amp;gt; &lt;span class=&#34;nv&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;                 Inline Route: /*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-tcp                                            &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.2.14 -&amp;gt; ANY                         Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-tcp                                            &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.1.6 -&amp;gt; ANY                          Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-tcp                                            &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.2.11 -&amp;gt; ANY                         Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-http                                           &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.2.11 -&amp;gt; application-protocol&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;h2c&amp;#39;&lt;/span&gt;  Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-http                                           &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.2.11 -&amp;gt; application-protocol&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http/1.1&amp;#39;&lt;/span&gt; Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-http                                           &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.2.14 -&amp;gt; application-protocol&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http/1.1&amp;#39;&lt;/span&gt; Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-http                                           &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.2.14 -&amp;gt; application-protocol&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;h2c&amp;#39;&lt;/span&gt;  Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-http                                           &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.1.6 -&amp;gt; application-protocol&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;h2c&amp;#39;&lt;/span&gt;   Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal direct-http                                           &lt;span class=&#34;nv&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;10.244.1.6 -&amp;gt; application-protocol&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http/1.1&amp;#39;&lt;/span&gt;  Cluster: encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_terminate default                                               ALL                                           Inline Route:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于到达端口 &lt;code&gt;15008&lt;/code&gt; 的请求，默认为 Istio 的入站 HBONE 端口，waypoint 代理终止 HBONE 连接并将请求转发到 &lt;code&gt;main_internal&lt;/code&gt; 监听器以执行任何工作负载策略，如 AuthorizationPolicy。如果您不熟悉&lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/other_features/internal_listener&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;内部监听器&lt;/a&gt;，它们是 Envoy 监听器，可以接受用户空间连接，而不使用系统网络 API。以上添加到 &lt;code&gt;istioctl proxy-config&lt;/code&gt; 命令的 &lt;code&gt;--waypoint&lt;/code&gt; 标志指示它显示 &lt;code&gt;main_internal&lt;/code&gt; 监听器的详细信息、其过滤器链、链匹配和目标。&lt;/p&gt;
&lt;p&gt;注意 &lt;code&gt;10.96.104.108&lt;/code&gt; 是 reviews 服务 VIP，而 &lt;code&gt;10.244.x.x&lt;/code&gt; 是 reviews v1/v2/v3 pod IP，您可以使用 &lt;code&gt;kubectl get svc,pod -o wide&lt;/code&gt; 命令查看集群。对于纯文本或 HBONE 终止的入站流量，它将匹配服务 VIP 和端口 9080 以供 reviews 使用，或者通过 pod IP 地址和应用程序协议（ANY、h2c 或 http/1.1）。&lt;/p&gt;
&lt;p&gt;检查 reviews waypoint 代理的集群，您会得到 &lt;code&gt;main_internal&lt;/code&gt; 集群以及一些入站集群。除了基础架构的集群之外，创建的唯一 Envoy 集群是运行在同一服务账户中的服务和 pod 的集群。没有为其他地方运行的服务或 pod 创建集群。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl proxy-config clusters deploy/bookinfo-reviews-istio-waypoint
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SERVICE FQDN                         PORT SUBSET  DIRECTION   TYPE         DESTINATION RULE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;agent                                -    -       -           STATIC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;connect_originate                    -    -       -           ORIGINAL_DST
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;encap                                -    -       -           STATIC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubernetes.default.svc.cluster.local &lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;  tcp     inbound-vip EDS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;main_internal                        -    -       -           STATIC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prometheus_stats                     -    -       -           STATIC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;reviews.default.svc.cluster.local    &lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt; http    inbound-vip EDS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;reviews.default.svc.cluster.local    &lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt; http/v1 inbound-vip EDS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;reviews.default.svc.cluster.local    &lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt; http/v2 inbound-vip EDS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;reviews.default.svc.cluster.local    &lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt; http/v3 inbound-vip EDS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sds-grpc                             -    -       -           STATIC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xds-grpc                             -    -       -           STATIC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;zipkin                               -    -       -           STRICT_DNS
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意列表中没有 &lt;code&gt;outbound&lt;/code&gt; 集群，您可以使用 &lt;code&gt;istioctl proxy-config cluster deploy/bookinfo-reviews-istio-waypoint --direction outbound&lt;/code&gt; 进行确认！很好的一点是，您不需要在任何其他 bookinfo 服务（例如&lt;code&gt;productpage&lt;/code&gt; 或 &lt;code&gt;ratings&lt;/code&gt; 服务）上配置 &lt;code&gt;exportTo&lt;/code&gt;。换句话说，&lt;code&gt;reviews&lt;/code&gt; waypoint 不会意识到任何不必要的集群，而您不需要进行任何额外的手动配置。&lt;/p&gt;
&lt;p&gt;显示 &lt;code&gt;reviews&lt;/code&gt; waypoint 代理的路由列表：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl proxy-config routes deploy/bookinfo-reviews-istio-waypoint
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                                    DOMAINS MATCH              VIRTUAL SERVICE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;encap                                                   *       /*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local *       /*                 reviews.default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;default
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;回顾下，您没有配置任何 sidecar 资源或 Istio 网络资源上的 &lt;code&gt;exportTo&lt;/code&gt; 配置。但是，您部署了 &lt;code&gt;bookinfo-productpage&lt;/code&gt; 路由来配置入口网关以路由到 productpage，但 reviews waypoint 没有意识到任何此类不相关的路由。&lt;/p&gt;
&lt;p&gt;显示 &lt;code&gt;inbound-vip|9080|http|reviews.default.svc.cluster.local&lt;/code&gt; 路由的详细信息，您会看到基于权重的路由配置将 90％的流量定向到 &lt;code&gt;reviews&lt;/code&gt; v1，将 10％的流量定向到 &lt;code&gt;reviews&lt;/code&gt; v2，以及一些 Istio 的默认重试和超时配置。这证实了之前讨论的流量和弹性策略从源头转移到目标导向的 waypoint。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl proxy-config routes deploy/bookinfo-reviews-istio-waypoint --name &lt;span class=&#34;s2&#34;&gt;&amp;#34;inbound-vip|9080|http|reviews.default.svc.cluster.local&amp;#34;&lt;/span&gt; -o yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;- name: inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; validateClusters: &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; virtualHosts:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; - domains:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   - &lt;span class=&#34;s1&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   name: inbound&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   routes:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   - decorator:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       operation: reviews:9080/*
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     match:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       prefix: /
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     metadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       filterMetadata:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         istio:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           config: /apis/networking.istio.io/v1alpha3/namespaces/default/virtual-service/reviews
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     route:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       maxGrpcTimeout: 0s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       retryPolicy:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         hostSelectionRetryMaxAttempts: &lt;span class=&#34;s2&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         numRetries: &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         retriableStatusCodes:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         - &lt;span class=&#34;m&#34;&gt;503&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         retryHostPredicate:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         - name: envoy.retry_host_predicates.previous_hosts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           typedConfig:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &lt;span class=&#34;s1&#34;&gt;&amp;#39;@type&amp;#39;&lt;/span&gt;: type.googleapis.com/envoy.extensions.retry.host.previous_hosts.v3.PreviousHostsPredicate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         retryOn: connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       timeout: 0s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       weightedClusters:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         clusters:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         - name: inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http/v1&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           weight: &lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         - name: inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http/v2&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;           weight: &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查&lt;code&gt;reviews&lt;/code&gt; waypoint 代理的端点：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ istioctl proxy-config endpoints deploy/bookinfo-reviews-istio-waypoint
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ENDPOINT                                            STATUS  OUTLIER CHECK CLUSTER
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:15000                                     HEALTHY OK            prometheus_stats
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;127.0.0.1:15020                                     HEALTHY OK            agent
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_originate/                          HEALTHY OK            encap
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_originate/10.244.1.6:9080           HEALTHY OK            inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http/v2&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_originate/10.244.1.6:9080           HEALTHY OK            inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_originate/10.244.2.11:9080          HEALTHY OK            inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http/v1&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_originate/10.244.2.11:9080          HEALTHY OK            inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_originate/10.244.2.14:9080          HEALTHY OK            inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http/v3&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://connect_originate/10.244.2.14:9080          HEALTHY OK            inbound-vip&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;9080&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;http&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;reviews.default.svc.cluster.local
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy://main_internal/                              HEALTHY OK            main_internal
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;unix://./etc/istio/proxy/XDS                        HEALTHY OK            xds-grpc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;unix://./var/run/secrets/workload-spiffe-uds/socket HEALTHY OK            sds-grpc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，您不会获得与 reviews 以外的任何服务相关的任何端点，即使您在 &lt;code&gt;default&lt;/code&gt; 和 &lt;code&gt;istio-system&lt;/code&gt; 命名空间中还有一些其他服务。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;我们对专注于面向目的地的 waypoint 代理的简化感到非常兴奋。这是朝着简化 Istio 的可用性、可扩展性和可调试性迈出的又一重要步骤，这些是 Istio 路线图上的重中之重。按照我们的&lt;a href=&#34;http://preliminary.istio.io/latest/docs/ops/ambient/getting-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入门指南&lt;/a&gt;立即尝试环境 alpha 构建并体验简化的 waypoint 代理！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
