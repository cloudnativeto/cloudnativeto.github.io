<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cilium | 云原生社区（中国）</title>
    <link>https://cloudnative.to/tag/cilium/</link>
      <atom:link href="https://cloudnative.to/tag/cilium/index.xml" rel="self" type="application/rss+xml" />
    <description>Cilium</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Tue, 30 Jan 2024 08:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>Cilium</title>
      <link>https://cloudnative.to/tag/cilium/</link>
    </image>
    
    <item>
      <title>使用 Cilium 和 BGP 为 Kubernetes 服务进行负载均衡</title>
      <link>https://cloudnative.to/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/</link>
      <pubDate>Tue, 30 Jan 2024 08:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://sue.eu/blogs/expose-loadbalanced-kubernetes-services-with-bgp-cilium/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Exposing Load-Balanced Kubernetes Services with Cilium&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Cilium 是一个开源项目，旨在为云原生环境提供网络、安全和可观测性，例如 Kubernetes 集群和其他容器编排平台。本博客展示了如何使用 Cilium 和 BGP 将您的 Kubernetes 服务暴露给外部世界。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP&lt;/strong&gt;
边界网关协议（BGP）是一种标准化的外部网关协议，旨在在互联网上的自治系统（AS）之间交换路由和可达性信息。该协议被分类为路径矢量协议，因此它根据由网络管理员配置的路径、网络策略或规则集来做出路由决策。它参与制定核心路由决策，这使得它对互联网的正常运行至关重要。&lt;/p&gt;
&lt;p&gt;BGP 专为健壮性和可扩展性而开发，用于在大型网络之间路由数据，包括 ISP 和其他大型组织。它确保了无环的域间路由，并有助于维护稳定的网络结构。BGP 可以处理数千个路由，并以其随着网络增长而扩展的能力而脱颖而出。由于其灵活性和对路由策略的控制，它被广泛使用，使其能够快速响应网络变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cilium 和 BGP&lt;/strong&gt;
在版本 1.10 中，Cilium 集成了对 MetalLB 的 BGP 支持，从而使其能够宣布 Kubernetes 服务的 IP 地址类型为&lt;a href=&#34;https://sue.eu/insights/bgp-load-balancing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 BGP 的 LoadBalancer&lt;/a&gt;。其结果是，服务可以从 Kubernetes 网络外部访问，无需额外的组件，例如 Ingress 路由器。特别是“无需额外组件”的部分是令人振奋的消息，因为每个组件都会增加延迟，因此没有额外组件会减少延迟。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_huc0027cec4f219049b7ce0f71ae3f2ecf_58915_e9508363f941d33ea815829d8a81f4f7.webp 400w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_huc0027cec4f219049b7ce0f71ae3f2ecf_58915_d2fa46e6b5f134b26e9f0afabedf2557.webp 760w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_huc0027cec4f219049b7ce0f71ae3f2ecf_58915_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_huc0027cec4f219049b7ce0f71ae3f2ecf_58915_e9508363f941d33ea815829d8a81f4f7.webp&#34;
               width=&#34;760&#34;
               height=&#34;664&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;此示例中显示的网络配置代表了具有用于服务负载均衡的 BGP 集成的基于 Kubernetes 的环境。以下是配置的详细信息：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端网络（LAN 网络）：&lt;/strong&gt; 存在一个具有 IP 范围 192.168.10.0/24 的本地区域网络（LAN），连接了多个客户端。该网络包含了设置的用户端，用户和其他设备可以在其中访问托管在 Kubernetes 集群上的服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes 网络：&lt;/strong&gt; Kubernetes 集群具有自己的网络空间，由子网 192.168.1.0/24 指定。该网络包括 Kubernetes 主节点（k8s-master1）和多个工作节点（从 k8s-worker1 到 k8s-worker5）。这些节点托管了 Kubernetes 集群的实际容器和工作负载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管理网络：&lt;/strong&gt; 一个独立的管理网络，至少有一个设备（k8s-control）用于控制和管理 Kubernetes 集群。这与 Kubernetes 数据平面分开，以确保安全性和管理效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP 路由器：&lt;/strong&gt; bgp-router1 桥接了外部网络/互联网和 Kubernetes 网络。它负责使用 BGP 来广播路由将流量路由到 Kubernetes 集群中的适当服务。IP 范围 172.16.10.0/24 保留供 Kubernetes 集群内的 LoadBalancer 服务使用。当将 Kubernetes 服务公开为 LoadBalancer 时，它会分配一个来自此池的 IP 地址。然后，BGP 路由器将此 IP 广播到外部网络，从而使流量路由到 LoadBalancer 服务。&lt;/p&gt;
&lt;p&gt;此网络配置允许通过利用 BGP 进行 IP 地址管理和路由来实现运行在 Kubernetes 集群上的服务的可扩展和灵活的负载均衡。它将客户端访问、集群管理和服务流量分别分隔到不同的网络中，以进行组织和安全性目的。&lt;/p&gt;
&lt;h2 id=&#34;暴露服务&#34;&gt;暴露服务&lt;/h2&gt;
&lt;p&gt;一旦构建了上述基础架构，就可以创建一个部署并使用 BGP 将其暴露给网络。让我们从一个部署开始，其中包含一个简单的 NGINX Web 服务器，提供默认的 Web 页面。我们还添加了一个类型为 LoadBalancer 的 Service。这将导致使用 BGP 向我们的路由器宣布外部 IP 地址。&lt;/p&gt;
&lt;p&gt;一旦构建完成，命令 &lt;code&gt;kubectl get svc&lt;/code&gt; 显示我们的服务具有外部 IP 地址：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NAME          TYPE           CLUSTER-IP       EXTERNAL-IP       PORT(S)         AGE
kubernetes    ClusterIP      10.96.0.1        &amp;lt;none&amp;gt;            443/TCP         7d3h
web1-lb       LoadBalancer   10.106.236.120   172.16.10.0       80:30256/TCP    7d2h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;172.16.10.0 这个地址看起来很奇怪，但没问题。通常会跳过.0 地址，而使用.1 地址作为第一个地址。其中一个原因是在早期，.0 地址用于广播，后来改为.255。由于.0 仍然是一个有效的地址，负责地址池的 MetalLB 会将其分配为第一个地址。在路由器 bgp-router1 上运行的命令 &lt;code&gt;vtysh -c &#39;show bgp summary&#39;&lt;/code&gt; 显示它已接收到一个前缀：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;IPv4 Unicast Summary:
BGP router identifier 192.168.1.1, local AS number 64512 vrf-id 0
BGP table version 17
RIB entries 1, using 192 bytes of memory
Peers 6, using 128 KiB of memoryNeighbour V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt
192.168.1.10 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.21 4 64512 446 435 0 0 0 03:36:54 1 0
192.168.1.22 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.23 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.24 4 64512 446 435 0 0 0 03:36:56 1 0
192.168.1.25 4 64512 445 435 0 0 0 03:36:56 1 0

Total number of neighbors 6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;路由表的以下片段（ip route）告诉我们，对于特定的 IP 地址 172.16.10.0，存在 6 个可能的路由/目标。换句话说，所有 Kubernetes 节点都宣布它们正在处理该地址的流量。太棒了！！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;172.16.10.0 proto bgp metric 20
nexthop via 192.168.1.10 dev enp7s0 weight 1
nexthop via 192.168.1.21 dev enp7s0 weight 1
nexthop via 192.168.1.22 dev enp7s0 weight 1
nexthop via 192.168.1.23 dev enp7s0 weight 1
nexthop via 192.168.1.24 dev enp7s0 weight 1
nexthop via 192.168.1.25 dev enp7s0 weight 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上，现在从我们的路由器上可以看到 Web 页面。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -s -v http://172.16.10.0/ -o /dev/null

* Trying 172.16.10.0…
* TCP_NODELAY set
* Connected to 172.16.10.0 (172.16.10.0) port 80 (#0)
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: 172.16.10.0
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Accept: */*
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Server: nginx/1.21.3
&amp;lt; Date: Sun, 31 Oct 2023 14:19:17 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: 615
&amp;lt; Last-Modified: Tue, 07 Sep 2023 15:21:03 GMT
&amp;lt; Connection: keep-alive
&amp;lt; ETag: “6137835f-267”
&amp;lt; Accept-Ranges: bytes&amp;gt;
{ [615 bytes data]}
* Connection #0 to host 172.16.10.0 left intact
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而且，位于我们客户端网络中的客户端也可以访问相同的页面，因为它使用 bgp-router1 作为默认路由。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hua74f243ba1f8352a252e4c249554adf9_22316_a34b33f199ed3462392168857cdbb324.webp 400w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hua74f243ba1f8352a252e4c249554adf9_22316_f1cf7bfd3ddab8fd2765ce60fe39d377.webp 760w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hua74f243ba1f8352a252e4c249554adf9_22316_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hua74f243ba1f8352a252e4c249554adf9_22316_a34b33f199ed3462392168857cdbb324.webp&#34;
               width=&#34;598&#34;
               height=&#34;345&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;更多细节&#34;&gt;更多细节&lt;/h2&gt;
&lt;p&gt;现在一切都运作正常，大多数工程师都想看到更多细节，所以我不会让你失望。&lt;/p&gt;
&lt;h3 id=&#34;ping&#34;&gt;Ping&lt;/h3&gt;
&lt;p&gt;你将注意到的第一件事是，LoadBalancer 的 IP 地址无法通过 ping 访问。深入挖掘一下可以揭示原因。我们创建了源端口 80 和目标端口 80 之间的映射。此映射在接口上使用 eBPF 逻辑执行，并存在于所有节点上。此映射确保只有端口 80 的流量被均衡。所有其他流量，包括 ping，都不被接收。这就是为什么你可以看到 icmp 数据包到达节点，但从未发送响应的原因。&lt;/p&gt;
&lt;h3 id=&#34;观察流量&#34;&gt;观察流量&lt;/h3&gt;
&lt;p&gt;Hubble 是建立在 eBPF 和 Cilium 之上的网络和安全性可观测平台。通过命令行和图形 Web GUI，可以查看当前和历史流量。在这个示例中，Hubble 放置在 k8s-control 节点上，该节点直接访问 Hubble Relay 的 API。Hubble Relay 是从 Cilium 节点获取所需信息的组件。请注意，Hubble 命令也存在于每个 Cilium 代理 Pod 中，但那个命令只会显示特定代理的信息！以下输出显示了从路由器上执行 curl http://172.16.10.0/ 命令后的观察者信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hubble observe –namespace default –follow

Oct 31 15:43:41.382: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: SYN)
Oct 31 15:43:41.384: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.384: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:43:41.385: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.385: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.386: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:43:41.386: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之前，我警告过不要在 Cilium 代理 Pod 内使用 hubble 命令，但在特定节点流量中看到具体的情况也可以非常有信息价值。在这种情况下，每个 Cilium 代理 Pod 中都执行了 &lt;code&gt;hubble observe –namespace default –follow&lt;/code&gt;，并且路由器的 curl 执行了一次。&lt;/p&gt;
&lt;p&gt;在托管 Pod 的节点（k8s-worker2）上，我们看到与上面的输出相同的输出。但是，在另一个 Pod（k8s-worker1）上，我们看到以下输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Oct 31 15:56:05.220: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: SYN)
Oct 31 15:56:05.220: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: SYN, ACK)
Oct 31 15:56:05.220: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:05.221: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:05.221: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:05.222: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:05.222: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:05.222: 10.0.3.103:48278 -&amp;gt; default/web1

-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:12.739: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: SYN)
Oct 31 15:56:12.739: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: SYN, ACK)
Oct 31 15:56:12.742: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:12.742: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:12.745: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:12.749: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:12.749: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: ACK, FIN)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在这里看到的是，我们的路由器将 IP 地址 172.16.10.0 的流量发送到 k8s-worker1，但该工作节点不托管我们的 web1 容器，因此它将流量转发到处理流量的 k8s-worker2。所有的转发逻辑都使用 eBPF 处理 - 附加到接口的一个小的 BPF 程序将在需要时发送流量和路由到另一个工作节点。这也是为什么在 k8s-worker1 上运行 tcpdump，初始接收到流量的地方，不会显示任何流量的原因。它已经在进入 k8s-worker1 的 IP 堆栈之前被重定向到 k8s-worker2。&lt;/p&gt;
&lt;p&gt;我们的合作伙伴 &lt;a href=&#34;https://docs.cilium.io/en/stable/network/ebpf/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Isovalent&lt;/a&gt; 有很多关于 eBPF 和内部工作原理的信息。如果你还没有听说过 eBPF，而且你对 Linux 和/或网络感兴趣，请务必探索一下基础知识。在我看来，eBPF 将在不久的将来彻底改变 Linux 的网络，特别是对于云原生环境！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium.io &lt;/a&gt;上有很多关于 eBPF 和内部工作原理的信息。如果你还没有听说过 eBPF，而且你对 Linux 和/或网络感兴趣，请务必了解至少基础知识。在我看来，eBPF 将在不久的将来彻底改变 Linux 的网络，特别是对于云原生环境！&lt;/p&gt;
&lt;h3 id=&#34;hubble-web-gui&#34;&gt;Hubble Web GUI&lt;/h3&gt;
&lt;p&gt;通过一个工作正常的 BGP 设置，使 Hubble Web GUI 对外界也很简单。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu19c8bc06258ac49725e20a7cd729c9d4_62707_6ff2e45ed4bea9ab3277fd153bd684b9.webp 400w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu19c8bc06258ac49725e20a7cd729c9d4_62707_e7e30efcb7675aff4d369788eaedfec8.webp 760w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu19c8bc06258ac49725e20a7cd729c9d4_62707_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu19c8bc06258ac49725e20a7cd729c9d4_62707_6ff2e45ed4bea9ab3277fd153bd684b9.webp&#34;
               width=&#34;760&#34;
               height=&#34;419&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;最后的话&#34;&gt;最后的话&lt;/h2&gt;
&lt;p&gt;通过 MetalLB 的集成，使用 BGP 设置 Cilium 变得非常简单，消除了昂贵的网络硬件的需求。Cilium/BGP 的这种组合，特别是与停用 kube-proxy 结合使用，显著降低了到云端服务的延迟。它还通过仅宣布 LoadBalancer 的 IP 地址来增强安全性和透明性。虽然这种设置不需要 Ingress Controller，但对于大多数 HTTP 服务仍然建议使用一个。像 NGINX 或 Traefik 这样的控制器，通过 BGP 公开，提供协议级别的重写和请求速率限制等重大优势。&lt;/p&gt;
&lt;p&gt;这种云原生和基于 Linux 的网络的进步确实是一个飞跃，标志着网络技术的激动人心的时代！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cilium 的控制平面升级之路：xDS API 的引入与应用</title>
      <link>https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/</link>
      <pubDate>Mon, 29 Jan 2024 20:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/</guid>
      <description>&lt;p&gt;在这篇博客中，我们将探讨当前的 Cilium 控制平面设计，&lt;a href=&#34;https://github.com/cilium/cilium/issues/30283&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大规模部署可能出现的限制的位置和原因&lt;/a&gt;，以及社区如何使用 CNCF 的 &lt;a href=&#34;https://github.com/cncf/xds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;通用数据平面 (xDS) API&lt;/a&gt; 推进这个架构。&lt;/p&gt;
&lt;h2 id=&#34;了解-cilium-的控制平面架构&#34;&gt;了解 Cilium 的控制平面架构&lt;/h2&gt;
&lt;p&gt;Cilium 遵循基于“数据平面”和“控制平面”的常见网络架构。在 Cilium 中，数据平面部署在每个主机（或 Kubernetes 节点）上，包括用于处理 L3/L4 连接和策略的 eBPF 程序。为了简化起见，对于完整性，Cilium 还在其数据平面中使用 Envoy 代理处理 L7 策略，但我们将省略这部分。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/f1_huc884a16806c306e29d90f188177ce15d_29921_66d91fda7e78b167537deb633e8d30e9.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/f1_huc884a16806c306e29d90f188177ce15d_29921_78eeaa04635bf4744a61defc1b20be33.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/f1_huc884a16806c306e29d90f188177ce15d_29921_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/f1_huc884a16806c306e29d90f188177ce15d_29921_66d91fda7e78b167537deb633e8d30e9.webp&#34;
               width=&#34;523&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Cilium 控制平面以 cilium-agent 守护程序的形式实现，部署在每个 Kubernetes 节点上。每个 cilium-agent 都是控制平面的单独、独立的实例。&lt;/p&gt;
&lt;p&gt;cilium-agent 连接到 Kubernetes API 服务器，监视配置更改，然后使用它来配置数据平面。cilium-agent 还将配置写入 Kubernetes API，表示正在其各自节点上创建的端点或标识。&lt;/p&gt;
&lt;p&gt;例如，当在 Kubernetes 节点上启动一个 Pod 时，cilium-agent 负责编写一个 CiliumEndpoint 自定义资源（CR），并可能是一个表示 Pod 网络标识的 CiliumIdentity CR。cilium-agent 还会更新与标识和端点映射相关的节点上的 eBPF 映射。其他 Kubernetes 节点上的 cilium-agent 也会监视这些新的 CiliumEndpoint 和 CiliumIdentity CR 的创建，并更新其本地的 eBPF 数据平面以执行策略。这种机制能够协调每个节点上的全局策略执行配置，以便所有节点看到相同的执行行为。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/f2_hu9bc46edfbf4c7931aa282f5d845e7a5b_99091_900d4c32909bc3c607804b56f7040bff.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/f2_hu9bc46edfbf4c7931aa282f5d845e7a5b_99091_0a657924600adbd81b1e7860463f1878.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/f2_hu9bc46edfbf4c7931aa282f5d845e7a5b_99091_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/f2_hu9bc46edfbf4c7931aa282f5d845e7a5b_99091_900d4c32909bc3c607804b56f7040bff.webp&#34;
               width=&#34;760&#34;
               height=&#34;501&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;构建控制平面的最佳实践&#34;&gt;构建控制平面的最佳实践&lt;/h2&gt;
&lt;p&gt;我们以前 &lt;a href=&#34;https://www.solo.io/blog/building-a-control-plane-for-envoy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;曾多次在博客中&lt;/a&gt; &lt;a href=&#34;https://www.solo.io/blog/guidance-for-building-a-control-plane-for-envoy-part-3-domain-specific-configuration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;讨论过构建&lt;/a&gt; &lt;a href=&#34;https://www.solo.io/blog/why-the-control-plane-matters/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可扩展、安全、高效的控制平面的最佳实践&lt;/a&gt;。在深入研究如何扩展 Cilium 的控制平面之前，我们应该回顾一些这些最佳实践。&lt;/p&gt;
&lt;p&gt;网络架构中的数据平面应该尽可能简单，性能高，以及高效完成它需要做的事情：在本例中，来回传输字节，实施策略，并执行安全性。控制平面的作用是保护数据平面免受复杂性的干扰，以及任何分散数据平面核心任务的事物。&lt;/p&gt;
&lt;p&gt;另一方面，用户需要能够以最适合他们用户体验的形式指定配置和策略。很多时候，通过某种 &lt;a href=&#34;https://www.solo.io/blog/guidance-for-building-a-control-plane-for-envoy-part-3-domain-specific-configuration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;特定领域的配置格式&lt;/a&gt; 来实现。然后需要将这种更高级别的用户配置与基础设施状态相结合，并将其转化为较低级别的数据平面格式。转译是一半的战斗。还需要将较低级别的配置分发到数据平面，并高效地执行。这就是控制平面出现在画面中的地方。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/f3_hu287aa85ed2f8c6a5d0c7f8770bc2f8d7_23325_1cdffca78c3039941b99b59916cd62f7.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/f3_hu287aa85ed2f8c6a5d0c7f8770bc2f8d7_23325_0e45eff1b9317051f43a4e59f38551ef.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/f3_hu287aa85ed2f8c6a5d0c7f8770bc2f8d7_23325_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/f3_hu287aa85ed2f8c6a5d0c7f8770bc2f8d7_23325_1cdffca78c3039941b99b59916cd62f7.webp&#34;
               width=&#34;529&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;控制平面允许配置解耦并与平台的其他部分集成，这些部分随后可以通知数据平面。在许多方面，这个图表与我们构建应用程序时使用的 &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/n-tier&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;三层架构&lt;/a&gt; 类似：表示层，解耦的业务逻辑层和数据存储。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/f4_hu1e09b223e67c243936ca8ec32625a375_17623_73b7e4f6954e07d18c901502d7bff17f.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/f4_hu1e09b223e67c243936ca8ec32625a375_17623_7f60781378fdef9e72709780fc738c13.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/f4_hu1e09b223e67c243936ca8ec32625a375_17623_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/f4_hu1e09b223e67c243936ca8ec32625a375_17623_73b7e4f6954e07d18c901502d7bff17f.webp&#34;
               width=&#34;533&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在网络架构的情况下，控制平面层将处理读取/写入 Kubernetes API 和创建网络标识等敏感数据。由于它是一个单独的层，我们可以对其进行安全和硬化处理，并消除数据平面需要执行这些任务的权限。在许多情况下，虽然开始时更简单，但合并一些层会导致效率低下、安全问题和扩展/耦合问题。&lt;/p&gt;
&lt;h2 id=&#34;cilium-控制平面架构的扩展考虑&#34;&gt;Cilium 控制平面架构的扩展考虑&lt;/h2&gt;
&lt;p&gt;集群中的每个 cilium-agent 负责将全局集群配置更新到其本地数据平面配置。每个 cilium-agent 可能会监视多达 15 种 CRD 类型。&lt;/p&gt;
&lt;p&gt;随着集群在节点、Pod、命名空间和网络策略方面的规模增长，每个 cilium-agent 需要执行的工作量也会增加。为了服务和更新所有这些状态，会对 Kubernetes apiserver 造成压力，可能导致 &lt;a href=&#34;https://github.com/cilium/cilium/issues/29127&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;问题&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/f5_hue7ed0158ce51c9b331ab31adb8afb3a0_126407_7c4022c979fdf6663c38eed8164d448f.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/f5_hue7ed0158ce51c9b331ab31adb8afb3a0_126407_4fe26cb3398c6dc6555b821102581aa7.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/f5_hue7ed0158ce51c9b331ab31adb8afb3a0_126407_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/f5_hue7ed0158ce51c9b331ab31adb8afb3a0_126407_7c4022c979fdf6663c38eed8164d448f.webp&#34;
               width=&#34;760&#34;
               height=&#34;478&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在大规模部署中，这种对 Kubernetes API 服务器的压力可能最终会减慢 &lt;em&gt;甚至导致&lt;/em&gt; 集群中的所有操作。&lt;/p&gt;
&lt;p&gt;在查看集群中的常见操作以及 cilium-agent 处理它的方式时，全局配置状态对每个节点的影响确实开始放大：工作负载和命名空间被标记、重新标记或取消标记。&lt;/p&gt;
&lt;p&gt;cilium-agent 负责为调度到其节点上的 Pod 编写 CiliumEndpoint 和 CiliumIdentity 资源。由于这些资源依赖于 Pod 和命名空间标签的组合，标签的更改将导致所有依赖资源的更新。这会导致大量的写操作和相应的读取操作，因为此状态随后会传播到所有 cilium-agent，它们必须做出反应并重新配置其本地数据平面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cilium.io/v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumIdentity&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;50568&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium.k8s.policy.cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium.k8s.policy.serviceaccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.kubernetes.pod.namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;security-labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.namespace.labels.team&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;loyalty&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.namespace.labels.version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v10.45&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.namespace.labels.kubernetes.io/metadata.name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.policy.cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.cilium.k8s.policy.serviceaccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;sleep-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:io.kubernetes.pod.namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s:version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;代码清单 1：&lt;code&gt;CiliumIdentity&lt;/code&gt; 资源结合了 &lt;em&gt;Pod&lt;/em&gt; 和 &lt;em&gt;命名空间&lt;/em&gt; 标签。对任一者的更改都会强制重新计算并生成新的 &lt;code&gt;CiliumIdentity&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对集群中的命名空间进行标记等操作对于 Cilium 可能非常昂贵，并且有可能导致 API 服务器操作减慢到爬行的程度（&lt;a href=&#34;https://docs.cilium.io/en/stable/operations/performance/scalability/identity-relevant-labels/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;请参阅用于标识目的包括/排除标签的建议&lt;/a&gt;）。例如，在中等规模集群中更改命名空间的标签可能会导致足够多的 cilium-agent 导致 Kubernetes API 服务器响应延迟约 &lt;strong&gt;4 分钟&lt;/strong&gt;。这将有效地使集群上的所有操作停滞不前。&lt;/p&gt;
&lt;p&gt;考虑以下环境：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200 个节点的 Kubernetes 集群&lt;/li&gt;
&lt;li&gt;5 个命名空间&lt;/li&gt;
&lt;li&gt;每个命名空间有 50 个部署&lt;/li&gt;
&lt;li&gt;每个部署有 80 个副本（总共 20,000 个 Pod）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一次更新跨命名空间的标签的测试中，我们看到 CPU 利用率急剧上升，约为 150%，并且内存在整个集群的所有节点上升到约 1 GB。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1所有节点上的-cpu-和内存峰值&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 1：所有节点上的 CPU 和内存峰值&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/g1_hua52c85a8206eb9df0debde7d5516fdf4_45787_e785a394894f33b37e20bff7291611fe.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/g1_hua52c85a8206eb9df0debde7d5516fdf4_45787_fb56924ac9175b3c3b6748c433b260cd.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/g1_hua52c85a8206eb9df0debde7d5516fdf4_45787_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/g1_hua52c85a8206eb9df0debde7d5516fdf4_45787_e785a394894f33b37e20bff7291611fe.webp&#34;
               width=&#34;760&#34;
               height=&#34;210&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1：所有节点上的 CPU 和内存峰值
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在整个集群的所有节点上同时提高 CPU 和内存是不希望看到的行为，然而更严重的是 cilium-agent 事件的读写如何影响 Kubernetes API 服务器的延迟。在下图中，我们看到延迟增长到 3 到 4 &lt;em&gt;分钟&lt;/em&gt;。这肯定会导致各种类型的停机！不幸的是，由于这种控制平面架构，通过增加容量来处理扩展问题的典型方法不起作用；实际上，添加更多节点和/或更多工作负载会放大这种行为。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2kubernetes-api-服务器延迟增加到-3---4-分钟&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 2：Kubernetes API 服务器延迟增加到 3 - 4 分钟&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/g2_hucb4e599317ac8eb6b090155fc0fe3321_85993_a33ac99496c57a762c7ef1f7878de3ae.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/g2_hucb4e599317ac8eb6b090155fc0fe3321_85993_790ce8702d05624b5d41657d82acff5d.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/g2_hucb4e599317ac8eb6b090155fc0fe3321_85993_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/g2_hucb4e599317ac8eb6b090155fc0fe3321_85993_a33ac99496c57a762c7ef1f7878de3ae.webp&#34;
               width=&#34;760&#34;
               height=&#34;312&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2：Kubernetes API 服务器延迟增加到 3 - 4 分钟
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;减轻-kubernetes-api-服务器的压力&#34;&gt;减轻 Kubernetes API 服务器的压力&lt;/h2&gt;
&lt;p&gt;对于较大的 Cilium 集群，您可以通过使用&lt;a href=&#34;https://docs.cilium.io/en/latest/kvstore/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;专用的键值存储&lt;/a&gt; 来减轻 Kubernetes API 服务器上的压力。键值存储用于存储工作负载标识、端点和 IP 到标识映射等内容。Cilium 不再将此信息存储在 Kubernetes 自定义资源（CRD）中，而是在其自己的数据库中直接监视、操作和写入对象。Cilium Helm 图表支持将 etcd 作为专用键值存储来进行安装，以满足此目的。&lt;/p&gt;
&lt;p&gt;随着集群的增长，使用 kv-store 来卸载 Cilium 对象的读/写操作可能是一个好主意，而不是给 Kubernetes API 服务器施加压力。&lt;/p&gt;
&lt;p&gt;注意：Cilium 还进行了其他优化，以减轻 Kubernetes API 服务器的压力，例如策略状态更新。有关更多信息，请参阅&lt;a href=&#34;https://docs.cilium.io/en/stable/internals/cilium_operator/#policy-status-update&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;k8s-events-handover 文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果我们在存在 kv-store 的情况下重新运行先前的测试，我们会看到对 Kubernetes API 服务器的压力减轻，尽管 CPU 可能没有减轻。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-3所有节点上的-cpu-峰值内存保持在-300-400-mb-范围内&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 3：所有节点上的 CPU 峰值，内存保持在 300-400 MB 范围内&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/g3_hu03ee2df6886e0aead8ba1c0e8a4bfd85_40363_45821a7710a631bb761ee4338e2a2594.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/g3_hu03ee2df6886e0aead8ba1c0e8a4bfd85_40363_8b73aa6d28be79386265d8bf314822a3.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/g3_hu03ee2df6886e0aead8ba1c0e8a4bfd85_40363_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/g3_hu03ee2df6886e0aead8ba1c0e8a4bfd85_40363_45821a7710a631bb761ee4338e2a2594.webp&#34;
               width=&#34;760&#34;
               height=&#34;174&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3：所有节点上的 CPU 峰值，内存保持在 300-400 MB 范围内
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;与先前情况下的 150% CPU 消耗不同，CPU 在大约 100% 左右波动，而内存保持在大约 300 到 400 MB 的范围内。这是因为对每个 Pod 和每个标识（Cilium 在更改标签时创建所有新标识，并且必须更新引用旧标识的所有 eBPF 映射的 CiliumEndpoint 和 CiliumIdentity 对象的重新计算和生成需要 CPU 计算资源来完成，无论使用何种后备存储（CRD、kv-store 等）。&lt;/p&gt;
&lt;p&gt;如果我们观察 kv-store，我们会看到在此命名空间标签事件期间，事件操作/秒和延迟会急剧上升：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-4kv-store-上的事件操作和延迟在此命名空间标签事件期间急剧上升&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 4：kv-store 上的事件操作和延迟在此命名空间标签事件期间急剧上升&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/g4_hu9a2efd15f71651839149532ec8fba102_21221_d2a4d5642d16f3c7a98cfbd51408c43d.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/g4_hu9a2efd15f71651839149532ec8fba102_21221_9b00e0b1912ae1a648631180bb4b08e1.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/g4_hu9a2efd15f71651839149532ec8fba102_21221_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/g4_hu9a2efd15f71651839149532ec8fba102_21221_d2a4d5642d16f3c7a98cfbd51408c43d.webp&#34;
               width=&#34;760&#34;
               height=&#34;183&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4：kv-store 上的事件操作和延迟在此命名空间标签事件期间急剧上升
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这种特殊情况下，我们看到 kv-store 承受了相当大的负载，通过事件 IO，我们看到 kv-store 调用的延迟降低到约 15 秒左右。总之，这对于整个集群操作而言要好得多，而不是用请求使 Kubernetes API 服务器饱和。事实上，在图 5 中，我们可以看到 Kubernetes API 服务器的延迟保持在 10 到 40 毫秒的可接受范围内，而在先前的示例中，延迟升高到 4 分钟。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5kubernetes-api-server-延迟在-10-到-40ms-之间&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 5：Kubernetes API Server 延迟在 10 到 40ms 之间&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/g5_huff501482344fa25fe8b78a743ca16b56_55565_6c15bbadc2f39109a22c1576d7b65a76.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/g5_huff501482344fa25fe8b78a743ca16b56_55565_e1edfbb026efa7da43d902f5f43cf126.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/g5_huff501482344fa25fe8b78a743ca16b56_55565_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/g5_huff501482344fa25fe8b78a743ca16b56_55565_6c15bbadc2f39109a22c1576d7b65a76.webp&#34;
               width=&#34;760&#34;
               height=&#34;305&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5：Kubernetes API Server 延迟在 10 到 40ms 之间
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用 kv-store 后端来存储 Cilium 对象是一种缓解 Kubernetes API 服务器压力的好方法，但它也有其缺点。现在有两个持久存储需要维护，而且随着规模的增加，运维负担也增加。在生产环境中运行数据库或持久存储（总体来说）以支持规模化并非易事。如果失去一致性，恢复过程是必需的，因为现在有两个“真相源”。许多平台完全管理 Kubernetes API 服务器及其存储，但 kv-store 并不是如此。由于绝大多数负载是读取操作，缓存将在减少运维复杂性的同时产生相同的改进。&lt;/p&gt;
&lt;h2 id=&#34;使用-xds-改进-cilium-的控制平面扩展安全性和效率&#34;&gt;使用 xDS 改进 Cilium 的控制平面扩展、安全性和效率&lt;/h2&gt;
&lt;p&gt;如果我们可以兼顾两全呢？既减轻 Kubernetes API 服务器的压力，又消除维护单独数据存储的昂贵生产操作的需要？甚至可能解决一些其他尚未解决的 Cilium 扩展和安全性问题？&lt;/p&gt;
&lt;p&gt;在 Solo.io，我们很高兴为 Cilium 社区中更广泛的 xDS 工作作出贡献，并帮助推动该项目朝着可扩展、安全和高效的控制平面迈进。使用&lt;a href=&#34;https://github.com/cncf/xds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;使我们能够在集群中扩展到数千甚至数万个节点。这种方法解决了上面讨论的许多问题，以及其他问题，如单节点妥协影响范围和规模上的 CiliumIdentity 重复。让我们看看它是如何工作的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cncf/xds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;最初是一种动态配置&lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy 代理&lt;/a&gt;的方式，但是它建立的理念是可以用来支持“通用数据平面”。该协议已成为在多个节点之间同步状态的有效方式，&lt;a href=&#34;https://github.com/cncf/xds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现在由 CNCF 工作组管理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最终，我们希望消除每个 cilium-agent 所做的冗余工作，将诸如标识创建之类的复杂且权限敏感的操作集中在一起，并以高效的方式为代理提供状态，同时不损害 Kubernetes 作为整体的可靠性。&lt;/p&gt;
&lt;p&gt;为了做到这一点，我们将不再让每个 cilium-agent 充当独立的控制平面，而是考虑让 cilium-agent 充当智能集中控制平面的简单只读客户端。控制平面将保护代理免受复杂和权限敏感的操作。&lt;/p&gt;
&lt;p&gt;cilium-agent（现在属于数据平面的一部分）与控制平面之间的通信将采用&lt;a href=&#34;https://github.com/cncf/xds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xDS 协议&lt;/a&gt;。数据平面不允许从数据平面到控制平面的写操作，因此 cilium-agent 不需要对后端存储（CRD/kv-store）具有写入访问权限。xDS 控制平面服务可以得到安全加固，是唯一需要支持对 Kubernetes API 服务器进行读/写操作的组件。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/f6_hud06f088070b8a4b45fcfc26cbe240d6e_75149_a9c7a2ba0d44fe68aed0c0380b09b39d.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/f6_hud06f088070b8a4b45fcfc26cbe240d6e_75149_1e565b5fa532c0b84cea8755178c61e6.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/f6_hud06f088070b8a4b45fcfc26cbe240d6e_75149_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/f6_hud06f088070b8a4b45fcfc26cbe240d6e_75149_a9c7a2ba0d44fe68aed0c0380b09b39d.webp&#34;
               width=&#34;760&#34;
               height=&#34;562&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这种架构减轻了 Kubernetes API 服务器的负载，并且不需要任何外部管理的数据存储。它看起来也更接近之前讨论的三层控制平面架构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-6xds-实现的初始测试显示-cpu-和内存使用的预期行为&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 6：xDS 实现的初始测试显示 CPU 和内存使用的预期行为&#34; srcset=&#34;
               /blog/scaling-cilium-to-new-heights-with-xds/g6_hu490d613048364fd74eba646cc8785540_43458_34a38d139e31e6477146dfb5348d8cbd.webp 400w,
               /blog/scaling-cilium-to-new-heights-with-xds/g6_hu490d613048364fd74eba646cc8785540_43458_d33f64f88937d73e25b0c3ff3520e1a0.webp 760w,
               /blog/scaling-cilium-to-new-heights-with-xds/g6_hu490d613048364fd74eba646cc8785540_43458_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/scaling-cilium-to-new-heights-with-xds/g6_hu490d613048364fd74eba646cc8785540_43458_34a38d139e31e6477146dfb5348d8cbd.webp&#34;
               width=&#34;760&#34;
               height=&#34;385&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6：xDS 实现的初始测试显示 CPU 和内存使用的预期行为
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这种架构中，我们确实看到了 xDS 控制平面 pods 中的 CPU 和内存开销，正如预期的那样，每个节点仍然需要处理 eBPF 数据平面的一些 CPU/内存处理开销。&lt;/p&gt;
&lt;p&gt;这种模型带来的其他好处包括在节点受损时更小的影响范围，以及消除了 cilium-agent 创建的重复标识。在原始架构（CRD 或 kv-store）中，每个节点都有一个完整的控制平面，需要特殊权限来读取和写入&lt;code&gt;CiliumEndpoints&lt;/code&gt;和&lt;code&gt;CiliumIdentity&lt;/code&gt;。如果某个节点上的 cilium-agent 受到妥协，那么整个控制平面将受到威胁，并使攻击者能够影响其他节点。这可能导致整个集群妥协。在 xDS 模型中，cilium-agent 被允许从控制平面读取数据（不允许写入），单个 cilium-agent 的妥协不会给予对整个控制平面或集群的访问权限。正如前面提到的，xDS 控制平面被视为特权组件，可以进行锁定和安全设置，甚至可以完全在集群之外运行。&lt;/p&gt;
&lt;p&gt;xDS 方法的另一个好处是通过集中标识创建来消除 Cilium 中重复标识的生成。在现有模型中，每个 cilium-agent 都独立充当控制平面，与其他节点隔离，正如在现有模型中，它试图做出可能是重复的决策。例如，当 Pod 分配到节点时，CNI 负责设置网络端点，当 cilium-agent 识别到一个新的端点，它没有现有的&lt;code&gt;CiliumIdentity&lt;/code&gt;时，它将尝试创建它。如果命名空间标签发生更改并且需要重新计算所有标识，那么也会发生相同的情况。由于标识创建在多个节点上独立进行，因此有很大机会为相同标识创建多个&lt;code&gt;CiliumIdentity&lt;/code&gt;（在极端情况下，&lt;a href=&#34;https://docs.google.com/document/d/1Hcc_2mB9OOUxrqQgZ-gSYDPnLYE_If_TCzVbUGDOdGM/edit?pli=1#heading=h.yzvq0akbw7z9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如此描述的易于重现&lt;/a&gt;）。在 xDS 方法中，&lt;code&gt;CiliumIdentity&lt;/code&gt;在集中创建，从而消除了这种情况。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;Cilium 在 eBPF 基础上构建了强大的数据平面，但要使 Cilium 在规模上有效运行，我们可以利用 xDS 协议来改进控制平面架构。xDS 是一种高效的协议，允许我们利用多年来学到的构建控制平面的最佳实践。事实上，如果我们将 xDS 控制平面 &lt;a href=&#34;https://docs.google.com/document/d/1U4pO_dTaHERKOtrneNA8njW19HSVbq3sBM3x8an4878/edit#heading=h.ghzkbpzc9oea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;直接构建到 cilium-operator 中&lt;/a&gt;，那么从这个实施中不会增加新的复杂性。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生软件的关键用例安全保障之道</title>
      <link>https://cloudnative.to/blog/securing-cloud-natives-most-important-use-cases/</link>
      <pubDate>Wed, 10 Jan 2024 08:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/securing-cloud-natives-most-important-use-cases/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://www.chainguard.dev/unchained/securing-cloud-natives-most-important-use-cases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Securing cloud native’s most important use cases&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;摘要：云原生软件开发意味着为公有云和私有云的特性优化应用和环境。Chainguard 旨在提供不影响开发者体验的软件供应链安全工具，通过提供最小化、强化的容器镜像，让用户能够准确地扫描漏洞并消除 CVE 警报。本文介绍了 Chainguard Images 为 Istio 和 Cilium 这两个云原生基础技术提供的安全增强方案。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;从根本上说，构建云原生软件意味着构建针对公共和私有云特性进行优化的应用程序和环境。开发云原生软件意味着管理一定程度的混乱，这不是所有类型的软件都需要的。&lt;/p&gt;
&lt;p&gt;这在新的一年尤其重要，我们可以预期产品将趋向于优先考虑开发者体验，并且平台工程的崛起。良好的工程和工具使开发者可以专注于构建和创新。已经构建的所有内部开发者平台和即将推出的平台都需要尽量将基础设施管理从开发者那里抽象出来。&lt;/p&gt;
&lt;p&gt;这正是 Chainguard 想要解决的问题领域，特别是在安全性和漏洞管理方面。我们致力于提供不妨碍开发者体验的工具，以确保软件供应链的安全。我们通过提供最小化、加固的容器镜像来实现这一目标，这使我们的用户可以获得准确的扫描结果，并将 CVE 收件箱警报降至零。&lt;/p&gt;
&lt;h3 id=&#34;推出新的-chainguard-images-捆绑包适用于-cilium-和-istio&#34;&gt;推出新的 Chainguard Images 捆绑包，适用于 Cilium 和 Istio&lt;/h3&gt;
&lt;p&gt;为了实现这一目标，我们密切关注最受欢迎的开源项目，但也关注那些如果经过加固，将为整个开源生态系统提供重要的安全改进的项目。为了在整个生态系统中产生最大的影响，我们应该帮助加固那些作为云原生软件基石的技术。Istio 和 Cilium 正是这样的明显示例，它们是云原生软件生态系统的基础构建模块之一。通过提供新的 Chainguard Images Istio 和 Cilium 捆绑包，我们为这些项目的用户提供了一个安全地将它们引入其构建流程的简便方法。&lt;/p&gt;
&lt;p&gt;在任何给定的供应链中，有些原材料比其他原材料更为基础。如果这些原材料得到了妥善保护，那么这将对后续工作产生连锁效应（或者如果你愿意的话，可以说是对整个堆栈产生上下游影响）。&lt;/p&gt;
&lt;p&gt;Cilium 和 Istio 技术都涵盖了对 Kubernetes 环境具有基础作用的各种用例。Cilium 和 Istio 是两个流行的工具，通过提供流量路由、负载平衡、服务发现等功能来帮助解决这些挑战。这些功能对于确保 Kubernetes 和其他云原生软件部署的顺利、高效和安全运行至关重要。最终，构建云原生软件意味着创建专为云设计的应用程序，而 Cilium 和 Istio 在帮助开发者实现这一目标方面发挥了关键作用。&lt;/p&gt;
&lt;h3 id=&#34;istio-和-cilium-在云计算中不可或缺的作用&#34;&gt;Istio 和 Cilium 在云计算中不可或缺的作用&lt;/h3&gt;
&lt;p&gt;根据 2022 年的 &lt;a href=&#34;https://www.cncf.io/reports/cncf-annual-survey-2022/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF 年度调查&lt;/a&gt;，Istio 是受访者中使用最广泛的服务网格，73% 的受访公司使用它。这种广泛的采用证明了 Istio 在解决各种服务管理挑战方面的有效性，使其成为现代企业寻求构建强大、安全和可扩展的微服务架构的重要工具。Istio 在 GitHub 上拥有超过 34,000 颗星星，使其成为 CNCF 中最受欢迎的项目之一。&lt;/p&gt;
&lt;p&gt;从同一份 CNCF 调查中，有 47% 的受访者将 Cilium 作为他们容器编排平台（如 Kubernetes）的首选网络插件。它也受欢迎于网络安全领域，有 43% 的受访者将其用于此目的。eBPF 的未来和力量是不可思议的，所有人都同意这一点。&lt;/p&gt;
&lt;p&gt;最近，我们推出了我们的新的 &lt;a href=&#34;https://images.chainguard.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chainguard Images 目录&lt;/a&gt;，这是一个公开可用的网站，用户可以在其中浏览我们库存中的所有镜像。在每个 Chainguard&lt;/p&gt;
&lt;p&gt;Image 列表中，你将找到有关安装、基础设施、签名和 SBOM 的源数据的相关信息，以及更多其他相关信息。Chainguard Images 目录还包括一个新的&lt;a href=&#34;https://images.chainguard.dev/security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安全通报&lt;/a&gt;页面，显示用户已知的 CVE，修复的状态等信息。&lt;/p&gt;
&lt;p&gt;如果你正在寻找更多关于如何在本地环境中启动 Chainguard Images Cilium 或 Istio 捆绑包的技术指导，请查看 Chainguard 工程师&lt;a href=&#34;https://www.linkedin.com/in/tcnghia/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nghia Tran&lt;/a&gt;在 Chainguard Academy 上提供的这些方便入门的指南。非常感谢我们的朋友&lt;a href=&#34;https://www.linkedin.com/in/feroz-salam-372a4113/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Isovalent&lt;/a&gt;的 Feroz Salam 在 Cilium Images 方面给了我们帮助，以及多年来帮助我们的 Istio 的&lt;a href=&#34;https://www.linkedin.com/in/-johnhoward/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Howard&lt;/a&gt;！以下是指南：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://edu.chainguard.dev/chainguard/chainguard-images/getting-started/getting-started-istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开始使用 Istio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://edu.chainguard.dev/chainguard/chainguard-images/getting-started/getting-started-cilium/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开始使用 Cilium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chainguard Developer Images 提供了带有 &lt;code&gt;:latest&lt;/code&gt; 和 &lt;code&gt;:latest-dev&lt;/code&gt; 标签的免费镜像，供你在开发和测试环境中使用。在新的目录中，每个镜像页面还包括重要的特定于镜像的详细信息，例如版本标签和其他变体，如 FIPS 和长期支持（LTS），这些都适用于购买了这些解决方案的 Chainguard Images 客户。如果你想了解有关我们的 Production Images 中面向企业的功能的更多信息，请&lt;a href=&#34;https://www.chainguard.dev/contact&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;联系我们的团队&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cilium 2023 年度报告发布</title>
      <link>https://cloudnative.to/blog/cilium-2023-annual-report/</link>
      <pubDate>Tue, 09 Jan 2024 18:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cilium-2023-annual-report/</guid>
      <description>&lt;p&gt;这份报告回顾了 Cilium 项目在 2023 年的成就和进展，包括贡献者增长、版本亮点、用户调查结果、生产环境案例、社区活动和引用、以及 2024 年的发展方向。报告显示，Cilium 项目已经成为云原生网络、可观测性和安全性的领导者，得到了广泛的认可和采用。报告还展示了 Cilium 项目的健康状况和活跃度，通过数据和图表展示了项目的里程碑和提交情况。报告最后感谢了社区的支持和贡献，以及期待未来的更多创新和协作。&lt;/p&gt;
&lt;p&gt;详情见：&lt;a href=&#34;https://www.cncf.io/blog/2023/12/21/ciliums-2023-annual-report/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cncf.io/blog/2023/12/21/ciliums-2023-annual-report/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&#34;https://github.com/cilium/cilium.io/blob/main/Annual-Reports/Cilium%20Annual%20Report%202023.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下内容选取自报告中的 release highlight 部分。&lt;/p&gt;
&lt;h2 id=&#34;版本更新&#34;&gt;版本更新&lt;/h2&gt;
&lt;p&gt;Cilium 在 2023 年进行了两次重大发布。Cilium 1.13 于 2 月发布，针对网络（特别是服务网格）、性能和软件供应链安全等方面进行了许多改进。Cilium 1.14 于 7 月发布，引入了一个备受期待的功能：与主要改进相结合的双向身份验证，同时扩展了 Kubernetes 之外的网络。Tetragon 1.0 于 10 月发布，带来了主要的更新和性能改进。&lt;/p&gt;
&lt;p&gt;以下是所有版本中包含的一些主要变化的概述：&lt;/p&gt;
&lt;h2 id=&#34;cilium-113&#34;&gt;Cilium 1.13&lt;/h2&gt;
&lt;h3 id=&#34;gateway-api&#34;&gt;Gateway API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 1.13 带有 Gateway API 的完全兼容实现。这个 API 是用于北向负载均衡和流量路由到 Kubernetes 集群的新标准，是 Kubernetes Ingress API 的长期继任者。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;带注释的-kubernetes-服务的-l7-负载均衡&#34;&gt;带注释的 Kubernetes 服务的 L7 负载均衡&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 1.13 引入了使用 Cilium 内置的 Envoy 代理来实现现有 Kubernetes 服务的 L7 负载均衡的功能，通过应用以下注释：&lt;code&gt;&amp;quot;service.cilium.io/lb-l7&amp;quot;: &amp;quot;enabled&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据面上的双向身份验证---beta&#34;&gt;数据面上的双向身份验证 - Beta&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据面级别添加了双向身份验证支持，以便 Cilium 能够对集群中对等节点上的终端进行身份验证，并根据成功的双向身份验证来控制数据平面连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;loadbalancer-服务和-bgp-服务广告的-ipam&#34;&gt;LoadBalancer 服务和 BGP 服务广告的 IPAM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LoadBalancer IP 地址管理（LB-IPAM）是一个新功能，允许 Cilium 为 Kubernetes LoadBalancer 服务提供 IP 地址。Cilium BGP 通过引入服务地址广告得到了改进，这个功能可以与 LB-IPAM 功能无缝配合使用，帮助用户通过 BGP 广告 Kubernetes 服务的 IP 地址，从而不再需要 MetalLB，简化了网络堆栈。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;支持-kubernetes-上的-sctp&#34;&gt;支持 Kubernetes 上的 SCTP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SCTP 是一种在电信行业中经常用于支持 VoIP 和其他实时服务的传输层协议。Cilium 1.13 引入了 STCP 的基本支持，甚至支持在 Hubble 中进行可视化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;性能&#34;&gt;性能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 引入了支持 BIG TCP 的功能，通过提高吞吐量并减少节点的延迟来提高网络性能，帮助用户扩展到 100Gbps 集群甚至更大的规模。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;软件供应链安全&#34;&gt;软件供应链安全&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 和 Tetragon 容器镜像现在在创建时使用 cosign 进行签名。利用镜像签名，用户可以确信他们从容器注册表获取的镜像是维护者构建和发布的受信任的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sboms&#34;&gt;SBOMs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从版本 1.13 开始，Cilium 和 Tetragon 镜像现在包含了软件材料清单（SBOM）。这意味着用户可以确保 Cilium 中使用的组件和依赖关系是透明和可验证的，以便查找潜在的漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cilium-114&#34;&gt;Cilium 1.14&lt;/h2&gt;
&lt;h3 id=&#34;服务网格和双向身份验证&#34;&gt;服务网格和双向身份验证&lt;/h3&gt;
&lt;h4 id=&#34;双向身份验证---beta&#34;&gt;双向身份验证 - Beta&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 1.14 带来了新的双向身份验证支持，通过 SPIFFE（Secure Production Identity Framework for Everyone）和 SPIRE（SPIRE 是 SPIFFE API 的生产就绪实现）提供。有了这个新支持，Cilium 现在可以与 SPIRE 服务器一起部署，以启用双向身份验证。这允许工作负载在 SPIRE 服务器上创建和管理其身份，该服务器自动管理和旋转证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;envoy-daemonset&#34;&gt;Envoy DaemonSet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;添加了 Envoy 作为 DaemonSet 的支持。这意味着 Envoy 代理不再需要在 Cilium 代理 Pod 内作为进程运行，从而允许独立的生命周期、独立的管理以及将问题的影响限制在 Envoy 代理或 Cilium 代理中的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;wireguard-节点到节点加密和-layer-7-策略支持&#34;&gt;WireGuard 节点到节点加密和 Layer 7 策略支持&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 的使用 WireGuard 的加密已经得到增强。现在可以加密 Pod 之间、从 Pod 到节点以及节点之间的流量，并且还支持将 L7 网络策略应用于使用 WireGuard 加密的流量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;超越-kubernetes-的网络&#34;&gt;超越 Kubernetes 的网络&lt;/h3&gt;
&lt;h4 id=&#34;l2-公告&#34;&gt;L2 公告&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 1.14 带有一个名为 L2 Announcement policy 的新功能，它允许 Cilium 响应本地客户端对 ExternalIPs 和/或 LoadBalancer IP 的 ARP 请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;bgp-增强&#34;&gt;BGP 增强&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为 Cilium 的 BGP 实现添加了新功能，包括：Cilium CLI 中的 BGP 命令，可以使用 Cilium CLI 显示所有节点的 BGP 对等状态；BGP Graceful Restart，可以在重新启动代理时保持对等方的路由；eBGP Multi-Hop，允许用户在没有明确的 TTL 跳数限制的情况下启用两个 EBGP 对等方之间的邻居连接；自定义 BGP 定时器，可以自定义 Cilium 和对等方之间的 BGP 会话的定时器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集群网格&#34;&gt;集群网格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在 KVStoreMesh 模式下，Cilium Cluster Mesh 实现了改进的可扩展性和隔离，面向大规模 Cluster Mesh 部署，支持多达 50,000 个节点和 500,000 个 Pod。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tetragon-10&#34;&gt;Tetragon 1.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cilium Tetragon 1.0 主要关注提高性能并减小系统开销。它是一个基于 Kubernetes 的工具，通过 eBPF 应用策略和过滤，确保以最小的性能影响实现深度可观测性。Tetragon 跟踪各种活动，如进程执行、特权升级、文件和网络活动，提供一系列的开箱即用的安全可观测性策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tetragon 作为一个基于 Kubernetes 的本地工具，与 Kubernetes 无缝集成，以增强安全可观测性，通过为精确的策略应用丰富事件提供必要的元数据。它使用 eBPF 进行事件观察和过滤，确保最小的开销和高效的性能，显着减少了数据传输和执行操作中的延迟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在性能测试中，其有效性得到了证明，在进程执行跟踪方面的开销不到 2%，即使在高 I/O 条件下也能够高效地监视文件完整性，对网络性能的影响也很小，展示了它有效和高效地观察网络流量的能力。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>使用 Cilium 实现 Gateway API 指南</title>
      <link>https://cloudnative.to/blog/cilium-gateway-api/</link>
      <pubDate>Thu, 04 Jan 2024 08:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cilium-gateway-api/</guid>
      <description>&lt;p&gt;在 Kubernetes 上部署应用程序后，通常的下一步是让用户可以访问它。我们通常使用&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Ingress 控制器&lt;/strong&gt;&lt;/a&gt;，例如 Nginx、Haproxy、Traefik 或来自云提供商的控制器，来引导传入的流量到应用程序，管理负载平衡、TLS 终止等等。&lt;/p&gt;
&lt;p&gt;然后，我们必须从众多&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可用的选项&lt;/a&gt; 中进行选择。Cilium 是其中一个相对较新的选项，旨在处理所有这些网络方面的问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Cilium&lt;/strong&gt;&lt;/a&gt; 是一个基于 eBPF 的开源网络和安全解决方案，其采用速度增长迅猛。它可能是提供最多功能的网络插件之一。我们不会涵盖所有功能，但其中一个功能涉及使用&lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Gateway API&lt;/strong&gt;&lt;/a&gt; (&lt;code&gt;GAPI&lt;/code&gt;) 管理传入流量。&lt;/p&gt;
&lt;h2 id=&#34;我们的目标&#34;&gt;我们的目标&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;准确了解 &lt;strong&gt;Gateway API&lt;/strong&gt; 是什么，以及它如何代表从 &lt;code&gt;Ingress&lt;/code&gt; API 进化而来。&lt;/li&gt;
&lt;li&gt;演示以 GitOps 方式部署的真实场景。&lt;/li&gt;
&lt;li&gt;当前的限制和即将推出的新功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;提示&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    &lt;p&gt;本文中执行的所有步骤都来自这个&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;git 存储库&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我鼓励你探索它，因为它远远超出了本文的范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用启用了 kube-proxy 替代并具有专用 Daemonset 用于 &lt;code&gt;Envoy&lt;/code&gt; 的 &lt;code&gt;Cilium&lt;/code&gt; 配置的 &lt;strong&gt;EKS&lt;/strong&gt; 集群的安装。&lt;/li&gt;
&lt;li&gt;提出了具有依赖关系管理和我认为非常高效的 DRY 代码的 &lt;code&gt;Flux&lt;/code&gt; 结构。&lt;/li&gt;
&lt;li&gt;简化了用于平台组件的 IAM 权限管理的 &lt;code&gt;Crossplane&lt;/code&gt; 和 &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IRSA&lt;/a&gt; 组合。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;External-DNS&lt;/code&gt; 和 &lt;code&gt;Let&#39;s Encrypt&lt;/code&gt; 自动管理域名和证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个想法是只需几分钟内设置好一切，只需一个命令行。&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;介绍-gateway-api&#34;&gt;介绍 Gateway API&lt;/h2&gt;
&lt;p&gt;正如前面提到的，有许多&lt;strong&gt;Ingress 控制器&lt;/strong&gt;选项，每个都有其特定性和特殊功能，有时会使它们的使用变得复杂。此外，Kubernetes 中传统的 &lt;code&gt;Ingress&lt;/code&gt; API 具有非常有限的参数。一些解决方案甚至创建了自己的&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRDs&lt;/a&gt;（Kubernetes 自定义资源），而其他解决方案则使用 &lt;code&gt;annotations&lt;/code&gt; 来克服这些限制。&lt;/p&gt;
&lt;p&gt;这就是&lt;strong&gt;Gateway API&lt;/strong&gt;的用武之地！实际上，这是一种&lt;strong&gt;标准&lt;/strong&gt;，允许声明高级网络功能，而无需对底层控制器进行特定扩展。而且，由于所有控制器都使用相同的 API，因此可以在不改变配置的情况下从一个解决方案切换到另一个解决方案（Kubernetes 清单描述了如何路由传入流量）。&lt;/p&gt;
&lt;p&gt;在我们将要探讨的概念中，GAPI 引入了一个精细的授权模型，定义了具有不同权限的&lt;strong&gt;显式角色&lt;/strong&gt;（有关 GAPI 安全模型的更多信息，请参阅&lt;a href=&#34;https://gateway-api.sigs.k8s.io/concepts/security-model/#roles-and-personas&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;值得注意的是，该项目由&lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sig-network-kubernetes&lt;/a&gt;工作组推动，还有一个 Slack &lt;a href=&#34;https://kubernetes.slack.com/archives/CR0H13KGA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;频道&lt;/a&gt;，你可以在需要时联系他们。&lt;/p&gt;
&lt;p&gt;让我们看看在实践中如何使用 GAPI 与 Cilium！&lt;/p&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;在本文的其余部分，我们假设已部署了一个 EKS 集群。如果你没有使用&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/tree/main/terraform/eks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演示存储库中建议的方法&lt;/a&gt;作为本文的基础，那么有一些&lt;strong&gt;要检查的要点&lt;/strong&gt;，以便使用 GAPI。&lt;/p&gt;
&lt;p&gt;此处描述的安装方法基于 &lt;code&gt;Helm&lt;/code&gt;，所有的 &lt;code&gt;values&lt;/code&gt; 可以在&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/terraform/eks/helm_values/cilium.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href=&#34;https://github.com/kubernetes-sigs/gateway-api/tree/main/config/crd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API&lt;/a&gt;存储库中&lt;strong&gt;安装&lt;/strong&gt;可用的 &lt;code&gt;CRDs&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;注意&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    如果 Cilium 设置为支持 &lt;code&gt;GAPI&lt;/code&gt;（见下文），并且缺少 CRDs，则它将无法启动。在&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;演示存储库&lt;/a&gt;中，&lt;strong&gt;GAPI CRDs&lt;/strong&gt;在集群创建期间安装一次，以便 Cilium 可以启动，然后由 Flux 管理。
&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 Cilium 和 &lt;code&gt;eBPF&lt;/code&gt; 的网络转发功能&lt;strong&gt;替换&lt;/strong&gt; &lt;code&gt;kube-proxy&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kubeProxyReplacement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;启用&lt;/strong&gt; Gateway API 支持。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;gatewayAPI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查&lt;/strong&gt;安装。为此，你需要安装名为 &lt;code&gt;cilium&lt;/code&gt; 的命令行工具。我个人使用 &lt;a href=&#34;https://blog.ogenki.io/post/asdf/asdf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asdf&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;asdf plugin-add cilium-cli
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;asdf install cilium-cli 0.15.7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;asdf global cilium 0.15.7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下命令允许确保所有组件都正常运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium status --wait
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   /¯¯\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;/¯¯\__/¯¯\    Cilium:             OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;\__/¯¯\__/    Operator:           OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;/¯¯\__/¯¯\    Envoy DaemonSet:    OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;\__/¯¯\__/    Hubble Relay:       disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   \__/       ClusterMesh:        disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;Deployment             cilium-operator    Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;DaemonSet              cilium             Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;DaemonSet              cilium-envoy       Desired: 2, Ready: 2/2, Available: 2/2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Containers:            cilium             Running: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;                      cilium-operator    Running: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;                      cilium-envoy       Running: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Cluster Pods:          33/33 managed by Cilium
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Helm chart version:    1.14.2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Image versions         cilium             quay.io/cilium/cilium:v1.14.2@sha256:6263f3a3d5d63b267b538298dbeb5ae87da3efacf09a2c620446c873ba807d35: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;                      cilium-operator    quay.io/cilium/operator-aws:v1.14.2@sha256:8d514a9eaa06b7a704d1ccead8c7e663334975e6584a815efe2b8c15244493f1: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;                      cilium-envoy       quay.io/cilium/cilium-envoy:v1.25.9-e198a2824d309024cb91fb6a984445e73033291d@sha256:52541e1726041b050c5d475b3c527ca4b8da487a0bbb0309f72247e8127af0ec: 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，你可以通过运行以下命令来检查是否启用了 Gateway API 支持：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium config view | grep -w &amp;#34;enable-gateway-api&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;enable-gateway-api                                true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;enable-gateway-api-secrets-sync                   true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你还可以运行以下端到端测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium connectivity test
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但是，此命令（&lt;code&gt;connectivity test&lt;/code&gt;）当前在启用 Envoy 作为 DaemonSet 时会抛出错误。(&lt;a href=&#34;https://github.com/cilium/cilium/issues/28057&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Issue&lt;/a&gt;)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;提示&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    &lt;p&gt;&lt;strong&gt;Envoy 作为 DaemonSet&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，Cilium 代理还在同一 Pod 中运行 &lt;code&gt;Envoy&lt;/code&gt;，并委托给它级别 7 的网络操作。从版本 &lt;code&gt;v1.14&lt;/code&gt; 开始，可以将 Envoy 单独部署，这带来了一些好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果修改/重新启动一个组件（无论是 Cilium 还是 Envoy），都不会影响另一个组件。&lt;/li&gt;
&lt;li&gt;更好地分配资源给每个组件以优化性能。&lt;/li&gt;
&lt;li&gt;在某个 Pod 被攻击的情况下限制攻击面。&lt;/li&gt;
&lt;li&gt;Envoy 日志和 Cilium 代理日志不会混合在一起。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以使用以下命令来检查此功能是否已启用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;    /¯¯\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt; /¯¯\__/¯¯\    Cilium:             OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt; \__/¯¯\__/    Operator:           OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt; /¯¯\__/¯¯\    Envoy DaemonSet:    OK
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt; \__/¯¯\__/    Hubble Relay:       disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;    \__/       ClusterMesh:        disabled
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://isovalent.com/blog/post/cilium-release-114/#h-envoy-daemonset&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更多信息&lt;/a&gt;。&lt;/p&gt;

&lt;/div&gt;

&lt;h2 id=&#34;入口点gatewayclass-和-gateway&#34;&gt;入口点：GatewayClass 和 Gateway&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-网关&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;网关&#34; srcset=&#34;
               /blog/cilium-gateway-api/gateway_hu052a454012dce8476457ee2d39f00b3d_54224_ca3fe50a3a0d3a5c7207fd3bf88102b0.webp 400w,
               /blog/cilium-gateway-api/gateway_hu052a454012dce8476457ee2d39f00b3d_54224_aaf52ec10c35f75782e76cd95d152029.webp 760w,
               /blog/cilium-gateway-api/gateway_hu052a454012dce8476457ee2d39f00b3d_54224_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-gateway-api/gateway_hu052a454012dce8476457ee2d39f00b3d_54224_ca3fe50a3a0d3a5c7207fd3bf88102b0.webp&#34;
               width=&#34;760&#34;
               height=&#34;557&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      网关
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一旦满足先决条件，我们就可以访问多个元素。我们可以利用 Gateway API CRDs 定义的自定义资源。而且，在安装 Cilium 后，一个 &lt;code&gt;GatewayClass&lt;/code&gt; 立即可用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;kubectl get gatewayclasses.gateway.networking.k8s.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NAME     CONTROLLER                     ACCEPTED   AGE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium   io.cilium/gateway-controller   True       7m59s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Kubernetes 集群上，你可以配置多个 &lt;code&gt;GatewayClasses&lt;/code&gt;，从而能够使用不同的实现。例如，我们可以通过在 &lt;code&gt;Gateway&lt;/code&gt; 配置中引用 GatewayClass 来使用 &lt;code&gt;Linkerd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Gateway&lt;/code&gt; 是允许触发在云提供商中创建负载均衡组件的资源。&lt;/p&gt;
&lt;p&gt;这是一个简单的示例：&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/apps/base/echo/gateway.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apps/base/echo/gateway.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cilium&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedRoutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Same&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 AWS（EKS）上，配置 &lt;code&gt;Gateway&lt;/code&gt; 时，Cilium 会创建一个类型为 &lt;code&gt;LoadBalancer&lt;/code&gt; 的 &lt;code&gt;Service&lt;/code&gt;。然后，另一个控制器（&lt;a href=&#34;https://kubernetes-sigs.github.io/aws-load-balancer-controller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS Load Balancer Controller&lt;/a&gt;）处理云负载均衡器（&lt;a href=&#34;https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NLB&lt;/a&gt;）的创建。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;kubectl get svc -n echo cilium-gateway-echo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NAME                  TYPE           CLUSTER-IP     EXTERNAL-IP                                                                 PORT(S)        AGE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cilium-gateway-echo   LoadBalancer   172.20.19.82   k8s-echo-ciliumga-64708ec85c-fcb7661f1ae4e4a4.elb.eu-west-3.amazonaws.com   80:30395/TCP   2m58s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;值得注意的是，负载均衡器地址也与 &lt;code&gt;Gateway&lt;/code&gt; 相关联。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;kubectl get gateway -n echo echo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NAME   CLASS    ADDRESS                                                                     PROGRAMMED   AGE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo   cilium   k8s-echo-ciliumga-64708ec85c-fcb7661f1ae4e4a4.elb.eu-west-3.amazonaws.com   True         16m
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;路由规则httproute&#34;&gt;路由规则：HTTPRoute&lt;/h2&gt;
&lt;h3 id=&#34;基本规则&#34;&gt;基本规则&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-httproute&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;httproute.jpg&#34; alt=&#34;HTTPRoute&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      HTTPRoute
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;简而言之，上面的图表可总结为几句话：&lt;code&gt;HTTPRoute&lt;/code&gt; 允许通过引用 Gateway 并定义所需的路由参数来配置到服务的路由。&lt;/p&gt;
&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;提示&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    &lt;p&gt;&lt;strong&gt;Kyverno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;截止目前，无法配置由 &lt;code&gt;Gateways&lt;/code&gt; 生成的服务的注释（&lt;a href=&#34;https://github.com/cilium/cilium/issues/25357&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Issue&lt;/a&gt;）。已提出一种解决方法，即在创建 &lt;code&gt;Gateway&lt;/code&gt; 后立即修改由 &lt;code&gt;Gateway&lt;/code&gt; 创建的服务。&lt;/p&gt;
&lt;p&gt;Kyverno 是一种确保配置符合最佳实践和安全要求的工具。我们在这里仅仅使用它来轻松描述&lt;a href=&#34;https://kyverno.io/docs/writing-policies/mutate/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;突变&lt;/a&gt;规则。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/security/mycluster-0/echo-gw-clusterpolicy.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;security/mycluster-0/echo-gw-clusterpolicy.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;mutate-svc-annotations&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kinds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cilium-gateway-echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mutate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patchStrategicMerge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;external-dns.alpha.kubernetes.io/hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo.${domain_name}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service.beta.kubernetes.io/aws-load-balancer-scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;internet-facing&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service.beta.kubernetes.io/aws-load-balancer-backend-protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tcp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;loadBalancerClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service.k8s.aws/nlb&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，服务 &lt;code&gt;cilium-gateway-echo&lt;/code&gt; 将添加 AWS 控制器的注释，以及一个允许自动 DNS 记录配置的注释。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/apps/base/echo/httproute.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apps/base/echo/httproute.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面使用的示例非常简单：所有请求都会转发到 &lt;code&gt;echo-1-echo-server&lt;/code&gt; 服务。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;parentRefs&lt;/code&gt; 指示使用哪个 &lt;code&gt;Gateway&lt;/code&gt;，然后在 &lt;code&gt;rules&lt;/code&gt; 部分定义了路由规则。&lt;/p&gt;
&lt;p&gt;路由规则还可以基于 &lt;code&gt;path&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;foo.bar.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/login&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者基于 HTTP 标头&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们检查服务是否可访问。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl -s http://echo.cloud.ogenki.io | jq -rc &amp;#39;.environment.HOSTNAME&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo-1-echo-server-fd88497d-w6sgn
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;正如你所看到的，该服务以 HTTP 方式暴露，没有证书。让我们尝试解决这个问题。&lt;/p&gt;
&lt;h3 id=&#34;配置-tls-证书&#34;&gt;配置 TLS 证书&lt;/h3&gt;
&lt;p&gt;有多种方法可以使用 GAPI 配置 TLS。在这里，我们将使用最常见的情况：HTTPS 协议和在 Gateway 上终止 TLS。&lt;/p&gt;
&lt;p&gt;假设我们想要配置之前使用的域名 &lt;code&gt;echo.cloud.ogenki.io&lt;/code&gt;。配置主要通过配置 &lt;code&gt;Gateway&lt;/code&gt; 来完成。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/apps/base/echo/tls-gateway.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apps/base/echo/tls-gateway.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;cert-manager.io/cluster-issuer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gatewayClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cilium&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listeners&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;echo.${domain_name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedRoutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Same&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Terminate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certificateRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的关键点是引用一个包含名称为 &lt;code&gt;echo-tls&lt;/code&gt; 的证书的密钥。这个证书可以手动创建，但是为了本文，我选择使用 &lt;strong&gt;Let&amp;rsquo;s Encrypt&lt;/strong&gt; 和 &lt;code&gt;cert-manager&lt;/code&gt; 来自动化这个过程。&lt;/p&gt;
&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;提示&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    &lt;p&gt;}
&lt;strong&gt;cert-manager&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;cert-manager&lt;/code&gt;，自动创建和更新由 &lt;code&gt;Gateway&lt;/code&gt; 暴露的证书非常简单。为此，你需要允许控制器访问 &lt;a href=&#34;https://aws.amazon.com/route53/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;route53&lt;/a&gt;，以解决 DNS01 挑战（这是一种确保客户端只能为自己拥有的域请求证书的机制）。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/security/base/cert-manager/cluster-issuer-staging.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ClusterIssuer&lt;/a&gt; 资源描述了使用 cert-manager 生成证书所需的配置。&lt;/p&gt;
&lt;p&gt;接下来，我们只需要添加一个注释 &lt;code&gt;cert-manager.io/cluster-issuer&lt;/code&gt; 并设置存储证书的 Kubernetes 密钥。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cert-manager.io/docs/usage/gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更多信息&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在演示存储库中，权限是使用 &lt;code&gt;Crossplane&lt;/code&gt; 分配的，它负责在 AWS 中配置这些 IAM 权限。&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;为了使路由正常工作，你还需要将 &lt;code&gt;HTTPRoute&lt;/code&gt; 附加到正确的 &lt;code&gt;Gateway&lt;/code&gt; 并指定域名。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;echo.${domain_name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;几秒钟后，证书将被创建。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;kubectl get cert -n echo
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NAME       READY   SECRET     AGE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo-tls   True    echo-tls   43m
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，我们可以检查证书确实来自 Let&amp;rsquo;s Encrypt，如下所示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl https://echo.cloud.ogenki.io -v 2&amp;gt;&amp;amp;1 | grep -A 6 &amp;#39;Server certificate&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;* Server certificate:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  subject: CN=echo.cloud.ogenki.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  start date: Sep 15 14:43:00 2023 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  expire date: Dec 14 14:42:59 2023 GMT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  subjectAltName: host &amp;#34;echo.cloud.ogenki.io&amp;#34; matched cert&amp;#39;s &amp;#34;echo.cloud.ogenki.io&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  issuer: C=US; O=Let&amp;#39;s Encrypt; CN=R3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;*  SSL certificate verify ok.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;提示&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    GAPI 还允许你配置 &lt;strong&gt;端到端的 TLS&lt;/strong&gt;，一直到容器。这是通过配置 &lt;code&gt;Gateway&lt;/code&gt; 为 &lt;code&gt;Passthrough&lt;/code&gt; 模式并使用 &lt;code&gt;TLSRoute&lt;/code&gt; 资源来完成的。证书也必须由执行 TLS 终止的 pod 携带。
&lt;/div&gt;

&lt;h3 id=&#34;在多个命名空间中共享-gateway&#34;&gt;在多个命名空间中共享 Gateway&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-共享网关&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;共享网关&#34; srcset=&#34;
               /blog/cilium-gateway-api/shared-gateway_hu674c7133083fe92ba85944442e1371df_93399_97766d073a16afb69fb4a8960adda925.webp 400w,
               /blog/cilium-gateway-api/shared-gateway_hu674c7133083fe92ba85944442e1371df_93399_54a309cae4661b3563828ac161178bad.webp 760w,
               /blog/cilium-gateway-api/shared-gateway_hu674c7133083fe92ba85944442e1371df_93399_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-gateway-api/shared-gateway_hu674c7133083fe92ba85944442e1371df_93399_97766d073a16afb69fb4a8960adda925.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      共享网关
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;GAPI&lt;/code&gt;，你可以在 &lt;code&gt;命名空间&lt;/code&gt; 之间路由流量。这得益于每个功能的不同资源：一个 &lt;code&gt;Gateway&lt;/code&gt; 允许配置基础设施，以及 &lt;code&gt;*Routes&lt;/code&gt;。这些路由可以附加到位于另一个命名空间中的 Gateway。因此，不同的团队/项目可以共享相同的基础设施组件。&lt;/p&gt;
&lt;p&gt;但是，这需要指定哪个路由允许引用该 Gateway。在这里，我们假设我们有一个专门用于内部工具的 Gateway，名为 &lt;code&gt;platform&lt;/code&gt;。通过使用 &lt;code&gt;allowedRoutes&lt;/code&gt; 参数，我们明确指定了哪些命名空间允许附加到此 Gateway。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/infrastructure/base/gapi/platform-gateway.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;infrastructure/base/gapi/platform-gateway.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;allowedRoutes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespaces&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Selector&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchExpressions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernetes.io/metadata.name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;In&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;observability&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;flux-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Terminate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;certificateRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;platform-tls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在命名空间 &lt;code&gt;observability&lt;/code&gt; 和 &lt;code&gt;flux-system&lt;/code&gt; 中配置的 &lt;code&gt;HTTPRoutes&lt;/code&gt; 附加到此唯一的 &lt;code&gt;Gateway&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;platform&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;infrastructure&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因此，使用来自云提供商的相同负载均衡器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;NLB_DOMAIN=$(kubectl get svc -n infrastructure cilium-gateway-platform -o jsonpath={.status.loadBalancer.ingress[0].hostname})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;dig +short ${NLB_DOMAIN}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;13.36.89.108
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;dig +short grafana-mycluster-0.cloud.ogenki.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;13.36.89.108
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;&lt;span class=&#34;go&#34;&gt;dig +short gitops-mycluster-0.cloud.ogenki.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;13.36.89.108
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;alert-note-title&#34;&gt;
    &lt;p&gt;注意&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
    这些内部工具不应该暴露在互联网上，但是你知道：这只是一个演示。例如，我们可以使用内部 Gateway（私有 IP）通过调整注释并使用私有连接系统（VPN、隧道等）来实现。
&lt;/div&gt;

&lt;h3 id=&#34;流量分流&#34;&gt;流量分流&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-分流&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;分流&#34; srcset=&#34;
               /blog/cilium-gateway-api/split_hu65c77c2437bb4a145d7de277091dab88_84912_9bf9e528fab131ded16d11b54864e553.webp 400w,
               /blog/cilium-gateway-api/split_hu65c77c2437bb4a145d7de277091dab88_84912_0ef6c9df2a0b5bc65cf0d062c6415d3e.webp 760w,
               /blog/cilium-gateway-api/split_hu65c77c2437bb4a145d7de277091dab88_84912_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-gateway-api/split_hu65c77c2437bb4a145d7de277091dab88_84912_9bf9e528fab131ded16d11b54864e553.webp&#34;
               width=&#34;760&#34;
               height=&#34;517&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      分流
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;由服务网格常常提供的一个功能是在有新版本可用时（A/B 测试或金丝雀部署）对部分流量测试应用程序的能力。&lt;code&gt;GAPI&lt;/code&gt;通过使用权重来实现这一点，使其变得非常简单。&lt;/p&gt;
&lt;p&gt;以下是一个将 5% 的流量转发到服务 &lt;code&gt;echo-2-echo-server&lt;/code&gt; 的示例：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/apps/base/echo/httproute-split.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apps/base/echo/httproute-split.yaml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;split-echo.${domain_name}&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-2-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们检查分发是否按预期进行：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Smana/cilium-gateway-api/blob/main/scripts/check-split.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scripts/check-split.sh&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;./scripts/check-split.sh https://split-echo.cloud.ogenki.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo-1 的请求次数：95
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo-2 的请求次数：5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改标头&#34;&gt;修改标头&lt;/h3&gt;
&lt;p&gt;还可以更改 HTTP &lt;strong&gt;标头&lt;/strong&gt;：添加、修改或删除它们。这些修改可以通过在 &lt;code&gt;HTTPRoute&lt;/code&gt; 清单中使用 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/api-types/httproute#filters-optional&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;filters&lt;/a&gt; 应用于请求标头或响应标头。&lt;/p&gt;
&lt;p&gt;例如，我们将在 &lt;strong&gt;请求&lt;/strong&gt; 中添加一个标头。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PathPrefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/req-header-add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RequestHeaderModifier&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;requestHeaderModifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo-1-echo-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此命令允许查看标头是否确实已添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl -s https://echo.cloud.ogenki.io/req-header-add | jq &amp;#39;.request.headers&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;host&amp;#34;: &amp;#34;echo.cloud.ogenki.io&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;user-agent&amp;#34;: &amp;#34;curl/8.2.1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;accept&amp;#34;: &amp;#34;*/*&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;x-forwarded-for&amp;#34;: &amp;#34;81.220.234.254&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;x-forwarded-proto&amp;#34;: &amp;#34;https&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;x-envoy-external-address&amp;#34;: &amp;#34;81.220.234.254&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;x-request-id&amp;#34;: &amp;#34;320ba4d2-3bd6-4c2f-8a97-74296a9f3f26&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;  &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分配适当的权限&#34;&gt;分配适当的权限&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;GAPI&lt;/code&gt; 提供了一种清晰的权限共享模型，用于管理流量路由基础设施（由集群管理员管理）和应用程序（由开发人员管理）之间的关系。&lt;/p&gt;
&lt;p&gt;多个自定义资源的可用性允许使用 Kubernetes 的 &lt;strong&gt;RBAC&lt;/strong&gt; 配置以声明性方式分配权限。我已经添加了一些示例，这些示例在我的演示集群中没有效果，但可能会给你一个想法。&lt;/p&gt;
&lt;p&gt;下面的配置授予 &lt;code&gt;developers&lt;/code&gt; 组的成员在 echo 命名空间内管理 &lt;code&gt;HTTPRoutes&lt;/code&gt; 的能力，同时仅提供对 &lt;code&gt;Gateways&lt;/code&gt; 的读取权限。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gapi-developer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gateway.networking.k8s.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;httproutes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;apiGroups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gateway.networking.k8s.io&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;gateways&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;verbs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RoleBinding&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gapi-developer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subjects&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Group&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;developers&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;roleRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gapi-developer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;乍一看有点模糊&#34;&gt;乍一看有点模糊&lt;/h2&gt;
&lt;p&gt;人们可能会对通常称为 &lt;code&gt;API 网关&lt;/code&gt; 的东西感到困惑。已经创建了 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/faq/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FAQ&lt;/a&gt; 的一个部分，以澄清它与 &lt;code&gt;Gateway API&lt;/code&gt; 的不同之处。尽管 GAPI 提供了通常在 API 网关中找到的功能，但它主要是 Kubernetes 的一个特定实现。然而，选择这个名称确实可能引起 &lt;strong&gt;混淆&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此外，请注意，本文仅关注入站流量，通常由 &lt;em&gt;Ingress Controllers&lt;/em&gt; 管理，称为 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/concepts/glossary/#northsouth-traffic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;南北&lt;/a&gt;，这实际上是 GAPI 的初始范围。最近的一个名为 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/concepts/gamma/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;GAMMA&lt;/strong&gt;&lt;/a&gt; 的倡议旨在处理 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/concepts/glossary/#eastwest-traffic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;东西流量&lt;/a&gt; 路由，这将在将来标准化某些常见的功能，通常由 &lt;code&gt;Service Meshes&lt;/code&gt; 解决方案提供。（有关更多详细信息，请参阅 &lt;a href=&#34;https://kubernetes.io/blog/2023/08/29/gateway-api-v0-8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此文章&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;最后的想法&#34;&gt;最后的想法&lt;/h2&gt;
&lt;p&gt;老实说，我已经知道 &lt;strong&gt;Gateway API&lt;/strong&gt; 有一段时间了。尽管我读了一些文章，但我并没有真正深入研究过。我会想：“为什么要麻烦呢？我的 &lt;em&gt;Ingress Controller&lt;/em&gt; 可以工作，而且这需要学习曲线。”&lt;/p&gt;
&lt;p&gt;GAPI 正在崭露头角，即将发布 GA 版本。多个 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/implementations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;项目&lt;/a&gt; 已经拥抱它，这个用于管理 Kubernetes 内流量的 API 将迅速成为标准。&lt;/p&gt;
&lt;p&gt;我必须说，配置 GAPI 感觉直观而明确。它的安全模型取得了平衡，赋予开发人员权力而不会损害安全性。而且无缝的基础设施管理？你可以在不触及 &lt;code&gt;*Routes&lt;/code&gt; 的情况下在不同的实现之间切换。&lt;/p&gt;
&lt;p&gt;现在就用 &lt;code&gt;Cilium&lt;/code&gt; 交换我的 Ingress Controller 吗？&lt;strong&gt;还没有，但它即将到来&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;值得强调的是，Cilium 的功能非常广泛：在 Kubernetes 周围有大量的工具，Cilium 脱颖而出，承诺提供指标、跟踪、服务网格、安全性，以及 &lt;em&gt;Ingress Controller&lt;/em&gt; 与 GAPI。&lt;/p&gt;
&lt;p&gt;然而，需要注意一些挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cilium/cilium/issues/21929&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCP 和 UDP 支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cilium/cilium/issues/21928&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GRPC 支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;需要使用变异规则来配置云组件（&lt;a href=&#34;https://github.com/cilium/cilium/issues/25357&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github Issue&lt;/a&gt;）。&lt;/li&gt;
&lt;li&gt;本文讨论的许多功能仍处于实验阶段。例如，最新版本（我写作时的 &lt;code&gt;v1.14.2&lt;/code&gt;）支持的 &lt;a href=&#34;https://github.com/cilium/cilium/pull/27472&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;扩展功能&lt;/a&gt;。我尝试设置一个简单的 HTTP&amp;gt;HTTPS 重定向，但遇到了 &lt;a href=&#34;https://github.com/kubernetes-sigs/gateway-api/issues/1185&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个问题&lt;/a&gt;。因此，我预计 API 将来会有一些修改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然我只是涉及了 Cilium 的 GAPI 能够提供的一小部分内容（老实说，这篇文章已经相当长了），但我希望我们可以很快在生产中使用它。但考虑到前面提到的几点，我建议等待一段时间。不过，如果你想为未来做准备，那么现在是时候了！&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gateway-api.sigs.k8s.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/latest/network/servicemesh/gateway-api/gateway-api/#gs-gateway-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.cilium.io/en/latest/network/servicemesh/gateway-api/gateway-api/#gs-gateway-api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://isovalent.com/blog/post/cilium-gateway-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://isovalent.com/blog/post/cilium-gateway-api/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://isovalent.com/blog/post/tutorial-getting-started-with-the-cilium-gateway-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://isovalent.com/blog/post/tutorial-getting-started-with-the-cilium-gateway-api/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Isovalent 的 &lt;a href=&#34;https://isovalent.com/resource-library/labs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;labs&lt;/a&gt; 是开始使用 Gateway API 并且你将获得新的徽章以添加到你的收藏中的好方法&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ciilium 的相互认证如何危及安全</title>
      <link>https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/</link>
      <pubDate>Fri, 01 Dec 2023 10:33:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/</guid>
      <description>&lt;p&gt;本文译自：&lt;a href=&#34;https://thenewstack.io/how-ciliums-mutual-authentication-can-compromise-security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://thenewstack.io/how-ciliums-mutual-authentication-can-compromise-security/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：这篇文章是关于如何使用 Cilium 来实现 互相认证 (mTLS) 的，以及这种方法可能带来的安全问题。文章介绍了 Cilium 的特点和功能，以及如何使用 Cilium CLI 或 Hubble UI 来创建和管理证书和策略。文章还分析了 Cilium 的互相认证的局限和风险，例如证书过期，撤销，泄露和伪造等。文章的目的是帮助用户了解和使用 Cilium 来提高服务间的安全性。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最近，Cilium 项目宣布支持一种&lt;a href=&#34;https://docs.cilium.io/en/latest/network/servicemesh/mutual-authentication/mutual-authentication/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;新的双向认证机制&lt;/a&gt;，可以通过简单的配置标志透明地部署到应用程序中。从表面上看，这似乎是一种简单的方法，可以使用 Cilium 为 Kubernetes 工作负载实现服务之间的双向认证。然而，这种设计存在一个严重的缺陷，不容忽视：&lt;/p&gt;
&lt;p&gt;Cilium 中的双向认证的整个基础是&lt;em&gt;最终一致性&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;在安全实现的数据路径中，最终一致性可能导致意图中的安全属性失败，并且可能导致在不应该允许的情况下服务之间的流量继续传递。&lt;/p&gt;
&lt;h2 id=&#34;cilium-双向认证的工作原理&#34;&gt;Cilium 双向认证的工作原理&lt;/h2&gt;
&lt;p&gt;Cilium 的自定义双向认证机制会透明地对服务之间的流进行身份验证，并构建在 Cilium 的现有扩展伯克利数据包过滤器（&lt;a href=&#34;https://thenewstack.io/ebpf-offers-a-new-way-to-secure-cloud-native-systems/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt;）数据平面之上。Cilium 使用 eBPF 来实现诸如服务网络、网络策略和连接处理等功能。&lt;/p&gt;
&lt;p&gt;Cilium 使用“无双向传输层安全（mTLS-less）”（或 mTLess）来对服务进行身份验证。我称之为“less”，因为它没有使用 mTLS 来完成 mTLS 设计的任务：验证、加密和检查在两个对等方之间传输的数据的完整性。Cilium 的双向认证实现&lt;em&gt;不是 mTLS&lt;/em&gt;，我将在下面解释。&lt;/p&gt;
&lt;p&gt;当服务（或 Pod）A 想要与服务（或 Pod）B 通信时，Cilium 会尝试对这两个对等方进行身份验证，然后标记一个特殊的本地节点“身份验证缓存”，指示是否允许特定流。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-1由于未经身份验证而丢弃的初始连接&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 1：由于未经身份验证而丢弃的初始连接。&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f1_hu94feb57f32cb77e30649409eb45961de_33552_5f09419bca41243023b1b3fbc2debeaa.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f1_hu94feb57f32cb77e30649409eb45961de_33552_fce03d756bd012a55d53080c0257a3d4.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f1_hu94feb57f32cb77e30649409eb45961de_33552_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f1_hu94feb57f32cb77e30649409eb45961de_33552_5f09419bca41243023b1b3fbc2debeaa.webp&#34;
               width=&#34;760&#34;
               height=&#34;293&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 1：由于未经身份验证而丢弃的初始连接。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当 Pod A 想要与 Pod B 通信时，它会通过正常的 Cilium eBPF 数据平面流动，但 eBPF 代码会检查该连接是否已通过检查本地节点身份验证缓存进行身份验证。在第一次尝试时，该调用将不会得到身份验证，因此&lt;a href=&#34;https://github.com/cilium/cilium/issues/23808&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 将丢弃数据包&lt;/a&gt;。但这将触发一个在幕后进行的机制，尝试对 Pod A 和 Pod B 之间的流进行身份验证。如果成功，它将更新本地节点身份验证缓存。&lt;/p&gt;
&lt;p&gt;期望的是，在幕后的机制能够快速进行 Pod A 呼叫 Pod B 的身份验证，以便最初丢弃的数据包将被重试，不会导致太多延迟。在幕后使用的机制是从运行在 Pod B 所在节点上的 cilium-agent（使用&lt;a href=&#34;https://roadmap.sh/golang&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt;编写）到另一个 cilium-agent 的“mTLess”连接。所有这些都不会在 eBPF 数据平面中发生，而是在用户空间的 Cilium 代理中进行。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-2如果两个不同节点上运行的-cilium-agent-之间的-mtls-连接成功则认为流是经过身份验证的&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 2：如果两个不同节点上运行的 cilium-agent 之间的 mTLS 连接成功，则认为流是经过身份验证的。&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f2_hu52d94383cf3b4e196078516d3500571d_43528_3ebad47713734c345fccd2e25d180fcf.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f2_hu52d94383cf3b4e196078516d3500571d_43528_715f04efe56d75a5087dbc3f271f873b.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f2_hu52d94383cf3b4e196078516d3500571d_43528_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f2_hu52d94383cf3b4e196078516d3500571d_43528_3ebad47713734c345fccd2e25d180fcf.webp&#34;
               width=&#34;760&#34;
               height=&#34;380&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 2：如果两个不同节点上运行的 cilium-agent 之间的 mTLS 连接成功，则认为流是经过身份验证的。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我将这个连接称为“mTLess”，因为它用于测试身份验证并立即关闭，并且所有用于加密和完整性的协商的会话密钥都会被丢弃。也就是说，Cilium 不会在连接的整个生命周期内保留 mTLS 安全属性；它只使用握手的身份验证部分。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-3在握手后cilium-终止-mtless-连接&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 3：在握手后，Cilium 终止 mTLess 连接。&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f3_hu3d2666b07117459a758a5a756c216963_57643_a6604342e116257c419ba82c940db6c3.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f3_hu3d2666b07117459a758a5a756c216963_57643_1b7faf60bb3c6bb342c14163e1963418.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f3_hu3d2666b07117459a758a5a756c216963_57643_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f3_hu3d2666b07117459a758a5a756c216963_57643_a6604342e116257c419ba82c940db6c3.webp&#34;
               width=&#34;760&#34;
               height=&#34;284&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 3：在握手后，Cilium 终止 mTLess 连接。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果此 mTLess 连接成功（即握手成功），Cilium 将考虑将来自 Pod A 到 Pod B 的流程视为“已验证”。此时，本地节点身份验证缓存中的条目将被更新，以指示应允许来自 Pod A 到 Pod B 的流程。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-4cilium-更新身份验证缓存指示-pod-a-具有呼叫-pod-b-的身份验证&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 4：Cilium 更新身份验证缓存，指示 Pod A 具有呼叫 Pod B 的身份验证。&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f4_huedce182ff0c7b31fd6e184ab21f6a5de_43071_a4427aa3e293345fa507b4007b08b141.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f4_huedce182ff0c7b31fd6e184ab21f6a5de_43071_81fc2afdc21bc2abe2b74f86b96bd229.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f4_huedce182ff0c7b31fd6e184ab21f6a5de_43071_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f4_huedce182ff0c7b31fd6e184ab21f6a5de_43071_a4427aa3e293345fa507b4007b08b141.webp&#34;
               width=&#34;760&#34;
               height=&#34;329&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 4：Cilium 更新身份验证缓存，指示 Pod A 具有呼叫 Pod B 的身份验证。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;现在，当它重试连接数据包时，身份验证缓存将指示流程已经通过身份验证，应允许连接并继续 eBPF 数据平面的其余部分（该部分强制执行网络和其他策略）。这个本地节点身份验证缓存确实表现出最终一致性的迹象，可能会失去同步，但这并不是最令人担忧的最终一致性属性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-5一旦缓存已更新并重试数据包连接将会流动&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 5：一旦缓存已更新并重试数据包，连接将会流动。&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f5_huba7a6f742d9ae64733c6848223ae9dd4_42521_a88225ebe16182cd84d525d3ebdeafa8.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f5_huba7a6f742d9ae64733c6848223ae9dd4_42521_00676ec97556978325e44d7a5f08f8a5.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f5_huba7a6f742d9ae64733c6848223ae9dd4_42521_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f5_huba7a6f742d9ae64733c6848223ae9dd4_42521_a88225ebe16182cd84d525d3ebdeafa8.webp&#34;
               width=&#34;760&#34;
               height=&#34;267&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 5：一旦缓存已更新并重试数据包，连接将会流动。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;cilium-方法的主要问题&#34;&gt;Cilium 方法的主要问题&lt;/h2&gt;
&lt;p&gt;对于真正的 mTLS 连接，在成功握手之后，您希望使用在参与各方之间协商的密钥来加密剩余的数据。Cilium 中流的成功认证并不意味着它是加密的（它将是纯文本），也不保证流量以一种仅对相关方可见的方式进行加密。如果您需要加密，可以使用基于 WireGuard（或 IPSec）的 Cilium 加密选项，但这只是两个 Kubernetes 节点之间的加密，而不是特定的已认证的工作负载。在“mTLess”连接检查和将实际（敏感）数据放入线路之间，可能会发生很多事情。&lt;/p&gt;
&lt;p&gt;随着一些 Cilium 开发人员继续迭代这个实现，有关将 mTLS 连接中协商的某些密钥转移到底层节点到节点加密方法（例如 IPSec）的谈论。这个实现还有待观察。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-6具有不同会话密钥的流量&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 6：具有不同会话密钥的流量&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f6_hu02b66137872ca125620a70e5dec93203_50734_e9f1c4ba5e65a4e5d4580d0a8b858c87.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f6_hu02b66137872ca125620a70e5dec93203_50734_2db0f2c55af0a8221e07bb7eeacd2ff9.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f6_hu02b66137872ca125620a70e5dec93203_50734_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f6_hu02b66137872ca125620a70e5dec93203_50734_e9f1c4ba5e65a4e5d4580d0a8b858c87.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 6：具有不同会话密钥的流量
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-7基于-wireguard-的加密&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 7：基于 WireGuard 的加密。&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f7_hu1a3982a82c4bcbe670f00eb84b119343_49359_adfcc5ab5e0c3452f894e5a83ad861b5.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f7_hu1a3982a82c4bcbe670f00eb84b119343_49359_4d3bcd3748d53ef2f816730dbaf14aea.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f7_hu1a3982a82c4bcbe670f00eb84b119343_49359_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f7_hu1a3982a82c4bcbe670f00eb84b119343_49359_adfcc5ab5e0c3452f894e5a83ad861b5.webp&#34;
               width=&#34;760&#34;
               height=&#34;423&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 7：基于 WireGuard 的加密。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Cilium 最终一致性双向认证实现的真正问题出现在 Cilium 的核心身份模型周围。我在上面简要介绍了 TLS 握手，但如果您阅读 Cilium 文档，您会看到用于“mTLess”的 X509 证书具有可选基于&lt;a href=&#34;https://thenewstack.io/the-rise-of-workload-identity-in-cloud-native-with-spiffe-spire/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPIFFE&lt;/a&gt;（Secure Production Identity Framework For Everyone）的身份模型。实际上，在部署实现 Cilium 双向认证所需的组件时，您可以选择部署 SPIFFE Runtime Environment（SPIRE），这是 SPIFFE 的一个实现，Cilium 使用它来生成代表工作负载及其身份的证书。&lt;/p&gt;
&lt;p&gt;这个 SPIFFE 身份用于握手所使用的证书，&lt;em&gt;但 SPIFFE 不是 Cilium 中使用的基础通用工作负载身份&lt;/em&gt;。SPIFFE 用作独立的身份层，映射到 Cilium 现有身份实现。Cilium 在其&lt;a href=&#34;https://doc.crds.dev/github.com/cilium/cilium/cilium.io/CiliumIdentity/v2@1.9.3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;核心身份&lt;/a&gt;概念周围构建了所有的网络策略。CiliumIdentity 实现将一个整数映射到一组 IP 地址（与一组 Pod 关联的 Pod IP）。这个“整数”及其映射到 Pod IP 地址的方式代表了&lt;em&gt;Cilium 中的核心身份原语&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-8cilium-的核心身份原语基于在每个节点上的本地缓存中映射到-ip-地址的整数&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 8：Cilium 的核心身份原语基于在每个节点上的本地缓存中映射到 IP 地址的整数。&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f8_hub131bbebecb097ab2c779305be2aca06_55180_e0691a9b13b4a6cb2bdbfde4d43bb94d.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f8_hub131bbebecb097ab2c779305be2aca06_55180_de1646be68b05c5945a06150bcce84cb.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f8_hub131bbebecb097ab2c779305be2aca06_55180_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f8_hub131bbebecb097ab2c779305be2aca06_55180_e0691a9b13b4a6cb2bdbfde4d43bb94d.webp&#34;
               width=&#34;760&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 8：Cilium 的核心身份原语基于在每个节点上的本地缓存中映射到 IP 地址的整数。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们在博客文章“&lt;a href=&#34;https://www.solo.io/blog/could-network-cache-based-identity-be-mistaken/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络基于缓存的身份可能会被误解吗？&lt;/a&gt;”中详细讨论了这个问题。由于这个问题，我们建议在考虑使用依赖身份到 IP 地址映射的容器网络接口（CNI）和&lt;a href=&#34;https://thenewstack.io/secure-your-service-mesh-a-13-item-checklist/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格&lt;/a&gt;进行网络安全时采取深度防御姿态。&lt;/p&gt;
&lt;p&gt;问题的关键在于：&lt;/p&gt;
&lt;p&gt;为集群中的每个身份的所有 IP 映射&lt;em&gt;都存在于集群中每个节点上的本地缓存中&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-9显示每个身份的-ip-的图表&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 9：显示每个身份的 IP 的图表&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f9_hued5a97755ae5449d607a28a02809c90a_70758_485339a5bf1ec13cf0cd0f287b080dcf.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f9_hued5a97755ae5449d607a28a02809c90a_70758_f4dbb82504cec296900bcf22d439535b.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f9_hued5a97755ae5449d607a28a02809c90a_70758_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f9_hued5a97755ae5449d607a28a02809c90a_70758_485339a5bf1ec13cf0cd0f287b080dcf.webp&#34;
               width=&#34;760&#34;
               height=&#34;461&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 9：显示每个身份的 IP 的图表
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-图-10最终一致性问题的图表&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;图 10：最终一致性问题的图表&#34; srcset=&#34;
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f10_hu19468d410a278c3ef2edf690c8d3e4f6_74498_e1a25be7393a80f2848a3777e1779151.webp 400w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f10_hu19468d410a278c3ef2edf690c8d3e4f6_74498_01584ee297545c53787f6a268ce798c7.webp 760w,
               /blog/how-ciliums-mutual-authentication-can-compromise-security/f10_hu19468d410a278c3ef2edf690c8d3e4f6_74498_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-ciliums-mutual-authentication-can-compromise-security/f10_hu19468d410a278c3ef2edf690c8d3e4f6_74498_e1a25be7393a80f2848a3777e1779151.webp&#34;
               width=&#34;760&#34;
               height=&#34;452&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      图 10：最终一致性问题的图表
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了使 Cilium 的双向认证和策略执行正常工作，必须使用正确的 IP 到身份映射更新这些缓存。然而，在集群中的所有节点上更新单独的缓存&lt;em&gt;是一种最终一致性操作&lt;/em&gt;。当 Cilium 的 eBPF 数据平面尝试推理连接策略时，它将参考其节点本地缓存中的 IP 到身份映射。&lt;em&gt;如果该缓存过期或延迟&lt;/em&gt;，将导致不正确的网络策略（可能不符合要求，允许恶意活动，威胁数据等）。无论您是否使用 WireGuard 或 IPSec 来加密节点之间的流量，这都不会影响此身份混淆场景。&lt;/p&gt;
&lt;p&gt;这个演示说明了在使用 Cilium 的双向认证时可能导致违反网络策略的身份混淆：&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;因此，总结一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cilium 项目引入了一种新颖的 Kubernetes 工作负载的双向认证机制。&lt;/li&gt;
&lt;li&gt;Cilium 中的双向认证建立在最终一致性之上，可能会危及安全性。&lt;/li&gt;
&lt;li&gt;Cilium 使用“mTLess”进行身份验证，但不会维护整个连接的加密。&lt;/li&gt;
&lt;li&gt;Cilium 的身份模型包括 SPIFFE，但其核心身份是一个基于整数的单独身份层。&lt;/li&gt;
&lt;li&gt;核心问题在于，IP 到身份的映射存储在每个节点上的本地缓存中，这可能导致最终一致性的更新。&lt;/li&gt;
&lt;li&gt;在 Cilium 的双向认证中的最终一致性可能导致不正确的网络策略和安全漏洞。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要正确使用依赖身份到 IP 地址映射的 CNI，请考虑采用深度防御姿态，将一个服务网格（如 Istio Ambient）叠加在其上。Istio Ambient 实现了一种无 sidecar 的服务网格，在服务之间的数据路径上使用 mTLS（无论其 IP 地址如何）。在&lt;a href=&#34;https://thenewstack.io/solo-io-istio-is-winning-the-service-mesh-war/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;像 Istio 这样的服务网格&lt;/a&gt;中，身份模型是由 SPIFFE 定义的，并根据负责签署用于身份验证流量的证书的证书颁发机构建立的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>深入了解 Cilium 多集群</title>
      <link>https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/</link>
      <pubDate>Wed, 03 Jul 2019 10:59:29 +0800</pubDate>
      <guid>https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/</guid>
      <description>&lt;p&gt;本文是对 ClusterMesh（Cilium 的多集群实现）的深入研究。简而言之，ClusterMesh 提供：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过隧道或直接路由，以本地性能对多个 Kubernetes 集群进行 Pod IP 路由，而无需任何网关或代理。&lt;/li&gt;
&lt;li&gt;使用标准Kubernetes服务和coredns/kube-dns的透明服务发现。&lt;/li&gt;
&lt;li&gt;跨多个集群的网络策略实施。策略可以指定为 Kubernetes NetworkPolicy 资源或扩展的 CiliumNetworkPolicy CRD。&lt;/li&gt;
&lt;li&gt;透明加密，用于本地集群中的节点之间以及跨集群边界的所有通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-f7dca3e31d252eb9_hu03c7b745d76382844e2f907ac6abb3f9_8392_8d4ddbf65febdaaed8ba5a4aacd2b485.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-f7dca3e31d252eb9_hu03c7b745d76382844e2f907ac6abb3f9_8392_152e3cf117fee90d069d21bef3a750b8.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-f7dca3e31d252eb9_hu03c7b745d76382844e2f907ac6abb3f9_8392_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-f7dca3e31d252eb9_hu03c7b745d76382844e2f907ac6abb3f9_8392_8d4ddbf65febdaaed8ba5a4aacd2b485.webp&#34;
               width=&#34;736&#34;
               height=&#34;213&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;多集群功能以层为单位构建，您可以选择使用所有层，也可以仅选择和使用所需的层。&lt;/p&gt;
&lt;h2 id=&#34;用例&#34;&gt;用例&lt;/h2&gt;
&lt;p&gt;在深入研究实现细节之前，让我们回顾一下连接多个 Kubernetes 集群的一些用例。&lt;/p&gt;
&lt;h3 id=&#34;用例高可用性&#34;&gt;用例：高可用性&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-5d69ac8aba6c7b47_hufac25778e34418c908abbee77fef386b_88839_3acab47a5f69e318c73a2e99b849f03f.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-5d69ac8aba6c7b47_hufac25778e34418c908abbee77fef386b_88839_67318cf5f0d68d2c59ef90871f5b2763.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-5d69ac8aba6c7b47_hufac25778e34418c908abbee77fef386b_88839_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-5d69ac8aba6c7b47_hufac25778e34418c908abbee77fef386b_88839_3acab47a5f69e318c73a2e99b849f03f.webp&#34;
               width=&#34;760&#34;
               height=&#34;254&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于大多数人来说，高可用性是最明显的用例。此用例包括在多个区域（regions）或可用区（availability zones）中运行 Kubernetes 集群，并在每个集群中运行相同服务的副本。一旦失败，请求可以故障转移到其他集群。此用例中涵盖的故障情形主要不是整个区域或故障域的完全不可用。更可能的情况是一个集群中资源暂时不可用或配置错误导致无法在一个集群中运行或扩展特定服务。&lt;/p&gt;
&lt;h3 id=&#34;用例共享服务&#34;&gt;用例：共享服务&lt;/h3&gt;
&lt;p&gt;基于 Kubernetes 的平台的最初趋势是构建大型多租户 Kubernetes 集群。为每个租户构建单个集群或为不同类别的服务构建集群越来越普遍，例如，不同级别的安全敏感度。
















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-c950c8dfbc5a9b0d_hu2788677e28cb25fdd09edaefafc23c31_77373_0d1a260db892a88be33801f420836fab.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-c950c8dfbc5a9b0d_hu2788677e28cb25fdd09edaefafc23c31_77373_fd32605d6f2de02d7bf875c77581d7ea.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-c950c8dfbc5a9b0d_hu2788677e28cb25fdd09edaefafc23c31_77373_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-c950c8dfbc5a9b0d_hu2788677e28cb25fdd09edaefafc23c31_77373_0d1a260db892a88be33801f420836fab.webp&#34;
               width=&#34;760&#34;
               height=&#34;330&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;

但是，某些服务（如密钥管理，日志记录，监控或 DNS）通常仍在所有集群之间共享。这避免了在每个租户集群中维护这些服务的操作开销。&lt;/p&gt;
&lt;p&gt;此模型的主要动机是租户集群之间的隔离，为了维持该目标，租户集群连接到共享服务集群但未连接到其他租户集群。&lt;/p&gt;
&lt;h3 id=&#34;用例拆分有状态和无状态服务&#34;&gt;用例：拆分有状态和无状态服务&lt;/h3&gt;
&lt;p&gt;运行有状态或无状态服务的操作复杂性是非常不同的。无状态服务易于扩展，迁移和升级。完全使用无状态服务运行集群可使集群保持灵活和敏捷。从一个云提供商迁移到另一个云提供商非常简单。&lt;/p&gt;
&lt;p&gt;有状态服务可能会引入潜在的复杂依赖链。迁移服务通常涉及存储迁移。
















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-98e2a381af81e811_hu2e2cbe6d41af9b9e77ff23f9ddaaeb98_108463_ab119ad04a53004401751b7c5b050d4f.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-98e2a381af81e811_hu2e2cbe6d41af9b9e77ff23f9ddaaeb98_108463_266bf533c204851dda0cbd2a7f47255f.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-98e2a381af81e811_hu2e2cbe6d41af9b9e77ff23f9ddaaeb98_108463_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-98e2a381af81e811_hu2e2cbe6d41af9b9e77ff23f9ddaaeb98_108463_ab119ad04a53004401751b7c5b050d4f.webp&#34;
               width=&#34;760&#34;
               height=&#34;358&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;

为无状态和有状态分别运行独立的集群允许将依赖复杂性隔离到较少数量的集群，并使无状态集群依赖性保持自由。&lt;/p&gt;
&lt;h2 id=&#34;控制平面&#34;&gt;控制平面&lt;/h2&gt;
&lt;h3 id=&#34;要求&#34;&gt;要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;必须为所有 Kubernetes 工作节点分配唯一的 IP 地址，并且所有工作节点必须在彼此之间具有 IP 连接。&lt;/li&gt;
&lt;li&gt;必须为所有集群分配唯一的 PodCIDR 区间。&lt;/li&gt;
&lt;li&gt;必须将 Cilium 配置为使用 etcd 的 kvstore。&lt;/li&gt;
&lt;li&gt;集群之间的网络必须允许集群间通信。防火墙的具体配置要求将取决于 Cilium 是否配置为以直接路由或隧道模式运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;
&lt;p&gt;控制平面基于 etcd 并尽可能保持简约：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个 Kubernetes 集群都维护自己的 etcd 集群，包含该集群的状态。来自多个集群的状态永远不会在 etcd 本身中混淆。&lt;/li&gt;
&lt;li&gt;每个集群通过一组 etcd 代理公开它自己的 etcd。在其他集群中运行的 Cilium 代理连接到 etcd 代理以监视更改并将多集群相关状态复制到自己的集群中。使用 etcd 代理确保了 etcd 观察者的可扩展性。访问受 TLS 证书保护。&lt;/li&gt;
&lt;li&gt;从一个集群到另一个集群的访问始终是只读的。这确保了故障域保持不变，即一个集群中的故障永远不会传播到其他集群中。&lt;/li&gt;
&lt;li&gt;配置通过简单的 Kubernetes secrets 资源进行，该资源包含远程 etcd 代理的寻址信息以及访问 etcd 代理所需的集群名称和证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-47bf320d6635c354_hu533b6f661595074e9a3ce46f8098a343_122359_f7060cc1dc988407e53de15123a18bd3.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-47bf320d6635c354_hu533b6f661595074e9a3ce46f8098a343_122359_654dbdcd8f70422fd31b98381185ee72.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-47bf320d6635c354_hu533b6f661595074e9a3ce46f8098a343_122359_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-47bf320d6635c354_hu533b6f661595074e9a3ce46f8098a343_122359_f7060cc1dc988407e53de15123a18bd3.webp&#34;
               width=&#34;760&#34;
               height=&#34;261&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;pod-ip-路由&#34;&gt;Pod IP 路由&lt;/h2&gt;
&lt;p&gt;pod IP 路由是多集群能力的基础。它允许跨集群的 pod 通过其 pod IP 相互联系。Cilium 可以在多种模式下运行以执行 pod IP 路由。所有这些模式都能够执行多集群 pod IP 路由。&lt;/p&gt;
&lt;h3 id=&#34;隧道模式&#34;&gt;隧道模式&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-1488d363a7db42ae_hud746943c5461e2b41613a320807f92c8_9034_9595b3d51326ac29f6edb1227beeeeb9.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-1488d363a7db42ae_hud746943c5461e2b41613a320807f92c8_9034_5b2b5c9ed3168673626a7352e4f11c65.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-1488d363a7db42ae_hud746943c5461e2b41613a320807f92c8_9034_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-1488d363a7db42ae_hud746943c5461e2b41613a320807f92c8_9034_9595b3d51326ac29f6edb1227beeeeb9.webp&#34;
               width=&#34;706&#34;
               height=&#34;239&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;隧道模式将 pod 中发出的所有网络数据包封装在所谓的封包头中。封包头可以包含 VXLAN 或 Geneve 帧。然后通过标准 UDP 包头传输该封装帧。该概念类似于 VPN 隧道。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：pod IP 在底层网络上永远不可见。网络只能看到工作节点的 IP 地址。这可以简化安装和防火墙规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：所需的额外网络标头将降低网络的理论最大吞吐量。确切的成本取决于配置的 MTU，与使用 MTU 9000 的巨型帧相比，使用 1500 的传统 MTU 时会更加明显。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：为了不消耗过多 CPU，包括底层硬件在内的整个网络堆栈必须支持校验和和分段卸载，以计算校验和并在硬件中执行分段，就像对“常规”网络数据包所做的那样。如今，这种卸载功能的可用性非常常见。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;直接路由模式&#34;&gt;直接路由模式&lt;/h3&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-51340f50bb80261e_hue93f7517bedffd09e7281d2bbad1d6ce_8123_82ba56d42dc3b58daaa7dc20d220d116.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-51340f50bb80261e_hue93f7517bedffd09e7281d2bbad1d6ce_8123_d14dc78a012223208fbccf8cbfccd735.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-51340f50bb80261e_hue93f7517bedffd09e7281d2bbad1d6ce_8123_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-51340f50bb80261e_hue93f7517bedffd09e7281d2bbad1d6ce_8123_82ba56d42dc3b58daaa7dc20d220d116.webp&#34;
               width=&#34;706&#34;
               height=&#34;240&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在直接路由模式中，所有网络数据包都直接路由到网络。这要求网络能够路由 pod IP。可以使用多个选项实现跨节点传播 pod IP 路由信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;--auto-direct-node-routes&lt;/code&gt;选项，这是通过 kvstore 的超轻量级路由传播方法，如果所有工作节点共享一个单一的 2 层网络，该选项将起作用。对于所有形式的基于云提供商的虚拟网络，通常都满足此要求。&lt;/li&gt;
&lt;li&gt;使用&lt;a href=&#34;http://docs.cilium.io/en/stable/gettingstarted/kube-router/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kube-router 集成&lt;/a&gt;运行 BGP 路由守护进程。&lt;/li&gt;
&lt;li&gt;使用任何其他路由守护进程将路由注入标准 Linux 路由表（bird，quagga，&amp;hellip;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当网络不再理解 pod IP 时，网络数据包地址需要伪装。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点&lt;/strong&gt;：减少的网络数据包标头可以优化网络吞吐量和延迟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点&lt;/strong&gt;：整个网络必须能够路由 pod IP，这会增加操作的复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;混合路由模式&#34;&gt;混合路由模式&lt;/h3&gt;
&lt;p&gt;混合路由模式允许在可用时使用直接路由，这通常在本地集群或同一 VPC 中的其他集群中，而当跨越 VPC 或云提供商时可以回退到隧道模式。这可以限制操作复杂性并且允许仅在需要时支付优化成本。&lt;/p&gt;
&lt;h2 id=&#34;服务发现&#34;&gt;服务发现&lt;/h2&gt;
&lt;p&gt;Cilium 的多集群模型的服务发现是使用标准的 Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;services&lt;/a&gt; 构建的，旨在对现有的 Kubernetes 应用程序部署完全透明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rebel-base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium/global-service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rebel-base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Cilium 通过一个注释&lt;code&gt;io.cilium/global-service: &amp;quot;true&amp;quot;&lt;/code&gt; 来监控 Kubernetes 服务和端点以及监听服务。对于此类服务，具有相同名称和命名空间信息的所有服务将自动合并在一起，并形成跨集群可用的全局服务。&lt;/li&gt;
&lt;li&gt;根据标准 Kubernetes 运行状况检查逻辑，任何到全局服务的 ClusterIP 的流量都将自动负载平衡到所有集群中的端点。&lt;/li&gt;
&lt;li&gt;每个集群继续为每个服务维护自己的 ClusterIP，这意味着 Kubernetes 和 kube-dns / coredns 不知道其他集群。DNS 服务器继续返回仅在本地集群中有效的 ClusterIP，Cilium 将透明地执行负载平衡。&lt;/li&gt;
&lt;li&gt;对于细粒度控制存在若干附加注释，例如单向暴露或亲和策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-b027eb4bd91ead46_hufc8898f95aa4f70b93e92639776a738b_80555_9e7275b79637665a35511e404f8e623a.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-b027eb4bd91ead46_hufc8898f95aa4f70b93e92639776a738b_80555_89635a8e367235899410da6754d2d500.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-b027eb4bd91ead46_hufc8898f95aa4f70b93e92639776a738b_80555_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-b027eb4bd91ead46_hufc8898f95aa4f70b93e92639776a738b_80555_9e7275b79637665a35511e404f8e623a.webp&#34;
               width=&#34;760&#34;
               height=&#34;255&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;frontend-1&lt;/code&gt;到 ClusterIP &lt;code&gt;30.1.1.1&lt;/code&gt;的所有流量将自动负载均衡到集群 1 的后端 pod IP&lt;code&gt;[10.0.0.1,10.0.0.2]&lt;/code&gt;以及集群 2 的后端 pod IP&lt;code&gt;[20.0.0.1,20.0.0.2]&lt;/code&gt;。每个集群将执行本地后端实例的运行状况检查，并在容器创建，销毁或变得不健康时通知其他集群。&lt;/p&gt;
&lt;h2 id=&#34;透明加密&#34;&gt;透明加密&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io/blog/2019/02/12/cilium-14/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 1.4&lt;/a&gt;中引入的透明加密与多集群兼容。确保使用公共密钥配置所有集群中的所有节点，如此节点之间的所有通信都会自动加密。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-be3e56c01fa1ef78_hua69c29a8d100a23bdbab8d054ad11322_7214_02727162994640930619d5d581da5c7b.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-be3e56c01fa1ef78_hua69c29a8d100a23bdbab8d054ad11322_7214_062879b77cb07c34a487b2f990f9bf01.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-be3e56c01fa1ef78_hua69c29a8d100a23bdbab8d054ad11322_7214_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-be3e56c01fa1ef78_hua69c29a8d100a23bdbab8d054ad11322_7214_02727162994640930619d5d581da5c7b.webp&#34;
               width=&#34;709&#34;
               height=&#34;209&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;多集群的网络策略&#34;&gt;多集群的网络策略&lt;/h2&gt;
&lt;p&gt;简单版本是您从单个集群中熟悉的策略实施将简单地扩展并跨集群工作。由于策略是使用 pod 标签指定的，因此允许&lt;code&gt;frontend&lt;/code&gt;与&lt;code&gt;backend&lt;/code&gt;通信的策略将应用于集群流量，就像流量跨越集群一样。&lt;/p&gt;
&lt;p&gt;Cilium&lt;strong&gt;不会&lt;/strong&gt;跨集群自动传播 NetworkPolicy 或 CiliumNetworkPolicy。用户有责任将策略导入所有集群。这是有意为之，因为这意味着每个集群都可以决定是否允许集群接收来自远程集群的通信或者发出到远程集群的通信。&lt;/p&gt;
&lt;h3 id=&#34;允许特定集群的交叉路径&#34;&gt;允许特定集群的交叉路径&lt;/h3&gt;
&lt;p&gt;可以仅建立适用于特定集群中的 pod 的策略。集群名称由 Cilium 表示为每个 pod 上的标签，允许匹配的集群名称可以是&lt;code&gt;endpointSelector&lt;/code&gt;或者是由&lt;code&gt;toEndpoints&lt;/code&gt;和&lt;code&gt;fromEndpoints&lt;/code&gt;构造的&lt;code&gt;matchLabels&lt;/code&gt;标签：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;allow-cross-cluster&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Allow x-wing in cluster1 to contact rebel-base in cluster2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;x-wing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium.k8s.policy.cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;rebel-base&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;io.cilium.k8s.policy.cluster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cluster2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的示例策略将允许 cluster1 中的&lt;code&gt;x-wing&lt;/code&gt;与 cluster2 中的&lt;code&gt;rebel-base&lt;/code&gt;对话。除非存在将通信列入白名单的附加策略，否则 x-wing 将无法与本地集群中的 rebel-base 通信。&lt;/p&gt;
&lt;h2 id=&#34;与-istio-多集群的关系&#34;&gt;与 Istio 多集群的关系&lt;/h2&gt;
&lt;p&gt;这两个项目都是独立的，但可以很好地相互补充。组合 Cilium 和 Istio 多集群的常用方法是使用 Cilium 的多集群 Pod IP 路由层来满足&lt;a href=&#34;https://istio.io/docs/setup/kubernetes/multicluster-install/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 多集群指南&lt;/a&gt;的以下要求：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;每个集群中的所有 pod CIDR 必须可以相互路由。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，Cilium 策略执行功能可用于保护与 Istio 控制平面之间的通信，以及通过不支持的协议（如 UDP 或 IPV6）保护 sidecar 的旁路尝试，以及防止受损的 sidecar 代理。&lt;/p&gt;
&lt;p&gt;还可以同时运行全局 Istio 服务和 Cilium 全局服务。所有 Istio 托管服务都可以获得 Cilium 的全局服务，因为它们可以像常规服务一样通过 DNS 发现。&lt;/p&gt;
&lt;h2 id=&#34;准备开始&#34;&gt;准备开始&lt;/h2&gt;
&lt;p&gt;要开始使用，请按照手把手的&lt;a href=&#34;http://docs.cilium.io/en/stable/gettingstarted/clustermesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ClusterMesh 教程&lt;/a&gt;进行操作，该教程将指导您完成将集群连接在一起的过程。请务必加入我们的&lt;a href=&#34;https://cilium.herokuapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack 频道&lt;/a&gt;，提出问题并展示您的设置。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-imagepng&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;image.png&#34; srcset=&#34;
               /blog/deep-dive-into-cilium-multi-cluster/14871146-112faa9f90a9352b_hu06a8be1f573830a38848fe9dbdeb916c_86239_2c642dbf8bef45ac82ec78218c82cea6.webp 400w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-112faa9f90a9352b_hu06a8be1f573830a38848fe9dbdeb916c_86239_89115eea73759d4ce643395c816b8b7a.webp 760w,
               /blog/deep-dive-into-cilium-multi-cluster/14871146-112faa9f90a9352b_hu06a8be1f573830a38848fe9dbdeb916c_86239_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/deep-dive-into-cilium-multi-cluster/14871146-112faa9f90a9352b_hu06a8be1f573830a38848fe9dbdeb916c_86239_2c642dbf8bef45ac82ec78218c82cea6.webp&#34;
               width=&#34;760&#34;
               height=&#34;264&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      image.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cilium 1.4 发布了，新功能一览</title>
      <link>https://cloudnative.to/blog/cilium-1-4/</link>
      <pubDate>Mon, 18 Feb 2019 17:59:29 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cilium-1-4/</guid>
      <description>&lt;p&gt;















&lt;figure  id=&#34;figure-发布概述&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;发布概述&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmk6vqhj20jg08odga_hu1ed4b1232eba4ede288cff210f7ec5e9_42848_d2f3f35e934b005380fcaf5388558f3d.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmk6vqhj20jg08odga_hu1ed4b1232eba4ede288cff210f7ec5e9_42848_75e445a1e02c9e39976cda89c640f04e.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmk6vqhj20jg08odga_hu1ed4b1232eba4ede288cff210f7ec5e9_42848_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmk6vqhj20jg08odga_hu1ed4b1232eba4ede288cff210f7ec5e9_42848_d2f3f35e934b005380fcaf5388558f3d.webp&#34;
               width=&#34;700&#34;
               height=&#34;312&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      发布概述
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://cilium.io/blog/2019/02/12/cilium-14/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们很高兴地宣布 Cilium 1.4 版本。该版本引入了几项新功能以及优化和可扩展性工作。重点包括增加全局服务，提供跨多个集群的 Kubernetes 服务路由、DNS 请求/响应感知授权和可见性、透明加密（beta）、IPVLAN 支持以获得更好的性能和延迟（beta）、与 Flannel 集成、GKE 在 COS 上支持、基于 AWS 元数据的策略实施（alpha）以及优化内存和 CPU 使用的重要工作。&lt;/p&gt;
&lt;p&gt;像往常一样，感谢过去 4 个月中在版本 1.3 和 1.4 之间贡献了 1048 次提交的 Cilium 开发人员及整个社区。&lt;/p&gt;
&lt;h2 id=&#34;cilium-是什么&#34;&gt;Cilium 是什么？&lt;/h2&gt;
&lt;p&gt;Cilium 是一个开源软件，用于透明地提供和保护使用 Kubernetes、Docker 和 Mesos 等 Linux 容器管理平台部署的应用程序服务之间的网络和 API 连接。&lt;/p&gt;
&lt;p&gt;Cilium 的基础是一种名为 BPF 的新 Linux 内核技术，它可以在 Linux 本身内动态插入强大的安全性、可见性和网络控制逻辑。BPF 用于提供诸如多集群路由，负载均衡以取代 kube-proxy，使用 X.509 证书的透明加密以及网络和服务安全性等功能。除了提供传统的网络级安全性之外，BPF 的灵活性还可以通过应用程序协议和 DNS 请求/响应的上下文实现安全性。Cilium 与 Envoy 紧密集成，并提供基于 Go 的扩展框架。由于 BPF 在 Linux 内核中运行，因此可以应用所有 Cilium 功能，而无需对应用程序代码或容器配置进行任何更改。&lt;/p&gt;
&lt;p&gt;有关 &lt;strong&gt;&lt;a href=&#34;https://cilium.readthedocs.io/en/stable/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt;&lt;/strong&gt; 的更详细的介绍，请参阅**&lt;a href=&#34;https://cilium.readthedocs.io/en/stable/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 简介&lt;/a&gt;** 一节。&lt;/p&gt;
&lt;h2 id=&#34;多集群服务路由&#34;&gt;多集群服务路由&lt;/h2&gt;
&lt;p&gt;Cilium 1.3 在多个集群之间引入了基本的 pod IP 路由功能。Cilium 1.4 引入了基于标准 Kubernetes 服务的全局服务概念。全局服务允许用户指定 Kubernetes 服务在多个集群中可用。然后，该服务可以在多个集群中具有后端 pod。&lt;/p&gt;
&lt;p&gt;用户体验就像在每个集群中定义具有相同名称和命名空间的 Kubernetes 服务并添加注释以将其标记为全局一样简单。 















&lt;figure  id=&#34;figure-多集群服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;多集群服务&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkdyp1j21fk0mggly_huef333eb31c10c197efe00cac8f18d52b_51780_460a0f32374978f9622b6bc2446a71b6.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkdyp1j21fk0mggly_huef333eb31c10c197efe00cac8f18d52b_51780_323e4e4b950309459499d3d82f07ca2d.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkdyp1j21fk0mggly_huef333eb31c10c197efe00cac8f18d52b_51780_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkdyp1j21fk0mggly_huef333eb31c10c197efe00cac8f18d52b_51780_460a0f32374978f9622b6bc2446a71b6.webp&#34;
               width=&#34;760&#34;
               height=&#34;331&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多集群服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当 pod 向上或向下扩展或变得不健康时，Kubernetes 运行状态检查信息可用于自动添加和删除后端服务。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多集群故障转移&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;多集群故障转移&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmk3324j21g80hkwev_hu21044c354d0617df230cc37e7e665930_45142_f1b1c0d82925f7315292c188f29ebfd7.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmk3324j21g80hkwev_hu21044c354d0617df230cc37e7e665930_45142_d12925d932ffbdb81ff4689bad72fd94.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmk3324j21g80hkwev_hu21044c354d0617df230cc37e7e665930_45142_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmk3324j21g80hkwev_hu21044c354d0617df230cc37e7e665930_45142_f1b1c0d82925f7315292c188f29ebfd7.webp&#34;
               width=&#34;760&#34;
               height=&#34;255&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多集群故障转移
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;控制平面建立在 etcd 之上，类似于 Kubernetes 原生的操作方式，具有弹性和简单性作为其基本设计模式。每个集群继续运行其自己的 etcd 集群，并且复制以只读方式进行，这可确保集群中的故障不会影响其他集群。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-集群控制平面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;集群控制平面&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmjzw1jj20jg09ljrn_hu3c42a894a92e460dc7ba5bf5dcf5b266_33649_507810fa8567808ac2f9dbe72b39bb81.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmjzw1jj20jg09ljrn_hu3c42a894a92e460dc7ba5bf5dcf5b266_33649_a78750920b24e86c68d7d3ac9b6e986c.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmjzw1jj20jg09ljrn_hu3c42a894a92e460dc7ba5bf5dcf5b266_33649_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmjzw1jj20jg09ljrn_hu3c42a894a92e460dc7ba5bf5dcf5b266_33649_507810fa8567808ac2f9dbe72b39bb81.webp&#34;
               width=&#34;700&#34;
               height=&#34;345&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      集群控制平面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;将集群连接在一起就像使用云供应商的标准路由 API 或基于常规 IP 地址的 VPN 网关和隧道的本地基础设施在 VPC 之间提供路由，然后通过内部 Kubernetes 负载均衡器暴露 Cilium 控制平面以将其暴露给内部 VPC 一样简单。TLS 用于使用作为 Kubernetes Secret 管理的证书和密钥对客户端和服务器进行身份验证。&lt;/p&gt;
&lt;h2 id=&#34;ipvlan-支持测试版&#34;&gt;IPVLAN 支持（测试版）&lt;/h2&gt;
&lt;p&gt;添加了一种新的基于 IPVLAN 的数据路径模式。与基于 veth 的体系结构相比，IPVLAN 具有低延迟优势。使用 netperf 在 3.40Ghz Xeon 上的两个本地容器之间测量了以下基准测试，并使用单核禁用超线程。与 veth 相比，IPVLAN 的 P99 延迟相对较低（越低越好）：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ipvlan-性能-延迟&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;IPVLAN 性能 (延迟)&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05ygz1tuxj20wa0iu3yo_hu19e74b920267a5e7ed635bee080ced54_65131_58fdf6153b8057e977662716d0e6b70b.webp 400w,
               /blog/cilium-1-4/61411417ly1g05ygz1tuxj20wa0iu3yo_hu19e74b920267a5e7ed635bee080ced54_65131_be8511b7d97c062aa90e0a13ee8d5b5a.webp 760w,
               /blog/cilium-1-4/61411417ly1g05ygz1tuxj20wa0iu3yo_hu19e74b920267a5e7ed635bee080ced54_65131_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05ygz1tuxj20wa0iu3yo_hu19e74b920267a5e7ed635bee080ced54_65131_58fdf6153b8057e977662716d0e6b70b.webp&#34;
               width=&#34;760&#34;
               height=&#34;443&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      IPVLAN 性能 (延迟)
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;IPVLAN 和 veth 之间的最大吞吐量（越高越好）非常相似，但是通过从内核编译 netfilter/iptables 可以实现非常显着的性能提升。如果您不使用 NodePort 服务并且在离开 Kubernete worker node 时不需要伪装网络流量，则已经可以完全运行您的 Kubernetes 集群。我们将在接下来的几周内提供有关如何运行 iptables 和 kube-proxy 的指南。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ipvlan-性能&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;IPVLAN 性能&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkwgobj20gs0abdfq_hu64ec8352c0baec13ec8b73ba7d13f500_24908_9972362f02080a035c74c029ff86c1b8.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkwgobj20gs0abdfq_hu64ec8352c0baec13ec8b73ba7d13f500_24908_6bcbca9f8d3e5e8b4e39c81b5fd64e3e.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkwgobj20gs0abdfq_hu64ec8352c0baec13ec8b73ba7d13f500_24908_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkwgobj20gs0abdfq_hu64ec8352c0baec13ec8b73ba7d13f500_24908_9972362f02080a035c74c029ff86c1b8.webp&#34;
               width=&#34;604&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      IPVLAN 性能
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;IPVLAN 是 1.4 中的 beta 级功能，有关如何启用和配置该功能的说明，请参阅 &lt;a href=&#34;https://docs.cilium.io/en/v1.4/gettingstarted/ipvlan/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IPVLAN 入门指南&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;dns请求响应的安全性和可见性&#34;&gt;DNS请求/响应的安全性和可见性&lt;/h2&gt;
&lt;p&gt;Cilium 1.4 扩展了现有的 DNS 安全策略模型，以了解各个 pod 发出的 DNS 请求以及它们收到的 DNS 响应。这显着提高了访问集群外部服务的 pod 的安全性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在执行 DNS 查找时，可以将 Pod 限制为具有最小权限，即 pod 可以仅限于查找匹配模式的 DNS 名称，例如 &lt;code&gt;*.domain.com&lt;/code&gt; 。任何超出允许模式的请求都将收到 &lt;code&gt;request refused&lt;/code&gt; DNS 响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS 查找后的通信可以限制为特定 pod 接收的 DNS 响应中返回的 IP 地址。这显着降低了受损应用程序的权限，并提高了基于 DNS 的策略规则的可靠性，因为执行逻辑不再需要知道 DNS 名称可以映射到的所有可能的 IP 地址。&lt;/p&gt;
&lt;p&gt;特别是对于云供应商提供的流行存储，消息传递和数据库服务，单个 DNS 名称可以映射到数百或数千个 IP 地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现在可以通过 API 访问的 Cilium 授权日志记录层记录 DNS 查找和响应。这提供了 pod 执行的每个 DNS 请求和响应的精确日志。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-dns&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DNS&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmku6whj217i09c3yk_hue0b5158bbbb8cf9a4422a23d10cc0cb9_29395_2c154926a343b88310bf2b9d42643b8f.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmku6whj217i09c3yk_hue0b5158bbbb8cf9a4422a23d10cc0cb9_29395_146386a96e365a2751edbebd59f5cef2.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmku6whj217i09c3yk_hue0b5158bbbb8cf9a4422a23d10cc0cb9_29395_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmku6whj217i09c3yk_hue0b5158bbbb8cf9a4422a23d10cc0cb9_29395_2c154926a343b88310bf2b9d42643b8f.webp&#34;
               width=&#34;760&#34;
               height=&#34;163&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DNS
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面的示例显示了一个成功的 DNS 序列，然后是 DNS 服务器响应的对 IP 的 HTTP 请求。这是应用程序的行为方式和允许的方式。后续 HTTP 请求可以使用缓存的 DNS 信息，允许此类请求。DNS 信息将根据记录中的 TTL 信息超时。&lt;/p&gt;
&lt;p&gt;右侧是应用程序在允许的 DNS 策略之外执行 DNS 查找的序列。它还显示，如果应用程序无法执行 DNS 查找，则在应用程序无法在以下位置查找 DNS 名称时，即使 IP 地址实际映射到允许的 DNS 名称，也会阻止任何尝试联系 IP 地址的尝试。一点。&lt;/p&gt;
&lt;h3 id=&#34;策略示例&#34;&gt;策略示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;egress-domain-wildcard&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;myService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;k8s:io.kubernetes.pod.namespace&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;k8s-app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-dns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;53&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;UDP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*.domain.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toFQDNs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;*.domain.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;443&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述策略示例授予 pod 或容器通过 kube-dns 执行 DNS 请求的权限，但将允许的 DNS 查找限制为 &lt;code&gt;*.domain.com&lt;/code&gt; 。与模式不匹配的请求将收到 &lt;code&gt;request refused&lt;/code&gt; DNS 响应。它进一步授予端口 443/TCP 上的 pod 出口访问权限到 DNS 响应中返回的 IP。任何尝试访问先前未在 DNS 响应中返回的任何 IP 地址的请求都将被拒绝。&lt;/p&gt;
&lt;p&gt;要开始使用基于 DNS 的策略，请遵循 &lt;a href=&#34;https://docs.cilium.io/en/v1.4/gettingstarted/dns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 DNS 的入门指南&lt;/a&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;透明加密和身份验证测试版&#34;&gt;透明加密和身份验证（测试版）&lt;/h2&gt;
&lt;p&gt;为集群内和集群之间的所有服务到服务通信提供透明加密是一种经常被要求的功能。加密允许在不受信任的网络中运行 Kubernetes，透明地加密集群中服务之间的所有通信。身份验证可确保只有受信任的工作节点才能参与集群。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-加密&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;加密&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkyg5yj20w80dijrg_hub8b09e1e3f930f38c00cfbf2b0031469_45725_1aac3022826d3e5883fe2a32fb7e2f3d.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkyg5yj20w80dijrg_hub8b09e1e3f930f38c00cfbf2b0031469_45725_fe53d4de641de3ed55f905108b103494.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkyg5yj20w80dijrg_hub8b09e1e3f930f38c00cfbf2b0031469_45725_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkyg5yj20w80dijrg_hub8b09e1e3f930f38c00cfbf2b0031469_45725_1aac3022826d3e5883fe2a32fb7e2f3d.webp&#34;
               width=&#34;760&#34;
               height=&#34;318&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      加密
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;加密基于 X.509 证书和密钥。目前，使用 PSK，使用 Kubernetes Secret 分发给所有节点。但是，基础结构与 SPIFFE 兼容，并允许在将来的版本中在每个服务级别上使用 SPIFFE 证书提供服务身份验证。数据路径实现使用 Linux 内核的 IPSec 实现，它避免了作为所有服务的一部分运行 sidecar 代理的需要，并确保通过现代处理器中的专用 CPU 指令集有效和自动地使用硬件辅助加密加速。&lt;/p&gt;
&lt;p&gt;透明加密是一种 beta 级功能。要启用该功能，请将 &lt;code&gt;--enable-ipsec&lt;/code&gt; 选项传递给代理，并通过 &lt;code&gt;--ipsec-key-file&lt;/code&gt; 选项或使用 Kubernetes Secret 提供预共享密钥（PSK） 。&lt;/p&gt;
&lt;h2 id=&#34;基于-sockmap-bpf-的-sidecar-加速alpha&#34;&gt;基于 Sockmap BPF 的 sidecar 加速（alpha）&lt;/h2&gt;
&lt;p&gt;正如&lt;a href=&#34;https://www.youtube.com/watch?v=ER9eIXL2_14&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 KubeCon 上宣布的那样&lt;/a&gt; ，我们正在使用 Cilium 1.4 进行本地进程通信加速。&lt;/p&gt;
&lt;p&gt;Sockmap 加速本地进程通信主要用于 sidecar 代理和本地进程之间的通信，但适用于所有本地进程。 















&lt;figure  id=&#34;figure-sockmap-加速了延迟&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;SockMap 加速了延迟&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hudab1c7056fb0add85b269aca11fcadd2_69502_dea5f0ee9db6a8649b009b109d45407d.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hudab1c7056fb0add85b269aca11fcadd2_69502_5cec80b47c097fe1f896ac4b3337bc5f.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hudab1c7056fb0add85b269aca11fcadd2_69502_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hudab1c7056fb0add85b269aca11fcadd2_69502_dea5f0ee9db6a8649b009b109d45407d.webp&#34;
               width=&#34;760&#34;
               height=&#34;454&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SockMap 加速了延迟
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;启用 sockmap 时，请求数/s 和最大吞吐量都加倍： 















&lt;figure  id=&#34;figure-sockmap-加速了请求处理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;SockMap 加速了请求处​​理&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkb7mbj20w20j00su_huab39bc6ef8339d1db7216a9ecd7794cf_46948_4e9397559eadb93e404c13b1d042aeaf.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkb7mbj20w20j00su_huab39bc6ef8339d1db7216a9ecd7794cf_46948_5042f4d7f1b7e702c5118f951cdb3c66.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkb7mbj20w20j00su_huab39bc6ef8339d1db7216a9ecd7794cf_46948_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkb7mbj20w20j00su_huab39bc6ef8339d1db7216a9ecd7794cf_46948_4e9397559eadb93e404c13b1d042aeaf.webp&#34;
               width=&#34;760&#34;
               height=&#34;451&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SockMap 加速了请求处​​理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-sockmap-加速了吞吐量&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;SockMap 加速了吞吐量&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu721a92323b42f22d19b4b9b61590c325_23729_8c3dca11ac76ba16aae9f9fda24d0d54.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu721a92323b42f22d19b4b9b61590c325_23729_6121247749ab4f339c12f77f17b494f9.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu721a92323b42f22d19b4b9b61590c325_23729_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu721a92323b42f22d19b4b9b61590c325_23729_8c3dca11ac76ba16aae9f9fda24d0d54.webp&#34;
               width=&#34;579&#34;
               height=&#34;343&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      SockMap 加速了吞吐量
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;请注意，所有这些性能数字均为每个 CPU 核心。&lt;/p&gt;
&lt;p&gt;Sockmap 加速是 1.4 中的 alpha 级别功能。可以使用该 &lt;code&gt;--sockops-enable&lt;/code&gt; 选项启用它。&lt;/p&gt;
&lt;h2 id=&#34;新-grafana-仪表板&#34;&gt;新 Grafana 仪表板&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-grafana&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Grafana&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmjnwpaj22fu0jywfi_hu5c5880398767345f5915cca0b09044d7_51976_27095b32a2ad527a94c5db8d445c0817.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmjnwpaj22fu0jywfi_hu5c5880398767345f5915cca0b09044d7_51976_cdf4e6ff1ef22fe4157dcf87489900d7.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmjnwpaj22fu0jywfi_hu5c5880398767345f5915cca0b09044d7_51976_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmjnwpaj22fu0jywfi_hu5c5880398767345f5915cca0b09044d7_51976_27095b32a2ad527a94c5db8d445c0817.webp&#34;
               width=&#34;760&#34;
               height=&#34;173&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Grafana
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;添加了几个新的 Prometheus 指标，并且可以使用单个命令将新的 Grafana 仪表板部署到任何 Kubernetes 集群中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl apply -f https://raw.githubusercontent.com/cilium/cilium/v1.4/examples/kubernetes/addons/prometheus/monitoring-example.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;















&lt;figure  id=&#34;figure-grafana&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Grafana&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmjiv1kj22f40z6di3_hu251d36ddcf767f5fe758e9a170eace76_71459_81523ae34279bf42cf96802df9acf992.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmjiv1kj22f40z6di3_hu251d36ddcf767f5fe758e9a170eace76_71459_ce0dbaa6db5f231c28e1bd439b71f1db.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmjiv1kj22f40z6di3_hu251d36ddcf767f5fe758e9a170eace76_71459_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmjiv1kj22f40z6di3_hu251d36ddcf767f5fe758e9a170eace76_71459_81523ae34279bf42cf96802df9acf992.webp&#34;
               width=&#34;760&#34;
               height=&#34;307&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Grafana
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;flannel-整合测试版&#34;&gt;Flannel 整合（测试版）&lt;/h2&gt;
&lt;p&gt;与使用 Flannel CNI 插件配置的现有集群的 Cilium 的安全策略实施和负载平衡功能的用户经常要求与 Flannel 集成。&lt;/p&gt;
&lt;p&gt;Cilium 1.4 引入了一个新的配置选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;flannel-master-device&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cni0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这使得 Cilium 可以使用 CNI 链接在 flannel 上运行。通过启用以下选项，还可以自动获取工作节点上的现有容器/容器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;flannel-manage-existing-containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该选项还需要编辑 Cilium DaemonSet 以启用该 &lt;code&gt;hostPID: true&lt;/code&gt; 选项，以便 Cilium 可以查看附加到现有容器的所有进程。&lt;/p&gt;
&lt;p&gt;Flannel 集成主要用于在现有集群中尝试 Cilium 功能或用于迁移目的。有些大规模有用的功能将无法运行，这包括将源的安全身份嵌入网络数据包的能力，这需要回退到基于 IP 的识别。&lt;/p&gt;
&lt;p&gt;有关详细信息，请参阅 &lt;a href=&#34;https://docs.cilium.io/en/v1.4/gettingstarted/flannel-integration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flannel 入门指南&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;与其他-cni-的基准测试&#34;&gt;与其他 CNI 的基准测试&lt;/h2&gt;
&lt;p&gt;在过去的两个月里，我们已经接触过很多 Cilium 与其他 CNI 插件的比较。因此，我们针对其他流行的 CNI 插件运行了几个基准测试。&lt;/p&gt;
&lt;p&gt;在我们进入实际数字之前的两个单词：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基准测试很难。我们并未声称我们可以在理想配置中配置其他 CNI 插件。如果您有意见，请联系我们，我们很乐意进行调整。这些基准测试的目标是表明，通过改变架构和在堆栈中使用不同的技术，而不是仅仅将一个 CNI 与另一个 CNI 进行比较，可以产生最大的影响。即使是 Cilium，其性能也会因配置而异。&lt;/li&gt;
&lt;li&gt;我们专注于测量网络开销，因此我们在两个本地容器之间运行基准测试，以尽可能多地消除硬件限制。&lt;/li&gt;
&lt;li&gt;目标不是达到最大或最低的数量。我们使用单个 CPU 核心进行测量，限制 CPU 的数量。系统的 CPU 越多那么上限可能会更高。而我们关注在单核下数字之间的差异，而不是测试结果数的最大值。&lt;/li&gt;
&lt;li&gt;通常采取几个重点来做基准。基准测试总是在特定的环境中完成。理解上下文很重要。如果您不清楚我们在这里发布的数字，请联系我们，我们会澄清它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说了那么多，接下来让我们深入研究数字：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cni-延迟&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CNI 延迟&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkgwo1j20fz09ta9z_hu314f8bcde0b3d16e1a2ed6a3771a3958_36787_153dbbae5ba90c73ebe2f4ff46da17b6.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkgwo1j20fz09ta9z_hu314f8bcde0b3d16e1a2ed6a3771a3958_36787_d4547099fa258f8bf367f1fcd5ce910f.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkgwo1j20fz09ta9z_hu314f8bcde0b3d16e1a2ed6a3771a3958_36787_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkgwo1j20fz09ta9z_hu314f8bcde0b3d16e1a2ed6a3771a3958_36787_153dbbae5ba90c73ebe2f4ff46da17b6.webp&#34;
               width=&#34;575&#34;
               height=&#34;353&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNI 延迟
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以上数字显示了两个容器在单个连接上交换尽可能多的 1 字节请求和响应消息时的各种延迟测量。此测试主要显示特定转发路径是否非常有利于吞吐量而非延迟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cilium Sockmap 正在大力利用其能够在套接字级别上运行的优势。这仅适用于节点内的连接。&lt;/li&gt;
&lt;li&gt;下一个最佳类别是在 IPVLAN 模式下运行的 Cilium，netfilter/iptables 已完全删除。Cilium 是否在加载安全策略规则时运行是有区别的，但这种差异很小。这是因为用于策略实施的高效的每 CPU 哈希表可以最大限度地减少开销。请注意，此数字已包含负载平衡 BPF 映射查找，因此此模式允许替换其他测试未考虑的 kube-proxy。&lt;/li&gt;
&lt;li&gt;接下来是 Flannel 和 Cilium 以 veth 模式运行。Flannel 是一个使用 Linux 路由表的最小网络插件。极简主义得到了回报，但这也意味着 flannel 不能执行任何策略执行，并且必须依赖于 iptables 或 IPVS 模式的 kube-proxy。由于执行了一些工作以在连接过程中启用策略实施，即使之前未加载任何策略规则，Cilium 也会略微恶化。&lt;/li&gt;
&lt;li&gt;Calico 在我们的测试中显示出略微增加的开销。可能由于添加了更多的 iptables 规则并且正在使用更多的 netfilter 链。我们没有为此特定测试加载任何策略规则到 Calico 但是假设使用 ipset 将允许缩放 OK。不如每个 CPU 哈希表好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些基准测试的典型敌人是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上下文在内核和用户空间之间切换。这些数字会由于 &lt;strong&gt;很多&lt;/strong&gt; 当L4/L7代理会现实的更糟。&lt;/li&gt;
&lt;li&gt;任何每个数据包开销都会产生巨大影响。冷缓存和数据结构也会产生负面影响。必须遍历的代码越少越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cni-rr&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CNI RR&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hudab1c7056fb0add85b269aca11fcadd2_69502_dea5f0ee9db6a8649b009b109d45407d.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hudab1c7056fb0add85b269aca11fcadd2_69502_5cec80b47c097fe1f896ac4b3337bc5f.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hudab1c7056fb0add85b269aca11fcadd2_69502_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkn6wfj20vs0j0glt_hudab1c7056fb0add85b269aca11fcadd2_69502_dea5f0ee9db6a8649b009b109d45407d.webp&#34;
               width=&#34;760&#34;
               height=&#34;454&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNI RR
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图显示了执行相同基准测试的每秒请求数。每秒请求与延迟相当重叠。对于之前的测试，这些数字是按 CPU 核心测量的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cni-stream&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CNI Stream&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmjsdpnj20wk0iuaa4_hu15fc1a14d7e718733c1779eddffdb842_40597_1357166b6d837c917cde0689319cf2c2.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmjsdpnj20wk0iuaa4_hu15fc1a14d7e718733c1779eddffdb842_40597_b4c0415214fa37828f4994be0c467cae.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmjsdpnj20wk0iuaa4_hu15fc1a14d7e718733c1779eddffdb842_40597_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmjsdpnj20wk0iuaa4_hu15fc1a14d7e718733c1779eddffdb842_40597_1357166b6d837c917cde0689319cf2c2.webp&#34;
               width=&#34;760&#34;
               height=&#34;439&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNI Stream
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最后一张图说明了频谱的相反情况。TCP_STREAM 测试试图通过单个 TCP 连接抽取尽可能多的字节。这是内存带宽可以发挥作用的地方，网络硬件或云供应商限制通常可以人为地限制基准。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抛开 Sockmap 的数据，我们可以看到 IPVLAN 模式比其他所有模式都有明显的优势。&lt;/li&gt;
&lt;li&gt;我们预计 Calico 与 Cilium 的数字相似，所以我们可能会错误地配置一些东西。任何帮助表示赞赏。Calico 在 TCP_STREAM 中表现更差并没有多大意义，因为此测试中的 iptables 开销在大量数据中分摊。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-带有-sockmap-的-cni-stream&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;带有 SockMap 的 CNI Stream&#34; srcset=&#34;
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu721a92323b42f22d19b4b9b61590c325_23729_8c3dca11ac76ba16aae9f9fda24d0d54.webp 400w,
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu721a92323b42f22d19b4b9b61590c325_23729_6121247749ab4f339c12f77f17b494f9.webp 760w,
               /blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu721a92323b42f22d19b4b9b61590c325_23729_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-1-4/61411417ly1g05xmkrc2cj20g309jgli_hu721a92323b42f22d19b4b9b61590c325_23729_8c3dca11ac76ba16aae9f9fda24d0d54.webp&#34;
               width=&#34;579&#34;
               height=&#34;343&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      带有 SockMap 的 CNI Stream
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;将 Sockmap 添加回图片证明了在套接字级别进行网络连接的性能优势。同样，这种好处仅在本地进程之间获得，因为当 sidecar 代理生效时或者当服务被调度到同一节点上以便改进本地通信时，它经常发生。&lt;/p&gt;
&lt;h2 id=&#34;用-cos-支持-gke&#34;&gt;用 COS 支持 GKE&lt;/h2&gt;
&lt;p&gt;一个全新的 &lt;a href=&#34;https://docs.cilium.io/en/v1.4/gettingstarted/k8s-install-gke/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;指南&lt;/a&gt; 记录了如何使用 COS 在 GKE 上运行 Cilium。一个全新的 &lt;a href=&#34;https://github.com/cilium/cilium/tree/master/examples/kubernetes/node-init&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-init DaemonSet&lt;/a&gt; 可以通过安装 BPF 文件系统并重新配置 kubelet 以在 CNI 模式下运行来准备 GKE 节点。使用 &lt;a href=&#34;https://github.com/cilium/cilium-etcd-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cilium-etcd-operator&lt;/a&gt; 提供 kvstore 要求，同时保持安装简单。&lt;/p&gt;
&lt;h2 id=&#34;14-发布亮点&#34;&gt;1.4 发布亮点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多集群&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;增加全球服务，通过注释实现跨多个 Kubernetes 服务的 Kubernetes 服务。 （测试版）&lt;/li&gt;
&lt;li&gt;许多改进的安装指南，包括在使用 &lt;a href=&#34;https://github.com/cilium/cilium-etcd-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cilium-etcd-operator&lt;/a&gt; 时自动提取 SSL 证书的工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;透明加密（测试版）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用带有PSK的IPsec将所有pod/host加密到pod/host通信。&lt;/li&gt;
&lt;li&gt;IPv4 和 IPv6&lt;/li&gt;
&lt;li&gt;PSK 通过 Kubernetes Secret 配置&lt;/li&gt;
&lt;li&gt;无需修改 app 或 pod。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPVLAN 支持（测试版）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;利用 IPVLAN 的新的替代数据路径模式取代了 veth 对的使用，以改善延迟和性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DNS请求/响应授权&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;现在，基于每个服务执行的实际 DNS 请求和响应，强制执行基于 FQDN 的安全策略。&lt;/li&gt;
&lt;li&gt;能够指定服务可以执行的 DNS 请求的策略。&lt;/li&gt;
&lt;li&gt;用于查询各个端点执行的 FQDN 主机名查找的 API 和 CLI&lt;/li&gt;
&lt;li&gt;能够在代理还原上恢复 FQDN 映射以进行持久映射&lt;/li&gt;
&lt;li&gt;每个端点可配置的最小 TTL 和最大 FQDN 主机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;flannel 整合（测试版）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;能够在 flannel 上运行 Cilium。Flannel 提供网络，Cilium 提供负载平衡和策略实施。&lt;/li&gt;
&lt;li&gt;能够挂钩现有的 Flannel 部署而无需重新启动任何 pod。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于 AWS 元数据的策略实施（alpha）&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;能够根据 AWS 元数据指定策略规则，例如 EC2 标签，安全组名称，VPC 名称，子网名称等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他指标和监控&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;联网&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;通过 kvstore 实现新的简单 PodCIDR 路由传播模式。通过 --auto-direct-node-routes`启用。&lt;/li&gt;
&lt;li&gt;现在，对于新安装，IPv6 现在已禁用。现有的 ConfigMaps 将继续当前行为。启用通过 &lt;code&gt;--enable-ipv6=true&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;能够在不使用该 &lt;code&gt;--enable-ipv4=false&lt;/code&gt; 选项 分配任何 IPv4 地址的情况下运行仅 IPv6 集群。&lt;/li&gt;
&lt;li&gt;改进了负载均衡器的持久行为&lt;/li&gt;
&lt;li&gt;BPF sockmap 支持加速本地进程通信。可通过选项 &lt;code&gt;--sockops-enable&lt;/code&gt; （alpha）获得&lt;/li&gt;
&lt;li&gt;从 IP 地址识别的解耦端点，以支持任意 IP 寻址模型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率和规模&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;大大提高了 CiliumEndpoint CRD 的可扩展性。不再需要为大型部署禁用 CEP。&lt;/li&gt;
&lt;li&gt;引入基于CIDR/DNS的规则的每节点本地标识，不需要集群或全局范围。在节点 23 上执行 DNS 请求的 pod 导致该 pod 的白名单 IP 不再对集群中的其他节点产生任何影响。&lt;/li&gt;
&lt;li&gt;现在，默认情况下禁用 IPv6 以减少小型部署中的内存占用。&lt;/li&gt;
&lt;li&gt;现在，默认情况下禁用 BPF 映射预分配，以减少小型部署中的内存占用。&lt;/li&gt;
&lt;li&gt;用于代理和客户端命令的单个二进制文件以减少容器图像大&lt;/li&gt;
&lt;li&gt;将 bugtool 编译为静态二进制文件&lt;/li&gt;
&lt;li&gt;新的 cilium-operator 提供单例任务，如 CEP 垃圾收集。&lt;/li&gt;
&lt;li&gt;CNI ADD 上的同步 pod 标签检索。这可以稍微降低 pod 调度速率，但避免在没有 init 策略的情况下启动 pod 的策略丢失。&lt;/li&gt;
&lt;li&gt;状态探测器现在同时收集状态以提高准确性。&lt;/li&gt;
&lt;li&gt;终止时更好的信号处理和新的 terminationGracePeriodSeconds 默认值为 1 秒，以最大限度地减少代理的停机时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;增加了对 Kubernetes 1.13 的支持&lt;/li&gt;
&lt;li&gt;支持自动挂载 BPF 文件系统的新 CRI-O 版本&lt;/li&gt;
&lt;li&gt;新的 NodeInit DaemonSet 为 Cilium 安装自动准备 GKE 节点。这样可以使用 COS 和自动缩放。&lt;/li&gt;
&lt;li&gt;当 cilium 不管理 kube-dns 时，cilium-operator 现在会自动重启 kube-dns。这简化了托管 Kubernetes 产品的初始安装。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Istio&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;改进了 Istio 集成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;观测&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;新指标：kvstore 操作，代理上游/处理延迟，转发和丢弃字节，节点事件，节点数，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;标准安装现在使用 &lt;a href=&#34;https://github.com/cilium/cilium-etcd-operator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cilium-etcd-operator&lt;/a&gt; ，不再依赖于提供外部 kvstore 的用户。&lt;/li&gt;
&lt;li&gt;新的 GKE 指南，包括 COS 支持&lt;/li&gt;
&lt;li&gt;使用 eksctl 的简化 EKS 指南&lt;/li&gt;
&lt;li&gt;使用自动化工具改进了集群网格指南&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;升级说明&#34;&gt;升级说明&lt;/h2&gt;
&lt;p&gt;像往常一样，请按照&lt;a href=&#34;https://cilium.readthedocs.io/en/v1.4/install/upgrade/#upgrading-minor-versions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;升级指南&lt;/a&gt; 升级您的 Cilium 部署。随意在 &lt;a href=&#34;https://cilium.herokuapp.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt; 上 ping 我们。&lt;/p&gt;
&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;发行说明和二进制文件： &lt;a href=&#34;https://github.com/cilium/cilium/releases/tag/1.4.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.4.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;容器 image： &lt;code&gt;docker.io/cilium/cilium:v1.4.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cilium——具备 API 感知的网络和安全性管理的开源软件</title>
      <link>https://cloudnative.to/blog/cilium-intro/</link>
      <pubDate>Wed, 07 Nov 2018 14:14:01 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cilium-intro/</guid>
      <description>&lt;p&gt;Cilium 是一个纯开源软件，没有哪家公司提供商业化支持，也不是由某一公司开源，该软件用于透明地保护使用 Linux 容器管理平台（如 Docker 和 Kubernetes）部署的应用程序服务之间的网络连接。&lt;/p&gt;
&lt;p&gt;Cilium 的基础是一种名为 BPF 的新 Linux 内核技术，它可以在 Linux 本身动态插入强大的安全可见性和控制逻辑。由于 BPF 在 Linux 内核中运行，因此可以应用和更新 Cilium 安全策略，而无需对应用程序代码或容器配置进行任何更改。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cilium&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Cilium&#34; srcset=&#34;
               /blog/cilium-intro/006tNbRwly1fwqi98i51ij30sc0j80zn_hu694c31caf2d6ea197317babceac7fa16_127972_c602347b85ee7cda57ea6f88a8a901fe.webp 400w,
               /blog/cilium-intro/006tNbRwly1fwqi98i51ij30sc0j80zn_hu694c31caf2d6ea197317babceac7fa16_127972_8fdc8f804a4fe167c282cccbccdd66cd.webp 760w,
               /blog/cilium-intro/006tNbRwly1fwqi98i51ij30sc0j80zn_hu694c31caf2d6ea197317babceac7fa16_127972_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-intro/006tNbRwly1fwqi98i51ij30sc0j80zn_hu694c31caf2d6ea197317babceac7fa16_127972_c602347b85ee7cda57ea6f88a8a901fe.webp&#34;
               width=&#34;760&#34;
               height=&#34;515&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Cilium
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;基于微服务的应用程序分为小型独立服务，这些服务使用&lt;strong&gt;HTTP&lt;/strong&gt;、&lt;strong&gt;gRPC&lt;/strong&gt;、&lt;strong&gt;Kafka&lt;/strong&gt;等轻量级协议通过 API 相互通信。但是，现有的 Linux 网络安全机制（例如 iptables）仅在网络和传输层（即 IP 地址和端口）上运行，并且缺乏对微服务层的可见性。&lt;/p&gt;
&lt;p&gt;Cilium 为 Linux 容器框架（如&lt;a href=&#34;https://www.docker.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/a&gt;和&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Kubernetes）&lt;/strong&gt;&lt;/a&gt;带来了 API 感知网络安全过滤。使用名为&lt;strong&gt;BPF&lt;/strong&gt;的新 Linux 内核技术，Cilium 提供了一种基于容器/容器标识定义和实施网络层和应用层安全策略的简单而有效的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：Cilium 中文意思是“纤毛“，它十分细小而又无处不在。&lt;/p&gt;
&lt;h2 id=&#34;bpf&#34;&gt;BPF&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;柏克莱封包过滤器&lt;/strong&gt;（Berkeley Packet Filter，缩写 BPF），是&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B1%BBUnix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;类 Unix&lt;/a&gt;系统上&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据链路层&lt;/a&gt;的一种原始接口，提供原始链路层&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%B0%81%E5%8C%85&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;封包&lt;/a&gt;的收发，除此之外，如果网卡驱动支持&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B4%AA%E6%B3%9B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;洪泛&lt;/a&gt;模式，那么它可以让网卡处于此种模式，这样可以收到&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络&lt;/a&gt;上的所有包，不管他们的目的地是不是所在&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%BB%E6%A9%9F&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;主机&lt;/a&gt;。参考&lt;a href=&#34;https://zh.wikipedia.org/wiki/BPF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;维基百科&lt;/a&gt;和&lt;a href=&#34;https://www.ibm.com/developerworks/cn/linux/l-lo-eBPF-history/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF 简史&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;特性&#34;&gt;特性&lt;/h2&gt;
&lt;p&gt;以下是 Cilium 的特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基于身份的安全性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cilium 可见性和安全策略基于容器编排系统的标识（例如，Kubernetes 中的 Label）。在编写安全策略、审计和故障排查时，再也不用担心网络子网或容器 IP 地址了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卓越的性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BPF 利用 Linux 底层的强大能力，通过提供 Linux 内核的沙盒可编程性来实现数据路径，从而提供卓越的性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API 协议可见性 + 安全性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统防火墙仅根据 IP 地址和端口等网络标头查看和过滤数据包。Cilium 也可以这样做，但也可以理解并过滤单个 HTTP、gRPC 和 Kafka 请求，这些请求将微服务拼接在一起。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;专为扩展而设计&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cilium 是为扩展而设计的，在部署新 pod 时不需要节点间交互，并且通过高度可扩展的键值存储进行所有协调。&lt;/p&gt;
&lt;h2 id=&#34;为什么选择-cilium&#34;&gt;为什么选择 Cilium？&lt;/h2&gt;
&lt;p&gt;现代数据中心应用程序的开发已经转向面向服务的体系结构（SOA），通常称为&lt;em&gt;微服务&lt;/em&gt;，其中大型应用程序被分成小型独立服务，这些服务使用 HTTP 等轻量级协议通过 API 相互通信。微服务应用程序往往是高度动态的，作为持续交付的一部分部署的滚动更新期间单个容器启动或销毁，应用程序扩展/缩小以适应负载变化。&lt;/p&gt;
&lt;p&gt;这种向高度动态的微服务的转变过程，给确保微服务之间的连接方面提出了挑战和机遇。传统的 Linux 网络安全方法（例如 iptables）过滤 IP 地址和 TCP/UDP 端口，但 IP 地址经常在动态微服务环境中流失。容器的高度不稳定的生命周期导致这些方法难以与应用程序并排扩展，因为负载均衡表和访问控制列表要不断更新，可能增长成包含数十万条规则。出于安全目的，协议端口（例如，用于 HTTP 流量的 TCP 端口 80）不能再用于区分应用流量，因为该端口用于跨服务的各种消息。&lt;/p&gt;
&lt;p&gt;另一个挑战是提供准确的可见性，因为传统系统使用 IP 地址作为主要识别工具，其在微服务架构中的寿命可能才仅仅几秒钟，被大大缩短。&lt;/p&gt;
&lt;p&gt;利用 Linux BPF，Cilium 保留了透明地插入安全可视性 + 强制执行的能力，但这种方式基于服务/pod/容器标识（与传统系统中的 IP 地址识别相反），并且可以根据应用层进行过滤（例如 HTTP）。因此，通过将安全性与寻址分离，Cilium 不仅可以在高度动态的环境中应用安全策略，而且除了提供传统的第 3 层和第 4 层分割之外，还可以通过在 HTTP 层运行来提供更强的安全隔离。 。&lt;/p&gt;
&lt;p&gt;BPF 的使用使得 Cilium 能够以高度可扩展的方式实现以上功能，即使对于大规模环境也不例外。&lt;/p&gt;
&lt;h2 id=&#34;功能概述&#34;&gt;功能概述&lt;/h2&gt;
&lt;h3 id=&#34;透明的保护-api&#34;&gt;透明的保护 API&lt;/h3&gt;
&lt;p&gt;能够保护现代应用程序协议，如 REST/HTTP、gRPC 和 Kafka。传统防火墙在第 3 层和第 4 层运行，在特定端口上运行的协议要么完全受信任，要么完全被阻止。Cilium 提供了过滤各个应用程序协议请求的功能，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许所有带有方法&lt;code&gt;GET&lt;/code&gt;和路径&lt;code&gt;/public/.*&lt;/code&gt;的 HTTP 请求。拒绝所有其他请求。&lt;/li&gt;
&lt;li&gt;允许&lt;code&gt;service1&lt;/code&gt;在 Kafka topic 上生成&lt;code&gt;topic1&lt;/code&gt;，&lt;code&gt;service2&lt;/code&gt;消费&lt;code&gt;topic1&lt;/code&gt;。拒绝所有其他 Kafka 消息。&lt;/li&gt;
&lt;li&gt;要求 HTTP 标头&lt;code&gt;X-Token: [0-9]+&lt;/code&gt;出现在所有 REST 调用中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详情请参考&lt;a href=&#34;http://docs.cilium.io/en/stable/policy/#layer-7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;7 层协议&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;基于身份来保护服务间通信&#34;&gt;基于身份来保护服务间通信&lt;/h3&gt;
&lt;p&gt;现代分布式应用程序依赖于诸如容器之类的技术来促进敏捷性并按需扩展。这将导致在短时间内启动大量应用容器。典型的容器防火墙通过过滤源 IP 地址和目标端口来保护工作负载。这就要求不论在集群中的哪个位置启动容器时都要操作所有服务器上的防火墙。&lt;/p&gt;
&lt;p&gt;为了避免受到规模限制，Cilium 为共享相同安全策略的应用程序容器组分配安全标识。然后，该标识与应用程序容器发出的所有网络数据包相关联，从而允许验证接收节点处的身份。使用键值存储执行安全身份管理。&lt;/p&gt;
&lt;h3 id=&#34;安全访问外部服务&#34;&gt;安全访问外部服务&lt;/h3&gt;
&lt;p&gt;基于标签的安全性是集群内部访问控制的首选工具。为了保护对外部服务的访问，支持入口（ingress）和出口（egress）的传统基于 CIDR 的安全策略。这允许限制对应用程序容器的访问以及对特定 IP 范围的访问。&lt;/p&gt;
&lt;h3 id=&#34;简单网络&#34;&gt;简单网络&lt;/h3&gt;
&lt;p&gt;一个简单的扁平第 3 层网络能够跨越多个集群连接所有应用程序容器。使用主机范围分配器可以简化 IP 分配。这意味着每个主机可以在主机之间没有任何协调的情况下分配 IP。&lt;/p&gt;
&lt;p&gt;支持以下多节点网络模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Overlay&lt;/strong&gt;：基于封装的虚拟网络产生所有主机。目前 VXLAN 和 Geneve 已经完成，但可以启用 Linux 支持的所有封装格式。&lt;/p&gt;
&lt;p&gt;何时使用此模式：此模式具有最小的基础架构和集成要求。它几乎适用于任何网络基础架构，唯一的要求是主机之间可以通过 IP 连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本机路由&lt;/strong&gt;：使用 Linux 主机的常规路由表。网络必须能够路由应用程序容器的 IP 地址。&lt;/p&gt;
&lt;p&gt;何时使用此模式：此模式适用于高级用户，需要了解底层网络基础结构。此模式适用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地 IPv6 网络&lt;/li&gt;
&lt;li&gt;与云网络路由器配合使用&lt;/li&gt;
&lt;li&gt;如果您已经在运行路由守护进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;负载均衡&#34;&gt;负载均衡&lt;/h3&gt;
&lt;p&gt;应用程序容器和外部服务之间的流量的分布式负载均衡。负载均衡使用 BPF 实现，允许几乎无限的规模，并且如果未在源主机上执行负载均衡操作，则支持直接服务器返回（DSR）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：负载均衡需要启用连接跟踪。这是默认值。&lt;/p&gt;
&lt;h3 id=&#34;监控和故障排除&#34;&gt;监控和故障排除&lt;/h3&gt;
&lt;p&gt;可见性和故障排查是任何分布式系统运行的基础。虽然我们喜欢用&lt;code&gt;tcpdump&lt;/code&gt;和 &lt;code&gt;ping&lt;/code&gt;，它们很好用，但我们努力为故障排除提供更好的工具。包括以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用元数据进行事件监控：当数据包被丢弃时，该工具不仅仅报告数据包的源 IP 和目标 IP，该工具还提供发送方和接收方的完整标签信息等。&lt;/li&gt;
&lt;li&gt;策略决策跟踪：为什么丢弃数据包或拒绝请求。策略跟踪框架允许跟踪运行工作负载和基于任意标签定义的策略决策过程。&lt;/li&gt;
&lt;li&gt;通过 Prometheus 导出指标：通过 Prometheus 导出关键指标，以便与现有仪表板集成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;集成&#34;&gt;集成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;网络插件集成：&lt;a href=&#34;https://github.com/containernetworking/cni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNI&lt;/a&gt;、&lt;a href=&#34;https://github.com/docker/libnetwork&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;libnetwork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;容器运行时：&lt;a href=&#34;https://github.com/containerd/containerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Kubernetes：&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/network-policies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NetworkPolicy&lt;/a&gt;、&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Label&lt;/a&gt;、&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress&lt;/a&gt;、&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;日志记录：syslog、&lt;a href=&#34;http://www.fluentd.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fluentd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cilium.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 官方网站 - cilium.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/linux/l-lo-eBPF-history/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF 简史 - ibm.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25672552&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网络层拦截可选项 - zhihu.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cilium 1.3：支持 Envoy、Cassandra 和 Memcached 的 Go 语言扩展</title>
      <link>https://cloudnative.to/blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/</link>
      <pubDate>Tue, 06 Nov 2018 12:20:51 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/</guid>
      <description>&lt;p&gt;















&lt;figure  id=&#34;figure-cilium-kubernetes&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Cilium Kubernetes&#34; srcset=&#34;
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwqjul334zj30je07p0t1_hu8927cc2bd94d87da94805321119c1a29_21818_c623a4cc26b25c537dc0a07694b69fd2.webp 400w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwqjul334zj30je07p0t1_hu8927cc2bd94d87da94805321119c1a29_21818_29ce53db41a0a0cf82e9bdc3eb8a97f2.webp 760w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwqjul334zj30je07p0t1_hu8927cc2bd94d87da94805321119c1a29_21818_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwqjul334zj30je07p0t1_hu8927cc2bd94d87da94805321119c1a29_21818_c623a4cc26b25c537dc0a07694b69fd2.webp&#34;
               width=&#34;698&#34;
               height=&#34;277&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Cilium Kubernetes
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://cilium.io/blog/2018/10/23/cilium-13-envoy-go/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们很高兴地宣布 Cilium 1.3 发布了。这个版本加入了几个新特性。主要的亮点是实现了 Cassandra 和带有策略执行能力的 Memcached 协议解析器，作为&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;的 Go 语言扩展包。&lt;/p&gt;
&lt;p&gt;和往常一样，整个 Cilium 社区的开发者贡献巨大，他们在 1.2 到 1.3 版本的这段时间贡献了 785 个提交。&lt;/p&gt;
&lt;h2 id=&#34;什么是-envoy-的-go-语言扩展&#34;&gt;什么是 Envoy 的 Go 语言扩展？&lt;/h2&gt;
&lt;p&gt;从 1.0 版本开始，我们一直依赖&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;处理所有的 HTTP、gRPC 以及 HTTP 的派生如 Elasticsearch 的请求。社区讨论如何扩大支持 7 层协议的范围，Envoy 作为推动未来协议补充的首选平台是显而易见的。焦点迅速转移到寻找简化 Envoy 可扩展性的方法，并且允许重用现有的开源项目，如 CNCF 项目&lt;a href=&#34;https://vitess.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vitess&lt;/a&gt;。于是实现 Envoy 的 Go 扩展的想法就诞生了。&lt;/p&gt;
&lt;p&gt;在 Cilium 1.3 中，我们引入了 Envoy 的 Go 扩展作为其 Beta 特性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-envoy-golang-extension-architecture&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Envoy Golang Extension Architecture&#34; srcset=&#34;
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwql07xp02j30lp0buaay_huf05ead5c8973182e89d3d74e94fdf282_40716_462a96612ed76edb1df81a1a449d1b12.webp 400w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwql07xp02j30lp0buaay_huf05ead5c8973182e89d3d74e94fdf282_40716_161114a896a05db10634dbb722a585f1.webp 760w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwql07xp02j30lp0buaay_huf05ead5c8973182e89d3d74e94fdf282_40716_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwql07xp02j30lp0buaay_huf05ead5c8973182e89d3d74e94fdf282_40716_462a96612ed76edb1df81a1a449d1b12.webp&#34;
               width=&#34;760&#34;
               height=&#34;415&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Envoy Golang Extension Architecture
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**扩展的透明注入：**在 Cilium 的帮助下，连接被透明地重定向到 Envoy，而不需要修改应用程序或 pod。重定向基于目标端口配置，可以根据 labels、IPs、DNS 以及 ingress 和 egress 连接的服务名称限定到源或目标服务，并通过扩展的名称将连接映射到扩展。重定向是通过 CiliumNetworkPolicy CRD 或 REST API 配置的。Envoy 可以被配置为在每个 pod 中作为 sidecar 或作为每个 node 的独立代理运行。&lt;/li&gt;
&lt;li&gt;**完全分布式：**Go 扩展完全分布在每个 Envoy 节点或 pod 内部，不需要为一个数据处理的集中化控制面板。当然，go 扩展本身可以调用任意的外部控制面板组件来报告遥测数据或验证请求。&lt;/li&gt;
&lt;li&gt;**动态扩展映射：**Go 扩展被设计为共享库提供给 Envoy。Cilium 可以根据设置好的重定向自动加载相应的 Go 扩展来配置 Envoy，并在连接数据时调用它。未来的版本将支持在运行时更新和重新加载扩展，而无需重启 Envoy 并且也不会丢失连接状态。&lt;/li&gt;
&lt;li&gt;**通过 CRD 配置扩展：**通过 CRD 或 REST API 使用通用键值对配置 Go 扩展。这允许传递如安全策略、安全令牌或其他的配置，而无需让 Envoy 知道。&lt;/li&gt;
&lt;li&gt;**通用访问日志：**与配置类似，扩展可以返回通用键值对，这些键值对将提取的可见性传递到访问日志层。&lt;/li&gt;
&lt;li&gt;**沙盒化：**沙盒确保任何解析器的不稳定性都不会破坏 Envoy 的核心。受 Matt Klein 发表的文章&lt;a href=&#34;https://medium.com/@mattklein123/exceptional-go-1dd1488a6a47&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Exceptional Go&lt;/a&gt;启发，解析器被容许 panic 或抛出异常。当 panic 发生时，信息被记录到访问日志中，TCP 连接与被关闭的请求关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cilium-是什么&#34;&gt;Cilium 是什么？&lt;/h2&gt;
&lt;p&gt;Cilium 是一个开源软件，可以透明地提供和保护部署在诸如 Kubernetes、Docker 和 Mesos 等 Linux 容器管理平台的应用程服务之间的网络和 API 连接。&lt;/p&gt;
&lt;p&gt;Cilium 的基础是一种新的 Linux 内核技术 BPF，它支持在 Linux 内部动态的注入安全、可见性和网络控制逻辑。除了提供传统的网络层安全，BPF 的灵活性还让 API 和流程级别的安全，保护容器或 pod 间通信成为了可能。因为 BPF 在 Linux 内核中运行，Cilium 的安全策略可以在不修改程序代码或容器配置的情况下使用和更新。&lt;/p&gt;
&lt;p&gt;有关 Cilium 更详细的介绍请参见**&lt;a href=&#34;https://cilium.readthedocs.io/en/v1.3/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to Cilium&lt;/a&gt;**&lt;/p&gt;
&lt;h2 id=&#34;envoy-是什么&#34;&gt;Envoy 是什么？&lt;/h2&gt;
&lt;p&gt;Envoy 是一个 7 层代理和通信总线，被设计用于大型的面向服务的架构。这个项目诞生于以下理念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网络应该对应用程序透明。当网络和应用程序出现问题时，应该很容易确定问题的根源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以通过 Envoy 的文档 &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/intro/what_is_envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Envoy&lt;/a&gt;了解更多关于 Envoy 的内容。&lt;/p&gt;
&lt;h1 id=&#34;怎样编写-envoy-的-go-语言扩展&#34;&gt;怎样编写 Envoy 的 Go 语言扩展&lt;/h1&gt;
&lt;p&gt;编写 Envoy 的 Go 扩展很简单。为说明这一点，我们将为 R2-D2 控制协议实现一个基本的协议解析器，并实现过滤逻辑用来排除任何包含字符串”C-3PO”的控制请求。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-envoy-golang-extension-architecture&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Envoy Golang Extension Architecture&#34; srcset=&#34;
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwvz4inau1j30kg09waal_hu97114ae48a52a816f5620d5d3457241c_28551_0c2ad15ae5886cb75022562039cfbfb2.webp 400w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwvz4inau1j30kg09waal_hu97114ae48a52a816f5620d5d3457241c_28551_69fb463ea257605e293f31dfa8e481cf.webp 760w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwvz4inau1j30kg09waal_hu97114ae48a52a816f5620d5d3457241c_28551_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwvz4inau1j30kg09waal_hu97114ae48a52a816f5620d5d3457241c_28551_0c2ad15ae5886cb75022562039cfbfb2.webp&#34;
               width=&#34;736&#34;
               height=&#34;356&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Envoy Golang Extension Architecture
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;要实现扩展的主要 API 是&lt;code&gt;OnData()&lt;/code&gt;函数，当 Envoy 收到通过&lt;code&gt;CiliumNetworkPolicy&lt;/code&gt;映射到扩展连接的数据时，就会调用这个函数。函数必须解析数据并返回下面的断言之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MORE&lt;/strong&gt;：解析器需要更多的字节来继续解析。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PASS&lt;/strong&gt;：传递&lt;em&gt;n&lt;/em&gt;字节数据流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DROP&lt;/strong&gt;：删除&lt;em&gt;n&lt;/em&gt;字节数据流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;INJECT&lt;/strong&gt;：向指定的方向注入&lt;em&gt;n&lt;/em&gt;字节的数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ERROR&lt;/strong&gt;：发生了解析错误，连接必须关闭。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOP&lt;/strong&gt;：什么也没发生。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了注册扩展，需要创建一个必须实现&lt;code&gt;Create()&lt;/code&gt;函数的解析器工厂。当 Envoy 建立了一个新的连接并使用解析器时就会调用该函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/cilium/cilium/proxylib/proxylib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Connection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OnData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;endStream&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dataArray&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[][]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OpType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dataArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;msgLen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\r\n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;msgLen&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MORE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// No delimiter, request more data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;msgStr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;msgLen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;msgLen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Inlcude the &amp;#34;\r\n&amp;#34; in the request
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reply&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PASS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;msgLen&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Pass responses without additional parsing
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;msgStr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;C-3PO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DROP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;msgLen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PASS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;msgLen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;factory&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connection&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;proxylib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RegisterParserFactory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;r2d2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;factory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，将新的解析器导入到 proxylib 包中。&lt;code&gt;libcilium.so&lt;/code&gt;将包含解析器并被 Envoy 加载。编辑文件&lt;code&gt;proxylib/proxylib.go&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;github.com/cilium/cilium/proxylib/r2d2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的示例省略了扩展配置、集成到策略代码库以及访问日志等内容。学习如何编写 Go 扩展，请参阅指南&lt;a href=&#34;https://cilium.readthedocs.io/en/v1.3/envoy/extensions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Go Extensions&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;cassandra-支持beta&#34;&gt;Cassandra 支持（Beta）&lt;/h1&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cassandra-logo&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Cassandra Logo&#34; srcset=&#34;
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwxc47hgkbj30io07edgp_hu77121d70581001ee81a80228e08f3b22_27568_e4a63e46f573b2ab89d5a5afaa63374e.webp 400w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwxc47hgkbj30io07edgp_hu77121d70581001ee81a80228e08f3b22_27568_25def539110fa253d028863cc3b1ae18.webp 760w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwxc47hgkbj30io07edgp_hu77121d70581001ee81a80228e08f3b22_27568_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwxc47hgkbj30io07edgp_hu77121d70581001ee81a80228e08f3b22_27568_e4a63e46f573b2ab89d5a5afaa63374e.webp&#34;
               width=&#34;672&#34;
               height=&#34;266&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Cassandra Logo
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/cassandra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cassandra&lt;/a&gt; 是一个流行的 NoSQL 数据库管理系统。它通常被多个服务大规模的访问并在团队间共享。Cilium 1.3 引入了对 Apache &lt;a href=&#34;https://github.com/apache/cassandra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cassandra&lt;/a&gt; 协议的支持，并提供了可见性和策略执行能力。&lt;/p&gt;
&lt;p&gt;Cassandra 的 Go 扩展能够在以下协议字段上提供可见性和执行能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;query_action&lt;/strong&gt;：这个行为在数据库的&lt;code&gt;SELECT&lt;/code&gt;， &lt;code&gt;INSERT&lt;/code&gt;， &lt;code&gt;UPDATE&lt;/code&gt;等操作上执行，字段总是精确匹配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query_table&lt;/strong&gt;：查询执行的表，以正则表达式进行匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;例子empire-如何通过表限制-cassandra-访问&#34;&gt;例子：Empire 如何通过表限制 Cassandra 访问&lt;/h3&gt;
&lt;p&gt;下面的示例展示了 Empire 如何暴露有限的访问给运行在端口 9042 的 Empire Cassandra 集群。Outposts 被标签&lt;code&gt;app=empire-outpost&lt;/code&gt;标识，并具有以下权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt; 操作在表&amp;quot;system.&lt;em&gt;”和”system_schema.&lt;/em&gt;“上执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INSERT&lt;/code&gt;操作在表&amp;quot;attendance.daily_records&amp;quot;上执行。注意 outposts 不能从这些表读取，因此不能从其他 outposts 读取每日记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Allow only permitted requests to empire Cassandra server&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;secure-empire-cassandra&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;specs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cass-server&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;fromEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;empire-outpost&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;9042&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;l7proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cassandra&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;l7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;query_action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;select&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;query_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;system\\..*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;query_action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;select&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;query_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;system_schema\\..*&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;query_action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;insert&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;query_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;attendance.daily_records&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是一个简单的例子，更多复杂示例请参阅 &lt;a href=&#34;https://cilium.readthedocs.io/en/v1.3/gettingstarted/cassandra/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cassandra getting started guide &lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;memcached-支持beta&#34;&gt;Memcached 支持（Beta）&lt;/h1&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-memcached-logo&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Memcached Logo&#34; srcset=&#34;
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwxc9b9qp7j30g607gt97_hu1439491928f289d7198cace2b4e837ea_17102_6f14f4a5c6663843d0ffc53586fca2f7.webp 400w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwxc9b9qp7j30g607gt97_hu1439491928f289d7198cace2b4e837ea_17102_f9145b8d8cb597412a8d371fad0964ae.webp 760w,
               /blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwxc9b9qp7j30g607gt97_hu1439491928f289d7198cace2b4e837ea_17102_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium-13-go-extensions-for-envoy-cassandra-memcached-support/006tNbRwly1fwxc9b9qp7j30g607gt97_hu1439491928f289d7198cace2b4e837ea_17102_6f14f4a5c6663843d0ffc53586fca2f7.webp&#34;
               width=&#34;582&#34;
               height=&#34;268&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Memcached Logo
    &lt;/figcaption&gt;&lt;/figure&gt;

Memcached 是一种流行的基于内存的分布式缓存，通常用于缓存或在服务之间共享数据。随着 memcached 解析器的 golang 扩展加入 Envoy，Cilium 现在可以执行安全规则去限制 memcached 客户端的某些命令，比如读写，也可以根据 key 前缀进行限制。&lt;/p&gt;
&lt;h2 id=&#34;例子rebels-如何保护共享的-memcached-服务&#34;&gt;例子：Rebels 如何保护共享的 memcached 服务&lt;/h2&gt;
&lt;p&gt;在下面的示例中，Rebels 运行了一个标签为&lt;code&gt;app=memcached&lt;/code&gt;的 memcached 服务，几个服务与 memcached 交互并应用不同的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function=fleet-maintenance&lt;/code&gt; 标识的维护服务被授予对前缀为&lt;code&gt;alliance/fleet&lt;/code&gt;的所有 key 的读写权限。禁止访问任何其他 key。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function=fleet-monitoring&lt;/code&gt;标识的监控服务仅对前缀为&lt;code&gt;alliance/fleet&lt;/code&gt;的 key 授予读权限。禁止对前缀中的 key 进行写入访问或访问前缀之外的任何 key。&lt;/li&gt;
&lt;li&gt;所有 Jedis 被标签&lt;code&gt;role=jedi&lt;/code&gt;标识，拥有完整的 Memcached 服务，可以访问所有的 key。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Secure the Rebel memcached service&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;secure-rebel-alliance-memcache&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;specs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;memcached&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;fromEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;fleet-maintanence&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;11211&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;l7proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;memcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;l7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;writeGroup&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;keyPrefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alliance/fleet/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;keyPrefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alliance/fleet/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;fromEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;fleet-monitoring&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;11211&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;l7proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;memcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;l7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;keyPrefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;alliance/fleet/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;fromEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jedi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;11211&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;l7proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;memcache&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;l7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 memcached 的完整示例，请参阅 &lt;a href=&#34;https://cilium.readthedocs.io/en/v1.3/gettingstarted/memcached/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Memcached getting started guide&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;社区&#34;&gt;社区&lt;/h1&gt;
&lt;h2 id=&#34;linux-基金会core-infrastructure-initiative最佳实践&#34;&gt;Linux 基金会&amp;quot;Core Infrastructure Initiative&amp;quot;最佳实践&lt;/h2&gt;
&lt;p&gt;我们致力于在开放和最好的开源实践中开发 Cilium，包括对安全的坚定承诺。我们很高兴地宣布，我们已经完成了所有工作，获得了 Linux 基金会 &lt;a href=&#34;https://www.coreinfrastructure.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Core Infrastructure Initiative&lt;/a&gt;的 &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CII Best Practices&lt;/a&gt;殊荣。在 &lt;a href=&#34;https://www.coreinfrastructure.org/programs/badge-program/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;了解更多关于奖章的信息。&lt;/p&gt;
&lt;h2 id=&#34;特别兴趣组sig介绍&#34;&gt;特别兴趣组（SIG）介绍&lt;/h2&gt;
&lt;p&gt;社区的关注点越来越多样化。为了确保项目的可伸缩性，我们正式引入了特殊兴趣组（SIGs）来帮助提供一些组织结构。已经创建了以下的 SIGs：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Datapath&lt;/strong&gt;： (#sig-datapath) 所有 BPF 和 Linux 内核相关的数据通路代码拥有者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;： (#sig-docs) 所有文档相关的讨论。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Envoy&lt;/strong&gt;： (#sig-envoy) Envoy，Istio 和所有 7 层协议解析器的维护。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Policy&lt;/strong&gt;： (#sig-policy) 所有策略相关的主题。这个 SIG 负责所有与安全相关的 API 和实现逻辑。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Release Management&lt;/strong&gt;： (#launchpad) 负责发布管理和向后移植的过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;任何人都可以建立额外的 SIGs。这个过程很简单有&lt;a href=&#34;https://cilium.readthedocs.io/en/v1.3/community/#how-to-create-a-sig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文档说明&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;13-版本新特性&#34;&gt;1.3 版本新特性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Envoy 的 Go 语言扩展&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;令人兴奋的全新的 Envoy Go 扩展 API，包括通用配置和访问日志 API（Beta 版本）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cassandra 和 Memcached 协议支持&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;使用新的 Envoy Go 扩展实现了 Cassandra 和 Memcached 的新协议解析器。这两个解析器都使用精确匹配、前缀匹配和正则表达式为操作类型和键/表名提供可见性和强制安全策略。（Beta）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;为DNS/FQDN策略规则提供TTLs支持。&lt;/li&gt;
&lt;li&gt;引入 kube-dns、coredns 和 etcd 操作符的标识。&lt;/li&gt;
&lt;li&gt;新的安全标识&amp;quot;unmanaged&amp;quot;代表没有被 Cilium 管理的 pod。&lt;/li&gt;
&lt;li&gt;改进的安全实体“集群”，允许为集群中的所有 pod 定义策略（已管理、未管理和主机网络的）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;额外的遥测指标和监控&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;新的&amp;quot;cilium metrics list&amp;quot;命令通过 CLI 查看 metrics 列表。&lt;/li&gt;
&lt;li&gt;许多额外的 metrics：连接跟踪垃圾回收，Kubernetes 资源事件，IPAM，再生节点，服务，错误和警告计数器。&lt;/li&gt;
&lt;li&gt;具有更高效的编解码协议的新监控接口。默认情况下用于较老的客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络改进&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;将连接跟踪表划分为 TCP 和非 TCP，以更好地处理每个协议的长短连接的混合。&lt;/li&gt;
&lt;li&gt;通过 ConfigMap 描述连接表大小的能力。&lt;/li&gt;
&lt;li&gt;通过 NodePort 和 HostPort 更好的伪装流量行为，容许 pods 可以查看原始源 IP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全键值存储弹性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;引入了在任何状态丢失后立即重新构造键值存储内容的能力。允许从备份中恢复 etcd，或者在运行的集群中完全删除它，并影响最小。(Beta)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;效率和扩展&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在计算独立 endpoint 策略的成本方面有重大改进。关于这方面的工作还在继续。&lt;/li&gt;
&lt;li&gt;新的宽限期，通过工作负载更改身份最小化连接影响。&lt;/li&gt;
&lt;li&gt;更高效的安全身份分配算法。&lt;/li&gt;
&lt;li&gt;新的通用框架检测和忽略 Kubernetes 事件通知，Cilium 不需要动作。&lt;/li&gt;
&lt;li&gt;在避免不必要的 BPF 编译方面的改进，以减少由此导致的 CPU 负载。初始化 BPF 模板以避免全编译。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;增加对 Kubernetes 1.12 的支持&lt;/li&gt;
&lt;li&gt;为 CiliumEndpoints CRD 自定义列（需要 Kubernetes 1.11 支持）&lt;/li&gt;
&lt;li&gt;为 ulibc 的兼容性从 cilium-cni 移除 cgo&lt;/li&gt;
&lt;li&gt;移除对 Kubernetes 1.7 的支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;新的 Ubuntu 18.04 手册&lt;/li&gt;
&lt;li&gt;对最新的 BPF 运行时特性的覆盖，例如 BTF（BPF Type Format）&lt;/li&gt;
&lt;li&gt;针对运行多主机网络的虚拟机/主机防火墙需求的文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长期稳定版本 (LTS)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;1.3 已经声明为 LTS 版本，在后续的 6 个月将作为向后移植的版本继续支持&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;更新指导&#34;&gt;更新指导&lt;/h2&gt;
&lt;p&gt;请查阅&lt;a href=&#34;https://cilium.readthedocs.io/en/v1.3/install/upgrade/#upgrading-minor-versions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;upgrade guide&lt;/a&gt;去更新你的 Cilium 部署，可以随时在&lt;a href=&#34;http://cilium.io/slack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt;上联系我们。&lt;/p&gt;
&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;发布记录和二进制文件 &lt;a href=&#34;https://github.com/cilium/cilium/releases/tag/1.3.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.3.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;容器镜像： &lt;code&gt;docker.io/cilium/cilium:v1.3.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cilium 1.2 发布—DNS 安全性策略、EKS 支持、ClusterMesh、kube-router 集成等</title>
      <link>https://cloudnative.to/blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/</link>
      <pubDate>Mon, 27 Aug 2018 19:52:29 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/</guid>
      <description>&lt;p&gt;















&lt;figure  id=&#34;figure-cilium&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Cilium&#34; srcset=&#34;
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohqoaw4wj310o0qegwa_hub354935b8f37ca538501760c3d465a37_132898_66d48d72c8aad20c794c493b69bf630c.webp 400w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohqoaw4wj310o0qegwa_hub354935b8f37ca538501760c3d465a37_132898_7d267e0f0b33efd1e559cc3cb9ce93c3.webp 760w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohqoaw4wj310o0qegwa_hub354935b8f37ca538501760c3d465a37_132898_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohqoaw4wj310o0qegwa_hub354935b8f37ca538501760c3d465a37_132898_66d48d72c8aad20c794c493b69bf630c.webp&#34;
               width=&#34;760&#34;
               height=&#34;547&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Cilium
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://cilium.io/blog/2018/08/21/cilium-12/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我们很高兴地宣布推出 Cilium 1.2。该版本引入了几个新功能实现了 Cilium 用户和社区成员最迫切想要的功能。其中最吸引人的功能之一是引入基于 DNS 名称的安全策略，目的是保护对集群外服务的访问。另一个最受关注的问题是加入了连接和保护多个 Kubernetes 集群的能力。我们将 ClusterMesh 功能进入 Alpha 版本。它可以连接和保护在多个 Kubernetes 集群中运行的 pod。Kube-router 与 Cilium 的集成同等重要。DigitalOcean 团队的努力使 kube-router 提供 BGP 网络与 Cilium 提供的基于 BPF 的安全性和负载均衡相结合。整个 Cilium 开发者社区贡献者总数已增加到 85 个，在 1.1 到 1.2 版本内贡献了 579 个 PR。&lt;/p&gt;
&lt;h2 id=&#34;cilium-是什么&#34;&gt;Cilium 是什么？&lt;/h2&gt;
&lt;p&gt;Cilium 是一个开源软件，用于在 Kubernetes、Docker 和 Mesos 等 Linux 容器管理平台部署的应用程序服务之间提供透明连接、保护网络和 API。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohq4pg7kj31kw0cjtcq_hu401f256a9bbed7b3eda53a74f591e37c_42135_08dc42985d665778f483781fc0c444c0.webp 400w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohq4pg7kj31kw0cjtcq_hu401f256a9bbed7b3eda53a74f591e37c_42135_ca8a662cb4bba6e442cac5ccdeb10a76.webp 760w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohq4pg7kj31kw0cjtcq_hu401f256a9bbed7b3eda53a74f591e37c_42135_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohq4pg7kj31kw0cjtcq_hu401f256a9bbed7b3eda53a74f591e37c_42135_08dc42985d665778f483781fc0c444c0.webp&#34;
               width=&#34;760&#34;
               height=&#34;167&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Cilium 是基于一种叫 BPF 的新内核技术，它使得能够在 Linux 自身内部动态插入强大的安全性、可见性和网络控制逻辑。除了提供传统的网络级安全性之外，BPF 的灵活性还可以在 API 和进程级别实现安全性，以保护容器或 pod 内的通信。&lt;/p&gt;
&lt;p&gt;有关 Cilium 的更详细的介绍，请参阅&lt;a href=&#34;http://docs.cilium.io/en/v1.1/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 简介&lt;/a&gt;部分。&lt;/p&gt;
&lt;h2 id=&#34;12-版本的重要功能&#34;&gt;1.2 版本的重要功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于DNS/FQDN的安全策略
&lt;ul&gt;
&lt;li&gt;基于FQDN/DNS命名定义网络安全规则，表示允许连接到外部服务。例如，允许访问foo.com。（处于Beta版）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持 AWS EKS
&lt;ul&gt;
&lt;li&gt;为管理 Kubernetes 集成量身定制的 etcd operator，消除了对需要外部 kvstore 的依赖。（处于 Beta 版）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clustermesh（集群间连接）
&lt;ul&gt;
&lt;li&gt;跨多个 Kubernetes 集群的 pod 间网络连接。（处于 Alpha 版）&lt;/li&gt;
&lt;li&gt;跨集群的基于 label 的网络安全策略实施，例如允许 cluster1 中的 pod foo 与 cluster2 中的 pod bar 通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为支持 BPF 集成 Kube-route
&lt;ul&gt;
&lt;li&gt;与 kube-router 一起协作运行以启用 BGP 网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于节点发现的 KV 存储
&lt;ul&gt;
&lt;li&gt;在非 Kubernetes 环境中启用自动节点发现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;负载均衡
&lt;ul&gt;
&lt;li&gt;支持一致的后端 selection 用于服务后端扩缩容&lt;/li&gt;
&lt;li&gt;支持基于服务label/name的策略以及L4规则&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高效性 &amp;amp; 扩缩容
&lt;ul&gt;
&lt;li&gt;对于大型和多集群规模的环境，安全身份认证空间从 16bits 增加到 24bits。&lt;/li&gt;
&lt;li&gt;首次实现基于 BPF 的数据路径通知聚合。&lt;/li&gt;
&lt;li&gt;取得持续高效的 CPU 利用进展。&lt;/li&gt;
&lt;li&gt;自动检测 underlying 网络的 MTU。&lt;/li&gt;
&lt;li&gt;禁用 DSR 时使用本地 service ID 分配以提高负载均衡可伸缩性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档
&lt;ul&gt;
&lt;li&gt;新的 AWS EKS 安装指南。&lt;/li&gt;
&lt;li&gt;参考 kubespray 安装指南。&lt;/li&gt;
&lt;li&gt;新的简化安装和升级说明。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于-dns-的安全策略&#34;&gt;基于 DNS 的安全策略&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 集群中运行的服务通常与集群外部的一系列服务进行交互。常见示例包括 SaaS 服务，如 S3、RDS、DynamoDB 等。基于 API 的服务，例如 Google 地图、Salesforce API、Twilio 等。或自托管服务，如 Oracle 数据库集群、基于 Windows 的应用程序等。到目前为止，Cilium 支持基于 CIDR 的策略，以便与此类外部服务进行交互。然而，基于 CIDR 的策略很难定义和维护，因为服务的 IP 地址可能经常发生变化。Cilium 1.2 现在支持基于 DNS 名称的特定策略。当前实现支持基于其 FQDN 的白名单外部服务的核心实例。考虑到 DNS 解决方案（例如 TTL、CNAME 等）和相关策略要求（例如&lt;code&gt;*.google.com&lt;/code&gt;等基于通配符的规范）的复杂性，对于基于 DNS 的综合策略，后续版本中还有更多工作要做。&lt;/p&gt;
&lt;h2 id=&#34;示例允许访问-my-remote-servicecom&#34;&gt;示例：允许访问 my-remote-service.com&lt;/h2&gt;
&lt;p&gt;下面的简单示例演示了如何定义网络安全策略，该策略允许所有 label 为&lt;code&gt;app = test-app&lt;/code&gt;的 pod 通过 kube-dns 解析 DNS 名称，并向服务&lt;code&gt;my-remote-service.com&lt;/code&gt;发出外部请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cilium.io/v2&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;CiliumNetworkPolicy&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;to-fqdn-example&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;endpointSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;test-app&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;egress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toFQDNs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my-remote-service.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;toEndpoints&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;matchLabels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;k8s:io.cilium.k8s.policy.serviceaccount&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-dns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;k8s:io.kubernetes.pod.namespace&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-system&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;k8s:k8s-app&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kube-dns&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toPorts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;53&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;UDP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cilium 将自动维护相应的基于 CIDR 的规则，以允许所有 pod 与所有为该 DNS 名称返回的 IP 地址进行通信。&lt;/p&gt;
&lt;h2 id=&#34;支持-aws-eks&#34;&gt;支持 AWS EKS&lt;/h2&gt;
&lt;p&gt;按照&lt;a href=&#34;http://docs.cilium.io/en/v1.2/kubernetes/install/eks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS EKS 上使用 etcd operator 的新指南&lt;/a&gt;，在 AWS EKS 托管的 Kubernetes 集群上安装 Cilium。&lt;/p&gt;
&lt;p&gt;安装指南为 Cilium 提供全新的集成 etcd operator，以管理自己的 etcd 集群。在许多情况下，Kubernetes 使用的 etcd 无法被 Cilium 使用。例如，在管理的 Kubernetes 中，例如 EKS、GKE、AKS 等。可以有限地访问 Kubernetes etcd 服务。在 Cilium 1.2 中，我们使用了一个 etcd operator，它将安装和管理一个高度可用的 etcd 集群供 Cilium 使用。这将使 Cilium 的安装和使用变得更加容易，而不依赖于 Kubernetes 等，并且不需要对 etcd 集群进行额外管理。我们正在积极致力于 AKS 整合，并将在未来几周内发布关于如何在 GKE 上运行的指南。如果您有任何问题或需要帮助，请使用&lt;a href=&#34;http://cilium.io/slack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt;联系。&lt;/p&gt;
&lt;h2 id=&#34;clustermesh跨多个-kubernetes-集群的网络连通和安全性&#34;&gt;ClusterMesh：跨多个 Kubernetes 集群的网络连通和安全性&lt;/h2&gt;
&lt;p&gt;运行多个 Kubernetes 集群变得越来越普遍。运行在不同可用区或 Regions 服务的高可用实例；在多个集群中运行的 point-of-presence，服务于不同的地理位置；组织原因如分离 PCI 与非 PCI 兼容服务；或者简单地分离 dev、test 和 prod 工作负载。&lt;/p&gt;
&lt;p&gt;运行多个 Kubernetes 集群的基本要求之一是如何连接服务以及如何为跨集群交互保证东西流量安全。在 Cilium 1.2 中，我们将引入多集群中不请求 ingress controller 或者负载均衡实现不同集群 pod 之间连接的能力。由于 pod 间可以直接交互，因此 Cilium 能够保留其身份认证并对东西向流量实施完整的 L3/L4 和 L7 访问控制。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohqzj9tnj30jg08a0ts_hu06f78f15ca5d41bb5680a1197da378db_30196_3bc63a72ba0efe7ba4f3d05d39b1632f.webp 400w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohqzj9tnj30jg08a0ts_hu06f78f15ca5d41bb5680a1197da378db_30196_aef2141206639a94d6ce4941b9ffb866.webp 760w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohqzj9tnj30jg08a0ts_hu06f78f15ca5d41bb5680a1197da378db_30196_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohqzj9tnj30jg08a0ts_hu06f78f15ca5d41bb5680a1197da378db_30196_3bc63a72ba0efe7ba4f3d05d39b1632f.webp&#34;
               width=&#34;700&#34;
               height=&#34;298&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Cilium 使用去中心化的方式创建 Cluster Mesh 并建立 pod 身份认证，而不是为所有集群使用单个集中式 etcd。用这种方式，每个集群都能独立管理它们 pod 的身份。每个集群都被赋予一个独立的标识作为身份命名空间。因此 pod 身份成为集群身份 + pod 身份的组合。这种方法易于管理和扩展，而不用协调所有集群中的身份。这种方式与多集群高可用目标保持一致，每个集群的生命周期独立于其他集群的生命周期。查看&lt;a href=&#34;https://cilium.readthedocs.io/en/stable/install/guides/clustermesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多集群安装指南&lt;/a&gt;试着体验 Cilium cluster-mesh。&lt;/p&gt;
&lt;h2 id=&#34;bgp-支持基于-kube-router--cilium&#34;&gt;BGP 支持：基于 Kube-router + Cilium&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohrg84iaj30du03ojrm_hu5d29f4d525b496ac10e818c402bb17a6_10798_75e6ae583560098f4e4971494df9bccc.webp 400w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohrg84iaj30du03ojrm_hu5d29f4d525b496ac10e818c402bb17a6_10798_70378b9468e1dfa50ac3a8f487cab909.webp 760w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohrg84iaj30du03ojrm_hu5d29f4d525b496ac10e818c402bb17a6_10798_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohrg84iaj30du03ojrm_hu5d29f4d525b496ac10e818c402bb17a6_10798_75e6ae583560098f4e4971494df9bccc.webp&#34;
               width=&#34;498&#34;
               height=&#34;132&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kube-router 是一个由 cloudnativelabs 倡议，旨在满足各种 Kubernetes 网络需求并提供统一的解决方案。从数据转发的角度来看，Kube-router 使用 BGP 来广播和管理集群中所有 pod 的路由。通过与外部路由器进行 BGP 配对，Kube-router 可以轻松地在 Kubernetes pod 与集群外部运行的服务之间建立连接。此外，Kube-router 创建服务时告知 cluster IP，这意味着可以使用单个 cluster IP 和标准端口从集群外部访问服务。&lt;/p&gt;
&lt;p&gt;由 DigitalOcean 团队领导的社区工作，Cilium 现已集成 Kube-router，整合了 BPF 和基于 BGP 路由。查看&lt;a href=&#34;http://docs.cilium.io/en/v1.2/kubernetes/install/kube-router/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 kube-router 运行 BGP 指南&lt;/a&gt;去了解如何并行运行 kube-router 和 Cilium 以运行拥有 Cilium L3-L7 策略和负载均衡的 BGP 网络。&lt;/p&gt;
&lt;h2 id=&#34;支持-istio-10&#34;&gt;支持 Istio 1.0&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohrvd6guj30e204lweo_hu0403c18ee2d1818891acd807da9436f2_9273_e201e3b0de09864202ec51c55e5a3555.webp 400w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohrvd6guj30e204lweo_hu0403c18ee2d1818891acd807da9436f2_9273_7eae3c4962a2857ddd002ac0cd7d9550.webp 760w,
               /blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohrvd6guj30e204lweo_hu0403c18ee2d1818891acd807da9436f2_9273_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cilium1-2-dns-security-policies-eks-support-clustermesh-kube-router-integration/006tNbRwly1fuohrvd6guj30e204lweo_hu0403c18ee2d1818891acd807da9436f2_9273_e201e3b0de09864202ec51c55e5a3555.webp&#34;
               width=&#34;506&#34;
               height=&#34;165&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Istio 1.0 发布了快一个月了。Cilium 已与 Istio 完美集成，可为 Service Mesh架构提供高效的数据转发以及L3/L4和L7安全性。我们在博客 中详细介绍了这一点&lt;a href=&#34;http://www.servicemesher.com/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 1.0：Cilium 如何通过 socket 感知 BPF 程序增强 Istio&lt;/a&gt;。Cilium 1.2 包含了与 Istio 1.0 集成的几项改进。&lt;/p&gt;
&lt;h2 id=&#34;可扩展性和高效&#34;&gt;可扩展性和高效&lt;/h2&gt;
&lt;p&gt;同样，通过在各种环境中大量分析 Cilium 性能指标和并优化连接跟踪和其他关键数据结构的操作，继续大力改进已经很好的可扩展性并提高 CPU 效率。如果您想了解更多，请在&lt;a href=&#34;http://cilium.io/slack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt;上跟我们联系。&lt;/p&gt;
&lt;h2 id=&#34;升级说明&#34;&gt;升级说明&lt;/h2&gt;
&lt;p&gt;同样，请按照&lt;a href=&#34;https://cilium.readthedocs.io/en/v1.2/install/upgrade/#upgrading-minor-versions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;指南升级&lt;/a&gt;升级你的 Cilium deployment。随意在&lt;a href=&#34;http://cilium.io/slack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slack&lt;/a&gt;上联系我们。&lt;/p&gt;
&lt;h2 id=&#34;发布&#34;&gt;发布&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;容器镜像：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker.io/cilium/cilium:v1.2.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>使用 Cilium 增强 Istio—通过 Socket 感知 BPF 程序</title>
      <link>https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/</link>
      <pubDate>Mon, 13 Aug 2018 16:19:59 +0800</pubDate>
      <guid>https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/</guid>
      <description>&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu84zi0tigj30td0gk75e_hu6f98d2c293b324054f6b7ab381be8fdc_31422_aed12ec6fc79638ec307efde3c8721fc.webp 400w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu84zi0tigj30td0gk75e_hu6f98d2c293b324054f6b7ab381be8fdc_31422_bdce18d43692d383b042889648dc3f16.webp 760w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu84zi0tigj30td0gk75e_hu6f98d2c293b324054f6b7ab381be8fdc_31422_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu84zi0tigj30td0gk75e_hu6f98d2c293b324054f6b7ab381be8fdc_31422_aed12ec6fc79638ec307efde3c8721fc.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://cilium.io/blog/2018/08/07/istio-10-cilium/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;8 月 1 日 Istio 1.0 发布，Cilium 社区感谢所有 Istio 贡献者为此付出的巨大努力。我们很幸运能够参与社区活动，为 Istio 做出贡献，并帮助一些用户通过 Istio 和 Cilium 进行生产部署。如果您有兴趣在深入了解技术细节之前了解 Istio + Cilium 的用户故事，请考虑阅读 HP FitStation 团队（最大的 Cilium + Istio 用户之一）发布的以下 Istio 博客：&lt;a href=&#34;https://istio.io/blog/2018/hp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 是惠普 FitStation 平台的游戏规则的改变者&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本博客将介绍 BPF 和 Cilium 如何增强 Istio 的一些细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增强安全
&lt;ul&gt;
&lt;li&gt;使用 socket 感知 BPF 程序为多容器 pod 提供最小权限&lt;/li&gt;
&lt;li&gt;防止受损的 sidecar 代理和绕过 sidecar 协议&lt;/li&gt;
&lt;li&gt;使用 BPF 强制所有应用程序流量经过 sidecar 代理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开启 Istio 对外部服务的支持
&lt;ul&gt;
&lt;li&gt;使用 socket 感知 BPF 程序和 kTLS 提供 TLS 链接加密的可视化和控制管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;高效网络和 socket 重定向加速 istio 性能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cilium-是什么&#34;&gt;Cilium 是什么？&lt;/h2&gt;
&lt;p&gt;Cilium 是一个开源软件，用于透明保护在使用 Kubernetes、Docker 和 Mesos 等 Linux 容器管理平台部署的应用程序服务之间的网络和 API 连接。&lt;/p&gt;
&lt;p&gt;Cilium 的基础是一种名为 BPF 的新 Linux 内核技术，这使得能够在 Linux 自身内动态植入强大的安全性，可见性和网络控制逻辑。除了提供传统的网络级安全性之外，BPF 的灵活性还可以在 API 和进程级别上实现安全性，以保护容器或容器内的通信。由于 BPF 在 Linux 内核中运行，因此无需对应用程序代码或容器配置进行任何更改便可以应用和更新 Cilium 安全策略。&lt;/p&gt;
&lt;p&gt;有关 Cilium 的更详细的介绍，请参阅&lt;a href=&#34;http://docs.cilium.io/en/v1.1/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium 简介&lt;/a&gt;部分。&lt;/p&gt;
&lt;h2 id=&#34;istio-是什么&#34;&gt;Istio 是什么？&lt;/h2&gt;
&lt;p&gt;Istio 提供了一种通过负载均衡、服务间身份验证、监控等且没有侵入性创建部署服务网络的简便方法。可以通过在整个环境中部署特殊的 sidecar 代理来添加对服务的支持，该代理拦截微服务之间的所有网络通信，使用 Istio 的控制平面功能进行配置和管理。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu853bzn1aj311o0rs426_hu30304713123cc254280987ebd3dcd2d7_65436_4aaa895cb87b5f85e63265ba7c0a4d73.webp 400w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu853bzn1aj311o0rs426_hu30304713123cc254280987ebd3dcd2d7_65436_46eec2f6fe4e781ac40e277fc9b64689.webp 760w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu853bzn1aj311o0rs426_hu30304713123cc254280987ebd3dcd2d7_65436_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu853bzn1aj311o0rs426_hu30304713123cc254280987ebd3dcd2d7_65436_4aaa895cb87b5f85e63265ba7c0a4d73.webp&#34;
               width=&#34;760&#34;
               height=&#34;560&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;您可以在&lt;a href=&#34;https://istio.io/zh/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 文档&lt;/a&gt;中阅读有关 Istio 概念和架构的更多信息。&lt;/p&gt;
&lt;h2 id=&#34;istio-高效网络&#34;&gt;Istio 高效网络&lt;/h2&gt;
&lt;p&gt;Istio 和 Cilium 之间最基本的协作形式是 Cilium CNI 插件通过将所有 sidecar 代理连接在一起并通过提供代理和 Istio 控制平面之间的连接，为 Istio 提供网络连接。Cilium 还确保 Istio 托管服务可以与不受 Istio 管理的 pod 进行通信。&lt;/p&gt;
&lt;p&gt;下图说明了 Istio 控制平面、sidecar 代理和 CNI 插件如何相互叠加：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cilium--istio-networking-architecture&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://cilium.io/static/cilium_istio_networking-68a7e3c5272d030e8ca3a717cc348631-84ad3.png&#34; alt=&#34;Cilium &amp;#43; Istio networking architecture&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Cilium &amp;#43; Istio networking architecture
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这种模式下，所有 Istio 系统组件都受益于 Cilium 在 Linux 内核中基于 BPF 的高效网络功能。BPF 是网络和数据包过滤技术（如 iptables 等）的替代方案。您可以在以下博客文章中找到有关 BPF 推动这一转变的原因的更多信息：&lt;a href=&#34;https://cilium.io/blog/2018/04/17/why-is-the-kernel-community-replacing-iptables/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么内核社区用 BPF 替换 iptables？&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;socket-级别重定向加速-istio-和-envoy&#34;&gt;Socket 级别重定向加速 Istio 和 Envoy&lt;/h2&gt;
&lt;p&gt;Istio 服务网格架构要求将参与服务网格的所有 pod 的出站和入站请求的所有网络流量都要重定向到 sidecar 代理。Sidecar 代理将终止所有 TCP 连接并执行诸如遥测、重试、路由、双向 TLS 之类的服务和代表服务的授权，并使用辅助所谓的上游 TCP 连接来到达目的地服务，这正是服务之间支持双向 TLS，没有代码侵入性原因所在。然而，当使用标准的基于 IP 的工具（如 iptables）实现重定向时，这种重定向可能会很费事，因为必须多次遍历整个 TCP/IP 堆栈。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu853qn3w1j30fi0bo0tx_hu692e5c47dc3f65c42a2b78a8cbe83a6b_34613_6b886bbcecbd4f46da8588c7080ac65a.webp 400w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu853qn3w1j30fi0bo0tx_hu692e5c47dc3f65c42a2b78a8cbe83a6b_34613_96ccfec7ea8aa251589fe2ea5ef3e55d.webp 760w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu853qn3w1j30fi0bo0tx_hu692e5c47dc3f65c42a2b78a8cbe83a6b_34613_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu853qn3w1j30fi0bo0tx_hu692e5c47dc3f65c42a2b78a8cbe83a6b_34613_6b886bbcecbd4f46da8588c7080ac65a.webp&#34;
               width=&#34;558&#34;
               height=&#34;420&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Cilium 充分使用了一个叫 sockmap 的令人兴奋的 BPF 功能。它允许过滤和重定向，基于套接字级别，使 Cilium 可以 socket 感知。此 socket 是应用程序用于发送和接收网络流量的接口。这允许在相同节点上实质上短路 TCP socket，从而以完全透明的方式大幅加速应用程序和服务网格的 sidecar 代理的通信速度。应用程序和 sidecar 代理都不需要以任何方式进行修改。如果您有兴趣了解有关此用例的更多信息，请参阅位于奥斯汀的 KubeCon 2018 上的演示文稿——&lt;strong&gt;使用 CIlium 加速 Envoy、Istio 和 Linux 内核（&lt;a href=&#34;https://t.co/cx6CQhn1xl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;录像&lt;/a&gt;、&lt;a href=&#34;https://www.slideshare.net/ThomasGraf5/accelerating-envoy-and-istio-with-cilium-and-the-linux-kernel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;幻灯片&lt;/a&gt;）&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;用-cilium-增强-istio-安全性&#34;&gt;用 Cilium 增强 Istio 安全性&lt;/h2&gt;
&lt;p&gt;Cilium 与 Istio 整合，以增强 Istio 的安全性。我们来看看 Istio 提供的安全属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双向 TLS：如果发送者由 Istio 控制，则能够验证发件人的身份。这可以保护服务免受来自非法源服务欺骗 IP 地址的攻击请求。它还可以在 Istio 管理的所有服务之间启用基于 TLS/SSL 的加密。&lt;/li&gt;
&lt;li&gt;授权：能够授权请求，包括过滤元数据（如 HTTP 协议字段，IP 寻址和身份信息）以及调用其他授权插件（例如，执行令牌验证）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;level-1-保护不受支持的协议和受损的-sidecarcilium-10&#34;&gt;LEVEL 1: 保护不受支持的协议和受损的 sidecar（Cilium 1.0）&lt;/h2&gt;
&lt;p&gt;所需的第一个基本保护级别是将安全策略应用于 Istio 不支持的所有网络协议，包括 UDP、ICMP 和所有 IPv6 流量。任何此类流量都会绕过 sidecar 代理，从而通过 Istio 强制执行任何最终安全策略。无论协议如何，Cilium 将 pod 之外所有网络流量应用 L3/L4 安全策略。如果遇到不支持的协议，则将丢弃该数据包。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-slide&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://cilium.io/static/cilium_istio_security-36e68cf344d09a1df787a22e4035d045-84ad3.png&#34; alt=&#34;Slide&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Slide
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安全化非IPv4/TCP协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cilium 在 pod 之外提供安全策略，对于协议不受支持、重定向或由于某些其他原因而失败，将完全阻止或应用细粒度的安全规则到任何绕过代理的流量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;防止受损的 sidecar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;sidecar 代理本身不受 Istio 安全规则的约束。受损的 sidecar 可以不受限制地访问网络。它还可以操纵自己的安全规则以变得更加宽松。除了 Istio 之外，Cilium 还允许定义服务级别安全策略，并确保受损的 sidecar 代理只能以最小权限运行。&lt;/p&gt;
&lt;h2 id=&#34;level2-安全的多容器-pod正在开发中&#34;&gt;LEVEL2: 安全的多容器 Pod（正在开发中）&lt;/h2&gt;
&lt;p&gt;Level 1 安全级别以 pod、service 为级别保护服务网格。它不提供容器内部的任何安全性，例如用于应用容器和 sidecar 容器之间的通信。&lt;/p&gt;
&lt;p&gt;Level 2 安全级别通过使用 socket 感知 BPF 程序在 socket 级别提供分段，在同一个 pod 中引入容器和进程之间的分段。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu854newqhj312w0iijud_huac26f751b8ec3b49e277c7557426ccdb_52513_708199db51d050f53d0aba590ea9d34c.webp 400w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu854newqhj312w0iijud_huac26f751b8ec3b49e277c7557426ccdb_52513_ab1e28075a02e609d6a3f2ab088642d2.webp 760w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu854newqhj312w0iijud_huac26f751b8ec3b49e277c7557426ccdb_52513_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu854newqhj312w0iijud_huac26f751b8ec3b49e277c7557426ccdb_52513_708199db51d050f53d0aba590ea9d34c.webp&#34;
               width=&#34;760&#34;
               height=&#34;362&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;强制所有应用流量流经 sidecar: 通过使用 socket 感知 BPF 策略，Cilium 可以确保应用程序的所有通信都必须通过 sidecar 进行入站和出站连接。保证应用程序容器本身不能从 pod 外部接收连接，或者在不通过 sidecar 代理的情况下向 pod 外部发出请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pod 中的最小安全权限：通过使用 socket 感知 BPF 程序锁定容器内部和进程级别的通信，其中一个容器中的安全漏洞不再导致整个容器被泄露。这尤其重要，因为 sidecar 容器可以直接访问 pod 中的任何其他容器，并且可以访问潜在的敏感信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;有趣的事实&#34;&gt;有趣的事实&lt;/h2&gt;
&lt;p&gt;支持 socket 的 BPF 程序不仅限于基于 IP 的 socket。安全策略也可以扩展到涵盖 UNIX 域 socket。&lt;/p&gt;
&lt;h2 id=&#34;外部服务的-tls-可见性正在开发中&#34;&gt;外部服务的 TLS 可见性（正在开发中）&lt;/h2&gt;
&lt;p&gt;Istio 依赖于对应用程序协议层（如 HTTP）的可见性，以提供诸如基于 URI 的路由，基于 HTTP 头的授权和 API 请求级别遥测和跟踪等功能。通过将双向 TLS 与 Istio Citadel 管理的证书相互应用，可以在未加密的服务之间保持应用程序流量并在源服务器和目标服务的 sidecar 代理之间执行 TLS 加密来实现此可见性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu854xy8csj312w0f2jsu_hu420353e74709ec34eae808600413c535_26932_7ad07d0836dc82fb2a7d4faeb8d87e50.webp 400w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu854xy8csj312w0f2jsu_hu420353e74709ec34eae808600413c535_26932_7ecc17fe739b7ceab844bb6b346596a7.webp 760w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu854xy8csj312w0f2jsu_hu420353e74709ec34eae808600413c535_26932_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu854xy8csj312w0f2jsu_hu420353e74709ec34eae808600413c535_26932_7ad07d0836dc82fb2a7d4faeb8d87e50.webp&#34;
               width=&#34;760&#34;
               height=&#34;294&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这适用于网格内部服务之间的连接。与网格之外的服务的通信几乎由应用程序本身进行 TLS 加密保证，以便在不可信的因特网上保护通信。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu8555b0z3j312w0e8t9y_hufe61675fc6fc11ba4375983dcd4aa966_22477_4cb781716396ac4d81db1fb850602ec8.webp 400w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu8555b0z3j312w0e8t9y_hufe61675fc6fc11ba4375983dcd4aa966_22477_a93e6c1856665699a14fe08db01cfe23.webp 760w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu8555b0z3j312w0e8t9y_hufe61675fc6fc11ba4375983dcd4aa966_22477_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu8555b0z3j312w0e8t9y_hufe61675fc6fc11ba4375983dcd4aa966_22477_4cb781716396ac4d81db1fb850602ec8.webp&#34;
               width=&#34;760&#34;
               height=&#34;278&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Linux 的 kTLS（内核 TLS）工作原理最初是由 Facebook 的 Dave Watson 提出。它包括将数据的对称加密从应用程序中的 SSL 库迁移到 Linux 内核中的 socket 功能。这项工作的最初动机是纯粹的性能优化，因为使用 kTLS 比 SSL 库快 3-4％。这对于经过 SSL 静态数据的提供者有足够的兴趣去继续。这项工作已经合并，并且可以在最新的 Linux 内核中使用。结合在 Linux socket 层注入的 BPF 程序的功能，kTLS 实现了数据的透明可见性，否则此时已加密。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu855axcscj312w0gdgn4_hu4666024fd363dc6e45489e65fcad93c4_27775_64f93596f132177aeaf126a6d522895a.webp 400w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu855axcscj312w0gdgn4_hu4666024fd363dc6e45489e65fcad93c4_27775_ca1c00c6f576f83b678be14fb31958b5.webp 760w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu855axcscj312w0gdgn4_hu4666024fd363dc6e45489e65fcad93c4_27775_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu855axcscj312w0gdgn4_hu4666024fd363dc6e45489e65fcad93c4_27775_64f93596f132177aeaf126a6d522895a.webp&#34;
               width=&#34;760&#34;
               height=&#34;320&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们仍在研究这个功能，但有一个初始的功能原型，证明了获得可见性和控制数据的概念，这些数据通常是在应用程序本身中进行 TLS 加密的。下一步是将此数据提供给 sidecar，以便在与外部服务的连接上释放 Istio。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu855mb70uj312w0lm77l_hufc565f9e81daee614f2898d44e658957_56070_1a31162ba13983db173e9ed1dd24ad8e.webp 400w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu855mb70uj312w0lm77l_hufc565f9e81daee614f2898d44e658957_56070_9246c19063f84eeaa8d3fc22ac92766e.webp 760w,
               /blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu855mb70uj312w0lm77l_hufc565f9e81daee614f2898d44e658957_56070_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/how-cilium-enhances-istio-with-socket-aware-bpf-programs/0069RVTdly1fu855mb70uj312w0lm77l_hufc565f9e81daee614f2898d44e658957_56070_1a31162ba13983db173e9ed1dd24ad8e.webp&#34;
               width=&#34;760&#34;
               height=&#34;423&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;在没侵入应用程序的情况下-ktls-是如何实现透明化的&#34;&gt;在没侵入应用程序的情况下 kTLS 是如何实现透明化的？&lt;/h2&gt;
&lt;p&gt;公平地说，应用程序使用的 SSL 库必须感知 kTLS，并且用户必须选择系统级别的行为。在应用程序运行时升级 SSL 版本和启动可视化一样简单，没有侵入应用程序。由于可见性是在 socket 级别获得的，这也意味着应用程序在排队后无法再更改此数据。如果数据用于授权请求，则这一点至关重要。&lt;/p&gt;
&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;增强 Istio 安全
&lt;ul&gt;
&lt;li&gt;pod 中最小权限：通过使用 socket 感知 BPF 程序锁定容器内部和进程级别的通信，其中一个容器中的安全漏洞不再导致整个容器被泄露。&lt;/li&gt;
&lt;li&gt;安全化非IPv4/TCP协议：目前，Istio仅支持TCP和IPv4。任何其他协议（如UDP或IPv6）都将绕过sidecar代理和任何Istio安全规则，Cilium将通过完全阻止这些协议或应用细粒度的安全规则来介入。&lt;/li&gt;
&lt;li&gt;防止受损的 sidecar：sidecar 代理本身不受 Istio 安全规则的约束。受损的 sidecar 可以不受限制地访问网络。它还可以操纵自己的安全规则以变得更加宽松。除了 Istio 之外，Cilium 还允许定义服务级别安全策略，并确保受损的边车代理只能以最小的权限运行。&lt;/li&gt;
&lt;li&gt;前置应用流量经过 sidecar：通过使用 socket 感知 BPF 策略，Cilium 可以确保应用程序的所有通信都必须通过 sidecar 进行入站和出站连接。保证应用程序容器本身不能从 pod 外部接收连接，或者在不通过 sidecar 代理的情况下向 pod 外部发出请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部服务
&lt;ul&gt;
&lt;li&gt;使用 SSL 为 Istio 加密链接：与群集外部服务的 TCP 连接通常是 TLS 加密的，并且 Istio 无法检查此类连接的 HTTP 头。通过利用 kTLS 集成到内核中的 BPF，Cilium 将能够提供对 TLS 加密数据的可见性和控制管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;高效网络：Istio 需要一个 CNI 插件来提供 pod 之间的网络连接。Cilium 实现了 CNI 插件接口，并利用 BPF 在 sidecar 代理和 Istio 控制平面之间提供高效的数据路径。&lt;/li&gt;
&lt;li&gt;socket 重定向加速 Istio：通过使用 socket 感知 BPF 程序在 Linux socket 级别执行流量重定向，Cilium 可以加速流量重定向到 sidecar 代理。这允许绕过很费事的 TCP/IP 堆栈遍历而且对应用程序或 sidecar 代码没有侵入性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如果您有兴趣了解更多信息&#34;&gt;如果您有兴趣了解更多信息：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.cilium.io/en/stable/gettingstarted/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;试用入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.cilium.io/en/stable/concepts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;了解有关 Cilium 概念的更多信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cilium.io/slack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;加入我们的 Slack Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>探讨 Service Mesh 中一种更高效的代理模式</title>
      <link>https://cloudnative.to/blog/a-new-more-efficient-proxy-model/</link>
      <pubDate>Sun, 01 Jul 2018 12:33:23 +0800</pubDate>
      <guid>https://cloudnative.to/blog/a-new-more-efficient-proxy-model/</guid>
      <description>&lt;h2 id=&#34;背景和想法&#34;&gt;背景和想法&lt;/h2&gt;
&lt;p&gt;Service Mesh 提供了微服务化开发的新思路，核心思想是构建一个代理转发网络并结合控制和转发分离的做法来对成千上万个微服务间做流量、策略、安全等管理，而另一方面 Linux Kernel 提供一种运行时高效扩可编程的网络注入机制 eBPF，借此能实现 L47 层代理转发。假设借助 eBPF，作为 Service Mesh 的数据转发层，对接 Pilot、Mixer 等控制面，实现策略、流量和安全管理，是不是一种更高效的方式？这会比 Envoy 拥有更好的性能，虽然性能未必是 Mesh 首要考虑的问题，后搜索发现 Cilium 果然做了类似的尝试，详情见 &lt;a href=&#34;http://docs.cilium.io/en/latest/gettingstarted/istio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://docs.cilium.io/en/latest/gettingstarted/istio/&lt;/a&gt;，但对接的方式很特别，并不像 Envoy 一样，为每一个 Pod 部署一个 Envoy 容器，而是在多个 Pod 外部署一个 Cilium，以 Kubernetes Daemon Set 模式部署，为多个 Pod 进行代理，对控制器层面的 Pilot 做了定制，部署配置如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sed -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;s,docker\.io/istio/pilot:,docker.io/cilium/istio_pilot:,&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      &amp;lt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ISTIO_HOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/install/kubernetes/istio.yaml &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      kubectl create -f -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Cilium 部署了一个“书店”集群服务为例子来说明，如下，在下发“路由策略”之前流量如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/a-new-more-efficient-proxy-model/00704eQkgy1fsu96134y9j30cj09rt93.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;正常流量从书页到详情页，到评论页面&lt;/p&gt;
&lt;p&gt;配置一条 istio 路由策略，把流量全部导向 reviews-v1，reviews-v2 没有流量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;config.istio.io/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;RouteRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews-default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;precedence&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;导流后如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/a-new-more-efficient-proxy-model/00704eQkgy1fsu96jwbo7j30jh0d8dgv.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;可见，Cilium 能识别 service-name 和 labels，并进行导流。策略相当灵活。&lt;/p&gt;
&lt;p&gt;Cilium 还做了个性能测试，在 Pod - Proxy - Pod 场景下的请求延迟对比：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/a-new-more-efficient-proxy-model/00704eQkgy1fsu96qkxthj30jg0ay0um.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Cilium 的延迟全部小于当前的 Envoy、Nginx、Haproxy 代理。&lt;/p&gt;
&lt;h2 id=&#34;从服务化-springcloud-框架开始&#34;&gt;从服务化 SpringCloud 框架开始&lt;/h2&gt;
&lt;p&gt;我比较赞同微服务是一种 SOA 的衍生形态的观点，微服务并不完全是一种新的东西。SpringCloud 就是一种微服务化应用框架，目的在于帮助应用快速进行微服务化开发，官方定位如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提供了微服务所需的配置管理、服务发现、服务环路发现、智能路由、代理、全局锁、集群选主、分布式 Session、集群状态管理等基础能力。&lt;/p&gt;
&lt;h2 id=&#34;新服务化转折点-service-mesh&#34;&gt;新服务化转折点 Service Mesh&lt;/h2&gt;
&lt;p&gt;而 2016 年，两个不为人知的小项目 linked 和 Envoy 也许没有想到自己在两年后的今天承载了下一代微服务框架的使命：无侵入式微服务架构，这种架构目前有星星燎原之势取代 SpringCloud 模式成为转折点，新架构完全解耦微服务框架和应用，使应用节点不再关心服务注册、发现、调用等问题，应用只管把请求发送给与应用共部署的代理进程，这个代理进程对内外承接应用所有的请求，并自身组成一个网络，相互间调用，最终把请求返回给应用，这意味着应用只关心自身业务实现，不再关心请求是如何发送的，发送到哪里的，统一由代理进程进行转发。并且应用代码可以用任何语言实现，在代码层面和框架完全解耦，不像 SpringCloud 应用进程需要基于这个框架进行开发，而是彻底地从应用进程中分离，这种解耦似乎一下子使整体系统的复杂度下降了一个级别。框架从应用代码中完全下沉到了另一个代理进程中，应用和“代理”仅以标准的协议交互，换句话说，框架从函数级别的接口变成了进程间通讯接口。这种彻底的解耦让应用抛开“包袱”变得轻量，这在复杂系统和资源敏感型系统中非常有好处，比如应用可以使用相比 Java 占用资源的 golang 语言编写程序；比如改变业务代码更加容易，也不会因为框架改变导致业务代码改变。进而不妨再大胆想象一下，曾经我们使用的 database library 是否也可以从应用代码里剥离出来下沉到代理进程呢？&lt;/p&gt;
&lt;p&gt;2016 年 9 月，Linked 背后的创业公司 Buoyant 第一次在 SF Microservices 提出了“Service Mesh”概念，并随后在 2017 年 4 月 William Morgan 给 Service Mesh 做了定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A service mesh is a dedicated infrastructure layer for handling service-to-service communication. It’s responsible for the reliable delivery of requests through the complex topology of services that comprise a modern, cloud native application. In practice, the service mesh is typically implemented as an array of lightweight network proxies that are deployed alongside application code, without the application needing to be aware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;are deployed alongside application code, without the application needing to be aware&lt;/strong&gt; 这句话道出了 mesh 的核心，即对应用无感知和无侵入。微服务框架从应用代码里剥离出来，从强依赖变成弱依赖，甚至无依赖，应用本身不再关心集群状态、调用路由、安全策略等等，甚至可以自由升级，框架升级不再影响应用自身，业务迭代变得更加迅速，解耦带来了巨大收益，架构变得更加优雅。&lt;/p&gt;
&lt;p&gt;Service Mesh 的两个核心组件为控制组件和数据组件，数据组件和应用一起部署，接管应用所有请求，应用只需访问类似 http://127.0.0.1/service 地址，剩下代理进程会转发请求到对应的对端服务，并实现服务发现注册、流量控制、安全控制等功能。所有代理进程相互连通，组成了像一个格子的网络，并整个网络被一个控制器管理，而这个网格就叫做 Mesh。Service Mesh 的数据层组件的主要实现者是 Linked 和 Envoy。&lt;/p&gt;
&lt;p&gt;2017 年 5 月 24 日，Google 和 IBM 高调发布了基于 Service Mesh 思想的服务化框架产品 Istio，出身名门的 Istio 一下子火了，并给当时出身草根的 Linked 产品承重一击，Linked 瞬间陷入了黑暗。Istio 数据层收编了 Envoy，自己做了控制层，提供 Pilot、Mixer、Istio-Auth 三大组件，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mixer：提供监控数据管理、路由、负载均衡、路由、调用追踪等流量管理，是控制器的核心，并提供后端对接平台，如 k8s、Mesos 等。&lt;/li&gt;
&lt;li&gt;Pilot（飞行员）: Mixer 的执行模块，负责对 Envoy 进行运行时配置。&lt;/li&gt;
&lt;li&gt;Istio-Auth：提供服务间 TLS 安全通信、角色鉴权、用户认证等 AAA 管理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Envoy 与应用部署在一起，提供服务间请求高效转发，并提供扩展接口以实现不同的转发策略，同时上报流量监控数据，提供 HTTP、gRPC、TCP 转发能力。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/a-new-more-efficient-proxy-model/00704eQkgy1fsu97qrffkj31900oqwid.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一开始 Linked 仅仅只有数据层面，是缺乏控制面的，而 Istio 一开始的定位就很清晰地包括了控制和数据面，后来 Buoyant 公司借鉴 Istio 的思想，开发了与 Istio 竞争的 Conduit，控制面用 Rust 开发，从这个角度讲，Google 似乎看得更远，Buoyant 挺有危机感。&lt;/p&gt;
&lt;p&gt;介绍完 Service Mesh，来看看能实现一个类似数据转发层的 eBPF 框架。&lt;/p&gt;
&lt;h2 id=&#34;新内核的网络利器-ebpf&#34;&gt;新内核的网络利器 eBPF&lt;/h2&gt;
&lt;p&gt;eBPF(Extended Berkeley Packet Filter) 是 Kernel 3.18 之后的一个内核模块，提供了一种在网络栈的钩子节点处动态运行用户代码的能力，这种动态加载无需重启 Kernel，用户使用 C 语言编写，由 llvm 编译成可执行文件，但因为是在内核态执行，eBPF 对用户代码非常严格，甚至提供了一个叫 verifier 的审核模块对用户代码进行检查，确保用户代码符合内核要求，并同时能在短时间内执行完毕，即便如此，只要设计巧妙，也能实现很高级的网络功能，Cilium 的能力和价值就在此了。&lt;/p&gt;
&lt;p&gt;编写 eBPF 的限制如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 Kernel 4.16 和 LLVM 6.0 之前不支持普通函数调用，所有调用必须为内联函数&lt;/li&gt;
&lt;li&gt;最大只能执行 4096 个 BPF 指令&lt;/li&gt;
&lt;li&gt;不支持共享库调用（使用 bfp/lib 定义的库）&lt;/li&gt;
&lt;li&gt;不允许全局变量，但可以使用 &lt;code&gt;BPF_MAP_TYPE_PERCPU_ARRAY&lt;/code&gt; 作为全局 map 存储状态信息，并可以在多个 BPF 程序间共享数据&lt;/li&gt;
&lt;li&gt;不允许使用字符串常量和数组&lt;/li&gt;
&lt;li&gt;限制性的使用循环，BPF verifier 验证程序会检测代码是否有循环，使用 &lt;code&gt;#pragma unroll&lt;/code&gt; 和 &lt;code&gt;BPF_MAP_TYPE_PERCPU_ARRAY&lt;/code&gt; 最大只能支持 32 次迭代&lt;/li&gt;
&lt;li&gt;栈空间限制大小 512 bytes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了编写方便，内核也提供一些可以使用的组件如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Helper Func：提供一些从内核中读写数据流的函数集&lt;/li&gt;
&lt;li&gt;Maps：内核中存储 KV 的 Map 集，用于变相存储全局变量&lt;/li&gt;
&lt;li&gt;Tail Calls 和 BPF to BPF Calls：BPF 程序调用另一个 BPF 程序，这样就能使功能模块化了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其他能力：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JIT：即时翻译执行代码能力&lt;/li&gt;
&lt;li&gt;Offloads：允许用户代码下沉到网卡中执行&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，要编写一个高级 BPF 相对普通开发还是有难度的，下面介绍个简单的例子，主要实现对网卡上下行进出流量进行统计。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开发环境准备&lt;/p&gt;
&lt;p&gt;当前 Ubuntu 17.04 以上版本，按照编译所依赖的包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo apt-get install -y make gcc libssl-dev bc libelf-dev libcap-dev &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;clang gcc-multilib llvm libncurses5-dev git pkg-config libmnl bison flex &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;graphviz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编码代码 tc-example.c 实现对进出流量传输字节进行计数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#include &amp;lt;linux/bpf.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#include &amp;lt;linux/pkt_cls.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#include &amp;lt;stdint.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#include &amp;lt;iproute2/bpf_elf.h&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#ifndef __section&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# define __section(NAME)                  \&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   __attribute__&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;section&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;NAME&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, used&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#ifndef __inline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# define __inline                         \&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   inline __attribute__&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;always_inline&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#ifndef lock_xadd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# define lock_xadd(ptr, val)              \&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;void&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;__sync_fetch_and_add&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ptr, val&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#ifndef BPF_FUNC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# define BPF_FUNC(NAME, ...)              \&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;*NAME&lt;span class=&#34;o&#34;&gt;)(&lt;/span&gt;__VA_ARGS__&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;void *&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;BPF_FUNC_##NAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;static void *BPF_FUNC&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;map_lookup_elem, void *map, const void *key&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;struct bpf_elf_map acc_map __section&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;maps&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    .type           &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; BPF_MAP_TYPE_ARRAY,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    .size_key       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; sizeof&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;uint32_t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    .size_value     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; sizeof&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;uint32_t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    .pinning        &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; PIN_GLOBAL_NS,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    .max_elem       &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 2,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;static __inline int account_data&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;struct __sk_buff *skb, uint32_t dir&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    uint32_t *bytes&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; map_lookup_elem&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;acc_map, &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;dir&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            lock_xadd&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;bytes, skb-&amp;gt;len&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; TC_ACT_OK&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;__section&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ingress&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int tc_ingress&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;struct __sk_buff *skb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; account_data&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;skb, 0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;__section&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;egress&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int tc_egress&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;struct __sk_buff *skb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; account_data&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;skb, 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;char __license&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; __section&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GPL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	struct sk_buff - socket buffer, it&lt;span class=&#34;s1&#34;&gt;&amp;#39;s the primary struct for network.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *    See  https://elixir.bootlin.com/linux/latest/source/include/linux/skbuff.h)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@next: Next buffer in list
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@prev: Previous buffer in list
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@tstamp: Time we arrived/left
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@rbnode: RB tree node, alternative to next/prev for netem/tcp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@sk: Socket we are owned by
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@dev: Device we arrived on/are leaving by
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@cb: Control buffer. Free for use by every layer. Put private vars here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@_skb_refdst: destination entry (with norefcount bit)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@sp: the security path, used for xfrm
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@len: Length of actual data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@data_len: Data length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@mac_len: Length of link layer header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@hdr_len: writable header length of cloned skb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@csum: Checksum (must include start/offset pair)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@csum_start: Offset from skb-&amp;gt;head where checksumming should start
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@csum_offset: Offset from csum_start where checksum should be stored
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@priority: Packet queueing priority
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@ignore_df: allow local fragmentation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@cloned: Head may be cloned (check refcnt to be sure)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@ip_summed: Driver fed us an IP checksum
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@nohdr: Payload reference only, must not modify header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@pkt_type: Packet class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@fclone: skbuff clone status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@ipvs_property: skbuff is owned by ipvs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@tc_skip_classify: do not classify packet. set by IFB device
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@tc_at_ingress: used within tc_classify to distinguish in/egress
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@tc_redirected: packet was redirected by a tc action
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@tc_from_ingress: if tc_redirected, tc_at_ingress at time of redirect
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *	@peeked: this packet has been seen already, so stats have been
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt; *		done for it, don&amp;#39;&lt;/span&gt;t &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; them again
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@nf_trace: netfilter packet trace flag
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@protocol: Packet protocol from driver
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@destructor: Destruct &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@tcp_tsorted_anchor: list structure &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; TCP &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tp-&amp;gt;tsorted_sent_queue&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@_nfct: Associated connection, &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; any &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;with nfctinfo bits&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@nf_bridge: Saved data about a bridged frame - see br_netfilter.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@skb_iif: ifindex of device we arrived on
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@tc_index: Traffic control index
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@hash: the packet &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@queue_mapping: Queue mapping &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; multiqueue devices
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@xmit_more: More SKBs are pending &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; this queue
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@ndisc_nodetype: router &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;from link layer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@ooo_okay: allow the mapping of a socket to a queue to be changed
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@l4_hash: indicate &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; is a canonical 4-tuple &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; over transport
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *		ports.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@sw_hash: indicates &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; was computed in software stack
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@wifi_acked_valid: wifi_acked was &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@wifi_acked: whether frame was acked on wifi or not
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@no_fcs:  Request NIC to treat last &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; bytes as Ethernet FCS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@csum_not_inet: use CRC32c to resolve CHECKSUM_PARTIAL
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@dst_pending_confirm: need to confirm neighbour
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  *	@napi_id: id of the NAPI struct this skb came from
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@secmark: security marking
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@mark: Generic packet mark
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@vlan_proto: vlan encapsulation protocol
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@vlan_tci: vlan tag control information
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@inner_protocol: Protocol &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;encapsulation&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@inner_transport_header: Inner transport layer header &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;encapsulation&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@inner_network_header: Network layer header &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;encapsulation&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@inner_mac_header: Link layer header &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;encapsulation&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@transport_header: Transport layer header
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@network_header: Network layer header
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@mac_header: Link layer header
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@tail: Tail pointer
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@end: End pointer
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@head: Head of buffer
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@data: Data head pointer
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@truesize: Buffer size
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; *	@users: User count - see &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;datagram,tcp&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; */
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译成 BPF 可执行程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ clang -O2 -Wall -target bpf -c tc-example.c -o tc-example.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加载执行程序到网卡&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# tc qdisc add dev em1 clsact&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# tc filter add dev em1 ingress bpf da obj tc-example.o sec ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# tc filter add dev em1 egress bpf da obj tc-example.o sec egress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# tc filter show dev em1 ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;filter protocol all pref &lt;span class=&#34;m&#34;&gt;49152&lt;/span&gt; bpf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;filter protocol all pref &lt;span class=&#34;m&#34;&gt;49152&lt;/span&gt; bpf handle 0x1 tc-example.o:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ingress&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; direct-action id &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; tag c5f7825e5dac396f
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# tc filter show dev em1 egress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;filter protocol all pref &lt;span class=&#34;m&#34;&gt;49152&lt;/span&gt; bpf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;filter protocol all pref &lt;span class=&#34;m&#34;&gt;49152&lt;/span&gt; bpf handle 0x1 tc-example.o:&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;egress&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; direct-action id &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; tag b2fd5adc0f262714
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# mount | grep bpf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sysfs on /sys/fs/bpf &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; sysfs &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;rw,nosuid,nodev,noexec,relatime,seclabel&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bpf on /sys/fs/bpf &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; bpf &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;rw,relatime,mode&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0700&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# tree /sys/fs/bpf/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/sys/fs/bpf/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- ip -&amp;gt; /sys/fs/bpf/tc/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- tc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   +-- globals
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;       +-- acc_map
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+-- xdp -&amp;gt; /sys/fs/bpf/tc/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; directories, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上展现了对当前网络数据包的操作，这种可编程的能力就给上层应用提供了无限的想象空间了，其中 Cilium 就是基于可编程 eBPF 之上开发了 L47 层网络管理框架。&lt;/p&gt;
&lt;h2 id=&#34;为服务化诞生的-cilium&#34;&gt;为服务化诞生的 Cilium&lt;/h2&gt;
&lt;p&gt;Cilium 是一个强大的以 eBPF 为基础的网络框架，能做到 L47 层的安全策略、流量控制，并且性能高、灵活性强，主要解决微服务的使用场景，能与 kubernetes 集成，官方解释如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cilium is open source software for transparently securing the network connectivity between application services deployed using Linux container management platforms like Docker and Kubernetes. The development of modern datacenter applications has shifted to a service-oriented architecture often referred to as microservices, wherein a large application is split into small independent services that communicate with each other via APIs using lightweight protocols like HTTP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cilium 就定位为微服务解决网络管理问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Microservices applications tend to be highly dynamic, with individual containers getting started or destroyed as the application scales out / in to adapt to load changes and during rolling updates that are deployed as part of continuous delivery. This shift toward highly dynamic microservices presents both a challenge and an opportunity in terms of securing connectivity between microservices.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要解决微服务架构下的网络问题的挑战和机会在于要适应微服务快速变化能力，因为微服务扩容和升级非常频繁，从而网络和安全管理也需要适应这种变革。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Traditional Linux network security approaches (e.g., iptables) filter on IP address and TCP/UDP ports, but IP addresses frequently churn in dynamic microservices environments. The highly volatile life cycle of containers causes these approaches to struggle to scale side by side with the application as load balancing tables and access control lists carrying hundreds of thousands of rules that need to be updated with a continuously growing frequency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而使用传统的以 IP Base 的策略模型已经不再适应当今以微服务为模型的架构了，微服务的底层网络变化会非常灵活和迅速，如二层的网络 IP 地址可以迅速改变和销毁，传统安全策略如果基于 IP Policy 模型会产生成百上千条规则，并且这些规则会被频繁变更，变更的性能非常低下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By leveraging Linux BPF, Cilium retains the ability to transparently insert security visibility + enforcement, but does so in a way that is based on service / pod / container identity (in contrast to IP address identification in traditional systems) and can filter on application-layer (e.g. HTTP). As a result, Cilium not only makes it simple to apply security policies in a highly dynamic environment by decoupling security from addressing, but can also provide stronger security isolation by operating at the HTTP-layer in addition to providing traditional Layer 3 and Layer 4 segmentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此 Cilium 利用 BPF 的能力，能以 service / pod / container 为对象进行动态地网络和安全策略管理，解耦控制面的策略管理和不断变化的网络环境，还做到 7 层能力。&lt;/p&gt;
&lt;p&gt;整体 Cilium 架构如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/servicemesher/website/master/content/blog/a-new-more-efficient-proxy-model/00704eQkgy1fsu98qo3jgj318z143gos.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上层对接控制编排面，下层转换成 BPF 的程序注入到内核网络栈执行。&lt;/p&gt;
&lt;p&gt;已实现的功能如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持 HTTP 协议，支持 method、path、host、headers 匹配的策略&lt;/li&gt;
&lt;li&gt;支持 Kafka 的协议，支持 Role、topic 匹配的策略管理&lt;/li&gt;
&lt;li&gt;支持 IP/CIDR、Label、Service、Entities Base 的策略管理&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;监控和故障定位，支持对接 Prometheus 监控平台&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可见 Cilium 做得很高级，不仅仅支持了 HTTP，还支持 Kafka 协议，相信未来还会支持更多的协议，提供更强大的功能，虽然看上去目前只能做到转发层业务（主要以网络栈 HOOK 的方式），对需要新建网络连接的业务有限制，但结合上层应用实现，做到替换 Envoy 数据层还是有可能的，尽情期待。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：&lt;a href=&#34;http://yangjunsss.github.io/2018-05-12/%E6%8E%A2%E8%AE%A8%E4%B8%80%E7%A7%8D%E6%9B%B4%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/?from=groupmessage&amp;amp;isappinstalled=0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;探讨一种更高效的代理模式&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
