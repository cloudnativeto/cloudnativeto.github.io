<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Envoy Gateway | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/envoy-gateway/</link>
      <atom:link href="https://cloudnativecn.com/tag/envoy-gateway/index.xml" rel="self" type="application/rss+xml" />
    <description>Envoy Gateway</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 06 Feb 2025 15:17:32 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>Envoy Gateway</title>
      <link>https://cloudnativecn.com/tag/envoy-gateway/</link>
    </image>
    
    <item>
      <title>Envoy Gateway 1.3 发布：增强安全性、流量管理和运维能力</title>
      <link>https://cloudnativecn.com/blog/envoy-gateway-1-3-release-highlights/</link>
      <pubDate>Thu, 06 Feb 2025 15:17:32 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/envoy-gateway-1-3-release-highlights/</guid>
      <description>&lt;p&gt;Envoy Gateway 1.3 版本在 &lt;strong&gt;安全性、流量管理和运维能力&lt;/strong&gt; 方面进行了重大增强，并引入了 &lt;strong&gt;API Key 认证&lt;/strong&gt;、&lt;strong&gt;支持 HTTPRoute 重试&lt;/strong&gt; 以及 &lt;strong&gt;更灵活的基础设施管理&lt;/strong&gt; 等关键改进。详见 &lt;a href=&#34;https://gateway.envoyproxy.io/news/releases/v1.3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway 1.3 发布公告&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;12-到-13-版本的核心变化&#34;&gt;1.2 到 1.3 版本的核心变化&lt;/h2&gt;
&lt;p&gt;本次发布重点更新包括 &lt;strong&gt;安全特性增强&lt;/strong&gt;、&lt;strong&gt;流量管理优化&lt;/strong&gt; 以及 &lt;strong&gt;运维管控提升&lt;/strong&gt;。此外，1.3 版本还引入了一些 &lt;strong&gt;重大变更&lt;/strong&gt;，以提升系统的安全性和可靠性，增强身份认证和流量管理能力。&lt;/p&gt;
&lt;p&gt;本次更新的详细内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;22 项新特性&lt;/strong&gt;，涵盖安全、流量管理和运维优化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;26 项 Bug 修复&lt;/strong&gt;，提升稳定性和可靠性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将总结 Envoy Gateway 1.3 版本最重要的更新内容。&lt;/p&gt;
&lt;h2 id=&#34;主要特性亮点&#34;&gt;主要特性亮点&lt;/h2&gt;
&lt;h3 id=&#34;1-安全性增强认证与访问管理&#34;&gt;1. 安全性：增强认证与访问管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;API Key 认证&lt;/strong&gt;：SecurityPolicy API 现支持 API Key 访问控制，简化从其他 Gateway 解决方案的迁移&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全策略增强&lt;/strong&gt;：改进 &lt;strong&gt;外部认证（ext-auth）&lt;/strong&gt; 服务器集成，并支持 JWKS 配置的自定义 TLS 设置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端 IP 解析优化&lt;/strong&gt;：支持从 &lt;code&gt;X-Forwarded-For (XFF)&lt;/code&gt; 头部提取真实客户端 IP&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展服务默认 “fail-closed” 机制&lt;/strong&gt;：当扩展服务器返回错误时，将立即用 &lt;code&gt;Internal Server Error&lt;/code&gt;（500 状态码）响应受影响的请求，确保安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-流量管理更智能的路由与控制&#34;&gt;2. 流量管理：更智能的路由与控制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;扩展协议支持&lt;/strong&gt;：现在支持在 &lt;code&gt;GRPCRoute&lt;/code&gt;、&lt;code&gt;TCPRoute&lt;/code&gt; 和 &lt;code&gt;UDPRoute&lt;/code&gt; API 中路由至 Backend 资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应压缩（Response Compression）&lt;/strong&gt;：BackendTrafficPolicy API 现支持对响应进行压缩，减少流量占用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GEP-1731 实施&lt;/strong&gt;：实现了 &lt;strong&gt;Kubernetes Gateway API 的 HTTPRoute 重试&lt;/strong&gt;，支持通过 &lt;strong&gt;Gateway API&lt;/strong&gt;（而非 Envoy Gateway API）定义请求重试策略&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于动态元数据的限流（Dynamic Cost-Based Rate Limiting）&lt;/strong&gt;：限流 API 现支持从 &lt;strong&gt;动态元数据（Dynamic Metadata）&lt;/strong&gt; 提取成本值，可基于请求的不同消耗量对客户端进行限流&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户定义路由顺序&lt;/strong&gt;：EnvoyProxy CRD 现支持 &lt;strong&gt;保留用户自定义的 HTTPRoute 匹配顺序&lt;/strong&gt;，增强路由控制灵活性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-运营管理基础设施优化&#34;&gt;3. 运营管理：基础设施优化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HPA（水平自动扩展）增强&lt;/strong&gt;：提供 &lt;strong&gt;EnvoyProxy HPA&lt;/strong&gt; 和 &lt;strong&gt;PDB（Pod Disruption Budget）&lt;/strong&gt; 的更多配置选项&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;改进 IPv6 支持&lt;/strong&gt;：优化 &lt;strong&gt;双栈（Dual-Stack）支持&lt;/strong&gt;，修复 IPv6 相关问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优雅终止（Graceful Termination）&lt;/strong&gt;：在终止进程期间增强端点管理，确保平滑下线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-可观测性监控与控制能力提升&#34;&gt;4. 可观测性：监控与控制能力提升&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tracing 追踪优化&lt;/strong&gt;：改进追踪采样控制，支持 &lt;strong&gt;按比例（fraction-based）定义采样率&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强指标（Metrics）&lt;/strong&gt;：新增监控 Envoy Gateway &lt;strong&gt;崩溃（Panic）&lt;/strong&gt; 相关的指标和仪表盘&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展处理（Extension Processing）&lt;/strong&gt;：优化外部处理器（External Processor）的属性管理和配置选项&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;Envoy Gateway 1.3 为团队提供了更强大的 &lt;strong&gt;安全性&lt;/strong&gt;、&lt;strong&gt;流量管理&lt;/strong&gt; 和 &lt;strong&gt;运维能力&lt;/strong&gt;，主要更新包括：&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;增强身份认证机制&lt;/strong&gt;（API Key 认证、JWKS TLS 配置等）&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;优化路由与限流能力&lt;/strong&gt;（支持 GRPCRoute、HTTPRoute 重试、动态元数据限流等）&lt;/p&gt;
&lt;p&gt;✅ &lt;strong&gt;提高生产环境运维效率&lt;/strong&gt;（HPA 支持、IPv6 兼容、扩展服务 fail-closed 机制等）&lt;/p&gt;
&lt;p&gt;这些改进使 Envoy Gateway 在 &lt;strong&gt;生产环境&lt;/strong&gt; 下更具安全性、可扩展性和管理便利性，为 Kubernetes 生态中的流量管理提供更稳定、更强大的解决方案。🚀&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Envoy Gateway 0.3 发布——扩展 Kubernetes Gateway API</title>
      <link>https://cloudnativecn.com/blog/envoy-gateways-latest-v0-3-release-extends-the-kubernetes-gateway-api/</link>
      <pubDate>Tue, 28 Feb 2023 11:20:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/envoy-gateways-latest-v0-3-release-extends-the-kubernetes-gateway-api/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/envoyproxy/gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt; (EG)&lt;a href=&#34;https://tetrate.io/blog/gateway-to-the-future-the-new-gateway-api-and-envoy-gateway-0-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;首次公开发布&lt;/a&gt; 四个月后，我们很高兴地宣布发布 &lt;a href=&#34;https://github.com/envoyproxy/gateway/releases/tag/v0.3.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;版本 0.3&lt;/a&gt; 起。这个最新版本是几位 Tetrate 同事和整个社区其他人辛勤工作的结晶。Envoy Gateway 现在支持整个 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API&lt;/a&gt;，包括实验部分——添加了一些强大的新功能，使这个免费的开源软件更接近于功能齐全的 API 网关。&lt;/p&gt;
&lt;p&gt;EG 的一大特点是它配置了新的网关 API，而不是旧的和非常有限的 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress API&lt;/a&gt;，或任何为了弥补 Ingress 缺陷的专有 API。虽然 EG 0.2 实现了 Gateway API 的核心部分（完全支持“基本”HTTP 路由），但 EG 0.3 在其 Gateway API 支持方面更进了一步，这可能是了解其新功能的最佳方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持更多 HTTP 功能，例如&lt;a href=&#34;https://gateway.envoyproxy.io/v0.3.0/user/http-urlrewrite.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;URL Rewrite&lt;/a&gt;、&lt;a href=&#34;https://gateway.envoyproxy.io/v0.3.0/user/http-response-headers.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Response Header Operation&lt;/a&gt; 和流量镜像。这些来自 API 规范中的扩展字段。&lt;/li&gt;
&lt;li&gt;支持路由 &lt;a href=&#34;https://gateway.envoyproxy.io/v0.3.0/user/grpc-routing.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC&lt;/a&gt;、&lt;a href=&#34;https://gateway.envoyproxy.io/v0.3.0/user/udp-routing.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UDP&lt;/a&gt; 和原始 &lt;a href=&#34;https://gateway.envoyproxy.io/v0.3.0/user/tcp-routing.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCP&lt;/a&gt;。这些来自 API 的实验性新部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意这些 API 扩展：我们正在努力为真实用户提供有用的功能。 &lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SIG-NETWORK COMMUNITY&lt;/a&gt; 作为负责网关 API 规范的人员，有负责保护 API，因此他们的工作需要一些实践。作为实施者，我们有更多的自由在具体规范之前开辟一条道路——但我们已经在上游工作以标准化这些扩展。这种在工作实施中对新功能进行的实验是让任何团体接受提议的新 API 的重要一步——它对每个人都有好处。&lt;/p&gt;
&lt;p&gt;这些令人兴奋的新功能确实使 Envoy Gateway 项目超越了人们的好奇心，可以为许多现实世界的用例提供服务。重要的是，它能够提供所有这些，同时基于开放标准 API 并且是免费和开源软件，没有付费层。&lt;/p&gt;
&lt;p&gt;自己试用 Envoy Gateway 0.3 非常简单，只需转到 &lt;a href=&#34;https://gateway.envoyproxy.io/v0.3.0/user/quickstart.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;快速入门指南&lt;/a&gt; 即可开始！如果您想更深入地了解如何使用 &lt;em&gt;minikube&lt;/em&gt; 在本地进行尝试，大多数 &lt;a href=&#34;https://tetrate.io/blog/hands-on-with-the-gateway-api-using-envoy-gateway-0-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EG 0.2 动手指南&lt;/a&gt; 仍然有效。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Envoy Gateway 0.2 体验新的 Kubernetes Gateway API</title>
      <link>https://cloudnativecn.com/blog/hands-on-with-envoy-gateway/</link>
      <pubDate>Thu, 27 Oct 2022 16:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/hands-on-with-envoy-gateway/</guid>
      <description>&lt;p&gt;在这篇文章中，我们将亲身体验 &lt;a href=&#34;https://github.com/envoyproxy/gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt; 和 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API&lt;/a&gt;。以下是逐步指导你安装 Envoy Gateway 的说明，以及通过 Envoy 代理在集群外公开 HTTP 应用程序的简单用例。&lt;/p&gt;
&lt;p&gt;如果你不方便运行，我在本文中包含了每个命令的输出，即使你没有 Kubernetes 集群也可以看到它是如何工作的。&lt;/p&gt;
&lt;p&gt;如果你是 GUI 的粉丝，在文章的最后我会附上 Tetrate 基于 &lt;a href=&#34;https://backstage.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backstage&lt;/a&gt; 的概念验证 &lt;a href=&#34;https://github.com/tetratelabs/eg-backstage-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway GUI&lt;/a&gt; 的屏幕截图和详细信息，以展示针对 Gateway API 构建此类东西是多么容易。&lt;/p&gt;
&lt;h2 id=&#34;创建-kubernetes-集群&#34;&gt;创建 Kubernetes 集群&lt;/h2&gt;
&lt;p&gt;首先运行 Envoy Gateway 和 Kubernetes 集群。最简单、最安全的方法是使用 &lt;a href=&#34;https://minikube.sigs.k8s.io/docs/start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minikube&lt;/a&gt; 在本地机器上启动集群。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ minikube start –driver&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;docker --cpus&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; --memory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2g
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;😄  minikube v1.27.0 on Arch 22.0.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x86_64&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	▪ &lt;span class=&#34;nv&#34;&gt;KUBECONFIG&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❗  For more information, see: https://github.com/kubernetes/kubernetes/issues/112135
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;📌  Using Docker Desktop driver with root privileges
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;👍  Starting control plane node minikube in cluster minikube
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;🚜  Pulling base image ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;🔥  Creating docker container &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CPUs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2, &lt;span class=&#34;nv&#34;&gt;Memory&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2048MB&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;🐳  Preparing Kubernetes v1.25.2 on Docker 20.10.17 ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	▪ Generating certificates and keys ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	▪ Booting up control plane ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	▪ Configuring RBAC rules ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;🔎  Verifying Kubernetes components...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;🌟  Enabled addons: storage-provisioner
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;🏄  Done! kubectl is now configured to use &lt;span class=&#34;s2&#34;&gt;&amp;#34;minikube&amp;#34;&lt;/span&gt; cluster and &lt;span class=&#34;s2&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; namespace by default
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安装-envoy-gateway&#34;&gt;安装 Envoy Gateway&lt;/h2&gt;
&lt;p&gt;回想一下，Envoy Gateway 是由新的 Gateway API 配置的，而不是旧的 Ingress API。Gateway API 尚未合并到上游 Kubernetes，因此我们的集群将无法使用它。我们通过为其部署 CRD 来安装该 API。Envoy Gateway 项目提供了一个文件，用于安装 Gateway API 和部署 Envoy Gateway。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f https://github.com/envoyproxy/gateway/releases/download/v0.2.0/install.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会产生大量资源，我将分几个部分中讨论它们。首先是 Gateway API：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customresourcedefinition.apiextensions.k8s.io/gatewayclasses.gateway.networking.k8s.io created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customresourcedefinition.apiextensions.k8s.io/gateways.gateway.networking.k8s.io created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customresourcedefinition.apiextensions.k8s.io/httproutes.gateway.networking.k8s.io created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customresourcedefinition.apiextensions.k8s.io/referencegrants.gateway.networking.k8s.io created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customresourcedefinition.apiextensions.k8s.io/referencepolicies.gateway.networking.k8s.io created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customresourcedefinition.apiextensions.k8s.io/tcproutes.gateway.networking.k8s.io created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customresourcedefinition.apiextensions.k8s.io/tlsroutes.gateway.networking.k8s.io created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;customresourcedefinition.apiextensions.k8s.io/udproutes.gateway.networking.k8s.io created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;namespace/gateway-system created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;validatingwebhookconfiguration.admissionregistration.k8s.io/gateway-api-admission created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/gateway-api-admission-server created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/gateway-api-admission-server created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;serviceaccount/gateway-api-admission created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;clusterrole.rbac.authorization.k8s.io/gateway-api-admission created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;clusterrolebinding.rbac.authorization.k8s.io/gateway-api-admission created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;role.rbac.authorization.k8s.io/gateway-api-admission created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rolebinding.rbac.authorization.k8s.io/gateway-api-admission created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;job.batch/gateway-api-admission created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;job.batch/gateway-api-admission-patch created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如你所见，主要是 CRD。但请注意，安装 Gateway API 还部署了一些工作负载资源，包括 Deployment 等 ——Gateway API 带有一个 webhook 准入控制器来验证我们部署的资源，可以使用以下命令查看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods --namespace gateway-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                                        	READY   STATUS  	RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gateway-api-admission-2dhk5                 	0/1 	Completed   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      	70s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gateway-api-admission-patch-dbdbc           	0/1 	Completed   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;      	70s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gateway-api-admission-server-68485ffc97-gt8v4   1/1 	Running 	&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      	70s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;添加到集群 API 中的新 CRD：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl api-resources &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep gateway.networking
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gatewayclasses                	gc       	gateway.networking.k8s.io/v1beta1  	&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;    	GatewayClass
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gateways                      	gtw      	gateway.networking.k8s.io/v1beta1  	&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;     	Gateway
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;httproutes                                 	gateway.networking.k8s.io/v1beta1  	&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;     	HTTPRoute
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;referencegrants               	refgrant 	gateway.networking.k8s.io/v1alpha2 	&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;     	ReferenceGrant
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;referencepolicies             	refpol   	gateway.networking.k8s.io/v1alpha2 	&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;     	ReferencePolicy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcproutes                                  	gateway.networking.k8s.io/v1alpha2 	&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;     	TCPRoute
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tlsroutes                                  	gateway.networking.k8s.io/v1alpha2 	&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;     	TLSRoute
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;udproutes                                  	gateway.networking.k8s.io/v1alpha2 	&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;     	UDPRoute
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是 Envoy Gateway 本身。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace/envoy-gateway-system created
customresourcedefinition.apiextensions.k8s.io/envoyproxies.config.gateway.envoyproxy.io created
serviceaccount/envoy-gateway created
role.rbac.authorization.k8s.io/leader-election-role created
clusterrole.rbac.authorization.k8s.io/envoy-gateway-role created
clusterrole.rbac.authorization.k8s.io/metrics-reader created
clusterrole.rbac.authorization.k8s.io/proxy-role created
rolebinding.rbac.authorization.k8s.io/leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/envoy-gateway-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/proxy-rolebinding created
configmap/envoy-gateway-config created
service/envoy-gateway created
service/envoy-gateway-metrics-service created
deployment.apps/envoy-gateway created
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这些是工作负载资源以及相关的安全和网络。片刻之后，我们可以看到正在运行的控制器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods --namespace envoy-gateway-system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                        	READY   STATUS	RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;envoy-gateway-dc74c4d97-pntbj   2/2 	Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      	35s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;安装测试应用&#34;&gt;安装测试应用&lt;/h2&gt;
&lt;p&gt;我们还需要一些东西让网关真正将流量转发到 —— 就像我们的一个应用程序一样的东西。我们可以使用 httpbin，Envoy Gateway 项目提供了方便的清单。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/httpbin/httpbin.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;serviceaccount/httpbin created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;service/httpbin created
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deployment.apps/httpbin created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在默认命名空间中运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get pods -n default
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME                    	READY   STATUS	RESTARTS   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;httpbin-9dbd644c7-fhtw5 	1/1 	Running   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      	4m16s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配置-envoy-gateway&#34;&gt;配置 Envoy Gateway&lt;/h2&gt;
&lt;p&gt;现在我们可以继续配置 Envoy Gateway 以执行一些请求路由。我们需要做的第一件事是注册我们刚刚部署的 Envoy Gateway 控制器，以便其他资源可以引用它来识别配置的网关，以防你在一个集群中部署多个网关。 &lt;code&gt;controllerName&lt;/code&gt; 字段匹配控制器向其运行的 Kubernetes 集群注册的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f - &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.networking.k8s.io/v1beta1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: GatewayClass
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: my-envoy-gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  controllerName: gateway.envoyproxy.io/gatewayclass-controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gatewayclass.gateway.networking.k8s.io/eg created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到关于这个新实例的一些有限信息，假设我们的描述是有效的，我们将看到 &lt;code&gt;ACCEPTED: True&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get gatewayclass -o wide
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME   CONTROLLER                                  	ACCEPTED   AGE 	DESCRIPTION
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;eg 	gateway.envoyproxy.io/gatewayclass-controller   True   	2m38s  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，让我们配置一个 Gateway 对象 —— 这将打开我们希望 Envoy 代理监听的网络端口。对于这个简单的演示，我们将绑定到一个端口而不使用 TLS，因此我将其称为“不安全端口”。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f - &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.networking.k8s.io/v1beta1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: Gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: insecure-port
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  gatewayClassName: my-envoy-gateway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  listeners:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - name: http
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      protocol: HTTP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      port: 8080
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当我们检查它时，我们会发现它并没有就绪。由于我们使用的本地开发集群无法使这种云负载均衡器成为“真正的”负载均衡器（因此地址字段也是空的），因此该批准被搁置。不用担心这个，它仍然可以正常工作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl -n default get gateway -o wide
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME        	CLASS             ADDRESS   READY   AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;insecure-port   my-envoy-gateway                     2m54s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，我们可以为一些 HTTP 流量设置路由。在这个简单的示例中，我们匹配任何路径上对 vhost &lt;code&gt;www.example.com&lt;/code&gt; 的任何请求，并将其发送到我们之前部署的 httpbin 实例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl apply -f - &lt;span class=&#34;s&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;apiVersion: gateway.networking.k8s.io/v1beta1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;kind: HTTPRoute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;metadata:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  name: httpbin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;spec:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  parentRefs: [ {name: insecure-port} ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  hostnames: [&amp;#34;www.example.com&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;  rules:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    - matches:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - path: {type: PathPrefix, value: /}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;      backendRefs:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;        - {group: &amp;#34;&amp;#34;, kind: Service, name: httpbin, port: 8000, weight: 1}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;httproute.gateway.networking.k8s.io/httpbin created
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查这种资源目前并没有向我们展示太多东西，但我们可以看到它至少已部署成功。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ kubectl get httproute -n default -o wide
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NAME   	HOSTNAMES         	AGE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;httpbin	&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;   58s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后要注意的一件事是，直到现在才真正启动了 Envoy 的实例（之前它只是控制器，它本身并不处理流量）。这是代表 Envoy Gateway 的优化：代理的懒创建。检查系统上的 &lt;code&gt;age&lt;/code&gt; 字段，看看它的创建时间。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl get pods -n envoy-gateway-system
NAME                        	READY   STATUS	RESTARTS   AGE
envoy-default-insecure-port-5879556bd4-r5ggw   	1/1 	Running   0      	90s
envoy-gateway-dc74c4d97-pntbj   2/2 	Running   0      	13m
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;启动测试流量&#34;&gt;启动测试流量&lt;/h2&gt;
&lt;p&gt;就像我之前说的，我们无法获得真正的云负载均衡器，因为我们使用的是本地开发集群。但是 minikube 有一个简洁的特性，它将集群的服务暴露给我们的本地机器 —— 包括 Envoy Gateway 启动的代理。我们打开的 8080 端口将在回环中可用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ minikube tunnel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令会阻塞，因此根据我们部署的规则，打开一个新终端以发送将被路由到 httpbin 的请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ curl --header &lt;span class=&#34;s2&#34;&gt;&amp;#34;Host: www.example.com&amp;#34;&lt;/span&gt; 127.0.0.1:8080/headers
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;server: envoy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: Fri, &lt;span class=&#34;m&#34;&gt;07&lt;/span&gt; Oct &lt;span class=&#34;m&#34;&gt;2022&lt;/span&gt; 12:41:32 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-type: application/json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;content-length: &lt;span class=&#34;m&#34;&gt;175&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-origin: *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;access-control-allow-credentials: &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;x-envoy-upstream-service-time: &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;s2&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json, */*&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;www.example.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;curl/7.79.1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;X-Envoy-Expected-Rq-Timeout-Ms&amp;#34;&lt;/span&gt;: &lt;span class=&#34;s2&#34;&gt;&amp;#34;15000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这只是一个简单的演示，但你可以探索 Gateway API 的其余部分并开始使用更多功能 ——Envoy Gateway 的文档将是一个很好的指南。&lt;/p&gt;
&lt;h2 id=&#34;示例-gui&#34;&gt;示例 GUI&lt;/h2&gt;
&lt;p&gt;我给出的说明是针对命令行的，但是好的 GUI 是与任何系统交互的好方法。Envoy Gateway 对标准 Gateway API 的实施提供了交互操作接口生态系统。Tetrate 使用 &lt;a href=&#34;https://backstage.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backstage&lt;/a&gt;（开发者接口的新兴标准）为 Envoy Gateway 构建了一个概念验证 UI。下面我将展示几个从上面检查演示设置的屏幕截图。&lt;/p&gt;
&lt;p&gt;如果你想玩这个，或者 fork 它，&lt;a href=&#34;https://github.com/tetratelabs/eg-backstage-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我们已经发布了代码&lt;/a&gt;—— 目前还是 alpha 版本，并且只是一个可以在一周内构建的示例！如果你在 KubeCon Detroit，请到我们的展位，我们可以亲自向你展示！&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ui-for-envoy-gateway&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;UI for Envoy Gateway&#34; srcset=&#34;
               /blog/hands-on-with-envoy-gateway/008vxvgGgy1h7jx53ycsgj30wi0p5ab7_hu_d1273d779d5e4faf.webp 400w,
               /blog/hands-on-with-envoy-gateway/008vxvgGgy1h7jx53ycsgj30wi0p5ab7_hu_eee535e05de0593c.webp 760w,
               /blog/hands-on-with-envoy-gateway/008vxvgGgy1h7jx53ycsgj30wi0p5ab7_hu_6f9dd41377650ba8.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/hands-on-with-envoy-gateway/008vxvgGgy1h7jx53ycsgj30wi0p5ab7_hu_d1273d779d5e4faf.webp&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      UI for Envoy Gateway
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-backstage-界面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Backstage 界面&#34; srcset=&#34;
               /blog/hands-on-with-envoy-gateway/008vxvgGgy1h7jx54gkz4j30wi0p5wg9_hu_7bffb3ec56f48754.webp 400w,
               /blog/hands-on-with-envoy-gateway/008vxvgGgy1h7jx54gkz4j30wi0p5wg9_hu_bad2cf2a7874c3c.webp 760w,
               /blog/hands-on-with-envoy-gateway/008vxvgGgy1h7jx54gkz4j30wi0p5wg9_hu_1f64495655e59257.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/hands-on-with-envoy-gateway/008vxvgGgy1h7jx54gkz4j30wi0p5wg9_hu_7bffb3ec56f48754.webp&#34;
               width=&#34;760&#34;
               height=&#34;588&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Backstage 界面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果你正在开始使用 Istio 和 Envoy，请&lt;a href=&#34;https://academy.tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;查看 Tetrate 学院&lt;/a&gt;，你会发现大量的免费课程、研讨会，以及 Tetrate 的 Istio 管理员认证考试。&lt;/p&gt;
&lt;p&gt;要想以最简单的方式安装、管理和升级 Istio，请查看&lt;a href=&#34;https://istio.tetratelabs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我们的开源 Tetrate Istio 发行版（TID）&lt;/a&gt;。TID 是一个经过审查的 Istio 的上游发行版 ——Istio 的加固镜像，具有持续的支持，更容易安装、管理和升级。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>面向未来的网关：新的 Kubernetes Gateway API 和 Envoy Gateway 0.2 介绍</title>
      <link>https://cloudnativecn.com/blog/envoy-gateway-to-the-future/</link>
      <pubDate>Thu, 27 Oct 2022 10:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/envoy-gateway-to-the-future/</guid>
      <description>&lt;p&gt;最近 &lt;a href=&#34;https://blog.envoyproxy.io/introducing-envoy-gateway-ad385cc59532&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway 0.2&lt;/a&gt; 发布了，API 网关的生态系统迎来了新的变化。这篇文章将想你介绍 Kubernetes API 网关领域的最新进展。&lt;/p&gt;
&lt;p&gt;如何将外部的网络请求路由到 Kubernetes 集群？你可以使用入口控制器：一组 HTTP 反向代理，将流量转接到集群中，并由 operator 来管理。也可以使用 Ambassador、Contour、Traefik 或 HAproxy 这类软件。还可以使用云提供商的解决方案，或者只是用默认的的 Nginx Ingress。或者你可能使用一个功能更全面的 API 网关，如 Tyk 或 Kong，或者在 Kubernetes Ingress 前面的另一层有一个单独的网关，如 AWS 的 API 网关，或内部的 F5，可以选择的实在太多。&lt;/p&gt;
&lt;h2 id=&#34;为什么我们需要一个新的入口控制器&#34;&gt;为什么我们需要一个新的入口控制器&lt;/h2&gt;
&lt;p&gt;因为很多入口控制器都有不同程度的限制：有些是基于旧的技术，如 Nginx、HAproxy，甚至是基于 Apache 建立的。这些技术的特性不适用于云原生环境，比如在配置改变时放弃已建立的连接（如果你想深入了解，Ambassador 发表了一篇&lt;a href=&#34;https://blog.getambassador.io/envoy-vs-nginx-vs-haproxy-why-the-open-source-ambassador-api-gateway-chose-envoy-23826aed79ef&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;比较&lt;/a&gt;文章）。云供应商的产品确实倾向于基于更现代的东西（比如 &lt;a href=&#34;https://www.usenix.org/system/files/conference/nsdi18/nsdi18-dalton.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SDN&lt;/a&gt;），但是这可能产生厂商锁定。目前，你只需用一个 Kubernetes API 来指定所有不同选项的配置：Ingress。这个 API 的可配置项很少，几乎任何你想配置的设置都需要通过 annotation 来实现，而不是作为一类字段。&lt;/p&gt;
&lt;h2 id=&#34;envoy-gateway未来-gateway-发展的基础&#34;&gt;Envoy Gateway：未来 Gateway 发展的基础&lt;/h2&gt;
&lt;p&gt;现在又有了新的选择：Envoy Gateway，简称 EG。顾名思义，这是一个基于 Envoy 代理的网关（入口控制器）。它是一个托管在 GitHub 上的 Envoy 社区项目。这不是第一个基于 Envoy 的入口；已经有流行的建立在 Envoy 之上的 Contour 和 Ambassador 等项目。但是这些项目的开发者和更多的人正在一起为 EG 做出贡献，Ambassador 和 Contour 都说他们会在适当的时候&lt;a href=&#34;https://blog.envoyproxy.io/introducing-envoy-gateway-ad385cc59532&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Envoy Gateway 的代码上重构&lt;/a&gt;（也就是说，我们 Tetrate 公司无可否认地为我们在这个项目中的领导作用感到自豪）。&lt;/p&gt;
&lt;p&gt;Envoy 本身是久经考验的入口代理、sidecar 代理，并且正在准备取代&lt;a href=&#34;https://cloud.google.com/docs/security/infrastructure/design#google_front_end_service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;谷歌的 GFE&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;代码演示&#34;&gt;代码演示&lt;/h3&gt;
&lt;p&gt;如果你想在了解更多关于 Envoy Gateway 的内容之前先演练一番，我已经写了&lt;a href=&#34;https://tetr8.io/3MPT6KT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一篇姐妹篇&lt;/a&gt;，其中有详细的说明，可以自己设置 Envoy Gateway，如果你没有环境，那篇文章中也包括了我机器上所有的命令输出，这样你就可以看到会发生什么。&lt;/p&gt;
&lt;h2 id=&#34;通往-api-的-gateway&#34;&gt;通往 API 的 Gateway&lt;/h2&gt;
&lt;p&gt;Envoy Gateway 以其最简单的形式 —— 你可能刚刚设置好的系统，将请求转发到其集群中。它根据 HTTP host 和 path 进行路由，也可以根据其他 header 进行路由。每个集群都需要这样做，很高兴看到 Envoy Gateway 在开发的短短 6 个月内就能做到这一点（要了解更多关于 Envoy Gateway 的信息，请看 &lt;a href=&#34;https://www.tetrate.io/envoy-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway to a New Frontier&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;超越基本入口的高级功能&#34;&gt;超越基本入口的高级功能&lt;/h3&gt;
&lt;p&gt;然而，许多组织需要比这个基本的 7 层网络路由更多的功能。如果需要像 WAF、body 的模式验证、bot 拦截等，许多人就会使用 API 网关。我们看到很多组织在他们的入口控制器前面部署了一个单独的 API 网关。然而，API 网关可以&lt;em&gt;取代&lt;/em&gt;入口控制器，因为它也可以做路由和流量观察的基本功能。它们可以提供这些功能，因为它们是由与入口控制器相同的代理构建的，例如，Kong 是基于 nginx 的。API 网关产品在市场上很受欢迎，但如果你真的想一想 API 网关是什么，它就是一个 HTTP 代理，有一系列的附加功能（我之前提到的 WAF 等）。这并不是说它们不增加任何价值 —— 它们提供的功能是多种多样的，而且很强大，但有一个共同的功能基线和实现代码。&lt;/p&gt;
&lt;h3 id=&#34;使用-wasm-的动态可扩展性&#34;&gt;使用 Wasm 的动态可扩展性&lt;/h3&gt;
&lt;p&gt;因此，Envoy Gateway 完全有能力发展成为一个全功能的 API 网关。Envoy 实际上已经具备了一些更先进的功能，包括 JWT 验证、OIDC 认证流和速率限制。此外，Envoy 是动态可扩展的；它可以在不重启的情况下加载插件，这意味着可以很容易地按需添加更多的功能。这些插件是以 WASM 字节码的形式提供的，这意味着它们可以用任何可以编译成 WASM 的语言（Tiny Go、Rust 等）编写，而不仅仅是其他代理支持的脚本语言。社区正在开始编写这些插件：缓存可能会首先落地，&lt;a href=&#34;https://coraza.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coraza&lt;/a&gt; 项目是一个相对成熟的 &lt;code&gt;mod_security&lt;/code&gt; 风格的 WAF，用 Go 编写，可以编译成 WASM，现在可以用于 Envoy 代理。&lt;/p&gt;
&lt;h3 id=&#34;gateway-api-鼓励扩展&#34;&gt;Gateway API 鼓励扩展&lt;/h3&gt;
&lt;p&gt;在入口控制器市场上，扩展和竞争的另一大障碍是 API。需要特定于供应商的注解（或全新的特定于供应商的 API），这些注解很笨重，而且妨碍了交叉兼容。相比之下，Envoy Gateway 是由 Gateway API 配置的，这是 &lt;code&gt;gateway.networking.k8s.io &lt;/code&gt;API 组的一组资源。这个 API 将最终取代 Ingress 资源。它的核心已经比 Ingress 更加灵活和富有表现力，而且它被设计成以可管理的方式增长和扩展。这将允许它发展成为所有南北流量控制的一流模型，从基本的路由到先进的 API 管理功能。这反过来又会将 Envoy Gateway 拥有的所有功能，以一种标准的、与供应商无关的方式暴露出来，让人们在使用这些功能时无需跳过障碍或担心锁定问题。Envoy Gateway 将在 2023 年 3 月的 0.3 版本中支持 Gateway API 的这些新部分。&lt;/p&gt;
&lt;h3 id=&#34;为未来的网关发展提供一个共同的最佳的基础&#34;&gt;为未来的网关发展提供一个共同的、最佳的基础&lt;/h3&gt;
&lt;p&gt;Envoy Gateway 的动力来自于对 API 网关功能堆栈的日益关注。基本的入口正在变得商业化，所以社区正在汇集其资源和专业知识，为未来的网关开发创造一个共同的、最好的基础。同时提供新的 Gateway API 供其实现是非常方便的，Envoy Gateway 的 0.2 版本标志着对目前定义的 Gateway API 核心类型的全面支持。&lt;/p&gt;
&lt;p&gt;扩展到高级用例模型的工作已经开始，现在正在设计 &lt;a href=&#34;https://docs.google.com/document/d/1TlQjBy1utEwgrxE_HVT4-EHpVJ51hgnfMuAh0Q_uNoE/view&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JWT auth 配置&lt;/a&gt;，其他的也将陆续推出。插件本身的工作也已经开始（例如，Coraza，一个仿照无处不在的 &lt;code&gt;mod_security&lt;/code&gt; 的 Golang WAF）。虽然这些都有很长的路要走，但我个人非常期待看到这一切在未来一两年的发展。&lt;/p&gt;
&lt;h2 id=&#34;通往服务网格的-gateway&#34;&gt;通往服务网格的 Gateway&lt;/h2&gt;
&lt;p&gt;你可能在想，已经有一类产品支持 OIDC 认证和速率限制等功能了：服务网格。这是真的；最突出的网格，Istio，在其默认配置中为入口部署了一套代理服务器。Istio 现在支持 Gateway API（就像 Envoy Gateway 一样）来配置该入口。我们在 Tetrate 对这种融合感到兴奋：企业现在可以采用 Envoy Gateway 来简单而快速地开展工作。Envoy Gateway 在管理这种南北流量方面做得很好，运行它可以让他们了解 Envoy 在生产中的性能和操作特点。当这些组织准备好控制他们的服务到服务，也就是东西向流量时，他们可以部署 Istio，因为他们已经熟悉了主要的基础组件（Envoy）。虽然他们可能会选择使用 Istio 的入口网关（以保持他们的控制平面数量减少到 1），但他们现有的 Gateway API 资源将继续工作。由于同样基于 Envoy，Istio 的 Ingress 也可以接受任何加载到 Envoy Gateway 的 API Gateway 风格的插件。所有这一切都使得在必要时增加服务网格的力量变得非常容易。&lt;/p&gt;
&lt;h3 id=&#34;用于入口和服务网格的统一-gateway-api&#34;&gt;用于入口和服务网格的统一 Gateway API&lt;/h3&gt;
&lt;p&gt;更重要的是，现在已经有了一个工作组来协调网关和网格网络之间的重叠部分：&lt;a href=&#34;https://gateway-api.sigs.k8s.io/contributing/gamma/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GAMMA 倡议&lt;/a&gt;。GAMMA 是 Gateway API for Mesh Management and Administration 的缩写，这是对 Gateway API 未来发展方向的一个倡议；计划是开始对服务网格的关注进行建模，即东西向流量也是如此。GAMMA 将确保 Envoy Gateway 和服务网格的良好合作，并将关注 Gateway API 的统一，以涵盖入口和网格。我们很高兴看到，这将为许多组织轻松和逐步地采用服务网格，基于一个与产品无关的 API，这对所有人都是好事。&lt;/p&gt;
&lt;h2 id=&#34;结束语&#34;&gt;结束语&lt;/h2&gt;
&lt;p&gt;这篇文章对新的标准 API、Gateway API 和参考实现 Envoy Gateway 作了很好的介绍，希望能对你了解当前的入口网关生态有所帮助。&lt;/p&gt;
&lt;p&gt;如果你想关注 EG 的发展，你可以加入 Envoy slack 的 &lt;code&gt;#gateway&lt;/code&gt; 频道，并在 &lt;a href=&#34;https://github.com/envoyproxy/gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/envoyproxy/gateway&lt;/a&gt; 查看提交和问题。该项目有一个 &lt;a href=&#34;https://github.com/envoyproxy/gateway/blob/main/docs/design/ROADMAP.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;未来几个版本的路线图&lt;/a&gt;，0.3.0 版本发布预期是在 2023 年 3 月。&lt;/p&gt;
&lt;p&gt;如果你想测试一下 Envoy Gateway，我写了一个配套的教程，其中包含了启动和运行的步骤说明。&lt;/p&gt;
&lt;p&gt;如果你正在开始使用 Istio 和 Envoy，请&lt;a href=&#34;https://academy.tetrate.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;查看 Tetrate 学院&lt;/a&gt;，你会发现大量的免费课程、研讨会，以及 Tetrate 的 Istio 管理员认证考试。&lt;/p&gt;
&lt;p&gt;要想以最简单的方式安装、管理和升级 Istio，请查看&lt;a href=&#34;https://istio.tetratelabs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我们的开源 Tetrate Istio 发行版（TID）&lt;/a&gt;。TID 是一个经过审查的 Istio 的上游发行版 ——Istio 的加固镜像，具有持续的支持，更容易安装、管理和升级。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
