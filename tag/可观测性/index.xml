<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>可观测性 | 云原生社区（中国）</title>
    <link>https://cloudnative.to/tag/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link>
      <atom:link href="https://cloudnative.to/tag/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/index.xml" rel="self" type="application/rss+xml" />
    <description>可观测性</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Sun, 06 Aug 2023 13:05:42 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>可观测性</title>
      <link>https://cloudnative.to/tag/%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7/</link>
    </image>
    
    <item>
      <title>OpenTelemetry Protocol (OTLP) 1.0.0 发布</title>
      <link>https://cloudnative.to/blog/otlp-version-one-released/</link>
      <pubDate>Sun, 06 Aug 2023 13:05:42 +0800</pubDate>
      <guid>https://cloudnative.to/blog/otlp-version-one-released/</guid>
      <description>&lt;p&gt;摘要：OpenTelemetry Protocol (OTLP) 1.0.0 已发布，它是 OpenTelemetry 项目中的通用遥测数据传递协议。OpenTelemetry 是一个开源的可观测性框架，提供了一组 API、库、代理和收集器服务，用于捕获分布式跟踪和指标。OTLP 在客户端和服务器之间进行数据交换，定义了一个序列化模式，紧密遵循跟踪、指标和日志的数据模型。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&#34;https://www.infoq.com/news/2023/08/otlp-version-one-released/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.infoq.com/news/2023/08/otlp-version-one-released/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近，&lt;a href=&#34;https://opentelemetry.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry&lt;/a&gt; Protocol (OTLP) 1.0.0 发布了。OTLP 规范描述了遥测数据在遥测源、收集器等中间节点和遥测后端之间的编码、传输和传递机制。它是 OpenTelemetry 项目中设计的通用遥测数据传递协议。&lt;/p&gt;
&lt;p&gt;OpenTelemetry (OTEL) 是一个由 OpenCensus 和 OpenTracing 项目合并形成的开源 Cloud Native Computing Foundation (CNCF) 项目。它是一个供仪表化、生成、收集和导出遥测数据（例如跟踪、指标和日志）使用的供应商中立的开源可观测性框架。该框架提供了一组 API、库、代理和收集器服务，用于捕获分布式跟踪和指标。此外，它的规范在 2021 年早些时候达到了 1.0.0 版本状态，并被 InfoQ 报道。&lt;/p&gt;
&lt;p&gt;OpenTelemetry 通过使用 API 来仪表化应用程序代码，以生成遥测数据，并在不同的 SDK 实现之间无缝地引导收集指标。它提供了针对特定语言的集成和库，例如 Java、Golang、.NET 和 Python 的 OTel SDK，以使开发人员能够仪表化其代码并捕获遥测数据。这些库中的遥测数据被收集并传输到 OpenTelemetry Collector，利用 OTLP 在客户端和服务器之间进行数据交换。OTLP 定义了一个序列化模式，紧密遵循跟踪、指标和日志的数据模型。&lt;/p&gt;
&lt;p&gt;作为中央存储库，OpenTelemetry Collector 接收、处理和导出从各种源收集的遥测数据，既作为单个应用程序的本地代理，也作为多个应用程序的网关。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-opentelemetry-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;OpenTelemetry 架构图&#34;
           src=&#34;https://cloudnative.to/blog/otlp-version-one-released/otel-diagram.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      OpenTelemetry 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Open Telemetry Diagram（来源：&lt;a href=&#34;https://opentelemetry.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 文档&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OTLP 在数据序列化、反序列化和网络服务之间的传输方面发挥着重要作用。该协议旨在指定一个序列化模式，紧密遵循数据模型并解决其他遥测协议的问题。&lt;/p&gt;
&lt;p&gt;Honeycomb 开发者倡导者 &lt;a href=&#34;https://twitter.com/MartinDotNet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Martin Thwaites&lt;/a&gt; 说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OTLP 是 OpenTelemetry 的生命力，使其比以往任何时候都更强大；转向 v1 将把这一点提升到一个新的水平。已经有大多数供应商适应了使用 OTLP 协议接收数据；通过 V1，这将给人们带来一些急需的信心，希望可以让最后几个顽固分子添加 OTLP 支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，他表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这很重要，因为它开启了更多的互操作性，减少了添加专有协议库到我们堆栈中的需求，这对于希望更好地了解其应用程序的情况下获得更多可见性的人来说只能是一个胜利。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，OpenTelemetry 项目目前是 CNCF 的&lt;a href=&#34;https://www.cncf.io/projects/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;孵化项目&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>可观测性峰会 2023 回顾及 PPT 下载</title>
      <link>https://cloudnative.to/blog/observability-summit-2023-recap/</link>
      <pubDate>Sun, 23 Apr 2023 22:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/observability-summit-2023-recap/</guid>
      <description>&lt;p&gt;「可观测性峰会 2023」是云原生社区组织的技术会议，旨在分享并探讨云原生应用程序和基础架构中实现可观测性的最新技术和工具以及最佳实践。&lt;/p&gt;
&lt;p&gt;时间：2023 年 4 月 22 日（周六）&lt;/p&gt;
&lt;p&gt;地点：北京奥佳美术馆酒店&lt;/p&gt;
&lt;p&gt;活动详情：&lt;a href=&#34;https://www.huodongxing.com/event/6695157778700&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.huodongxing.com/event/6695157778700&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f0_hubc7b39edba1af54441ce60546431902e_2226288_51fd489e5e7ebc7e83ae7194063e6411.webp 400w,
               /blog/observability-summit-2023-recap/f0_hubc7b39edba1af54441ce60546431902e_2226288_6194df2804b9ef2ebbd02dcfd71ac112.webp 760w,
               /blog/observability-summit-2023-recap/f0_hubc7b39edba1af54441ce60546431902e_2226288_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f0_hubc7b39edba1af54441ce60546431902e_2226288_51fd489e5e7ebc7e83ae7194063e6411.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本次大会的主持人来自云原生社区管委会，上半场主持人为罗广明。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f1_hu60a3df32b1c9be8ea101508a14a9a5aa_2367668_4b4c9e3981f47a1629fa9834ebec4d21.webp 400w,
               /blog/observability-summit-2023-recap/f1_hu60a3df32b1c9be8ea101508a14a9a5aa_2367668_3dae9b2a19b1c5bb6358544a8637e665.webp 760w,
               /blog/observability-summit-2023-recap/f1_hu60a3df32b1c9be8ea101508a14a9a5aa_2367668_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f1_hu60a3df32b1c9be8ea101508a14a9a5aa_2367668_4b4c9e3981f47a1629fa9834ebec4d21.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下半场主持人张丽颖。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f2_huf1ff4863f3ab579117905b0a65e45d40_1943060_63f02789a212ca4be55f62cd5e0f9f9c.webp 400w,
               /blog/observability-summit-2023-recap/f2_huf1ff4863f3ab579117905b0a65e45d40_1943060_31712f6e3cc7f4fe8121a331d9b268f5.webp 760w,
               /blog/observability-summit-2023-recap/f2_huf1ff4863f3ab579117905b0a65e45d40_1943060_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f2_huf1ff4863f3ab579117905b0a65e45d40_1943060_63f02789a212ca4be55f62cd5e0f9f9c.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;开场致辞&#34;&gt;开场致辞&lt;/h3&gt;
&lt;p&gt;嘉宾：&lt;/p&gt;
&lt;p&gt;宋净超，云原生社区创始人&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f3_hu5121ef38a1b701a4aa0b4bd8735fcdac_1687484_be21f92f63607543b8e52356086bbf22.webp 400w,
               /blog/observability-summit-2023-recap/f3_hu5121ef38a1b701a4aa0b4bd8735fcdac_1687484_f475a560be77b4bdecae7c806770becb.webp 760w,
               /blog/observability-summit-2023-recap/f3_hu5121ef38a1b701a4aa0b4bd8735fcdac_1687484_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f3_hu5121ef38a1b701a4aa0b4bd8735fcdac_1687484_be21f92f63607543b8e52356086bbf22.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;陈屹力，中国信通院云大所副总工程师&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f4_huf839f863d4b8ffebff18dccfcc451c94_2939209_c41df77ea407d81c20b5c407c78b3b39.webp 400w,
               /blog/observability-summit-2023-recap/f4_huf839f863d4b8ffebff18dccfcc451c94_2939209_e6b3510a94f12dd60e977db966e25c9e.webp 760w,
               /blog/observability-summit-2023-recap/f4_huf839f863d4b8ffebff18dccfcc451c94_2939209_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f4_huf839f863d4b8ffebff18dccfcc451c94_2939209_c41df77ea407d81c20b5c407c78b3b39.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1zV4y1o79E/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1zV4y1o79E/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f14_hu7072d95a3cded18872b1de1f86ef47de_384386_f949238c945b8704abba25ec13a61154.webp 400w,
               /blog/observability-summit-2023-recap/f14_hu7072d95a3cded18872b1de1f86ef47de_384386_854d4100859a96490dcd4126967dde36.webp 760w,
               /blog/observability-summit-2023-recap/f14_hu7072d95a3cded18872b1de1f86ef47de_384386_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f14_hu7072d95a3cded18872b1de1f86ef47de_384386_f949238c945b8704abba25ec13a61154.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;可观测性-opscenter-在移动云平台落地实践&#34;&gt;可观测性 OpsCenter 在移动云平台落地实践&lt;/h3&gt;
&lt;p&gt;沈巍，中国移动云能力中心架构师&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f5_hu407f6c5fa3371973dd98baef007c4c7e_2249775_88f28c2d03b0e795b5f228dc52f89d43.webp 400w,
               /blog/observability-summit-2023-recap/f5_hu407f6c5fa3371973dd98baef007c4c7e_2249775_ce1a59457205659b5c188ae5a9e532b0.webp 760w,
               /blog/observability-summit-2023-recap/f5_hu407f6c5fa3371973dd98baef007c4c7e_2249775_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f5_hu407f6c5fa3371973dd98baef007c4c7e_2249775_88f28c2d03b0e795b5f228dc52f89d43.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲师介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;沈巍，中国移动云能力中心，软件开发工程师，曾就职于全球最大的移动通信设备商爱立信；在爱立信工作期间参与设计了爱立信全球第一套超大规模 NFV 电信云落地，全球第一套超大规模 5GC 电信云落地；荣获爱立信年度最具有价值员工称号。擅长 openstack，kubernetes 等云平台的解决方案设计与实现；云平台可观测性监控的设计与实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;议题概要&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;介绍移动云的现状，包括资源池和设备供应商的多样性以及网络设备和网络结构存在的问题。&lt;/li&gt;
&lt;li&gt;针对移动云的现状，提出了适合移动云的可观测性平台的解决方案和实现方法。其中，介绍了监控数据来源（包括分层级监控和分应用监控），告警分发策略和主动运维的必要性。&lt;/li&gt;
&lt;li&gt;探讨了部署可观测性平台的收益和价值性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1GX4y1B7qG/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1GX4y1B7qG/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f1_hu83a96862f36fa1a23c40b96b3cbfb33e_385757_251793f973c7d9f9f4ae71583e87a06b.webp 400w,
               /blog/observability-summit-2023-recap/f1_hu83a96862f36fa1a23c40b96b3cbfb33e_385757_754e3dbb962a6f97efbfdcf03cbb2a3d.webp 760w,
               /blog/observability-summit-2023-recap/f1_hu83a96862f36fa1a23c40b96b3cbfb33e_385757_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f1_hu83a96862f36fa1a23c40b96b3cbfb33e_385757_251793f973c7d9f9f4ae71583e87a06b.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;使用-ebpf-零代码修改绘制全景应用拓扑&#34;&gt;使用 eBPF 零代码修改绘制全景应用拓扑&lt;/h3&gt;
&lt;p&gt;向阳，云杉网络&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f6_hu57a5f4707bac491c6533a90ef70b01f1_2532536_fc7f5264a10d4974104d862652cce7f3.webp 400w,
               /blog/observability-summit-2023-recap/f6_hu57a5f4707bac491c6533a90ef70b01f1_2532536_df04a7ac523cab39719bfb2ab9b31a5e.webp 760w,
               /blog/observability-summit-2023-recap/f6_hu57a5f4707bac491c6533a90ef70b01f1_2532536_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f6_hu57a5f4707bac491c6533a90ef70b01f1_2532536_fc7f5264a10d4974104d862652cce7f3.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲师介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向阳，云杉网络研发 VP，清华大学博士。致力于打造一款零侵扰的云原生应用可观测性产品，让观测更自动，让开发者更自由。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;议题概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生应用访问关系错综复杂、更新频繁，依靠手动绘制不现实，依靠代码插桩或服务网格侵入性大难以覆盖全景。DeepFlow 利用 eBPF 实现了无需代码修改、无需应用重发布、无需业务进程重启的全景应用拓扑绘制能力，并在拓扑之上提供了所有服务、所有访问路径的全栈性能指标。&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1B14y1f7UB/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1B14y1f7UB/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f2_hud4bc0b64cc4f9c4846357d0f7dc81df9_374587_588ebbd1a5565e6f5fc78cf8b8c9610c.webp 400w,
               /blog/observability-summit-2023-recap/f2_hud4bc0b64cc4f9c4846357d0f7dc81df9_374587_b56ad7d169eb009c61bf41991cd30a84.webp 760w,
               /blog/observability-summit-2023-recap/f2_hud4bc0b64cc4f9c4846357d0f7dc81df9_374587_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f2_hud4bc0b64cc4f9c4846357d0f7dc81df9_374587_588ebbd1a5565e6f5fc78cf8b8c9610c.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;可观测技术应用现状及发展趋势研究&#34;&gt;可观测技术应用现状及发展趋势研究&lt;/h3&gt;
&lt;p&gt;高继翔，中国信通院&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f7_hu33118cbba33912fec77bcf61001688ef_1828272_a8657b5ce4a60fcd9b8a7e1a13edbc41.webp 400w,
               /blog/observability-summit-2023-recap/f7_hu33118cbba33912fec77bcf61001688ef_1828272_0a46fca9fed7bbd64f96e9b6ca12708c.webp 760w,
               /blog/observability-summit-2023-recap/f7_hu33118cbba33912fec77bcf61001688ef_1828272_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f7_hu33118cbba33912fec77bcf61001688ef_1828272_a8657b5ce4a60fcd9b8a7e1a13edbc41.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲师介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;高继翔，中国信通院云大所业务主管，从事可观测性、SRE 等云计算领域关键技术研究，牵头编写了《可观测性技术 平台能力分级要求》行业标准。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;议题概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支撑工信部在 31 个省市开展云服务稳定安全运行应急演练专项活动过程中，对可观测性技术应用现状的调查结果，同时结合产业研究成果，介绍可观测性技术发展趋势及方向。&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1xv4y1E7wF/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1xv4y1E7wF/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f3_huc1a6ce8abb7ad08b13a3d36acd06bdeb_381094_ea0f01b7ded550cdab93702a64ffe130.webp 400w,
               /blog/observability-summit-2023-recap/f3_huc1a6ce8abb7ad08b13a3d36acd06bdeb_381094_9ebf5646aacab2cde024a2c90caa9575.webp 760w,
               /blog/observability-summit-2023-recap/f3_huc1a6ce8abb7ad08b13a3d36acd06bdeb_381094_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f3_huc1a6ce8abb7ad08b13a3d36acd06bdeb_381094_ea0f01b7ded550cdab93702a64ffe130.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;圆桌讨论云原生应用可观测性现状及趋势&#34;&gt;圆桌讨论：云原生应用可观测性现状及趋势&lt;/h3&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f8_hu8805e4f0322c33282125cd8713412fee_2097756_8e9a3c083dc4d98772699a30a6a65e3c.webp 400w,
               /blog/observability-summit-2023-recap/f8_hu8805e4f0322c33282125cd8713412fee_2097756_05a9fc12cce4eb6171510d29dfd21812.webp 760w,
               /blog/observability-summit-2023-recap/f8_hu8805e4f0322c33282125cd8713412fee_2097756_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f8_hu8805e4f0322c33282125cd8713412fee_2097756_8e9a3c083dc4d98772699a30a6a65e3c.webp&#34;
               width=&#34;760&#34;
               height=&#34;504&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;嘉宾&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;罗广明，主持人&lt;/li&gt;
&lt;li&gt;吴晟，Tetrate 创始工程师&lt;/li&gt;
&lt;li&gt;向阳，云杉科技研发 VP&lt;/li&gt;
&lt;li&gt;乔新亮，原苏宁科技副总裁，现彩食鲜 CTO&lt;/li&gt;
&lt;li&gt;董江，中国移动云能力中心高级系统架构专家&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;讨论话题&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;云原生大背景之下，可观测性为什么如此重要？&lt;/li&gt;
&lt;li&gt;如何评估云原生应用程序和基础设施的可观测性水平？&lt;/li&gt;
&lt;li&gt;未来云原生可观测性的发展趋势是什么？将来可观测性的实现方式和手段会有哪些变化？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1is4y1d7gd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1is4y1d7gd/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f4_hu3f7e5772628fbb4e858e28014932135d_410237_23d8a1f1fecd672d5046118f485c5361.webp 400w,
               /blog/observability-summit-2023-recap/f4_hu3f7e5772628fbb4e858e28014932135d_410237_51b623c1c4313838054b491c882601a4.webp 760w,
               /blog/observability-summit-2023-recap/f4_hu3f7e5772628fbb4e858e28014932135d_410237_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f4_hu3f7e5772628fbb4e858e28014932135d_410237_23d8a1f1fecd672d5046118f485c5361.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;基于-prometheus-的-slo-告警实战&#34;&gt;基于 Prometheus 的 SLO 告警实战&lt;/h3&gt;
&lt;p&gt;宋佳洋，Oppo&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f9_hu6d26fd5aef6852bfbb32fee91217e883_1642330_32354d055ce34ef7a1afd1cf46d78841.webp 400w,
               /blog/observability-summit-2023-recap/f9_hu6d26fd5aef6852bfbb32fee91217e883_1642330_80efe4963b7742d16d6c32c1c9f8343c.webp 760w,
               /blog/observability-summit-2023-recap/f9_hu6d26fd5aef6852bfbb32fee91217e883_1642330_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f9_hu6d26fd5aef6852bfbb32fee91217e883_1642330_32354d055ce34ef7a1afd1cf46d78841.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲师介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;宋佳洋，OPPO 高级后端工程师，OpenTelemetry、Prometheus、Cortex 代码贡献者。2013 年参加工作，先后就职于七牛云、京东云等公司，目前就职于 OPPO 云计算部门。爱好 Golang 和开源，目前主要专注于云原生和观察性领域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;议题概要&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 SLO 告警基础&lt;/li&gt;
&lt;li&gt;开源方案对比（Sloth、Pyrra）&lt;/li&gt;
&lt;li&gt;多租户 SLO 实现方式（Cortex 扩展）&lt;/li&gt;
&lt;li&gt;遥测塔 SLO 服务介绍&lt;/li&gt;
&lt;li&gt;Demo 展示&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1jV4y1o7Q7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1jV4y1o7Q7/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f5_huff7fe9c6098fa9190e8b2a2d7cbeb2b6_372901_c7c43cf65260d9062991a2a8a3b64e82.webp 400w,
               /blog/observability-summit-2023-recap/f5_huff7fe9c6098fa9190e8b2a2d7cbeb2b6_372901_0ddad763f16c7534b407767c7fa49b9e.webp 760w,
               /blog/observability-summit-2023-recap/f5_huff7fe9c6098fa9190e8b2a2d7cbeb2b6_372901_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f5_huff7fe9c6098fa9190e8b2a2d7cbeb2b6_372901_c7c43cf65260d9062991a2a8a3b64e82.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;为-apache-skywalking-构建-grafana-dashboards----基于对原生-promql-的支持&#34;&gt;为 Apache SkyWalking 构建 Grafana dashboards &amp;ndash; 基于对原生 PromQL 的支持&lt;/h3&gt;
&lt;p&gt;万凯，Tetrate&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f10_hu642a5c6253ab5026d6c42ed851971555_1542974_2ead987c6247860b1d03013e31f80583.webp 400w,
               /blog/observability-summit-2023-recap/f10_hu642a5c6253ab5026d6c42ed851971555_1542974_0a7afed76760e869938a2d451312386f.webp 760w,
               /blog/observability-summit-2023-recap/f10_hu642a5c6253ab5026d6c42ed851971555_1542974_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f10_hu642a5c6253ab5026d6c42ed851971555_1542974_2ead987c6247860b1d03013e31f80583.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲师介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;万凯，Tetrate 工程师，Apache SkyWalking PMC 成员，专注于应用性能可观测性领域。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;议题概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本次分享将介绍 Apache SkyWalking 的新特性 PromQL Service，它将为 SkyWalking 带来更广泛的生态集成能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是 PromQL&lt;/li&gt;
&lt;li&gt;SkyWalking 的 PromQL Service 是什么，能够做什么&lt;/li&gt;
&lt;li&gt;SkyWalking 中的基本概念和 metrics 的特性&lt;/li&gt;
&lt;li&gt;如何使用 PromQL Service&lt;/li&gt;
&lt;li&gt;使用 PromQL Service 构建 Grafana dashboards 的实践&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1ms4y1d7NF/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1ms4y1d7NF/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f6_hue25c9cb03780253517ce8bba355b0b2f_400469_814ebfab9bf94b4927ab3e959ae726a5.webp 400w,
               /blog/observability-summit-2023-recap/f6_hue25c9cb03780253517ce8bba355b0b2f_400469_cd3a8d54f28399f6221082f7015f3e4c.webp 760w,
               /blog/observability-summit-2023-recap/f6_hue25c9cb03780253517ce8bba355b0b2f_400469_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f6_hue25c9cb03780253517ce8bba355b0b2f_400469_814ebfab9bf94b4927ab3e959ae726a5.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;apache-dubbo-云原生可观测性的探索与实践&#34;&gt;Apache Dubbo 云原生可观测性的探索与实践&lt;/h3&gt;
&lt;p&gt;江河清，阿里巴巴&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f11_hu34a6765f1d2c5f2a6edec5ce70d01fc3_845365_3d331554d6ac782fb439bdf905bdffda.webp 400w,
               /blog/observability-summit-2023-recap/f11_hu34a6765f1d2c5f2a6edec5ce70d01fc3_845365_33a03904f69236e3e70f8c4c496b6725.webp 760w,
               /blog/observability-summit-2023-recap/f11_hu34a6765f1d2c5f2a6edec5ce70d01fc3_845365_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f11_hu34a6765f1d2c5f2a6edec5ce70d01fc3_845365_3d331554d6ac782fb439bdf905bdffda.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲师介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apache Dubbo PMC，阿里云研发工程师，专注于服务框架，Apache Dubbo 核心维护团队成员。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;议题概要&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;云原生背景下传统微服务应用的架构升级&lt;/li&gt;
&lt;li&gt;云原生微服务场景下可观测性的价值&lt;/li&gt;
&lt;li&gt;Apache Dubbo 对接可观测体系的思路和目标&lt;/li&gt;
&lt;li&gt;Apache Dubbo 基于 Micrometer 实现实时指标采集和全链路追踪方案的介绍&lt;/li&gt;
&lt;li&gt;Apache Dubbo 通过 OpenTelemetry 对接可观测平台的方案&lt;/li&gt;
&lt;li&gt;基于可观测能力提升生产稳定性的最佳实践介绍&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1mV4y1o7Uj/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1mV4y1o7Uj/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f7_hu41d88059af01f03beda1401703ce0169_386214_96fdecbb2d1af2434316a25479540d67.webp 400w,
               /blog/observability-summit-2023-recap/f7_hu41d88059af01f03beda1401703ce0169_386214_5ca1f649ed0fb9677008876afa38565a.webp 760w,
               /blog/observability-summit-2023-recap/f7_hu41d88059af01f03beda1401703ce0169_386214_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f7_hu41d88059af01f03beda1401703ce0169_386214_96fdecbb2d1af2434316a25479540d67.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;我为可观测性做减法微信日志热点约简实践与探索&#34;&gt;我为可观测性做减法：微信日志热点约简实践与探索&lt;/h3&gt;
&lt;p&gt;余广坝，中山大学&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f12_hu3e782c16f42eae9ce2409d3478c97209_2113724_95cbbdb7b787c2d38552b446e379afc9.webp 400w,
               /blog/observability-summit-2023-recap/f12_hu3e782c16f42eae9ce2409d3478c97209_2113724_7e2e5b32373a32b1fa82e942c7942228.webp 760w,
               /blog/observability-summit-2023-recap/f12_hu3e782c16f42eae9ce2409d3478c97209_2113724_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f12_hu3e782c16f42eae9ce2409d3478c97209_2113724_95cbbdb7b787c2d38552b446e379afc9.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲师介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;余广坝，中山大学 2020 级计算机专业的博士研究生，研究方向为云原生系统的性能诊断与优化，累计发表学术论文 20 余篇，其中 包括 CCF A 类论文 4 篇。2022 年入选 2022 腾讯犀牛鸟精英人才计划，到腾讯 WXG 做科研实习生，主要研究微信后台日志约简话题。此次分享的话题对应学术论文被 CCF A 类国际软件工程大会 ICSE 2023 录用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;议题概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在微信中，每天的后台日志打印接近 100 万亿行，占用了接近 20PB 的存储，带来了巨大的运营成本。为了削减日志的运营成本，我们对微信后台的日志打印和存储的特征进行了分析和挖掘，发现「绝大多数的日志开销是由少数的几条日志语句导致的」，我们将这些日志语句称为「日志热点」。这个发现启发我们：「及时发现日志热点，对日志热点的打印进行优化即可降低大量的日志开销」。针对这个问题，他将分享以下几个话题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信后台日志热点出现的普遍性、原因和修复方案调研&lt;/li&gt;
&lt;li&gt;微信日志热点定位与离线约简实践&lt;/li&gt;
&lt;li&gt;基于 eBPF 的在线日志热点约简探索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1Ec411J7sk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1Ec411J7sk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f8_hu0311658a90c0964d41abb3bf9d071c58_396183_035ca325778af297cb9d8ba6e4b679dd.webp 400w,
               /blog/observability-summit-2023-recap/f8_hu0311658a90c0964d41abb3bf9d071c58_396183_7f592e6721433d57583d92edb0348cc4.webp 760w,
               /blog/observability-summit-2023-recap/f8_hu0311658a90c0964d41abb3bf9d071c58_396183_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f8_hu0311658a90c0964d41abb3bf9d071c58_396183_035ca325778af297cb9d8ba6e4b679dd.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;使用-ebpfwasm-构建下一代可观测性数据采集基础设施&#34;&gt;使用 eBPF+WASM 构建下一代可观测性数据采集基础设施&lt;/h3&gt;
&lt;p&gt;赵亚雄，三度观测云（tricorder.dev）创始人 CEO&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f13_hubd4e3d2a95b38423cf21e5468f95ab58_1368014_35fe685395daf1af88745556e3b1ad86.webp 400w,
               /blog/observability-summit-2023-recap/f13_hubd4e3d2a95b38423cf21e5468f95ab58_1368014_1b8c6523a893f2aba00066f68c7ed124.webp 760w,
               /blog/observability-summit-2023-recap/f13_hubd4e3d2a95b38423cf21e5468f95ab58_1368014_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f13_hubd4e3d2a95b38423cf21e5468f95ab58_1368014_35fe685395daf1af88745556e3b1ad86.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;讲师介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;赵亚雄博士 2012 - 2013 年参与 Amazon Kinesis 开发（世界首个流式大数据云服务）；2013 - 2019 年先后在 Google NetInfra 团队参与 Jupiter 软件定义网络系统、及 Borg 容器云平台的研发，后期担任 Borg Clients 团队经理，承担下一代云原生自动化运维系统的研发；2019 - 2022 年是 Pixie（&lt;a href=&#34;https://px.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://px.dev&lt;/a&gt;）创始团队成员，Pixie 获得顶级风投 Benchmark、GV 投资，于 2020 年 12 月被纽约证券交易所上市公司 New Relic（&lt;a href=&#34;https://newrelic.com/%EF%BC%89%E6%94%B6%E8%B4%AD%EF%BC%8C%E5%8E%86%E6%97%B6%E4%BB%85&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://newrelic.com/）收购，历时仅&lt;/a&gt; 1.5 年；2022 年 10 月创立三度观测云，从全球超过 5000 家申请企业中脱颖而出、获选进入奇绩创坛创业营，并获得陆奇博士天使轮投资。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;议题概要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;议题简介
可观测性是云原生技术版图中的核心，是支撑云原生软件系统开发、运维的基础。可观测性技术的本质是通过数据来揭示软件系统自身的运行机制，提升和扩展工程师在云原生环境中进行软件开发、测试、运维的能力边界。&lt;/p&gt;
&lt;p&gt;数据是可观测性的基础和价值源泉。但是，针对可观测性数据采集，可观测性技术群体沿用了一条错误的技术路线：各类可观测性产品须在被观测的软件系统内植入代码来采集可观测性数据，好比是做体检都需要开膛破肚。这种方式从根本上增加了可观测性产品的使用成本，限制了可观测性技术发挥价值的空间，降低了可观测性技术在云原生生态中的普及速度；甚至阻碍了云原生技术自身的普及。&lt;/p&gt;
&lt;p&gt;赵亚雄博士介绍了基于 eBPF+WASM 实现无侵入式数据采集的技术思想，从根本上降低可观测性数据采集的成本，符合云原生技术自身技术规律；以此技术思想为指导，星舰（Starship）观测平台在 Kubernetes 上实现了可观测性数据即时采集，助力工程师获取高价值数据，解决云原生软件系统的开发、测试、运维过程中的各类技术问题。&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&#34;https://www.bilibili.com/video/BV1kM411V7Y9/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bilibili.com/video/BV1kM411V7Y9/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/observability-summit-2023-recap/f9_hufdebb4398444f732dffb6f1a14cfba27_399713_e99312c609c2711f91dda85c45ed32ac.webp 400w,
               /blog/observability-summit-2023-recap/f9_hufdebb4398444f732dffb6f1a14cfba27_399713_4a46b60a44dbbeb6b4826082fbb5943f.webp 760w,
               /blog/observability-summit-2023-recap/f9_hufdebb4398444f732dffb6f1a14cfba27_399713_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/observability-summit-2023-recap/f9_hufdebb4398444f732dffb6f1a14cfba27_399713_e99312c609c2711f91dda85c45ed32ac.webp&#34;
               width=&#34;599&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;大会总结&#34;&gt;大会总结&lt;/h3&gt;
&lt;p&gt;本次可观测性峰会 2023 在北京奥加美术馆酒店圆满结束。本次峰会聚焦于云原生应用程序和基础架构中可观测性的最佳实践。上午场聚焦最佳实践和经验分享，并围绕可观测性进行了精彩的讨论，下午场的五场分享展示了最新的技术和工具，为参会者带来了许多宝贵的经验和启示。&lt;/p&gt;
&lt;p&gt;其中，基于 Prometheus 的 SLO 告警实战分享了如何在实践中应用 SLO 告警基础，使得告警更加准确；Apache SkyWalking 的分享介绍了其新特性 PromQL Service，展示了如何使用 SkyWalking 中的 PromQL Service 构建 Grafana dashboards；Apache Dubbo 的分享介绍了在云原生微服务场景下可观测性的价值和 Dubbo 对接可观测体系的思路和目标；微信日志热点约简实践与探索分享了如何通过发现日志热点对日志打印进行优化从而降低日志开销；使用 eBPF+WASM 构建下一代可观测性数据采集基础设施分享了基于 eBPF+WASM 实现无侵入式数据采集的技术思想。&lt;/p&gt;
&lt;p&gt;参会者对本次峰会的内容表示非常满意，认为分享的内容新颖、实用，有助于他们更好地应用可观测性技术。此外，本次峰会的社区影响力也得到了一致的肯定，参会者表示，这是一次非常成功的活动，期待未来的峰会能够继续展示最新的技术和工具，为业界带来更多的启示和收获。&lt;/p&gt;
&lt;p&gt;本次可观测性峰会 2023 是一次非常成功的活动，为业界带来了许多启示和收获，展示了最新的技术和工具，同时也促进了社区的发展和交流。希望未来的峰会能够继续为业界带来更多的启示和收获，展示最新的技术和工具，为可观测性技术的发展和应用做出更大的贡献。&lt;/p&gt;
&lt;h3 id=&#34;ppt-下载&#34;&gt;PPT 下载&lt;/h3&gt;
&lt;p&gt;讲师 PPT 可以在 GitHub 上下载，下载链接：&lt;a href=&#34;https://github.com/cloudnativeto/academy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/cloudnativeto/academy&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>可观测性峰会 2023</title>
      <link>https://cloudnative.to/event/observability-summit-2023/</link>
      <pubDate>Sat, 22 Apr 2023 09:30:00 +0800</pubDate>
      <guid>https://cloudnative.to/event/observability-summit-2023/</guid>
      <description>&lt;p&gt;活动日程请见&lt;a href=&#34;https://huodongxing.com/event/6695157778700&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;活动行&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用全景拓扑持续跟踪云原生应用的压测性能瓶颈</title>
      <link>https://cloudnative.to/blog/service-map-observation-performance-test/</link>
      <pubDate>Fri, 21 Apr 2023 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/service-map-observation-performance-test/</guid>
      <description>&lt;p&gt;测试小姐姐正在对云原生的电商应用进行压测，但是如何对压测结果进行持续的观测呢？这一直是比较头痛的事情，本文将介绍如何利用 DeepFlow 的全景拓扑帮助小姐姐快速找到瓶颈点。DeepFlow 全景拓扑无需业务修改代码、配置或者重启服务，利用 BPF/eBPF 技术通过对业务零侵扰的方式构建而来，这是一种很便捷且低成本的方式来观测全链路压测的结果。&lt;/p&gt;
&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h2&gt;
&lt;p&gt;DeepFlow 在线的 Sandbox 环境中部署了一个云原生的电商应用，此电商应用来源于 &lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;，此应用覆盖 Go/Java/.NET/PHP/Python 等多种语言，且涵盖 Redis/Kafka/PostgreSQL 等中间件，所有的这些服务都部署在 K8s 环境中。在做全链路压测时，当前通常的方式需要对应用进行代码级别的改造，这对于仅负责测试的小姐姐来说又很难推动，接下来将详细介绍 DeepFlow 的全景拓扑如何轻松解决小姐姐的苦恼。&lt;/p&gt;
&lt;p&gt;以下是电商应用微服务的调用关系图，提供了外网和内网访问的两种方式。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-调用关系&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/202304206440e8e3b447b.png&#34; alt=&#34;调用关系&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      调用关系
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;DeepFlow 的 Sandbox 考虑到安全性的问题，仅支持了内网的访问方式，以下是 DeepFlow 的全景拓扑自动绘制的调用关系，接下来的整个过程都将基于此拓扑进行。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-全景拓扑&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/20230420644151ebabb38.jpg&#34; alt=&#34;全景拓扑&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      全景拓扑
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;DeepFlow 的全景拓扑可以与多指标进行结合，当指标量超过阈值时，则将通过标红的形式可视化出来。在开始接下来压测及调优过程之前，需要对本次过程中使用到的指标有一个了解。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指标&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;观测目标&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;流量速率&lt;/td&gt;
&lt;td&gt;作为主指标，构建全景拓扑&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用请求速率&lt;/td&gt;
&lt;td&gt;统计服务的请求速率，主要用于观测压测过程中请求量是否符合压测预期&lt;/td&gt;
&lt;td&gt;符合测试压测的速率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用异常个数&lt;/td&gt;
&lt;td&gt;统计服务的异常个数，主要用于观测压测过程中是否存在服务异常的情况&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;应用响应时延&lt;/td&gt;
&lt;td&gt;统计服务的响应时延，主要用于观测压测过程中响应时延是否超过预期&lt;/td&gt;
&lt;td&gt;1s 以内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP 建连时延&lt;/td&gt;
&lt;td&gt;统计 TCP 建连时延，主要用于观测压测过程中网络是否存在波动&lt;/td&gt;
&lt;td&gt;10ms 以内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TCP 建连失败&lt;/td&gt;
&lt;td&gt;统计 TCP 建连失败，主要用于观测压测过程中系统性能是否稳定&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;逐个击破性能瓶颈&#34;&gt;逐个击破性能瓶颈&lt;/h2&gt;
&lt;p&gt;在 loadgenerator 所在的 node，通过脚本模拟 1.5k 的并发访问量，观测全景拓扑，一片红（在当前并发量的情况下，观测的指标量都超过阈值了），说明了目前这个系统在当前资源分配情况下，是扛不住 1.5k 的并发访问量的。查看指标量，应用响应时延、异常数和网络建连时延、建连失败的指标量都远超阈值了。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-压测开始&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/202304206440e8e7c5190.jpg&#34; alt=&#34;压测开始&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      压测开始
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;找一个指标量（服务响应时延）来层层追踪拓扑图，loadgenerator 访问 frontend 响应时延达到 15s，而 frontend 访问后端服务中，其中访问 productcatalog 及 recommendation 分别都消耗了大概 11s、5s 的时延，其中 productcatalog 没有继续往后的访问了，可继续追踪 recommendation 访问的后端，其中也是访问 productcatalog 消耗了大概 4s 的时延，&lt;strong&gt;到此基本能确定当前应用的性能瓶颈就在 productcatalog 上。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-分析拓扑&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/202304206440e8e553e4e.jpg&#34; alt=&#34;分析拓扑&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      分析拓扑
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;接下来先直接对 productcatalog 扩容，增加 pod 数量到之前的 1 倍，然后再观测下全景拓扑，可以看出来拓扑图上的红变少一些了，同时观测下指标量，发现应用的响应时延及异常数都降下来了。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-扩容_01&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/202304206440e8e46c14c.jpg&#34; alt=&#34;扩容_01&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      扩容_01
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;沿着前面的思路，依然使用服务响应时延来层层追踪拓扑图，&lt;strong&gt;发现通过扩容 1 倍的 POD 数，虽然缓解了 productcatalog 性能压力，但是还是没彻底解决。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-分析拓扑_01&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/202304206440e8e906a89.jpg&#34; alt=&#34;分析拓扑_01&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      分析拓扑_01
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;接下来继续对 productcatalog 扩容，这次扩容到 2 倍，再观测全景拓扑，红色部分更少了，指标量也更接近预期了。不过&lt;strong&gt;这次发现解决了 productcatalog 的性能问题后，cart 的性能问题冒出来了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-扩容_02&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/202304206440e8e64d271.jpg&#34; alt=&#34;扩容_02&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      扩容_02
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;继续对 cart 服务的 POD 的数量扩容 1 倍，观测全景拓扑，发现红色部分都没了。到此基本上可以出压测结果了，&lt;strong&gt;针对当前电商应用在 1.5k 的并发访问量的情况下，productcatalog 需要是比其他服务（除 cart 外）2 倍的资源分配，cart 需要比其他服务（除 productcatalog 外）多 1 倍的资源分配才能应对。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-扩容_03&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/202304206440e8e6c4bf9.jpg&#34; alt=&#34;扩容_03&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      扩容_03
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;指标量分析&#34;&gt;指标量分析&lt;/h2&gt;
&lt;p&gt;再结合历史曲线图，来详细分析下指标量的变化，让大家能更好的理解为什么应用的性能问题除了带来应用指标量的波动，为什么还会带了网络指标量的变化。明显在 17:48 分后端服务是整个处理不过来的，这时多个指标都能反应此情况。&lt;code&gt;建连失败&lt;/code&gt;很多，在失败的过程中还不停的&lt;code&gt;重传 SYN 报文&lt;/code&gt;，同时建连失败的都是因为&lt;code&gt;服务端直接回 RST &lt;/code&gt;导致，此时仅看这部分指标量已经能清楚是&lt;strong&gt;后端系统对连接处理不过来了&lt;/strong&gt;。再继续结合应用指标量分析，在建连失败多的情况下，&lt;code&gt;请求量&lt;/code&gt;反而下降了，这是因为建连都没成功，根本发不了请求，此时后端的&lt;code&gt;异常数&lt;/code&gt;及&lt;code&gt;响应时延&lt;/code&gt;也都是挺高，也是直接反应了&lt;strong&gt;后端对请求处理不过来了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-历史曲线&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/pub/pic/202304206440e8e89523c.jpg&#34; alt=&#34;历史曲线&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      历史曲线
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;什么是-deepflow&#34;&gt;什么是 DeepFlow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/deepflowio/deepflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow&lt;/a&gt; 是一款开源的高度自动化的可观测性平台，是为云原生应用开发者建设可观测性能力而量身打造的全栈、全链路、高性能数据引擎。DeepFlow 使用 eBPF、WASM、OpenTelemetry 等新技术，创新的实现了 AutoTracing、AutoMetrics、AutoTagging、SmartEncoding 等核心机制，帮助开发者提升埋点插码的自动化水平，降低可观测性平台的运维复杂度。利用 DeepFlow 的可编程能力和开放接口，开发者可以快速将其融入到自己的可观测性技术栈中。&lt;/p&gt;
&lt;p&gt;GitHub 地址：&lt;a href=&#34;https://github.com/deepflowio/deepflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/deepflowio/deepflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://deepflow.io/docs/zh/install/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow Demo&lt;/a&gt;，体验高度自动化的可观测性新时代。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>应用响应时延背后深藏的网络时延</title>
      <link>https://cloudnative.to/blog/analysis-of-delay-with-deepflow/</link>
      <pubDate>Wed, 08 Mar 2023 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/analysis-of-delay-with-deepflow/</guid>
      <description>&lt;p&gt;应用异常时，基本可以分为&lt;strong&gt;服务访问不通&lt;/strong&gt;和&lt;strong&gt;服务响应慢&lt;/strong&gt;两个大类。其中服务响应慢的问题定位非常棘手，很多无头案。应用团队有日志和追踪，对于自认为的不可能不合理的事情都会甩给基础设施团队，又由于基础设施团队现有的监控数据缺乏应用的观测视角，通常成为一切「不是我的问题」超自然现象的终极背锅侠，其中以网络团队尤为严重。&lt;/p&gt;
&lt;h2 id=&#34;响应时延&#34;&gt;响应时延&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;服务为什么响应慢&lt;/strong&gt;？？？首先，我们需要一种方式来度量何为响应慢，参考 Google 在 SRE Handbook 中提到过&lt;code&gt;4 个黄金信号&lt;/code&gt;及 Weave Cloud 提出来的 &lt;code&gt;RED 方法&lt;/code&gt;，都存在度量的指标（Latency/Duration），后文统称为&lt;code&gt;响应时延&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Latency 表达的是&lt;strong&gt;服务处理某个请求所需要的时间&lt;/strong&gt;，站在的是服务端视角&lt;/li&gt;
&lt;li&gt;Duration 表达的是&lt;strong&gt;每个请求所花费的时间&lt;/strong&gt;，站在的是客户端视角&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结下来，不论站在什么视角，&lt;code&gt;响应时延&lt;/code&gt;表达的都是处理一个请求所花费的时间，可以用来&lt;strong&gt;表征服务响应慢的度量指标&lt;/strong&gt;，但若要定位为什么响应慢还需要进一步剖解响应时延：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统时延：系统转发请求/响应的时延消耗&lt;/li&gt;
&lt;li&gt;网络时延：包含查询 DNS 时延及网络处理的时延&lt;/li&gt;
&lt;li&gt;应用时延：从不同视角来看，包含客户端应用处理时延 + 服务端应用处理时延&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-响应时延拆解&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.jpg&#34; alt=&#34;响应时延拆解&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      响应时延拆解
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;确定度量指标后，接下就可以分析服务响应慢的原因，此时可以利用&lt;strong&gt;分布式链路追踪&lt;/strong&gt;能力来快速来&lt;strong&gt;定界瓶颈点&lt;/strong&gt;，例如可利用 DeepFlow 的分布式追踪能力来快速定界瓶颈点在应用、系统还是网络。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-分布式链路追踪---火焰图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.png&#34; alt=&#34;分布式链路追踪 - 火焰图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      分布式链路追踪 - 火焰图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;完成瓶颈点定界后，则需要去查找根因。对于应用或者系统的问题，可以利用&lt;strong&gt;性能剖析（profile）继续追查根因&lt;/strong&gt;，而对应网络时延的分析，其中 DNS 时延分析是相对简单的，只需要关注请求的响应时延即可，但网络处理时延瓶颈的定位却缺少了分析的工具，接下来将主要聚焦讨论网络传输时延如何分析。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-性能剖析---火焰图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./3.jpg&#34; alt=&#34;性能剖析 - 火焰图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      性能剖析 - 火焰图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;网络时延&#34;&gt;网络时延&lt;/h2&gt;
&lt;p&gt;参考 AWS 中的定义网络时延是指网络通信中的延时，网络时延显示了数据通过网络传输所需的时间。&lt;strong&gt;讨论网络时延如何，也是需要可度量的指标&lt;/strong&gt;，AWS 也指定了使用“首字节时间”和“往返时间”等指标来衡量网络时延，这两个指标是可以适用于所有网络协议的传输时延的度量，但实际应用 80% 都使用的 TCP 协议，对于 TCP 协议是需要更细粒度的度量指标，下文通过图文的形式，详细的介绍目前可用的度量指标及用法。&lt;/p&gt;
&lt;p&gt;TCP 协议是面向连接的传输层通信协议，对其详细的通信过程分析，时延可分为三大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建连时产生的时延
&lt;ul&gt;
&lt;li&gt;[1] 完整的&lt;code&gt;建连时延&lt;/code&gt;包含客户端发出 SYN 包到收到服务端回复的 SYN+ACK 包，并再次回复 ACK 包的整个时间。建连时延拆解开又可分为&lt;code&gt;客户端建连时延&lt;/code&gt;与&lt;code&gt;服务端建连时延&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;code&gt;客户端建连时延&lt;/code&gt;为客户端收到 SYN+ACK 包后，回复 ACK 包的时间&lt;/li&gt;
&lt;li&gt;[3] &lt;code&gt;服务端建连时延&lt;/code&gt;为服务端收到 SYN 包后，回复 SYN+ACK 包的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据通信时产生的时延，可拆解为&lt;code&gt;客户端等待时延&lt;/code&gt;+&lt;code&gt;数据传输时延&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;[4] &lt;code&gt;客户端等待时延&lt;/code&gt;为建连成功后，客户端首次发送请求的时间；为收到服务端的数据包后，客户端再发起数据包的时间&lt;/li&gt;
&lt;li&gt;[5] &lt;code&gt;数据传输时延&lt;/code&gt;为客户端发送数据包到收到服务端回复数据包的时间&lt;/li&gt;
&lt;li&gt;[6] 在数据传输时延中还会产生系统协议栈的处理时延，称为&lt;code&gt;系统时延&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;断连时产生的时延：因为断连的时延并不影响到应用的响应时延，因此并不会单独统计此部分使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-tcp-网络时延解剖&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./4.jpg&#34; alt=&#34;TCP 网络时延解剖&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      TCP 网络时延解剖
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;度量的网络时延的指标已经拆解好了，接下来讨论在哪里采集指标&lt;/strong&gt;，网络的报文将在客户端，各种虚拟和物理网络与服务端之间穿梭，因此可报文穿梭的位置点来采集，后续统称为&lt;code&gt;统计位置&lt;/code&gt;。当然统计位置越多，定位网络的瓶颈路径越快，但是统计位置多则随之带来的计算量也是成倍增加，企业在有成本压力时，建议在重要节点进行采集即可，比如 K8s Pod 虚拟网卡、K8s Node 网卡、云服务器网卡、网关（如 LVS/Nginx 等）网卡、硬件防火墙/负载均衡器前后&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-统计位置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./5.jpg&#34; alt=&#34;统计位置&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      统计位置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;分析到这，&lt;strong&gt;基本已经清晰网络时延的详细的度量指标了，回过头结合响应时延再讨论下如何查看网络时延对其的影响&lt;/strong&gt;，基本可以分两种情况讨论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用发起请求为短连接&lt;/strong&gt;：此时分析网络时延需要查看 &lt;strong&gt;DNS 时延 + 建连时延 + 客户端等待时延 + 数据传输时延 + 系统时延&lt;/strong&gt;，则可快速定位时延发生的具体原因了。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DNS 时延高&lt;/strong&gt;，结合统计位置，则可回答是&lt;strong&gt;网络传输时延高&lt;/strong&gt;还是&lt;strong&gt;DNS 服务响应慢&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建连时延高&lt;/strong&gt;，结合客户端建连时延 + 服务端建连时延 + 统计位置，则可回答是&lt;strong&gt;网络传输时延高&lt;/strong&gt;还是&lt;strong&gt;客户端系统回复慢&lt;/strong&gt;还是&lt;strong&gt;服务端处理建连响应慢&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端等待时延高&lt;/strong&gt;，结合统计位置，则可回答是&lt;strong&gt;网络传输时延高&lt;/strong&gt;还是&lt;strong&gt;客户端请求发送延迟&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据传输时延高&lt;/strong&gt;，结合统计位置，则可回答是&lt;strong&gt;网络传输时延高&lt;/strong&gt;还是&lt;strong&gt;服务端响应慢&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统时延高&lt;/strong&gt;，结合统计位置，则可回答&lt;strong&gt;网络传输时延高&lt;/strong&gt;还是&lt;strong&gt;服务端协议栈处理慢&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用发起请求为长连接&lt;/strong&gt;：因为长连接是保持长期活动的 HTTP 连接，不需要考虑 DNS 查询与建连的时延消耗，只需要关注&lt;strong&gt;客户端等待时延 + 数据传输时延 + 系统时延&lt;/strong&gt;即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;案例分析&#34;&gt;案例分析&lt;/h2&gt;
&lt;p&gt;限于笔者时间限制又想早点将&lt;strong&gt;应用响应时延背后深藏的网络时延&lt;/strong&gt;剖解分享给大家，本文不继续补充实际案例，将在一周后分享在某 xx 智能终端公司的如何结合 DeepFlow 在&lt;strong&gt;服务响应慢时，网络团队在存在可观测性的时延数据时，如何硬气回怼。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;什么是-deepflow&#34;&gt;什么是 DeepFlow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/deepflowys/deepflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow&lt;/a&gt; 是一款开源的高度自动化的可观测性平台，是为云原生应用开发者建设可观测性能力而量身打造的全栈、全链路、高性能数据引擎。DeepFlow 使用 eBPF、WASM、OpenTelemetry 等新技术，创新的实现了 AutoTracing、AutoMetrics、AutoTagging、SmartEncoding 等核心机制，帮助开发者提升埋点插码的自动化水平，降低可观测性平台的运维复杂度。利用 DeepFlow 的可编程能力和开放接口，开发者可以快速将其融入到自己的可观测性技术栈中。&lt;/p&gt;
&lt;p&gt;GitHub 地址：https://github.com/deepflowys/deepflow&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://deepflow.yunshan.net/docs/zh/install/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow Demo&lt;/a&gt;，体验高度自动化的可观测性新时代。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/what-is/latency/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://aws.amazon.com/cn/what-is/latency/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/22026261&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/22026261&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.to/aws/why-are-services-slow-sometimes-mn3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/aws/why-are-services-slow-sometimes-mn3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-promql-best-praticase&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/promql/prometheus-promql-best-praticase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/what-is/latency/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://aws.amazon.com/what-is/latency/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>可观测性实战：快速定位 K8s 应用故障</title>
      <link>https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/</link>
      <pubDate>Tue, 14 Feb 2023 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/</guid>
      <description>&lt;p&gt;故障发生在 2023 春节前两天，DeepFlow 团队内部访问工单系统出现问题，影响了所有北京区的同事，这篇文章将详细记录如何利用 DeepFlow 定位到对这次问题根因（网关 MSS 误变更导致报文大于 MTU，大数据报文被丢弃）。&lt;/p&gt;
&lt;h2 id=&#34;背景介绍&#34;&gt;背景介绍&lt;/h2&gt;
&lt;p&gt;工单系统是 DeepFlow 团队自主研发的一个跟踪工单的内部工具，部署在阿里公有云的容器服务（ACK）中，工单系统通过 Ingress 的方式对外提供服务，办公区与阿里云通过 VPN 连接，因此办公区可以直接使用域名访问工单系统。在&lt;a href=&#34;https://deepflow.yunshan.net/blog/020-k8s-service-exception-troubleshooting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《K8s 服务异常排障过程全解密》&lt;/a&gt;文中对 K8s 访问方式做过总结，工单系统是比较典型的&lt;code&gt;方式三&lt;/code&gt;的访问形式&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-集群外客户端通过-ingress-访问集群内服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;集群外客户端通过 Ingress 访问集群内服务&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/1_hu3eb7482df3b531df42fb90370a58ba89_133175_c7a3401f10a291649313fded591db22c.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/1_hu3eb7482df3b531df42fb90370a58ba89_133175_04629858c3e08170fa90814a5f01cd67.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/1_hu3eb7482df3b531df42fb90370a58ba89_133175_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/1_hu3eb7482df3b531df42fb90370a58ba89_133175_c7a3401f10a291649313fded591db22c.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      集群外客户端通过 Ingress 访问集群内服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下图是通过 DeepFlow 自动绘制的访问拓扑图，可以看出北京和广州办公区都是通过 Ingress 的形式来访问工单的入口服务 (ticket_web)。工单系统部署在基础服务的容器集群上，此容器集群所有的 Node 上都已经部署了 deepflow-agent，因此可以自动采集所有 POD 及 Node 的网络/系统/应用相关的数据，其中就包括阿里云 nginx-ingress-controller 服务对应的 POD 以及应用的 POD&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-工单系统访问拓扑&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;工单系统访问拓扑&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/3_hu510af6b4939069d4fbcb42aaef55c512_87502_74da9d07bdbda2060ae3cff6c1814b15.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/3_hu510af6b4939069d4fbcb42aaef55c512_87502_9589d48a658ee580e295314b6ae1bd62.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/3_hu510af6b4939069d4fbcb42aaef55c512_87502_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/3_hu510af6b4939069d4fbcb42aaef55c512_87502_74da9d07bdbda2060ae3cff6c1814b15.webp&#34;
               width=&#34;760&#34;
               height=&#34;358&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      工单系统访问拓扑
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;排障过程&#34;&gt;排障过程&lt;/h2&gt;
&lt;p&gt;下午 3:00 左右，陆续收到同事反馈，工单系统加载不出来，首先和工单系统研发明确，并未做过任何变更&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-故障现场&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;故障现场&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/4_hua2762a2b97262cf132e4a3b8ab602aac_164728_2c2603d2326172a0d073427e99de744f.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/4_hua2762a2b97262cf132e4a3b8ab602aac_164728_fffc07213cfd8c26940a8c1331b051f4.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/4_hua2762a2b97262cf132e4a3b8ab602aac_164728_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/4_hua2762a2b97262cf132e4a3b8ab602aac_164728_2c2603d2326172a0d073427e99de744f.webp&#34;
               width=&#34;760&#34;
               height=&#34;254&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      故障现场
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;依据&lt;a href=&#34;https://deepflow.yunshan.net/blog/020-k8s-service-exception-troubleshooting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《K8s 服务异常排障过程全解密》&lt;/a&gt;总结的思路&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-k8s-服务异常排障思路&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;K8s 服务异常排障思路&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/5_huf40e422bd134640ff1094c07fa49e9bb_40473_0de577ceeae3c2b2ce3f89cc2ffc48d2.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/5_huf40e422bd134640ff1094c07fa49e9bb_40473_7bb1900b5c961c0dc5653323b8732627.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/5_huf40e422bd134640ff1094c07fa49e9bb_40473_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/5_huf40e422bd134640ff1094c07fa49e9bb_40473_0de577ceeae3c2b2ce3f89cc2ffc48d2.webp&#34;
               width=&#34;760&#34;
               height=&#34;470&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      K8s 服务异常排障思路
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;查看了对应的 &lt;code&gt;Node/POD&lt;/code&gt; 负载、状态等都正常；登录到 DeepFlow 平台，调出了工单系统的访问拓扑（拓扑上标红部分表明有异常），从访问拓扑可知&lt;code&gt;后端服务&lt;/code&gt;黄金指标也都一切正常；又通过图可看出来广州办公室对工单系统的访问也并没有异常（也同步与广州同事确认，访问一切正常），可推测 &lt;code&gt;DNS/SVC&lt;/code&gt; 也应该都正常；进一步结合拓扑图，&lt;strong&gt;可看出异常仅出现在北京办公室与 nginx-ingress-controller 之间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-访问拓扑&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;访问拓扑&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/6_huc09d4efcb33aeeacf144fc79baeef54c_91852_3bffe99b02d3324f72bb239362470db1.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/6_huc09d4efcb33aeeacf144fc79baeef54c_91852_89720168effb05fc9a4b4abd6b829fa2.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/6_huc09d4efcb33aeeacf144fc79baeef54c_91852_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/6_huc09d4efcb33aeeacf144fc79baeef54c_91852_3bffe99b02d3324f72bb239362470db1.webp&#34;
               width=&#34;760&#34;
               height=&#34;330&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      访问拓扑
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;继续分析标红的路径&lt;/strong&gt;，查看对应的流日志，因为云下未部署采集器，因此仅支持查看的是 nginx-ingress-controller POD 以及 Node 的数据，发现了几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务端异常都是因为&lt;code&gt;传输-连接超时&lt;/code&gt;导致的&lt;/li&gt;
&lt;li&gt;服务端异常时，服务端 (nginx-ingress-controller) 回复的数据包，都是大包&lt;/li&gt;
&lt;li&gt;服务端异常时，服务端 (nginx-ingress-controller) 都未收到任何客户端发送的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-流日志&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;流日志&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/7_hu0306f88ea6697776af52d9ce72391ae7_84292_f7cef79e1bdc5be4df9f43e63aeb1572.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/7_hu0306f88ea6697776af52d9ce72391ae7_84292_a37303252d5c4bca730743ca668fc927.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/7_hu0306f88ea6697776af52d9ce72391ae7_84292_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/7_hu0306f88ea6697776af52d9ce72391ae7_84292_f7cef79e1bdc5be4df9f43e63aeb1572.webp&#34;
               width=&#34;760&#34;
               height=&#34;91&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      流日志
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结合以上几点发现，怀疑方向转移到 MSS/MTU 上&lt;/strong&gt;，立马咨询了 IT 同事，是不是变动过网关的 MSS/MTU 值，IT 同事否认了&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-聊天记录--01&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;聊天记录 -01&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/8_hu82ab74ef14b8e0a8332c52729a142b49_55800_278b93b38397f2112b9be36fa6cde951.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/8_hu82ab74ef14b8e0a8332c52729a142b49_55800_429765a21705f53e63351d619e893c18.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/8_hu82ab74ef14b8e0a8332c52729a142b49_55800_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/8_hu82ab74ef14b8e0a8332c52729a142b49_55800_278b93b38397f2112b9be36fa6cde951.webp&#34;
               width=&#34;760&#34;
               height=&#34;125&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      聊天记录 -01
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;既然云下部分未变动过，转而怀疑是不是 nginx-ingress-controller 动过 MSS/MTU&lt;/strong&gt;，通过&lt;code&gt;时序图&lt;/code&gt;查看 MSS 是否有变化，通过故障前后对比可知：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端在故障前后发送的 MSS 确实发生过变动，从 1280 变为了 1380&lt;/li&gt;
&lt;li&gt;服务端 (nginx-ingress-controller) MSS 值一直未变动过&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-时序图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;时序图&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/9_hubf2ef94933fc91e4f73dafca19eab66c_97010_f42038953292ae1d8572b2ee72d5533a.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/9_hubf2ef94933fc91e4f73dafca19eab66c_97010_089c486fac69e51f8dd8cc8f79623563.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/9_hubf2ef94933fc91e4f73dafca19eab66c_97010_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/9_hubf2ef94933fc91e4f73dafca19eab66c_97010_f42038953292ae1d8572b2ee72d5533a.webp&#34;
               width=&#34;760&#34;
               height=&#34;218&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      时序图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;通过数据可明确，云下一定变动过 MSS 值，拿着数据截图又去找 IT 同事，最后 IT 同事一顿找，&lt;strong&gt;明确改了 MSS 值&lt;/strong&gt;，将 MSS 值恢复后，工单系统恢复正常&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-聊天记录--02&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;聊天记录 -02&#34; srcset=&#34;
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/10_huf6a3031d370b4dc6619de1790b5b3438_81036_1cbd86ee8b560dc0ed600f47992b0979.webp 400w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/10_huf6a3031d370b4dc6619de1790b5b3438_81036_e3e49bbb75f60ba3e01553b722645480.webp 760w,
               /blog/troubleshooting-of-the-k8s-application-with-deepflow/10_huf6a3031d370b4dc6619de1790b5b3438_81036_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/troubleshooting-of-the-k8s-application-with-deepflow/10_huf6a3031d370b4dc6619de1790b5b3438_81036_1cbd86ee8b560dc0ed600f47992b0979.webp&#34;
               width=&#34;760&#34;
               height=&#34;271&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      聊天记录 -02
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;问题总结&#34;&gt;问题总结&lt;/h2&gt;
&lt;p&gt;问：&lt;strong&gt;MSS 值变动了，为什么影响了工单系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为云下的 MTU 值设置的是 1420，如果 MSS 值为 1380 + 报文头则会大于 MTU 值，因此大数据报文无法通过云下的网关，这就导致了 nginx-ingress-controller 收不到任何客户端的回应（客户端也未收到服务端的包）出现&lt;code&gt;传输-连接超时&lt;/code&gt;的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;问：&lt;strong&gt;MSS 值变动了，为什么其他内部系统未受到影响&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工单描述中包含了大量的图片和文件，因此存在传输大数据的情况，而其他系统大部分都是文字传输，所以未受到明显影响&lt;/li&gt;
&lt;li&gt;其他如 gitlab 存在图片和大文字传输的服务，并未使用 Ingress 的方式对外提供访问形式，而是利用阿里云 Terway 提供的内网直接访问 Headless 服务后端 POD 的方式，在协商 MSS 值时，后端 POD 的值为 1360（nginx-ingress-controller 的值为 1460），因此最终协商的取 1360 + 报文头则小于 MTU 值，所以也未受到明显影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是-deepflow&#34;&gt;什么是 DeepFlow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/deepflowys/deepflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow&lt;/a&gt; 是一款开源的高度自动化的可观测性平台，是为云原生应用开发者建设可观测性能力而量身打造的全栈、全链路、高性能数据引擎。DeepFlow 使用 eBPF、WASM、OpenTelemetry 等新技术，创新的实现了 AutoTracing、AutoMetrics、AutoTagging、SmartEncoding 等核心机制，帮助开发者提升埋点插码的自动化水平，降低可观测性平台的运维复杂度。利用 DeepFlow 的可编程能力和开放接口，开发者可以快速将其融入到自己的可观测性技术栈中。&lt;/p&gt;
&lt;p&gt;GitHub 地址：https://github.com/deepflowys/deepflow&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://deepflow.yunshan.net/docs/zh/install/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow Demo&lt;/a&gt;，体验高度自动化的可观测性新时代。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>可观测性场景下 Grafana Plugin 开发实战</title>
      <link>https://cloudnative.to/blog/grafana-plugins-on-cloud-observability/</link>
      <pubDate>Wed, 28 Dec 2022 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/grafana-plugins-on-cloud-observability/</guid>
      <description>&lt;p&gt;本文为云杉网络&lt;code&gt;原力释放 - 云原生可观测性分享会&lt;/code&gt;第十三期直播实录。&lt;a href=&#34;https://www.bilibili.com/video/BV1f44y1m7n8/?spm_id_from=333.788&amp;amp;vd_source=37077a01afa812c311092cba5befac7c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;回看链接&lt;/a&gt;，&lt;a href=&#34;http://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/yunshan-ticket/pdf/95b33b06763f2d05b77c18327aa38c3c_20221213150423.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PPT 下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Grafana 是目前最广泛使用的数据可视化软件之一，DeepFlow 中已有大量基于 Grafana Dashboard 解决的可观测性场景的实战分享。这些场景都是基于 DeepFlow Grafana 插件提供的查询能力来构建的。DeepFlow 社区致力于基于开源生态构建一个完整的可观测性平台，而终端呈现和数据的可视化呈现是其中的重要一环。本文对当前 DeepFlow 提供的 Grafana 插件做一个简单介绍，抛砖引玉，希望大家能了解并创造更多的 DeepFlow 可观测性生态应用，也希望能让大家掌握如何开发一套完整的 Grafana Plugin。&lt;/p&gt;
&lt;h2 id=&#34;deepflow-插件简介&#34;&gt;DeepFlow 插件简介&lt;/h2&gt;
&lt;p&gt;在最早的 DeepFlow 企业版中，我们提供了一些比较简单的 Grafana 插件。这些插件是基于 DeepFlow 企业版 API 来提供服务的，目的是为了能让用户无缝将 DeepFlow 页面中的视图在自己的 Grafana 环境中搭建起来，避免改变用户的使用习惯。在 DeepFlow 宣布开源以后，我们基于社区版重新设计了若干插件。包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data source plugin：DeepFlow Querier，用于为 Grafana 提供 DeepFlow 的数据&lt;/li&gt;
&lt;li&gt;Panel plugin：DeepFlow AppTracing，用于展示分布式追踪火焰图&lt;/li&gt;
&lt;li&gt;Panel plugin：DeepFlow Topo，用于展示服务之间的访问关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些定制化插件，配合 Grafana 原本提供的一系列标准图表，可以构建出一组完整的 DeepFlow 可观测性视图。可以前往我们的&lt;a href=&#34;https://ce-demo.deepflow.yunshan.net/d/pplication_DNS_Monitoring/application-dns-monitoring?orgId=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在线 Demo&lt;/a&gt; 快速体验。&lt;/p&gt;
&lt;h2 id=&#34;data-source-plugin&#34;&gt;Data source plugin&lt;/h2&gt;
&lt;p&gt;Grafana 的 Data source 插件是用来将数据源接入 Grafana 体系中的核心插件。DeepFlow 架构中，提供了基于 SQL 查询语句的 Querier 接口，因此我们的 Data source 插件会基于这个查询语法，来提供用户完全自由的查询。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./20221214639946e49a2f2.png&#34; alt=&#34;DeepFlow 架构&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow 架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从代码的文件结构，Data source 插件主要有如下部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ConfigEditor 是在 Grafana 中加入数据源时配置编辑模块，一般用于配置数据源本身连接方式、账户密码等。只需要实现对应的 ConfigEditor 类即可实现对应的编辑界面。&lt;/li&gt;
&lt;li&gt;QueryEditor 是构建数据源查询界面的主要模块，通过实现 QueryEditor 类即可实现编辑界面，其中可以自由引用 Grafana 自带 UI 库或者其他第三方库进行界面实现。&lt;/li&gt;
&lt;li&gt;Grafana 在 dashboard 中还可以支持变量。通过实现 VariableQueryEditor 可以实现自定义的变量动态查询，方便 dashboard 中关联使用。&lt;/li&gt;
&lt;li&gt;datasource.ts 是核心的逻辑模块，用于处理从界面接受的配置项，并从后端进行查询并对返回数据进行处理&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;zhenyu@dev202 deepflow-gui-grafana&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;$ tree deepflow-querier-datasource/src/ -L &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;deepflow-querier-datasource/src/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── components
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── ConfigEditor.tsx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── consts.ts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── datasource.ts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── img
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── index.d.ts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── module.ts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── plugin.json
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── QueryEditor.css
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── QueryEditor.tsx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── types.ts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── update-dashboards.js
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── utils
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;模块之间的关系如下图：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-插件代码结构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./202212096392dfcb09cf3.png&#34; alt=&#34;插件代码结构&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      插件代码结构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;注意其中需要在插件的 plugin.json 中配置相关的 proxy 信息，这样能让 Grafana core 中的 backendsrv 知道该如何转发去往 querier 的请求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;auth&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;url&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;{{ .JsonData.requestUrl }}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/x-www-form-urlencoded&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Bearer {{ .JsonData.token }}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从执行的数据流角度，Data source 插件中的数据流如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将用户在 QueryEditor 中输入的查询内容，构造为一个标准 JSON 结构&lt;/li&gt;
&lt;li&gt;将 JSON 化的查询条件通过 DeepFlow Querier SDK 生成一个有效的查询语句（SQL）&lt;/li&gt;
&lt;li&gt;将语句封装为 API 请求&lt;/li&gt;
&lt;li&gt;通过 plugin 的 plugin.json 中设置的 proxy 转发至 DeepFlow Querier&lt;/li&gt;
&lt;li&gt;将 DeepFlow Querier 返回的数据转换为符合 Panel 需要的数据&lt;/li&gt;
&lt;li&gt;在 Panel 中将数据可视化呈现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-数据流&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./202212096392dfec166f5.png&#34; alt=&#34;数据流&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      数据流
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中，DeepFlow Querier SDK 是一个 DeepFlow 的内部转换库，可以将标准化的 JSON 结构转换为 SQL 或者 DeepFlow APP 所需要的参数格式。&lt;/p&gt;
&lt;p&gt;上述数据流中最后一步，是将从 Querier 中获取查询到的数据，并可以将这些数据发送给 Panel 模块，用于可视化展示。&lt;/p&gt;
&lt;h2 id=&#34;deepflow-查询数据逻辑简介&#34;&gt;DeepFlow 查询数据逻辑简介&lt;/h2&gt;
&lt;p&gt;在如何将查询数据结果进行可视化展现之前，需要简单的介绍下 DeepFlow 的数据查询逻辑。&lt;/p&gt;
&lt;p&gt;DeepFlow 中的数据表，一般会分为双端表和单端表两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单端表是对单个服务或实例的统计数据，数据本身没有方向。例如某个 K8s 服务的 RED 指标数据，某个进程的网络性能指标等等。这种数据一般适合用常规的折线、柱图、表格等展示。&lt;/li&gt;
&lt;li&gt;双端表是对 A 服务到 B 服务的访问路径的统计数据，有源、目的、方向等区分。例如，&lt;code&gt;A -&amp;gt; B&lt;/code&gt; 和 &lt;code&gt;B -&amp;gt; A&lt;/code&gt; 是两条不同的数据。这种数据一般适合用拓扑图等表征访问关系的视图进行展示。目前双端表有：
&lt;ul&gt;
&lt;li&gt;flow_metrics.vtap_app_edge_port：服务之间的应用访问关系和性能指标&lt;/li&gt;
&lt;li&gt;flow_metrics.vtap_flow_edge_port：服务之间的网络访问关系和性能指标&lt;/li&gt;
&lt;li&gt;flow_log.l7_flow_log：应用调用日志&lt;/li&gt;
&lt;li&gt;flow_log.l4_flow_log：网络流日志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，DeepFlow 的存储数据和其他主流 TSDB/OLAP 也一样，所有的表都会有时间列、有 Tag 和 Metric 的区分，以及支持数据的分组聚合能力。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-分组聚合&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2022121463996a6ae21d4.png&#34; alt=&#34;分组聚合&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      分组聚合
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;图中每个小圆点代表一行数据。查询到的原始数据，经过分组后，每组中有若干条数据，再对每组数据中进行聚合计算，每个分组得到一列数据。&lt;/p&gt;
&lt;p&gt;这样的查询方式，可以很方便的查询出如下场景的数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每分钟的平均请求数 &lt;code&gt;SELECT AVG(request) ... GROUP BY INTERVAL(time, 60)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每个 K8s Pod 在每分钟中的平均 TCP 重传比率 &lt;code&gt;SELECT AVG(retrans_ratio) ... GROUP BY INTERVAL(time, 60), pod&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从 QueryEditor UI 收集到的用户输入，会通过统一模块转换为 querier 认识的 SQL 语句，或者 API 约定的参数结构。我们提供了一个 SDK &lt;code&gt;deepflow-sdk-js&lt;/code&gt;，可以按需将结构化的数据生成指定的文本输出。&lt;/p&gt;
&lt;p&gt;这个 SDK 中，会首先对结构数据补充相关的信息，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例分组转换为实例 ID 的分组，避免实例之间的重名&lt;/li&gt;
&lt;li&gt;自动增加 &lt;code&gt;node_type&lt;/code&gt;、&lt;code&gt;icon_id&lt;/code&gt; 等算子，用于附加实例的类型和对应图标等信息&lt;/li&gt;
&lt;li&gt;实现对枚举类型的自动翻译，例如 &lt;code&gt;protocol&lt;/code&gt; 会自动附加 &lt;code&gt;Enum(protocol)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自动进行别名转换，以可读的方式展示每一列数据名称&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SDK 中还会通过指定函数或者操作符的序列化，按照定制方式生成 SQL 语句。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;EQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NEQ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GTE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;formatIn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NOT_IN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;formatIn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;REGEXP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; REGEXP &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NOT_REGEXP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; NOT REGEXP &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;escape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;AS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; AS \`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;\``&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SELF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;INTERVAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`time(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;)`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;LIKE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;formatLike&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;OP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NOT_LIKE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;formatLike&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中还会对一些逻辑运算符进行自动的化简和合并。例如条件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;vm_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ab c&amp;#34; bla&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ip&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;10.1.1.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;eq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;subnet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;subnet_1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;oneOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;subnet&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;subnet_1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;subnet_2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;like&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;host.*&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;lt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;not&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;rps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;falseOp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出的条件结果为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vm_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ab c&amp;#34; bla&amp;#34;&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ip&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;10.1.1.1&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subnet&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;subnet_1&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subnet&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;subnet_1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;subnet_2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;REGEXP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;host.*&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rps&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-source-plugin-对数据的处理&#34;&gt;Data source plugin 对数据的处理&lt;/h2&gt;
&lt;p&gt;通过上面的 Data source 插件，我们已经成功从 Querier 中查询出一组数据。接下来需要将这些数据进行展示。很简单的，通过 Grafana 列表插件，我们可以得到这组数据的列表：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-数据列表&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./20221206638f00ee8300d.png&#34; alt=&#34;数据列表&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      数据列表
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;但如果我们进一步想要画出这个列表对应的折线图时，会遇到一个问题：如何将这些数据整理为折线图 Panel 所需要的数据结构呢？在折线图中，需要每条线有单独的 Series，而我们目前只有一个 &lt;code&gt;data: Record&amp;lt;string, any&amp;gt;[]&lt;/code&gt; 结构的数据。当我们需要展示多条线时，是无法画出想要的图的。&lt;/p&gt;
&lt;p&gt;因此我们在 Data source plugin 中提供了一个输出格式的转换选择，可以根据选择的 Panel 转换为不同的数据结构：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-格式化数据&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./20221206638f02880686e.png&#34; alt=&#34;格式化数据&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      格式化数据
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当选择折线图时，会把数据转换为 &lt;code&gt;data: [{time: timestamp, 组1: number}, {time: timestamp, 组2: number}, ...}]&lt;/code&gt; 的结构，这样折线图 Panel 会按组绘制出对应的折线。&lt;/p&gt;
&lt;p&gt;在数据转换时，会根据分组的 Tag 中所有可能取值进行分组。例如当分组条件为 Pod 时，就能绘制出每个 Pod 的折线：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-分组折线图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./20221206638f05a84acfc.png&#34; alt=&#34;分组折线图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      分组折线图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;组X&lt;/code&gt; 的名称，可以通过自定义的形式进行格式化：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-格式化名称&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./20221206638f062cca546.png&#34; alt=&#34;格式化名称&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      格式化名称
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同样，在选择拓扑图时，也需要对返回的数据做二次处理，将数据处理为 Panel 识别的格式。&lt;/p&gt;
&lt;h2 id=&#34;deepflow-topo-panel&#34;&gt;DeepFlow Topo panel&lt;/h2&gt;
&lt;p&gt;DeepFlow 中大量数据都在描述微服务之间的访问关系，因此需要一个流量拓扑图来进行展示这些数据。我们基于 d3.js 来构建流量拓扑，主要的考虑点为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自由度更高&lt;/li&gt;
&lt;li&gt;更能满足产品经理的各种要求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;绘制流量拓扑时，我们使用客户端优先的模式进行宽度优先搜索，将单纯的客户端节点作为第一层，然后遍历去构建出整个拓扑。&lt;/p&gt;
&lt;p&gt;在普通拓扑的基础上，我们还提供了瀑布拓扑的展现形式，可以有序的呈现拓扑各节点的关系：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-瀑布拓扑&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./20221214639943f4432ad.png&#34; alt=&#34;瀑布拓扑&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      瀑布拓扑
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;瀑布拓扑会提供额外的分组能力，能够对拓扑做二次分组：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-瀑布拓扑的二次分组能力&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./202212146399443d643ca.png&#34; alt=&#34;瀑布拓扑的二次分组能力&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      瀑布拓扑的二次分组能力
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;瀑布拓扑使用普通拓扑嵌套的方式构建，可以实现在分组聚合情况下的拓扑展示。&lt;/p&gt;
&lt;h2 id=&#34;deepflow-apptracing-panel&#34;&gt;DeepFlow AppTracing panel&lt;/h2&gt;
&lt;p&gt;AppTracing panel 用来展现应用追踪数据。这些数据是从应用访问中通过 eBPF、cBPF、OpenTelemetry 等采集到的一组结构化日志数据，有起始时间，也有从属关系。通过时间先后关系和从属关联，构建出应用访问的火焰图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-分布式追踪&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./20221214639942c884286.png&#34; alt=&#34;分布式追踪&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      分布式追踪
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;除了使用 DeepFlow AppTracing panel 来可视化应用追踪数据，我们也支持使用 Grafana Tempo 来显示 DeepFlow 的 Tracing 数据。&lt;/p&gt;
&lt;p&gt;我们设计了一个完全模拟 Grafana Tempo backend 的模块，通过实现 Tempo 的 API，可以无缝将 DeepFlow 中的统计数据注入 Tempo UI 中显示，而且不需要额外部署 Tempo 后端：&lt;/p&gt;
&lt;p&gt;DeepFlow 使用 Tempo Panel, 通过 &lt;code&gt;deepflow-server&lt;/code&gt; 替代 tempo 的 backend：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-tempo&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2022121363985b3136396.png&#34; alt=&#34;DeepFlow-Tempo&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow-Tempo
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中需要实现的 API:&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-tempo-api&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2022121363984b093583b.png&#34; alt=&#34;Tempo-API&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Tempo-API
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;deepflow-vis&#34;&gt;DeepFlow-Vis&lt;/h2&gt;
&lt;p&gt;上述的两个 Panel 插件，核心都是一组基于 d3.js 的可视化库。这些功能我们整合到一个独立的可视化库中，为 Panel 提供绘图能力。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-vis&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./202212146399428a4e867.png&#34; alt=&#34;DeepFlow-Vis&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow-Vis
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;DeepFlow-Vis 提供如下能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;元素的抽象，提供了应用层的抽象元素&lt;/li&gt;
&lt;li&gt;几何计算，提供元素本身的几何运算，并提供一些简单的布局模型&lt;/li&gt;
&lt;li&gt;提供属性和绘图元素的直接获取，调用层可以很方便的获取数据以及基础的 dom/svg 等对象，方便自行修改&lt;/li&gt;
&lt;li&gt;提供了一个独立的渲染层，可以使用不同的方式进行渲染输出，如使用 canvas 替换 svg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些能力是以一个比较松散的结构组合在一起，因此在人力有限的情况下，可以更快的实现不同需求场景下的不同适配。&lt;/p&gt;
&lt;p&gt;在此之上，提供了一些封装好的绘图，并实装在 AppTracing 和 Topo panel 中。&lt;/p&gt;
&lt;h2 id=&#34;next&#34;&gt;Next&lt;/h2&gt;
&lt;p&gt;我们计划在 DeepFlow 后续版本中，将对应的 Grafana 插件及相关库全部开源，并完成在 Grafana 官方的注册。也欢迎大家能够一起加入，丰富 DeepFlow 客观性的生态。&lt;/p&gt;
&lt;h2 id=&#34;什么是-deepflow&#34;&gt;什么是 DeepFlow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/deepflowys/deepflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow&lt;/a&gt; 是一款开源的高度自动化的可观测性平台，是为云原生应用开发者建设可观测性能力而量身打造的全栈、全链路、高性能数据引擎。DeepFlow 使用 eBPF、WASM、OpenTelemetry 等新技术，创新的实现了 AutoTracing、AutoMetrics、AutoTagging、SmartEncoding 等核心机制，帮助开发者提升埋点插码的自动化水平，降低可观测性平台的运维复杂度。利用 DeepFlow 的可编程能力和开放接口，开发者可以快速将其融入到自己的可观测性技术栈中。&lt;/p&gt;
&lt;p&gt;GitHub 地址：https://github.com/deepflowys/deepflow&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://deepflow.yunshan.net/docs/zh/install/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow Demo&lt;/a&gt;，体验高度自动化的可观测性新时代。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes 服务异常排障过程全解密</title>
      <link>https://cloudnative.to/blog/k8s-service-exception-troubleshooting/</link>
      <pubDate>Mon, 26 Dec 2022 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/k8s-service-exception-troubleshooting/</guid>
      <description>&lt;p&gt;Kubernetes（K8s）是一个用于大规模运行分布式应用和服务的开源容器编排平台。K8s 让应用发布更加快速安全，让应用部署也更加灵活，但在带来这些便利性的同时，也给应用排障增加了 K8s 平台层面的复杂度，本篇文章将以常见的服务异常入手，来详细拆解 K8s 服务访问方式，以及如何利用现有的可观测体系来对 k8s 平台和应用服务进行快速排障。&lt;/p&gt;
&lt;h2 id=&#34;服务的访问方式&#34;&gt;服务的访问方式&lt;/h2&gt;
&lt;p&gt;开启 K8s 服务异常排障过程前，须对 K8s 服务的访问路径有一个全面的了解，下面我们先介绍目前常用的 K8s 服务访问方式（不同云原生平台实现方式可能基于部署方案、性能优化等情况会存在一些差异，但是如要运维 K8s 服务，则需要在一开始就对访问方式有一个了解）。&lt;/p&gt;
&lt;p&gt;方式一：&lt;strong&gt;集群内客户端通过 ClusterIP 访问集群内服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-集群内客户端通过-clusterip-访问集群内服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;集群内客户端通过 ClusterIP 访问集群内服务&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/1_hu481a70ad7adbbda78ae05af465de7098_48788_7610414c6383d18072c9842d129cb80f.webp 400w,
               /blog/k8s-service-exception-troubleshooting/1_hu481a70ad7adbbda78ae05af465de7098_48788_c25036f0ddf217660361283c45726a74.webp 760w,
               /blog/k8s-service-exception-troubleshooting/1_hu481a70ad7adbbda78ae05af465de7098_48788_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/1_hu481a70ad7adbbda78ae05af465de7098_48788_7610414c6383d18072c9842d129cb80f.webp&#34;
               width=&#34;760&#34;
               height=&#34;572&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      集群内客户端通过 ClusterIP 访问集群内服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;访问逻辑拓扑&lt;/code&gt;来分析，集群内客户端 POD 访问的是集群内服务的 svc_name，然后在 svc 层进行 DNAT，将请求转发到对应的后端 POD。这个过程对应的&lt;code&gt;访问实现拓扑&lt;/code&gt;则要复杂不少：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;step 1: client_pod 根据 DNS 配置，请求 DNS 服务器解析 svc_name，DNS 服务器会返回 svc_name 对应的 ClusterIP&lt;/li&gt;
&lt;li&gt;step 2: client_pod 请求 ClusterIP，Node 根据 kube-proxy 配置的 IPVS/IPTABLES 完成 DNAT&lt;/li&gt;
&lt;li&gt;step 3: 根据 DNAT 的结果，Node 将请求转发给对应的 server_pod，server_pod 可能与 client_pod 在同一个 Node，也可能在不同 Node，此差异主要体现在网络转发层面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方式二：&lt;strong&gt;集群外客户端通过 NodePort 访问集群内服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-集群外客户端通过-nodeport-访问集群内服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;集群外客户端通过 NodePort 访问集群内服务&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/2_hu938b1f4c551852395b7e9ea81c8432a1_44738_bac641b6a581a541f5fc0998bb9d7600.webp 400w,
               /blog/k8s-service-exception-troubleshooting/2_hu938b1f4c551852395b7e9ea81c8432a1_44738_a374cd75c8411e42b51c06ed1492a224.webp 760w,
               /blog/k8s-service-exception-troubleshooting/2_hu938b1f4c551852395b7e9ea81c8432a1_44738_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/2_hu938b1f4c551852395b7e9ea81c8432a1_44738_bac641b6a581a541f5fc0998bb9d7600.webp&#34;
               width=&#34;760&#34;
               height=&#34;573&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      集群外客户端通过 NodePort 访问集群内服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;相比&lt;code&gt;方式一&lt;/code&gt;，&lt;code&gt;访问逻辑拓扑&lt;/code&gt;上 client 访问的区别是从 svc_name 替换为 nodeip:port。&lt;code&gt;访问实现拓扑&lt;/code&gt;主要过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;step 1: client 直接请求 svc 对外暴露的 nodeip:port，如果是 LoadBalance 类型的服务，在此之前还会访问 LB（因为并不是 K8s 服务的中的特别能力，所以此处并无特别说明），请求转发到对应的 Node 上，Node 也会根据 kube-proxy 配置的 IPVS/IPTABLES 完成 DNAT&lt;/li&gt;
&lt;li&gt;step 2: 与&lt;code&gt;方式一&lt;/code&gt;的 step 3 一致&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方式三：&lt;strong&gt;集群外客户端通过 Ingress 访问集群内服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-集群外客户端通过-ingress-访问集群内服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;集群外客户端通过 Ingress 访问集群内服务&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/3_hub91409d41c060708195a6e1d616e1f93_64647_435be17f76503b86ada92fbccaf41135.webp 400w,
               /blog/k8s-service-exception-troubleshooting/3_hub91409d41c060708195a6e1d616e1f93_64647_81d0791a09749c09b9bca8ed574a00b8.webp 760w,
               /blog/k8s-service-exception-troubleshooting/3_hub91409d41c060708195a6e1d616e1f93_64647_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/3_hub91409d41c060708195a6e1d616e1f93_64647_435be17f76503b86ada92fbccaf41135.webp&#34;
               width=&#34;760&#34;
               height=&#34;642&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      集群外客户端通过 Ingress 访问集群内服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;方式三&lt;/code&gt;相比前两种方式，引入了 Ingress 的概念，因此复杂度增加了非常多。&lt;code&gt;访问逻辑拓扑&lt;/code&gt;中外部 client 可以直接请求 url 而不是 ip 了，请求 url 会先到达 Ingress，由 Ingress 完成反向代理，转发给后端的 svc，svc 再完成 DNAT 转发给后端 POD。&lt;code&gt;访问实现拓扑&lt;/code&gt;会根据 ingress-controller 部署形式不同而有差异，ingress-controller &lt;strong&gt;非&lt;/strong&gt; hostnetwork 部署下文简称&lt;code&gt;部署模式一&lt;/code&gt;，ingress-controller hostnetwork 部署下文简称&lt;code&gt;部署模式二&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;step 1：外部 client 请求 DNS 服务器解析 url 的域名，DNS 服务会返回 ingress-controller 服务所在的 IP (如果前面有挂 LB，则访问的是 LB 的 IP，否则返回的是 ingress-controller 服务的 nodeip:port)&lt;/li&gt;
&lt;li&gt;step 2：此时&lt;code&gt;部署模式一&lt;/code&gt;，则需要按&lt;code&gt;方式二&lt;/code&gt;访问 ingress-controller（为避免画图过于复杂，未画出 ingress_controller_pod 分布在不同 Node 场景）；&lt;code&gt;部署模式二&lt;/code&gt;，请求到达 Node 后，则直接转给 ingress_controller_pod&lt;/li&gt;
&lt;li&gt;step 3：此为&lt;code&gt;部署模式一&lt;/code&gt;特有的步骤，参考&lt;code&gt;方式二&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;step 4/5/6：请求经过 ingress_controller_pod 后，已经确定需要转发的后端 svc，则按&lt;code&gt;方式一&lt;/code&gt;进行转发即可（为避免画图过于复杂，未画出 server_pod 分布在同 Node 场景）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;服务异常的排障思路&#34;&gt;服务异常的排障思路&lt;/h2&gt;
&lt;p&gt;了解服务的访问方式后，在遇到服务异常时，基于一套整体的排障思路来开展工作，更能事半功倍，接下来详细聊聊如何进行排障。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-服务异常的排障思路&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;服务异常的排障思路&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/4_huf40e422bd134640ff1094c07fa49e9bb_40473_0291e587cbf1cafc7350cd08f9f7071a.webp 400w,
               /blog/k8s-service-exception-troubleshooting/4_huf40e422bd134640ff1094c07fa49e9bb_40473_8869ac007c540fdbcbc02ea3db59e695.webp 760w,
               /blog/k8s-service-exception-troubleshooting/4_huf40e422bd134640ff1094c07fa49e9bb_40473_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/4_huf40e422bd134640ff1094c07fa49e9bb_40473_0291e587cbf1cafc7350cd08f9f7071a.webp&#34;
               width=&#34;760&#34;
               height=&#34;470&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      服务异常的排障思路
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;step 1：&lt;strong&gt;确定 Node/POD 是否异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先我们可以通过 Prometheus 提供的 Dashboard 来检查部署的实例的基础状态，通过直接查看应用的 CPU/内存/带宽等指标，确认目前部署实例的负载都在正常范围内。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-node&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;node&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/5_hu566706784b9f59bc878cfc040fba735f_150311_b138c3565cbfb4ff830167f407859af9.webp 400w,
               /blog/k8s-service-exception-troubleshooting/5_hu566706784b9f59bc878cfc040fba735f_150311_ed6d00587dcd13ab02fac7166c15a3cf.webp 760w,
               /blog/k8s-service-exception-troubleshooting/5_hu566706784b9f59bc878cfc040fba735f_150311_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/5_hu566706784b9f59bc878cfc040fba735f_150311_b138c3565cbfb4ff830167f407859af9.webp&#34;
               width=&#34;760&#34;
               height=&#34;375&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      node
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pod&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;pod&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/6_hu942c7e3d5c0eda7d62bebf0fb0be66bd_253324_87d9a7e5a16bc6a640b6a7ea20998e33.webp 400w,
               /blog/k8s-service-exception-troubleshooting/6_hu942c7e3d5c0eda7d62bebf0fb0be66bd_253324_a3d4729296bfb6da6b4b25e50e6d8d67.webp 760w,
               /blog/k8s-service-exception-troubleshooting/6_hu942c7e3d5c0eda7d62bebf0fb0be66bd_253324_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/6_hu942c7e3d5c0eda7d62bebf0fb0be66bd_253324_87d9a7e5a16bc6a640b6a7ea20998e33.webp&#34;
               width=&#34;760&#34;
               height=&#34;334&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      pod
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;step 2：&lt;strong&gt;确定后端服务是否异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后我们可以通过 DeepFlow 提供的 Dashboard 查看后端服务的黄金指标：请求、异常、时延，以快速判断目前的服务是否在正常运行。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-后端服务&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;后端服务&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/7_hu20150ddb997b6c4e490e26c855a9f332_180558_53fbbf1b4ab29615841adb71456f058e.webp 400w,
               /blog/k8s-service-exception-troubleshooting/7_hu20150ddb997b6c4e490e26c855a9f332_180558_254d048c0de9574a08a34b2bbe59ddcf.webp 760w,
               /blog/k8s-service-exception-troubleshooting/7_hu20150ddb997b6c4e490e26c855a9f332_180558_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/7_hu20150ddb997b6c4e490e26c855a9f332_180558_53fbbf1b4ab29615841adb71456f058e.webp&#34;
               width=&#34;760&#34;
               height=&#34;375&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      后端服务
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;step 3：&lt;strong&gt;确定 DNS 是否异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从前面&lt;strong&gt;服务的访问方式&lt;/strong&gt;一节可知，仅方式一/方式三的访问过程经过 DNS 服务，因此只有这两种场景才需要检查 DNS 服务是否异常，方式一和三都需要检查集群内的 DNS 服务是否异常，方式三相比方式一还需要检查 client 访问的集群外的 DNS 服务是否异常。对于 CoreDNS 本身，我们可以使用 Prometheus 提供的 Dashboard 来进行排障，对于排查应用服务访问 DNS 异常，我们可以使用 DeepFlow 提供的 Dashboard 查看 DNS 服务的请求、异常、时延指标。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-coredns&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;coredns&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/8_hu1bbad9cf56080518d08b1dfb3df3858c_157224_2d7e677784c8c2f21ed570f97e6f9477.webp 400w,
               /blog/k8s-service-exception-troubleshooting/8_hu1bbad9cf56080518d08b1dfb3df3858c_157224_e85285e315cb095d6d5b44bcdf3eb04f.webp 760w,
               /blog/k8s-service-exception-troubleshooting/8_hu1bbad9cf56080518d08b1dfb3df3858c_157224_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/8_hu1bbad9cf56080518d08b1dfb3df3858c_157224_2d7e677784c8c2f21ed570f97e6f9477.webp&#34;
               width=&#34;760&#34;
               height=&#34;405&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      coredns
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-dns&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DNS&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/9_hud610c64dc68c916a3ff56d8710dd613c_229910_a4af671e30f7a0e0aec402739e4427d3.webp 400w,
               /blog/k8s-service-exception-troubleshooting/9_hud610c64dc68c916a3ff56d8710dd613c_229910_ef86dd2b479a4d3af3233009823e167f.webp 760w,
               /blog/k8s-service-exception-troubleshooting/9_hud610c64dc68c916a3ff56d8710dd613c_229910_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/9_hud610c64dc68c916a3ff56d8710dd613c_229910_a4af671e30f7a0e0aec402739e4427d3.webp&#34;
               width=&#34;760&#34;
               height=&#34;416&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DNS
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如 DNS 服务无异常，则可直接用 ClusterIP 访问服务，如果能正常访问，那可以确定是 DNS 的问题，并且这个问题很大可能就是配置错误。&lt;/p&gt;
&lt;p&gt;step 4：&lt;strong&gt;确定 SVC 是否异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为 SVC 的功能实际是 kube-proxy 同步配置到 IPVS/IPTABLES 来实现的，所以我们可以参考 &lt;strong&gt;step 1&lt;/strong&gt; 的排查步骤，把 kube-proxy 视作应用 POD，通过 Prometheus 提供的 Dashboard 查看 kube-proxy 是否正常。&lt;/p&gt;
&lt;p&gt;如果能确定应用服务运行正常，可以尝试直接访问后端 POD，如果能正常访问，则可以继续分析 SVC 问题，很大可能是 IPVS/IPTABLES 配置错误。&lt;/p&gt;
&lt;p&gt;step 5：&lt;strong&gt;确定 Ingress 是否异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;服务访问方式&lt;/strong&gt;中方式三的场景下，如果需要检查 Ingress 的状态，可以查看基于 ingress-controller 服务的状态/负载/请求日志等构建的 Dashboard。这一类 Dashboard 除了 Prometheus/DeepFlow 有提供之外，各个 API 网关的厂商也有提供，可以用 DeepFlow + 厂商提供的 Dashboard 结合进行分析，厂商会更关注网关本身的分析，DeepFlow 则更关注全链路分析，快速定位问题点。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ingress&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;ingress&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/10_hu9ccbd2ea775c7fedf916fa65de646f87_167137_c6989549a93a7a6db09a53604f029c15.webp 400w,
               /blog/k8s-service-exception-troubleshooting/10_hu9ccbd2ea775c7fedf916fa65de646f87_167137_f7c050f291970fcb4c92470cf6435555.webp 760w,
               /blog/k8s-service-exception-troubleshooting/10_hu9ccbd2ea775c7fedf916fa65de646f87_167137_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/10_hu9ccbd2ea775c7fedf916fa65de646f87_167137_c6989549a93a7a6db09a53604f029c15.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      ingress
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;step 6：&lt;strong&gt;追踪访问路径异常点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上述排障过程，都是独立的一个个点检查，如果都没问题，则可以去追踪报障的某一次访问路径是否有异常。如果能直接定位访问路径，确认问题点就会变得更简单。比如我们发现访问路径如果存在断路，则分析断路位置即可；如果追踪的是时延高的问题，则分析追踪到的每一段路径的时延即可。访问路径需要能覆盖从应用-&amp;gt;系统-&amp;gt;网络各个层面，目前提供这样全链路追踪能力的组件不多，可以使用 DeepFlow 自动化的分布式追踪能力来进行排查。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-追踪访问路径&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;追踪访问路径&#34; srcset=&#34;
               /blog/k8s-service-exception-troubleshooting/11_hudf3e3c9a8c85b883d75e22b8e4ac7228_55618_490877f91b63daa85c756e35388ab346.webp 400w,
               /blog/k8s-service-exception-troubleshooting/11_hudf3e3c9a8c85b883d75e22b8e4ac7228_55618_248840991765891909aa57285738ea7d.webp 760w,
               /blog/k8s-service-exception-troubleshooting/11_hudf3e3c9a8c85b883d75e22b8e4ac7228_55618_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/k8s-service-exception-troubleshooting/11_hudf3e3c9a8c85b883d75e22b8e4ac7228_55618_490877f91b63daa85c756e35388ab346.webp&#34;
               width=&#34;760&#34;
               height=&#34;131&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      追踪访问路径
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;什么是-deepflow&#34;&gt;什么是 DeepFlow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/deepflowys/deepflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow&lt;/a&gt; 是一款开源的高度自动化的可观测性平台，是为云原生应用开发者建设可观测性能力而量身打造的全栈、全链路、高性能数据引擎。DeepFlow 使用 eBPF、WASM、OpenTelemetry 等新技术，创新的实现了 AutoTracing、AutoMetrics、AutoTagging、SmartEncoding 等核心机制，帮助开发者提升埋点插码的自动化水平，降低可观测性平台的运维复杂度。利用 DeepFlow 的可编程能力和开放接口，开发者可以快速将其融入到自己的可观测性技术栈中。&lt;/p&gt;
&lt;p&gt;GitHub 地址：&lt;a href=&#34;https://github.com/deepflowys/deepflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/deepflowys/deepflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://deepflow.yunshan.net/docs/zh/install/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow Demo&lt;/a&gt;，体验高度自动化的可观测性新时代。&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://deepflow.yunshan.net/docs/zh/about/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://deepflow.yunshan.net/docs/zh/about/overview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/grafana/dashboards/1860-node-exporter-full/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://grafana.com/grafana/dashboards/1860-node-exporter-full/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/grafana/dashboards/15661-1-k8s-for-prometheus-dashboard-20211010/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://grafana.com/grafana/dashboards/15661-1-k8s-for-prometheus-dashboard-20211010/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/grafana/dashboards/9614-nginx-ingress-controller/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://grafana.com/grafana/dashboards/9614-nginx-ingress-controller/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana.com/grafana/dashboards/14981-coredns/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://grafana.com/grafana/dashboards/14981-coredns/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/concepts/services-networking/service/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nginx.com/products/nginx-ingress-controller/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.nginx.com/products/nginx-ingress-controller/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/haproxytech/kubernetes-ingress#readme&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/haproxytech/kubernetes-ingress#readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service-topology/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/concepts/services-networking/service-topology/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/mp5coRHPAdx5nIfcCnPFhw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mp.weixin.qq.com/s/mp5coRHPAdx5nIfcCnPFhw&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>SkyWalking 基于 ShardingSphere-Proxy 的 MySQL-Sharding 分库分表的存储特性介绍</title>
      <link>https://cloudnative.to/blog/skywalking-shardingsphere-proxy/</link>
      <pubDate>Fri, 02 Dec 2022 10:31:33 +0800</pubDate>
      <guid>https://cloudnative.to/blog/skywalking-shardingsphere-proxy/</guid>
      <description>&lt;p&gt;Apache SkyWalking 作为一个分布式系统的应用性能监控工具，它观察服务网格中的指标、日志、痕迹和事件。其中 SkyWalking OAP 高性能的数据流处理架构能够实时处理庞大的数据流量，但是这些海量数据的存储更新和后续查询对后端存储系统带来了挑战。&lt;/p&gt;
&lt;p&gt;SkyWalking 默认已经提供了多种存储支持包括 H2、OpenSearch、ElasticSearch、MySQL、TiDB、PostgreSQL、BanyanDB。其中 MySQL 存储提供的是针对单机和单表的存储方式（MySQL 的集群能力需要自己选型提供），在面对高流量的业务系统时，监控数据的存储存在较大压力，同时影响查询性能。&lt;/p&gt;
&lt;p&gt;在 MySQL 存储基础上 SkyWalking v9.3.0 提供了一种新的存储方式 MySQL-Sharding，它提供了基于 &lt;a href=&#34;https://shardingsphere.apache.org/document/5.1.2/cn/quick-start/shardingsphere-proxy-quick-start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ShardingSphere-Proxy&lt;/a&gt; 的分库分表特性，而分库分表是关系型数据库面对大数据量处理的成熟解决方案。&lt;/p&gt;
&lt;h2 id=&#34;部署架构&#34;&gt;部署架构&lt;/h2&gt;
&lt;p&gt;SkyWalking 使用 ShardingSphere-Proxy 的部署方式如下图所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-部署架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;部署架构&#34; srcset=&#34;
               /blog/skywalking-shardingsphere-proxy/arch_hu815a4fd79c722d8c456efc77c9af09cf_29121_423803fe9dce133b026fa2ad984b2d38.webp 400w,
               /blog/skywalking-shardingsphere-proxy/arch_hu815a4fd79c722d8c456efc77c9af09cf_29121_d72d08176fce81a7e3cad4ce937ea18e.webp 760w,
               /blog/skywalking-shardingsphere-proxy/arch_hu815a4fd79c722d8c456efc77c9af09cf_29121_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/skywalking-shardingsphere-proxy/arch_hu815a4fd79c722d8c456efc77c9af09cf_29121_423803fe9dce133b026fa2ad984b2d38.webp&#34;
               width=&#34;463&#34;
               height=&#34;403&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      部署架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SkyWalking OAP 由直连数据库的方式变成只与 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ShardingSphere-Proxy&lt;/a&gt; 进行交互；&lt;/li&gt;
&lt;li&gt;每一个 MySQL 节点暴露的连接都是一个数据源，由 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ShardingSphere-Proxy&lt;/a&gt; 进行统一管理；&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ShardingSphere-Proxy&lt;/a&gt; 会根据配置建立一个虚拟逻辑数据库，根据 OAP 提供的分库分表规则进行库表分片和路由；&lt;/li&gt;
&lt;li&gt;SkyWalking OAP 负责生成分库分表规则并且像操作 MySQL 一样对虚拟逻辑库执行 DDL 和 DML；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;适用场景&#34;&gt;适用场景&lt;/h2&gt;
&lt;p&gt;希望使用 MySQL 作为存储，随着业务规模的增长，单表模式已经无法满足性能需要。&lt;/p&gt;
&lt;h2 id=&#34;skywalking-分库分表逻辑&#34;&gt;SkyWalking 分库分表逻辑&lt;/h2&gt;
&lt;p&gt;分库分表逻辑通过注解 &lt;code&gt;@SQLDatabase.Sharding&lt;/code&gt; 对 SkyWalking 中的数据模型 Model 进行定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@interface&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sharding&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;ShardingAlgorithm&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;shardingAlgorithm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dataSourceShardingColumn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;tableShardingColumn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shardingAlgorithm&lt;/code&gt;：表分片算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dataSourceShardingColumn&lt;/code&gt;：分库键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tableShardingColumn&lt;/code&gt;：分表键&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SkyWalking 根据注解 &lt;code&gt;@SQLDatabase.Sharding&lt;/code&gt; 选择分库键、分表键以及表分片算法对每个表动态生成分片规则通过 DistSQL 操作 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shardingsphere-Proxy&lt;/a&gt; 执行规则定义 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shardingsphere-Proxy&lt;/a&gt; 根据规则定义进行数据分片。&lt;/p&gt;
&lt;h3 id=&#34;分库方式&#34;&gt;分库方式&lt;/h3&gt;
&lt;p&gt;SkyWalking 对于分库采用统一的方式，路由目标库的数字后缀使用分库键的哈希值取模需要分库的数据库数量，所以路由目标库为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ds_{dataSourceShardingColumn.hashcode() % dataSourceList.size()}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如我们有 &lt;code&gt;dataSourceList = ds_0...ds_n&lt;/code&gt;，如果&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{dataSourceShardingColumn.hashcode() % dataSourceList.size() = 2}&lt;/code&gt; 那么所有数据将会路由到 &lt;code&gt;ds_2&lt;/code&gt; 这个数据源节点上。&lt;/p&gt;
&lt;h3 id=&#34;分表方式&#34;&gt;分表方式&lt;/h3&gt;
&lt;p&gt;由于 TTL 机制的存在，分表算法主要根据时间的日期进行分片，分片表的数量是根据 TTL 每天一个表：&lt;/p&gt;
&lt;p&gt;分片表名 = 逻辑表名_时间序列（日期）：&lt;code&gt;{tableName =logicTableName_timeSeries}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为保证在 TTL 有效期内的数据能够被写入和查询，时间序列将生成当前日期&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{timeSeries = currentDate - TTL +1...currentDate + 1}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如：如果 &lt;code&gt;TTL=3, currentDate = 20220907&lt;/code&gt;，则分片表为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;logicTableName_20220905
logicTableName_20220906
logicTableName_20220907
logicTableName_20220908
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;SkyWalking 提供了多种不同的分表算法用于不同的数据模型：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;算法名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;分片说明&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;分片键时间精度要求&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;典型应用数据模型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;NO_SHARDING&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不做任何表分片，保持单表模式&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数据量小无需分片的数据模型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TIME_RELATIVE_ID_SHARDING_ALGORITHM&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用 ID 列中的 &lt;code&gt;time_bucket&lt;/code&gt; 按天分片&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;time_bucket&lt;/code&gt; 的精度可以是同一表中的秒、分、小时和天&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;各类 Metrics 指标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TIME_SEC_RANGE_SHARDING_ALGORITHM&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用 &lt;code&gt;time_bucket&lt;/code&gt; 列按天分片&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;time_bucket&lt;/code&gt; 的精度必须是秒&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;SegmentRecordLogRecord&lt;/code&gt; 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TIME_MIN_RANGE_SHARDING_ALGORITHM&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用 &lt;code&gt;time_bucket&lt;/code&gt; 列按天分片&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;time_bucket&lt;/code&gt; 的精度必须是分钟&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;EndpointTraffic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;TIME_BUCKET_SHARDING_ALGORITHM&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;使用 &lt;code&gt;time_bucket&lt;/code&gt; 列按天分片&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;time_bucket&lt;/code&gt; 的精度可以是同一个表中的秒、分、小时和天&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Service、Instance、Endpoint 调用关系等如 &lt;code&gt;ServiceRelationServerSideMetrics&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ttl-机制&#34;&gt;TTL 机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于进行分片的表根据 TTL 直接删除 &lt;code&gt;deadline&lt;/code&gt; &amp;gt;= &lt;code&gt;timeSeries&lt;/code&gt; 的物理表 &lt;code&gt;{deadline = new DateTime().plusDays(-ttl)}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TTL 定时器在根据当前日期删除过期表的同时也会根据新日期更新分片规则，通知 ShardingSphere-Proxy 创建新的分片表&lt;/li&gt;
&lt;li&gt;对于单表的延续之前的方式，删除 deadline &amp;gt;= &lt;code&gt;time_bucket&lt;/code&gt; 的行记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分片数据存储示例&#34;&gt;分片数据存储示例&lt;/h2&gt;
&lt;p&gt;下面以 segment（Record 类型）和 &lt;code&gt;service_resp_time&lt;/code&gt;（Metrics 类型）两个为例说明数据存储的逻辑和物理分布。这里假设 MySQL 为 &lt;code&gt;ds_0&lt;/code&gt; 和 &lt;code&gt;ds_1&lt;/code&gt; 两个节点。&lt;/p&gt;
&lt;p&gt;注意：以下的存储表结构仅为简化后的存储示例，不表示 SkyWalking 真实的表结构。&lt;/p&gt;
&lt;h3 id=&#34;segment&#34;&gt;segment&lt;/h3&gt;
&lt;p&gt;分片配置为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.TIME_SEC_RANGE_SHARDING_ALGORITHM, dataSourceShardingColumn = service_id, tableShardingColumn = time_bucket)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;逻辑库表结构和实际库表如下图：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-逻辑表结构和实际库表-1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;逻辑表结构和实际库表 1&#34; srcset=&#34;
               /blog/skywalking-shardingsphere-proxy/f1_hu0e25c30df9960fe539dd827af53bb991_102870_897cc8a44e2070c04c010262ba613f2a.webp 400w,
               /blog/skywalking-shardingsphere-proxy/f1_hu0e25c30df9960fe539dd827af53bb991_102870_70a3913c47d6370101c88378e6c413eb.webp 760w,
               /blog/skywalking-shardingsphere-proxy/f1_hu0e25c30df9960fe539dd827af53bb991_102870_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/skywalking-shardingsphere-proxy/f1_hu0e25c30df9960fe539dd827af53bb991_102870_897cc8a44e2070c04c010262ba613f2a.webp&#34;
               width=&#34;760&#34;
               height=&#34;454&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      逻辑表结构和实际库表 1
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;service_resp_time&#34;&gt;service_resp_time&lt;/h3&gt;
&lt;p&gt;分片配置为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@SQLDatabase.Sharding(shardingAlgorithm = ShardingAlgorithm.TIME_RELATIVE_ID_SHARDING_ALGORITHM, tableShardingColumn = id, dataSourceShardingColumn = entity_id)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;逻辑库表结构和实际库表如下图：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-逻辑表结构和实际库表-2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;逻辑表结构和实际库表 2&#34; srcset=&#34;
               /blog/skywalking-shardingsphere-proxy/f2_hu56f8f64be2d7b6bc78fa401c72ede1e3_162254_937abf1689d12b2aa3ed77af9e16c3ec.webp 400w,
               /blog/skywalking-shardingsphere-proxy/f2_hu56f8f64be2d7b6bc78fa401c72ede1e3_162254_d6eb7485398f36d048824d911bac31d8.webp 760w,
               /blog/skywalking-shardingsphere-proxy/f2_hu56f8f64be2d7b6bc78fa401c72ede1e3_162254_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/skywalking-shardingsphere-proxy/f2_hu56f8f64be2d7b6bc78fa401c72ede1e3_162254_937abf1689d12b2aa3ed77af9e16c3ec.webp&#34;
               width=&#34;760&#34;
               height=&#34;696&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      逻辑表结构和实际库表 2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;如何使用&#34;&gt;如何使用&lt;/h2&gt;
&lt;p&gt;你可以选择手动或使用 Docker 来运行 Demo。&lt;/p&gt;
&lt;h3 id=&#34;手动部署&#34;&gt;手动部署&lt;/h3&gt;
&lt;p&gt;这里以单节点 SkyWalking OAP 和 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shardingsphere-Proxy 5.1.2&lt;/a&gt; 部署为例，集群部署请参考其他相关文档。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;准备好 MySQL 集群&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署安装并配置 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shardingsphere-Proxy&lt;/a&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conf/server.yaml&lt;/code&gt;，&lt;code&gt;props.proxy-hint-enabled&lt;/code&gt; 必须为 &lt;code&gt;true&lt;/code&gt;，完整配置可参考&lt;a href=&#34;https://github.com/wankai123/skywalking-mysql-sharding-demo/blob/main/shardingsphere-proxy/conf/server.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conf/config-sharding.yaml&lt;/code&gt;，配置逻辑数据库和 &lt;code&gt;dataSources&lt;/code&gt; 列表，&lt;code&gt;dataSource&lt;/code&gt; 的名称必须以 &lt;code&gt;ds_&lt;/code&gt;为前缀，并且从 &lt;code&gt;ds_0&lt;/code&gt; 开始，完整配置可参考&lt;a href=&#34;https://github.com/wankai123/skywalking-mysql-sharding-demo/blob/main/shardingsphere-proxy/conf/config-sharding.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署安装并配置 SkyWalking OAP：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 OAP 环境变量 &lt;code&gt;${SW_STORAGE:mysql-sharding}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根据实际部署情况配置连接信息： &lt;code&gt;${SW_JDBC_URL}&lt;/code&gt; &lt;code&gt;${SW_DATA_SOURCE_USER}&lt;/code&gt; &lt;code&gt;${SW_DATA_SOURCE_PASSWORD}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：连接信息需对应 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shardingsphere-Proxy&lt;/a&gt; 虚拟数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shardingsphere-Proxy&lt;/a&gt; 中 &lt;code&gt;conf/config-sharding.yaml&lt;/code&gt; 配置的数据源名称配置在 &lt;code&gt;${SW_JDBC_SHARDING_DATA_SOURCES}&lt;/code&gt; 中，用 &lt;code&gt;,&lt;/code&gt; 分割&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 MySQL 集群&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 &lt;a href=&#34;https://shardingsphere.apache.org/document/current/en/overview/#shardingsphere-proxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shardingsphere-Proxy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;启动 SkyWalking OAP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用-docker-运行-demo&#34;&gt;使用 Docker 运行 Demo&lt;/h3&gt;
&lt;p&gt;GitHub 资源库提供了一个基于 Docker 完整可运行的 demo：&lt;a href=&#34;https://github.com/wankai123/skywalking-mysql-sharding-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;skywalking-mysql-sharding-demo&lt;/a&gt;，可以快速尝试实际运行效果。&lt;/p&gt;
&lt;p&gt;其中部署包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;oap 服务 1 个，Metrics 和 Record 数据的 TTL 均设为 2 天&lt;/li&gt;
&lt;li&gt;sharding-proxy 服务 1 个版本为 5.1.2，对外端口为 13307，创建的逻辑库名称为 swtest&lt;/li&gt;
&lt;li&gt;mysql 服务 2 个，对外端口分别为 3306，3307，在 sharding-proxy 的 &lt;code&gt;conf/config-sharding.yaml&lt;/code&gt; 中配置为 &lt;code&gt;ds_0&lt;/code&gt; 和 &lt;code&gt;ds_1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;provider 服务 1 个（模拟业务程序用于验证 trace 和 metrics 等数据），对外端口为 9090&lt;/li&gt;
&lt;li&gt;consumer 服务 1 个（模拟业务程序用于验证 trace 和 metrics 等数据），对外端口为 9092&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将 Demo 程序获取到本地后，在 skywalking-mysql-sharding-demo 目录下直接运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker-compose up -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：初次启动由于拉取镜像和新建所有表可能需要一定的时间。&lt;/p&gt;
&lt;p&gt;所有服务启动完成之后可以通过数据库工具查看 &lt;code&gt;sharding-proxy&lt;/code&gt; 逻辑表创建情况，以及两个 MySQL 库中实际的物理分片表创建情况。也可以连接 &lt;code&gt;sharding-proxy&lt;/code&gt; 逻辑库 &lt;code&gt;swtest&lt;/code&gt; 查看数据查询路由情况，如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;PREVIEW&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SEGMENT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显示结果如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-查询结果&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;查询结果&#34; srcset=&#34;
               /blog/skywalking-shardingsphere-proxy/sql_hudf8b8b145dc1e45d066d968cf5301e6a_25419_4ab10b41c0f11a4a3b29b478c6c2ca0d.webp 400w,
               /blog/skywalking-shardingsphere-proxy/sql_hudf8b8b145dc1e45d066d968cf5301e6a_25419_5dcd8a017e7838a1ec3e69f3683c74c2.webp 760w,
               /blog/skywalking-shardingsphere-proxy/sql_hudf8b8b145dc1e45d066d968cf5301e6a_25419_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/skywalking-shardingsphere-proxy/sql_hudf8b8b145dc1e45d066d968cf5301e6a_25419_4ab10b41c0f11a4a3b29b478c6c2ca0d.webp&#34;
               width=&#34;760&#34;
               height=&#34;53&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      查询结果
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Demo 提供的模拟业务程序可以通过请求 consumer 服务模拟业务请求，用于验证各类型数据分布：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl http://127.0.0.1:9092/info
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在这篇文章中我们详细介绍了 SkyWalking  基于 ShardingSphere-Proxy 的 MySQL-Sharding 存储特性的部署架构、适应场景、核心分库分表逻辑以及 TTL 机制，并提供了运行后的数据存储示例和详细部署配置步骤以便大家快速理解上手。SkyWalking 提供了多种存储方式以供选择，如果你目前的需求如本文所述，欢迎使用该新特性。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>KubeCon 北美 2022 可观测性开放日见闻</title>
      <link>https://cloudnative.to/blog/kubecon-summary-of-the-open-observability-day/</link>
      <pubDate>Wed, 09 Nov 2022 09:16:27 +0800</pubDate>
      <guid>https://cloudnative.to/blog/kubecon-summary-of-the-open-observability-day/</guid>
      <description>&lt;p&gt;2022 年 10 月底，作为在底特律举行的完整 KubeCon 和 CloudNativeCon 活动之前的场外活动，&lt;a href=&#34;https://events.linuxfoundation.org/open-observability-day-north-america/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Observability Day&lt;/a&gt; 为期一天的活动首次举行。&lt;/p&gt;
&lt;p&gt;活动会场在亨廷顿广场会议中心，可以看到河对面加拿大的景色（很多人都不知道底特律离美国北部边境如此之近） 。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymecxp5ij312c0pemzi_hu7bbdd72bbd4ae47024b6a9175fd9d862_68455_e556d9341fc7b5549627cbb95594382a.webp 400w,
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymecxp5ij312c0pemzi_hu7bbdd72bbd4ae47024b6a9175fd9d862_68455_375c472d0c739e95b9cc932f9b1c800e.webp 760w,
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymecxp5ij312c0pemzi_hu7bbdd72bbd4ae47024b6a9175fd9d862_68455_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymecxp5ij312c0pemzi_hu7bbdd72bbd4ae47024b6a9175fd9d862_68455_e556d9341fc7b5549627cbb95594382a.webp&#34;
               width=&#34;760&#34;
               height=&#34;503&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Open Observability Day 的&lt;a href=&#34;https://events.linuxfoundation.org/open-observability-day-north-america/program/schedule/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;完整时间表可在线获得&lt;/a&gt;，今天我想分享一下在那里的感受。&lt;/p&gt;
&lt;p&gt;这一天以所有与开放可观测性相关的 CNCF 项目为中心，充斥了供应商和以项目为中心的演讲。&lt;/p&gt;
&lt;p&gt;活动从 CNCF 项目创始人 Bartek Płotka 的概述开始，他叙述了 Thanos、Fluntd、OpenTelemetry、Jeager 等项目的更新。然后过渡到两个简短的主题演讲。&lt;/p&gt;
&lt;h2 id=&#34;分布式追踪斗争是真实的&#34;&gt;分布式追踪：斗争是真实的&lt;/h2&gt;
&lt;p&gt;Chronosphere 的现场首席技术官 Ian Smith 分享了他在该领域从事分布式跟踪解决方案 9 年后的想法。他带我们进行了一次旋风之旅，了解了它的来源和可能的发展方向，以及围绕支持分布式跟踪的工具存在哪些技术问题。下面是他给出的 tips：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;追踪已成为高承诺、高努力、低价值的故事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他继续强调对开发人员工具的关注需要如何扭转这种局面，并开始以更少的努力和更多的价值提供一些承诺。&lt;/p&gt;
&lt;h2 id=&#34;简化可观测性&#34;&gt;简化可观测性&lt;/h2&gt;
&lt;p&gt;Calyptia 首席执行官 Eduardo Silva 分享了从创建 Fluentd 项目到专注于云原生环境的新 Fluent-bit 项目的故事。然后，他介绍了他们在构建 Fluent Bit 项目的日志空间方面的经验，以及如何扩展生态系统以支持指标和追踪，从而帮助塑造简化的用户可观测性体验。他宣布发布 Calyptia Core，使用开源工具通过数据管道收集数据，而无需使用代理。现在可以免费使用，并且可以安装到现有的 Kubernetes 集群中。他们还有一个 Docker 桌面扩展。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymizzdfhj31400u0q82_hu96c7bdee9344f5af095f768c15fa0750_104177_f1028f11fe7c8eae5e817a19b1c5f7ee.webp 400w,
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymizzdfhj31400u0q82_hu96c7bdee9344f5af095f768c15fa0750_104177_265cbf260b3da91279fe89273b654e8c.webp 760w,
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymizzdfhj31400u0q82_hu96c7bdee9344f5af095f768c15fa0750_104177_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymizzdfhj31400u0q82_hu96c7bdee9344f5af095f768c15fa0750_104177_f1028f11fe7c8eae5e817a19b1c5f7ee.webp&#34;
               width=&#34;760&#34;
               height=&#34;570&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;两个主题演讲都很短，只有 10 分钟，之后主要演讲开始了。&lt;/p&gt;
&lt;h2 id=&#34;使用-fluent-bit-构建可观测性管道&#34;&gt;使用 Fluent Bit 构建可观测性管道&lt;/h2&gt;
&lt;p&gt;LinkedIn 的 Chao Xu 谈到了他们如何从现有的可观测性管道封闭工具过渡到开源和开放标准。他们主要使用 Fluent Bit 和 Open Telemetry。他们还将语言工具从 Java 应用程序扩展到 Go、C++ 和 Python。他们将跟踪和日志整合到单个管道中，而不是单独的数据管道中，从而创建更简单的维护标准和更少的资源负载。他们是 OTEL 收集器的忠实信徒，但他们将其扩展为新扩展的可观测性代理，以支持数据转换和过滤以及 OTEL 数据流的摄取。LinkedIn 也非常喜欢 Fluent Bit 提供的用于处理各种数据流的增强标签管理。&lt;/p&gt;
&lt;h2 id=&#34;为什么大规模可观测性需要图&#34;&gt;为什么大规模可观测性需要图&lt;/h2&gt;
&lt;p&gt;SquaredUp 的 Richard Benwell 深入研究了可观测性 Wikipedia 页面，这是一种相当有趣的方式来尝试构建我们所说的可观测性的基础。他用它来表明我们有带有指标、日志和跟踪的信号，但是我们在当前的可观测性平台中缺少我们的系统模型。这个演讲假设没有模型，信号是无用的。他继续使用架构作为我们正在收集的指标、日志和跟踪的模型。这就引出了一个问题：你是否需要架构师来设计模型，或者你是否只是像跟踪工具那样生成模型？此外，该模型很好（它有助于理解），但你需要能够深入了解你正在收集和建模的数据的含义。然后演讲深入到我们大学都学习过的图入门课程，从顶点到边到顶点类型的故事。它唤起了人们对数学课程和人工智能领域建模的美好回忆，以解决医疗诊断等问题领域。&lt;/p&gt;
&lt;h2 id=&#34;对混沌的-kubernetes-可观测性充满信心&#34;&gt;对混沌的 Kubernetes 可观测性充满信心&lt;/h2&gt;
&lt;p&gt;来自 GitLab 的 Michael Friedrich 分享了我们如何从运行云原生环境转变为使用 Prometheus、Perces、Graphans 等 CNCF 项目监控。现在我们被所有传入的数据所淹没，这不是一个新概念。所以现在我们有了这个，他分享了一些关于故意破坏事物的想法，以了解它的行为、监控和恢复方式。他强调了 Chaos Mesh 项目，这是一个有趣的想法，即如何查看整个环境将如何响应问题。演讲以 Chaos Mesh 使用的现场演示结束。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymp1ajxmj30u0140dkm_hu55e7a9c2caf813b11b487f5d3082bf53_106953_4ea948f3afeaaf963ff75188abd9d883.webp 400w,
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymp1ajxmj30u0140dkm_hu55e7a9c2caf813b11b487f5d3082bf53_106953_f0042cd64caf60003febef030190c565.webp 760w,
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymp1ajxmj30u0140dkm_hu55e7a9c2caf813b11b487f5d3082bf53_106953_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymp1ajxmj30u0140dkm_hu55e7a9c2caf813b11b487f5d3082bf53_106953_4ea948f3afeaaf963ff75188abd9d883.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;午餐前后有几个闪电演讲，只有短短的 10 分钟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 FluentBit 实现云和边缘的统一可观测性&lt;/li&gt;
&lt;li&gt;通过自动发现的安全策略理解可观测性&lt;/li&gt;
&lt;li&gt;通过 OpAMP 协议管理 OpenTelemetry&lt;/li&gt;
&lt;li&gt;如何为可观测性构建数据管道&lt;/li&gt;
&lt;li&gt;eBPF 实际上可以为现代可观测性做什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下午结束了完整的分组会议：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymqtfzusj30u01407au_hu75d6465f230520d0aab548d6f476e005_128947_bd979e6f13dd6706b4ce63098926ee2f.webp 400w,
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymqtfzusj30u01407au_hu75d6465f230520d0aab548d6f476e005_128947_a0f8120cd62e486c968f5e81085ed828.webp 760w,
               /blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymqtfzusj30u01407au_hu75d6465f230520d0aab548d6f476e005_128947_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/kubecon-summary-of-the-open-observability-day/008vxvgGgy1h7ymqtfzusj30u01407au_hu75d6465f230520d0aab548d6f476e005_128947_bd979e6f13dd6706b4ce63098926ee2f.webp&#34;
               width=&#34;570&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;在-ebay-采用开放遥测收集器在飞行中换引擎&#34;&gt;在 eBay 采用开放遥测收集器：在飞行中换引擎&lt;/h2&gt;
&lt;p&gt;来自 eBay 的 Vijay Samuel 分享了从 Elastic Beats for traces 迁移到 Open Telemetry 的经验。他谈到了他们的云原生规模、遇到的问题、从 Metric Beats 到 OTEL 收集器的旅程、弥合动态配置重新加载的差距以及确保迁移后的数据奇偶性。这很有趣，他们正在招聘工程师。&lt;/p&gt;
&lt;h2 id=&#34;使用--opentelemetry-的-prometheus-管道&#34;&gt;使用  OpenTelemetry 的 Prometheus 管道&lt;/h2&gt;
&lt;p&gt;来自 Grafana Labs 和作为 Prometheus 维护者超过五年的 Goutham Veeramachaneni 分享了如何在 Prometheus 数据管道中利用 OTEL 来为你的指标基础设施添加追踪。&lt;/p&gt;
&lt;p&gt;这个概述不包括今天举行的所有会谈，但给人留下了很好的印象。我必须承认，由于在休息期间出现的网络问题，我无法跟上所有会话。有几次，我进行了深入的讨论，使我在大厅或展位上的时间比计划的休息时间更长，但这就是这些活动的目的！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>论元数据在可观测性中的重要性</title>
      <link>https://cloudnative.to/blog/the-importance-of-metadata-in-observability/</link>
      <pubDate>Mon, 07 Nov 2022 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/the-importance-of-metadata-in-observability/</guid>
      <description>&lt;p&gt;本文为云杉网络原力释放 - 云原生可观测性分享会第十一期直播实录。&lt;a href=&#34;https://mp.weixin.qq.com/s/QKb1cbqfkmhtxI8rGEtLUg?vid=1688856588389646&amp;amp;deviceid=8b31b0c6-6d71-4c84-864b-f1d468e717a1&amp;amp;version=4.0.19.6020&amp;amp;platform=win&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;回看链接&lt;/a&gt;，&lt;a href=&#34;http://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/yunshan-ticket/pdf/39efae2215f69da573b095259f8cd79f_20221027183747.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PPT 下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;大家好，我是陈晨，今天和分享的内容是《论元数据在可观测性中的重要性》，大纲为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从智能驾驶看可观测性未来发展。&lt;/li&gt;
&lt;li&gt;用开源产品构建可观测性遇到的痛点。&lt;/li&gt;
&lt;li&gt;构建内部元数据平台打通多信号关联。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那前期我们多位老师为大家分享了可观测性相关的领域知识，看到大家对&lt;strong&gt;多信号之间的关联&lt;/strong&gt;有一些疑惑，今天来和大家聊下&lt;strong&gt;元数据在可观测性多信号关联的重要性&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;从智能驾驶看可观测性未来发展&#34;&gt;从智能驾驶看可观测性未来发展&lt;/h2&gt;
&lt;p&gt;在此之前为大家解释下多信号的概念，该概念来源于 CNCF 可观测性 SIG 推出的《可观测性白皮书》一文中的译词，当然云原生社区也有我们翻译的中文版白皮书内容，欢迎大家去看往期的文章推送。那从白皮书里总结起来，多信号就是可观测性系统中各种用途不同但具备结构化、标准化数据的总称，例如我们常常听到的 logs，traces，metrics 等数据。&lt;/p&gt;
&lt;p&gt;可观测性在获取到多个信号后，会将其以静态或动态的状态放置于存储内，通过多个不同状态的信号来构建属于自己的可观测性平台，以此来缩短解决错误的时间和透视化软件服务内部的黑盒状态。在这个动态过程中，让多信号之间可以紧密的配合来反馈应用程序或 IT 部署环境的实际运行状态，就是元数据开始发挥作用的时候了。&lt;/p&gt;
&lt;p&gt;当然我们在聊元数据之前，我们先来看两张图。这两张图来源于张城老师在云原生社区 Meetup 北京站演讲的 PPT（已经征求本人同意）《云原生下的可观测性发展方向》。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-智能驾驶分级&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;智能驾驶分级&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/1_hud8fc380cc56e8e45f3952bd1c8584658_167252_f1598a827bee65a32b6775257012811d.webp 400w,
               /blog/the-importance-of-metadata-in-observability/1_hud8fc380cc56e8e45f3952bd1c8584658_167252_1d690ad4b5b61fa214d7e4f1c9ba1782.webp 760w,
               /blog/the-importance-of-metadata-in-observability/1_hud8fc380cc56e8e45f3952bd1c8584658_167252_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/1_hud8fc380cc56e8e45f3952bd1c8584658_167252_f1598a827bee65a32b6775257012811d.webp&#34;
               width=&#34;704&#34;
               height=&#34;281&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      智能驾驶分级
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面这张图是自动驾驶分级后的表现图。我们可以看到自动驾驶依据分级可分为 6 级，其中 0 - 2 级主要还是靠人工来干预，三级后开始变得无意识起来，之后开始变得更加智能化起来。&lt;/p&gt;
&lt;p&gt;下面这张图则是 IT 系统可观测性参考智能驾驶划分的六级图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-可观测性分级&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;可观测性分级&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/2_hu6ae5b2c89319351e3c581098a1035ba9_106131_e955c0447182286d8ecab7ed75992abe.webp 400w,
               /blog/the-importance-of-metadata-in-observability/2_hu6ae5b2c89319351e3c581098a1035ba9_106131_6f7f4309b0e518bab2d3a302f2c54ddf.webp 760w,
               /blog/the-importance-of-metadata-in-observability/2_hu6ae5b2c89319351e3c581098a1035ba9_106131_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/2_hu6ae5b2c89319351e3c581098a1035ba9_106131_e955c0447182286d8ecab7ed75992abe.webp&#34;
               width=&#34;760&#34;
               height=&#34;219&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      可观测性分级
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等级 0：手工分析，依靠基础的 Dashboard、告警、日志查询、分布式链路追踪等方式进行手动告警、分析，也是目前绝大部分公司使用的场景&lt;/li&gt;
&lt;li&gt;等级 1：智能告警，能够自动去扫描所有的可观测性数据，利用机器学习的方式去识别一些异常并进行自动告警，免去人工设置 / 调整各种基线告警的工作&lt;/li&gt;
&lt;li&gt;等级 2：异常关联 + 统一视图，对于自动识别的异常，能够进行上下文的关联，形成一个统一的业务视图，便于快速的定位问题&lt;/li&gt;
&lt;li&gt;等级 3：根因分析 + 问题自愈，自动根据异常以及系统的 CMDB 信息直接定位问题的根因，根因定位准确后那边可以去做问题的自愈。这一阶段相当于是一次质的飞跃，在某些场景下可以在人不用参与的情况下实现问题的自愈。&lt;/li&gt;
&lt;li&gt;等级 4：故障预测，故障发生总会有损失，所以最好的情况是避免故障的发生，因此故障预测技术可以更好的来保证系统的可靠性，利用之前积累的一些故障先兆信息做到“未卜先知”&lt;/li&gt;
&lt;li&gt;等级 5：变更影响预测，我们知道绝大部分的故障都是由变更引起的，因此如果能够模拟出每个变更对系统带来的影响以及可能产生的问题，我们就能够提前评估出是否能够允许此次变更。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然我们会有一些专业的可观测性团队已经在实践异常关联、根因分析、故障预测等能力。那我们今天以大家最常用的手工分析作为切入点来看下问题排查过程中遇到的问题。&lt;/p&gt;
&lt;h2 id=&#34;用开源产品构建可观测性遇到的痛点&#34;&gt;用开源产品构建可观测性遇到的痛点&lt;/h2&gt;
&lt;p&gt;我们在进行案例分析前来看一个图：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-链路拓扑分析&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;链路拓扑分析&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/3_hub85d1ac51092bc4206b3e75c9a85f8ce_103467_6d4119df91657ca0ecd00f0a5e9bea7c.webp 400w,
               /blog/the-importance-of-metadata-in-observability/3_hub85d1ac51092bc4206b3e75c9a85f8ce_103467_8c9ed2a6b7521390d7c7bae8de8c0999.webp 760w,
               /blog/the-importance-of-metadata-in-observability/3_hub85d1ac51092bc4206b3e75c9a85f8ce_103467_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/3_hub85d1ac51092bc4206b3e75c9a85f8ce_103467_6d4119df91657ca0ecd00f0a5e9bea7c.webp&#34;
               width=&#34;760&#34;
               height=&#34;325&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      链路拓扑分析
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;熟悉的&lt;strong&gt;拓扑分析&lt;/strong&gt;，大家一直都在考虑为用户产生一个具体的运行时应用级别的画像，可以清晰的告诉开发者我们的应用关联是怎样的，应用所依赖的中间件运行状态，我们出入口流量等。&lt;/p&gt;
&lt;p&gt;那这样的拓扑分析其实有很很多小技巧，比如我们可以构建一个静态的应用拓扑依赖分析图，也可以构建 Request Scope 级别的运行时应用拓扑分析图。那什么叫做&lt;strong&gt;静态的应用拓扑分析图&lt;/strong&gt;呢？&lt;/p&gt;
&lt;p&gt;比如我们业务应用只想知道自己依赖的上下游服务和相关联的中间件的拓扑，那这种拓扑则当业务应用开始运行时就会确定，不存在有较大的改变的可能，除非在中间件 Client 做了中间件 Server 的&lt;strong&gt;故障动态切换和转移&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那相对的&lt;strong&gt;动态的应用拓扑分析图&lt;/strong&gt;呢？就是指在 Request Scope 下的某一次请求下的应用实时拓扑分析，一般动态应用拓扑分析里面包含了运行时的一些指标数据以及关联的 Span 信息还有一些业务日志的联动。&lt;/p&gt;
&lt;p&gt;当然具体是静态拓扑还是动态拓扑，我们都需要在某一个地方获取到这些关联关系，行业优秀产品 SkyWalking 在旧版本 DashBoard 上绘制出来的链路拓扑分析图则是依赖存储中聚合到的 Span 来构建应用的关联关系，并对关键的 RED 指标做了关联，那其实相对的这种方式对存储也会有一定的压力。&lt;/p&gt;
&lt;p&gt;以 Grafana Loki 中介绍的一个典型问题排查过程来看：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-loki-demo-案例&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Loki Demo 案例&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/4_hu393fa42e05662ada17ad5af0864c43ee_252724_df84c198ac2d6a063d117e9b6bab3801.webp 400w,
               /blog/the-importance-of-metadata-in-observability/4_hu393fa42e05662ada17ad5af0864c43ee_252724_eb96427147e4a03bda50709197e73248.webp 760w,
               /blog/the-importance-of-metadata-in-observability/4_hu393fa42e05662ada17ad5af0864c43ee_252724_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/4_hu393fa42e05662ada17ad5af0864c43ee_252724_df84c198ac2d6a063d117e9b6bab3801.webp&#34;
               width=&#34;760&#34;
               height=&#34;344&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Loki Demo 案例
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们通常因为告警而感知系统出现了运行时问题（主要是 metrics，当然会有一些历史项目使用 logs），&lt;/li&gt;
&lt;li&gt;因为大盘而确定异常的模块（metrics/events）和查看一些系统性指标，&lt;/li&gt;
&lt;li&gt;通过拓扑分析/链路信息定位到问题发生的具体应用（topology/traces），&lt;/li&gt;
&lt;li&gt;然后通过应用运行时日志确定具体的细节（logs）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过多信号之间的配合完成问题的定位，有些问题的排查步骤和上述不太一致，有些许改变。但是不影响多信号之间配合发挥的重要作用。&lt;/p&gt;
&lt;p&gt;我们将上述定位问题使用到的&lt;strong&gt;信号解析到数据层面&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-数据层面的多信号&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;数据层面的多信号&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/5_hua1de0cdc9b925b40a3d64152a4136fb4_54411_2f0f4ddf388862487b9edde2b06d5113.webp 400w,
               /blog/the-importance-of-metadata-in-observability/5_hua1de0cdc9b925b40a3d64152a4136fb4_54411_d5aa46684199f92feb4ed7c900e3b3ec.webp 760w,
               /blog/the-importance-of-metadata-in-observability/5_hua1de0cdc9b925b40a3d64152a4136fb4_54411_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/5_hua1de0cdc9b925b40a3d64152a4136fb4_54411_2f0f4ddf388862487b9edde2b06d5113.webp&#34;
               width=&#34;760&#34;
               height=&#34;418&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      数据层面的多信号
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;告警：我们有基本的告警信息，包括告警内容，告警级别，告警时间以及其他一些利于定位问题的信息（行政信息、云资产信息等）。&lt;/li&gt;
&lt;li&gt;Metrics：不同的指标会有不同的 lables/tags，和告警可以匹配到一般是一组依据算子计算好的指标数据。Open Metrics 组织和 Prometheus 是这方面的专家，当然也有一些比较优秀的厂商在做这样的指标产品。&lt;/li&gt;
&lt;li&gt;Traces：各家 trace 产品大同小异，内部包含的元信息也类似。不过我们应该感谢 OTel，让这件事儿变成了标准，并让数据流管道化。&lt;/li&gt;
&lt;li&gt;Logs：logs 里会有一些和其他信号重复的数据，例如 service name, instance name, trace info 等。logs 的重点也会在他的 msg 内，一般供大家检索查询。当然也会有一些不需要检索的日志产品，Loki 是这方面的实践专家。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然可观测性也是在不断的进化，会有新的信号进来和现有的多信号配合一起来透视化软件黑盒状态和加速解决问题的进度。例如大家一直都在实践的 profiles/ dumps 等。&lt;/p&gt;
&lt;p&gt;那这些&lt;strong&gt;多信号间是如何关联的&lt;/strong&gt;呢？我们来看下一张图：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多信号关联&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;多信号关联&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/6_huc47617aed4c37840af2ab5d740d57ec6_210111_5f92ddfa4d30449af5f4e04d96933509.webp 400w,
               /blog/the-importance-of-metadata-in-observability/6_huc47617aed4c37840af2ab5d740d57ec6_210111_3cec0ae0dfa0cbec32a2e6b0b0fb24ab.webp 760w,
               /blog/the-importance-of-metadata-in-observability/6_huc47617aed4c37840af2ab5d740d57ec6_210111_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/6_huc47617aed4c37840af2ab5d740d57ec6_210111_5f92ddfa4d30449af5f4e04d96933509.webp&#34;
               width=&#34;760&#34;
               height=&#34;352&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多信号关联
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们依据时间来缩小问题定位的窗口，依据 多信号间共有的 元信息来关联多信号。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们依据  trace id 来关联 traces 和 logs 以及 metrics 的 Exemplars（是最普遍也是最有效的方式）。&lt;/li&gt;
&lt;li&gt;我们依靠埋点的 service name，instance name，span id 或者其他元信息来关联到更细节的信号（例如我们指标和指标之间的关联通过 labels/tags 中重复的元数据，业务日志通过应用信息关联到 K8s Pod metrics）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些元信息里面包括 私有云，公有云的实例信息，容器的运行时信息，应用的列表信息，中间件的连接信息，业务自埋点的信息等。但是这样我们一定就能够做到无缝连接了吗？&lt;/p&gt;
&lt;p&gt;我们来看下&lt;strong&gt;多信号关联的难点&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-多信号关联难点&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;多信号关联难点&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/7_hu0dca73ae334c2430963c153df2e3d97c_178383_a80501fd4946d51a121c672ca2db3c4c.webp 400w,
               /blog/the-importance-of-metadata-in-observability/7_hu0dca73ae334c2430963c153df2e3d97c_178383_3e4578cd61f7b69066aa8e03fa683020.webp 760w,
               /blog/the-importance-of-metadata-in-observability/7_hu0dca73ae334c2430963c153df2e3d97c_178383_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/7_hu0dca73ae334c2430963c153df2e3d97c_178383_a80501fd4946d51a121c672ca2db3c4c.webp&#34;
               width=&#34;760&#34;
               height=&#34;315&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      多信号关联难点
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;不一致的元数据&lt;/strong&gt;：我们能看到多信号关联的重点在于存在同样的元数据，但是其实垂直领域下现阶段我们使用的各家产品在元数据层面并没有达到一致，包括统一产品在不同版本迭代中也会出现 意思相同命名不同的现象，造成准确性和及时性无法保障。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺少 trace info&lt;/strong&gt;：logs, metrics, traces 关联过程最简单也是最高效的方式是通过 trace info 被打点在各个信号中，然后依据 trace info 去将多信号进行关联。但是如果应用级的 trace 中丢失了 span infos，那将会是一个灾难。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;糟糕的采样&lt;/strong&gt;：采样是一个极具争议的话题，一方面会降低存储压力，但是一方面又会影响产品功能的完整性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺失的元数据&lt;/strong&gt;：我们想从系统层面关联到应用层面，继而再通过网络关联到其他的系统层面以及网络层面，当缺失了某些元数据，对于可观测性系统来说将是灾难性的，对产品的功能有极大的影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，依据多信号内的元数据不能做到 100% 的高度关联，还需要做一些其他的工作来辅助和补充元数据，以此来大幅度提升可观测性的能力。比如统一具备&lt;strong&gt;通用性的元数据&lt;/strong&gt;打入到我们的多信号内，以此来&lt;strong&gt;增强多信号关联性&lt;/strong&gt;。但是因为打入在多信号中的元数据愈发变多，存储的压力及繁琐的工作也常常会让我们头痛。&lt;/p&gt;
&lt;h2 id=&#34;构建元数据平台打通多信号关联&#34;&gt;构建元数据平台打通多信号关联&lt;/h2&gt;
&lt;p&gt;那基于此，如果我们要构建一个健壮的可观测性平台，在这个过程中遇到的散落在各地的元数据，我们应该将他组织并利用起来，以此站在更高纬度的视角去观测我们的系统（当然元数据平台的功能不止于此）。&lt;/p&gt;
&lt;p&gt;依据维基百科中元数据的定义：元数据被定义为提供某些资料单方面或多方面信息的资料，被用来概述资料的基础信息，以简化查找过程与方便使用。&lt;/p&gt;
&lt;p&gt;IT 基础设施的元数据构建我们可以考虑以下几点：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-元数据平台能力&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;元数据平台能力&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/8_hud53cb00dc910d0e1b4d6cd7792944277_66624_569442fa550e0307acc80e18c842ada9.webp 400w,
               /blog/the-importance-of-metadata-in-observability/8_hud53cb00dc910d0e1b4d6cd7792944277_66624_ddfa55c88ca9e7bc202efbb76a72f259.webp 760w,
               /blog/the-importance-of-metadata-in-observability/8_hud53cb00dc910d0e1b4d6cd7792944277_66624_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/8_hud53cb00dc910d0e1b4d6cd7792944277_66624_569442fa550e0307acc80e18c842ada9.webp&#34;
               width=&#34;760&#34;
               height=&#34;457&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      元数据平台能力
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络级别的元数据&lt;/strong&gt;：包括我们使用的网络设施的基础数据和实际运行时挂载的运行时元数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用级别的元数据&lt;/strong&gt;：包括我们业务应用列表信息和应用关联的中间件的连接元数据信息及中间件自身的元数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统级别的元数据&lt;/strong&gt;：包括我们主机列表信息以及虚拟化容器化之后的动态元数据信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然构建这样的系统可能是一件需要持续做下去的事情，但是构建这样的元数据平台对于基础设施建设和 IT 可观测性的重要性不言而喻。那可能有人会问，我们这里的元数据和运维侧的元数据平台的区别是什么呢。&lt;/p&gt;
&lt;p&gt;一些公司内部可能会构建属于自己运维侧的元数据平台，那根据过往经验内部包含的则是一些资产信息和管理信息。我们这里的元数据平台将其归纳到系统级元数据内，并对其做了一定的补充，包括应用级元数据、网络层元数据等，但其实还缺少了行政级元数据。如果有了这样齐全的元数据信息后，这样我们做到什么能力呢。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;精准的告警直达某业务线某小组内某应用的主要开发者、测试人员和负责人，而不是告警泛滥。&lt;/li&gt;
&lt;li&gt;精准的告警直达某中间件中的某表或某队列、某交换机，继而转发至对应团队、对应负责人来处理。&lt;/li&gt;
&lt;li&gt;准确的关联关系构建，细粒度的产品角度去为不同问题筛选出不同的可观测性视角，而不是千篇一律的 DashBoard（举例 Grafana 的筛选栏）。&lt;/li&gt;
&lt;li&gt;完整的关联关系、准确无误的为高阶可观测性系统能力做铺垫，例如根因分析、错误自愈、缩容扩容自动化等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，急剧扩充的元数据会让可观测性多信号的数据暴涨，也会带来一些其他的问题，那这些问题该如何解决呢，请&lt;strong&gt;关注我们下期的直播内容&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;那其实我们今天讲的蛮浅的，从&lt;strong&gt;智能驾驶来看可观测性的发展&lt;/strong&gt;作为引入，然后我们依据一个案例来分析在这个过程中，我们&lt;strong&gt;使用开源产品遇到的多信号关联的挑战&lt;/strong&gt;，继而引出了我们构建一个这样的&lt;strong&gt;元数据平台&lt;/strong&gt;，并且需要&lt;strong&gt;维护什么样&lt;/strong&gt;的数据作为结尾，最终我们聊了下构建出这样的元数据平台为我们可观测性平台&lt;strong&gt;带来了什么样的价值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那构建 IT 的可观测性是一件复杂而又重要的事情，元数据为&lt;strong&gt;多信号之间关联&lt;/strong&gt;和&lt;strong&gt;产品的健壮性&lt;/strong&gt;带来了重要的作用。当然 OTel 为这项工作带来了不少便利，但是还会有更多的挑战在等着我们！&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DeepFlow 架构图&#34; srcset=&#34;
               /blog/the-importance-of-metadata-in-observability/9_hu59d0d34067b5af64fcc087349529f932_212777_8a1baee9296ec106f7ced150f14ba034.webp 400w,
               /blog/the-importance-of-metadata-in-observability/9_hu59d0d34067b5af64fcc087349529f932_212777_f52a1b9200a532f08ed0ab17397b49d0.webp 760w,
               /blog/the-importance-of-metadata-in-observability/9_hu59d0d34067b5af64fcc087349529f932_212777_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-importance-of-metadata-in-observability/9_hu59d0d34067b5af64fcc087349529f932_212777_8a1baee9296ec106f7ced150f14ba034.webp&#34;
               width=&#34;760&#34;
               height=&#34;331&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;最后重点来啦，&lt;strong&gt;DeepFlow&lt;/strong&gt; 作为新时代的高度自动化的可观测性平台，将为大家带来意想不到的能力。&lt;/p&gt;
&lt;p&gt;大家对我们的产品的第一印象可能是 使用了 eBPF，但是我想告诉大家的是，我们产品&lt;strong&gt;不仅仅使用了一些炫酷的技术&lt;/strong&gt;，也会有比上述更加炫酷的&lt;strong&gt;类似元数据平台的功能&lt;/strong&gt;，并且对比其他产品具备&lt;strong&gt;无侵入的高度观测能力&lt;/strong&gt;、炫酷的 AutoTagging 技术和&lt;strong&gt;大幅度降低存储压力&lt;/strong&gt;的 SmartEncoding 能力等优点，欢迎大家关注我们的 Github 和公众号来了解更多。&lt;/p&gt;
&lt;p&gt;当然刚才提到了，后面几期我们会有专题来介绍 AutoTagging 和 SmartEncoding 能力，欢迎大家预定后面的直播。&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://ce-demo.DeepFlow.yunshan.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow Online Demo&lt;/a&gt;，体验高度自动化的可观测性新时代。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudnative.to/blog/cloud-native-observability/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生下的可观测性发展方向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;维基百科中的元数据的定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E5%85%83%E6%95%B0%E6%8D%AE/1946090&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;百度百科中的元数据的定义&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>DeepFlow 开启 Kube-OVN CNI Kubernetes 集群的可观测性</title>
      <link>https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/</link>
      <pubDate>Fri, 21 Oct 2022 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/</guid>
      <description>&lt;p&gt;本文为云杉网络原力释放 - 云原生可观测性分享会第十期直播实录。&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzA3ODM4ODIzNQ==&amp;amp;mid=2650725660&amp;amp;idx=1&amp;amp;sn=941fb54698dd8602511741b79fb26f92&amp;amp;chksm=8749f078b03e796ec928cd910aa92291918cb6250f5447eb8f877d9001a64312649ef5914cba#rd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;回看链接&lt;/a&gt;，&lt;a href=&#34;http://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/yunshan-ticket/pdf/6cb85592e56e6c0764e4a2300ae00448_20221017154248.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PPT 下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;大家好，我是云杉网络 DeepFlow 的云原生工程师宋建昌，今天给大家带来的主题是《DeepFlow 在 Kube-OVN 环境的可观测实践》&lt;/p&gt;
&lt;p&gt;今天讲解的主要内容是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一：DeepFlow 高度自动化的可观测性能力；&lt;/li&gt;
&lt;li&gt;第二：DeepFlow 一键开启 Kube-OVN 的可观测性；&lt;/li&gt;
&lt;li&gt;第三：DeepFlow 在 Kube-OVN 环境下的实际应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;0x0-deepflow-高度自动化的可观测性能力&#34;&gt;0x0: DeepFlow 高度自动化的可观测性能力&lt;/h1&gt;
&lt;p&gt;为什么需要可观测性，以及可观测的概念前面几期已经讲解过了，我再简单聊一下 DeepFlow 的架构、能力，方便不太熟悉 DeepFlow 的同学快速了解 DeepFlow 的背景：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DeepFlow 架构&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/3_hud7099c99220c6bea94aff12d95ef711a_260154_05ea26c49cd40b89bac273ed00ae5d96.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/3_hud7099c99220c6bea94aff12d95ef711a_260154_57dee99ad53215bd01bd576e6947a750.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/3_hud7099c99220c6bea94aff12d95ef711a_260154_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/3_hud7099c99220c6bea94aff12d95ef711a_260154_05ea26c49cd40b89bac273ed00ae5d96.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow 架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Rust 实现的 deepflow-agent 作为 frontend 采集数据，并与 K8s apiserver 同步资源和 Label 信息；Golang 实现的 deepflow-server 作为 backend 负责管理控制、负载均摊、存储查询。我们使用 MySQL 存储元数据，使用 ClickHouse 存储观测数据并支持扩展替换，使用 Grafana 展示观测数据。目前我们还有一个 Python 实现的 DeepFlow-app 进程用于提供分布式追踪的 API，后续将会使用 Golang 重写并逐步合并到 deepflow-server 中。deepflow-server 向上提供 SQL API，我们基于此开发了 Grafana 的 DeepFlow DataSource 和拓扑、分布式追踪等 Panel。deepflow-agent 可以运行在主机或 K8s 环境下，但 deepflow-server 必须运行在 K8s 中。&lt;/p&gt;
&lt;p&gt;AutoTagging 能力。我们为 DeepFlow 的所有原生数据和集成数据都自动注入了大量的标签，使得数据关联不再有屏障、数据下钻不再有缺陷。这些标签来自云资源、K8s 资源、K8s 自定义 Label，至于和业务相关的动态标签，DeepFlow 也会以非常高效的方式完整的存储下来，支持检索和聚合。&lt;/p&gt;
&lt;p&gt;DeepFlow 基于 BPF 的 AutoMetrics 能力可自动获取每一个微服务的 API 调用在应用函数、系统函数和网络通信等全栈路径上的黄金性能指标，并通过 BPF 和 AF_PACKET/winpcap 将这些能力扩展到更广泛的 Linux 内核版本及 Windows 操作系统。
目前，DeepFlow 已经通过 eBPF 支持了主流应用协议的解析，包括 HTTP 1/2/S、Dubbo、MySQL、Redis、Kafka、MQTT、DNS，未来还将扩展更多应用协议的支持。基于 DeepFlow 的 AutoMetrics 能力，能够零侵扰的获取应用的 RED（Request、Error、Delay）指标、网络协议栈的吞吐、时延、建连异常、重传、零窗等指标。DeepFlow Agent 会维护每个 TCP 连接、每个应用协议 Request 的会话状态，称之为 Flow。所有原始性能指标数据精细至 Flow 粒度，并额外自动聚合为 1s、1min 指标数据。基于这些指标数据，我们可呈现任意服务、工作负载、API 的全栈性能数据，并可绘制任意服务之间的调用关系拓扑图 —— Universal Service Map。&lt;/p&gt;
&lt;p&gt;基于 eBPF，DeepFlow 创新的实现了零侵扰的分布式追踪。DeepFlow 将 eBPF Event、BPF Packet、Thread ID、Coroutine ID、Request 到达时序、TCP 发送时序进行关联，实现了高度自动化的分布式追踪（AutoTracing）。目前 AutoTracing 支持所有同步阻塞调用（BIO，Blocking IO）场景、部分同步非阻塞调用（NIO，Non-blocking IO）场景，支持内核线程调度（kernel-level threading (opens new window)）场景，在这些场景下支持对任意服务组成的分布式调用链进行追踪。除此之外，通过解析请求中的 X-Request-ID 等字段，也支持对采用 NIO 模式的网关（如 Envoy）前后的调用链进行追踪。&lt;/p&gt;
&lt;p&gt;以及自动采集应用调用日志和流日志的 AutoLogging 技术等。&lt;/p&gt;
&lt;p&gt;我平时经常活跃于社群里面，经常有社区同学给我反馈一些问题等，其中有小伙伴反馈说内部推荐都不知道那些点可以用来说，具体解决什么问题。不知道如何界定使用场景，这次站在解决问题这个角度，来看一下 DeepFlow 可以定位什么具体问题，怎么定位问题。&lt;/p&gt;
&lt;p&gt;第一个场景，可能某天突然有个数据库节点负载、流量的告警发过来了，怎么快速定位到哪个服务请求数据库的流量变多，哪些 SQL 突然变多，然后下一步怎么去看上游服务的 api 调用情况：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-快速定位异常-sql&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;快速定位异常 SQL&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/4_hu01342ac9df99e887ced534243a3fd0de_327167_94664da24f39f19b32396307afcf1b2d.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/4_hu01342ac9df99e887ced534243a3fd0de_327167_dd6669fa331e25183add418adafeb05e.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/4_hu01342ac9df99e887ced534243a3fd0de_327167_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/4_hu01342ac9df99e887ced534243a3fd0de_327167_94664da24f39f19b32396307afcf1b2d.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      快速定位异常 SQL
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以往这类问题单纯从数据库的角度可能不太容易得到客户端分组精确的指标数据，但是现在有了 DeepFlow 就可以在看数据去定位问题：&lt;/p&gt;
&lt;p&gt;这页 PPT 中的第一个 panel 可以看到慢查询的 SQL，找到慢请求；&lt;/p&gt;
&lt;p&gt;第二个 panel 可以看到和数据库有交互的服务请求数据库的流量大小，查找到请求流量较多的服务；&lt;/p&gt;
&lt;p&gt;第三个 panel 可以看到和数据库有交互的服务请求数量，查找到请求数量较多的服务；&lt;/p&gt;
&lt;p&gt;第四个 panel 可以看到和数据库请求 SQL 的 top 数据，查找较多的 SQL 的请求数量，进而快速找到对应的模块和相关研发；
然后切换协议到 ALL 或者 HTTP，切换 workload 到上游服务，继续排查上游服务的情况：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-快速定位上游服务异常-api&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;快速定位上游服务异常 API&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/5_hu01342ac9df99e887ced534243a3fd0de_302336_c40cab0572363eb7b4782a03bde581df.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/5_hu01342ac9df99e887ced534243a3fd0de_302336_12047331cf10639b37216c34375ecb50.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/5_hu01342ac9df99e887ced534243a3fd0de_302336_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/5_hu01342ac9df99e887ced534243a3fd0de_302336_c40cab0572363eb7b4782a03bde581df.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      快速定位上游服务异常 API
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;第二个场景，响应变慢：如何判断延迟在应用、网络、还是数据库：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-1663828883603png&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;1663828883603.png&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/6_hudecd97d24540cd84432b1178514f09e9_212516_08071ca6c46d8d1f0f3e84a222359fab.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/6_hudecd97d24540cd84432b1178514f09e9_212516_97964da7b71661bdd87fd069ec1d3c59.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/6_hudecd97d24540cd84432b1178514f09e9_212516_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/6_hudecd97d24540cd84432b1178514f09e9_212516_08071ca6c46d8d1f0f3e84a222359fab.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      1663828883603.png
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;通过一个 trace，查看 span 长度即可，图中 S 开头的是 eBPF 采集到的系统 span，N 是网络 span，A 是应用 span，最下面有两个很短的紫色的是数据库的系统 span。
我们在内核版本 4.14+的环境中会自动开启 eBPF，不需要业务进行任何插码、重启等操作，即可开启这个能力。&lt;/p&gt;
&lt;p&gt;第三个场景，业务异常：如何快速找到服务端口/接口异常：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-快速发现问题接口&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;快速发现问题接口&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/7_huf52d73fb2406b7b2133180aa9fa35462_302497_d454b880bbee2949d2d817d58dbe7ba5.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/7_huf52d73fb2406b7b2133180aa9fa35462_302497_164759a150e89c4cedca07498604a081.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/7_huf52d73fb2406b7b2133180aa9fa35462_302497_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/7_huf52d73fb2406b7b2133180aa9fa35462_302497_d454b880bbee2949d2d817d58dbe7ba5.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      快速发现问题接口
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;有同学反馈有些缓存等服务挂掉了，影响了业务的响应情况，但是又不影响业务运行，没有及时发现并响应这个问题，这个场景在 DeepFlow 中就可以通过一个统计错误响应的端口的 Dashboard，并根据端口、Pod、vm 等资源快速找到对应到节点及服务，排查端口挂掉原因，以及我们已经规划了 6.1.4 版本可以配置 Grafana 告警，也会内置一些告警策略，可以通过 Grafana 告警来等功能快速感知并响应问题。&lt;/p&gt;
&lt;p&gt;可能会有同学问为什么我部署的 DeepFlow 中没有刚刚的 Dashboard，我们目前发现了现有的 Grafana 在排障中的一些不足，我们也和 DeepFlow 的用户讨论了实际需求，正在整理相关的 Dashboard，大家也可以自己构造自己的 Dashboard，如果觉着不错也可以提交 PR 到 DeepFlow 下的 dahsboard 的 repo 中，分享给所有的 DeepFlow 用户。当然也欢迎给我们反馈你的痛点、场景，我们通过 Grafana 展示 出来 DeepFlow 的数据来解决大家的痛点。&lt;/p&gt;
&lt;h1 id=&#34;0x1-deepflow-一键开启-kube-ovn-的可观测性&#34;&gt;0x1: DeepFlow 一键开启 Kube-OVN 的可观测性&lt;/h1&gt;
&lt;p&gt;上面简单聊了一下 DeepFlow 在几个场景中如何排查问题，进入今天的主题 DeepFlow + Kube-OVN 一键可观测：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-kube-ovn-环境中快速部署-deepflow&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Kube-OVN 环境中快速部署 DeepFlow&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/9_hu96e6117869e4b600c7c8173484e33b8b_155531_307e31048ee94525ae6f6c0bfd08c2c9.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/9_hu96e6117869e4b600c7c8173484e33b8b_155531_58015b9e879306cf59572af78f8a96a3.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/9_hu96e6117869e4b600c7c8173484e33b8b_155531_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/9_hu96e6117869e4b600c7c8173484e33b8b_155531_307e31048ee94525ae6f6c0bfd08c2c9.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Kube-OVN 环境中快速部署 DeepFlow
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;正如同 PPT 中看到的这样，简单三条命令就可以将 DeepFlow 部署在 Kube-OVN 的集群中，观测你 K8s 集群上所有数据的同时又不需要业务进行任何改动、任何重启
同时我们还支持接入多集群 agent，接入云主机、传统服务器的 agent，接入 Prometheus、Telegraf 的 Metrics 数据，以及可以通过 otel-collector 接入符合 OpenTelemetry 协议的 trace 数据、Skywalking 的 trace 数据等等，对这些数据通过 AutoTagging 能力统一打上 DeepFlow 的 label，和 DeepFlow 的资源关联起来，打通数据孤岛。&lt;/p&gt;
&lt;p&gt;安装完 DeepFlow 之后，会默认内置一些 Dashboard，这里简单介绍一下这几个 Dashboard：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络可观测
&lt;ul&gt;
&lt;li&gt;Node/Pod 的流量拓扑&lt;/li&gt;
&lt;li&gt;Node/Pod 流日志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用可观测
&lt;ul&gt;
&lt;li&gt;服务性能总览&lt;/li&gt;
&lt;li&gt;微服务调用拓扑&lt;/li&gt;
&lt;li&gt;服务调用日志&lt;/li&gt;
&lt;li&gt;调用链追踪 (Distributed Tracing)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-node-流量拓扑&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Node 流量拓扑&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/11_hu1b3a0cded1c663f5237e49215fc28eb9_260395_19defa991b300ab8ea3ec6430a2eddf5.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/11_hu1b3a0cded1c663f5237e49215fc28eb9_260395_e8761d85315a5a85915c3b92a6244dc2.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/11_hu1b3a0cded1c663f5237e49215fc28eb9_260395_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/11_hu1b3a0cded1c663f5237e49215fc28eb9_260395_19defa991b300ab8ea3ec6430a2eddf5.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Node 流量拓扑
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这一个是我们的 Node 流量拓扑，可以清晰的展示出来 Node 之间、Node 和 Pod 的流量关系，以及右侧的吞吐、重传比例 建联失败比例等指标&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pod-流量拓扑&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Pod 流量拓扑&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/12_hu1b3a0cded1c663f5237e49215fc28eb9_241136_c2d32f7206f3649dc0c42c7c7c309735.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/12_hu1b3a0cded1c663f5237e49215fc28eb9_241136_b2b558765f1771bddd3dc1a79b0a86c5.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/12_hu1b3a0cded1c663f5237e49215fc28eb9_241136_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/12_hu1b3a0cded1c663f5237e49215fc28eb9_241136_c2d32f7206f3649dc0c42c7c7c309735.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Pod 流量拓扑
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;第二个是我们的 Pod 流量拓扑，可以清晰的展示出来 Pod 之间的流量关系，以及右侧的吞吐、重传 建联失败等指标&lt;/p&gt;
&lt;p&gt;把鼠标放到两个 Pod 的连线上可以看到两个 Pod 之间的指标，比如可以通过 tap_side 看出采集位置是在客户端和服务端、pps、重传、建连失败、延迟等指标&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pod-拓扑中发现的-kube-ovn-配置异常&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Pod 拓扑中发现的 Kube-OVN 配置异常&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/13_hu8e8233a050b79c95bf2c869a939c0f21_333038_a102ea80e6b60af04e3337c1a6d7963f.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/13_hu8e8233a050b79c95bf2c869a939c0f21_333038_db1b8f8e94ec28eeb1389d13e04fea73.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/13_hu8e8233a050b79c95bf2c869a939c0f21_333038_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/13_hu8e8233a050b79c95bf2c869a939c0f21_333038_a102ea80e6b60af04e3337c1a6d7963f.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Pod 拓扑中发现的 Kube-OVN 配置异常
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这里有个小插曲，我上周在做这篇 PPT 的时候，使用 sealos 一键拉起了一个 Kube-OVN、DeepFlow 的环境，但是发现 Pod 的拓扑图没有连接起来，左侧是异常的拓扑图，右侧是使用 Kube-OVN 官网脚本部署的 Kube-OVN1.8.8 版本的正常数据，稍微看一下发现所有跨节点的流量在拓扑图里展示的都是客户端节点 ovn0 网卡的 IP，而不是客户端 Pod IP，怀疑是解封装的时候源 IP 有了问题，梦馨反馈是 sealos 的部署脚本里默认把 ovn-lb 给关了，svc 路径上的处理有的地方被 NAT 了，把 kube-ovn-controller 里的 enable-lb 改成 true 应该就行了，这里也致敬一下 sealos，基于 sealos 的集群镜像功能，可以一键拉起一个部署好 Kube-OVN、DeepFlow、Helm 等应用、工具的 K8s 集群，节省了大量的时间和精力。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-node-流日志展示&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Node 流日志展示&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/14_hu1b3a0cded1c663f5237e49215fc28eb9_247877_19ab08a6ffdd25b6bc1b4e4d6f5a80dd.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/14_hu1b3a0cded1c663f5237e49215fc28eb9_247877_aa070affb2a0f6cd8c728e380a43219f.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/14_hu1b3a0cded1c663f5237e49215fc28eb9_247877_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/14_hu1b3a0cded1c663f5237e49215fc28eb9_247877_19ab08a6ffdd25b6bc1b4e4d6f5a80dd.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Node 流日志展示
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这一个是我们的 Node 流日志，可以看到 Node 之间的每个流的情况，所谓流日志是捕获特定位置的流量，将流量转化为流日志记录下来，流日志是记录捕获特定时间窗口的特定五元组的网络流。&lt;/p&gt;
&lt;p&gt;这个 Dashboard 以 Node 维度看流日志总量、错误数量、TCP 建连时延、传输时延等情况，以及每一个流的开始时间、客户端、服务端、流量采集位置、协议、客户端口、服务端口、状态、发送、接收流量大小、客户端、服务端重传、TCP 建连、传输时延等数据。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-pod-流日志&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Pod 流日志&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/15_hu1b3a0cded1c663f5237e49215fc28eb9_254710_71ffe014e95baef912c5c409c9211726.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/15_hu1b3a0cded1c663f5237e49215fc28eb9_254710_d058498b26a25e4edd806308fe7567e6.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/15_hu1b3a0cded1c663f5237e49215fc28eb9_254710_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/15_hu1b3a0cded1c663f5237e49215fc28eb9_254710_71ffe014e95baef912c5c409c9211726.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Pod 流日志
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这个 Dashboard 以 Pod 维度以看流日志总量、错误数量、TCP 建连时延、传输时延等情况，以及每一个流的开始时间、客户端、服务端、流量采集位置、协议、客户端口、服务端口、状态、发送、接收流量大小、客户端、服务端重传、TCP 建连、传输时延等数据。&lt;/p&gt;
&lt;p&gt;前面的 Dashboard 是在网络层面的统计数据，后面几个是在应用层面的统计数据：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-服务性能总览&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;服务性能总览&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/16_hu1a7000499458e4d099f0e689fe781f48_271607_366d3bdc79a69692c66a6f2c18d5c335.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/16_hu1a7000499458e4d099f0e689fe781f48_271607_0c5a95ac1842255a94807647f81aac50.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/16_hu1a7000499458e4d099f0e689fe781f48_271607_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/16_hu1a7000499458e4d099f0e689fe781f48_271607_366d3bdc79a69692c66a6f2c18d5c335.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      服务性能总览
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务性能总览：上面是有发送的请求数量、错误数量及延迟等，以及 Pod 维度的 协议分组的请求数量、客户端错误比例、服务端错误比例及延迟等：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-微服务调用总览&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;微服务调用总览&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/17_hu1a7000499458e4d099f0e689fe781f48_239546_6845642669f3efb4a30a08988244ef70.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/17_hu1a7000499458e4d099f0e689fe781f48_239546_1de2e5f2f3ea0e35d1e9c719bc4706f6.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/17_hu1a7000499458e4d099f0e689fe781f48_239546_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/17_hu1a7000499458e4d099f0e689fe781f48_239546_6845642669f3efb4a30a08988244ef70.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      微服务调用总览
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务调用拓扑，和前面 Pod 流量拓扑有什么不同呢，前面的 Pod map 是基于 4 层流量画出来的拓扑，这个是基于 7 层请求的流量画出来的，拓扑、请求、错误延迟等指标、以及区分客户端、服务端的请求、错误、延迟的指标数据：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-微服务调用日志展示&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;微服务调用日志展示&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/18_hu1a7000499458e4d099f0e689fe781f48_274311_50ad41e13a7a8b634c61f774fbc6ae2b.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/18_hu1a7000499458e4d099f0e689fe781f48_274311_609e3e7f2515cbc9c7b53a4c2db0d549.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/18_hu1a7000499458e4d099f0e689fe781f48_274311_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/18_hu1a7000499458e4d099f0e689fe781f48_274311_50ad41e13a7a8b634c61f774fbc6ae2b.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      微服务调用日志展示
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;服务调用日志，
上面有 7 层请求的总量、错误数量、延迟等指标
下面可以看到每一个应用调用的开始时间、客户端、服务端、对应的协议、方法、请求域名、请求资源、状态、响应码等数据&lt;/p&gt;
&lt;p&gt;这个就是我们的一个基于 eBPF 的 AutoTracing 能力，内核大于 4.14+ 不需要业务进行任何改动即可开启这个能力：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-调用链追踪-tracing&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;调用链追踪 (tracing)&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/19_hu1a7000499458e4d099f0e689fe781f48_230046_3254d1e41a9d2c86cc5122be8d216eef.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/19_hu1a7000499458e4d099f0e689fe781f48_230046_0734ee439cd14cb1751ec1e21fe55864.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/19_hu1a7000499458e4d099f0e689fe781f48_230046_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/19_hu1a7000499458e4d099f0e689fe781f48_230046_3254d1e41a9d2c86cc5122be8d216eef.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      调用链追踪 (tracing)
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以上所有的截图都是在 Kube-OVN 的环境中截的，安装 DeepFlow 后几分钟就能看到上面说的所有数据。&lt;/p&gt;
&lt;h1 id=&#34;0x2-deepflow-对-kube-ovn-的实际应用&#34;&gt;0x2: DeepFlow 对 Kube-OVN 的实际应用&lt;/h1&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-增强-kube-ovn-diagnose-工具的可观测能力&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DeepFlow 增强 Kube-OVN diagnose 工具的可观测能力&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/21_hu1328532474b18c80f0ad49fc1aa6fd8f_324983_a317691b087fc76405437ab6ca375b58.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/21_hu1328532474b18c80f0ad49fc1aa6fd8f_324983_08b73dbf0c55192443dd13ecda166a2a.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/21_hu1328532474b18c80f0ad49fc1aa6fd8f_324983_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/21_hu1328532474b18c80f0ad49fc1aa6fd8f_324983_a317691b087fc76405437ab6ca375b58.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow 增强 Kube-OVN diagnose 工具的可观测能力
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;diagnose 作为 Kube-OVN 的网络组件状态检查工具，可以一键检测 Kube-OVN 组件的状态、本节点、跨节点的关键服务的连通性和网络延迟情况等，可以快速获得检测数据，定位系统问题。&lt;/p&gt;
&lt;p&gt;DeepFlow 的定位是一个云原生无侵入的可观测平台，可以大幅增强 Kube-OVN 环境的可观测能力，通过丰富的数据可以画出任何想要的 Dashboard，比如前面讲到的接口/SQL 调用时延趋势图及端口的错误请求数量趋势图等，可以快速看到有问题的服务、端口、接口等，帮助快速定位到相关有问题的服务/模块，甚至可以通过 Grafana 进行告警，在出现问题的第一时间进行响应，减小损失。也可以观察整个集群/服务的当前状态，统计一个时间段内的服务响应情况等：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-增强-kube-ovn-的观测能力&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DeepFlow 增强 Kube-OVN 的观测能力&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/22_hu1328532474b18c80f0ad49fc1aa6fd8f_197800_bcadc0f26586b7a208f857d17e487a19.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/22_hu1328532474b18c80f0ad49fc1aa6fd8f_197800_8d3b5410e2ce7b619322462f4a89af3b.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/22_hu1328532474b18c80f0ad49fc1aa6fd8f_197800_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/22_hu1328532474b18c80f0ad49fc1aa6fd8f_197800_bcadc0f26586b7a208f857d17e487a19.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow 增强 Kube-OVN 的观测能力
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;流量采集位置：我们默认会在容器节点的物理网卡及容器内 eth0 网卡在节点的 veth-peer 网卡上采集 cBPF 流量，通过 eBPF 采集进程 span 信息，Kube-OVN 的默认容器网卡名称为 containerID_h
，并对流量进行关联节点、Pod 等资源，那么这个图是在同子网跨节点场景的一个架构图，实际上在跨 VPC、双栈等场景采集方式都是一样的，并没有任何区别。&lt;/p&gt;
&lt;p&gt;隧道解封装：DeepFlow 会查看所有包是否有封装，一旦看到有封装，就会进行解封装操作，目前默认开启了 vxlan 和 IPIP 隧道等解封装，也就是在容器节点的 eth0 网卡上的 Pod 流量是经过了封装的，不过我们会自动解开，并获取解封装后的流量源 IP、目标 IP 等数据关联客户端服务端的 Pod 等资源。
Kube-OVN 的 geneve 隧道如果大家用的比较多，也可以反馈给我们，我们支持一下这个协议的隧道解析。&lt;/p&gt;
&lt;p&gt;跨 Node 流量如何关联：我们的 deepflow-agent 以 daemonset 部署在所有节点上，我们通过五元组等信息可以判断到跨 Node 的同一个流，并统计在每个流量采集位置的网络吞吐到性能，再到时延多个维度的指标量。&lt;/p&gt;
&lt;p&gt;流量关联 Pod、Node 等资源：agent 会 watch K8s 集群的资源，获取 NodeIP、mac、deployment、svc、Pod 等信息，并上报给 server，通过 AutoTagging 能力对 agent 采集到的流量进行关联对应的资源，在 Grafana 上看到的流量就不是枯燥的 IP MAC 等信息了，而是 Pod、Node 等资源：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-网络通信场景追踪&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;网络通信场景追踪&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/23_hu77e9e4c9d9f4d5761caac0097ed93a8b_207026_a9248c021b38193af4c1f5df4949a010.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/23_hu77e9e4c9d9f4d5761caac0097ed93a8b_207026_d5b88ad608f39676b79ef6e44b41cb2c.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/23_hu77e9e4c9d9f4d5761caac0097ed93a8b_207026_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/23_hu77e9e4c9d9f4d5761caac0097ed93a8b_207026_a9248c021b38193af4c1f5df4949a010.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      网络通信场景追踪
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;NetworkPolicy 为 Kubernetes 提供的网络策略接口，Kube-OVN 通过 OVN 的 ACL 进行了实现。使用了 NetworkPolicy 后如果出现网络不通的情况，难以判断是网络故障问题还是 NetworkPolicy 规则设置问题导致的网络中断。Kube-OVN 提供了 NetworkPolicy 日志功能，帮助管理员快速定位 NetworkPolicy drop 规则是否命中，并记录有哪些非法访问。&lt;/p&gt;
&lt;p&gt;NetworkPolicy 日志功能一旦开启，对每个命中 drop 规则的数据包都需要打印日志，会带来额外性能开销。&lt;/p&gt;
&lt;p&gt;而 DeepFlow 虽然目前无法判断流量是被 drop 了还是网络问题，但是从 DeepFlow 的多个维度以及熟悉 K8s networkpolicy 功能的同学还是能大概判断出流量是被 networkpolicy drop 掉了，DeepFlow 也规划了流状态的功能。&lt;/p&gt;
&lt;p&gt;Kube-OVN 可以的流日志基本判断出流量是被 drop 了还是网络故障，让我想起了之前遇到的场景，研发反馈一个开发环境的一个 Namespace 下的 Pod 突然 Ping 不通了，接到问题后和研发一起开始排查，发现 Node 和除这个 Namespace 下的 Pod 网络都是通的，但是又无法解释为啥从 Node Ping 这个 NS 下的 Pod 网络不通了，然后突然发现我们容器云产品页面上的网络策略功能被打开了，这个功能藏的有些深，一般不去看这个地方，后来确认是产品不熟悉这个功能，就点了一下，但没有及时关闭导致的，现在回头想一下，如果当时有 Kube-OVN 的 networkpolicy 日志功能或者 DeepFlow，可能 10 分钟就能知道流量是被网络策略给 drop 掉了：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-自动生成网络流日志&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;自动生成网络流日志&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/24_hu89f1e3c12bdfd26e1fd6cd24b0e6e43a_362489_13b1fcf5ee707374fee9d676e4d07a41.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/24_hu89f1e3c12bdfd26e1fd6cd24b0e6e43a_362489_4f87dabc963275d2ccca6550d320fbe5.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/24_hu89f1e3c12bdfd26e1fd6cd24b0e6e43a_362489_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/24_hu89f1e3c12bdfd26e1fd6cd24b0e6e43a_362489_13b1fcf5ee707374fee9d676e4d07a41.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      自动生成网络流日志
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-网络流日志功能和-kube-ovn-networkpolicy-日志功能的差异&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DeepFlow 网络流日志功能和 Kube-OVN NetworkPolicy 日志功能的差异&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/25_hu89f1e3c12bdfd26e1fd6cd24b0e6e43a_244350_25a0d5ddbf2c1aa0902e0e7c8f0a18f2.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/25_hu89f1e3c12bdfd26e1fd6cd24b0e6e43a_244350_da9243f8fdffcc3515a9130f40a61a9b.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/25_hu89f1e3c12bdfd26e1fd6cd24b0e6e43a_244350_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/25_hu89f1e3c12bdfd26e1fd6cd24b0e6e43a_244350_25a0d5ddbf2c1aa0902e0e7c8f0a18f2.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow 网络流日志功能和 Kube-OVN NetworkPolicy 日志功能的差异
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;DeepFlow 对后端分析工具更友好，当然这个功能只在我们企业版本中有，下面是我们 DeepFlow 在流量分发功能上对 Kube-OVN 的增强：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-增强-kube-ovn-的流量分发能力&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DeepFlow 增强 Kube-OVN 的流量分发能力&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/26_hu9810aeb7c7d3bdf03533b32f81d78db8_221377_1a80da7c53f7dc7d04df0adb1f35ca48.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/26_hu9810aeb7c7d3bdf03533b32f81d78db8_221377_849ca15aaeac323bc8ed098c64f359ae.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/26_hu9810aeb7c7d3bdf03533b32f81d78db8_221377_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/26_hu9810aeb7c7d3bdf03533b32f81d78db8_221377_1a80da7c53f7dc7d04df0adb1f35ca48.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow 增强 Kube-OVN 的流量分发能力
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow-增强-kube-ovn-的流量分发能力&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DeepFlow 增强 Kube-OVN 的流量分发能力&#34; srcset=&#34;
               /blog/enable-the-observability-of-kube-ovn-cni-environment/27_hu9810aeb7c7d3bdf03533b32f81d78db8_145748_f5d21273624884fba7e070b5d054010e.webp 400w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/27_hu9810aeb7c7d3bdf03533b32f81d78db8_145748_f29a2d18e78b01cf796076cf2b5748a0.webp 760w,
               /blog/enable-the-observability-of-kube-ovn-cni-environment/27_hu9810aeb7c7d3bdf03533b32f81d78db8_145748_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/enable-the-observability-of-kube-ovn-cni-environment/27_hu9810aeb7c7d3bdf03533b32f81d78db8_145748_f5d21273624884fba7e070b5d054010e.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow 增强 Kube-OVN 的流量分发能力
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;面向业务的流量过滤&lt;/strong&gt;：用户可设置源端地址、端口号、目的端地址、端口号、协议五元组作为过滤条件，并支持直接输入 VPC、子网、云服务器、容器 Pod、自定义资源组等替代 IP 地址，精准过滤虚拟网络中的流量，最大利用网络带宽和分析工具效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源端 Payload 截断&lt;/strong&gt;：用户可设置对网包的 L4 Payload 长度进行截断，最大利用网络带宽和分析工具效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多层流量标签&lt;/strong&gt;：分发流量利用隧道封装发送，通过在隧道头中携带特殊的流量标签，用于对不同 VPC、容器服务、流量采集位置（客户端/服务端）等流量属性进行标记，以帮助后端分析工具解决 VPC 之间 IP 段冲突、容器服务后端 Pod 的 IP 地址频繁变动等问题，并实现对客户端、服务端采集流量进行端到端对比分析。
采集器支持在原始包之前添加 VXLAN 或 ERSPAN 隧道及内层 VLAN 标签，后端汇聚分流设备或 TAP 交换机仅需要做一次性的隧道解封装配置，无需根据不同的隧道标签解封装报文的 VLAN 标签，极大简化分流设备/TAP 交换机的配置复杂度和特性依赖。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流量全局去重&lt;/strong&gt;：对于同一个网包，采集器会在源端云服务器及目的端云服务器处多次采集到。当发往同一个分发点时，如果不做去重，后端分析工具将收到重复的网包，同时也会占用至少双倍的带宽。DeepFlow 引入分布式去重功能解决重复采集的问题，具体原理可查看场景介绍。
为了最大限度减少对带宽的占用，对发往同一个分发点、设置相同隧道标签的同一个网包，按所有匹配策略的最大 Payloady 截取长度进行截取。例如两条分发策略 A=Payload 截断 30、B=Payload 截断 20，对于同时匹配这两条策略的网包将会被截取 30 字节 Payload 后进行发送。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;流量多路分发&lt;/strong&gt;：当一个网包匹配的多条分发策略对应不同分发点或不同隧道标签时，流量将会复制多份分别发送。例如两条策略 A=分发点 C1、B=分发点 C2，对于同时匹配这两条策略的网包，在分发时复制两份，一份分发给 C1，一份分发给 C2。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资源变更感知&lt;/strong&gt;：当云服务器迁移、云服务器 IP 变更、容器 Pod 弹性伸缩时，分发策略自动感知，无需用户重新设置，迁移期间的流量持续分发。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;0x3-什么是-deepflow&#34;&gt;0x3: 什么是 DeepFlow&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DeepFlowys/DeepFlow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow&lt;/a&gt; 是一款开源的高度自动化的可观测性平台，是为云原生应用开发者建设可观测性能力而量身打造的全栈、全链路、高性能数据引擎。DeepFlow 使用 eBPF、WASM、OpenTelemetry 等新技术，创新的实现了 AutoTracing、AutoMetrics、AutoTagging、SmartEncoding 等核心机制，帮助开发者提升埋点插码的自动化水平，降低可观测性平台的运维复杂度。利用 DeepFlow 的可编程能力和开放接口，开发者可以快速将其融入到自己的可观测性技术栈中。&lt;/p&gt;
&lt;p&gt;GitHub 地址：https://github.com/DeepFlowys/DeepFlow&lt;/p&gt;
&lt;p&gt;访问 &lt;a href=&#34;https://ce-demo.DeepFlow.yunshan.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow Online Demo&lt;/a&gt;，体验高度自动化的可观测性新时代。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DeepFlow AutoLogging 介绍：自动采集应用调用日志和流日志</title>
      <link>https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/</link>
      <pubDate>Fri, 14 Oct 2022 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/</guid>
      <description>&lt;p&gt;本文为云杉网络&lt;code&gt;原力释放 - 云原生可观测性分享会&lt;/code&gt;第九期直播实录。&lt;a href=&#34;https://www.bilibili.com/video/BV1Z14y147XM?spm_id_from=333.337.search-card.all.click&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;回看链接&lt;/a&gt;，&lt;a href=&#34;http://yunshan-guangzhou.oss-cn-beijing.aliyuncs.com/yunshan-ticket/pdf/f9d3931bd360757b30b91d93d1aa9621_20220823171717.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PPT 下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;DeepFlow 是一款开源的高度自动化的可观测性平台，是为云原生应用开发者建设可观测性能力而量身打造的全栈、全链路、高性能数据引擎。DeepFlow 使用 eBPF、WASM、OpenTelemetry 等新技术，创新的实现了 AutoTracing、AutoMetrics、AutoTagging、SmartEncoding 等核心机制，帮助开发者提升埋点插码的自动化水平，降低可观测性平台的运维复杂度。利用 DeepFlow 的可编程能力和开放接口，开发者可以快速将其融入到自己的可观测性技术栈中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-deepflow---架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;DeepFlow - 架构图&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630472cfdd6cc_hue06b268d1457888f57ea4f3ca73b05d6_254620_8f6d2a541c399a6b731e3d0c6d92f949.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630472cfdd6cc_hue06b268d1457888f57ea4f3ca73b05d6_254620_1aad3ed8c372e8d3478ce847cb073bb6.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630472cfdd6cc_hue06b268d1457888f57ea4f3ca73b05d6_254620_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630472cfdd6cc_hue06b268d1457888f57ea4f3ca73b05d6_254620_8f6d2a541c399a6b731e3d0c6d92f949.webp&#34;
               width=&#34;760&#34;
               height=&#34;432&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      DeepFlow - 架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;今天的内容是云杉网络“云原生可观测性分享会”的直播里面第八期&lt;a href=&#34;https://deepflow.yunshan.net/blog/001-a-new-era-of-automated-observability/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DeepFlow 首个开源版本&lt;/a&gt;的分享的延续，上篇主要和大家详细聊了 AutoMetrics 和 AutoTracing 的能力，对于可观测领域三大支柱的的 Logging，在这次博客及直播中给大家带来详细讲解。&lt;/p&gt;
&lt;p&gt;今天从三个方面给大家进行分享：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一：分享应用调用日志，从数据来源、数据抽象到数据使用三个角度和大家谈谈，如何自动采集的 HTTP/MySQL 等多协议调用日志；&lt;/li&gt;
&lt;li&gt;二：分享网络流日志，主要对比公有云的流日志及流日志的应用场景；&lt;/li&gt;
&lt;li&gt;三：讲解 AutoLogging 的实现，基于 BPF/eBPF 的自动日志采集能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x0-应用调用日志---数据来源&#34;&gt;0x0: 应用调用日志 - 数据来源&lt;/h2&gt;
&lt;p&gt;首先强调，应用调用日志与应用在代码层面打的日志不同，例如 Nginx 的 AccessLog，MySQL 的 General Log/Error Log 这些都是调用日志的范畴。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志---数据来源&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志 - 数据来源&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/202208236304743fc4697_hu4e23eb74058e007390e3cac0cd7c68c0_384694_d6e5940b9fa4170c646d8fc84873de29.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/202208236304743fc4697_hu4e23eb74058e007390e3cac0cd7c68c0_384694_167d5b43391872fb31f18234d1d4b471.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/202208236304743fc4697_hu4e23eb74058e007390e3cac0cd7c68c0_384694_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/202208236304743fc4697_hu4e23eb74058e007390e3cac0cd7c68c0_384694_d6e5940b9fa4170c646d8fc84873de29.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志 - 数据来源
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;但是这些日志都是单个组件的日志，并不是应用的调用日志，对于应用问题的排查，需要挨个去找组件的负责人看日志，但组件负责人不懂业务，不知道如何快速搜索日志，导致了问题的排查过程中协作成本巨高。&lt;/p&gt;
&lt;p&gt;应用的调用日志是给 Dev 团队建设的，一个站在应用视角快速查看所有的调用详情信息的能力，其实这个能力获取可以将目前现有的组件日志都集中起来查看也是一种思路，但是如何以应用无感知/自动化的形式低成本的接入，以及更符合云原生的这个理念来实现的话，这是目前市面上没有的，这是 DeepFlow 的 AutoLogging 的价值点所在。&lt;/p&gt;
&lt;p&gt;DeepFlow 的调用日志，其实由各种各样的应用协议组成的，目前 DeepFlow 平台上已经包含了例如网络应用的 HTTP 的访问日志、DNS 的查询日志、SQL/NoSQL 的操作日志、RPC 的调用日志、MQ 的 API 调用日志，也会包含可观测领域中 Tracing 的数据，例如 OpenTelmetry 协议的 Span 调用，还会陆续支持一些物联网的协议，例如 MQTT 的日志。&lt;/p&gt;
&lt;h2 id=&#34;0x1-应用调用日志---数据抽象&#34;&gt;0x1: 应用调用日志 - 数据抽象&lt;/h2&gt;
&lt;p&gt;可以看到数据的来源非常的丰富，随着社区的需求和版本的迭代，将会有更多协议的数据接入。如果需更好的使用这些‘五花八门’的数据，需要对数据进行治理，治理的第一步，对数据进行统一的抽象，数据抽象将从公共字段、请求字段、响应字段、指标量，这四个层面来展开：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志---数据抽象&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志 - 数据抽象&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b132d70_hueaae236f76106224d6ccd7391b93445b_252194_db34096826e2b4283cdfbc4068ea1ca0.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b132d70_hueaae236f76106224d6ccd7391b93445b_252194_a2b3609629451f2f06acdfeb4dd3d999.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b132d70_hueaae236f76106224d6ccd7391b93445b_252194_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b132d70_hueaae236f76106224d6ccd7391b93445b_252194_db34096826e2b4283cdfbc4068ea1ca0.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志 - 数据抽象
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公共字段：包含应用协议、协议版本、日志类型，其中日志类型包含请求/响应/会话类型，一般协议都是这三种，也会有一些协议有些例外，例如 OpenTelemetry 协议，仅一个会话类型。&lt;/li&gt;
&lt;li&gt;请求字段：整体抽象为请求类型、请求域名、请求资源、请求 ID，例如 HTTP 的方法，MySQL 的命令类型，DNS 的查询类型都为请求类型，HTTP 的 host 对应请求域名，HTTP 的 Url、MySQL 的命令、DNS 的查询名称都对应请求资源，这个请求资源的抽象是参考各个 APM 的厂商的定义，例如 Datadog 的 Resource，Skywalking 的 Endpoint。&lt;/li&gt;
&lt;li&gt;响应字段：分为响应状态、响应码、响应异常、结果，整体来说基本都是对应响应码映射的。&lt;/li&gt;
&lt;li&gt;指标量：分为吞吐请求长度、响应长度的字段，以及响应时延字段，结合指标量可以更好的分析调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;0x2-应用调用日志---自定义属性&#34;&gt;0x2: 应用调用日志 - 自定义属性&lt;/h2&gt;
&lt;p&gt;数据抽象的收益是统一管理，可弊端也在统一。在设计之初，其实就考虑了要做自定义属性的扩展，随着 OpenTemetry 的 Tracing 数据接入，这个事情就变的更加重要。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志---自定义属性&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志 - 自定义属性&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b43a9f8_huee4c235c0819f76de17963b375fb6b72_281866_f4f7202d87f23387aefb6a16e9a4d709.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b43a9f8_huee4c235c0819f76de17963b375fb6b72_281866_0807f0860b2eba93ce87f11d938559df.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b43a9f8_huee4c235c0819f76de17963b375fb6b72_281866_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b43a9f8_huee4c235c0819f76de17963b375fb6b72_281866_f4f7202d87f23387aefb6a16e9a4d709.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志 - 自定义属性
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;因此除了定义的标准字段外，又定义了 Attribute_Names 和 Attribute_Values 这两个数组，数组里面可以携带自定义属性和自定义属性对应的值，这个是根据不同的需求来携带，没有长度和格式的限制，非常的灵活。&lt;/p&gt;
&lt;p&gt;两个数组里面的 Key 和 Value 按顺序来进行映射，在产品化的时候，通过 Qurey 组件进行转化，用户是无感知数组的存在的，看到的都是 Key，Value 这样的属性关系，通过 Key 查询来获取 Value，这个和使用其他 Tag 查询的逻辑也是一致的。&lt;/p&gt;
&lt;h2 id=&#34;0x3-应用调用日志-autotagging&#34;&gt;0x3: 应用调用日志-AutoTagging&lt;/h2&gt;
&lt;p&gt;刚刚分析的是各种协议如何映射为调用日志，站在应用的视角已经可以统一查看调用日志了。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志-autotagging&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志-AutoTagging&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b1b3c9b_hu1d14747e446b92a3960cfef4651b2d8c_361378_1e4730b15f8e744b754c0e7ee2565428.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b1b3c9b_hu1d14747e446b92a3960cfef4651b2d8c_361378_c33ff3970ca846c4f649c9fa7a88f9d4.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b1b3c9b_hu1d14747e446b92a3960cfef4651b2d8c_361378_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b1b3c9b_hu1d14747e446b92a3960cfef4651b2d8c_361378_1e4730b15f8e744b754c0e7ee2565428.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志-AutoTagging
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;而如何快速过滤应用呢？这也是一个必须解决的问题，在传统架构中，一般会根据 IP 段或者根据所在服务器来过滤，但是应用架构逐步迁移到云上，开始使用微服务架构后，IP 已经不再稳定，而资源也不再简单是服务器了，这种时候如何来快速过滤应用呢？&lt;/p&gt;
&lt;p&gt;DeepFlow 的 AutoTagging 能力，可以给调用日志打上各种云厂商的标签，比如租户、区域、子网、云服务器、RDS、负载均衡器、NAT 网关、Kubernetes 的命名空间、容器服务、工作负载、动态 Label 等等，有了这些标签，则可以快速的根据各种云标签过滤应用，然后查看应用的调用日志了。&lt;/p&gt;
&lt;p&gt;以上主要和大家分享了应用调用日志背后数据处理的一些理论能力，接下来带大家感受下基于这样的能力，应用调用日志激发的实际价值。&lt;/p&gt;
&lt;h2 id=&#34;0x4-应用调用日志---总览&#34;&gt;0x4: 应用调用日志 - 总览&lt;/h2&gt;
&lt;p&gt;这是基于调用日志构建的一张 Grafana 的 Dashboard，这个 Dashboard 主要可查看服务的调用关系、RED 指标量。Dashboard 就是基于前面数据抽象来实现的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志---总览&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志 - 总览&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b336e43_hu73985a664b86af75f09bb672e135bea5_220972_c129f11a3d97b68e8da7551a07cdcd1d.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b336e43_hu73985a664b86af75f09bb672e135bea5_220972_56f1322dd267c46445aebf7934f9e961.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b336e43_hu73985a664b86af75f09bb672e135bea5_220972_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b336e43_hu73985a664b86af75f09bb672e135bea5_220972_c129f11a3d97b68e8da7551a07cdcd1d.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志 - 总览
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们可以通过 AutoTagging 打上的标签，Dashboard 主要使用 Kubernetes 相关的标签，快速过滤应用，比如 DeepFlow 这个应用，就直接过滤 Namespace=DeepFlow 就可以了。然后结合 Grafana 的一些阈值能力，就可以快速的在视觉找到需要关注的服务，从而缩小问题定位的范围。&lt;/p&gt;
&lt;h2 id=&#34;0x5-应用调用日志-http-访问日志&#34;&gt;0x5: 应用调用日志-HTTP 访问日志&lt;/h2&gt;
&lt;p&gt;接下来看看如何查看 HTTP 的调用日志以及 DeepFlow 平台的调用日志与 AccessLog 的差异。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志-http-访问日志&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志-HTTP 访问日志&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b27ffc7_hu2ed6c76f2045dc9d57269867fe2677de_297428_a05a8bc28687a70ad06d3f8c8b9b3bbb.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b27ffc7_hu2ed6c76f2045dc9d57269867fe2677de_297428_b50ebbf34280f4a0aadc3ed101a2380c.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b27ffc7_hu2ed6c76f2045dc9d57269867fe2677de_297428_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b27ffc7_hu2ed6c76f2045dc9d57269867fe2677de_297428_a05a8bc28687a70ad06d3f8c8b9b3bbb.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志-HTTP 访问日志
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;左边是在 Grafana 上构建的应用调用日志的 Dashboard，可根据 TAG 过滤应用，根据 Protocol 过滤 HTTP、HTTPS、HTTP2 协议，即可查看当前服务的 HTTP 的调用日志。&lt;/p&gt;
&lt;p&gt;右边是将 AccessLog 与 DeepFlow 的应用调用日志做的一个映射，通过对比，可看出来除了 remote_user 其他都能映射的非常好。&lt;/p&gt;
&lt;p&gt;HTTP 访问日志除了作为代替 AccessLog，还可以结合调用日志的状态和指标量，快速知道哪些调用存在异常，哪些调用响应慢。&lt;/p&gt;
&lt;h2 id=&#34;0x6-应用调用日志-mysql-慢查询日志&#34;&gt;0x6: 应用调用日志-MySQL 慢查询日志&lt;/h2&gt;
&lt;p&gt;对于 MySQL 慢查询的日志，在云上数据库实例化后，想看数据库的日志，其实并不容易，需要在云上开启各种设置和权限，及时看到了日志，也比较难快速的去过滤对应的应用日志&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志-mysql-慢查询日志&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志-MySQL 慢查询日志&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b392aa4_hu1dd9a0e0e977236c02f4bde8be545698_288721_3588dc3e51b0b08162c8f352dad26f6f.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b392aa4_hu1dd9a0e0e977236c02f4bde8be545698_288721_188121ae7c2808a92fae820d7e8ce3c3.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b392aa4_hu1dd9a0e0e977236c02f4bde8be545698_288721_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b392aa4_hu1dd9a0e0e977236c02f4bde8be545698_288721_3588dc3e51b0b08162c8f352dad26f6f.webp&#34;
               width=&#34;760&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志-MySQL 慢查询日志
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们来看看 DeepFlow 是如何查看慢查询日志的，这个是刚刚 HTTP 调用日志一样的 Dashboard，仅需要切换下搜索条件即可，将协议切换为 MySQL，request_type 输入为 COM_QUREY，以及 request_resource 为 SELECT*。&lt;/p&gt;
&lt;p&gt;设置好这样的过滤条件，得到的就是 MySQL 的查询日志，接着再对响应时延排序过滤，就可以找到慢查询了。&lt;/p&gt;
&lt;h2 id=&#34;0x7-应用调用日志---分布式追踪-span-日志&#34;&gt;0x7: 应用调用日志 - 分布式追踪 Span 日志&lt;/h2&gt;
&lt;p&gt;除了看网络应用协议的调用日志外，通过前面的数据来源我们也知道，调用日志也支持接入分布式追踪协议的 Span 信息。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志---分布式追踪-span-日志&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志 - 分布式追踪 Span 日志&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b4dd0dd_hu8954917a1f3a864fea1c9dfa5f36554d_285091_a265f32ed82645e0d3b6b769a09de29d.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b4dd0dd_hu8954917a1f3a864fea1c9dfa5f36554d_285091_b326842fcff6542c014c852071fd55b0.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b4dd0dd_hu8954917a1f3a864fea1c9dfa5f36554d_285091_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b4dd0dd_hu8954917a1f3a864fea1c9dfa5f36554d_285091_a265f32ed82645e0d3b6b769a09de29d.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志 - 分布式追踪 Span 日志
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;目前 DeepFlow 已经支持对接 OpenTelemtry 的 Span 信息，每个 Span 其实都对应着一个调用，当前展示的就是 Opentelemtry 的一个 Span 日志。&lt;/p&gt;
&lt;p&gt;接入 Span 的信息后，除了可以看日志，根据状态、指标量来定位调用问题外，还有一个重要的目的，就是还可以基于目前 DeepFlow 平台已有的网络中采集的调用和通过 eBPF 采集的调用，进行全栈全链路的追踪。&lt;/p&gt;
&lt;h2 id=&#34;0x8-应用调用日志---全栈全链路追踪&#34;&gt;0x8: 应用调用日志 - 全栈全链路追踪&lt;/h2&gt;
&lt;p&gt;这就是一个最终追踪出来的火焰图，这个火焰图上不仅包含应用代码层面的调用，也包含了系统层面、网络层面，针对如何追踪这个事，由于时间问题，今天就不展开细说，我会利用后续的直播继续给大家详细的去分享，如何对应用进行全栈全链路的追踪。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志---全栈全链路追踪&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志 - 全栈全链路追踪&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b56aa4f_hu38715c143d99c888b78fb82f14682884_218350_375759cd05891ff8bde9292a3cb5c1da.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b56aa4f_hu38715c143d99c888b78fb82f14682884_218350_f53bc734eef25742cf454c20ee3dad87.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b56aa4f_hu38715c143d99c888b78fb82f14682884_218350_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b56aa4f_hu38715c143d99c888b78fb82f14682884_218350_375759cd05891ff8bde9292a3cb5c1da.webp&#34;
               width=&#34;760&#34;
               height=&#34;426&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志 - 全栈全链路追踪
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;应用调用日志，仅能观测到应用层面的一些问题，DeepFlow 可以通过 FlowID 将应用调用背后的网络流日志关联起来。接下来分享网络流日志能有什么样的能力。&lt;/p&gt;
&lt;h2 id=&#34;0x9-网络流日志---功能定义&#34;&gt;0x9: 网络流日志 - 功能定义&lt;/h2&gt;
&lt;p&gt;先看下公有云对网络流日志的功能说明，这是阿里云的一个定义，是捕获特定位置的流量，将流量转化为流日志记录下来，流日志是记录捕获特定时间窗口的特定五元组的网络流。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-网络流日志---功能定义&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;网络流日志 - 功能定义&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b7ac14f_hud31ac83bf14c68ce2a95eabb44714fad_283109_4a26f18817ee8065f4383cec988d1ecb.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b7ac14f_hud31ac83bf14c68ce2a95eabb44714fad_283109_9f449c649d8dc7229fc61ad1f0911d19.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b7ac14f_hud31ac83bf14c68ce2a95eabb44714fad_283109_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b7ac14f_hud31ac83bf14c68ce2a95eabb44714fad_283109_4a26f18817ee8065f4383cec988d1ecb.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      网络流日志 - 功能定义
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于基础功能的定义，DeepFlow 是有遵循公有云的定义的，并在此基础上还有更丰富的能力。&lt;/p&gt;
&lt;h2 id=&#34;0x10-网络流日志-deepflow-与公有云对比&#34;&gt;0x10: 网络流日志-DeepFlow 与公有云对比&lt;/h2&gt;
&lt;p&gt;接下来看看 DeepFlow 流日志与公有云流日志的对比，解读其中的一些差异点。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-网络流日志-deepflow-与公有云对比&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;网络流日志-DeepFlow 与公有云对比&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b69ae96_hub776d11c4ef4a59d78ffd4ef4256ef91_276794_f87e584beb7b018c954afa4352c5ac33.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b69ae96_hub776d11c4ef4a59d78ffd4ef4256ef91_276794_a08dcecb330ce48f84b2e1542e72a113.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b69ae96_hub776d11c4ef4a59d78ffd4ef4256ef91_276794_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b69ae96_hub776d11c4ef4a59d78ffd4ef4256ef91_276794_f87e584beb7b018c954afa4352c5ac33.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      网络流日志-DeepFlow 与公有云对比
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;先看看捕获周期，DeepFlow 的粒度能小到 1 分钟，同时捕获位置 DeepFlow 也更丰富，除了 VPC 网络，也会覆盖到容器网络、物理网络、也能从网络层面扩展到系统层面。&lt;/p&gt;
&lt;p&gt;接着看看 TAG，配合 DeepFlow 的 AutoTagging 的能力，DeepFlow 流日志的 TAG 是远比公有云更丰富的，除了 VPC 网络的一些 Tag，还包含隧道的 Tag、容器网络，以及更丰富的采集位置 Tag。&lt;/p&gt;
&lt;p&gt;接着指标量，公有云仅有 Packet/Byte 这两个，DeepFlow 则覆盖了从网络吞吐到性能，再到时延多个维度。&lt;/p&gt;
&lt;p&gt;在 DeepFlow 的流日志中，增加了流状态字段，可通过此字段快速过滤异常的流，这是目前公有云上不支持的。当然公有云支持的日志状态字段和安全策略的状态，DeepFlow 目前不支持，不过此功能也已经加入到排期中了。&lt;/p&gt;
&lt;p&gt;其次从成本上看，DeepFlow 开源版本可一键部署于自建环境。&lt;/p&gt;
&lt;p&gt;下面我们来看下 DeepFlow 网络流日志功能，具体能解决什么问题。&lt;/p&gt;
&lt;h2 id=&#34;0x11-网络流日志---总览&#34;&gt;0x11: 网络流日志 - 总览&lt;/h2&gt;
&lt;p&gt;这是基于网络流日志构建的 Granafa 的 Dashboard，是可以和应用调用日志一样，查看服务的调用关系，但是和应用调用日志不一样的是，这个总览的 Dashboard 查看的是网络层面的指标量，比如吞吐、重传、建连失败、建连时延等指标数据。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-网络流日志---总览&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;网络流日志 - 总览&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b77ef48_hu7595c3ad527c02976dc24773295be331_231778_608f3c82934bc5439f66a61f4b732e58.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b77ef48_hu7595c3ad527c02976dc24773295be331_231778_2a947f3842415bdc9564038bed381432.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b77ef48_hu7595c3ad527c02976dc24773295be331_231778_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b77ef48_hu7595c3ad527c02976dc24773295be331_231778_608f3c82934bc5439f66a61f4b732e58.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      网络流日志 - 总览
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;0x12-网络流日志---网络时延&#34;&gt;0x12: 网络流日志 - 网络时延&lt;/h2&gt;
&lt;p&gt;查看应用调用日志时，经常会关注响应时延慢的调用，可这个响应慢，除了应用本身响应慢以外，还可能是 TCP 建连慢，也有可能是数据传输，也可能是协议栈慢，对于网络相关时延的排查，需要查看应用调用对应的流日志来分析。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-网络流日志---网络时延&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;网络流日志 - 网络时延&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b8aa56a_hu5c878d95735415f0ccd601fef328ac39_300124_320264425c592f3e9976a38204d1c130.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b8aa56a_hu5c878d95735415f0ccd601fef328ac39_300124_b9514b09f26a55323d94459473a610f3.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b8aa56a_hu5c878d95735415f0ccd601fef328ac39_300124_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b8aa56a_hu5c878d95735415f0ccd601fef328ac39_300124_320264425c592f3e9976a38204d1c130.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      网络流日志 - 网络时延
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;首先应用调用日志和网络流日志是如何关联的，DeepFlow 平台上是通过一个 FlowID 来将两个日志进行关联，因此可以根据调用日志的 FlowID，在流日志中进行查找，找到这条调用对应的流日志，然后分析流日志中的建连时延、系统时延和数据传输时延指标量，排查网络时延高导致了应用调用响应慢。&lt;/p&gt;
&lt;h2 id=&#34;0x13-网络流日志---流状态异常日志&#34;&gt;0x13: 网络流日志 - 流状态异常日志&lt;/h2&gt;
&lt;p&gt;应用调用日志是可以根据状态查看异常日志，流日志也是一样，可以对状态进行过滤查看异常的流日志，因此这个时候就能去看看调用异常背后是否因为网络异常导致。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-网络流日志---流状态异常日志&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;网络流日志 - 流状态异常日志&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b91b3ab_hu1484083e5bd2b0b1f8eb3cc220f6d544_359030_c195cd0dcb35ce19b8fda1ca0468ce53.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b91b3ab_hu1484083e5bd2b0b1f8eb3cc220f6d544_359030_af985254138592bb279f8889933fa6b1.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b91b3ab_hu1484083e5bd2b0b1f8eb3cc220f6d544_359030_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b91b3ab_hu1484083e5bd2b0b1f8eb3cc220f6d544_359030_c195cd0dcb35ce19b8fda1ca0468ce53.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      网络流日志 - 流状态异常日志
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;右上角给出来了 DeepFlow 流日志里面的状态定义，主要对流结束类型来进行定义，比如建连时延，因为端口复用可关闭，比如传输过程中，服务端发送 RST 报文导致的结束。&lt;/p&gt;
&lt;h2 id=&#34;0x14-网络流日志-tcp-时序日志&#34;&gt;0x14: 网络流日志-TCP 时序日志&lt;/h2&gt;
&lt;p&gt;接下来继续深入的结合 TCP 时序日志，分析具体的包的时延和问题。特别说明下：TCP 时序日志目前是 DeepFlow 企业版的增强功能了，现在开源的版本里面是没有的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-网络流日志-tcp-时序日志&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;网络流日志-TCP 时序日志&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479b9aa702_hu6620d721745e2bc484206880f7cac692_166681_25c4ae6ab8c3b9cb808d056806020558.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b9aa702_hu6620d721745e2bc484206880f7cac692_166681_26e981db184fbb97c440fc697b04f862.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479b9aa702_hu6620d721745e2bc484206880f7cac692_166681_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479b9aa702_hu6620d721745e2bc484206880f7cac692_166681_25c4ae6ab8c3b9cb808d056806020558.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      网络流日志-TCP 时序日志
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;用一个&lt;a href=&#34;https://ce-demo.deepflow.yunshan.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;简单的 Demo&lt;/a&gt;，讲解开源的调用日志和流日志功能。这是我们给开源社区搭建的一个 Demo 环境，这个 Demo 环境是基于 Grafana 来构建的，已经构建了很多应用和网络相关的 Dashboard。&lt;/p&gt;
&lt;h2 id=&#34;0x15-autologging-采集&#34;&gt;0x15: AutoLogging-采集&lt;/h2&gt;
&lt;p&gt;接下来从日志采集和日志处理两个方面给大家介绍，AutoLogging 是如何基于 BPF/eBPF 来自动采集日志的。&lt;/p&gt;
&lt;p&gt;首先我们来看看采集部分，采集部需分别从调用日志和流日志两个方面来看。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-autologging-采集--1&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;AutoLogging-采集 -1&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479ba66cf7_hu964a485b10aeb05e679e5dc688fd0498_177702_7b30e7ff142d5632232b2847cd74c0dc.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479ba66cf7_hu964a485b10aeb05e679e5dc688fd0498_177702_30ad9b4d122a7a26ea70c35eaa7c6d51.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479ba66cf7_hu964a485b10aeb05e679e5dc688fd0498_177702_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479ba66cf7_hu964a485b10aeb05e679e5dc688fd0498_177702_7b30e7ff142d5632232b2847cd74c0dc.webp&#34;
               width=&#34;760&#34;
               height=&#34;426&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      AutoLogging-采集 -1
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流日志：流日志通过前面产品介绍可知，是根据网络流量来生成的日志，因此采集则主要集中在网络层面，目前可覆盖物理网络一直到虚拟网络，可以采集宿主机到虚拟机、一直到容器 POD 的网卡的流量，在实现上流日志通过 BPF + AF_PACKET 技术来完成，其中 Windows 系统的采集则通过使用 Winpcap 来完实现的。&lt;/li&gt;
&lt;li&gt;调用日志：调用日志的数据包含两部分数据，一部分是从网络应用协议来的，还有一部分是可观测的 Tracing 数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-autologging-采集--2&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;AutoLogging-采集 -2&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479badd87a_hu38a52472946a916ed4da704161460b2c_194444_e09517691e8286eed36e03f35718080c.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479badd87a_hu38a52472946a916ed4da704161460b2c_194444_f296d23d9973e48c3c5258ccea9f78f7.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479badd87a_hu38a52472946a916ed4da704161460b2c_194444_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479badd87a_hu38a52472946a916ed4da704161460b2c_194444_e09517691e8286eed36e03f35718080c.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      AutoLogging-采集 -2
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于网络应用协议这部分的数据，调用日志既包含了网络层面采集的，也扩展到了 Sidecar 和应用进程层面，对于网络层面采集的位置和实现技术与流日志是一致，只是处理逻辑会有一些不一样；而对于 Sidecar 和应用进程层面，则是使用 eBPF 技术来实现的，其中对于非加密和非压缩的协议，则通过 eBPF 的 Kprobe 和 Tracepoints 来完成，而对于 HTTP2、HTTPS 则需要使用 Uprobe 来完成。&lt;/p&gt;
&lt;p&gt;对于 Opentelemetry 的数据接入，是通过 Otel-Collector 将 Traces 的数据发送给 deepflow-agent，就完成了 Tracing 的数据接入。采集的部分先分享到这里，接下来我们看看采集完成后，会进行些什么样的处理。&lt;/p&gt;
&lt;h2 id=&#34;0x16-autologging-处理&#34;&gt;0x16: AutoLogging-处理&lt;/h2&gt;
&lt;p&gt;对于日志的处理，分为三个部分：公共处理部分、流日志处理、调用日志处理。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-autologging-处理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;AutoLogging-处理&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479bb95f59_hube48bc243d22a36b3558d778ad18e82a_149191_64b867ed96a1feeb6e15028e87652dbb.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479bb95f59_hube48bc243d22a36b3558d778ad18e82a_149191_bad0170c2d0f71e18ee8c88105caae45.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479bb95f59_hube48bc243d22a36b3558d778ad18e82a_149191_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479bb95f59_hube48bc243d22a36b3558d778ad18e82a_149191_64b867ed96a1feeb6e15028e87652dbb.webp&#34;
               width=&#34;760&#34;
               height=&#34;429&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      AutoLogging-处理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于网络流量的处理可分为：隧道拆解，其中对于隧道拆解，基本主流的隧道协议，都已经支持，比如 Vxlan，IPIP，Gre 等等。隧道拆解完成后，则会按协议栈的顺序依次解析协议，从链路层一直到传输层。&lt;/p&gt;
&lt;p&gt;接着需要对于流量进行 AutoTagging 的预处理，这里主要加上唯一的 Tag，方便后面 Server 根据唯一 Tag 增加全量 Tag。到这步，对于不同的日志需要分开处理了，对于网络流日志，此时可以根据产品定义去生成流日志。&lt;/p&gt;
&lt;p&gt;对应用调用日志，还需要完成应用协议识别，确定具体协议后，再进行应用协议解析，最后才能根据定义生成调用日志。&lt;/p&gt;
&lt;p&gt;对于应用调用日志，除了刚刚分享的这个处理流程，还有另外一条路径，主要是因为应用调用日志不仅包含网络应用协议，还包含 APM 定义的 Tracing 数据，对于这部分数据，可以直接接入，接入后直接解析即可。&lt;/p&gt;
&lt;h2 id=&#34;0x17-应用调用日志---协议扩展&#34;&gt;0x17: 应用调用日志 - 协议扩展&lt;/h2&gt;
&lt;p&gt;额外说下如何扩展一个应用协议。前面一直在说应用调用日志支持接入各种各样的协议，这里大概分享下协议接入需要做一些什么事情。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用调用日志---协议扩展&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用调用日志 - 协议扩展&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479bc0101a_hu1cfa412e492b07bdfc49801eb287ccc0_393746_79fc661a5cedfd4c8f980dc863c5f2b4.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479bc0101a_hu1cfa412e492b07bdfc49801eb287ccc0_393746_c9037d75451b3d1a5b7c65dad37c5d70.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479bc0101a_hu1cfa412e492b07bdfc49801eb287ccc0_393746_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479bc0101a_hu1cfa412e492b07bdfc49801eb287ccc0_393746_79fc661a5cedfd4c8f980dc863c5f2b4.webp&#34;
               width=&#34;760&#34;
               height=&#34;426&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用调用日志 - 协议扩展
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;第一部分：需要解析协议；&lt;/p&gt;
&lt;p&gt;第二部分：协议解析完成后，需要将协议映射到调用日志中；&lt;/p&gt;
&lt;p&gt;第三部分：除了调用日志外，DeepFlow 还提供预聚合数据的能力，对应用 RED 指标进行计算。&lt;/p&gt;
&lt;p&gt;协议扩展要做的事情就是这些，目前 DeepFlow 已经开源，也欢迎开源社区的小伙伴们来贡献更多的协议，让应用调用日志更丰富。&lt;/p&gt;
&lt;h2 id=&#34;0x18总结&#34;&gt;0x18：总结&lt;/h2&gt;
&lt;p&gt;今天的分享主要侧重在框架的讲解，并不涉及太多代码细节，如果大家对实现细节感兴趣的话，可以直接查看 GitHub 上的代码，下方是 DeepFlow GitHub 的链接。&lt;/p&gt;
&lt;p&gt;GitHub 地址：https://github.com/deepflowys/deepflow&lt;/p&gt;
&lt;h2 id=&#34;0x18-未来迭代的方向&#34;&gt;0x18: 未来迭代的方向&lt;/h2&gt;
&lt;p&gt;最后分享下未来 DeepFlow 关于日志的一个迭代方向。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-未来迭代的方向&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;未来迭代的方向&#34; srcset=&#34;
               /blog/autologging-for-request-log-and-flow-log/20220823630479bd045b9_hu3f790b01b8fb7c71c2503e4d859493fa_113092_e35b5354cbd1894e2936a20fb38567c8.webp 400w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479bd045b9_hu3f790b01b8fb7c71c2503e4d859493fa_113092_c446d4248a0839f2535ac9b2141cc1f2.webp 760w,
               /blog/autologging-for-request-log-and-flow-log/20220823630479bd045b9_hu3f790b01b8fb7c71c2503e4d859493fa_113092_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/autologging-for-request-log-and-flow-log/20220823630479bd045b9_hu3f790b01b8fb7c71c2503e4d859493fa_113092_e35b5354cbd1894e2936a20fb38567c8.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      未来迭代的方向
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;目前 DeepFlow 在 Logging 方向上，有 AutoLogging 的能力，后面还会持续做日志集成，会接入 Promtail、Fluentd 等等的数据，并利用 AutoTagging 的能力，注入各种标签，更符合云原生设计理念。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>浅析 Istio——可观测性</title>
      <link>https://cloudnative.to/blog/istio-observability/</link>
      <pubDate>Sat, 25 Jun 2022 12:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/istio-observability/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;可观测性一词诞生于几十年前的控制理论，指系统可以由其外部输出推断其内部状态的程度。近年来，随着微服务、容器化、serverless 等多种技术架构的出现，应用的构建部署与实施运行都发生了巨大转变，服务链路错综复杂、微服务与分布式趋势增强、环境容器化等一系列变化促使可观测性在云原生体系中占据着重要的作用。通常，可观测性分为 Metrics (指标)、Tracing (追踪)、Logging (日志) 三部分。&lt;/p&gt;
&lt;p&gt;Logging 是在特定时间发生的事件的文本记录，包括说明事件发生时间的时间戳和提供上下⽂的有效负载。Metrics 是通过数据的聚合，对特定时间内的行为进行衡量，指标数据是可累加的，可以观察系统的状态和趋势。Tracing 面向请求，表示请求通过分布式系统的端到端的调用旅程，可以分析出请求中的异常点或故障的原因。&lt;/p&gt;
&lt;p&gt;Istio 为网格内所有的服务通信生成详细的遥测数据。这种遥测技术让 Isito 提供了服务行为的可观察性，使运维人员能够排查故障、维护和优化应用程序，而不会给服务的开发人员带来任何额外的负担。在 Istio1.7 版本之前，安装 Istio 时也会默认安装可观测性插件 Kiali、Prometheus、Jaeger 等。而在 Istio1.7 及其后面的版本，将不再安装这些可观测性插件。需要手动使用以下命令进行安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kuebctl apply -f sample/addons/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;metrics&#34;&gt;Metrics&lt;/h2&gt;
&lt;h3 id=&#34;prometheus-抓取-isito-配置&#34;&gt;Prometheus 抓取 Isito 配置&lt;/h3&gt;
&lt;p&gt;Istio 使用 Prometheus 采集 Metrics，envoy 数据面标暴露端口为 15020、暴露路径为 stats/prometheus。Istiod 控制面指标暴露端口为 15014，路径为 metrics。Istio 会为 envoy 和 istiod 添加 annotation，然后 Prometheus 通过这些 annotation 进行服务发现，来实时抓取注入了 envoy 的服务，以及 istiod 的指标信息。&lt;/p&gt;
&lt;p&gt;在服务在注入 envoy 时，会为 pod 自动添加以下 annotation (该功能可以通过 &amp;ndash;set meshConfig.enablePrometheusMerge=false 来禁用，默认开启)：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;prometheus.io/path: /metrics
prometheus.io/port: 9100
prometheus.io/scrape: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在创建 istiod 时，也会为为 istiod 的 pod 添加添加以下 annotation：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;prometheus.io/port: 15014
prometheus.io/scrape: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Prometheus 通过 kuberneters_sd_configs 配置服务发现对 Istio 指标信息进行抓取。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kubernetes_sd_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;role&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;relabel_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;keep&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;__meta_kubernetes_pod_annotation_prometheus_io_scrape&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;(https?)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;__meta_kubernetes_pod_annotation_prometheus_io_scheme&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;target_label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;__scheme__&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;(.+)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;__meta_kubernetes_pod_annotation_prometheus_io_path&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;target_label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;__metrics_path__&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;([^:]+)(?::\d+)?;(\d+)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;replacement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;$1:$2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;__address__&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;__meta_kubernetes_pod_annotation_prometheus_io_port&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;target_label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;__address__&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;labelmap&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;__meta_kubernetes_pod_label_(.+)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;__meta_kubernetes_namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;target_label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernetes_namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;__meta_kubernetes_pod_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;target_label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kubernetes_pod_name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;drop&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;regex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pending|Succeeded|Failed|Completed&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;source_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;__meta_kubernetes_pod_phase&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;__meta_kubernetes_pod_annotation 表示 pod 中 annotation 的值，与 Istio 组件中 annotation 对应。Prometheus 默认采集指标信息的端口为 9090，默认采集指标信息的路径为 /metrics，与 Istio 提供的指标信息不同，因此需要通过 relabel_configs 进行重新标记，以暴露为 Istio 指标实际的端口与路径。同时也会保持 pod 中的原有 label 信息，以及对 pod 的状态进行筛选。&lt;/p&gt;
&lt;p&gt;此外，对于独立部署 Prometheus 的情况，可以根据以上内容对 Prometheus 进行配置。&lt;/p&gt;
&lt;h3 id=&#34;自定义-metrics&#34;&gt;自定义 Metrics&lt;/h3&gt;
&lt;p&gt;在实际情况中，Istio 自身提供的指标可能不能够满足需求，需要对已有指标进行修改，又或者需要添加新的指标信息时，Istio 支持自定义 metrics。&lt;/p&gt;
&lt;p&gt;Istio 使用 EnvoyFilter 来自定义 Istio Pilot 生成的 Envoy 配置。使用 EnvoyFilter 可以修改某些字段的值，添加特定的过滤器，监听器等。在一个 namespace 下可以存在多个 EnvoyFilter，将按创建顺序依次处理所有 EnvoyFilter。在 EnvoyFilter 中可以进行 INBOUND、OUTBOUND、GATEWAY 三个维度的过滤设置。&lt;/p&gt;
&lt;p&gt;下面的示例将在 istio_request_total 这一指标中，添加 request.host 以及 destination.port 两个维度的信息，同时在 bookinfo 的 review 服务中，根据 request 的请求信息，添加 request_operation 的维度信息。&lt;/p&gt;
&lt;p&gt;首先创建一个 EnvoyFilter 过滤器，根据 bookinfo 中 reviews 请求的 path 以及 method，对 istio_operationId 分别提供了 ListReviews、GetReview、CreateReview 三种不同类型的值。WorkloadSelector 对应用此补丁配置的 Pods/VMs 组进行选择，如果省略此参数会将此补丁应用在同一 namespace 下所有的工作负载。configPathchs 用于定义一个或多个具有匹配条件的补丁。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;EnvoyFilter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio-attributegen-filter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;workloadSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;reviews&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configPatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;applyTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP_FILTER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SIDECAR_INBOUND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;proxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;proxyVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;1\.12.*&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;listener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filterChain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.http_connection_manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subFilter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;istio.stats&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;patch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;operation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;INSERT_BEFORE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio.attributegen&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/udpa.type.v1.TypedStruct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/google.protobuf.StringValue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                      {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                        &amp;#34;attributes&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                          {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                            &amp;#34;output_attribute&amp;#34;: &amp;#34;istio_operationId&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                            &amp;#34;match&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                              {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                                &amp;#34;value&amp;#34;: &amp;#34;ListReviews&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                                &amp;#34;condition&amp;#34;: &amp;#34;request.url_path == &amp;#39;/reviews&amp;#39; &amp;amp;&amp;amp; request.method == &amp;#39;GET&amp;#39;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                              },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                              {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                                &amp;#34;value&amp;#34;: &amp;#34;GetReview&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                                &amp;#34;condition&amp;#34;: &amp;#34;request.url_path.matches(&amp;#39;^/reviews/[[:alnum:]]*$&amp;#39;) &amp;amp;&amp;amp; request.method == &amp;#39;GET&amp;#39;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                              },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                              {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                                &amp;#34;value&amp;#34;: &amp;#34;CreateReview&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                                &amp;#34;condition&amp;#34;: &amp;#34;request.url_path == &amp;#39;/reviews/&amp;#39; &amp;amp;&amp;amp; request.method == &amp;#39;POST&amp;#39;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                              }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                            ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                          }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                        ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                      }&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;vm_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;envoy.wasm.runtime.null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;local&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;inline_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;envoy.wasm.attributegen&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在 stats-filter-1.12.yaml 添加以下配置 (示例使用 Istio 版本为 1.12)，为 request_total 指标添加 istio_operation、request_host、destination_port 这三个维度信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;istio.stats&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typed_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;@type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/udpa.type.v1.TypedStruct&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type_url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;@type&amp;#34;: &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;type.googleapis.com/google.protobuf.StringValue&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            { 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              &amp;#34;metrics&amp;#34;: [ 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              { 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                &amp;#34;name&amp;#34;: &amp;#34;requests_total&amp;#34;, 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                &amp;#34;dimensions&amp;#34;: 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  &amp;#34;request_operation&amp;#34;: &amp;#34;istio_operationId&amp;#34; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  &amp;#34;destination_port&amp;#34;: string(destination.port) 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                  &amp;#34;request_host&amp;#34;: request.host
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                } 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              }] 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            }&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后在 meshconfig 下开启 extraStatTags，将 istio_operationId、request_host、destination_port 信息写入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mesh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      defaultConfig:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        extraStatTags:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        - destination_port
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        - request_host
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        - request_operation&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;查询 istio_request_total 指标可以看到如下指标维度，表示配置成功。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;istio_requests_total{app=&amp;#34;reviews&amp;#34;,destination_port=&amp;#34;9080&amp;#34;,request_host=&amp;#34;reviews:9080&amp;#34;,request_operation=&amp;#34;GetReview&amp;#34;,......}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;prometheus-federation-对-istio-多集群的支持&#34;&gt;Prometheus Federation 对 Istio 多集群的支持&lt;/h3&gt;
&lt;p&gt;在 Istio 多集群场景下，每个集群会部署独立的 Prometheus 收集自身的指标信息，在需要将多集群指标进行聚合以及提供统一的 Prometheus 访问地址时，会使用 Prometheus Federation 将多集群数据聚合到一个独立的 Prometheus 实例上。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-prometheus-联邦结构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Prometheus 联邦结构&#34; srcset=&#34;
               /blog/istio-observability/prometheus-federation_hu1840728f8ca79ce57e2956d26d470ebb_47802_a6a3c8d88f5cfdd54fa7d304c8ae26aa.webp 400w,
               /blog/istio-observability/prometheus-federation_hu1840728f8ca79ce57e2956d26d470ebb_47802_79761fc2167a05c689b732085a2f7e8c.webp 760w,
               /blog/istio-observability/prometheus-federation_hu1840728f8ca79ce57e2956d26d470ebb_47802_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/istio-observability/prometheus-federation_hu1840728f8ca79ce57e2956d26d470ebb_47802_a6a3c8d88f5cfdd54fa7d304c8ae26aa.webp&#34;
               width=&#34;760&#34;
               height=&#34;281&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Prometheus 联邦结构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在聚合 Prometheus 实例中添加类似配置即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;scrape_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;job_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;federate&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scrape_interval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;15s&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;honor_labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metrics_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/federate&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#39;match[]&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;{job=&amp;#34;&amp;lt;job_name&amp;gt;&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;static_configs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;targets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;source-prometheus-1:9090&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;source-prometheus-2:9090&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;source-prometheus-3:9090&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tracing&#34;&gt;Tracing&lt;/h2&gt;
&lt;p&gt;Istio 推荐的分布式追踪工具 Jaeger、Zipkin 都通过 OpenTracing 规范进行实现。在分布式追踪里，存在 Trace 和 Span 两个重要概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Span：分布式追踪的基本组成单元，表示一个分布式系统中的单独的工作单元，每一个 Span 可以包含其它 Span 的引用。多个 Span 在一起构成了 Trace。&lt;/li&gt;
&lt;li&gt;Trace：微服务中记录的完整的请求执行过程，一个完整的 Trace 由一个或多个 Span 组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Istio 代理能够自动发送 Span，但是需要附加如下 HTTP 请求头信息，这样才能把多个 Span 正确的关联到同一个追踪上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x-request-id&lt;/li&gt;
&lt;li&gt;x-b3-traceid&lt;/li&gt;
&lt;li&gt;x-b3-spanid&lt;/li&gt;
&lt;li&gt;x-b3-parentspanid&lt;/li&gt;
&lt;li&gt;x-b3-sampled&lt;/li&gt;
&lt;li&gt;x-b3-flags&lt;/li&gt;
&lt;li&gt;x-ot-span-context&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自定义-tracing-配置&#34;&gt;自定义 Tracing 配置&lt;/h3&gt;
&lt;p&gt;Istio 可以对不同的 pod 进行不同全链路追踪的配置。通过给 POD 添加名为 proxy.istio.io/config 的 annotation，来配置该 Pod 的追踪采样率、自定义 tag 等。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;proxy.istio.io/config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      tracing:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        sampling: 10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          custom_tags:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            my_tag_header:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              header:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                name: host&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以通过 meshconfig 进行全局的 tracing 配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mesh&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      defaultConfig:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        tracing:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          sampling: 1.0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          max_path_tag_length: 256
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;          custom_tags:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            clusterID:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;              environment:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;                name: ISTIO_META_CLUSTER_ID&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，以上配置必须重启服务才能生效，这是因为 config 作用的时间点是 Istio 注入 sidecar 的时候，这样配置的 tracing，对于 Envoy 来说，是放在了 bootstrap 配置里面，不能在线变更和修改。&lt;/p&gt;
&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;
&lt;p&gt;Istio 可以检测到网格内的服务通信的流转情况，并生成详细的遥测数据日志。默认情况下，Istio 通过 meshConfig.accessLogFile=/dev/stdout 开启了 Envoy 访问日志，日志信息可以经过 stdout 标准输出。此外，也可以使用 accessLogEncoding 和 accessLogFormat 设置日志格式。&lt;/p&gt;
&lt;p&gt;Envoy 日志可以使用 kubectl logs 命令进行查看，但是当 Pod 被销毁后，旧的日志将不复存在，如果要查看历史的的日志数据，需要使用 EFK、Loki 等工具对日志进行持久化。&lt;/p&gt;
&lt;h2 id=&#34;istio-可视化&#34;&gt;Istio 可视化&lt;/h2&gt;
&lt;p&gt;Kiali 是 Istio 服务网格可视化工具，提供了服务拓补图、全链路跟踪、指标遥测、配置校验、健康检查等功能。Kiali 需要 Prometheus 为其提供指标信息，还可以配置 Jaeger 和 Grafana，实现分布式追踪和监控数据可视化。&lt;/p&gt;
&lt;p&gt;默认情况下，Kiali 使用 prometheus.isito-system:9090 作为其 Prometheus 数据源。当不使用 Istio 提供的 sample/addon，独立部署 Prometheus 时，需要在 Kiali 的 configmap 中添加以下配置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;external_services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;prometheus 实际地址&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此外，如果需要在 Kali 中加入分布式追踪和监控数据可视化的功能，也可以在 external_services 下配置 Jaeger 和 Grafana 的实际地址。&lt;/p&gt;
&lt;h3 id=&#34;kiali-多集群支持&#34;&gt;Kiali 多集群支持&lt;/h3&gt;
&lt;p&gt;Kiali 默认开启 Istio 多集群支持，若需要关闭此支持，可以进行如下设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kiali_feature_flags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;clustering&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;	  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通常，每个 istiod 控制面上会部署一个 Kiali。在 Isito 多集群主从模式下，只有主机群上部署了 Kiali，从集群上对应用的访问，此时通过 Kiali 是不能够查询到对应流量信息的。需要为主从集群的 Prometheus 进行联邦配置，这样才能够查询到从集群自身的指标流量信息。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lib.jimmysong.io/istio-handbook/config-networking/envoy-filter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EnvoyFilter - lib.jimmysong.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://istio.io/latest/docs/tasks/observability/metrics/classify-metrics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Classifying Metrics Based on Request or Response - istio.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/513448061&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 服务网格与全链路追踪的全方位攻略 - zhuanlan.zhihu.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/A13581861752/article/details/124311885&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可观测性（一）- blog.csdn.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>New Relic 开源 Pixie，其 Kubernetes 原生集群内观察平台</title>
      <link>https://cloudnative.to/blog/new-relic-open-sources-pixie-its-kubernetes-native-in-cluster-observability-platform/</link>
      <pubDate>Thu, 06 May 2021 02:04:05 +0800</pubDate>
      <guid>https://cloudnative.to/blog/new-relic-open-sources-pixie-its-kubernetes-native-in-cluster-observability-platform/</guid>
      <description>&lt;p&gt;本文译自 ZDNet 的文章 &lt;a href=&#34;https://www.zdnet.com/article/new-relic-open-sources-pixie-its-kubernetes-native-in-cluster-observability-platform/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;New Relic open sources Pixie, its Kubernetes-native in-cluster observability platform&lt;/a&gt;，译者&lt;a href=&#34;https://jimmysong.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宋净超&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;好消息是，云计算、&lt;a href=&#34;https://kubernetes.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt; 和云原生计算结合在一起，使软件开发比以前更快、更强大。坏消息是，保持对所有这些的关注比以往任何时候都更难。这就是为什么 &lt;a href=&#34;https://newrelic.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;New Relic&lt;/a&gt; 将其 Kubernetes 原生集群内观察平台 &lt;a href=&#34;http://px.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixie&lt;/a&gt; 作为一个新的开源项目，在 &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache 2.0 许可&lt;/a&gt;下贡献给&lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生计算基金会（CNCF）的&lt;/a&gt;原因，这是一个好消息。&lt;/p&gt;
&lt;p&gt;Pixie 是一个新的云原生应用程序的可观察性平台。有了它，开发人员可以通过一个 shell 命令看到他们应用程序的所有指标、事件、日志和追踪。有了 Pixie，你不需要添加度量（instrumentation）代码，设置临时仪表板，或将数据移出集群，就能看到正在发生的事情。这将为你节省宝贵的时间，这样你就可以致力于建立更好的软件，而不是用更好的方法来监控它。&lt;/p&gt;
&lt;p&gt;该程序作为一组 Kubernetes 服务部署在被监控的集群内。简而言之，Pixie 是一个原生的 Kubernetes 程序。它的 Pixie 边缘模块（PEM）被部署为 DaemonSet。在你的集群内，PEM 利用 Pixie 的 &lt;a href=&#34;https://lwn.net/Articles/740157/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt; 程序来收集网络事务和系统指标，而不需要修改代码。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;亚马逊网络服务（AWS）&lt;/a&gt;可观察性服务总经理 Mark Carter 补充说：“有了 &lt;a href=&#34;https://newrelic.com/blog/best-practices/what-is-ebpf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt;，即 Pixie 平台支持的 Linux 中的新度量能力，开发和运维可以利用一种新的可观察性的超级力量。”&lt;/p&gt;
&lt;p&gt;这是非常方便的。正如 New Relic 总裁 Bill Staples 在博客中所说。“这些&lt;a href=&#34;https://newrelic.com/blog/nerd-life/open-source-observability-pixie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生环境&lt;/a&gt;的动态、分布式性质&lt;a href=&#34;https://newrelic.com/blog/nerd-life/open-source-observability-pixie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;带来了一系列新的可观察性挑战&lt;/a&gt;。我们相信开源的、社区驱动是解决这些挑战的最好方法”。因此，通过使用 &lt;a href=&#34;https://opensource.newrelic.com/projects/open-telemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry 作为度量化标准&lt;/a&gt;，分析和故障排除都变得更加容易。&lt;/p&gt;
&lt;p&gt;Staples 继续说道。“通过一个命令，你可以点亮你的整个云环境并立即获得遥测数据。我们相信所有的开发者都应该获得这种惊人的开发者体验，它可以减少观察的摩擦，节省宝贵的时间以用来开发更好的软件。为了实现这一目标，我们还将 Pixie 的大部分工程资源投入到这个开源项目中。”&lt;/p&gt;
&lt;p&gt;展望未来，New Relic 公司 Pixie 和 New Relic 开源部总经理、最近收购的 &lt;a href=&#34;https://pixielabs.ai/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixie 实验室&lt;/a&gt;的首席执行官兼联合创始人 Zain Asgar 说，“开源是 New Relic 和 Pixie 的决定性价值，这就是为什么我们正在用 OpenTelemetry 对我们的可观察性产品进行标准化，并正在将 Pixie 作为一个开源项目进行贡献。我们已经亲眼看到了开放治理对开源项目的积极影响，我们期待着通过我们在 CNCF 的 [新] 白金会员资格，在全行业范围内支持这一倡议。”&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/opensource/gathering-insights-on-kubernetes-applications-services-and-network-traffic-with-pixie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pixie 开源现在也将在 AWS 上运行&lt;/a&gt;，作为 OpenTelemetry 项目的一个安全的、可生产的、由 AWS 支持的发行版。&lt;/p&gt;
&lt;p&gt;CNCF 总经理 Priyanka Sharma 欢迎 New Relic 加入该组织。“我们很高兴欢迎 New Relic 成为白金会员和 Zain Asgar 加入我们的董事会。Zain 和 New Relic 对推进我们的使命和支持我们的社区的承诺将有很大的帮助。我们特别期待着他们在可观察性方面细致入微的专业知识和观点”。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>解读：云原生下的可观测性发展方向</title>
      <link>https://cloudnative.to/blog/cloud-native-observability/</link>
      <pubDate>Wed, 06 Jan 2021 10:47:14 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cloud-native-observability/</guid>
      <description>&lt;p&gt;非常有幸参加了云原生社区 Meetup 北京站，有机会和众多业内的大牛一起讨论云原生相关的技术和应用，本次 Meetup 上我和大家分享了关于云原生下的可观测性相关的议题，相关的视频可以移步《&lt;a href=&#34;https://www.bilibili.com/video/BV1GK411g7dK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;B 站视频回放：云原生下的可观测性&lt;/a&gt;》回看，本篇文章主要是视频的文字性总结，欢迎大家留言讨论。&lt;/p&gt;
&lt;h2 id=&#34;可观测性的由来&#34;&gt;可观测性的由来&lt;/h2&gt;
&lt;p&gt;可观测性最早来自于电气工程领域，主要原因是随着系统发展的逐步复杂，必须要有一套机制用来了解系统内部的运行状态以便更好的监控和问题修复，为此工程师们设计了很多传感器、仪表盘用于表现系统内部的状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A system is said to be observable if, for any possible evolution of &lt;a href=&#34;https://en.wikipedia.org/wiki/State_space_representation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;state and control vectors&lt;/a&gt;, the current state can be estimated using only the information from outputs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;电气工程发展了上百年，其中各个子领域的可观测性都在进行完善和升级，例如交通工具（汽车 / 飞机等）也算的是可观测性上的集大成者。抛开飞机这种超级工程不谈，一辆可正常上路的小型汽车内部也有上百种的传感器用来检测汽车内 / 外部的各种状态，以便让汽车可以稳定、舒适、安全地的行驶。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsaewyj7j30df07dtdq_hu8a8feee3d8fef820f0e317cc365e1970_36959_ad11dfb84336014208074ed3dade0d0a.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsaewyj7j30df07dtdq_hu8a8feee3d8fef820f0e317cc365e1970_36959_f93639999999d200ce127bff11a51e8d.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsaewyj7j30df07dtdq_hu8a8feee3d8fef820f0e317cc365e1970_36959_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsaewyj7j30df07dtdq_hu8a8feee3d8fef820f0e317cc365e1970_36959_ad11dfb84336014208074ed3dade0d0a.webp&#34;
               width=&#34;483&#34;
               height=&#34;265&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;可观测性的未来&#34;&gt;可观测性的未来&lt;/h2&gt;
&lt;p&gt;随着上百年的发展，电气工程下的可观测性已经不仅仅用来辅助人们进行问题检查和定位问题，我们以汽车工程来看，整个可观测性的发展经历了几个过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;盲目：1886 年 1 月 29 日德国人卡尔・本茨发明了人类史上第一辆汽车，那个时候的汽车仅仅具备行驶的最基础能力，根本没有任何和可观测性相关的事情。&lt;/li&gt;
&lt;li&gt;传感器：随着后来汽车开始正式进入市场，人们需要更好的知道汽车是不是没油了、没水了，因此基础的传感器仪表盘被发明出来。&lt;/li&gt;
&lt;li&gt;告警：为了更好的保证汽车的形式安全性，人们开始使用自检和实时告警系统来主动向驾驶员通知一些异常信息，比如电瓶没电、水温过高、胎压低、刹车片磨损等。&lt;/li&gt;
&lt;li&gt;辅助：虽然告警能够即时发出，但有时候人还是来不及处理或者不想处理，这时候辅助系统就派上了用场，例如定速巡航、主动安全、自主泊车等。这些辅助系统是把传感器 + 自动控制进行结合，能够部分解决驾驶员可能做不到或者不想做的事情。&lt;/li&gt;
&lt;li&gt;自动驾驶：上述这些功能最终还是要人去参与，而自动驾驶可以完全不需要人的参与，直接是可观测性系统 + 控制系统就可以让汽车自动运行起来。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自动驾驶的核心要素&#34;&gt;自动驾驶的核心要素&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsahom53j315o0lk7uw_hu6f942ff219e6c25b00d4bb88c3e7041d_94233_0ce00fe5182416a02ca3db0f13f1ab2f.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsahom53j315o0lk7uw_hu6f942ff219e6c25b00d4bb88c3e7041d_94233_638f0c11ae68dd5492bf8310852e52ae.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsahom53j315o0lk7uw_hu6f942ff219e6c25b00d4bb88c3e7041d_94233_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsahom53j315o0lk7uw_hu6f942ff219e6c25b00d4bb88c3e7041d_94233_0ce00fe5182416a02ca3db0f13f1ab2f.webp&#34;
               width=&#34;760&#34;
               height=&#34;393&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;作为电气工程上可观测性的巅峰，自动驾驶将汽车获取到的各类内外部数据发挥到极致，总结起来主要有几下几个核心的要素：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;丰富的数据源：汽车外围遍布多个激光 / 图像雷达，能够实现高帧率、360° 实时观测周围的物体及其状态；内部则能够实时知道当前的车速、车轮角度、胎压等信息，做到知彼知己。&lt;/li&gt;
&lt;li&gt;数据集中化：相对辅助驾驶能力，自动驾驶的一个核心突破是能够将车内外的所有数据集中到一起去处理，真正发挥出数据的价值，而不是每个模块的数据作为孤岛进行独立运作。&lt;/li&gt;
&lt;li&gt;强大算力：集中化的数据也意味着数据量的急剧膨胀，无论哪家自动驾驶背后都有强大的芯片支撑，只有足够的算力才能保证在最短的时间内可以进行足够的计算。&lt;/li&gt;
&lt;li&gt;软件迭代：算力 + 算法构成了智能化的最终目标，然而算法不可能完美无瑕，我们会根据逐渐积累的自动驾驶数据不断进行算法的升级，使软件系统能够不断的升级以获得更佳的自动驾驶效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;it-系统的可观测性&#34;&gt;IT 系统的可观测性&lt;/h2&gt;
&lt;p&gt;伴随着几十年的发展，IT 系统中的监控、问题排查也逐渐抽象为可观测性工程。在当时，最主流的方式还是使用 Metrics、Logging、Tracing 的组合。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsaecgo3j30is0b4jtd_hudf80931304d03dac5e4ec0ca3cb1831f_37832_97fb749883253680bb1b97d30f6fbc64.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsaecgo3j30is0b4jtd_hudf80931304d03dac5e4ec0ca3cb1831f_37832_19ed975074bb7f75ec825f82cb2396ba.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsaecgo3j30is0b4jtd_hudf80931304d03dac5e4ec0ca3cb1831f_37832_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsaecgo3j30is0b4jtd_hudf80931304d03dac5e4ec0ca3cb1831f_37832_97fb749883253680bb1b97d30f6fbc64.webp&#34;
               width=&#34;676&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面这幅图详细大家非常熟悉，这是 Peter Bourgon 在参加完 2017 Distributed Tracing Summit 后发表的一篇博文，简洁扼要地介绍了 Metrics、Tracing、Logging 三者的定义和关系。这三种数据在可观测性中都有各自的发挥空间，每种数据都没办法完全被其他数据代替。&lt;/p&gt;
&lt;p&gt;以 Grafana Loki 中介绍中的一个典型问题排查过程来看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最开始我们通过各式各样的预设报警发现异常（通常是 Metrics/Logging）&lt;/li&gt;
&lt;li&gt;发现异常后，打开监控大盘查找异常的曲线，并通过各种查询/统计找到异常的模块（Metrics）&lt;/li&gt;
&lt;li&gt;对这个模块以及关联的日志进行查询/统计分析，找到核心的报错信息（Logging）&lt;/li&gt;
&lt;li&gt;最后通过详细的调用链数据定位到引起问题的代码（Tracing）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsabpa1kj31420m8dss_hu06b0141d62e435e81e739e1090d90d22_81919_0a518ea95577e90faaa10367af8854a4.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsabpa1kj31420m8dss_hu06b0141d62e435e81e739e1090d90d22_81919_8cf80b85b148c60ee96043fd46a4c488.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsabpa1kj31420m8dss_hu06b0141d62e435e81e739e1090d90d22_81919_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsabpa1kj31420m8dss_hu06b0141d62e435e81e739e1090d90d22_81919_0a518ea95577e90faaa10367af8854a4.webp&#34;
               width=&#34;760&#34;
               height=&#34;422&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上述例子介绍了如何使用 Metric、Tracing、Logging 去联合排查问题，当然根据不同的场景可以有不同的结合方案，例如简单的系统可以直接通过日志的错误信息去告警并直接定位问题，也可以根据调用链提取的基础指标（Latency、ErrorCode）触发告警。但整体而言，一个具有良好可观测性的系统必须具备上述三种数据。&lt;/p&gt;
&lt;h2 id=&#34;云原生下的可观测性&#34;&gt;云原生下的可观测性&lt;/h2&gt;
&lt;p&gt;云原生带来的不仅仅是应用部署能够部署云上而已，其整个的定义是一套新的 IT 系统架构升级，包括开发模式、系统架构、部署模式、基础设施全套的演进和迭代。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsadyme7j315o0kzwp3_hu2e74c21f00dcd661b457b05f5de0b3f9_73307_14ad367508115e55a5c2684e6a9ceb48.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsadyme7j315o0kzwp3_hu2e74c21f00dcd661b457b05f5de0b3f9_73307_5205070ed607fe6d34a99f4ca6fad8d4.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsadyme7j315o0kzwp3_hu2e74c21f00dcd661b457b05f5de0b3f9_73307_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsadyme7j315o0kzwp3_hu2e74c21f00dcd661b457b05f5de0b3f9_73307_14ad367508115e55a5c2684e6a9ceb48.webp&#34;
               width=&#34;760&#34;
               height=&#34;382&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;效率要求更高：随着 DevOps 模式的普及，规划、开发、测试、交付.. 的效率要求越来越高，而与之带来的问题是需要更加实时的知道此次的发布是否成功，出现了什么问题，问题在哪里，如何快速去解决。&lt;/li&gt;
&lt;li&gt;系统更加复杂：架构从最开始的一体化发展到分层模式，到现在的微服务模式，架构的升级带来了开发效率、发布效率、系统灵活性、鲁棒性等优势，但随之而来系统的复杂度将更高，问题的定位将更加难。&lt;/li&gt;
&lt;li&gt;环境动态性增强：无论是微服务的架构还是容器化的部署模式，带来的一个特性是环境的动态性会增强，每个实例的生命周期会更短，出现问题后往往现场已经被破坏，登录机器排查问题的方式已经不复存在。&lt;/li&gt;
&lt;li&gt;上下游依赖更多：问题的定位最终都会从上下游来排查，在微服务、云、K8s 的环境中，上下游将更加多，包括各类其他业务应用、云上使用的各类产品、各种中间件、K8s 自身、容器运行时、虚拟机等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;拯救者opentelemetry&#34;&gt;拯救者：OpenTelemetry&lt;/h2&gt;
&lt;p&gt;上述的这些问题相信很多读者都会深有体会，而业界也针对这种情况退出了各类可观测性相关的产品，包括开源、商业化的众多项目。例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Metrics：Zabbix、Nagios、Prometheus、InfluxDB、OpenFalcon、OpenCensus&lt;/li&gt;
&lt;li&gt;Tracing：Jaeger、Zipkin、SkyWalking、OpenTracing、OpenCensus&lt;/li&gt;
&lt;li&gt;Logging：ELK、Splunk、SumoLogic、Loki、Loggly&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsad11dyj30gb08678x_hu1be75c37c967ba4b651099733aae1038_45012_752614dcf142b643a333954a37ffc2d8.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsad11dyj30gb08678x_hu1be75c37c967ba4b651099733aae1038_45012_600898551ebeefe2b7a5734345ae2ab7.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsad11dyj30gb08678x_hu1be75c37c967ba4b651099733aae1038_45012_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsad11dyj30gb08678x_hu1be75c37c967ba4b651099733aae1038_45012_752614dcf142b643a333954a37ffc2d8.webp&#34;
               width=&#34;587&#34;
               height=&#34;294&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;利用这些项目的组合或多或少可以解决针对性的一类或者几类问题，但真正应用起来你会发现各种问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多套方案交织：可能要使用至少 Metrics、Logging、Tracing3 种方案，维护代价巨大&lt;/li&gt;
&lt;li&gt;数据不互通：虽然是同一个业务组件，同一个系统，产生的数据由于在不同的方案中，数据难以互通，无法充分发挥数据价值&lt;/li&gt;
&lt;li&gt;厂商绑定：无论从数据采集、传输、存储、计算、可视化、告警等都可能会被厂商绑定，可观测性系统一旦上线后替换的代价讲巨大无比&lt;/li&gt;
&lt;li&gt;云原生不友好：这些方案其中很多都是针对传统系统的，对于云原生的支持相对较弱，而且方案本身部署和使用代价都很高，不符合“云原生”这种一键部署、开箱即用的使用方式。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsah5yzmj30wc08gae3_hu34afbc11d3ed2d7a3bb59c62663e4022_34994_a141f44d84fde174e49677a0f56c44b2.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsah5yzmj30wc08gae3_hu34afbc11d3ed2d7a3bb59c62663e4022_34994_e5e04c34a5f7e084483d35561695268b.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsah5yzmj30wc08gae3_hu34afbc11d3ed2d7a3bb59c62663e4022_34994_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsah5yzmj30wc08gae3_hu34afbc11d3ed2d7a3bb59c62663e4022_34994_a141f44d84fde174e49677a0f56c44b2.webp&#34;
               width=&#34;760&#34;
               height=&#34;198&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在此背景下，云原生基金会 CNCF 下诞生了 OpenTelemetry 项目，旨在将 Logging、Tracing、Metrics 三者进行统一，实现数据的互通互操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Create and collect telemetry data from your services and software, then forward them to a variety of analysis tools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OpenTelemetry 最核心的功能是产生、收集可观测性数据，并支持传输到各种的分析软件中，整体的架构如下图所属，其中 Library 用于产生统一格式的可观测性数据；Collector 用来接收这些数据，并支持把数据传输到各种类型的后端系统。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsafamk9j315o0hx46t_hue7bb9740461e7e5d4f49c52c7dd75b5b_60551_2c522e1159dd3537135fd2491800d293.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsafamk9j315o0hx46t_hue7bb9740461e7e5d4f49c52c7dd75b5b_60551_3519bd08af97871e24744e85c1f15c8e.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsafamk9j315o0hx46t_hue7bb9740461e7e5d4f49c52c7dd75b5b_60551_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsafamk9j315o0hx46t_hue7bb9740461e7e5d4f49c52c7dd75b5b_60551_2c522e1159dd3537135fd2491800d293.webp&#34;
               width=&#34;760&#34;
               height=&#34;327&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;OpenTelemetry 给云原生下带来的革命性的进步，包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;统一协议：OpenTelemetry 为我们带来了 Metric、Tracing、Logging（正在制定中，LogModel 已经定义完毕）的统一标准，三者都有相同的元数据结构，可以轻松实现互相关联&lt;/li&gt;
&lt;li&gt;统一 Agent：使用一个 Agent 即可完成所有可观测性数据的采集和传输，不需要为每个系统都部署各种各样的 Agent，大大降低了系统的资源占用，使整体可观测性系统的架构也变的更加简单&lt;/li&gt;
&lt;li&gt;云原生友好：OpenTelemetry 诞生在 CNCF，对于各类的云原生下的系统支持更加友好，此外目前众多云厂商已经宣布支持 OpenTelemetry，未来云上的使用会更加便捷&lt;/li&gt;
&lt;li&gt;厂商无关：此项目完全中立，不倾向于任何一家厂商，让大家可以有充分的自由来选择 / 更换适合自己的服务提供商，而不需要收到某些厂商的垄断或者绑定&lt;/li&gt;
&lt;li&gt;兼容性：OpenTelemetry 得到了 CNCF 下各种可观测性方案的支持，未来对于 OpenTracing 类、OpenCensus、Prometheus、Fluntd 等都会有非常好的兼容性，可以方便大家无缝迁移到 OpenTelemetry 方案上。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;opentelemetry-限制&#34;&gt;OpenTelemetry 限制&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsafux5gj315o0kv7fz_huf7c7e375f02f9b6fe1b9f5694f00151c_60953_3b1504e72e59d5f2cb2846acc0204a7b.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsafux5gj315o0kv7fz_huf7c7e375f02f9b6fe1b9f5694f00151c_60953_c9359be122080adaa2b31fff3db47095.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsafux5gj315o0kv7fz_huf7c7e375f02f9b6fe1b9f5694f00151c_60953_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsafux5gj315o0kv7fz_huf7c7e375f02f9b6fe1b9f5694f00151c_60953_3b1504e72e59d5f2cb2846acc0204a7b.webp&#34;
               width=&#34;760&#34;
               height=&#34;381&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从上面的分析来看，OpenTelemetry 的定位是作为可观测性的基础设施，解决数据规范与获取的问题，后续部分依赖各个 Vendor 来实现。当然最佳的方式是能够有一个统一的引擎去存储所有的 Metrics、Logging、Tracing，有一个统一的平台去分析、展示、关联这些数据。目前的话还没有一个厂商能够非常好的支持 OpenTelemetry 的统一后端，现在还是需要自己去使用各个厂商的产品来实现。而这个带来的另一个问题是各个数据的关联会更加复杂，还需要去解决每个厂商之间的数据关联性问题。当然这个问题相信在 1-2 年肯定会解决掉，现在有众多厂商开始在努力实现 OpenTelemetry 所有类型数据的统一方案。&lt;/p&gt;
&lt;h2 id=&#34;可观测性的未来方向&#34;&gt;可观测性的未来方向&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsacga6sj30jk07t0yd_hu6e7b47a9d159cfb1dd413197c437080d_44183_c03265a341f8457dcb19dd28ae0776a6.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsacga6sj30jk07t0yd_hu6e7b47a9d159cfb1dd413197c437080d_44183_8868cf0ff025c9180184a64d3f3c0adf.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsacga6sj30jk07t0yd_hu6e7b47a9d159cfb1dd413197c437080d_44183_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsacga6sj30jk07t0yd_hu6e7b47a9d159cfb1dd413197c437080d_44183_c03265a341f8457dcb19dd28ae0776a6.webp&#34;
               width=&#34;704&#34;
               height=&#34;281&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们团队从刚开始 09 年做飞天 5K 项目起，就一直在负责监控、日志、分布式链路追踪等可观测性相关的工作，中间经历过小型机到分布式系统再到微服务、云化的一些架构变更，相关的可观测性方案也经历了很多演变。我们觉得整体上可观测性相关的发展和自动驾驶等级的设定非常吻合。&lt;/p&gt;
&lt;p&gt;自动驾驶一共分为 6 级，其中 0-2 级主要还是靠人来进行决定，到了等级 3 之后就可以进行无意识驾驶，也就是手眼可以暂时性不用关注驾驶，到了等级 5 的话人就可以完全脱离驾驶这个枯燥的工作，在车上可以自由活动。&lt;/p&gt;
&lt;p&gt;在 IT 系统的可观测性上，也可以类似划分 6 级：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等级 0：手工分析，依靠基础的 Dashboard、告警、日志查询、分布式链路追踪等方式进行手动告警、分析，也是目前绝大部分公司使用的场景&lt;/li&gt;
&lt;li&gt;等级 1：智能告警，能够自动去扫描所有的可观测性数据，利用机器学习的方式去识别一些异常并进行自动告警，免去人工设置 / 调整各种基线告警的工作&lt;/li&gt;
&lt;li&gt;等级 2：异常关联 + 统一视图，对于自动识别的异常，能够进行上下文的关联，形成一个统一的业务视图，便于快速的定位问题&lt;/li&gt;
&lt;li&gt;等级 3：根因分析 + 问题自愈，自动根据异常以及系统的 CMDB 信息直接定位问题的根因，根因定位准确后那边可以去做问题的自愈。这一阶段相当于是一次质的飞跃，在某些场景下可以在人不用参与的情况下实现问题的自愈。&lt;/li&gt;
&lt;li&gt;等级 4：故障预测，故障发生总会有损失，所以最好的情况是避免故障的发生，因此故障预测技术可以更好的来保证系统的可靠性，利用之前积累的一些故障先兆信息做到“未卜先知”&lt;/li&gt;
&lt;li&gt;等级 5：变更影响预测，我们知道绝大部分的故障都是由变更引起的，因此如果能够模拟出每个变更对系统带来的影响以及可能产生的问题，我们就能够提前评估出是否能够允许此次变更。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsadf9k4j315o0dewir_hu1c389544b17c00f1c5300e9a51cb4b30_36225_d22f3a3c007d1eabf02c7798c9a5af64.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsadf9k4j315o0dewir_hu1c389544b17c00f1c5300e9a51cb4b30_36225_d132d88dd3046183bcded24f166e4681.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsadf9k4j315o0dewir_hu1c389544b17c00f1c5300e9a51cb4b30_36225_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsadf9k4j315o0dewir_hu1c389544b17c00f1c5300e9a51cb4b30_36225_d22f3a3c007d1eabf02c7798c9a5af64.webp&#34;
               width=&#34;760&#34;
               height=&#34;244&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;阿里云-sls-在可观测性相关的工作&#34;&gt;阿里云 SLS 在可观测性相关的工作&lt;/h2&gt;
&lt;p&gt;目前我们 SLS 正在开展云原生可观测性的工作，基于 OpenTelemetry 这个未来云原生下可观测性的标准，实现各类可观测性数据的统一收集，覆盖各个数据源和各类数据类型，做到多语言支持、多设备支持、类型统一；向上我们会提供能够支持各类可观测性数据的统一存储和计算能力，支持 PB 级存储、ETL、流计算、百亿级数据秒级分析，为上层算法提供强大的算力支撑；IT 系统的问题非常复杂，尤其涉及到不同的场景和架构，因此我们把算法和经验结合起来进行异常的分析，算法包括基础的统计学、逻辑性算法，也包括 AIOp 相关的算法，经验中包括人工输入的专家知识、网上上积累的各类问题解决方案以及外部产生的一些事件；最上层我们会提供一些辅助决策的功能，例如告警通知、数据可视化、Webhook 等，此外会提供丰富的外部集成能力，例如对接三方的可视化 / 分析 / 告警系统，提供 OpenAPI 以便不同的应用方集成。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-observability/0081Kckwly1gmdsagsxmij315o0n0dzu_hu8e7675f7d0e0e841cbbed0d62cf38cf8_111438_bd339c7262bb76082bff3b88822e7d55.webp 400w,
               /blog/cloud-native-observability/0081Kckwly1gmdsagsxmij315o0n0dzu_hu8e7675f7d0e0e841cbbed0d62cf38cf8_111438_ded57e3ab854b647fd2a24caa87efdb4.webp 760w,
               /blog/cloud-native-observability/0081Kckwly1gmdsagsxmij315o0n0dzu_hu8e7675f7d0e0e841cbbed0d62cf38cf8_111438_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-observability/0081Kckwly1gmdsagsxmij315o0n0dzu_hu8e7675f7d0e0e841cbbed0d62cf38cf8_111438_bd339c7262bb76082bff3b88822e7d55.webp&#34;
               width=&#34;760&#34;
               height=&#34;420&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;作为 CNCF 下除了 Kubernetes 外最活跃的项目，OpenTelemetry 受到了各大云厂商以及相关解决方案公司的关注，相信未来一定会成为云原生下可观测性的标准。虽然目前还没有到生产可用的程度，但是目前各个语言的 SDK 和 Collector 也基本上稳定，在 2021 年就能够发布生产可用的版本，值得大家期待。&lt;/p&gt;
&lt;p&gt;而 OpenTelemetry 只是定义了可观察的前半部分，后面还有非常多的复杂工作需要我们去实现，任重道远。&lt;/p&gt;
&lt;p&gt;重点来了！！！！SLS 团队长期招聘人才，欢迎对大数据、监控、可观测性、前端可视化、移动端开发、机器学习等有兴趣的同学前来联系我：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邮箱：davidzhang.zc@alibaba-inc.com&lt;/li&gt;
&lt;li&gt;微信：davidzhang-zc。&lt;/li&gt;
&lt;li&gt;职位：https://cloudnative.to/job/aliyun-sls-observability/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://opentelemetry.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://opentelemetry.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.aliyun.com/article/766070&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://developer.aliyun.com/article/766070&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aiopsworkshop.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://aiopsworkshop.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://landscape.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://landscape.cncf.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instana.com/blog/observability-vs-monitoring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.instana.com/blog/observability-vs-monitoring/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
