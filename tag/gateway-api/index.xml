<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gateway API | 云原生社区（中国）</title>
    <link>https://cloudnative.to/tag/gateway-api/</link>
      <atom:link href="https://cloudnative.to/tag/gateway-api/index.xml" rel="self" type="application/rss+xml" />
    <description>Gateway API</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 08 Nov 2023 15:33:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>Gateway API</title>
      <link>https://cloudnative.to/tag/gateway-api/</link>
    </image>
    
    <item>
      <title>Kubernetes 安全开发最佳实践的实际应用</title>
      <link>https://cloudnative.to/blog/kubernetes-secure-development-best-practices-in-action/</link>
      <pubDate>Wed, 08 Nov 2023 15:33:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/kubernetes-secure-development-best-practices-in-action/</guid>
      <description>&lt;p&gt;译者注：
本文译自：&lt;a href=&#34;https://www.cncf.io/blog/2023/10/11/kubernetes-secure-development-best-practices-in-action/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cncf.io/blog/2023/10/11/kubernetes-secure-development-best-practices-in-action/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文作者基于&lt;a href=&#34;https://github.com/nginxinc/nginx-gateway-fabric&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX Gateway Fabric&lt;/a&gt;项目（一个基于Kubernetes Gateway API的实现）的开发实例来展现Kubernetes下的最佳安全开发实践。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文作者来自：F5 NGINX 高级软件工程师 Saylor Berman 和 F5 NGINX 高级软件工程师 Ciara Stacke。&lt;/p&gt;
&lt;p&gt;使用最小 Docker 容器是容器化领域的一种流行策略，因为它具有安全性和资源效率的优势。这些容器是传统容器的精简版本，旨在仅包含运行应用程序所需的基本组件。在某些情况下，base容器可能根本不包含任何内容（这将是“scratch”容器）。&lt;/p&gt;
&lt;p&gt;许多人尽可能简单地创建 Docker 映像来让他们的应用程序正常工作。这涉及选择一个基础映像，例如“ubuntu”或“python”，其中包含启动和运行所需的所有库和工具。虽然简单，但由于内部所有额外的“东西”，导致这些镜像的攻击面和内存占用量增加了。&lt;/p&gt;
&lt;p&gt;当我们开发 &lt;a href=&#34;https://github.com/nginxinc/nginx-gateway-fabric&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX Gateway Fabric&lt;/a&gt;（我们实现新的 Kubernetes Gateway API）时，我们利用了多种工具和策略来确保安全性和优化。在本文中，我们将介绍我们的设计决策：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少攻击面&lt;/li&gt;
&lt;li&gt;图像安全扫描&lt;/li&gt;
&lt;li&gt;代码质量和安全性&lt;/li&gt;
&lt;li&gt;部署安全最佳实践&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;减少攻击面&#34;&gt;减少攻击面&lt;/h2&gt;
&lt;p&gt;我们选择从尽可能小的容器开始。事实上，我们不能再小了。基于 &amp;lsquo;scratch&amp;rsquo;，我们的 &amp;rsquo;nginx- gateway-fabric&amp;rsquo; 镜像只包含 Golang 二进制文件，没有其他内容。在生成最终版本之前，我们采取了几个步骤，但我们确保最终版本仅包含必要的内容，即二进制文件。Dockerfile 如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Dockerfile 
FROM alpine:3.18 
RUN apk add --no-cache libcap 
COPY ./build/out/gateway /usr/bin/ 
RUN setcap &amp;#39;cap_kill=+ep&amp;#39; /usr/bin/gateway 
FROM scratch 
USER 102:1001 
ENTRYPOINT [ &amp;#34;/usr/bin/gateway&amp;#34; ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个多步骤的 Dockerfile 允许我们将“alpine”与最新版本的 libcap 一起使用，将我们预先构建的二进制文件复制到正确的位置，并为我们管理 nginx 设置必要的权限。然后，我们使用“scratch”作为生产映像的基础，并设置用户和组 ID，以便我们可以控制和限制容器有权访问的权限。&lt;/p&gt;
&lt;p&gt;使用这种方法，“nginx-gateway-fabric”映像的大小大致与二进制文件本身的大小相同，没有任何额外的膨胀。二进制文件不需要任何额外的依赖项即可运行，并且我们保持了尽可能小的大小和攻击面。&lt;/p&gt;
&lt;h2 id=&#34;图像安全扫描&#34;&gt;图像安全扫描&lt;/h2&gt;
&lt;p&gt;确保产品安全的最有效方法之一是定期进行安全扫描。在 &lt;a href=&#34;https://trivy.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Trivy&lt;/a&gt; 的帮助下，我们定期运行镜像安全扫描，作为 Github CI/CD 管道的一部分。Trivy 扫描容器镜像查找库或二进制文件中存在的任何已知漏洞 （CVE）。使用“scratch”镜像可以保护我们免受基础映像中的任何漏洞的影响，但 Trivy 仍然可以捕获在我们的 Golang 二进制文件中编译的库中的任何漏洞。扫描结果将上传到存储库的 Github 安全选项卡，使我们的团队可以轻松查看发现的任何问题。&lt;/p&gt;
&lt;h2 id=&#34;代码质量和安全性&#34;&gt;代码质量和安全性&lt;/h2&gt;
&lt;p&gt;除了最小化容器镜像外，我们还优先考虑应用程序中的代码质量和安全性，采用安全第一的思维方式。我们从一开始就将安全性放在首位，以安全性为重点，全面评估每个设计和功能。我们在流程的早期阶段主动识别和保护资产，确保在整个开发生命周期中对其进行保护，并遵守安全设计的最佳实践，包括适当的身份验证、授权和加密机制。维护这些标准的一个重要部分是我们使用强大的代码审查流程。项目的每个贡献者为任何变化都需要创建一个PR，并且每个PR必须得到至少两个项目维护者的批准。除了这个过程之外，我们还结合了 linter 和工具的使用，以保持我们对代码安全性和质量的高标准。&lt;/p&gt;
&lt;h3 id=&#34;静态代码分析&#34;&gt;静态代码分析&lt;/h3&gt;
&lt;p&gt;提高代码质量的一种方法是使用静态代码分析工具（通常缩写为 SAST）。使用 SAST 的主要优势之一是能够在开发过程的早期检测漏洞。我们将 &lt;a href=&#34;https://codeql.github.com/docs/codeql-overview/about-codeql/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CodeQL&lt;/a&gt;（GitHub 开发的静态代码分析工具）集成到我们的 CI/CD 管道中，该管道扫描并识别拉取请求以及主分支中的任何潜在问题。这使我们能够在将更改合并到主分支之前修正任何潜在的代码质量或安全问题。与 Trivy 扫描类似，任何潜在问题都会上传到我们存储库的 GitHub Security 选项卡，以便我们的团队轻松查看发现的任何问题。&lt;/p&gt;
&lt;h3 id=&#34;使依赖项保持最新&#34;&gt;使依赖项保持最新&lt;/h3&gt;
&lt;p&gt;使项目的依赖项保持最新对于安全性和性能至关重要。在 NGINX Gateway Fabric 项目中，我们利用 &lt;a href=&#34;https://docs.github.com/en/code-security/dependabot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dependabot&lt;/a&gt; 通过持续监控项目的依赖项，并在更新可用时自动创建PR来自动化此过程。这可确保我们始终使用最新、最安全的依赖项版本。&lt;/p&gt;
&lt;p&gt;Dependabot 还通过监控常见漏洞和披露 （CVE） 数据库来提供安全警报。当我们项目的某个依赖项中发现安全漏洞时，Dependabot 会立即通知我们并自动打开包含必要更新的PR。这与扫描我们的 Docker 镜像一起，使我们能够快速修补漏洞。&lt;/p&gt;
&lt;h2 id=&#34;部署安全最佳实践&#34;&gt;部署安全最佳实践&lt;/h2&gt;
&lt;p&gt;作为 Kubernetes 环境中的关键组件，我们努力尽可能遵循 Kubernetes 安全最佳实践。这包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最低权限 —&lt;/strong&gt; 我们设计了 RBAC（基于角色的访问控制）规范，以便对 NGINX Gateway Fabric 需要访问的资源具有所需的最低权限。仅定义正常操作明确所需的权限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;单一责任原则 —&lt;/strong&gt; 每个容器化应用程序都应具有单一职责，这意味着它应仅执行一项任务或功能。遵循这一原则，我们将 NGINX Gateway Fabric 设计为多容器应用程序，二进制文件在与 NGINX 二进制文件不同的容器中运行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强化容器安全上下文 —&lt;/strong&gt; 我们已在每个容器上配置了安全上下文，以包含以下内容
&lt;ul&gt;
&lt;li&gt;我们遵循“最小 Linux 功能”模型，从 NGINX Gateway Fabric Pod 中运行的容器中删除所有功能，并显式仅添加项目运行所需的功能。这有助于降低容器遭受潜在权限升级攻击的风险。&lt;/li&gt;
&lt;li&gt;我们确保在容器中运行的任何进程都不能获得比其父进程更多的权限。这是通过在容器的安全上下文中将“AllowPrivilegeEscalation”标志设置为 false 来实现的。&lt;/li&gt;
&lt;li&gt;我们的容器配置了只读根文件系统。只读根文件系统有助于实施不可变的基础架构策略。为此，我们将容器配置为写入已装载的卷，并在容器的安全上下文中将“readOnlyRootFilesystem”标志设置为 true。&lt;/li&gt;
&lt;li&gt;我们将“runAsUser”和“runAsGroup”标志设置为非根值。此外，我们在 Pod 安全上下文中将 &amp;lsquo;runAsNonRoot&amp;rsquo; 标志设置为 true，以强制容器必须以非 root 用户身份运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下一步是什么&#34;&gt;下一步是什么？&lt;/h2&gt;
&lt;p&gt;希望这些安全开发实践能为你提供一些想法，了解如何在开发弹性应用和选择平台工具的同时，最大限度地降低暴露风险。我们很想听听你是否有兴趣使用 &lt;a href=&#34;https://github.com/nginxinc/nginx-gateway-fabric&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX Gateway Fabric&lt;/a&gt; 来改善 Kubernetes 平台的安全状况。我们鼓励您：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以贡献者身份加入项目&lt;/li&gt;
&lt;li&gt;在实验室中尝试实现&lt;/li&gt;
&lt;li&gt;测试并提供反馈&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>为什么我们决定从新开始我们的NGINX Gateway Fabric</title>
      <link>https://cloudnative.to/blog/why-we-decided-to-start-fresh-with-our-nginx-gateway-fabric/</link>
      <pubDate>Wed, 08 Nov 2023 15:33:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/why-we-decided-to-start-fresh-with-our-nginx-gateway-fabric/</guid>
      <description>&lt;p&gt;译者注：
本文译自：&lt;a href=&#34;https://www.nginx.com/blog/why-we-decided-to-start-fresh-with-our-nginx-gateway-fabric/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.nginx.com/blog/why-we-decided-to-start-fresh-with-our-nginx-gateway-fabric/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gateway API已经正式GA，您可能好奇作为社区的一个重要实现，F5 NGINX是如何决策和发展该项目的。F5的产品管理总监 Brian Ehlert以及首席软件工程师Matthew Yacobucci将在本文中为您阐述&lt;a href=&#34;https://github.com/nginxinc/nginx-gateway-fabric&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX Gateway Fabric&lt;/a&gt;项目状态，以及未来的目标。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在 Kubernetes Ingress 控制器的世界里，NGINX 已经非常成功地运行了。NGINX Ingress Controller 被广泛部署用于商业 Kubernetes 生产用例，同时也作为开源版本进行开发和维护。因此，你可能会认为，当 Kubernetes 网络（Gateway API）出现重大改进时，我们会继续做一件好事，并在我们现有的 Ingress 产品中实现它。&lt;/p&gt;
&lt;p&gt;相反，我们选择了一条不同的道路。看到新的 Gateway API 的惊人可能性，以及我们完全重新构想如何在 Kubernetes 中处理连接的机会，我们意识到将 Gateway API 实现硬塞到我们现有的 Ingress 产品中将限制这种无限的未来。&lt;/p&gt;
&lt;p&gt;这就是为什么我们决定推出我们自己的网关 API 项目——&lt;a href=&#34;https://github.com/nginxinc/nginx-gateway-fabric&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX Gateway Fabric&lt;/a&gt;。该项目是开源的，将透明和协作地运作。我们很高兴能与外部贡献者合作，并与他人分享这段旅程，因为我们希望创造一些特别而独特的东西。&lt;/p&gt;
&lt;h2 id=&#34;我们如何做出网关-api-决策&#34;&gt;我们如何做出网关 API 决策&lt;/h2&gt;
&lt;p&gt;虽然围绕 Gateway API 创建一个全新项目的决定来自乐观和兴奋，但本质上它是基于健全的业务和产品战略逻辑。&lt;/p&gt;
&lt;p&gt;Kubernetes 的长期追随者可能已经知道 NGINX Ingress Controller 的开源和商业版本。两者分别在数据平面部署了 NGINX 开源和 NGINX  Plus商业反向代理，他们都是经过实战考验的 NGINX 数据平面。在 Kubernetes 之前，NGINX 的数据平面已经非常适合负载均衡和反向代理。在Kubernetes 中，我们的 Ingress 控制器可实现相同类型的关键请求路由和应用程序交付任务。&lt;/p&gt;
&lt;p&gt;NGINX 以构建轻量级、高性能、经过良好测试并准备好应对苛刻环境的商业产品而自豪。因此，Kubernetes Ingress Controller的产品策略反映了我们的反向代理产品策略——为更简单的用例制作一个强大的开源产品，并为关键业务应用程序环境中的生产 Ingress Controller制作一个具有附加特性和功能的商业产品。该策略在 Ingress Controller领域奏效，部分原因是 Ingress Controller缺乏标准化，并且需要大量的自定义资源定义 （CRD） 来提供负载均衡和反向代理等高级功能，开发人员和架构师在 Kubernetes 之外的网络产品中享受这些功能。&lt;/p&gt;
&lt;p&gt;我们的客户依赖并信任 NGINX Ingress Controller，商业版本已经具有 Gateway API 旨在解决的许多关键高级功能。此外，NGINX 很早就参与了 Gateway API 项目，我们认识到 Gateway API 生态系统需要几年时间才能完全成熟。（事实上，Gateway API 的许多规范都在不断发展，例如 GAMMA 规范，以使其能够更好地与服务网格集成)。&lt;/p&gt;
&lt;p&gt;但我们认为，将 beta 级Gateway API 规范硬塞给 NGINX Ingress Controller 会给成熟的企业级 Ingress 控制器带来不必要的不确定性和复杂性。我们在商业上销售的任何东西都必须稳定、可靠，并且 100% 准备好生产。Gateway API 解决方案也将实现这一目标，但这个过程仍然只是开始。&lt;/p&gt;
&lt;h2 id=&#34;我们对-nginx-gateway-fabric-的目标&#34;&gt;我们对 NGINX Gateway Fabric 的目标&lt;/h2&gt;
&lt;p&gt;借助 NGINX Gateway Fabric，我们的主要目标是创建一个经得起时间考验的产品，就像 NGINX Plus 和 NGINX 开源一样。为了达到我们愿意将Gateway API 项目标记为“面向未来”的地步，我们意识到我们需要尝试其数据和控制平面的架构选择。例如，我们可能需要研究不同的方法来管理第 4 层和第 7 层连接或最小化外部依赖关系。这种实验最好在一张白纸上进行，没有历史先例和要求。虽然我们使用久经考验的 NGINX 数据平面作为 NGINX 网关结构的基础组件，但我们对除此之外的新想法持开放态度。&lt;/p&gt;
&lt;p&gt;我们还希望为 Gateway API 资源提供全面的、与供应商无关的配置互操作性。与现有的Kubernetes Ingress 范式相比，Gateway API 最大的改进之一是它标准化了服务网络的许多元素。从理论上讲，这种标准化应该会带来一个更美好的未来，许多Gateway API 资源可以轻松交互和连接。&lt;/p&gt;
&lt;p&gt;然而，构建这一未来的关键是抛弃特定于供应商的 CRD（这可能导致供应商锁定）。在必须支持专为入口控制领域设计的 CRD 的混合产品中，这可能会变得非常具有挑战性。在将互操作性作为首要关注点的开源项目中，这更容易。为了摒弃紧密链接的 CRD，我们需要构建一些只关注 Gateway API 及其组成 API 的新表面东西。&lt;/p&gt;
&lt;h2 id=&#34;加入我们的gateway-api-之旅&#34;&gt;加入我们的Gateway API 之旅&lt;/h2&gt;
&lt;p&gt;我们仍处于非常早期的阶段。只有少数项目和产品实现了Gateway API 规范，并且大多数项目和产品选择将其嵌入到现有项目和产品中。&lt;/p&gt;
&lt;p&gt;这意味着这是一个充满机遇的时期——开始一个新项目的最佳时机。我们完全以开放方式运行 NGINX Gateway Fabric 项目，具有透明的决策和项目治理。由于该项目是用 Go 编写的，因此我们邀请庞大的 Gopher 社区提出建议、开始提交 PR 和/或向我们提出想法。&lt;/p&gt;
&lt;p&gt;Gateway API 可能会改变整个 Kubernetes 格局。可能不再需要整类产品，且新产品可能也会出现。Gateway API 提供了如此丰富的可能性，老实说，我们不知道最终会走向何方——但我们真的很期待它的旅程。一起来旅行吧，会很有趣！&lt;/p&gt;
&lt;p&gt;您可以从以下方面开始：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以贡献者身份加入项目&lt;/li&gt;
&lt;li&gt;在实验室中尝试实施&lt;/li&gt;
&lt;li&gt;测试和提供反馈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要加入该项目，请访问 GitHub 上的 &lt;a href=&#34;https://github.com/nginxinc/nginx-gateway-fabric&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NGINX Gateway Fabric&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果您想与我们的专家就此项目和其他 NGINX 项目进行实时聊天，请前往 &lt;a href=&#34;https://events.linuxfoundation.org/kubecon-cloudnativecon-north-america/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KubeCon North America 2023 &lt;/a&gt;的 NGINX 展台！NGINX 是 F5 的一部分，很荣幸成为今年 KubeCon NA 的白金赞助商，我们希望在那里见到你！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
