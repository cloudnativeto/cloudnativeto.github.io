<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ci-Cd | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/ci-cd/</link>
      <atom:link href="https://cloudnativecn.com/tag/ci-cd/index.xml" rel="self" type="application/rss+xml" />
    <description>Ci-Cd</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Tue, 04 Dec 2018 14:47:13 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>Ci-Cd</title>
      <link>https://cloudnativecn.com/tag/ci-cd/</link>
    </image>
    
    <item>
      <title>Serverless Jenkins 和 Jenkins X</title>
      <link>https://cloudnativecn.com/blog/serverless-jenkins-with-jenkins-x/</link>
      <pubDate>Tue, 04 Dec 2018 14:47:13 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/serverless-jenkins-with-jenkins-x/</guid>
      <description>&lt;p&gt;















&lt;figure  id=&#34;figure-jenkins-x&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Jenkins x&#34; srcset=&#34;
               /blog/serverless-jenkins-with-jenkins-x/006tNbRwly1fxupra5gsfj30bx0epgn0_hu10618078412741882716.webp 400w,
               /blog/serverless-jenkins-with-jenkins-x/006tNbRwly1fxupra5gsfj30bx0epgn0_hu1708527284179556735.webp 760w,
               /blog/serverless-jenkins-with-jenkins-x/006tNbRwly1fxupra5gsfj30bx0epgn0_hu9110473000119644296.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/serverless-jenkins-with-jenkins-x/006tNbRwly1fxupra5gsfj30bx0epgn0_hu10618078412741882716.webp&#34;
               width=&#34;429&#34;
               height=&#34;529&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Jenkins x
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://medium.com/@jdrawlings/serverless-jenkins-with-jenkins-x-9134cbfe6870&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Jenkins 服务来源于创建自 2004 年的 Hudson。在软件行业中，Jenkins 已经是家喻户晓的明星产品，并且已经是 CI 和 CD 的领头羊。到目前为止有超过 2050 万的 Jenkins 任务，以及将近 20 万的 Jenkins 服务在运行中。这真的是非常惊人的增长速度。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-jenkins-的增长变化图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;jenkins 的增长变化图&#34; srcset=&#34;
               /blog/serverless-jenkins-with-jenkins-x/5f3e3349gy1fxsw5vx2ooj20jk0c6gmj_hu16045134357453091685.webp 400w,
               /blog/serverless-jenkins-with-jenkins-x/5f3e3349gy1fxsw5vx2ooj20jk0c6gmj_hu1141001929273088922.webp 760w,
               /blog/serverless-jenkins-with-jenkins-x/5f3e3349gy1fxsw5vx2ooj20jk0c6gmj_hu13419906667055806187.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/serverless-jenkins-with-jenkins-x/5f3e3349gy1fxsw5vx2ooj20jk0c6gmj_hu16045134357453091685.webp&#34;
               width=&#34;704&#34;
               height=&#34;438&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      jenkins 的增长变化图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上面的增长图说明在技术领域已经有很大的进步，列如云计算和容器，这些变化说明 Jenkins 在很多方面已经起到了很好的作用，我们应该很好的利用这些影响力。如今，很多公司都开始进行容器化改造，我们希望 jenkins 能跟上时代的步伐，开始自己的云原生之路。Jenkins 应当继续成长，提供更多大家需要的自动化，可靠性，以及更好的开发体验。&lt;/p&gt;
&lt;p&gt;Jenkins 在取得巨大成功的同时，也产生了一些问题。&lt;/p&gt;
&lt;p&gt;下面让我们来简要描述一些我们了解到的比较重要的问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jenkins 服务的单点问题。特别是在服务维护期间，git webhook 的操作都会被丢失。&lt;/li&gt;
&lt;li&gt;Jenkins 服务经常将磁盘跑满，需要脚本或者人工清理之后，才能继续运行。&lt;/li&gt;
&lt;li&gt;在服务升级之后，plugin 的版本会匹配不上。&lt;/li&gt;
&lt;li&gt;多分支扫描，经常导致 GitHub 的速率被限制。&lt;/li&gt;
&lt;li&gt;在没有任何任务执行时，也需要占用巨大的内存，从基于使用情况来看，这是一种巨大的浪费。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;未来的改进：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;降低云计算开销，只在有任务需要被构建时才执行 jenkins 服务。&lt;/li&gt;
&lt;li&gt;尽量使用上一次的临时构建通道，避免磁盘被耗尽。&lt;/li&gt;
&lt;li&gt;通过持续集成进行插件的安装和插件的升级更新。&lt;/li&gt;
&lt;li&gt;提供高可用性和可伸缩性的 webhook 操作，来解决 spof 问题。&lt;/li&gt;
&lt;li&gt;避免由于 GitHub 的 API 扫描导致的速度风险。&lt;/li&gt;
&lt;li&gt;提供灾难恢复策略，用来恢复存储在 git 上的所有配置信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Jenkins x 项目在今年早些时候对外宣布为基于 kubernetes 的 pull 请求和 gitops 自动升级提供了 CI 和 CD（Testing&amp;ndash;&amp;gt;Staging&amp;ndash;&amp;gt;Production）。Jenkins X 同样继承了 kubernetes 的 CRD 特性 (&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34; title=&#34;custom resource definitions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom resource definitions&lt;/a&gt;)，并为你的 Jenkins 服务和作业提供了编排功能。&lt;/p&gt;
&lt;p&gt;Jenkins x 和 Jenkins 激动的宣布无服务的 Jenkins。Jenkins x 既能编排无服务的 jenkins，一个静态的 jenkins master，也能为每一个 team 提供 Knative 构建；因此现在开源的 Jenkins 云拥有完整的 Knative 构建支持。&lt;/p&gt;
&lt;p&gt;无服务 Jenkins 使用成功的并且创新开源项目来解决和上述静态 Jenkins master 的问题。Kubernetes 现在是事实的云实现，因此现在让我们专注在那些不太有名的，却能使得无服务的 Jenkins 成为可能的项目：Prow and Knative build。&lt;/p&gt;
&lt;p&gt;在这篇博客的底部，有一个链接到未经编辑的 Youtube，它演示了这系列的操作。&lt;/p&gt;
&lt;h2 id=&#34;prow-是什么&#34;&gt;Prow 是什么？&lt;/h2&gt;
&lt;p&gt;Prow 来源于 google 的电子商务系统。被一帮纠结于是否需要使用 Jenkins 来构建那些基于 kubernetes 的 GitHub repos 的优秀群体所创建。Kubernetes 是 GitHub 上最成功的项目之一。Prow 被用于&lt;a href=&#34;https://github.com/istio&#34; title=&#34;Istio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;和&lt;a href=&#34;https://github.com/jetstack/&#34; title=&#34;Jetstack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jetstack&lt;/a&gt;的同时，还被 140 个项目使用。有许多不同的职责的微服务组成的基于事件的解决方案——为云原生提供了理想的松散耦合架构。对于 merge 到 master 上请求，有了更加有力的方式（不管是在构建请求之前，还是之后），可以使用 ChatOps 和构建系统进行交互。&lt;/p&gt;
&lt;p&gt;Prow 提供了可伸缩的，高可用的 webhook 事件处理器，可以将 ProwJobs 的 CRDs 请求写入到 kubernetes，以至于像正在运行中的持续集成或者发布服务等其它微服务收到响应，并执行操作（kubernetes controller 对于 ProwJob 事件进行了监听）。Git 事件可以是新的 PR、issue、评论、merge、push 等操作都会触发 git event，因此我们能对更多的事件请求响应。&lt;/p&gt;
&lt;p&gt;对于一些已经提供了一组配置规则的目录，我们提供了自动 merge pull request 功能。对于 Prow 组件和描述参考如下链接&lt;a href=&#34;https://github.com/kubernetes/test-infra/tree/master/prow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/kubernetes/test-infra/tree/master/prow&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Prow 同样也将它的配置信息存储在 git 上，这样在出现问题时可以进行恢复。Jenkins X 项目在向用户发布前已经进行了广泛的测试和验证。你能在如下地址上看到 Jenkins X项目对于CI/CD提供了很多基于yaml的Prow配置&lt;a href=&#34;https://github.com/jenkins-x/prow-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jenkins-x/prow-config&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;knative-build&#34;&gt;Knative Build&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knative/build&#34; title=&#34;Knative Build&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knative Build&lt;/a&gt;是一个继承自 Kubernetes 项目的云原生解决方案。让用户可以直接从源码进行构建。Knative Build 最大的特色就是可以将一些简单的操作在同一个 pod 中的串联起来的执行，还可以在容器间进行状态的共享。这个特性通过&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/init-containers/&#34; title=&#34;Kubernetes init containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes init containers&lt;/a&gt;进行初始化。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/knative/build-templates&#34; title=&#34;Build Templates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build Templates&lt;/a&gt;是可以通过 Kubernetes pod 来直接运行你构建的项目。这个允许你在构建项目时，事先指定要需要运行的 docker image，构建时需要用到的环境变量、service accounts、secret 以及需要 mount 的存储卷。build template 是 kubernetes CRD 的集合。可以使用 Jenkins x 进行自动升级。通过 build template 创建或者引入一个应用时，可以使用 jenkins x 产生 Prow 配置。在 Jenkins x 项目中有一个列子是在&lt;a href=&#34;https://github.com/jenkins-x-charts/jx-build-templates/blob/81fd333/jx-build-templates/templates/jenkins-go-buildtemplate.yaml#L4&#34; title=&#34;BuildTemplate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BuildTemplate&lt;/a&gt;中配置&lt;a href=&#34;https://github.com/jenkins-x/prow-config/blob/7dcda43/prow/config.yaml#L138-L139&#34; title=&#34;prow config pointing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;prow config pointing&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;什么是无服务-jenkins&#34;&gt;什么是无服务 Jenkins&lt;/h2&gt;
&lt;p&gt;现在您已经了解了我们正在做的事情的背景，我们可以看看无服务 Jenkins。云原生 Jenkins 正在努力帮助开发人员、团队和组织迁移到云，并确保 Jenkins 不仅与云相关，还允许我们利用云和 Jenkins 最擅长的东西。&lt;/p&gt;
&lt;p&gt;详情：&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-credit-thanks-to-gareth-evans-for-the-diagram&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Credit: thanks to Gareth Evans for the diagram&#34; srcset=&#34;
               /blog/serverless-jenkins-with-jenkins-x/5f3e3349gy1fxsw5gepi2j20id0jrt9z_hu8131205625787832423.webp 400w,
               /blog/serverless-jenkins-with-jenkins-x/5f3e3349gy1fxsw5gepi2j20id0jrt9z_hu4115874897965790967.webp 760w,
               /blog/serverless-jenkins-with-jenkins-x/5f3e3349gy1fxsw5gepi2j20id0jrt9z_hu6596188164006437687.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/serverless-jenkins-with-jenkins-x/5f3e3349gy1fxsw5gepi2j20id0jrt9z_hu8131205625787832423.webp&#34;
               width=&#34;661&#34;
               height=&#34;711&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Credit: thanks to Gareth Evans for the diagram
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用基于 Kubernetes 的 Jenkins X 将会帮你自动安装和配置 Prow 和 Knative，下面我们开始准备进行安装。当创建项目或者引入项目时，jx cli 生成了所有需要的配置，并且更新 git repo webhook endpoint。&lt;/p&gt;
&lt;p&gt;现在，每个 pull 请求或合并到 master 的请求都会触发使用 Knative 在 Kubernetes 中产生一个临时的 Jenkins 操作，checkout git revision，配置所需的凭证，并使用 Jenkinsfile 运行应用程序构建管道。一旦构建完成，它将丢弃 Jenkinsfile 运行程序 pod。&lt;/p&gt;
&lt;p&gt;多亏了&lt;a href=&#34;https://github.com/jenkinsci/custom-war-packager&#34; title=&#34;War Packager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;War Packager&lt;/a&gt;（CWP），Jenkins X 发布过程构建了不同风格的 Jenkins 服务器，其中包含必要的构建工具。语言检测确保使用正确的风格。我们还使用&lt;a href=&#34;https://github.com/jenkinsci/configuration-as-code-plugin&#34; title=&#34;Configuration as Code plugin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Configuration as Code plugin&lt;/a&gt;（CasC）在构建时添加必要的 Jenkins 配置。CWP 很棒的特性之一是它提取 Jenkins 插件再构建 serverless Jenkins（而不是当 serverless Jenkins），所以在基于 Jenkins image 的容器和 JVM 中启动 Jenkins X 耗时 5 秒——相比之下，要花几分钟启动基于 Kubernetes 的 Jenkins server。&lt;/p&gt;
&lt;p&gt;每当我们发布 Jenkins X 时，我们有一个&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-serverless&#34; title=&#34;monorepo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;monorepo&lt;/a&gt;，它用于自动构建和发布这些程序指定的 Jenkins image。&lt;/p&gt;
&lt;p&gt;这也意味着，因为插件是在&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-serverless/blob/master/packager-config.yml#L29-L170&#34; title=&#34;yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;yaml&lt;/a&gt;中定义的，并存储在 git 中，所以我们可以为 CI 和 CD 工具提供 CI 和 CD。当我们想要升级一个插件时，我们发出一个 pull 请求，它会触发 CI 并构建一个预览 Jenkins image，确保没有插件冲突，我们甚至可以运行模拟作业作为自动化测试（尽管我们还没有完成这一部分）。每个人都可以采用完全相同的方法，构建定制的 Serverless Jenkins images，以相同的方式在管道中使用。&lt;/p&gt;
&lt;p&gt;突出的一件事是，当你切换到 Serverless Jenkins，进行构建是没有状态存储（这意味着为每个 Job 构建的编号总是 1）。在 Jenkins X 中，我们为了 PipelineActivity 创建的 CRD，所以这就允许我们在单个 Jenkins 构建完成之后想象先前的构建管道可以生成下一个构建编号和存储信息。&lt;/p&gt;
&lt;p&gt;当 Prow 收到 webhook 事件时，它将在 Kubernetes 中创建一个 Knative 构建资源。接下来，监视构建的 Knative 构建控制器将创建一个 Kubernetes pod，并自动添加一个克隆 PR 或发布分支源代码的 init 容器。接下来，利用&lt;a href=&#34;https://github.com/jenkinsci/jenkinsfile-runner&#34; title=&#34;Jenkinsfile runner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jenkinsfile runner&lt;/a&gt;，在一个单独的步骤中启动 Jenkins 可以访问 Knative 克隆的源代码并处理应用程序 Jenkinsfile。&lt;/p&gt;
&lt;h2 id=&#34;如何开始尝试&#34;&gt;如何开始尝试？&lt;/h2&gt;
&lt;p&gt;今天，含有 Prow 的 Jenkins X 在使用 terraform via 在 GKE 上创建集群时开箱即用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jx create terraform
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者在其他创建集群或安装命令上使用功能标志时，即：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jx create cluster gke --prow 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jx install — prow
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;如果没有运行中的 Jenkins 服务，如何访问 UI？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一个非常重要的问题是 Serveless Jenkins 没有开源的 Jenkins UI。下面我们来解释一下，Jenkins X 具有可以使 Jenkins X 开发人员感到友好的 IDE 和 CLI 工具，但 UI 已经消失了。Prow 有一个名为 Deck 的开源 UI，Jenkins X 安装了 OOTB。CloudBees 可能很快也将提供免费增值 UI，但有关详细信息，请自行查找。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从哪里可以看到构建的日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前 Jenkinsfile runner 将构建日志发送到标准输出，但是一个允许我们利用 Kubernetes 集群集中日志记录的更好的解决方案将被开发，如 Stackdriver，CloudWatch。我们还提供&lt;code&gt;jx logs -k&lt;/code&gt;（在构建运行时可用）和&lt;code&gt;jx get build log&lt;/code&gt;（可用几个小时）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我是否需要更改依赖于特定 Jenkins multibranch 插件环境变量（如&lt;code&gt;$ JOB_NAME&lt;/code&gt;）的 Jenkinsfile？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不，我们已经尝试确保所有与 MBP 相关的环境变量仍然以相同的格式添加。如果还有什么没有被添加的。请让我们知道。&lt;/p&gt;
&lt;h2 id=&#34;如何将-jenkinsfiles-迁移到-serveless-jenkins&#34;&gt;如何将 Jenkinsfiles 迁移到 Serveless Jenkins？&lt;/h2&gt;
&lt;p&gt;Jenkins X 项目本身已经从使用静态（永远在线）Jenkins 服务器迁移到 Serveless Jenkins。是的，我们将 Jenkins 服务器缩小到 0 并将我们所有的 Git 存储转移到 Prow 和 Serverless Jenkins。您可以在&lt;a href=&#34;https://github.com/jenkins-x/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jenkins-x/&lt;/a&gt;组织上查看任何拉取请求，以查看它的实际运行情况。我们使用的是&lt;a href=&#34;https://github.com/jenkins-x/draft-packs/blob/prow/packs/javascript/Jenkinsfile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;declarative style Jenkinsfile&lt;/a&gt;（这是我们在将新项目导入 Jenkins X 时添加的），这意味着迁移到 Serverless Jenkins 只需要对 Jenkins 文件进行一些调整：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将代理类型更改为“any”，以便在一个临时的单独的 Jenkins 上执行管道&lt;/li&gt;
&lt;li&gt;现在删除所有 Jenkinsfile 容器块，假设所有步骤都在一个单独的 Jenkins 管道引擎中执行。&lt;/li&gt;
&lt;li&gt;对于任何发布分支管道都应该有一个标记（它们都应该创建一个 git 标签！），然后我们必须进行从 checkout scm 到 git&amp;rsquo;github / foo.git&amp;rsquo;的切换，因为重新使用来自 Knative 和 Jenkinsfile runner 的克隆 repo 有问题，好像是因为将 repo 添加到 Jenkins 工作区时使用的是符号链接。我们希望解决这个问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jenkins-x/jenkins-x-platform/commit/ca9e0a58a76519193a2c7a0d8cf277dfc11babe4&#34; title=&#34;这里&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;可以看到上述变化的一个例子。要启用 prow 的 ChatOps &lt;code&gt;/approve&lt;/code&gt;注释，您还需要一个类似的 OWNERS 文件到该链接，该文件使用批准者 GitHub ID。&lt;/p&gt;
&lt;h2 id=&#34;当前的限制&#34;&gt;当前的限制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目前只有 GitHub，我们将为多个 git 提供者提供支持&lt;/li&gt;
&lt;li&gt;Jenkins X 使用了另一个分支，但是在接下来的几周内它将被切换回使用上游的 prow repo&lt;/li&gt;
&lt;li&gt;默认情况下，Jenkins X 会创建一个声明性管道 Jenkinsfiles，这尚未在脚本和共享库 Jenkinsfile 管道上进行测试，但如果按预期工作，我们很想收到反馈。&lt;/li&gt;
&lt;li&gt;Kubernetes Plugin PodTemplates 尚不支持。我们不确定这是否是一个好主意。这意味着如果要迁移具有多个不同容器{&amp;hellip;}块的现有 Jenkinsfiles，则需要将每个容器的构建工具添加到上面由 CWP 创建的单个一次性 Jenkins 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有工作要做，所以如果你想参与其中，请在&lt;a href=&#34;https://jenkins-x.io/community/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jenkins X Kubernetes slack rooms&lt;/a&gt;打个招呼来帮助解决问题，或先试试，让我们知道你是怎么做到的。&lt;/p&gt;
&lt;p&gt;现在和我们一起参加&lt;a href=&#34;https://www.cloudbees.com/devops-world/nice&#34; title=&#34; Jenkins World Nice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Jenkins World Nice&lt;/a&gt;并不会太晚，我们将在现场演示中展示这个以及其他精彩的演讲！&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;Jenkins X 是可供团队使用的一站式服务，可用来进行 Prow ChatOps 编排静态、无服务器或 Knative 构建作业，其中包括用于 Kubernetes 工作负载的自动化 CI/CD 以及更多自动化。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
