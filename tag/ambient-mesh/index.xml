<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ambient Mesh | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/ambient-mesh/</link>
      <atom:link href="https://cloudnativecn.com/tag/ambient-mesh/index.xml" rel="self" type="application/rss+xml" />
    <description>Ambient Mesh</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Thu, 24 Apr 2025 18:09:59 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>Ambient Mesh</title>
      <link>https://cloudnativecn.com/tag/ambient-mesh/</link>
    </image>
    
    <item>
      <title>Ambient Mesh 中的授权策略指南</title>
      <link>https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/</link>
      <pubDate>Thu, 24 Apr 2025 18:09:59 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/</guid>
      <description>&lt;p&gt;服务网格最受欢迎的功能之一，就是能够对网络流量强制执行访问控制策略。由于所有流量都经过代理服务器，因此你可以确保没有人能够绕过某个强制点直接访问服务，而且这些强制点可以位于每个服务前，而不是仅在网络边缘。&lt;/p&gt;
&lt;p&gt;与传统的防火墙或 Kubernetes 的 NetworkPolicy 功能不同，服务网格还可以访问应用层（第七层，L7）信息，例如请求是 HTTP 的 GET 还是 POST，以及请求中携带的 cookie 中的用户身份。&lt;/p&gt;
&lt;p&gt;Ambient Mesh（由 Istio 的 Ambient 模式和 Gloo Mesh 实现）极大地简化了服务网格的交付方式，并显著降低了成本。它的做法是&lt;a href=&#34;https://ambientmesh.io/docs/about/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 L4 和 L7 的处理拆分为两个不同的代理组件&lt;/a&gt;。但这也意味着我们必须改变对访问控制的默认假设：我们不再默认每个工作负载前都有一个 L7 感知的强制执行点。好消息是，大多数情况下我们并不需要它，如果确实需要，也可以按需部署，仅作用于需要保护的工作负载。&lt;/p&gt;
&lt;h3 id=&#34;ambient-mesh-中的身份认证与授权&#34;&gt;Ambient Mesh 中的身份认证与授权&lt;/h3&gt;
&lt;p&gt;运行在服务网格中的每个工作负载都有一个基于命名空间和 ServiceAccount 的身份。这些身份在网格内会被自动验证：这是 mTLS 提供的特性，Ambient 模式默认启用 mTLS。&lt;/p&gt;
&lt;p&gt;我们使用 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 来控制流量。此类策略指定网格中的目标，并包含规则，用于基于来源（from）、操作（to）以及条件（when）来允许或拒绝访问。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ztunnel&lt;/code&gt; 代理始终可以强制执行策略，但它只了解 L3/L4 层的信息（如主机与端口）；而 &lt;code&gt;waypoint&lt;/code&gt; 代理还可感知 L7 信息（如路径与方法），但不是默认部署的。为了兼顾 Ambient 模式的优势与安全性，我们需要为这两类代理分别定义不同粒度的策略。幸运的是，这并不复杂。&lt;/p&gt;
&lt;h3 id=&#34;两类不同的授权策略&#34;&gt;两类不同的授权策略&lt;/h3&gt;
&lt;p&gt;考虑某个部署在 Ambient Mesh 中的工作负载，没有使用 Waypoint。这时策略只能在服务端的 ztunnel 上强制执行。而 ztunnel 无法识别 L7 信息，因此只能强制 L4 层的策略。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f1_hu_f3f250e26fe4f503.webp 400w,
               /blog/ambient-mesh-authorization-policy/f1_hu_47cda3e656a287dc.webp 760w,
               /blog/ambient-mesh-authorization-policy/f1_hu_77fdf6cb978db31a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f1_hu_f3f250e26fe4f503.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当你为该工作负载&lt;a href=&#34;https://ambientmesh.io/docs/setup/configure-waypoints/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;引入 Waypoint&lt;/a&gt; 时，策略就可以在两个位置被执行：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f2_hu_42b4867cc14f936e.webp 400w,
               /blog/ambient-mesh-authorization-policy/f2_hu_ee3f68c15aa45293.webp 760w,
               /blog/ambient-mesh-authorization-policy/f2_hu_26d72b1a87811898.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f2_hu_42b4867cc14f936e.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;当系统存在多个策略执行点时，应该&lt;strong&gt;始终在最早的执行点&lt;/strong&gt;上应用策略。&lt;/p&gt;
&lt;p&gt;例如，若将所有策略都设置在 Waypoint 上，则直接访问工作负载的流量将绕过策略。而对于公开访问的服务，策略可能已在网关处执行。为了避免重复处理，&lt;a href=&#34;https://ambientmesh.io/docs/traffic/gateways/#gateways-and-waypoints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;默认情况下 Gateway 会直接将流量转发给服务&lt;/a&gt;，绕过 Waypoint。&lt;/p&gt;
&lt;p&gt;因此，推荐的做法是：在 ztunnel 上定义“基础设施策略”，强制使用 Waypoint，然后在 Waypoint 或 Gateway 上定义“应用层策略”。&lt;/p&gt;
&lt;h3 id=&#34;策略的作用目标与绑定&#34;&gt;策略的作用目标与绑定&lt;/h3&gt;
&lt;p&gt;上面的示意图未涉及实际场景中工作负载与 waypoint 实例的多副本情况。我们在写策略时，需要明确它的作用目标：即它是对哪个服务或工作负载生效。&lt;/p&gt;
&lt;p&gt;Istio 会自动将策略绑定到正确的代理上：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f3_hu_72aaf51948e34e94.webp 400w,
               /blog/ambient-mesh-authorization-policy/f3_hu_bc5544521b8c41dc.webp 760w,
               /blog/ambient-mesh-authorization-policy/f3_hu_e1317dbbf2760728.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f3_hu_72aaf51948e34e94.webp&#34;
               width=&#34;760&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;如果策略由 ztunnel 执行，你可以通过指定 &lt;code&gt;AuthorizationPolicy&lt;/code&gt; 所在的 namespace 和 label selector 选择其作用的工作负载。这类似于 Kubernetes 的 NetworkPolicy，或 Istio sidecar 模式下的策略绑定方式：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;应用对象&lt;/th&gt;
          &lt;th&gt;Namespace&lt;/th&gt;
          &lt;th&gt;Selector&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;网格中所有工作负载&lt;/td&gt;
          &lt;td&gt;istio-system&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;default 命名空间下的所有工作负载&lt;/td&gt;
          &lt;td&gt;default&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;匹配特定标签的工作负载&lt;/td&gt;
          &lt;td&gt;任意命名空间&lt;/td&gt;
          &lt;td&gt;matchLabels&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;而 Waypoint 使用 Kubernetes Gateway API 配置，策略通过 &lt;code&gt;targetRefs&lt;/code&gt; 字段&lt;a href=&#34;https://ambientmesh.io/docs/setup/configure-waypoints/#attach-policies-and-routes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;绑定到 Gateway&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么 Waypoint 使用不同的绑定方式？&lt;/strong&gt;
使用不同的绑定方式可以明确区分不同层级的策略含义，而 &lt;code&gt;targetRefs&lt;/code&gt; 遵循了 Kubernetes Gateway API 的语义。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;请注意，我们并未直接使用“L4 策略”或“L7 策略”的说法，因为 Waypoint 也可以执行 L4 策略。后文将说明为什么你可能希望这么做。&lt;/p&gt;
&lt;h3 id=&#34;访问控制的基础&#34;&gt;访问控制的基础&lt;/h3&gt;
&lt;p&gt;如果某个工作负载没有配置任何授权策略，则默认允许所有访问。一旦存在至少一个包含 &lt;code&gt;ALLOW&lt;/code&gt; 操作的策略，则&lt;strong&gt;所有未匹配任何 &lt;code&gt;ALLOW&lt;/code&gt; 的流量都会被拒绝&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这点非常重要。例如，你允许来自 Gateway 的流量访问某工作负载，后来引入了 Waypoint，则来自 Waypoint 的流量将会被拒绝，除非你更新策略。&lt;/p&gt;
&lt;h3 id=&#34;使用-ztunnel-强制执行策略&#34;&gt;使用 ztunnel 强制执行策略&lt;/h3&gt;
&lt;p&gt;在很多场景下，不部署 Waypoint，仅使用 Ambient Mesh 的 &lt;em&gt;安全叠加层（secure overlay layer）&lt;/em&gt; 是合理的选择。Istio 的 L4 属性（IP、端口、命名空间、身份主体）即可用于授权策略。&lt;/p&gt;
&lt;p&gt;这使得我们能实现最小权限的微分段：即仅允许必要的服务之间互相通信。当某个服务被攻破时，攻击流量也会携带其真实身份。例如，图像处理服务无权访问支付服务后端，可以轻松通过策略限制这种访问。&lt;/p&gt;
&lt;h3 id=&#34;非法策略属性与拒绝流量&#34;&gt;非法策略属性与拒绝流量&lt;/h3&gt;
&lt;p&gt;前面提到，L4 策略属性可以用于 ztunnel 绑定的策略。你甚至可以复用 Istio sidecar 模式下的策略到 ambient 模式中，其中可能包含 L7 属性（如 HTTP 方法或路径）。但由于 ztunnel 无法识别 L7 属性，会发生什么呢？&lt;/p&gt;
&lt;p&gt;简而言之：&lt;strong&gt;ztunnel 会安全失败（fail-safe）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于包含 L7 属性的 &lt;code&gt;DENY&lt;/code&gt; 策略：忽略 L7 部分，仅保留其余部分。&lt;/li&gt;
&lt;li&gt;对于包含 L7 属性的 &lt;code&gt;ALLOW&lt;/code&gt; 策略：L7 匹配规则会被移除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样做的结果比原策略更严格。因为只要有 &lt;code&gt;ALLOW&lt;/code&gt; 策略存在，未被匹配的流量就会被默认拒绝。所以最终结果是，所有流量都匹配默认拒绝规则。&lt;/p&gt;
&lt;h3 id=&#34;引入-waypoint-的策略执行&#34;&gt;引入 Waypoint 的策略执行&lt;/h3&gt;
&lt;p&gt;绑定在 Waypoint 与 ztunnel 上的策略存在两个主要区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;targetRefs&lt;/code&gt; 替代 selector；&lt;/li&gt;
&lt;li&gt;支持 L7 属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你将某个工作负载配置为使用 Waypoint 后，它就成为了该工作负载最合适的策略执行位置，即使仅是执行 L4 策略。原因在于 Ambient 模式下的身份工作机制：&lt;/p&gt;
&lt;p&gt;工作负载间的 mTLS 通信是由两端的 ztunnel 管理的：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f4_hu_b31bb5181e403d4f.webp 400w,
               /blog/ambient-mesh-authorization-policy/f4_hu_b9a8b9e01cea2b70.webp 760w,
               /blog/ambient-mesh-authorization-policy/f4_hu_5ef274a3335ee58a.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f4_hu_b31bb5181e403d4f.webp&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;为了让 Waypoint 能够解密和检查流量，它必须终止原有的 mTLS，重新发起一次连接：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/ambient-mesh-authorization-policy/f5_hu_bddfcbe26157fcf.webp 400w,
               /blog/ambient-mesh-authorization-policy/f5_hu_393ba6007e31457f.webp 760w,
               /blog/ambient-mesh-authorization-policy/f5_hu_800904b04429a1ce.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/ambient-mesh-authorization-policy/f5_hu_bddfcbe26157fcf.webp&#34;
               width=&#34;760&#34;
               height=&#34;161&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这意味着，服务器端 ztunnel 所见到的源身份是 &lt;strong&gt;Waypoint 的身份&lt;/strong&gt;，而非原始客户端。如果你希望根据真实源身份做出策略判断，策略应部署在 Waypoint 上。&lt;/p&gt;
&lt;h3 id=&#34;只允许来自-waypoint-的连接&#34;&gt;只允许来自 Waypoint 的连接&lt;/h3&gt;
&lt;p&gt;为了确保策略真正通过 Waypoint 执行，必须防止流量绕过 Waypoint。默认情况下，Ambient Mesh 会自动将服务流量路由到 Waypoint，但服务端的 ztunnel 仍接受来自任何客户端的连接。&lt;/p&gt;
&lt;p&gt;某些场景下这没问题，比如 Prometheus 采集某个 Pod 的 metrics，通常是直接连接，而不经过 Waypoint。&lt;/p&gt;
&lt;p&gt;若你需要阻止其他流量，应在 ztunnel 上定义策略，只&lt;a href=&#34;https://ambientmesh.io/docs/security/waypoint-authz/#restricting-workloads-to-only-accept-traffic-from-waypoints&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;允许来自指定 Waypoint 的连接&lt;/a&gt;。必要时可&lt;a href=&#34;https://ambientmesh.io/docs/security/waypoint-authz/#exceptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;添加例外&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio 服务网格 ambient 模式安全详解</title>
      <link>https://cloudnativecn.com/blog/ambient-security/</link>
      <pubDate>Thu, 08 Sep 2022 12:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/ambient-security/</guid>
      <description>&lt;p&gt;我们最近发布了 Istio Ambient Mesh（译者注：笔者更倾向于将其称为 Ambient Mode，即外围模式，但译文中仍然保留了 Ambient Mesh 的叫法），它是 Istio 的无 sidecar 数据平面。如&lt;a href=&#34;https://cloudnativecn.com/blog/introducing-ambient-mesh/&#34;&gt;公告博客中所述&lt;/a&gt;，我们使用 Ambient Mesh 解决的首要问题是简化操作、更广泛的应用程序兼容性、降低基础设施成本和提高性能。在设计 ambient 数据平面时，我们希望在不牺牲安全性或功能的情况下仔细平衡运维、成本和性能方面的问题。随着 ambient 组件在应用程序 pod 之外运行，安全边界发生了变化 —— 我们相信会变得更好。在这篇博客中，我们将详细介绍这些安全性变化以及它们与 sidecar 部署模式在安全性方面的对比。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ambient-mesh-的分层示意图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Ambient Mesh 的分层示意图&#34;
           src=&#34;https://cloudnativecn.com/blog/ambient-security/amibent-mesh-layer.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Ambient Mesh 的分层示意图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;回顾一下，Istio Ambient Mesh 引入了一个分层网格数据平面，它具有负责传输安全和路由的安全覆盖层，可以选择为需要它们的命名空间添加 L7 功能。要了解更多信息，请参阅&lt;a href=&#34;https://istio.io/latest/blog/2022/introducing-ambient-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;公告博客&lt;/a&gt;和&lt;a href=&#34;https://istio.io/latest/blog/2022/get-started-ambient&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;入门博客&lt;/a&gt;。安全覆盖层包括一个节点共享组件 ztunnel，它负责 L4 遥测和部署为 DaemonSet 的 mTLS。网格的 L7 层由 Waypoint 代理提供，完整的 L7 Envoy 代理按身份/工作负载类型部署。这种设计的一些基本原则包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序与数据平面分离&lt;/li&gt;
&lt;li&gt;安全覆盖层的组件类似于 CNI&lt;/li&gt;
&lt;li&gt;操作简单更利于安全&lt;/li&gt;
&lt;li&gt;避免多租户 L7 代理&lt;/li&gt;
&lt;li&gt;Sidecar 仍然是首选的部署模式之一&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用程序和数据平面分离&#34;&gt;应用程序和数据平面分离&lt;/h2&gt;
&lt;p&gt;尽管 Ambient Mesh 的主要目标是简化服务网格的操作，但它也确实有助于提高安全性。复杂性会滋生漏洞，企业应用程序（及其传递依赖项、库和框架）极其复杂且容易出现漏洞。从处理复杂的业务逻辑到利用 OSS 库或有缺陷的内部共享库，攻击者（来自内部或外部）的主要目标是用户的应用程序代码。如果应用程序遭到破坏，凭据、机密和密钥就会暴露给攻击者，包括那些安装或存储在内存中的数据。在查看 sidecar 模型时，sidecar 接管应用程序中的身份/密钥材料。在 Istio ambient 模式下，数据平面组件不会与应用程序运行在同一个 pod 中，因此，应用程序的中的秘密不会泄露给数据平面。&lt;/p&gt;
&lt;p&gt;作为漏洞的潜在目标，Envoy Proxy 怎么样？Envoy 是一个经过严格审查的极其坚固的基础设施，并&lt;a href=&#34;https://www.infoq.com/news/2018/12/envoycon-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在关键环境中大规模运行&lt;/a&gt;（例如，&lt;a href=&#34;https://cloud.google.com/load-balancing/docs/https&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;用于生产以支持 Google 的网络&lt;/a&gt;）。然而，由于 Envoy 是软件，它不能免受漏洞的影响。当漏洞出现时，Envoy 有一个强大的 CVE 流程来识别快速修复它们，并在它们产生广泛影响之前将补丁推送给客户。&lt;/p&gt;
&lt;p&gt;回到前面“复杂性滋生漏洞”的评论，Envoy Proxy 最复杂的部分在于其 L7 处理，事实上，历史上 Envoy 的大多数漏洞都在其 L7 处理堆栈中。但是，如果你只将 Istio 用于 mTLS 会怎样？当你不使用该功能时，为什么要冒险部署一个更容易发生 CVE 的成熟 L7 代理？分离 L4 和 L7 网格功能在这里很有用。在 Sidecar 部署中，你采用所有代理，即使你只使用一小部分功能，在 ambient 模式下，我们可以通过提供安全覆盖并仅根据需要在 L7 中分层来限制暴露。此外，L7 组件完全独立于应用程序运行，不会暴露供攻击面。&lt;/p&gt;
&lt;h2 id=&#34;将-l4-下推到-cni&#34;&gt;将 L4 下推到 CNI&lt;/h2&gt;
&lt;p&gt;Ambient 数据平面的 L4 组件作为 DaemonSet 运行，或者说每个节点一个。这意味着它是在特定节点上运行的所有 Pod 的共享基础架构。这个组件特别敏感，应该与节点上的任何其他共享组件（例如任何 CNI 代理、kube-proxy、kubelet 甚至 Linux 内核）处于同一级别。来自工作负载的流量被重定向到 ztunnel，ztunnel 然后识别工作负载并选择正确的证书来代表 mTLS 连接中的工作负载。&lt;/p&gt;
&lt;p&gt;ztunnel 为每个 pod 使用一个独特的凭证，只有当 pod 在当前节点上运行时才会被发出。这确保了被破坏的 ztunnel 的爆炸半径——只有调度到当前节点上的 pod 的凭证可以被盗。这是一个类似于其他实现良好的共享节点基础设施的属性，包括其他安全 CNI 实现。ztunnel 不使用集群范围或每个节点的凭证，如果被盗，可能会立即危及集群中的所有应用流量，除非这些应用也实施复杂的二级授权机制。&lt;/p&gt;
&lt;p&gt;如果我们将其与 sidecar 模式进行比较，我们会注意到 ztunnel 是共享的，它的暴露可能导致节点上运行的应用程序的身份泄露。但是，该组件中出现 CVE 的可能性低于 Istio sidecar，因为攻击面大大减少（仅 L4 处理）；ztunnel 不做任何 L7 处理。此外，sidecar 中的 CVE（具有更大的 L7 攻击面）并没有真正包含在受到损害的特定工作负载中。Sidecar 中的所有严重的 CVE 都可能在网格中的任何工作负载复现。&lt;/p&gt;
&lt;h2 id=&#34;操作简单更利于安全&#34;&gt;操作简单更利于安全&lt;/h2&gt;
&lt;p&gt;归根结底，Istio 是一个关键的基础设施，必须进行维护。Istio 代表应用程序实施零信任网络安全的一些原则受到信任，按计划或按需求推出补丁是最重要的。平台团队通常有可预测的补丁或维护周期，这与应用程序的周期完全不同。当需要新的能力和功能时，应用程序可能会被更新，通常是项目的一部分。这种对应用程序变化、升级、框架和库补丁的方法，是非常不可预测的，会耗费大量时间，不适合安全实践。因此，保持这些安全功能是平台的一部分，与应用程序分开，有利于保持更好的安全态势。&lt;/p&gt;
&lt;p&gt;正如我们在公告博客中指出的，由于 sidecar 的侵入性，操作 sidecar 可能会更加复杂（注入 sidecar/改变部署描述，重启应用程序，容器之间的竞争条件等）。对带有 sidecar 的工作负载的升级需要更多的计划和滚动重启，可能需要协调，以避免应用程序崩溃。有了 Ambient Mesh，对 ztunnel 的升级可以与任何正常的节点补丁或升级同时进行，而 waypoint 代理是网络的一部分，可以根据需要对应用程序进行完全透明的升级。&lt;/p&gt;
&lt;h2 id=&#34;避免多租户-l7-代理&#34;&gt;避免多租户 L7 代理&lt;/h2&gt;
&lt;p&gt;支持 L7 协议（例如 HTTP 1/2/3、gRPC、解析标头、实现重试、在数据平面中使用 Wasm 或 Lua 进行自定义）比支持 L4 复杂得多。实现这些行为的代码要多得多（包括 Lua 和 Wasm 等用户自定义代码），这种复杂性可能会导致潜在的漏洞。正因为如此，CVE 在这些 L7 功能领域中出现的几率更高。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-每个命名空间身份都有自己的l7代理没有多租户代理&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;每个命名空间/身份都有自己的L7代理；没有多租户代理&#34;
           src=&#34;https://cloudnativecn.com/blog/ambient-security/l7-function.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      每个命名空间/身份都有自己的L7代理；没有多租户代理
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在 ambient mesh 中，我们不在多个身份之间共享代理中的 L7 处理。每个身份（Kubernetes 中的服务账户）都有自己专门的 L7 代理（waypoint 代理），这与我们使用的 sidecar 模型非常相似。试图将多个身份、复杂的不同的策略和定制放在一起，会给共享资源增加很多变数，最好的情况是导致资源的不公平分配，最坏的情况是导致代理被完全破坏。&lt;/p&gt;
&lt;h2 id=&#34;sidecar-模式仍然是首先的部署模式之一&#34;&gt;Sidecar 模式仍然是首先的部署模式之一&lt;/h2&gt;
&lt;p&gt;我们理解，有些人对 sidecar 模型及其已知的安全边界感到满意，并希望留在该模型上。Sidecar 仍然是网格的一等公民，平台所有者可以选择继续使用它们。如果平台所有者想同时支持 sidecar 和 ambient 也是可以。具有 ambient 数据平面的工作负载可以与部署了 sidecar 的工作负载进行本地通信。随着人们更好地了解 ambient mesh 的安全态势，我们相信，ambient 将成为 Istio 服务网格的首选模式，而 sidecar 则用于特定的优化。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Istio 无 sidecar 代理数据平面 ambient 模式简介</title>
      <link>https://cloudnativecn.com/blog/introducing-ambient-mesh/</link>
      <pubDate>Thu, 08 Sep 2022 11:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/introducing-ambient-mesh/</guid>
      <description>&lt;p&gt;今天，我们很高兴地介绍 &lt;strong&gt;Ambient Mesh&lt;/strong&gt;（译者注：笔者更倾向于将其称为 Ambient Mode，即外围模式），这是一种新的 Istio 数据平面模式，旨在简化操作、扩大应用兼容性并降低基础设施成本。用户可以选择将 Ambient Mesh 集成到其基础设施的网格数据平面，放弃 sidecar 代理，同时保持 Istio 的零信任安全、遥测和流量管理等核心功能。我们正在与 Istio 社区分享 Ambient Mesh 的预览版，我们正努力在未来几个月内将其推向生产就绪。&lt;/p&gt;
&lt;h2 id=&#34;istio-和-sidecar&#34;&gt;Istio 和 Sidecar&lt;/h2&gt;
&lt;p&gt;自项目成立以来，Istio 架构的一个决定性特征是使用 sidecar—— 与应用容器一起部署的可编程代理。利用 sidecar，不需要对应用程序进行重大调整即可以享受服务网格带来的好处，省去运维的负担。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-的传统模式是将-envoy-代理作为-sidecar-部署在工作负载的-pod-中&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Istio 的传统模式是将 Envoy 代理作为 sidecar 部署在工作负载的 pod 中。&#34; srcset=&#34;
               /blog/introducing-ambient-mesh/e6c9d24ely1h5yyo2mg1bj21wj0u0gp0_hu_750b21dad7b695b2.webp 400w,
               /blog/introducing-ambient-mesh/e6c9d24ely1h5yyo2mg1bj21wj0u0gp0_hu_30cfe293e48724c8.webp 760w,
               /blog/introducing-ambient-mesh/e6c9d24ely1h5yyo2mg1bj21wj0u0gp0_hu_aa816a805cd4aafb.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/introducing-ambient-mesh/e6c9d24ely1h5yyo2mg1bj21wj0u0gp0_hu_750b21dad7b695b2.webp&#34;
               width=&#34;760&#34;
               height=&#34;333&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Istio 的传统模式是将 Envoy 代理作为 sidecar 部署在工作负载的 pod 中。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;虽然 sidecar 比起重构应用程序有显著的优势，但它们并没有在应用程序和 Istio 数据平面之间提供一个完美的分离。这导致了一些限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;侵入性&lt;/strong&gt;：sidecar 必须通过修改其 Kubernetes pod 配置和重定向 pod 内的流量来 &lt;strong&gt;注入&lt;/strong&gt; 应用程序。因此，安装或升级 sidecar 需要重新启动应用 pod，这对工作负载来说可能是破坏性的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源利用率低&lt;/strong&gt;：由于在每个工作负载 pod 都注入了 sidecar 代理，pod 必须为 sidecar 保留足够的 CPU 和内存，这可能导致整个集群的资源利用率下降。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;流量中断&lt;/strong&gt;：流量捕获和 HTTP 处理，通常由 Istio 的 sidecar 完成，计算成本很高，可能会破坏一些具有不符合 HTTP 实现的应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然 sidecar 有它的用武之地，后面会有更多的介绍 —— 但我们认为需要有一个侵入性更低、更容易的选择，这将更适合许多服务网格用户。&lt;/p&gt;
&lt;h2 id=&#34;分层&#34;&gt;分层&lt;/h2&gt;
&lt;p&gt;传统上，Istio 在单一的架构组件中实现了所有的数据平面功能，从基本的加密到高级的 L7 策略，这就是 sidecar。在实践中，这使得 sidecar 成为一个全有或全无的主张。即使工作负载只需要简单的传输安全，管理员仍然需要承担部署和维护 sidecar 的运营成本。Sidecar 对每个工作负载都有固定的运营成本，无法根据用例的复杂性进行扩展。&lt;/p&gt;
&lt;p&gt;Ambient Mesh 采取了一种不同的方法。它将 Istio 的功能分成两个不同的层次。在底层，有一个安全覆盖层，处理流量的路由和零信任安全。在这之上，当需要时，用户可以启用 L7 处理，以获得 Istio 的全部功能。L7 处理模式虽然比安全覆盖层更重，但仍作为基础设施的一个外围组件运行，不需要对应用 pod 进行修改。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ambient-mesh-分层&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Ambient Mesh 分层&#34;
           src=&#34;https://cloudnativecn.com/blog/introducing-ambient-mesh/ambient-mesh-layers.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Ambient Mesh 分层
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这种分层方法使用户能够以更多的增量方式采用 Istio，从无网格到安全覆盖，再到完全的 L7 处理，根据需要以每个命名空间为基础进行平稳过渡。此外，在不同氛围模式下运行的工作负载，或与 sidecar 无缝互通，允许用户根据随时间变化的特定需求来混合和匹配能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构建 Ambient Mesh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ambient Mesh 使用一个共享代理（agent），在 Kubernetes 集群的每个节点上运行。这个代理是一个零信任隧道（ztunnel），它的主要职责是安全地连接和验证网格内的元素。节点上的网络堆栈将参与工作负载的所有流量通过本地 ztunnel 代理重定向。这将 Istio 的数据平面与应用程序的关注点完全分开，最终允许运营人员启用、禁用、扩展和升级数据平面而不干扰应用程序。ztunnel 不对工作负载流量进行 L7 处理，使其明显比 sidecar 精简。这大大降低了复杂性和相关资源的使用成本，使它适合作为共享基础设施交付。&lt;/p&gt;
&lt;p&gt;Ztunnel 实现了服务网格的核心功能：零信任。当为命名空间启用 Ambient 时，会创建一个安全覆盖层。它为工作负载提供 mTLS、遥测、认证和 L4 授权，而无需终止或解析 HTTP。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-ambient-mesh-使用一个共享的每个节点的-ztunnel-来提供一个零信任的安全覆盖&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Ambient mesh 使用一个共享的、每个节点的 ztunnel 来提供一个零信任的安全覆盖。&#34; srcset=&#34;
               /blog/introducing-ambient-mesh/e6c9d24ely1h5z19731yhj21wj0u040v_hu_65864a37610371c0.webp 400w,
               /blog/introducing-ambient-mesh/e6c9d24ely1h5z19731yhj21wj0u040v_hu_9efe1520b5478d25.webp 760w,
               /blog/introducing-ambient-mesh/e6c9d24ely1h5z19731yhj21wj0u040v_hu_6249f9a98476a6f3.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/introducing-ambient-mesh/e6c9d24ely1h5z19731yhj21wj0u040v_hu_65864a37610371c0.webp&#34;
               width=&#34;760&#34;
               height=&#34;333&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Ambient mesh 使用一个共享的、每个节点的 ztunnel 来提供一个零信任的安全覆盖。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在启用 Ambient Mesh 和创建安全覆盖后，可以配置命名空间以利用 L7 功能。这允许命名空间实现全套的 Istio 功能，包括 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/virtual-service/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Virtual Service API&lt;/a&gt;、&lt;a href=&#34;https://istio.io/latest/docs/reference/config/telemetry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;L7 遥测&lt;/a&gt;和 &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;L7 授权策略&lt;/a&gt;。以这种模式运行的命名空间使用一个或多个基于 Envoy 的 &lt;strong&gt;Waypoint proxy&lt;/strong&gt;（路径点代理）来处理该命名空间的工作负载的 L7 处理。Istio 的控制平面将集群中的 ztunnel 配置为通过 waypoint 代理传递所有需要 L7 处理的流量。重要的是，从 Kubernetes 的角度来看，waypoint 代理只是普通的 pod，可以像其他 Kubernetes 部署一样进行自动扩展。我们预计这将为用户节省大量资源，因为路径代理可以自动扩展，以适应它们所服务的命名空间的实时流量需求，而不是运营人员预期的最大最坏情况下的负载。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-当需要额外的功能时ambient-mesh-会部署路径代理ztunnel-通过这些代理进行连接以执行策略&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;当需要额外的功能时，Ambient Mesh 会部署路径代理，Ztunnel 通过这些代理进行连接以执行策略。&#34; srcset=&#34;
               /blog/introducing-ambient-mesh/e6c9d24ely1h5yzsd8vv8j21wj0u00vx_hu_b4a3d2f26eecc252.webp 400w,
               /blog/introducing-ambient-mesh/e6c9d24ely1h5yzsd8vv8j21wj0u00vx_hu_1e9cb4b2afd3e7c7.webp 760w,
               /blog/introducing-ambient-mesh/e6c9d24ely1h5yzsd8vv8j21wj0u00vx_hu_2baa03696ddb9dd4.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/introducing-ambient-mesh/e6c9d24ely1h5yzsd8vv8j21wj0u00vx_hu_b4a3d2f26eecc252.webp&#34;
               width=&#34;760&#34;
               height=&#34;333&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      当需要额外的功能时，Ambient Mesh 会部署路径代理，Ztunnel 通过这些代理进行连接以执行策略。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Ambient Mesh 使用 &lt;strong&gt;HTTP CONNECT over mTLS&lt;/strong&gt; 来实现其安全隧道，并在路径中插入 waypoint 代理，这种模式我们称之为 &lt;strong&gt;HBONE&lt;/strong&gt;（HTTP-Based Overlay Network Environment，基于 HTTP 的重叠网络环境）。HBONE 提供了比 TLS 本身更干净的流量封装，同时实现了与普通负载均衡器基础设施的互操作性。默认使用 FIPS 构建，以满足合规性需求。关于 HBONE 的更多细节，其基于标准的方法，以及 UDP 和其他非 TCP 协议的计划，将在未来的博客中提供。&lt;/p&gt;
&lt;p&gt;在一个网格中混合 sidecar 和 ambient，不会对系统的能力或安全属性带来限制。Istio 控制平面确保策略的正确执行，无论选择何种部署模式。Ambient 只是引入了一个具有更好的人机工程学和更多灵活性的选项。&lt;/p&gt;
&lt;h2 id=&#34;为什么本地节点上没有-l7-处理&#34;&gt;为什么本地节点上没有 L7 处理？&lt;/h2&gt;
&lt;p&gt;Ambient 网格在节点上使用一个共享的 ztunnel 代理，它处理网格的零信任方面，而 L7 处理发生在单独调度的 pod 中的 waypoint 代理。为什么要费尽心机地进行转接，而不是直接在节点上使用一个共享的完整的 L7 代理？这有几个原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Envoy 本质上不是多租户的。因此，我们对在一个共享实例中混合来自多个无约束租户的 L7 流量的复杂处理规则有安全方面的担忧。通过严格限制 L4 处理，我们大大减少了漏洞的半径。&lt;/li&gt;
&lt;li&gt;与 waypoint 代理所需的 L7 处理相比，ztunnel 所提供的 mTLS 和 L4 功能需要的 CPU 和内存占用要小得多。通过将 waypoint 代理作为一个共享的命名空间资源来运行，我们可以根据该命名空间的需求来独立扩展它们，其成本不会不公平地分配给不相关的租户。&lt;/li&gt;
&lt;li&gt;通过减少 ztunnel 的范围，我们允许它被其他安全隧道的实现所取代，这些实现可以满足一个明确的互操作性协议。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;但是那些额外的跳数呢&#34;&gt;但是那些额外的跳数呢？&lt;/h2&gt;
&lt;p&gt;在 Ambient 网格中，waypoint 不一定保证与它所服务的工作负载在同一个节点上。虽然乍一看，这可能是一个性能问题，但我们相信，延迟最终将与 Istio 目前的 sidecar 实现保持一致。我们将在专门的性能博文中详细讨论，但现在我们将总结出两点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事实上，Istio 的大部分网络延迟并不是来自于网络（现代的云供应商拥有极快的网络）。相反，最大的罪魁祸首是 Istio 需要密集的 L7 处理来实现其复杂的功能集。与 sidecar 不同的是，sidecar 为每个连接实现了两个 L7 处理步骤（每个 sidecar 一个），而 Ambient 网格这两个步骤压缩成一个。在大多数情况下，我们希望这种减少的处理成本能够补偿额外的网络跳跃。&lt;/li&gt;
&lt;li&gt;用户通常在部署网格时，首先启用零信任的安全态势，然后根据需要选择性地启用 L7 功能。Ambient 网格允许这些用户在不需要时完全绕过 L7 处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;资源开销&#34;&gt;资源开销&lt;/h2&gt;
&lt;p&gt;总的来说，我们希望 Ambient Mesh 对大多数用户来说要求更少的资源，让资源需求更可预测。ztunnel 的有限责任允许它作为一个共享资源部署在节点上。这将大大减少大多数用户为每个工作负载的预留资源。此外，由于 waypoint 代理是正常的 Kubernetes pod，它们可以根据其服务的工作负载的实时流量需求进行动态部署和扩展。&lt;/p&gt;
&lt;p&gt;另一方面，sidecar 需要为每个工作负载的最坏情况保留内存和 CPU。进行这些计算是很复杂的，所以在实践中，管理员倾向于过度配置。这就导致了由于大量的资源预留导致其他工作负载无法被调度，从而导致节点利用率不足。Ambient 网格的每节点固定开销较低，动态扩展的 waypoint 代理需要的资源预留总体上要少得多，从而使集群的使用效率更高。&lt;/p&gt;
&lt;h2 id=&#34;安全性如何&#34;&gt;安全性如何？&lt;/h2&gt;
&lt;p&gt;一个全新的架构自然会带来安全方面的问题。&lt;a href=&#34;https://istio.io/latest/blog/2022/ambient-security/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient 安全博客&lt;/a&gt;对此做了深入的研究，我们将在此进行总结。&lt;/p&gt;
&lt;p&gt;Sidecar 与它们所服务的工作负载共处一地，因此，一个人的漏洞会损害另一个人。在 Ambient Mesh 模型中，即使一个应用程序被破坏，Ztunnel 和 waypoint 代理仍然可以对被破坏的应用程序的流量执行严格的安全策略。此外，鉴于 Envoy 是世界上最大的网络运营商所使用的经过实战考验的成熟软件，它的脆弱性很可能低于与它一起运行的应用程序。&lt;/p&gt;
&lt;p&gt;虽然 ztunnel 是一个共享资源，但它只能访问它所运行的节点上当前工作负载的密钥。因此，它的爆炸半径并不比任何其他依靠每个节点密钥进行加密的加密 CNI 差。另外，考虑到 ztunnel 有限的仅有的 L4 攻击面和 Envoy 的上述安全特性，我们觉得这种风险是有限的，可以接受的。&lt;/p&gt;
&lt;p&gt;最后，虽然 waypoint 代理是一种共享资源，但它们只限于为一个服务账户服务。这使得它们不会比现在的 sidecar 更糟；如果一个 waypoint 代理被攻破，与该 waypoint 相关的凭证就会丢失，而不会有其他问题。&lt;/p&gt;
&lt;h2 id=&#34;这是-sidecar-的终结吗&#34;&gt;这是 sidecar 的终结吗？&lt;/h2&gt;
&lt;p&gt;肯定不是。虽然我们相信 Ambient Mesh 将是许多网格用户未来的最佳选择，但对于那些需要专用数据平面资源的用户来说，如合规性或性能调整，sidecar 仍然是一个不错的选择。Istio 将继续支持 sidecar，而且重要的是，允许它们与 Ambient Mesh 无缝互通。事实上，我们今天发布的 Ambient Mesh 代码已经支持与基于 sidecar 的 Istio 的互操作。&lt;/p&gt;
&lt;h2 id=&#34;视频介绍&#34;&gt;视频介绍&lt;/h2&gt;
&lt;p&gt;请看一个简短的 &lt;a href=&#34;https://youtu.be/nupRBh9Iypo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YouTube 视频&lt;/a&gt;，看 Christian 运行 Istio Ambient Mesh 组件并演示一些功能。&lt;/p&gt;
&lt;h2 id=&#34;参与进来&#34;&gt;参与进来&lt;/h2&gt;
&lt;p&gt;我们今天发布的是 Istio 中 Ambient Mesh 的早期版本，它在很大程度上仍处于积极的开发之中。我们很高兴与更广泛的社区分享它，并期待着在 2023 年进入生产就绪阶段时，让更多人参与塑造它。&lt;/p&gt;
&lt;p&gt;我们希望得到你的反馈来帮助塑造这个解决方案。支持 Ambient Mesh 的 Istio 构建版可以在 &lt;a href=&#34;https://github.com/istio/istio/tree/experimental-ambient&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio 实验版&lt;/a&gt;中&lt;a href=&#34;https://istio.io/latest/blog/2022/get-started-ambient/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;下载和试用&lt;/a&gt;。在 &lt;a href=&#34;https://github.com/istio/istio/blob/experimental-ambient/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;README&lt;/a&gt; 中提供了一份缺失功能和工作项目的清单。请尝试一下，并 &lt;a href=&#34;https://slack.istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;让我们知道你的想法&lt;/a&gt;！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
