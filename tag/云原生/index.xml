<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>云原生 | 云原生社区</title>
    <link>https://cloudnative.to/tag/%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
      <atom:link href="https://cloudnative.to/tag/%E4%BA%91%E5%8E%9F%E7%94%9F/index.xml" rel="self" type="application/rss+xml" />
    <description>云原生</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Fri, 18 Feb 2022 16:00:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>云原生</title>
      <link>https://cloudnative.to/tag/%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
    </image>
    
    <item>
      <title>避免在微服务上失败的 7 个关注点</title>
      <link>https://cloudnative.to/blog/7-ways-to-fail-at-microservices/</link>
      <pubDate>Fri, 18 Feb 2022 16:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/7-ways-to-fail-at-microservices/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://www.infoq.com/articles/microservices-seven-fail/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;7 Ways to Fail at Microservices&lt;/a&gt;，作者总结了她见过的导致微服务落地失败的一些情况，并提出了 7 个重要的关注点以引导大家来尽量避免。译者是在工作闲暇时间完成的翻译，其中难免有不当之处，请读者指正。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文主要观点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微服务是一种手段，而不是目标&lt;/li&gt;
&lt;li&gt;分布式并不能保证解耦性&lt;/li&gt;
&lt;li&gt;合约测试（Contract Testing）是任何微服务架构的重要组成部分&lt;/li&gt;
&lt;li&gt;分解（Decomposition）需要发生在前端、后端和集成层，以及业务逻辑中&lt;/li&gt;
&lt;li&gt;如果企业没有能力快速、独立地发布微服务，那么微服务的许多好处就会丧失&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我（Holly Cummins）是 IBM 的一名 &lt;a href=&#34;https://www.linkedin.com/in/holly-k-cummins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;技术顾问&lt;/a&gt;，我的一部分工作是帮助企业实现云原生。在去年 11 月的 QCon Plus 上，我介绍了 &lt;a href=&#34;https://plus.qconferences.com/plus2021/presentation/7-ways-fail-microservices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一些不正确的微服务使用方式&lt;/a&gt;。这些问题是基于我的经验来整理的，它们是我在客户现场反复看到的一些问题。&lt;/p&gt;
&lt;p&gt;我看到的第一个问题是，我们有时甚至不知道问题出在哪里。人们觉得我们应该做 &lt;a href=&#34;https://microservices.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务&lt;/a&gt;，但我们并没有真正花足够的时间来定义我们为什么要做微服务。&lt;/p&gt;
&lt;p&gt;我们要解决的是什么问题？现在是什么问题在困扰我们？我们做了微服务之后，什么会更好？这是一个很自然的本能问题，尤其是对于我们这些技术人员来说。我们想直接开始用微服务去解决问题，同时想玩一些这样新的酷炫的技术。尽管这些也非常重要，但更应该清楚我们要通过微服务去解决什么问题。&lt;/p&gt;
&lt;p&gt;容器技术使这种 “直接开始用微服务去解决问题” 的情况变得更糟：因为容器是一种近乎神奇的技术，这使得它本身就是一个伟大的解决方案 —— 它是如此轻巧，它是如此的便携，它使许多事情变得更好。于是我们最终决定：“因为我已经有了这些容器，如果只在一个容器中运行我的应用程序，那将是对容器能力的严重浪费。我应该在尽可能多的容器中运行它！” 不幸的是，“没有足够的容器（来发挥伟大的容器技术的能力）” 并不是一个合理（分辨为什么我们需要微服务）的问题陈述。&lt;/p&gt;
&lt;h2 id=&#34;简历驱动的开发&#34;&gt;简历驱动的开发&lt;/h2&gt;
&lt;p&gt;我看到的另一个问题是 &lt;a href=&#34;http://radar.oreilly.com/2014/10/resume-driven-development.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;简历驱动的开发&lt;/a&gt;。我们在看自己的简历时，有时会觉得在应该在 “微服务” 这部分写点什么。既然什么都不写肯定是不好的，所以我们会想：“我可以通过重新架构我公司的技术架构来让我的个人简历变得更漂亮啊”。 读到这里时你可能在想，“不会吧，这也太功利了吧。应该没有人真的会为了完善他们的个人简历来做公司的架构决策吧？” 然而事实证明 &amp;hellip;&amp;hellip; 确实是有人会这么做的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/7-ways-to-fail-at-microservices/cv-driven-development_hu766a9303bf962c35a6437fa7c10bbe04_277881_3608ca00272da140d91b38ae64530f25.webp 400w,
               /blog/7-ways-to-fail-at-microservices/cv-driven-development_hu766a9303bf962c35a6437fa7c10bbe04_277881_b50a912cd2d56cb78a85df69c96e37c5.webp 760w,
               /blog/7-ways-to-fail-at-microservices/cv-driven-development_hu766a9303bf962c35a6437fa7c10bbe04_277881_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/7-ways-to-fail-at-microservices/cv-driven-development_hu766a9303bf962c35a6437fa7c10bbe04_277881_3608ca00272da140d91b38ae64530f25.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.redhat.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Red Hat&lt;/a&gt; 公司最近做了一项调查，调查了 &lt;a href=&#34;https://www.redhat.com/en/blog/red-hat-survey-reveals-career-progression-driving-developer-hunger-containers-and-kubernetes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于容器的开发的主要驱动因素&lt;/a&gt;。职业发展是头号驱动力。职业发展是简历驱动发展的一种更好的说法。&lt;/p&gt;
&lt;p&gt;避免在简历上出现微服务部分的缺口是一件重要的事，因为目前微服务几乎是一种新的主流技术理念。即使我们此刻没有寻找新的工作，我们也不希望成为异类 —— 当我们环顾四周，似乎其 TA 人都在做微服务。于是一种很自然的想法是，如果 TA 们都在做微服务，那我为什么不去做做微服务呢？我把这称为 “微服务嫉妒”（Microservice Envy）。&lt;/p&gt;
&lt;h2 id=&#34;微服务不是目标&#34;&gt;微服务不是目标&lt;/h2&gt;
&lt;p&gt;“微服务嫉妒” 是一个问题，因为微服务并不是我们应该羡慕的那种东西。我们的一位技术顾问同事有一个讲法，如果一个客户一直在谈论 Netflix 的技术并要求使用微服务，他就知道这个合作可能有问题了。几乎可以肯定的是，他们转向微服务的原因并不正确。如果对话更深入一些，涵盖了耦合和聚合等内容，那么他就知道客户他们转向微服务的原因确实存在问题。&lt;/p&gt;
&lt;p&gt;微服务转型的出发点不应该是微服务本身。微服务是实现业务敏捷性或弹性或同等的更高层次目标的手段。实际上，微服务甚至不是唯一的手段；它只是一种手段而已。&lt;/p&gt;
&lt;h3 id=&#34;分布式单体&#34;&gt;分布式单体&lt;/h3&gt;
&lt;p&gt;重要的是要问：“你是有微服务，还是有一个分布在数百个 Git 仓库的单体？” 不幸的是，这就是我们经常看到的情况。一个分布式的单体是一个可怕的东西 —— 很难说它到底怎样，它比纯粹单体更容易出错。在传统的单体中，所有的东西都包含在一个单一的开发环境中，你可以得到一些好处，如编译时检查和 IDE 重构支持。因为你总是在一个进程中执行，你可以得到有保障的函数执行。你不必担心记住分布式计算的谬误和服务发现，以及处理你试图调用的东西已经停止存在的情况，事情是比较安全的。另一方面，如果我们去掉了单体的安全性，但保留了耦合性，我们最终会得到 “云原生意大利面条”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;术语 “意大利面条架构”（Spaghetti Architecture）可以被定义为一个信息技术问题，它阻碍了企业快速解码和转换其应用程序和数据以满足不断变化的需求的能力。“意大利面条架构” 是一个源自一盘意大利面条外观的比喻。每根意大利面条代表每个业务工具，它们被纠结成无限的复杂线。—— 摘自《 &lt;a href=&#34;https://data-sleek.com/what-is-spaghetti-architecture-and-how-to-avoid-it/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;什么是 “意大利面架构” 和如何避免它&lt;/a&gt; 》。&lt;/p&gt;
&lt;p&gt;【编者按】“意大利面条” 这个比喻似乎可以理解为：各个服务虽然看似分离了，但却各种层面上耦合、混合在一起，同时还容易断裂、崩坏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分布式不等同于解耦&#34;&gt;分布式不等同于解耦&lt;/h2&gt;
&lt;p&gt;几年前，我被邀请到一个陷入困境的项目中去提供援助。当我进入项目时，团队对我说的第一件事就是 “每当我们改变一个微服务时，另一个服务就会出现故障”。如果你一直在关注微服务的优势，你就会知道，这与应该发生的事情完全相反。微服务应该是相互独立的，解耦的。然而，如果你把你的系统做成分布式，&lt;a href=&#34;https://en.wikipedia.org/wiki/Decoupling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;解耦&lt;/a&gt; 就变得不那么容易了（它是有代价的）。虽然 “分布式”（Distributed）和 “解耦”（Decoupled）都以 D 开头，但它们本身不是一回事。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/7-ways-to-fail-at-microservices/distributed-is-not-equal-to-decoupled_hu1e73b4b5955c9ead3e320289c0062335_135194_422f29376770997452732744d9ed4a45.webp 400w,
               /blog/7-ways-to-fail-at-microservices/distributed-is-not-equal-to-decoupled_hu1e73b4b5955c9ead3e320289c0062335_135194_5d9480d824f59fdc77ed0b9f3627a15f.webp 760w,
               /blog/7-ways-to-fail-at-microservices/distributed-is-not-equal-to-decoupled_hu1e73b4b5955c9ead3e320289c0062335_135194_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/7-ways-to-fail-at-microservices/distributed-is-not-equal-to-decoupled_hu1e73b4b5955c9ead3e320289c0062335_135194_422f29376770997452732744d9ed4a45.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;拥有一个高度分布式的系统是很有可能既具有分布式所带来的所有痛苦，同时又仍然是完全纠缠和耦合的。上面提到的困境就是在这种情况下发生的事情。当我开始探索代码库的时候，我不断地在每个代码仓库中看到相同的代码。这个应用程序的对象模型是相当复杂的，有大约 20 个类，其中一些类有 70 个字段。这是一个非常复杂的结构体。&lt;/p&gt;
&lt;p&gt;微服务开发的原则之一是充分的 DRY（Don&amp;rsquo;t Repeat Yourself），避开公共库，因为它们是耦合的来源。在这种情况下，为了避免中央对象库的耦合，每个微服务在其代码中都有一个剪切和粘贴的对象模型副本。但如果领域结构体（Domain Schema）仍然是共享的，就仍然存在耦合。复制对象代码并不能消除耦合，它只是消除了编译时检查的可能性。如果一个字段名改变了，它仍然会破坏所有人，但这种破坏直到运行时才会发生。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/7-ways-to-fail-at-microservices/bad-case-of-coupling_hu0d6a3b4f5fede532086d79c72ae057b6_190032_be84c1a06db2639725014378608e779f.webp 400w,
               /blog/7-ways-to-fail-at-microservices/bad-case-of-coupling_hu0d6a3b4f5fede532086d79c72ae057b6_190032_cd8b592d461819acb9263fdee2c5c8b0.webp 760w,
               /blog/7-ways-to-fail-at-microservices/bad-case-of-coupling_hu0d6a3b4f5fede532086d79c72ae057b6_190032_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/7-ways-to-fail-at-microservices/bad-case-of-coupling_hu0d6a3b4f5fede532086d79c72ae057b6_190032_be84c1a06db2639725014378608e779f.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这个悲伤的故事表明了领域驱动设计（Domain-Driven Design）原则在微服务中的重要性。我们要实现的理想情况是，每个微服务都能整齐地映射到一个领域。这样做的一个副作用，也是你做得对的一个标志，就是你的微服务的接口粒度很小。如果我们沿着技术边界而不是领域边界划分，我们最终会出现像我看到的情况；每个微服务都有一个巨大的、脆弱的接口。 其结果是一个支离破碎的 “意大利面条” 式的混乱状态。&lt;/p&gt;
&lt;h3 id=&#34;火星气候轨道飞行器&#34;&gt;火星气候轨道飞行器&lt;/h3&gt;
&lt;p&gt;虽然从技术上讲它是一个航天器，而不是一个微服务平台，但 &lt;a href=&#34;https://en.wikipedia.org/wiki/Mars_Climate_Orbiter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;火星气候轨道器&lt;/a&gt; 很好地展示了分布式和解耦之间的区别。NASA 在 1998 年发射了火星气候轨道器，其任务是研究火星气候。遗憾的是，轨道器没有成功绕过火星；相反，探测器坠入火星。NASA 的事后调查发现，问题源于两个不同的控制系统之间的关系，这两个系统由不同的团队建造。大多数时候，转向是由探测器本身的一个系统完成的。每隔几天，当轨道飞行器进入地球的视野时，佛罗里达州的监督控制系统就会发出航线修正。这大约是一个系统可以做到的分布式；它的一部分在太空中。但这两个系统之间的领域实际上是相似的：都在处理发动机推力的计算。 这两个团队在沟通中对界面的样子还不够清楚，所以他们最终使用了不同的单位。太空中的部分使用公制单位，地球上的部分使用英制单位，所以灾难发生了。我们可以肯定地说，在这种情况下，系统是非常分布式的，然而这种分布式并没有帮助。&lt;/p&gt;
&lt;h2 id=&#34;以消费者为导向的合约测试&#34;&gt;以消费者为导向的合约测试&lt;/h2&gt;
&lt;p&gt;这种微妙的沟通问题在有多个团队参与的时候经常发生。令人高兴的是，有一个很好的缓解措施：&lt;a href=&#34;https://pactflow.io/what-is-consumer-driven-contract-testing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;消费者驱动的合约测试&lt;/a&gt;。在 IDE 没有帮助我们进行类型检查的系统中，我们需要测试我们的集成，但我们希望尽量减少全面的集成测试。集成测试很重，运行成本很高，而且本身就是耦合的。 如果我们已经投资开发了微服务，我们不想在测试时倒退并制造一个大的集成单体。那么，我们如何让自己得到信心，让我们确信我们正在建立一个真正有效的东西呢？&lt;/p&gt;
&lt;p&gt;数据模拟（Mock）是一种常见的解决方案，但数据模拟本身也有一个问题。为了建立数据模拟，生产团队和消费团队在开发之初就会就接口的情况进行对话。他们达成了一个协议，然后消费团队就去尝试写一个数据模拟，这个模拟看起来就像他们对生产团队所说的代码的理解。在理想的情况下，他们会做得很好。问题是，消费团队经常会把自己的假设也写进了模拟中，而他们也许不是知道其他代码是什么样子的，是否是合适这部分模拟的，毕竟不是消费团队编写的代码。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/7-ways-to-fail-at-microservices/problems-with-mocks_hu2945884495b6956335ece91a44eb541d_137655_6c9a3f1369d7c4339974eb3a87456da6.webp 400w,
               /blog/7-ways-to-fail-at-microservices/problems-with-mocks_hu2945884495b6956335ece91a44eb541d_137655_da811cbcf823cc4f2ceb9069f056b0f5.webp 760w,
               /blog/7-ways-to-fail-at-microservices/problems-with-mocks_hu2945884495b6956335ece91a44eb541d_137655_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/7-ways-to-fail-at-microservices/problems-with-mocks_hu2945884495b6956335ece91a44eb541d_137655_6c9a3f1369d7c4339974eb3a87456da6.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在顺利的情况下，他们得到了正确的结果。单元测试全部通过，而且在集成阶段也继续通过，一切都很好。不幸的是，这并不总是发生。有时，实际的实现与消费团队所理解的不同，要么是因为生产团队改变了他们的想法，要么是因为某个地方的人做了一个不正确的假设。在这种情况下，测试仍然会通过。然而，当我们真正整合真实的服务时，它就会失败。问题是，模拟的行为没有经过真实服务的验证。生产团队很可能甚至从未见过已经创建的模拟。&lt;/p&gt;
&lt;p&gt;一个更好的选择是有一个消费者驱动的合约测试。合约测试的美妙之处，以及为什么它与模拟不同，是双方都与合约测试互动。对于消费者来说，合约测试就像一个方便的模拟。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/7-ways-to-fail-at-microservices/contract-testing_hu1bd3cf410c038ddf2815b60f5f55be6c_146401_e79f0c95672291e49838a5c045447fb7.webp 400w,
               /blog/7-ways-to-fail-at-microservices/contract-testing_hu1bd3cf410c038ddf2815b60f5f55be6c_146401_0bf41567b04eddad609826fe15e0ed43.webp 760w,
               /blog/7-ways-to-fail-at-microservices/contract-testing_hu1bd3cf410c038ddf2815b60f5f55be6c_146401_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/7-ways-to-fail-at-microservices/contract-testing_hu1bd3cf410c038ddf2815b60f5f55be6c_146401_e79f0c95672291e49838a5c045447fb7.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在另一方面，合约测试对于生产团队也是一个方便的功能测试。它是一个更深刻的验证，而不仅仅是像 &lt;a href=&#34;https://swagger.io/specification/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenAPI&lt;/a&gt; 的语法检查。合约测试实际上也会检查语义和行为，这节省了生产团队编写功能测试的时间。&lt;/p&gt;
&lt;p&gt;如果所有的东西都是兼容的并且工作的，所有的合约测试都会通过。这是一个快速的信心提升，因为它们运行起来成本很低、也很轻便。如果生产团队破坏了什么，他们的测试将失败，并提供早期警报，在破坏性变化逃逸到集成环境之前。如果 API 发生变化，新版本的合约就会被双方（或连接的中间人）提出。&lt;/p&gt;
&lt;p&gt;现在有几个不同的合约测试系统。如果你在 Spring 的生态系统中，&lt;a href=&#34;https://spring.io/projects/spring-cloud-contract&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Cloud Contract&lt;/a&gt; 工作得非常好。如果你是一个多面手，那么我非常喜欢 &lt;a href=&#34;https://pact.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pact&lt;/a&gt;。它有几乎所有你可能使用的语言的绑定。&lt;/p&gt;
&lt;h2 id=&#34;企业的毛球&#34;&gt;企业的毛球&lt;/h2&gt;
&lt;p&gt;当然，即使我们理清了所有的测试，即使我们在业务逻辑层有一套漂亮的解耦微服务，也不能保证成功。在我们的系统中还会有许多其他的元素，这些元素可能是我们在制定真正干净的微服务架构时没有考虑到的。我们对业务逻辑的开发非常投入，而忘记了前台和后台，以及所有的胶水层。在企业架构中，胶水层是非常可能存在的，而且是粘性的。我们的一位架构师把这称为 “企业毛球”（Enterprise Hairball）。&lt;/p&gt;
&lt;p&gt;如果我们把所有的功能分解工作都集中在业务层，我们最终往往会得到一堆整齐的解耦的微服务，夹在一个单体的前端和一个单体的数据库层之间。在这些类型的系统中，变革将是一个挑战。然而，作为一个行业，我们正在更好地分解数据库，以便将其映射到各个微服务上，并且我们正在开发微前端。&lt;/p&gt;
&lt;p&gt;但我们还没有完成分解。如果系统不是很复杂，我们将有一个集成层。这可能是消息传递系统，也可能是一些其他的集成解决方案，将复杂的系统拉到一起。即使在架构的其他部分实现现代化架构之后，集成层往往仍然是单体的，不灵活的。团队本身可能处于重大的负荷之下 —— 正如我的同事所称呼的 “恐慌的三明治”。因为集成层是单体的，他们必须小心翼翼地安排所有的变化，这就阻碍了其他所有人。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/7-ways-to-fail-at-microservices/integration-layer-sandwich_hucd7e81af8a83fee1109ea893c254407c_451655_d4569a5f47edae666cf8ee4c109f900c.webp 400w,
               /blog/7-ways-to-fail-at-microservices/integration-layer-sandwich_hucd7e81af8a83fee1109ea893c254407c_451655_691b31b72863d15079bcf6e7a1d9e4f9.webp 760w,
               /blog/7-ways-to-fail-at-microservices/integration-layer-sandwich_hucd7e81af8a83fee1109ea893c254407c_451655_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/7-ways-to-fail-at-microservices/integration-layer-sandwich_hucd7e81af8a83fee1109ea893c254407c_451655_d4569a5f47edae666cf8ee4c109f900c.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这可能会带来很多挫折感，特别是对集成团队来说。在外界看来，他们似乎反应迟钝，速度缓慢，尽管他们正在努力工作。为了理清这种耦合，我们需要采用模块化的集成模式。&lt;/p&gt;
&lt;p&gt;如果我们不把集成层、数据库和前端层分割开来，会发生什么？几乎可以肯定的是，我们的微服务不会达到我们想要的效果。“毛球” 各部分之间的依赖关系将使任何部分都无法快速移动。业务层的微服务将不能独立部署，部署的速度将明显地不连续。&lt;/p&gt;
&lt;h3 id=&#34;阻碍发布的拖累&#34;&gt;阻碍发布的拖累&lt;/h3&gt;
&lt;p&gt;你们有多少人经历过这种情况？你非常努力地工作，你创造了一些惊人的东西；你知道用户会喜欢它，但它还没有到他们手中。价值被摆在台面上了，但你那令人惊奇的东西却不能被发布。即使你有一个微服务架构，你也会有一个发布看板。所有其它的微服务都需要同时发布，因为它们需要一起测试，这样做的成本太高，除非正好是大批量服务同时发布。即使填写发布清单也很昂贵。大家时常会害怕发布，因为可能在过去曾被低劣的发布所深深地伤害。发布检查表、发布委员会、单线程测试和其它发布方法都是为了减少那些已知的风险。 因为整个组织的发布期限是共同的，所以我们最终不得不争分夺秒地在最后期限前把功能塞进去。当然，这也使得发布的风险更大。某个人正在跟踪一个电子表格，上面有所有微服务之间的依赖关系，这些微服务的耦合度比它们应该的要高。然而，发布还是得按期执行。当我们选择微服务时，这并不是我们所希望发生的！所有这些用心良苦设计的流程都成为了拖累，阻碍了价值到达用户手中，而且往往实际上又增加了风险。&lt;/p&gt;
&lt;h2 id=&#34;测试自动化&#34;&gt;测试自动化&lt;/h2&gt;
&lt;p&gt;通常情况下，我们如此害怕发布的原因是在发布中涉及到大量的手工工作。特别是，真正能给我们带来信心的测试并不是自动化的，所以我们需要做大量的工作来弄清楚我们的应用程序是否能工作。当我访问一个客户，听到 “我们的测试没有自动化” 时，我听到的是 “我们不知道我们的代码目前是否工作，它可能工作。上次我们做人工 QA 的时候它是有效的；我们希望它仍然有效”。这是一个可悲的情况。&lt;/p&gt;
&lt;p&gt;如果你关心你们的测试，就把它自动化 —— 质量是你应该关心的东西。特别是如果架构已经偏向于 “意大利面条”，并且耦合性已经悄然出现，那么就很可能出现断裂。去 “意大利面条化” 是很困难的，所以我们要在一个快速反馈的地方，尽可能早地发现断裂。如果你要成为 “意大利面条”，至少要成为经过测试的 “意大利面条”。&lt;/p&gt;
&lt;h2 id=&#34;发布周期&#34;&gt;发布周期&lt;/h2&gt;
&lt;p&gt;手动测试只是发布过程中涉及的手动流程的一部分。 在受监管或以合规性为重点的行业，几乎总是有一堆人工合规性工作。合规性是我们非常关心的事情 —— 所以我们应该把它自动化。&lt;/p&gt;
&lt;p&gt;有了所有这些手工流程和所有这些造成减速的流程，这意味着即使我们正在上云，但我们没有实际得到上云的红利。我们在使用云，但它好像又不是云。讽刺的是，在云中，我们曾经做过的事情、曾经是一个好主意的东西、曾经让我们更安全的事情，实际上正在伤害我们。旧式的治理在云中是行不通的，它不能实现我们所希望的商业结果，而且它失去了很多上云应得的商业利益。&lt;/p&gt;
&lt;p&gt;通过观察发布周期，很容易发现一个企业是否实现了上云的目标。几年前，我的一位同事与一家大型的传统银行进行了一次销售会谈。他们的市场被金融科技公司和新兴的挑战者银行吃掉了，这个企业明白他们为什么会输 —— 他们无法快速地跟上。他们来找我们，解释说他们有大量的 COBOL 资产，而这正是拖累他们的原因（很可能确实如此）。然后他们补充说，他们显然需要摆脱所有的 COBOL 并转向微服务，因为其他人都在做微服务。然后他们又说，他们的发布委员会一年只开两次会。讲到这里的时候，我的同事感觉不妙。如果你的发布委员会每六个月才开一次会，你就知道你的发布节奏将是每六个月一次。你有多少个可独立部署的微服务并不重要，你不可能在这种情况下获得敏捷性。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/7-ways-to-fail-at-microservices/be-careful-at-decomposing_hu8a2bbcdb6da0b8ebf69cbaebe5010923_261655_e7a4f6f8c887ca7cf6aa5dff9ddd5fbb.webp 400w,
               /blog/7-ways-to-fail-at-microservices/be-careful-at-decomposing_hu8a2bbcdb6da0b8ebf69cbaebe5010923_261655_d4b63da91497a90648f83da5316ce947.webp 760w,
               /blog/7-ways-to-fail-at-microservices/be-careful-at-decomposing_hu8a2bbcdb6da0b8ebf69cbaebe5010923_261655_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/7-ways-to-fail-at-microservices/be-careful-at-decomposing_hu8a2bbcdb6da0b8ebf69cbaebe5010923_261655_e7a4f6f8c887ca7cf6aa5dff9ddd5fbb.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这家银行需要的帮助并不是真正的技术帮助；他们需要改变他们对风险的思考方式，以及他们的运营方式，他们的发布计划需要进行彻底的改革，他们需要一大堆的自动化。缺乏持续交付的纪律性是阻碍他们获取敏捷的原因，而不是 COBOL。&lt;/p&gt;
&lt;p&gt;“我想进行分解” 是一个常见的客户要求，但分解有不止一个意思。当我们希望有一个分解的应用服务时，这并不能保证模块化 —— 有时它只是意味着乱七八糟的东西被分散得更广。如果有一些外部约束，比如发布看板和陈旧的工作流程，让我们总是被限制住，那在我们解决这些问题之前，我们如何分解都可能是徒劳无功的。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Holly Cummins&lt;/strong&gt; 是 IBM 企业战略部的创新领导者，并在 IBM Garage 担任顾问多年。作为 Garage 的一员，她为各行各业的客户提供技术驱动的创新，从银行业到餐饮业，从零售业到非政府组织。Holly 是 Oracle Java 冠军、IBM Q 大使和 JavaOne Rock Star。她与人合著了 Manning 的《Enterprise OSGi in Action》。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生关乎文化，而不是容器</title>
      <link>https://cloudnative.to/blog/cloud-native-culture-not-container/</link>
      <pubDate>Thu, 18 Mar 2021 11:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cloud-native-culture-not-container/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://www.infoq.com/articles/cloud-native-culture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud-Native Is about Culture, Not Containers&lt;/a&gt;，文章洋洋洒洒上万字，作者总结了她见过的云原生失败的各种经验教训，还用生动的示例说明了什么不是云原生。译者是在周末闲暇时间仓促间翻译的，其中难免有不当之处，请读者指正。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;本文主要观点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要一味的微服务，就可以做到非常的云原生。&lt;/li&gt;
&lt;li&gt;在开始云原生转型之前，必须明确云原生对你的团队意味着什么，以及要解决的真正问题是什么。&lt;/li&gt;
&lt;li&gt;如果发布涉及繁琐的仪式，不经常发布，而且所有的微服务都必须同时发布，那么微服务架构的好处将无法得到落实。&lt;/li&gt;
&lt;li&gt;持续集成和部署是你要做的事情，而不是你买的工具。&lt;/li&gt;
&lt;li&gt;过度的治理扼杀了云的效率，但如果你对消耗的东西不够重视，就会造成严重的浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在去年的伦敦 QCon 大会上，我提供了一个关于文化而非容器的云原生会议。让我开始思考文化在云原生中的作用的是 &lt;a href=&#34;https://www.infoq.com/articles/microservices-post-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bilgin Ibryam&lt;/a&gt; 一篇很棒的 &lt;a href=&#34;https://www.infoq.com/articles/microservices-post-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InfoQ 文章&lt;/a&gt;。Bilgin 做的其中一件事是将云原生架构定义为很多微服务，通过智能管道连接。我看了之后，觉得它看起来完全不像我写的应用，尽管我认为我在写云原生应用。我是 IBM Garage 的一员，帮助客户实现云原生，然而我很少在我的应用中使用微服务。我创建的应用大多看起来和 Bilgin 的图完全不一样。这是否意味着我做错了，或者说云原生的定义可能有点复杂？&lt;/p&gt;
&lt;p&gt;我不想把 Bilgin 单列出来，因为 Bilgin 的文章叫《后 Kubernetes 时代的微服务》，所以如果他在那篇文章中不是经常说到微服务，那就有点可笑了。事实也是如此，几乎所有关于云原生的定义都把它等同于微服务。无论在哪里，我都不断看到这样的假设：微服务等于云原生，云原生等于微服务。就连云原生计算基金会（CNCF）也曾经把云原生定义为：都是微服务，都是容器，还有一点动态编排在里面。说云原生并不总是涉及微服务，这让我陷入了这个特殊的境地，因为我不仅说 Bilgin 错了，我还说云原生计算基金会错了 —— 他们对云原生了解过什么？我相信我知道的比他们多得多吧？&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;img&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8ezatuj318q0u0dhn_hu6485f23e60e2e8e9568294bae27898e8_77282_5509d02b952b9531339a5de94c9a080b.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8ezatuj318q0u0dhn_hu6485f23e60e2e8e9568294bae27898e8_77282_b110f24432a7c1170fa439f8e55241a5.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8ezatuj318q0u0dhn_hu6485f23e60e2e8e9568294bae27898e8_77282_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8ezatuj318q0u0dhn_hu6485f23e60e2e8e9568294bae27898e8_77282_5509d02b952b9531339a5de94c9a080b.webp&#34;
               width=&#34;760&#34;
               height=&#34;510&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;显然我不知道在这个问题上，我站在了历史的错误一边。我承认这一点。虽然我站错了历史的一边，但我注意到 CNCF 已经更新了他们对云原生的定义，虽然微服务和容器仍然存在，但它们似乎不像以前那样必须，所以这一点历史可能在我这边！）。不管对不对，我还是要死在我的小山头上，那个 Cloud Native 是关于比微服务更大的东西。微服务是一种方式。它们不是唯一的方式。&lt;/p&gt;
&lt;p&gt;事实上，在我们的社区中，你确实看到了一系列的定义。如果你问一堆人 Cloud Native 是什么意思，有些人会说 &amp;ldquo;生长在云上&amp;rdquo;。这是非常原始的 Cloud Native 定义，早在微服务还没有出现的时候就已经有了。有人会说这是微服务。&lt;/p&gt;
&lt;p&gt;有人会说，&amp;ldquo;哦，不对，不只是微服务，是 Kubernetes 上的微服务，这样才有 Cloud Native&amp;rdquo;。这个我不喜欢，因为在我看来，Cloud Native 不应该是一个技术选择的问题。有时候我看到 Cloud Native 被当做 DevOps 的同义词，因为很多云原生的原则和实践和 DevOps 教的东西很相似。&lt;/p&gt;
&lt;p&gt;有时，我看到云原生的用法只是作为一种说 &amp;ldquo;我们正在开发现代软件&amp;rdquo; 的方式。&amp;ldquo;我们将使用最佳实践；它将是可观察的；它将是健壮的；我们将经常发布，并使一切自动化；简而言之，我们将采用过去 20 年所学到的一切，并以这种方式开发软件，这就是云原生的原因&amp;rdquo;。在这个定义中，云只是一种必然 —— 当然是在云上，因为我们是在 2021 年开发的。&lt;/p&gt;
&lt;p&gt;有时候我看到 Cloud Native 只是用来指云。我们听惯了 Cloud Native，以至于每次说到 Cloud 的时候，都觉得要在后面加上一个 &amp;ldquo;Native&amp;rdquo;，但其实我们只是在说 Cloud。最后，当人们说 Cloud Native 的时候，有时候他们的意思是 idempotent（幂等的）。这个问题是，如果你说 Cloud Native 的意思是 idempotent，其他人就会说：&amp;quot; 什么？我们说的 idempotent 真正的意思是可复用？如果我把它拿去，把它关了，然后再启动，运行结果跟之前也是一样的。这是对云上服务的一个基本要求。”&lt;/p&gt;
&lt;p&gt;有了这些不同的定义，难怪我们在做 Cloud Native 的时候，并不能完全确定我们要做的是什么。&lt;/p&gt;
&lt;h2 id=&#34;为什么&#34;&gt;为什么？&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;我们到底想实现什么？&amp;rdquo; 这是一个非常重要的问题。当我们在思考技术选择和技术风格的时候，我们要从 &amp;ldquo;我做 Cloud Native 是因为别人都在做退到思考我到底想解决什么问题？&amp;rdquo; 为了公平对待 CNCF，他们在对云原生的定义前面就有这个 &amp;ldquo;为什么&amp;rdquo;。他们说：&amp;quot; 云原生就是使用微服务来更快地构建伟大的产品。我们使用微服务不仅仅是因为我们想使用，我们使用微服务是因为微服务帮助我们更快地构建伟大的产品。”&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8erg3vj30pw0mz0t3_huf6bb2087ac2d66cdd5a940f08cea5ded_23634_7bdb211c3193503a67731a2bfa9b815c.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8erg3vj30pw0mz0t3_huf6bb2087ac2d66cdd5a940f08cea5ded_23634_5d5c6edcff1b095520d579a1870222a0.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8erg3vj30pw0mz0t3_huf6bb2087ac2d66cdd5a940f08cea5ded_23634_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8erg3vj30pw0mz0t3_huf6bb2087ac2d66cdd5a940f08cea5ded_23634_7bdb211c3193503a67731a2bfa9b815c.webp&#34;
               width=&#34;760&#34;
               height=&#34;674&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我们退一步确保我们理解要解决的问题。为什么我们之前不能更快地打造出优秀的产品？很容易跳过这一步，我想我们所有人有时候都会犯这样的毛病。有时候我们真正要解决的问题是，别人都在做，所以我们害怕错过，除非我们开始做。一旦我们这样说，FOMO（错失恐惧症）就不是一个很好的决策标准。更糟糕的是，&amp;ldquo;我的简历看起来很沉闷&amp;rdquo; 绝对不是选择技术的正确理由。&lt;/p&gt;
&lt;h2 id=&#34;为什么是云&#34;&gt;为什么是云？&lt;/h2&gt;
&lt;p&gt;我认为要想知道为什么我们应该以云原生的方式来做事情；我们要退一步说：&amp;ldquo;为什么我们在云上做事情？&amp;rdquo; 以下是原因。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;成本&lt;/strong&gt;：当我们刚开始把东西放在云上的时候，价格是主要的动机。我们说：&amp;ldquo;我有这个数据中心，我必须支付电费，我必须支付人员维护它。而且我必须购买所有的硬件。当我可以使用别人的数据中心时，我为什么要这么做呢？&amp;rdquo; 在自己的数据中心和别人的数据中心之间形成成本节约的原因是，自己的数据中心必须为最大需求储备足够的硬件。这有可能是大量的容量，而这些容量在大部分时间是没有使用的。如果是别人的数据中心，你可以集中资源。当需求低迷时，你不会为额外的容量付费。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;弹性&lt;/strong&gt;。云计算为你省钱的原因就是因为它的弹性。你可以扩大规模；你可以缩小规模。当然，这已经是旧闻了。我们都认为弹性是理所当然的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;速度&lt;/strong&gt;：我们现在之所以对云感兴趣，是因为速度。不一定是硬件的速度，虽然有些云硬件的速度可以快得让人眼花缭乱。云是使用 GPU 的一个很好的方式，这多少也是使用量子计算机的唯一方式。不过，更普遍的是，我们可以通过云端将一些东西以某种方式、某种方式更快地推向市场，这比我们不得不将软件打印到光盘上，然后邮寄给人们，甚至比我们不得不在自己的数据中心站立实例的时候还要快。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-因素&#34;&gt;12 因素&lt;/h2&gt;
&lt;p&gt;节约成本、弹性和交付速度都很好，但我们只要在云端就能得到这些。为什么我们需要云原生？我们需要云原生的原因是，很多公司发现他们试图上云，结果被电死了。&lt;/p&gt;
&lt;p&gt;事实证明，云上的东西需要用不同的方式来编写和管理。把这些不同的地方阐述出来，就形成了 12 因素。这 12 个因素是对你应该如何编写云应用的一系列规定，这样你就不会被电死。&lt;/p&gt;
&lt;p&gt;你可以说这 12 个因素描述了如何编写云原生应用 —— 但这 12 个因素与微服务完全没有关系。它们都是关于你如何管理应用的状态。它们是关于如何管理你的日志。12 个因素帮助应用程序变得幂等化，但 &amp;ldquo;12 因素&amp;rdquo; 比 &amp;ldquo;幂等化因素&amp;rdquo; 更吸引人。&lt;/p&gt;
&lt;p&gt;这 12 个因素是在 Docker 进入市场前两年发布的。Docker 容器彻底改变了云的使用方式。容器如此之好，很难夸大其重要性。它们解决了很多问题，创造了新的架构可能性。因为容器是如此的简单，所以可以将一个应用分布在许多容器上。有些公司在 100、200、300、400 或 500 个不同的容器上运行单个应用。与这样的工程实力相比，一个应用如果仅仅分布在 6 个容器上，似乎有点不够用。面对如此少的复杂性，人们很容易想到 &amp;ldquo;我一定是做错了。我还不如那边的开发者呢&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8fyo7yj316p0u0q61_huc0ebb44421fd993ebbc2037dd932e4d7_125286_afe2053b264bf0dba9f587692199434b.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8fyo7yj316p0u0q61_huc0ebb44421fd993ebbc2037dd932e4d7_125286_535aa348f17d44ef34e7355137b0b9c2.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8fyo7yj316p0u0q61_huc0ebb44421fd993ebbc2037dd932e4d7_125286_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8fyo7yj316p0u0q61_huc0ebb44421fd993ebbc2037dd932e4d7_125286_afe2053b264bf0dba9f587692199434b.webp&#34;
               width=&#34;760&#34;
               height=&#34;534&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;事实上，这不是比拼你能拥有多少个容器。容器是很好的，但你拥有的容器数量应该根据你的需求进行调整。&lt;/p&gt;
&lt;h2 id=&#34;速度&#34;&gt;速度&lt;/h2&gt;
&lt;p&gt;让我们试着回忆一下 —— 你的需求又是什么？当我们想到云的时候，我们通常要考虑的是速度。我们之所以想要大量的容器，是因为我们想要更快地将新的东西推向市场。如果我们有很多容器，我们要么把完全一样的东西推向市场，要么以同样的速度推向市场，那么突然之间，这些容器只是一种成本。它们并没有帮助我们，我们正在消耗周期来管理将应用分散在基础设施上的小块应用所带来的复杂性。如果我们有这个神奇的架构，可以让我们对市场做出反应，但我们没有做出反应，那就是一种浪费。如果我们有这个架构，意味着我们可以快速发展，但是我们没有快速发展，那么这也是一种浪费。&lt;/p&gt;
&lt;h2 id=&#34;如何在云原生中失败&#34;&gt;如何在云原生中失败&lt;/h2&gt;
&lt;p&gt;这让我想到了如何在云原生中失败。关于我的背景，我是一个顾问。我是 IBM Garage 的全栈开发人员。我们与初创公司和大公司合作，帮助他们上云，并从云中获得最大的好处。作为其中的一部分，我们帮助他们解决有趣的、艰难的问题，我们帮助他们以比以前更快的速度做软件。为了确保我们真的能从云端获得最大的收益，我们做了精益创业、极限编程、设计思维、DevOps；以及云原生。因为我是一个顾问，所以我看到很多客户都在云计算的旅程中。有时候很顺利，有时候也会有这些陷阱。以下是我看到聪明的客户掉进的一些陷阱。那么，什么是云原生？&lt;/p&gt;
&lt;p&gt;最早的一个陷阱就是关于云原生的意思。如果我说云原生，我是一个意思，而你说云原生，又是另一个意思，我们的沟通就会有问题&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;有时候这并不重要，但有时候却有很大的不同。如果一个人认为目标是微服务，然后另一个人觉得目标是拥有一个幂等的系统，呃哦。或者说，如果一个组织的一部分人想上云，因为他们认为云可以让他们更快地进入市场，但另一部分人上云只是为了和以前完全一样的速度，但更具成本效益，那么我们可能会在以后的道路上发生一些冲突。&lt;/p&gt;
&lt;h2 id=&#34;微服务环境&#34;&gt;微服务环境&lt;/h2&gt;
&lt;p&gt;通常情况下，促使人们对目标产生一些困惑的原因之一是，我们有一种自然的倾向，即看到其他人做着奇妙的事情，并想效仿他们。我们想自己去做那些奇妙的事情，而没有真正思考我们的环境和它们是否适合。我们的一位 IBM 研究员在去和客户谈微服务的时候，有一个启发式的方法。他说：&amp;ldquo;如果他们开始谈论 Netflix，而他们只是一直在谈论 Netflix，他们从来没有提到连贯性，也没有提到耦合，那么可能他们做这件事的原因并不正确。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;有时候我们和客户聊天，他们说：&amp;ldquo;对，我想现代化到微服务。&amp;rdquo; 好吧，微服务不是目标。没有客户会看着你的网站说，&amp;ldquo;哦，微服务。这很好。&amp;rdquo; 客户会看你的网站，并根据它是否满足他们的需求，是否简单和令人愉快，以及，所有这些其他事情来判断它。微服务可以是达到这个目的的一个很好的手段，但它们本身并不是一个目标。我还应该说：微服务是一种手段。它们不一定是实现这一目标的唯一手段。&lt;/p&gt;
&lt;p&gt;我在 IBM Garage 的一位同事与亚太地区的一家银行进行了一些对话。这家银行在响应客户时遇到了问题，因为他们的软件都很老旧、沉重和钙化。他们也遇到了人员问题，因为他们所有的 COBOL 开发人员都老了，而且都要离开工作岗位。因此，银行知道他们必须进行现代化改造。在这个案例中，主要的驱动力不是劳动力的老化，而是竞争力和灵活性。他们被竞争对手打败了，因为他们拥有大量的 COBOL 代码，而每次改变都是昂贵而缓慢的。他们说：&amp;ldquo;好吧，为了解决这个问题，我们需要摆脱所有的 COBOL，我们需要切换到现代微服务架构。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;到目前为止，还不错。我们正准备跳进一些云原生的好东西时，银行又说他们的发布板一年只开两次会。这时，我们又收手了。不管银行的新架构会有多少微服务，这些微服务都会被组装成一个大的单体发布包，每年部署两次。这就是拿了微服务的开销，却没有好处。因为这不是一场看你有多少容器的比赛，大量的容器和缓慢的发布将是一个绝对没有人赢的堆栈。&lt;/p&gt;
&lt;p&gt;大量的微服务被锁定在一个迟缓的发布节奏中，不仅不会是一种胜利，还可能是一种糟糕的损失。当组织尝试微服务时，他们并不总是像图片中的那样，最终得到一个美丽的解耦微服务架构。相反，他们最终得到的是一个分布式单体。这就像一个普通的单体，但要糟糕得多。之所以说这是格外可怕的坏事，是因为一个正常的、非分布式的单体有诸如编译时检查类型和同步的、有保证的内部通信。在单进程中运行会损害你的可扩展性，但这意味着你不能被分布式计算的谬误所困扰。如果你把同样的应用程序，然后只是在互联网上涂抹，不投入任何类型检查或投资于网络问题的错误处理，你不会有更好的客户体验，你会有更糟糕的客户体验。&lt;/p&gt;
&lt;p&gt;在很多情况下，微服务是错误的答案。如果你是一个小团队，你不需要有很多自主的团队，因为每个独立的团队会有大约四分之一的人。假设你没有任何计划，也不希望独立发布部分应用，那么你不会从微服务的独立性中获益。&lt;/p&gt;
&lt;p&gt;为了在你的应用程序的所有这些组件之间提供安全和可靠的通信和可发现性，你刚刚抹过云的一部分，你将需要类似服务网格的东西。你可能在技术曲线上很先进，或者对这个技术曲线有点陌生。你要么不知道服务网格是什么，要么你说：&amp;ldquo;我都知道服务网格是什么。那么复杂，那么夸张。我不需要服务网格。我只想自己搞一个服务网格。&amp;rdquo; 这不一定会给你带来你所希望的结果。你最终还是会得到一个服务网格，但你必须维护它，因为它是你写的！不做微服务的另一个很好的理由是，有时候领域模型就是没有那些天然的断裂点，让你得到漂亮整洁的微服务。在这种情况下，完全有理由说：&amp;ldquo;你知道吗？我就不做了。&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;云原生面条&#34;&gt;云原生面条&lt;/h2&gt;
&lt;p&gt;如果你不从杂乱中走出来，那么你最终会遇到下一个问题，那就是云原生面条。当我看 Netflix 微服务的通信图时，我总觉得有些恐慌。我确信他们知道自己在做什么，而且他们已经想好了，但在我眼里，它看起来完全像意大利面条。让它发挥作用需要很多真正扎实的工程和专门的技能。如果你不具备这种专业性，那么你最终会陷入混乱的局面。&lt;/p&gt;
&lt;p&gt;我被邀请去给一个正在苦苦挣扎的客户做一些支持工作。他们正在开发一个绿地应用，所以他们当然选择了微服务，以尽可能的现代化。他们对我说的第一句话就是：&amp;ldquo;只要我们修改任何代码，其他的东西就会坏掉。&amp;rdquo; 这不是微服务应该发生的事情。事实上，这与我们都被告知如果我们实现微服务会发生的情况完全相反。微服务的梦想是它们是解耦的。遗憾的是，解耦并不是免费的。它当然不会因为你分布式的东西而神奇地发生。当你分布式的东西时，所发生的是你有两个问题而不是一个问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8brcb6j315h0u0ta7_hudd46e8abbf8269aa97aa0a18c770a287_65385_4a74bcaf626df1169f607eb6b462655a.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8brcb6j315h0u0ta7_hudd46e8abbf8269aa97aa0a18c770a287_65385_22290bf68eb58ee511b607171e6ff5f6.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8brcb6j315h0u0ta7_hudd46e8abbf8269aa97aa0a18c770a287_65385_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8brcb6j315h0u0ta7_hudd46e8abbf8269aa97aa0a18c770a287_65385_4a74bcaf626df1169f607eb6b462655a.webp&#34;
               width=&#34;760&#34;
               height=&#34;550&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生面条还是面条。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的客户的代码之所以这么脆弱，耦合性这么强，其中一个原因是他们的对象模型相当复杂，大约有 20 个类，部分类中有 70 个字段。在微服务系统中处理这种复杂的对象模型是很难的。在这种情况下，他们看了看他们复杂的对象模型，决定：&amp;ldquo;我们知道在我们的微服务之间有共同的代码是非常不好的，因为这样我们就没有解耦。相反，我们要在我们所有的六个微服务中复制和粘贴这个共同的对象模型。因为我们剪切和粘贴它，而不是链接到它，所以我们是解耦的。&amp;rdquo; 嗯，不，你不是解耦的。如果当一件事情发生变化的时候，不管是链接还是复制代码，事情就会中断，这就是耦合。&lt;/p&gt;
&lt;p&gt;在这种情况下，什么是 &amp;ldquo;正确&amp;rdquo; 的做法？在理想的情况下，每个微服务都会整齐地映射到一个域上，而且它们很有区别。如果你有一个大域和很多微小的微服务，那就会有问题了。解决的办法是，要么决定领域真的很大，然后合并微服务，要么做更深层次的领域建模，尝试把对象模型解开，变成不同的边界上下文。&lt;/p&gt;
&lt;p&gt;即使是最干净的域分离，在任何系统中，组件之间总会有一些接触点 —— 这才是系统的本质。这些接触点很容易出错，即使它们是最小的，尤其是当它们是隐藏的。你还记得 &amp;ldquo;火星气候轨道器&amp;rdquo; 吗？与 &amp;ldquo;毅力号&amp;rdquo; 不同的是，它被设计为在安全距离内绕着火星运行，而不是在火星上着陆。遗憾的是，它离火星太近了，被火星的引力拉了进去，然后坠毁了。探测器的失利令人惋惜，根本原因就是个悲剧。轨道器由两个模块控制，一个是探测器，一个是地球上的模块。探测模块是半自主的，因为从地球上大部分时间看不到轨道器。大约每隔三天，行星就会对准，它就会出现在视野中，地球上的团队就会微调它的运行轨迹我猜想当时的指令是这样的：&amp;ldquo;哦，我想你需要向左移动一点，哦，如果你不向右移动一点，你就会错过火星。&amp;rdquo; 除了数字。&lt;/p&gt;
&lt;p&gt;数字是导致问题的原因。地球模块和探测模块是由两个不同的团队建造的两个不同的系统。探测器使用的是英制单位，而 JPL 地面团队使用的是公制单位。尽管这两个系统看起来是独立的，但它们之间有一个非常重要的耦合点。每次地面团队传送指令时，他们发送的指令都会以一种谁也想不到的方式进行解释。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8auha4j31460u0myk_hu3fb4d088e7fc4c12550328faaea6f578_62162_339d7161355a0b9d54778d2bf5c1fe48.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8auha4j31460u0myk_hu3fb4d088e7fc4c12550328faaea6f578_62162_29757808cb3625d7b85708c2c92dee66.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8auha4j31460u0myk_hu3fb4d088e7fc4c12550328faaea6f578_62162_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8auha4j31460u0myk_hu3fb4d088e7fc4c12550328faaea6f578_62162_339d7161355a0b9d54778d2bf5c1fe48.webp&#34;
               width=&#34;760&#34;
               height=&#34;567&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个故事的寓意是，分布式系统没有帮助。一部分系统在火星上，一部分系统在地球上，你不能比这更分散。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;微服务需要消费者驱动的接触测试&#34;&gt;微服务需要消费者驱动的接触测试&lt;/h2&gt;
&lt;p&gt;在这种情况下，解决方案，正确的做法是真正明确耦合点是什么，双方各自的期望值是什么。一个很好的方法就是消费者协议驱动的测试（Contract-driven Test）。尽管接触测试（Contract Test）是解决一个大问题的干净利落的办法，但在我们这个行业还没有被广泛使用。我认为部分问题是，它们可能有点棘手，难以学习，这减缓了采用的速度。关于测试的跨团队谈判也会很复杂 —— 尽管如果关于测试的谈判太难，关于实际交互参数的谈判会更难。如果你正在考虑探索接触测试，Spring Contract 或 Pact 是不错的起点。哪一个适合你，取决于你的环境。Spring Contract 很好地集成到了 Spring 生态系统中，而 Pact 是框架无关的，并且支持大量的语言，包括 Java 和 Javascript。&lt;/p&gt;
&lt;p&gt;接触测试远远超出了 OpenAPI 验证的作用，因为它检查的是 API 的语义，而不仅仅是语法。它比 &amp;ldquo;好吧，两边的字段都有相同的名字，所以我们很好。&amp;rdquo; 这是个更有用的检查，它允许你检查，&amp;ldquo;当我得到这些输入时，我的行为是否是预期的行为？我在那边命名的关于那个 API 的假设是否仍然有效？&amp;rdquo; 这些都是你需要检查的东西，因为如果它们不是真的，事情就会变得非常糟糕。&lt;/p&gt;
&lt;p&gt;很多公司都意识到了这个风险，也意识到做微服务的时候系统有不稳定的地方。为了有信心这些东西能一起工作，他们在发布之前会施加一个 UAT 阶段。在任何微服务发布之前，需要有人花几周时间测试它在更广泛的系统中是否正常工作。有了这样的开销，发布不会经常发生。那么这就引出了经典的反模式，那就是不连续的持续集成和持续部署，或者说 I/D。&lt;/p&gt;
&lt;h3 id=&#34;为什么持续集成而不持续部署&#34;&gt;为什么持续集成而不持续部署&lt;/h3&gt;
&lt;p&gt;我和很多客户交流，他们会说：&amp;ldquo;我们有一个 CI/CD。&amp;rdquo; 这给我们敲响了警钟，因为 CI/CD，不应该是你买了一个工具，放在服务器上，然后欣赏，说 &amp;ldquo;有 CI/CD。&amp;ldquo;CD/CD 是你必须要做的事情。这两个字母分别代表持续集成和持续部署或交付。连续在这里意味着 &amp;ldquo;真的经常集成&amp;rdquo; 和 &amp;ldquo;真的经常部署&amp;rdquo;，如果你没有做到这一点，那么根本就不是连续。&lt;/p&gt;
&lt;p&gt;有时候我会无意中听到这样的评论：&amp;ldquo;下周我就把我的分支合并到我们的 CI 系统中&amp;rdquo;。这完全忽略了 &amp;ldquo;CI&amp;rdquo; 中的 &amp;ldquo;C&amp;rdquo;，它代表的是持续。如果你每周合并一次，那就不是连续。这几乎是连续的反义词。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;D&amp;rdquo; 部分可能会更加困难。如果软件每半年才部署一次，CI/CD 服务器可能很有用，但是没有人做 CD。可能有 &amp;ldquo;D&amp;rdquo;，但大家都忘记了 &amp;ldquo;C&amp;rdquo; 的部分。&lt;/p&gt;
&lt;p&gt;到底多长时间推送一次才是合理的？连续性得有多连续？甚至我也承认，一些严格定义的连续会是一个团队中写软件的可笑方式。如果你把每一个角色都推到 main，这在技术上是连续的，但它会在团队中造成混乱。如果你每次提交都集成，并且目标是每小时提交几次，这可能是一个很好的节奏。如果你经常提交，每隔几次提交就集成一次，那么你每天推送几次，这样也是很好的。如果你做的是测试驱动的开发，那么当你得到一个合格的测试时，集成是一个很好的模式。我很提倡基于主干的开发（TBD）。TBD 在调试、实现机会主义重构、避免同事出现大的意外等方面有很多好处。基于主干的开发的技术定义是，你需要每天至少集成一次才算。我有时会听到 &amp;ldquo;每天一次&amp;rdquo; 被描述为 &amp;ldquo;还好&amp;rdquo; 和 &amp;ldquo;就是不连续&amp;rdquo; 之类的。一周一次就真的很成问题了。&lt;/p&gt;
&lt;p&gt;一旦你每个月一次，那就太可怕了。当我加入 IBM 的时候，我们用的是一个构建系统和一个代码仓库，叫 CMVC。对于背景来说，这大概是二十年前的事情，我们整个行业都比较年轻，比较愚蠢。我在 IBM 的第一份工作是帮助构建 WebSphere 应用服务器。我们有一个大型的多站点构建，团队每周有六天开会，包括周六，讨论任何构建失败的问题。那个电话有很多重点，你不希望在 WebSphere 构建电话中被叫起来。我刚从大学毕业，对团队中的软件开发一窍不通，所以一些资深的开发人员把我收在了他们的手下。我至今还记得的一个建议是，避免被 WebSphere 构建调用的方法是将你所有的修改在本地机器上保存半年，然后全部批量推送。&lt;/p&gt;
&lt;p&gt;在这个项目上，我还小，我想，好吧，这似乎不是很正确的建议，但我想你最清楚。事后看来，我意识到 WebSphere 的构建破坏得很严重，因为人们将他们的变化保存了六个月，然后才试图与他们的同事进行整合。很明显，那是行不通的，我们改变了做事的方式。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8b81awj31bk0u0myq_huca0cae54aee87cd6d3ef6aab02295aac_68194_56c13ed0b6eced85963dfa16ad7a0571.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8b81awj31bk0u0myq_huca0cae54aee87cd6d3ef6aab02295aac_68194_f5fc89ac841249eed7401518adcb53b0.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8b81awj31bk0u0myq_huca0cae54aee87cd6d3ef6aab02295aac_68194_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8b81awj31bk0u0myq_huca0cae54aee87cd6d3ef6aab02295aac_68194_56c13ed0b6eced85963dfa16ad7a0571.webp&#34;
               width=&#34;760&#34;
               height=&#34;479&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你应该多久整合一次？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下一个更难的问题是，你应该多久发布一次？和集成一样，有一个合理的选择范围。你可以每次推送都发布。许多技术公司都这样做。如果你每次迭代部署一次，你还是很有优势的。一个季度发布一次就有点悲哀了。你可以每两年发布一次。现在看来慢得荒唐，但在糟糕的过去，这是我们行业的标准模式。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8c9crij31m70u0abo_hu317f5fbf466ae1af43500c1807287a02_69950_a6cad236d7ff1d1b7a1027f926e292fc.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8c9crij31m70u0abo_hu317f5fbf466ae1af43500c1807287a02_69950_64622f3b11b84d133a52caa1f0e841fc.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8c9crij31m70u0abo_hu317f5fbf466ae1af43500c1807287a02_69950_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8c9crij31m70u0abo_hu317f5fbf466ae1af43500c1807287a02_69950_a6cad236d7ff1d1b7a1027f926e292fc.webp&#34;
               width=&#34;760&#34;
               height=&#34;392&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多久应该部署到生产中一次？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之所以每次推送都能部署到生产中，是因为部署不等于发布。如果我们的新代码太不完整或者太吓人，无法真正展示给用户，我们仍然可以部署它，但要把它隐藏起来。我们可以让代码实际存在于生产代码库中，但没有任何东西与之相连。这样就很安全了。如果我们已经有点太纠结了，我们可以使用功能标志来翻开和关闭功能。如果我们感觉更冒险，我们可以做 A/B 或亲朋好友测试，这样只有一小部分用户看到我们可怕的代码。金丝雀部署是另一种变化，用于预先检测噩梦，在它们进入主流使用之前。&lt;/p&gt;
&lt;p&gt;不发布有两个不好的后果。它延长了反馈周期，这会影响决策，并使工程师感到悲伤。从经济上讲，这也意味着有库存（工作软件）坐在货架上，而不是送到客户手中。精益原则告诉我们，有库存放在那里，不产生退货，就是浪费。&lt;/p&gt;
&lt;p&gt;那么话题就是，为什么我们不能发布这个？是什么阻止了更频繁的部署？很多组织害怕他们的微服务，他们希望对整个组件进行集成测试，通常是手动集成测试。有一个客户，有大约 60 个微服务，他们希望确保不存在某个聪明的工程师火花可以发布一个微服务而不发布其他 59 个微服务的可能性。为了强制执行这一点，他们为所有的微服务大批量地设置了一个单一的管道。这显然不是微服务的价值取向，即微服务是可以独立部署的。可悲的是，这是他们觉得最安全的方式。&lt;/p&gt;
&lt;p&gt;我们也看到了因为对质量和完整性的担忧，实际上不愿意交付。当然，这些并不荒唐。你不想激怒你的客户。另一方面，就像里德・霍夫曼所说的那样，如果你没有因为第一次发布而感到尴尬，那就太晚了。持续改进是有价值的，让东西被使用也是有价值的。&lt;/p&gt;
&lt;p&gt;如果发布的频率不高，而且是单体的，你就有了这些漂亮的微服务架构，可以让你走得更快，然而你走得很慢。这是坏的业务，也是坏的工程。&lt;/p&gt;
&lt;p&gt;假设你选择了频繁部署。所有保护你的用户不受半成品功能影响的东西，比如自动测试、功能标志、A/B 测试、SRE，都需要大量的自动化。通常当我开始与客户合作时，我们有一个关于测试的问题，他们说：&amp;ldquo;哦，我们的测试不是自动化的。&amp;rdquo; 这意味着他们实际上不知道代码是否在任何特定的点上工作。他们希望它能工作，而且上次检查时可能已经工作了，但我们没有任何办法在不运行手动测试的情况下知道它现在是否工作。&lt;/p&gt;
&lt;p&gt;问题是，退步是会发生的。即使所有的工程师都是最完美的工程师，也有一个不那么完美的外部世界。他们所依赖的系统可能会有意想不到的行为。如果一个依赖更新改变了行为，即使没有人做错任何事情，也会有一些东西被破坏。这就回到了 &amp;ldquo;我们不能交付是因为我们对质量没有信心&amp;rdquo; 的问题上。好吧，让我们解决对质量的信心问题，然后我们就可以交付了。&lt;/p&gt;
&lt;p&gt;我谈到了合同测试。这很便宜，也很简单，可以在单元测试层面进行，当然，你也需要自动化集成测试。你不希望依赖手动集成测试，否则它们会成为瓶颈。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;CI/CD&amp;rdquo; 似乎已经取代了我们词汇中的 &amp;ldquo;构建&amp;rdquo;，但在这两种情况下，它都是你作为一个工程组织所拥有的最有价值的东西之一。它应该是你的朋友，它应该是这种无处不在的存在。有时候构建的方式是，它在某个地方的 Jenkins 系统上被关闭了。稍微勤快一点的人时不时去检查一下网页，发现是红色的，就去告诉同事，最后有人把问题解决了。更好的是只是一个被动的构建指标，大家都可以看到，而不需要单独打开一个页面来查看。如果显示器红了，真的很明显，那就是有变化了，而且很容易看最近的变化。如果你有一个项目，红绿灯就可以用。如果你有微服务，你可能会需要类似一组磁贴的东西。即使你没有微服务，你可能会有好几个项目，所以你需要比红绿灯更完整一点的东西，尽管红绿灯很可爱。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8aipgyj313u0u0my0_hu1d7c4fde505f04b999839c126b79c9cb_41727_9c54ba484a9c632407a517d5ea00619d.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8aipgyj313u0u0my0_hu1d7c4fde505f04b999839c126b79c9cb_41727_e0ed0113d2fa8f3ed5cb32c2b0a995a0.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8aipgyj313u0u0my0_hu1d7c4fde505f04b999839c126b79c9cb_41727_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8aipgyj313u0u0my0_hu1d7c4fde505f04b999839c126b79c9cb_41727_9c54ba484a9c632407a517d5ea00619d.webp&#34;
               width=&#34;760&#34;
               height=&#34;573&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们不知道什么时候构建好了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你投资你的构建监控，那么你最终会出现破窗的情况。我到了客户那里，第一件事就是看了一下构建，我说：&amp;ldquo;哦，这个构建好像坏了。&amp;rdquo; 他们说：&amp;ldquo;是啊，已经坏了几个星期了。&amp;rdquo; 这时，我就知道我有很多工作要做了！&lt;/p&gt;
&lt;p&gt;为什么一个“破窗”的构建是不好的？这意味着你无法进行自动化集成测试，因为没有任何东西能从构建中做出来。事实上，你甚至无法进行手动集成测试，所以服务间的兼容性可能会恶化，而且没有人会知道。&lt;/p&gt;
&lt;p&gt;新的回归没有被发现，因为这个构建已经红了。也许最糟糕的是，它创造了一种文化，所以当其他构建中的一个红色时，人们并不那么担心，因为它更多的是相同的：&amp;ldquo;现在我们有两个红色。也许我们可以弄到整套的，然后如果我们把它们都弄红了，就能匹配了。&amp;rdquo; 嗯，不，不应该是这样的。&lt;/p&gt;
&lt;h2 id=&#34;锁定的完全僵化的不灵活的云雾缭绕的云端&#34;&gt;锁定的完全僵化的、不灵活的、云雾缭绕的云端&lt;/h2&gt;
&lt;p&gt;这些都是发生在团队层面的挑战。它们是关于我们作为工程师如何管理自己和我们的代码。但当然，尤其是当你到了一定规模的组织，你最终会面临另一系列的挑战，那就是组织如何使用云。我注意到，有些组织喜欢把云，变成一个锁定的、完全僵化的、灵活的、没有云的云。&lt;/p&gt;
&lt;p&gt;如何让一个云端不云端？你说：&amp;ldquo;好吧，我知道你可以走得很快，我知道你所有的自动化支持都走得很快，但是我们有一个流程。我们有一个架构评审委员会，它的会议相当不频繁。&amp;rdquo; 它将在项目准备交付后一个月开会，或者在最坏的情况下，它将在项目已经交付后一个月开会。虽然东西已经交付了，但我们还是在走流程。架构将在已经在现场验证后进行纸面审查，这是愚蠢的。&lt;/p&gt;
&lt;p&gt;有人曾经给我讲过一个故事。一个客户向他们抱怨说，IBM 卖给他们的一些配置软件不能用。当时我们承诺我们的精巧的配置软件可以让他们在十分钟内创建虚拟机。这是几年前的事了，当时 &amp;ldquo;10 分钟创建一个虚拟机&amp;rdquo; 是很先进很酷的。我们向他们承诺，这将是美好的。&lt;/p&gt;
&lt;p&gt;当客户安装好它并开始使用时，他们并没有发现它的美妙。他们以为他们会得到 10 分钟的供应时间，但他们看到的是，他们花了三个月的时间来供应一个云实例。他们回来找我们，他们说：&amp;ldquo;你们的软件完全坏了。你卖错了。你看，花了三个月的时间。&amp;rdquo; 我们对此感到疑惑，于是我们进去做了一些调查。事实证明，发生了什么事，他们创建了一个 84 步的预批准程序，以获得其中的一个实例。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8gdpbcj31190u0jsy_hu6485f23e60e2e8e9568294bae27898e8_68226_c9dc6e3920d5e808b90bc612634cc6b3.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8gdpbcj31190u0jsy_hu6485f23e60e2e8e9568294bae27898e8_68226_9a3fb8686fbc5ae6d4e4f32c6f664b1e.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8gdpbcj31190u0jsy_hu6485f23e60e2e8e9568294bae27898e8_68226_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8gdpbcj31190u0jsy_hu6485f23e60e2e8e9568294bae27898e8_68226_c9dc6e3920d5e808b90bc612634cc6b3.webp&#34;
               width=&#34;760&#34;
               height=&#34;612&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这款供应软件已经坏了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;技术有了，但文化没有，所以技术没有用。这是可悲的。我们把这个云，这是一个美丽的云，它有所有这些神奇的属性，它让一切都变得非常简单，然后组织的另一部分人说，&amp;ldquo;哦，这有点可怕。我们不会希望人们真的能够做事情。让我们把它关进笼子里吧！&amp;rdquo; 那种老式的重文案的治理方式是行不通的 —— 同时也是真的让大家很烦。它不会给出结果。更糟糕的是，它实际上不会让事情变得更安全。它可能会使他们更不安全。它肯定会让事情变得更慢，而且要花钱。我们不应该这样做。&lt;/p&gt;
&lt;p&gt;我和另一个客户聊过，那是一家大型汽车公司，他们在云计算供应方面遇到了真正的问题。他们花了很长的时间来获得实例。他们认为，&amp;ldquo;我们要解决这个问题的方法是我们要从供应商 A 转移到供应商 B。&amp;rdquo; 这可能会奏效，但实际上缓慢的问题是他们的内部采购。切换供应商会绕过他们既定的采购流程，所以可能会加快一段时间，但最终，他们的治理团队会注意到新的供应商，并实施控制。一旦发生这种情况，他们就会将监管落实到位，然后恢复现状。他们所有的成本会改变，但实际上没有任何的好处。这有点像，我很抱歉地说，我有时会受到这样的诱惑 —— 如果你看着你的炉子，你决定，&amp;ldquo;哦，那个烤箱很脏。清理很困难，所以我要搬家，所以我没有清洁烤箱。&amp;rdquo; 但后来，当然，同样的事情发生在其他房子，和新的烤箱变得肮脏。你需要一个更可持续的过程，而不是仅仅更换供应商来试图超越自己的采购。&lt;/p&gt;
&lt;p&gt;如果只有开发者在改变，如果只有开发者在走 Cloud Native 的道路，那么就是行不通的。这并不意味着开发者驱动的自由竞争是正确的模式。如果周围没有一些治理，那么云就会变成一个神秘的钱坑。我们很多人都遇到过这样的问题：看着云账单，觉得 &amp;ldquo;嗯。是啊，这么多，我也不明白钱都花到了哪里，也不明白是谁花的。&amp;rdquo;&lt;/p&gt;
&lt;p&gt;用云端配置硬件是如此简单，但这并不意味着硬件是免费的。还是要有人为它付费。硬件很容易配置，也不能保证硬件有用。&lt;/p&gt;
&lt;p&gt;当我刚开始学习 Kubernetes 的时候，我当然也尝试过。我创建了一个集群，但后来我就偏离了轨道，因为我有太多的工作在进行。过了两个月，我又回到我的集群，发现这个集群一个月大约 1000 英镑&amp;hellip;&amp;hellip; 而且是完全没有价值的。太浪费了，我现在想起来还觉得恶心。&lt;/p&gt;
&lt;p&gt;我们的技术使我们能够做的很多事情都是为了提高效率。伟大的管理顾问彼得・德鲁克说过：&amp;ldquo;没有什么比高效地做那些根本不应该做的事情更无用的了。&amp;rdquo; 高效地创建没有价值的 Kubernetes 集群，这不是好事。除了成本高，还有对生态环境的影响。让一个 Kubernetes 集群消耗价值 1000 英镑的电力，什么都不做，对地球不是很好。&lt;/p&gt;
&lt;p&gt;对于我说的很多问题，最初看起来是技术问题，其实是人的问题。我觉得这个有点不一样，因为这个看似是人的问题，其实是技术问题。这个领域其实工具可以帮助我们。比如说，工具可以帮助我们管理浪费，可以检测到闲置的服务器，帮助我们把服务器追溯到发起人。这方面的工具还没有，但已经越来越成熟了。&lt;/p&gt;
&lt;h2 id=&#34;云管理你的云&#34;&gt;云管理你的云&lt;/h2&gt;
&lt;p&gt;这个云管理的工具化最后是在云上，所以你最后是在递归的情况下，要有一些云来管理你的云。我的公司有一个多云管理器，它会看你的工作负载，找出工作负载的形状，从财务上来说，你能让它上的最优化的供应商是什么，然后自动进行这种迁移。我预计我们可能会开始看到越来越多这样的软件，它在看它，然后说：&amp;ldquo;顺便说一下，我可以告诉他的 Kubernetes 集群其实没有流量，它已经在那里待了两个月了。你为什么不去和 Holly 说几句话呢？&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;微服务运维混乱&#34;&gt;微服务运维混乱&lt;/h2&gt;
&lt;p&gt;管理云成本越来越复杂，这反映了一个更普遍的事情，就是云运维越来越复杂。我们正在使用越来越多的云供应商。有越来越多的云实例涌现出来。我们到处都有集群，那么我们到底该如何为这些集群做运维呢？这就是 SRE (Site Reliability Engineering) 的作用。&lt;/p&gt;
&lt;p&gt;网站可靠性工程的目的是使操作更加可重复，减少繁琐，以使服务更加可靠。它实现这一目标的方法之一是将一切自动化，我认为这是一个令人钦佩的目标。像发布这样的事情，我们越是自动化，我们就越能做到，这对工程师和消费者来说都是好事。最终的目标应该是，发布不是一个事件，而是一切照旧。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8dicqaj30tv0ryt9v_hu7414d2a7e47878e3356e657421723a4b_53162_8b9ac6e4f9b623345f319846a38cf79a.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8dicqaj30tv0ryt9v_hu7414d2a7e47878e3356e657421723a4b_53162_df07a107b5d6a6c1888890e73a3ad8f7.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8dicqaj30tv0ryt9v_hu7414d2a7e47878e3356e657421723a4b_53162_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8dicqaj30tv0ryt9v_hu7414d2a7e47878e3356e657421723a4b_53162_8b9ac6e4f9b623345f319846a38cf79a.webp&#34;
               width=&#34;760&#34;
               height=&#34;711&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使发布深感无聊。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之所以能够有这种无聊的感觉，是我们对可回收性有信心，是 SRE 让我们对可回收性有信心。&lt;/p&gt;
&lt;p&gt;我有另一个悲伤的太空故事，这次是来自苏联。在 80 年代，一位工程师想对苏联一个叫 &amp;ldquo;Phobos&amp;rdquo; 的太空探测器的代码进行更新。当时，它是机器代码，都是 0 和 1，而且都是手写的。很显然，你不想用手写的机器代码对一个绕着地球飞驰的航天器进行实时更新，而不进行一些检查。在任何推送之前，代码都会经过验证器，验证器相当于机器代码的 linter。&lt;/p&gt;
&lt;p&gt;这样做很好，直到自动检查器坏了，这时需要进行更改。一位工程师说：&amp;ldquo;哦，但我真的想做这个改动。我就绕过自动检查器，直接把我的代码推送给空间探测器，因为，我的代码当然是完美的。&amp;rdquo; 于是，他们用手写的机器代码，在没有检查的情况下，对绕着地球飞驰的航天器进行了实时更新。能出什么问题呢？&lt;/p&gt;
&lt;p&gt;发生的是一个非常微妙的 bug。一切似乎都在正常工作。不幸的是，工程师忘记了其中一个指令的零点。这就改变了指令，从原来的指令变成了停止探测器的充电鳍旋转的指令。Phobos 号的翅片会转向太阳方向，这样无论它朝向哪个方向，都能收集太阳能。两天来一切都很好，直到电池没电了。一旦探测器没电了，他们就没办法恢复它，因为整个东西都死了。&lt;/p&gt;
&lt;p&gt;这就是一个完全无法恢复的系统的例子。一旦它死了，你就再也找不回来了。你不能只是做一些事情，然后把它恢复到一个干净的空间探测代码副本，因为它在太空中。&lt;/p&gt;
&lt;p&gt;这样的系统是真正无法恢复的。我们很多人认为，我们所有的系统几乎都和空间探测器一样无法恢复，但事实上，只有极少数系统可以恢复。&lt;/p&gt;
&lt;p&gt;我们真正想做的是在这个频谱的顶端，我们可以在几毫秒内恢复，没有数据丢失。 如果有任何问题，只是，&amp;ldquo;ping，它被修复&amp;rdquo;。如果有什么问题，它只是，&amp;ldquo;ping，它的固定&amp;rdquo;。这真的很难达到，但有一大堆中间点是现实的目标。&lt;/p&gt;
&lt;p&gt;如果我们恢复的速度很快，但是数据丢失了，那就不太好了，但是我们可以接受。如果我们有交接和人工干预，那对于恢复的速度会慢很多。当我们在考虑频繁部署和部署的时候，非常无聊 —— 我们要有信心，我们在那个上端。我们到达那里的方式，交接不好，自动化，好。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8e64boj311e0u0wfs_hu43e33ad35029ec816752700c94282909_58285_359c19a4e32dbe2649fbfd0c1d632eee.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8e64boj311e0u0wfs_hu43e33ad35029ec816752700c94282909_58285_cae6a356397f7fe793d80781db6bfbe8.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8e64boj311e0u0wfs_hu43e33ad35029ec816752700c94282909_58285_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8e64boj311e0u0wfs_hu43e33ad35029ec816752700c94282909_58285_359c19a4e32dbe2649fbfd0c1d632eee.webp&#34;
               width=&#34;760&#34;
               height=&#34;610&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;云原生成功的方法&#34;&gt;云原生成功的方法&lt;/h2&gt;
&lt;p&gt;这篇文章包含了一大堆关于我所看到的可能出错的事情的悲惨故事。我不想给你留下一个印象，即所有的事情都会出错，因为很多时候，事情确实非常正确。云原生是一种奇妙的软件开发方式，它可以让团队感觉更好，降低成本，让用户更快乐。作为工程师，我们可以把更少的时间花在辛苦和繁琐的事情上，而把更多的时间花在真正想做的事情上&amp;hellip;&amp;hellip; 我们可以更快地进入市场。&lt;/p&gt;
&lt;p&gt;要想达到这种快乐的状态，我们必须在整个组织中保持一致。我们不能让一群人说微服务，一群人说快，一群人说老式治理。这几乎肯定是行不通的，会有很多脾气暴躁的工程师和委屈的财务人员。相反，一个组织应该在整体层面上达成共识，它要实现的目标是什么。一旦同意了这个目标，就应该对反馈进行优化，确保反馈回路尽可能短，因为这才是合理的工程。&lt;/p&gt;
&lt;h2 id=&#34;关于作者&#34;&gt;关于作者&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8fglzbj304x05sabb_hu713fd8b961028a83210edb2affad3583_8912_bacf2ad67ad49d1a5b5060d50e6f4bce.webp 400w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8fglzbj304x05sabb_hu713fd8b961028a83210edb2affad3583_8912_7b7060ad5c3f81c7c34036d4186db903.webp 760w,
               /blog/cloud-native-culture-not-container/008eGmZEly1goqq8fglzbj304x05sabb_hu713fd8b961028a83210edb2affad3583_8912_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-culture-not-container/008eGmZEly1goqq8fglzbj304x05sabb_hu713fd8b961028a83210edb2affad3583_8912_bacf2ad67ad49d1a5b5060d50e6f4bce.webp&#34;
               width=&#34;177&#34;
               height=&#34;208&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Holly Cummins&lt;/strong&gt; 是 IBM 企业战略部的创新领导者，并在 IBM Garage 担任顾问多年。作为 Garage 的一员，她为各行各业的客户提供技术驱动的创新，从银行业到餐饮业，从零售业到非政府组织。Holly 是 Oracle Java 冠军、IBM Q 大使和 JavaOne Rock Star。她与人合著了 Manning 的《Enterprise OSGi in Action》。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>云原生时代——投资人视角下的云原生趋势思考</title>
      <link>https://cloudnative.to/blog/cloud-native-era/</link>
      <pubDate>Thu, 04 Jun 2020 14:00:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/cloud-native-era/</guid>
      <description>&lt;p&gt;今天我们不讲行业和商业，讲讲2019年最热的概念——云原生（Cloud Native）。&lt;/p&gt;
&lt;p&gt;我认为云原生是未来10年IT发展最重要的趋势，但是它涵盖的概念非常多，需要花很多时间研究，同时浩如烟海的资料分散在网络上各个地方，缺乏系统性的梳理。今年2月我在基金内部做过一个分享，今日成文，希望让更多的人有所了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文试图解答：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为什么云原生概念具有革命性？&lt;/li&gt;
&lt;li&gt;什么是微服务？&lt;/li&gt;
&lt;li&gt;微服务和中台的关系&lt;/li&gt;
&lt;li&gt;容器和微服务为什么是最佳搭档？&lt;/li&gt;
&lt;li&gt;容器化与虚拟化的区别&lt;/li&gt;
&lt;li&gt;API管理与API集成的区别&lt;/li&gt;
&lt;li&gt;Kubernetes是做什么用的？&lt;/li&gt;
&lt;li&gt;开源软件商业化遇到的典型问题是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;涉及到的概念包括云原生、DevOps、持续集成、持续交付、持续部署、微服务、API管理、iPaaS、Service Mesh、Serverless、容器、Docker、Kubernetes等等，我争取用比较形象和通俗的方式把这些技术概念讲清楚。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文内容较多，共分为六个章节。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分：云原生及CNCF基金会&lt;/li&gt;
&lt;li&gt;第二部分：DevOps与CI/CD&lt;/li&gt;
&lt;li&gt;第三部分：微服务、API管理与集成&lt;/li&gt;
&lt;li&gt;第四部分：容器与Docker&lt;/li&gt;
&lt;li&gt;第五部分：Kubernetes与容器编排之战&lt;/li&gt;
&lt;li&gt;第六部分：思考与机会&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第一部分云原生及cncf基金会&#34;&gt;第一部分：云原生及CNCF基金会&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;从集装箱革命说起&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一本非常有名的书，叫《集装箱改变世界》，说的是看起来平淡无奇的铁箱子，如何从二十世纪起永久性的改变了这个世界，并促进了全球化和全球分工。集装箱的出现和发展是实体货物包装、运输、交付方式的一次革命。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsfj4ojj30a00dr0t9_hu56680de11211b089b60dde7358c930f3_29687_bf8b956defe31a23f3e78975a5a70b9d.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsfj4ojj30a00dr0t9_hu56680de11211b089b60dde7358c930f3_29687_f1fbfe857c660f7b4f75c26bdfa501c1.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsfj4ojj30a00dr0t9_hu56680de11211b089b60dde7358c930f3_29687_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsfj4ojj30a00dr0t9_hu56680de11211b089b60dde7358c930f3_29687_bf8b956defe31a23f3e78975a5a70b9d.webp&#34;
               width=&#34;360&#34;
               height=&#34;495&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;《经济学家》杂志曾经评价说“没有集装箱，不可能有全球化”。集装箱为什么具有革命性？&lt;/p&gt;
&lt;p&gt;经济全球化的基础就是现代运输体系,而一个高度&lt;strong&gt;自动化、低成本和低复杂性&lt;/strong&gt;的货物运输系统的核心就是集装箱。集装箱最大的成功在于其产品的标准化及由此建立的一整套运输体系。能够让一个载重几十吨的庞然大物实现标准化，并且以此为基础逐步实现全球范围内的船舶、港口、航线、公路、中转站、桥梁、隧道、多试联运相配套的物流系统，这的确堪称人类有史以来创造的伟大奇迹之一，而撬动这个系统的理念就是&lt;strong&gt;标准化和系统化&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;改变世界的不仅仅是集装箱本身，还有&lt;strong&gt;一整套货物处理的新方法，包括港口、货船、起重机、卡车，还有发货人的自身操作方式等&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;云原生在IT领域的意义非常类似于集装箱，只是里面装载的不再是实体货物，而是虚拟世界的二进制代码和软件。我们将在介绍完众多概念之后再来对应解释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生的诞生&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随着虚拟化技术的成熟和分布式框架的普及，在容器技术、可持续交付、编排系统等开源社区的推动下，以及微服务等开发理念的带动下，应用上云已经是不可逆转的趋势。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcshblgnj30o805odgc_hu16fe10bae7df9f697d00cc7c71b71dd2_29163_04660255020eda88668cda73af16ccda.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcshblgnj30o805odgc_hu16fe10bae7df9f697d00cc7c71b71dd2_29163_894fc37b3c6e5b6f45ebc5538c51c6be.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcshblgnj30o805odgc_hu16fe10bae7df9f697d00cc7c71b71dd2_29163_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcshblgnj30o805odgc_hu16fe10bae7df9f697d00cc7c71b71dd2_29163_04660255020eda88668cda73af16ccda.webp&#34;
               width=&#34;760&#34;
               height=&#34;178&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;云原生的发展史，来自CNCF基金会执行董事Dan Kohn&lt;/p&gt;
&lt;p&gt;云计算的3层划分，即基础设施即服务(IaaS)、平台即服务(PaaS)、软件即服务(SaaS)为云原生提供了技术基础和方向指引，真正的云化不仅仅是基础设施和平台的变化，应用也需要做出改变，摈弃传统的土方法，在架构设计、开发方式、部署维护等各个阶段和方面都基于云的特点，重新设计，从而建设全新的云化的应用，即云原生应用。&lt;/p&gt;
&lt;p&gt;云原生（Cloud Native）这个概念，是由Pivotal的Matt Stine于2013年首次提出，他还在2015年出版了《Migrating to Cloud-Native Application Architectures（&lt;a href=&#34;https://jimmysong.io/migrating-to-cloud-native-application-architectures&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;迁移到云原生应用架构&lt;/a&gt;）》一书。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsgvptkj30u00mgmyl_hua08fc161791635acbd3b3f5548aed91f_63138_c20ce3c872bc0d9845084518cf5e390b.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsgvptkj30u00mgmyl_hua08fc161791635acbd3b3f5548aed91f_63138_e9807106d44198260d3ded8cf1600832.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsgvptkj30u00mgmyl_hua08fc161791635acbd3b3f5548aed91f_63138_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsgvptkj30u00mgmyl_hua08fc161791635acbd3b3f5548aed91f_63138_c20ce3c872bc0d9845084518cf5e390b.webp&#34;
               width=&#34;760&#34;
               height=&#34;569&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Gartner提到云原生的定义尚不明确，但含义丰富。云原生对于不同的人和组织来讲，有着不同的理解。众多顶级技术的铸造者、Matt Stine的东家Pivotal&lt;a href=&#34;https://tanzu.vmware.com/de/cloud-native&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如此&lt;/a&gt;定义云原生。&lt;/p&gt;
&lt;p&gt;“Cloud native is an approach to building and running applications that fully exploit the advantages of the cloud computing model.”——云原生是一种构建和运行充分利用云计算模型优势的应用程序的方法。&lt;/p&gt;
&lt;p&gt;CNCF云原生计算基金会&lt;a href=&#34;https://github.com/cncf/toc/blob/master/DEFINITION.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如此&lt;/a&gt;定义云原生：&lt;/p&gt;
&lt;p&gt;“云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格（Service Mesh）、微服务、不可变基础设施和声明式API。这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。”&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsk5hxbj30bs0bjq34_hu0c3921a4979217e293dde62e96758afc_17174_52d96c9b86c95d8692121de491fffbf7.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsk5hxbj30bs0bjq34_hu0c3921a4979217e293dde62e96758afc_17174_ba26e2c78f0a313b238a7aaf9a2a19bc.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsk5hxbj30bs0bjq34_hu0c3921a4979217e293dde62e96758afc_17174_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsk5hxbj30bs0bjq34_hu0c3921a4979217e293dde62e96758afc_17174_52d96c9b86c95d8692121de491fffbf7.webp&#34;
               width=&#34;424&#34;
               height=&#34;415&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;其中服务网格和声明式API是新加入的内容，而不可变基础设施指的是应用的基础设施应是不可变的，是一个自包含、自描述可以完全在不同环境中迁移的东西，容器技术正是这一理念实现的基石。&lt;/p&gt;
&lt;p&gt;而CNCF同时把云原生计算定义为：&lt;/p&gt;
&lt;p&gt;“Cloud native computing uses an open source software stack to be:&lt;/p&gt;
&lt;p&gt;Containerized. Each part (applications, processes, etc) is packaged in its own container. This facilitates reproducibility, transparency, and resource isolation.&lt;/p&gt;
&lt;p&gt;Dynamically orchestrated. Containers are actively scheduled and managed to optimize resource utilization.&lt;/p&gt;
&lt;p&gt;Microservices-oriented. Applications are segmented into microservices. This significantly increases the overall agility and maintainability of applications.”&lt;/p&gt;
&lt;p&gt;——云原生计算使用的开源技术栈包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器化。每个部分（应用、流程等等）都打包在自己的容器中，这有助于提升复用性、透明度以及改善资源隔离。&lt;/li&gt;
&lt;li&gt;动态编排。容器受到有效的调度和管理，以便优化资源利用。&lt;/li&gt;
&lt;li&gt;以微服务为导向。应用被分割到不同的微服务中，这种分割可以显著的提高应用的整体敏捷性和可维护性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我个人理解，&lt;strong&gt;云原生是指从云的原生应用角度出发，一整套设计、开发、部署、运行、维护的流程、技术栈以及背后文化理念的统称。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下表列举了云原生应用和传统应用的有哪些主要区别。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsj8rqej30lr08v3zl_hub67184dac22bdd274143e6e25cbb521a_50378_67939e06282f0baaef0b29641b443d53.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsj8rqej30lr08v3zl_hub67184dac22bdd274143e6e25cbb521a_50378_60e6b0ed1173f06a4feff861e99c278b.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsj8rqej30lr08v3zl_hub67184dac22bdd274143e6e25cbb521a_50378_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsj8rqej30lr08v3zl_hub67184dac22bdd274143e6e25cbb521a_50378_67939e06282f0baaef0b29641b443d53.webp&#34;
               width=&#34;760&#34;
               height=&#34;310&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;要转向云原生应用需要以新的云原生方法开展工作，云原生有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-云原生的发展脉络&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34; 云原生的发展脉络&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsi9yqzj30l103daab_hub37064af0f77942cfa50185b5b862887_20241_ffc9245160a52c95eb83bde4863facb7.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsi9yqzj30l103daab_hub37064af0f77942cfa50185b5b862887_20241_35d064552442931f64044778a7808072.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsi9yqzj30l103daab_hub37064af0f77942cfa50185b5b862887_20241_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsi9yqzj30l103daab_hub37064af0f77942cfa50185b5b862887_20241_ffc9245160a52c95eb83bde4863facb7.webp&#34;
               width=&#34;757&#34;
               height=&#34;121&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
       云原生的发展脉络
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;云原生背后的价值主张有哪些？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;隔离性：把应用程序打包在容器中加快了代码和组件的重用，并且简化了操作；&lt;/li&gt;
&lt;li&gt;无锁定：开源软件栈支持在任何公共或私有云上或以组合方式进行部署；&lt;/li&gt;
&lt;li&gt;无限扩展：为能够扩展到数万个自修复多租户节点的现代分布式系统环境而优化；&lt;/li&gt;
&lt;li&gt;灵活性和可维护性：将应用程序拆分为具有明确描述的依赖关系的微服务；&lt;/li&gt;
&lt;li&gt;提高效率和资源利用率：动态管理和调度微服务的中央编排流程降低了与维护和操作相关的成本；&lt;/li&gt;
&lt;li&gt;应用的弹性：以应对单个容器甚至数据中心的故障，以及不同级别的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2019年，Gartner曾经发布报告表示云原生时代已经到来，在未来三年中将有75%的全球化企业将在生产中使用容器化的应用。&lt;/p&gt;
&lt;p&gt;请注意，云原生相关技术不仅仅能用于云计算，即便是和云计算即对立又协同的边缘计算，微服务、容器、Kubernetes依然是事实上的杀手应用和标准。如由著名的Kubernetes管理平台创业公司Rancher所贡献的K3s项目，就是Kubernetes（K8s）的最轻量级版本，以满足边缘计算和IOT环境中，在x86、ARM64和ARMv7处理器上运行小型、易于管理的Kubernetes集群日益增长的需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生计算基金会CNCF&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提到云原生，就不能不介绍云原生计算基金会CNCF（Cloud Native Computing Foundation）（&lt;a href=&#34;https://www.cncf.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cncf.io&lt;/a&gt;）。CNCF于2015 年7月由Google 牵头成立，隶属于 Linux 基金会，初衷是围绕云原生服务云计算，致力于培育和维护一个厂商中立的开源生态系统，维护和集成开源技术，支持编排容器化微服务架构应用，通过将最前沿的模式民主化，让这些创新为大众所用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CNCF的使命包括以下三点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器化包装&lt;/li&gt;
&lt;li&gt;通过中心编排系统的动态资源管理&lt;/li&gt;
&lt;li&gt;面向微服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全球主流的科技企业和云计算厂商绝大部分都是CNCF会员，其中不乏多家来自中国的科技巨头。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cncf-黄金白金成员&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CNCF 黄金、白金成员&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsjo4tmj30u009a0td_hu27c8c4ec9d985eee7069d3338519cf07_33835_0a61bcb6a49f8143cfb3b53a6fbf0274.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsjo4tmj30u009a0td_hu27c8c4ec9d985eee7069d3338519cf07_33835_5c4ca8308b0e4d90fe9a2340917ff00c.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsjo4tmj30u009a0td_hu27c8c4ec9d985eee7069d3338519cf07_33835_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsjo4tmj30u009a0td_hu27c8c4ec9d985eee7069d3338519cf07_33835_0a61bcb6a49f8143cfb3b53a6fbf0274.webp&#34;
               width=&#34;760&#34;
               height=&#34;235&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNCF 黄金、白金成员
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;截止2020年4月，CNCF 基金会共托管49个云原生项目，每个CNCF项目都对应一个成熟度等级，申请成为CNCF项目的时候需要确定项目的成熟度级别，Kubernetes和 Envoy等项目基于生产可用和高稳定性首先成为毕业项目（9个），其他项目则根据其成熟度分别位于孵化（17个）和沙箱（23个）阶段。CNCF目前托管的项目共同构成了云原生生态的基石。&lt;/p&gt;
&lt;p&gt;值得注意的是其中有三个来自中国的项目：VMware中国团队为企业用户设计的 Registry Server开源项目Harbor，PingCap贡献的分布式事务键值数据库TiKV以及阿里自研的P2P文件分发系统Dragonfly。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cncf项目成熟度等级划分&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CNCF项目成熟度等级划分&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcskme7fj30n309gwex_hu1d5d9fd14cee9ee7f45993ec362bbbc5_26811_c135cb437909bd27d0bb6d5714bb5763.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcskme7fj30n309gwex_hu1d5d9fd14cee9ee7f45993ec362bbbc5_26811_944d2b8f79444ad94b600da1c256a5c9.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcskme7fj30n309gwex_hu1d5d9fd14cee9ee7f45993ec362bbbc5_26811_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcskme7fj30n309gwex_hu1d5d9fd14cee9ee7f45993ec362bbbc5_26811_c135cb437909bd27d0bb6d5714bb5763.webp&#34;
               width=&#34;760&#34;
               height=&#34;311&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CNCF项目成熟度等级划分
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于企业在复杂的基础架构之上如何推动云原生应用的更好落地，从而更好地适应环境与业务的发展，CNCF给出了路线图（Trail Map）用于对用户在整体上给出指导建议，共分成十个步骤（容器化；CI/CD；应用定义及编排；监控及分析；服务代理、发现和网格；网络、策略及安全；分布式数据库及存储；流与消息；镜像库与运行时；软件分发）进行实施，而在不同的步骤都可以结合CNCF全景图（Landscape）中列出的产品或服务进行选择。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cncf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNCF全景图&lt;/a&gt;则列举了和云原生相关的产品及服务的完整名单，这1381个项目共同构成了恢弘庞大的云原生世界。整个全景图按照功能分为29个模块，分别归属于9种大的类别（应用定义与开发、编排与管理、运行时、配置、平台、可观察性与分析、Serverless、会员和其它）。值得注意的是其中专门有一种分类是&lt;a href=&#34;https://landscape.cncf.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cards from China&lt;/a&gt;，列举了来自中国的145个项目，其中不乏许多大家耳熟能详的知名项目，可惜的是数据并不完整。感兴趣的朋友可以自行研究。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsfsuijj30u00gkjw6_hu58f7b01eb884a32aae2b0bdeb2181337_186625_818598c5d256b702e34ce9bf6d4d260e.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsfsuijj30u00gkjw6_hu58f7b01eb884a32aae2b0bdeb2181337_186625_4ca5f6eab68278fd98a07bf470ba337a.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsfsuijj30u00gkjw6_hu58f7b01eb884a32aae2b0bdeb2181337_186625_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsfsuijj30u00gkjw6_hu58f7b01eb884a32aae2b0bdeb2181337_186625_818598c5d256b702e34ce9bf6d4d260e.webp&#34;
               width=&#34;760&#34;
               height=&#34;419&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从CNCF的理念及野心来看，基于云原生的基础设施正在壮大和蚕食非云的市场，未来极有可能成为整个IT生态事实上的意见领袖和领导者。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生涵盖的主要概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面提到云原生的代表技术包括容器、服务网格（Service Mesh）、微服务、不可变基础设施和声明式API。另外一种比较主流的说法是云原生=微服务+DevOps+持续交付+容器化，广泛的见诸于各种文章和资料。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsht0v9j30dc0d53zc_hu99661fb158da4f427d5c363a0c9ce789_41145_98c284fb816382b152cf2cd6f1fe8acc.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsht0v9j30dc0d53zc_hu99661fb158da4f427d5c363a0c9ce789_41145_afb3f32ebed86c5ca93e0a20b8ab13d8.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsht0v9j30dc0d53zc_hu99661fb158da4f427d5c363a0c9ce789_41145_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsht0v9j30dc0d53zc_hu99661fb158da4f427d5c363a0c9ce789_41145_98c284fb816382b152cf2cd6f1fe8acc.webp&#34;
               width=&#34;480&#34;
               height=&#34;473&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在接下来的《云原生时代》系列报告中，我们将依照这些概念，分成DevOps与CI/CD；微服务、API管理与集成；容器与Docker；Kubernetes与容器编排之战四个部分全面介绍云原生各个组成部分。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcsir2frj30u00jkjsw_hucd5f0a402847a085017d2b80237d645c_66345_1d8432b2ea4f9a362641cbaf1e16123b.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsir2frj30u00jkjsw_hucd5f0a402847a085017d2b80237d645c_66345_71206a050b019bc091f3e5ba888cd006.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcsir2frj30u00jkjsw_hucd5f0a402847a085017d2b80237d645c_66345_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcsir2frj30u00jkjsw_hucd5f0a402847a085017d2b80237d645c_66345_1d8432b2ea4f9a362641cbaf1e16123b.webp&#34;
               width=&#34;760&#34;
               height=&#34;495&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;第二部分devops与cicd&#34;&gt;第二部分：DevOps与CI/CD&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DevOps（Development &amp;amp; Operations，开发和运维）是09年提出来的概念，但一直没有太火。直到14年，容器与微服务架构的提出，DevOps才得到了快速的发展。DevOps不单是一个实现自动化的工具链，而是组织、流程与技术的结合。组织上强调全栈团队、团队特性专一、团队自治；技术上打通开发与运维；流程上强调端到端、可视化、灰度升级、A/B测试等。&lt;/p&gt;
&lt;p&gt;对于DevOps，微服务不是必须的，但微服务为DevOps提供了最好的架构支撑，对于组织和流程的要求也是一致的。所以，也有人称微服务是DevOps架构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcxhljhcj30iy067dg2_hu253d0f135ca4390834d5c9b7a674b08b_18871_6106adcb75efe1414c175d1885fb42d0.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcxhljhcj30iy067dg2_hu253d0f135ca4390834d5c9b7a674b08b_18871_3b05993220681964164d3425dc3057bd.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcxhljhcj30iy067dg2_hu253d0f135ca4390834d5c9b7a674b08b_18871_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcxhljhcj30iy067dg2_hu253d0f135ca4390834d5c9b7a674b08b_18871_6106adcb75efe1414c175d1885fb42d0.webp&#34;
               width=&#34;682&#34;
               height=&#34;223&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;DevOps流程示意图&lt;/p&gt;
&lt;p&gt;DevOps与下面提到的CI、CD不同，DevOps更偏向于一种对于文化氛围的构建。DevOps也即是促使开发人员与运维人员之间相互协作的文化。DevOps的概念似乎与持续交付的概念有些类似，两者均旨在促进开发与运维之间的协作，但是实际上两者差别很大：DevOps 更偏向于一种文化的构建，在DevOps文化指导下，团队中将包含了具有不同技能的人员（开发、测试等），并通过自动化测试与发布的手段，更快、更高质量的生产软件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持续集成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持续集成（CONTINUOUS INTEGRATION，CI）指的是开发人员频繁的（一天多次的）将所有开发者的工作合并到主干上。这些新提交在最终合并到主线之前，都需要通过编译和自动化测试流进行验证，以保障所有的提交在合并主干之后的质量问题，对可能出现的一些问题进行预警。持续集成的核心在于确保新增的代码能够与原先代码正确的集成。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcxh6j37j30rs0c874y_hu154701c79c54dcd052643621a947bccd_35094_1a6ebb4ce6b81453e50fd1c3a5a22c68.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcxh6j37j30rs0c874y_hu154701c79c54dcd052643621a947bccd_35094_59e489ded0b0cff98290fb6f91c1fd66.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcxh6j37j30rs0c874y_hu154701c79c54dcd052643621a947bccd_35094_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcxh6j37j30rs0c874y_hu154701c79c54dcd052643621a947bccd_35094_1a6ebb4ce6b81453e50fd1c3a5a22c68.webp&#34;
               width=&#34;760&#34;
               height=&#34;334&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;持续集成流程示意图&lt;/p&gt;
&lt;p&gt;持续集成带来的好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于定位错误&lt;/li&gt;
&lt;li&gt;易于控制开发流程&lt;/li&gt;
&lt;li&gt;易于Code Review&lt;/li&gt;
&lt;li&gt;易于减少不必要的工作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;持续交付&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与持续集成相比，持续交付（CONTINUOUS DELIVERY，CD）的侧重点在于交付，其核心对象不在于代码，而在于可交付的产物。由于持续集成仅仅针对于新旧代码的集成过程执行了一定的测试，其变动到持续交付后还需要一些额外的流程。与持续集成相比较，持续交付添加了测试Test-&amp;gt;模拟Staging-&amp;gt;生产Production的流程，也就是为新增的代码添加了一个保证：确保新增的代码在生产环境中是可用的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcxgfn6sj30rs0kkta3_huba5210821f96ce2b5d53db57cf73cf1a_61401_69edec6dbeba707cf628ef447242d5b5.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcxgfn6sj30rs0kkta3_huba5210821f96ce2b5d53db57cf73cf1a_61401_0810ec2144d61a4578892badffd41e13.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcxgfn6sj30rs0kkta3_huba5210821f96ce2b5d53db57cf73cf1a_61401_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcxgfn6sj30rs0kkta3_huba5210821f96ce2b5d53db57cf73cf1a_61401_69edec6dbeba707cf628ef447242d5b5.webp&#34;
               width=&#34;760&#34;
               height=&#34;562&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;持续交付流程示意图&lt;/p&gt;
&lt;p&gt;持续交付带来的好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;繁琐的部署工作没有了。团队不再需要花费几天的时间去准备一个发布&lt;/li&gt;
&lt;li&gt;可以更快的进行交付，这样就加快了与客户之间的反馈环&lt;/li&gt;
&lt;li&gt;轻松应对小变更，加速迭代&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;持续部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持续部署（CONTINUOUS DEPLOYMENT）指的是通过自动化部署的手段将软件功能频繁的进行交付。与持续交付以及持续集成相比，持续部署强调了通过自动部署的手段，对新的软件功能进行集成。同持续交付相比持续集成的区别体现在对生产的自动化。从开发人员提交代码到编译、测试、部署的全流程不需要人工的干预，完全通过自动化的方式执行。这一策略加快了代码提交到功能上线的速度，保证新的功能能够第一时间部署到生产环境并被使用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcxi2ytgj30rs0kkmyj_hu7071e92b7271b547e4db04223bebc74c_61088_2627d07957fbaa4d295ad3d16dd249a9.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcxi2ytgj30rs0kkmyj_hu7071e92b7271b547e4db04223bebc74c_61088_2a72f4f4459afd3400f30b9dd29655d7.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcxi2ytgj30rs0kkmyj_hu7071e92b7271b547e4db04223bebc74c_61088_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcxi2ytgj30rs0kkmyj_hu7071e92b7271b547e4db04223bebc74c_61088_2627d07957fbaa4d295ad3d16dd249a9.webp&#34;
               width=&#34;760&#34;
               height=&#34;562&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;持续部署流程示意图&lt;/p&gt;
&lt;p&gt;持续部署带来的好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布频率更快，因为不需要停下来等待发布。每一处提交都会自动触发发布流&lt;/li&gt;
&lt;li&gt;在小批量发布的时候，风险降低了，发现问题可以很轻松的修复&lt;/li&gt;
&lt;li&gt;客户每天都可以看到持续改进和提升，而不是每个月或者每季度，或者每年&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自动实时的部署上线，是最优的解决办法，但持续部署的要求是团队非常成熟，并且上线前是需要经过QA测试的，所以实际情况下很难实现，一般的团队也很难接受，挑战和风险都很大。&lt;/p&gt;
&lt;p&gt;我们总结下，DevOps、持续集成、持续交付、持续部署并不是某种技术栈或者框架，而是开发文化、流程、理念和操作方式。下一部分，我们将介绍云原生最重要的概念之一：微服务。&lt;/p&gt;
&lt;h2 id=&#34;第三部分微服务api管理与集成&#34;&gt;第三部分：微服务、API管理与集成&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;什么是微服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微服务（Microservice）概念最早出现于2012年，2015年以后受到越来越多的关注，并且逐渐开始流行开来。其中著名技术大神Martin Fowler功不可没，他于2014年发表的一篇博客《Microservices: a definition of this new architectural term》（微服务：新技术架构的定义）清晰的定义和阐述了微服务概念。&lt;/p&gt;
&lt;p&gt;“要开始解释什么是微服务之前，先了解单体（Monolithic）应用是很有用的：作为一整个单元构建的应用程序。企业应用由三个重要部分组成：客户端界面（由HTML、Javascript组成，使用浏览器访问）、数据库、服务端程序。服务端程序处理HTTP请求、执行业务逻辑、检索并更新数据库中的数据、选择和填充HTML视图发送给客户端。这个服务端程序是一个单一结构也即一个整体，系统中的任何修改都将导致服务端重新编译和布署一个新版本。&lt;/p&gt;
&lt;p&gt;这样一个单体应用很自然的被构建成为一个系统，虽然可以使用开发语言的基本特性把应用封装成类、函数、命名空间，但是业务中所有请求都要在单一的进程中处理完成，在某些场景中，你可以在开发人员的笔记本电脑中运行和测试，并且通过布署通道将测试通过的程序布署到生产环境中，你还可以水平扩展，利用负载均衡将实例布署到多台服务器中。&lt;/p&gt;
&lt;p&gt;的确，单体应用也非常成功，但是越来越多的人感觉到了不妥，特别是应用程序被发布到云的时候，变更周期被捆绑在一起-对应用程序一小部分所做的变更，都需要重新编译和部署整个应用。随着时间的推移，软件开发者很难保持一个好的模块架构，使得单个模块的变更不会影响到其它模块，而且扩展时也只能进行整体扩展，而不能根据需求进行部分扩展。”&amp;ndash; Martin Fowler&lt;/p&gt;
&lt;p&gt;下图是传统单体应用的技术及对应的组织架构，Martin Fowler称之为大家已熟知的Siloed Architectures-烟囱式（也称为谷仓）架构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd08f2z0j30fz0coaax_hu22276daa7eabd015dc5f56cb62a71f90_32046_11b831a3202c6194b58c4ce55d2531c0.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd08f2z0j30fz0coaax_hu22276daa7eabd015dc5f56cb62a71f90_32046_955dbbf4a5f13c40ef576ed0fe6c44bf.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd08f2z0j30fz0coaax_hu22276daa7eabd015dc5f56cb62a71f90_32046_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd08f2z0j30fz0coaax_hu22276daa7eabd015dc5f56cb62a71f90_32046_11b831a3202c6194b58c4ce55d2531c0.webp&#34;
               width=&#34;575&#34;
               height=&#34;456&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;传统单体应用的架构及对应的职能型组织架构&lt;/p&gt;
&lt;p&gt;综上，传统的单体应用有很大的局限性，应用程序随着业务需求的迭代、功能的追加扩展，最终成为一个庞然大物。单体应用的局限性大体包括以下几方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复杂性高：业务规模和团队规模发展的一定阶段，模块耦合严重，代码难以理解，质量变差&lt;/li&gt;
&lt;li&gt;交付效率低：构建和部署耗时长，难以定位问题，开发效率低，全量部署耗时长、影响范围广、风险大，发布频次低&lt;/li&gt;
&lt;li&gt;伸缩性差：单体只能按整体横向扩展，无法分模块垂直扩展&lt;/li&gt;
&lt;li&gt;可靠性差：一个bug有可能引起整个应用的崩溃&lt;/li&gt;
&lt;li&gt;阻碍技术创新：受技术栈限制，团队成员使用同一框架和语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决这一问题的银弹就是微服务。&lt;/p&gt;
&lt;p&gt;“微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间相互协调、互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务和服务之间采用轻量级的通信机制相互沟通（通常是基于HTTP的Restful API)。这些服务要基于业务场景，并使用自动化布署工具进行独立的发布。可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。”&amp;ndash; Martin Fowler&lt;/p&gt;
&lt;p&gt;微服务架构将单体应用，按照业务领域拆分为多个高内聚低耦合的小型服务，每个服务运行在独立进程，由不同的团队开发和维护，服务间采用轻量级通信机制，如HTTP RESTful API，独立自动部署，可以采用不同的语言及存储方式。微服务体现去中心化、天然分布式，是中台战略落地到IT系统的具体实现方式的技术架构，用来解决企业业务快速发展与创新时面临的系统弹性可扩展、敏捷迭代、技术驱动业务创新等难题。&lt;/p&gt;
&lt;p&gt;下图左边是传统的单体应用，右边是微服务模式，图中每种颜色代表一种可拆分的微服务应用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczr2klvj30hr0bzjse_hua8588a7f03ce1cd2db486ae9fec0a4ac_47733_167167fb8469a6d6182b44b9e4266397.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczr2klvj30hr0bzjse_hua8588a7f03ce1cd2db486ae9fec0a4ac_47733_b34a9c2f916065dd27c1ba4835dc05ca.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczr2klvj30hr0bzjse_hua8588a7f03ce1cd2db486ae9fec0a4ac_47733_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczr2klvj30hr0bzjse_hua8588a7f03ce1cd2db486ae9fec0a4ac_47733_167167fb8469a6d6182b44b9e4266397.webp&#34;
               width=&#34;639&#34;
               height=&#34;431&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;单体应用和微服务&lt;/p&gt;
&lt;p&gt;一个比较形象的例子是装配式建筑。传统建筑（单体应用）的施工周期（开发时间）很长，往往依赖于建筑公司（开发团队）的能力和水平，修建完成后难以搬迁和复用，而装配式建筑（微服务）的梁、板、柱、墙等构件（单个服务）可以事先批量化的在工厂（容器）生产，而在建造过程中，我们可以把构件想象成一块块乐高积木，在施工现场只需把它们拼合在一起，大大提升了施工进度和建筑质量。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczxm11oj30b408c3yf_hufb6c53fc463f3b10f2fe62c13f7de8f1_5139_36c4222e7d0624d6b76e8fc9b97908af.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczxm11oj30b408c3yf_hufb6c53fc463f3b10f2fe62c13f7de8f1_5139_5d75818fe8491cc4521bb642cc8b5e58.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczxm11oj30b408c3yf_hufb6c53fc463f3b10f2fe62c13f7de8f1_5139_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczxm11oj30b408c3yf_hufb6c53fc463f3b10f2fe62c13f7de8f1_5139_36c4222e7d0624d6b76e8fc9b97908af.webp&#34;
               width=&#34;400&#34;
               height=&#34;300&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;装配式建筑：乐高积木&lt;/p&gt;
&lt;p&gt;微服务的特征包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小：粒度小，专注于一件事&lt;/li&gt;
&lt;li&gt;独：单独的进程。微服务不等于组件，服务是可以直接使用的商品，组件是待加工的原材料&lt;/li&gt;
&lt;li&gt;轻：轻量级通信机制，通常是HTTP Restful的接口。此处区别于传统的SOA（面向服务的架构）&lt;/li&gt;
&lt;li&gt;松：松耦合，可以独立部署。每个微服务可以独立编译、独立部署、独立运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd001wjrj30l20ccgmg_hu2d20252900a05001b72fb5ef35890432_41402_242afce1e2d89bb755bc5d2c0e9d5582.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd001wjrj30l20ccgmg_hu2d20252900a05001b72fb5ef35890432_41402_0c045e375a83adc1f74f7fe311229fb5.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd001wjrj30l20ccgmg_hu2d20252900a05001b72fb5ef35890432_41402_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd001wjrj30l20ccgmg_hu2d20252900a05001b72fb5ef35890432_41402_242afce1e2d89bb755bc5d2c0e9d5582.webp&#34;
               width=&#34;758&#34;
               height=&#34;444&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务采用独立的数据库服务，数据去中心化&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczsykmpj30lm0a3wfa_hubc106056f3450ccbc2403aeb7f0f7a26_39886_9d3ddec94050eb607dea0d612c73b58b.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczsykmpj30lm0a3wfa_hubc106056f3450ccbc2403aeb7f0f7a26_39886_00db68d54ce5a7b9735b3fb3ea00f75c.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczsykmpj30lm0a3wfa_hubc106056f3450ccbc2403aeb7f0f7a26_39886_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczsykmpj30lm0a3wfa_hubc106056f3450ccbc2403aeb7f0f7a26_39886_9d3ddec94050eb607dea0d612c73b58b.webp&#34;
               width=&#34;760&#34;
               height=&#34;355&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务运行在独立的进程中，部署去中心化&lt;/p&gt;
&lt;p&gt;微服务架构的好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;易于开发与维护：微服务相对小，易于理解&lt;/li&gt;
&lt;li&gt;独立部署：一个微服务的修改不需要协调其它服务&lt;/li&gt;
&lt;li&gt;伸缩性强：每个服务都可按硬件资源的需求进行独立扩容&lt;/li&gt;
&lt;li&gt;与组织结构相匹配：微服务架构可以更好将架构和组织相匹配，每个团队独立负责某些服务，获得更高的生产力&lt;/li&gt;
&lt;li&gt;技术异构性：使用最适合该服务的技术，降低尝试新技术的成本&lt;/li&gt;
&lt;li&gt;企业环境下的特殊要求：去中心化和集中管控/治理的平衡，分布式数据库和企业闭环数据模型的平衡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;微服务的实践有两个重要问题：什么时候选择微服务架构，以及颗粒度如何拆分，与经验和实际情况息息相关。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd02ry2mj30q10khwfs_hu8aed925f9617dbbd42cb19cfebe4ac13_58447_7d9e4c245210c1fff89bf7dff07f9064.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd02ry2mj30q10khwfs_hu8aed925f9617dbbd42cb19cfebe4ac13_58447_0813c16bea27785606a1a32e0b355988.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd02ry2mj30q10khwfs_hu8aed925f9617dbbd42cb19cfebe4ac13_58447_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd02ry2mj30q10khwfs_hu8aed925f9617dbbd42cb19cfebe4ac13_58447_7d9e4c245210c1fff89bf7dff07f9064.webp&#34;
               width=&#34;760&#34;
               height=&#34;598&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上图来自Martin Fowler另一篇叫《&lt;a href=&#34;https://martinfowler.com/bliki/MicroservicePremium.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务进阶&lt;/a&gt;》的文章，揭示了生产率和复杂度的一个关系。在复杂度较小时采用单体应用的生产率更高，复杂度到了一定规模时，单体应用的生产率开始急剧下降，这时对其进行微服务化的拆分才是合算的。&lt;/p&gt;
&lt;p&gt;我个人建议是除非在可见的将来，复杂度都不会显著提高的情况下，才选择单体应用，否则其它时候都应提前为微服务架构做好设计和准备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务基础设施及案例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下图是一个典型的微服务技术架构图。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczzj84wj30u00i0wfx_hu16453f90fa308fbb6da427b247b62cb3_63597_1f8ee17a5a14bc4e459bb77e0774c44e.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczzj84wj30u00i0wfx_hu16453f90fa308fbb6da427b247b62cb3_63597_18c3dcc2c165fdc14f4fd1759a3fd8f3.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczzj84wj30u00i0wfx_hu16453f90fa308fbb6da427b247b62cb3_63597_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczzj84wj30u00i0wfx_hu16453f90fa308fbb6da427b247b62cb3_63597_1f8ee17a5a14bc4e459bb77e0774c44e.webp&#34;
               width=&#34;760&#34;
               height=&#34;456&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务架构最常见、最广泛使用的框架是基于Java的Spring Cloud（集成了上图里的Netflix OSS技术栈），提供了服务发现、负载均衡、故障转移、动态扩展和数据分区等功能，已经成为微服务的最佳实践。&lt;/p&gt;
&lt;p&gt;但是Spring Cloud构建在Java虚拟机之上，不能满足高并发下的性能要求，所以许多开源产品层出不穷，其中也包括中国互联网企业所贡献的微服务框架，例如华为的ServiceComb、阿里的Dubbo等等。&lt;/p&gt;
&lt;p&gt;下面我们举一个例子。传统的电商的技术架构如下图所示，这是一个单体应用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfkqzedtg2j30ir09vgm0_hu89b410f710d9102a60494b25620575b7_18196_b7cd361760db9c624970742f77031ed1.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfkqzedtg2j30ir09vgm0_hu89b410f710d9102a60494b25620575b7_18196_135b82e61fffb8459be440248fb31058.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfkqzedtg2j30ir09vgm0_hu89b410f710d9102a60494b25620575b7_18196_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfkqzedtg2j30ir09vgm0_hu89b410f710d9102a60494b25620575b7_18196_b7cd361760db9c624970742f77031ed1.webp&#34;
               width=&#34;675&#34;
               height=&#34;355&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;所带来的常见问题包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不同客户端产品之间，例如小程序、App、网站端有许多相同业务逻辑的重复代码，每个产品都要各自维护一份代码，修改的时候所有地方要一起修改。&lt;/li&gt;
&lt;li&gt;单个应用经常需要给其他应用提供接口，渐渐地越来越复杂，包含了很多本来不属于它的逻辑，代码变得臃肿，功能边界模糊。&lt;/li&gt;
&lt;li&gt;系统代码耦合性高，相互之间逻辑复杂，一旦出现开发离职的情况，继任者需要花很长时间review代码，才有可能搞清楚整体架构和逻辑关系。&lt;/li&gt;
&lt;li&gt;多个应用使用一个数据库，依赖性严重，很难重构和优化。所有应用都在一个数据库上操作，数据库很容易出现性能瓶颈。同时数据库成为单点，出现意外整个系统都会受到影响。&lt;/li&gt;
&lt;li&gt;即使只改动一个小功能，也需要整个应用一起发布，发布流程繁琐、上线时间长。并且很容易出现一个小bug影响整个系统，每次发布都是胆战心惊，很容易出现开发、运维和测试之间的矛盾。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们用微服务重构整个系统：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd01uivsj30jw0ex3z5_hu306b72443a23decf040611c4dd2637db_33679_930a7dc90b914f3812875d8a0d3333f1.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd01uivsj30jw0ex3z5_hu306b72443a23decf040611c4dd2637db_33679_c7b6f25f4cba36557480a908611ceccc.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd01uivsj30jw0ex3z5_hu306b72443a23decf040611c4dd2637db_33679_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd01uivsj30jw0ex3z5_hu306b72443a23decf040611c4dd2637db_33679_930a7dc90b914f3812875d8a0d3333f1.webp&#34;
               width=&#34;716&#34;
               height=&#34;537&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;改造之后，去除了大量冗余代码，系统复用性得到提升；不同的团队专注于不同的微服务，代码和工程质量得到保证；数据库不再存在单点问题，系统健壮性得以提升；前后端分离，业务逻辑更加清晰；降低了系统耦合性，不同的微服务可以分开部署上线，相互之间并不影响。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组织挑战、康威定律与蜂群理论&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请注意，微服务理念不仅反映了技术架构的变化，也反映了组织内部沟通结构为了应对更加灵活、快速、碎片化的需求和环境而变化的结果。例如&lt;a href=&#34;https://wiki.mbalib.com/wiki/%E6%B6%B2%E6%80%81%E5%85%AC%E5%8F%B8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;液态组织&lt;/a&gt;就是组织形态应对当前市场环境快速变化的一种输出形式，但实际应该如何构建？&lt;/p&gt;
&lt;p&gt;曾经有一张非常有名的组织架构图，如下图所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczqcikwj30r80qjtd9_hu098c70e18515bf28f3cddfbcd2b8380c_177678_6d1621a6f84987aa170a076843802acb.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczqcikwj30r80qjtd9_hu098c70e18515bf28f3cddfbcd2b8380c_177678_c641bd7eca8a319b979649a0b8efc080.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczqcikwj30r80qjtd9_hu098c70e18515bf28f3cddfbcd2b8380c_177678_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczqcikwj30r80qjtd9_hu098c70e18515bf28f3cddfbcd2b8380c_177678_6d1621a6f84987aa170a076843802acb.webp&#34;
               width=&#34;760&#34;
               height=&#34;741&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对一家企业来说，能一步步不断发展壮大，进入一个领域就能迅速突破，这其中的根本核心必然是组织模式。在粗放发展的年代，很少有企业强调内部效率，组织模式绝大部分都类似单体应用，按照职能划分的方式进行管理，从而创造了无数的烟囱/谷仓。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczucghvj30u00fzdgq_hue28d4934894b75b4cfaa5aeb69699720_43499_b39c3bcba3189589454718253e995351.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczucghvj30u00fzdgq_hue28d4934894b75b4cfaa5aeb69699720_43499_e0dfb50b6457b2c1c58dd5b9400d2851.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczucghvj30u00fzdgq_hue28d4934894b75b4cfaa5aeb69699720_43499_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczucghvj30u00fzdgq_hue28d4934894b75b4cfaa5aeb69699720_43499_b39c3bcba3189589454718253e995351.webp&#34;
               width=&#34;760&#34;
               height=&#34;405&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;单体架构和职能型组织模式相似&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd07y5d0j30f00bb75h_hu5717a8643cd1d52c53f25cf5422062d9_54501_a0ae915065112fab0109c214007d1d58.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd07y5d0j30f00bb75h_hu5717a8643cd1d52c53f25cf5422062d9_54501_82aa5fa2813a573ac390d7556ec5b4c6.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd07y5d0j30f00bb75h_hu5717a8643cd1d52c53f25cf5422062d9_54501_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd07y5d0j30f00bb75h_hu5717a8643cd1d52c53f25cf5422062d9_54501_a0ae915065112fab0109c214007d1d58.webp&#34;
               width=&#34;540&#34;
               height=&#34;407&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一张著名的图：技术组织造就了难以逾越的谷仓&lt;/p&gt;
&lt;p&gt;我在我的知识星球里提出过&lt;a href=&#34;https://wx.zsxq.com/mweb/views/topicdetail/topicdetail.html%EF%BC%9Ftopic_id%3D421851248852128%26group_id%3D28518855224581&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;企业级产品设计所面临的重要挑战&lt;/a&gt;，其中一个问题是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本。企业级产品现在经常涉及多个平台和不同的版本，例如Web、PC、App、钉钉、企业微信、微信小程序、飞书的版本等等，第一会面临重复开发的问题，第二业务逻辑非常复杂，很容易造成产品逻辑和体验的不统一，以及不同版本产品之间逻辑的缺失。例如登录和注册微信小程序可能用的是手机号，而通过邮件注册需要使用的却是邮箱。如何设计一套比较好的产品流程和组织架构，来保证统一完善的产品逻辑及用户体验？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的，这不仅仅是产品和技术问题，还是组织问题。现在越来越多的企业意识到了最大的挑战在于组织内部，无论是增长黑客还是MVP的理念都需要快速灵活的机制来配合。为什么有的组织效率高、能力强，能及时响应客户的需求和环境变化？&lt;/p&gt;
&lt;p&gt;新的组织设计理念认为传统的烟囱形式会成为创建有效增长和盈利途径的障碍，需要解构组织孤岛，采用跨职能组织的形式以支持增长。企业组织设计是非常专业的领域，有许多文章讨论，例如《&lt;a href=&#34;https://flevy.com/blog/winning-your-way-against-organizational-silos-the-strategic-way/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;战胜组织孤岛的战略之路&lt;/a&gt;》，本文不延伸讨论。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd08un2nj30u00iqq3s_hue01f9b180be08403bd923ebf64da3edc_41784_dbfaf73509fad68a539ad8dc482edf93.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd08un2nj30u00iqq3s_hue01f9b180be08403bd923ebf64da3edc_41784_1a53d741d7a0f6b395ebb9766302e9d2.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd08un2nj30u00iqq3s_hue01f9b180be08403bd923ebf64da3edc_41784_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd08un2nj30u00iqq3s_hue01f9b180be08403bd923ebf64da3edc_41784_dbfaf73509fad68a539ad8dc482edf93.webp&#34;
               width=&#34;760&#34;
               height=&#34;474&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;职能组织与跨职能组织&lt;/p&gt;
&lt;p&gt;我们可以看到单体应用和职能组织，微服务与跨职能组织，在形式上是高度相似的，这引申出微服务背后的理论基础。&lt;/p&gt;
&lt;p&gt;“当希望把一个大型应用拆分成多个部分时，管理层通常将重点放在技术层面。而如果组织架构还按UI团队、服务端逻辑团队和数据库团队的标准设立，甚至一个非常简单的变更都将导致跨团队间的项目协作，从而耗费时间和预算审批。一个高效的团队会针对这种情况进行优化，关注它们所涉及的应用逻辑，并从中做出更好的选择。换句话说，逻辑无处不在。这是康威定律的一个实例。”&amp;ndash; Martin Fowler&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;设计系统的架构受制于产生这些设计的组织的沟通结构（Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations）&amp;ndash; Melvyn Conway, 1967&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;康威定律可谓软件架构设计中的第一定律，本质是对商业世界的规律总结，但是因为投稿到编程相关的杂志，后经过《人月神话》这本软件界圣经的引用，并命名为康威定律（Conway&amp;rsquo;s law），因此得以推广。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczv9nl7j30n50f7dhk_hu484c0b35752d744b53689c656a5e3cff_74085_622b8d37e11f7a6e1a47cf54872ff2ef.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczv9nl7j30n50f7dhk_hu484c0b35752d744b53689c656a5e3cff_74085_30a0bf3972d745a32c4c0f05c6427a3e.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczv9nl7j30n50f7dhk_hu484c0b35752d744b53689c656a5e3cff_74085_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczv9nl7j30n50f7dhk_hu484c0b35752d744b53689c656a5e3cff_74085_622b8d37e11f7a6e1a47cf54872ff2ef.webp&#34;
               width=&#34;760&#34;
               height=&#34;499&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;只通过简单的描述可能无法理解康威定律的精髓所在，原文中康威定律可总结为四项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一定律 组织沟通方式会通过系统设计表达出来（Communication dictates design）&lt;/li&gt;
&lt;li&gt;第二定律 时间再多一件事情也不可能做的完美，但总有时间做完一件事情（There is never enough time to do something right, but there is always enough time to do it over）&lt;/li&gt;
&lt;li&gt;第三定律 线型系统和线型组织架构间有潜在的异质同态特性（There is a homomorphism from the linear graph of a system to the linear graph of its design organization）&lt;/li&gt;
&lt;li&gt;第四定律 大的系统组织总是比小系统更倾向于分解（The structures of large systems tend to disintegrate during development, qualitatively more so than with small systems）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如微服务的团队间应该是inter-operate，not integrate（互操作、不集成）。inter-operate是定义好系统的边界和接口，在一个团队内全栈，让团队自治，原因就是因为如果团队按照这样的方式组建，将沟通的成本维持在系统内部，每个子系统就会更加内聚，彼此的依赖耦合变弱，跨系统的沟通成本也就能减低。&lt;/p&gt;
&lt;p&gt;康威定律可以上升到哲学的高度进行讨论，但是过于复杂。简言之，微服务架构与组织模式互相决定和影响，协同才能发挥出最大价值。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczyn0ihj30ks0byq3k_hua6663080370c4223435b2b1d2f48628b_33555_9482f221ab2d7a357358c3ae7f480bc8.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczyn0ihj30ks0byq3k_hua6663080370c4223435b2b1d2f48628b_33555_5396d5f24d04a5e1705a4433adc64ac1.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczyn0ihj30ks0byq3k_hua6663080370c4223435b2b1d2f48628b_33555_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczyn0ihj30ks0byq3k_hua6663080370c4223435b2b1d2f48628b_33555_9482f221ab2d7a357358c3ae7f480bc8.webp&#34;
               width=&#34;748&#34;
               height=&#34;430&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;跨职能组织-微服务架构/团队边界强化服务边界&lt;/p&gt;
&lt;p&gt;凯文·凯利在《失控》中提出了著名的“蜂群理论”，利用蜂巢思维比喻人类的协作带来的群体智慧：依靠成千上万个发条一起驱动一个并行的系统，进行生产，进行自维持。蜂巢思维就是“群体思维”（Collective consciousness）。作为“超级有机体”的蜂群，被称为“分布式系统”，是以生物逻辑建立起来的群集模型。由此形成的蜂巢思维这四个理念至关重要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;去中心化。几乎所有的团队都直接接触用户与市场，因此所有的团队都将围绕市场格局而变，充分重视第一线的敏感度与直觉，从而做到真正的应时而动；&lt;/li&gt;
&lt;li&gt;分布式。与垂直型集团组织不同，这个形态打破单一的行业垂直细分格局。在这种多维度矩阵式结构中，拥有更加专注的功能型团队，可建立起一个紧密围绕具体客户与市场的服务体系；&lt;/li&gt;
&lt;li&gt;强化合作。从控制权、所有权的角度来说，这些组织单元是分离的，因而要建立起一种横向合作的文化，打破物理团队，提倡交流、合作，整体核心竞争力的提升；&lt;/li&gt;
&lt;li&gt;适应变化。市场在不断变化，但因所有的团队都直接接触用户与市场，因此无论个人还是团队，都将不断的学习和进化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;微服务理念对应的组织模式包括蜂巢型组织，它具有突出的稳定性和抗弯曲能力，特点是：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨组织：它不一定是一个独立的法人实体，而是为了特定目标或项目形成的联盟&lt;/li&gt;
&lt;li&gt;相对统一：蜂巢组织不是一成不变的，当市场需求或组织目标发生变化时立即变化&lt;/li&gt;
&lt;li&gt;分享性：它改变了传统的等级分明的金字塔结构，允许信息横向传递与交流，使信息利用更为充分及时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这样一个以蜂巢为理念搭建的企业圈层里面，各个独立团队能够得到更好的协助与支撑，不断扩大视野，提高眼界，掌握话语权，团队成员也会更有归属感。这样的团队乃至蜂巢本身，也一定会更有活力和变革力，更加能适应市场的变化。蜂巢型组织有四个突出特点，所谓活系统的特质也正是由此而来：没有强制性的中心控制；次级单位具有自治的特质；次级单位之间彼此高度连接；点对点间的影响通过网络形成了非线性因果关系。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd053on0j30c10ftab4_hu93093b43c895b72af2acaf5e7c09971a_49528_fb85c4fec393ba0e1db8886da8adbf4a.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd053on0j30c10ftab4_hu93093b43c895b72af2acaf5e7c09971a_49528_2d94d17414eced14fb0132110f4c5aa1.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd053on0j30c10ftab4_hu93093b43c895b72af2acaf5e7c09971a_49528_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd053on0j30c10ftab4_hu93093b43c895b72af2acaf5e7c09971a_49528_fb85c4fec393ba0e1db8886da8adbf4a.webp&#34;
               width=&#34;433&#34;
               height=&#34;569&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;微服务：筑巢&lt;/p&gt;
&lt;p&gt;蜂巢型组织的典型案例之一是华为。除了组织架构去中心化的管理模式之外，华为的著名的轮值CEO制度正是由此而来，华为有三位轮值CEO，每六个月轮换一次，这体现了依靠集体民主决策而非一人独裁的理念。&lt;/p&gt;
&lt;p&gt;再例如国美蜂巢式组织变革的实践是将由四个大区管辖54个分公司，调整为七个大区直接管辖200家分公司的结构，即将原来二级市场里的146家分公司独立出来，直接划归大区管辖，而原来四个大区变成七个大区。实践证明，组织扁平化是国美提升供应链效率，提升消费者消费体验的重要战略。&lt;/p&gt;
&lt;p&gt;国外著名的代表案例是微服务先驱Netflix。Netflix是一家技术强大的互联网公司，但是它却没有CTO职位，产品团队和技术团队(包括UI前端工程团队、Discovery搜索工程团队和Platform平台团队等)全部汇报首席产品CPO，产品驱动是该公司的核心文化要素之一，Netflix称其为BusDevOps组织架构。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcztwultj30l50giq4c_hu44fc56ccebcc1ea6dd987d69d1f66077_62239_1b1060918fc4ffe7e722702f8dbb519b.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcztwultj30l50giq4c_hu44fc56ccebcc1ea6dd987d69d1f66077_62239_c2f04adb08debfabe463c5229d6a4247.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcztwultj30l50giq4c_hu44fc56ccebcc1ea6dd987d69d1f66077_62239_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcztwultj30l50giq4c_hu44fc56ccebcc1ea6dd987d69d1f66077_62239_1b1060918fc4ffe7e722702f8dbb519b.webp&#34;
               width=&#34;760&#34;
               height=&#34;593&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Netflix：BusDevOps组织&lt;/p&gt;
&lt;p&gt;在整个系列第二部分中，我们介绍了DevOps，现在我们可以理解，DevOps是配合微服务的理念组织构建团队协作的方式，各团队可以独立开发，测试、发布和迭代各自的微服务，互不干扰，沟通协调成本小。全部业务、研发和运维围绕产品开展工作，统一目标，大家都是产品驱动，分别服务于内外不同客户，避免技术驱动 vs 业务驱动的陷阱。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd06mlidj30nm0e2wfs_hub7067fda848ef44cb43043fefc132bc2_58444_3cbf1d934dfd952e0fafedc8024178a7.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd06mlidj30nm0e2wfs_hub7067fda848ef44cb43043fefc132bc2_58444_fca25a71624ab996504d9456f01d43d0.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd06mlidj30nm0e2wfs_hub7067fda848ef44cb43043fefc132bc2_58444_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd06mlidj30nm0e2wfs_hub7067fda848ef44cb43043fefc132bc2_58444_3cbf1d934dfd952e0fafedc8024178a7.webp&#34;
               width=&#34;760&#34;
               height=&#34;452&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;传统水平组织 vs DevOps驱动的垂直组织&lt;/p&gt;
&lt;p&gt;在某些文章中，认为微服务的切割应该按照组织架构来划分，我反而觉得应该按微服务的分割方式来划分组织架构，&lt;strong&gt;因为归根结底，组织架构应该为业务服务，而不是业务为组织服务&lt;/strong&gt;，组织需要贯彻执行微服务的理念，就必须由微服务驱动组织业务的不断迭代演进。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务与中台&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可能有人会问，中台的目标不也是为了解决企业内部业务系统烟囱林立，数据孤岛严重，各自为战，缺乏复用性，所以要充分提取业务共性，从而及时应对需求变化，听起来和微服务的目标和理念非常相似，那它们之间有什么异同呢？&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd01dzu0j30pu0e4abk_hu6a429d5a49c42b5f60f69461a3f75a18_65786_f68121c9d9feeae0b797a6d9f14268e1.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd01dzu0j30pu0e4abk_hu6a429d5a49c42b5f60f69461a3f75a18_65786_87179fefcc15e9c55a033e49c43550f7.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd01dzu0j30pu0e4abk_hu6a429d5a49c42b5f60f69461a3f75a18_65786_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd01dzu0j30pu0e4abk_hu6a429d5a49c42b5f60f69461a3f75a18_65786_f68121c9d9feeae0b797a6d9f14268e1.webp&#34;
               width=&#34;760&#34;
               height=&#34;415&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;阿里巴巴中台战略架构图&lt;/p&gt;
&lt;p&gt;来自阿里官方的定义，“企业中台就是，将企业的核心能力随着业务不断发展以数字化形式沉淀到平台，形成以服务为中心，由业务中台和数据中台构建起数据闭环运转的运营体系，供企业更高效的进行业务探索和创新，实现以数字化资产的形态构建企业核心差异化竞争力。”&lt;/p&gt;
&lt;p&gt;中台架构，简单地说，就是企业级能力的复用，一种方法论，企业治理思想。&lt;/p&gt;
&lt;p&gt;微服务，是可独立开发、维护、部署的小型业务单元，是一种技术架构方式。&lt;/p&gt;
&lt;p&gt;所以中台并不是微服务，中台是一种企业治理思想和方法论，偏向于宏观，微服务是技术架构方式，偏向于微观。而中台化的落地，离不开使用微服务架构。&lt;/p&gt;
&lt;p&gt;中台强调核心基础能力的建设，基础能力以原子服务的形式来建设，并通过将原子服务产品化，支撑业务端各种场景的快速迭代和创新；原子服务和微服务所倡导的服务自闭环思想不谋而合，使得微服务成为实现原子服务的合适架构。&lt;/p&gt;
&lt;p&gt;支撑业务场景的应用也是通过服务来实现，其生命周期随业务变化需要非常灵活的调整，这也和微服务强调的快速迭代高度一致，所以业务应用服务也适合通过微服务来实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API管理与API集成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们讲讲微服务相关的两个具体领域，API管理与API集成。&lt;/p&gt;
&lt;p&gt;1、全生命周期API管理&lt;/p&gt;
&lt;p&gt;上文提到微服务各个服务对外都是以Restful API形式提供服务。再加上企业越来越多地使用云服务，各种云服务也提供了众多API。&lt;/p&gt;
&lt;p&gt;这就导致企业拥有的API越来越多，那就当然需要有一个系统把这些API统一管理起来。同时，如果能够顺便把这些API的权限认证、安全审计等等机制也一并统一了，那就更好了，这样其它系统调用起来就方便多了。能管了以后，当然又会冒出来更多的想法。比如，能不能改一下原有API的格式内容？能不能把两个API合成一个API？能不能让一个API直接调用另一个API？能不能把这些API的调用自动化串起来？&lt;/p&gt;
&lt;p&gt;简单来说，API管理就是解决以上这些问题的。我们来看看Gartner全生命周期API管理领域魔力象限，许多巨头都在里面。值得注意的是，Google之所以排名第一，是因为它在2016年用6.5亿美元收购了刚上市一年左右的Apigee。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczqlzltj30pf0qidh0_hua0a796b0750d564006b691c889e8ea67_53675_1bda27e5b26ecae7f4c56e5da5d30f67.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczqlzltj30pf0qidh0_hua0a796b0750d564006b691c889e8ea67_53675_56f020b2fe0bbcddcec666c8b540f77f.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczqlzltj30pf0qidh0_hua0a796b0750d564006b691c889e8ea67_53675_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczqlzltj30pf0qidh0_hua0a796b0750d564006b691c889e8ea67_53675_1bda27e5b26ecae7f4c56e5da5d30f67.webp&#34;
               width=&#34;729&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;2019年全生命周期API管理魔力象限&lt;/p&gt;
&lt;p&gt;2、API网关：微服务基础设施&lt;/p&gt;
&lt;p&gt;全生命周期API管理里一个细分的领域是API网关（API Gateway），它是微服务1.0时代最重要的基础设施。&lt;/p&gt;
&lt;p&gt;API网关顾名思义，是出现在系统边界上的一个面向API的、串行集中式的强管控服务，这里的边界是企业IT系统的边界，主要起到隔离外部访问与内部系统的作用，并处理常见的南北向流量。在微服务概念的流行之前，API网关的实体就已经诞生了，例如银行、证券等领域常见的前置机系统，它也是解决访问认证、报文转换、访问统计等问题的。&lt;/p&gt;
&lt;p&gt;API网关的流行，源于近几年来，移动应用与企业间互联需求的兴起。移动应用、企业互联，使得后台服务支持的对象，从以前单一的Web应用，扩展到多种使用场景，且每种使用场景对后台服务的要求都不尽相同。这不仅增加了后台服务的响应量，还增加了后台服务的复杂性。随着微服务架构概念的提出，API网关成为了微服务架构的标配组件。&lt;/p&gt;
&lt;p&gt;API网关作为企业能力开放的一个门户，除了具备基本的请求转发、协议转换、路由等功能，以及高性能和高稳定性外，还需具备良好的扩展性，已便于网关能力的不断增强。在网关实施过程中，要规划好网关层与服务层的交互方式，尽量使得网关层与服务层解耦，便于各个团队工作的独立性。另外，在API的管理上，需要提供API全生命周期的发布、配置、鉴权、流控、监控等配套的管理功能。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd00vmcjj30rf0b30tg_hu76ddbfaecf83ce867870622013b65d2a_37033_d426bc79b20fa5252a51d57a5f0bf1d0.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd00vmcjj30rf0b30tg_hu76ddbfaecf83ce867870622013b65d2a_37033_3fcc3a3c9196c06f9e840de67bc72141.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd00vmcjj30rf0b30tg_hu76ddbfaecf83ce867870622013b65d2a_37033_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd00vmcjj30rf0b30tg_hu76ddbfaecf83ce867870622013b65d2a_37033_d426bc79b20fa5252a51d57a5f0bf1d0.webp&#34;
               width=&#34;760&#34;
               height=&#34;307&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;API网关：微服务基础设施&lt;/p&gt;
&lt;p&gt;例如Uber，在传统的单体架构遇到越来越大挑战的时候，决定改变自己的架构，效仿亚马逊、Netflix、Twitter等其他超级增长公司，将其整体架构拆分为多个代码库，以形成一个微服务架构。其主要变化是引入了API网关，所有的司机和乘客都是通过这个网关连接的。从API网关，所有的内部点都连接在一起，如乘客管理、司机管理、行程管理等。每个单元是单独的可部署单元，执行单独的功能。例如：如果你想在账单微服务中更改任何内容，那么只需部署账单微服务，而不必部署其他服务。所有的功能都是单独扩展的，即每个特征之间的相互依赖被移除。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhcztehgnj30lc0l6jsx_hu107734a24b20ffcac8a725fdde455eae_67241_6a58f001bf643855a597490a34b24e94.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhcztehgnj30lc0l6jsx_hu107734a24b20ffcac8a725fdde455eae_67241_83d37bb03e022010535f92b9be12d9db.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhcztehgnj30lc0l6jsx_hu107734a24b20ffcac8a725fdde455eae_67241_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhcztehgnj30lc0l6jsx_hu107734a24b20ffcac8a725fdde455eae_67241_6a58f001bf643855a597490a34b24e94.webp&#34;
               width=&#34;760&#34;
               height=&#34;754&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Uber的微服务架构&lt;/p&gt;
&lt;p&gt;API网关带来的的好处包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网关层对外部和内部进行了隔离，保障了后台服务的安全性&lt;/li&gt;
&lt;li&gt;对外访问控制由网络层面转换成了运维层面，减少变更的流程和错误成本&lt;/li&gt;
&lt;li&gt;减少客户端与服务的耦合，服务可以独立发展。通过网关层来做映射&lt;/li&gt;
&lt;li&gt;通过网关层聚合，减少外部访问的频次，提升访问效率&lt;/li&gt;
&lt;li&gt;节约后端服务开发成本，减少上线风险&lt;/li&gt;
&lt;li&gt;为服务熔断，灰度发布，线上测试提供简单方案。&lt;/li&gt;
&lt;li&gt;便于扩展&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;API网关常见的解决方案包括Spring Cloud Gateway、Zuul、Tyk以及下文要介绍的Kong。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczshp2sj309c0aqq3p_hu4892f16a970178d608cbb389e90f332f_26433_f152cc42ccc1cac5200052279761a52e.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczshp2sj309c0aqq3p_hu4892f16a970178d608cbb389e90f332f_26433_ff07d5999ed93ce725f72114442a85b4.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczshp2sj309c0aqq3p_hu4892f16a970178d608cbb389e90f332f_26433_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczshp2sj309c0aqq3p_hu4892f16a970178d608cbb389e90f332f_26433_f152cc42ccc1cac5200052279761a52e.webp&#34;
               width=&#34;336&#34;
               height=&#34;386&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
CNCF Landscape：API Gateway&lt;/p&gt;
&lt;p&gt;3、Kong：API网关独角兽&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczx5107j30k50a2aa7_hu24ce36b36256a0d501981dcc38bb67e7_11249_e9c60595bb146c4cd4e236a193e245c2.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczx5107j30k50a2aa7_hu24ce36b36256a0d501981dcc38bb67e7_11249_fa2cc7d3650902565fb46bceda279e7d.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczx5107j30k50a2aa7_hu24ce36b36256a0d501981dcc38bb67e7_11249_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczx5107j30k50a2aa7_hu24ce36b36256a0d501981dcc38bb67e7_11249_e9c60595bb146c4cd4e236a193e245c2.webp&#34;
               width=&#34;725&#34;
               height=&#34;362&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kong是我去年起就在关注的一家公司，它的创业历程非常有意思。“Kong的创始人Augusto Marietti（简称Aghi）出生在罗马，因为意大利创业环境很弱，在2009年飞来了旧金山。Aghi刚来就参加了一个早期创业者的小聚会，聚会上参加的人不多，但现在都是如雷贯耳的名字：Uber的创始人Travis，Airbnb的CEO Brian，Dropbox的CEO Drew和Box的CEO Aaron。Aghi当时为了省钱，借住在Uber创始人Travis家，每天睡沙发。&lt;/p&gt;
&lt;p&gt;后来Travis搬了家，Aghi又去了当时只有十多个人的Airbnb办公室里借住，当时的Airbnb虽然Bug很多，但订单量一天天疯涨。在Travis的帮助下拿到天使投资后，Aghi做了一个把云端的组件连接起来的PaaS公司，一做就是五六年。由于时机不对，公司濒临破产，Aghi告诉团队，这么多年公司写了很多小功能，现在可以把代码开放出去，放在网上看看有没有人用，给社区做点贡献。没想到这看似濒死的挣扎，却给公司带来了巨大的转机。&lt;/p&gt;
&lt;p&gt;后来，公司关于API管理的代码模块，在GitHub上被疯狂下载，Kong也接到客户要求，希望购买相应的付费企业版。Kong敏锐地发现了这个大机会，迅速转型成了一个开源软件公司。”如果在CSDN博客上搜索，关于Kong开源版本的教程比比皆是。这是一个成功的开源软件商业化的案例，听起来经历和Docker非常相似。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd0385pwj30n308twff_huf5c773c5282a8c25dbbfa8bc4d07df7a_30211_2fc3d7ddd35fd39b0092d0226b419083.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd0385pwj30n308twff_huf5c773c5282a8c25dbbfa8bc4d07df7a_30211_5e9ce872681fd547a45a9905720f9ec4.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd0385pwj30n308twff_huf5c773c5282a8c25dbbfa8bc4d07df7a_30211_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd0385pwj30n308twff_huf5c773c5282a8c25dbbfa8bc4d07df7a_30211_2fc3d7ddd35fd39b0092d0226b419083.webp&#34;
               width=&#34;760&#34;
               height=&#34;290&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kong开源版本Github主页&lt;/p&gt;
&lt;p&gt;Kong成长的大背景是软件开发技术正在经历革命性变化，全球5000强公司都在转向新的分布式软件架构，因为现代应用程序需要有高度可扩展性、跨平台支持以及处理实时数据流的能力。IDC预计，到2022年90%的应用程序将采用微服务架构和第三方代码，35%的生产应用程序将诞生于云端。由于容器和敏捷方法的采用，预计2018-2023年间将诞生5亿个新应用程序。&lt;/p&gt;
&lt;p&gt;同时开源软件初期具有的优势也在逐渐显现。Kong本身基于开源的Openresty（Nginx+lua），但比Nginx提供了更简单的配置方式，数据采用了Apache Cassandra/PostgreSQL存储，由于底层使用Nginx，所以性能比基于Java的Spring Cloud Gateway及Zuul更为出色。Kong另外一个非常诱人的地方就是提供了大量的插件来扩展应用，通过设置不同的插件可以为服务提供各种增强的功能。Kong默认插件包括：身份认证、安全、流量控制、分析监控、转换等等。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczz0tuzj30u00ftmxs_huaffadae9d6e4dccfecd3326eb76d4978_33556_db0a1482560ad29f16ffe05b232b661a.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczz0tuzj30u00ftmxs_huaffadae9d6e4dccfecd3326eb76d4978_33556_343380f1bb35dd61ac2b4998efb4856f.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczz0tuzj30u00ftmxs_huaffadae9d6e4dccfecd3326eb76d4978_33556_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczz0tuzj30u00ftmxs_huaffadae9d6e4dccfecd3326eb76d4978_33556_db0a1482560ad29f16ffe05b232b661a.webp&#34;
               width=&#34;760&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kong的插件功能&lt;/p&gt;
&lt;p&gt;Kong提供开源的Kong Gateway和商业版Kong Enterprise两个产品。例如在插件功能上，商业版本提供更多的选择。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd03s2uwj30qz0kmabu_huccfd8bfb7e7c9b6370dee60354a6c4e8_75842_1de24bbc225d327803e13742e6e609c0.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd03s2uwj30qz0kmabu_huccfd8bfb7e7c9b6370dee60354a6c4e8_75842_0f01b9915678abc346f36119c652ef73.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd03s2uwj30qz0kmabu_huccfd8bfb7e7c9b6370dee60354a6c4e8_75842_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd03s2uwj30qz0kmabu_huccfd8bfb7e7c9b6370dee60354a6c4e8_75842_1de24bbc225d327803e13742e6e609c0.webp&#34;
               width=&#34;760&#34;
               height=&#34;581&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kong的部分插件功能&lt;/p&gt;
&lt;p&gt;Kong通过云原生、混合和本地部署无缝连接API和微服务，便于程序员开发可扩展的微服务应用，推动业务增长。凭借高性能的开源内核和AI技术以及机器学习，Kong将实现全方位的服务生命周期管理，覆盖前期到后期全过程，帮助客户搭建和管理创新产品及服务。它服务于全球5000强企业，帮助程序员更方便地开发和管理高性能、可扩展的微服务应用，推动业务增长。&lt;/p&gt;
&lt;p&gt;从业务和融资上来讲，2018年，Kong订单大幅增加，公司员工数翻倍，已服务超过100家企业客户，包括雅虎日本、法拉利、SoulCycle、WeWork等，开源软件下载量超过5400万次，收入为500万美元。2019年，Kong完成了Index Ventures领投，GGV纪源资本、World InnovationLab跟投，老股东Andreessen Horowitz、Charles Rivers Ventures追加的4300万美元C轮融资，至此Kong累计融资共计7100万美元。&lt;/p&gt;
&lt;p&gt;4、RapidAPI：全球最大API市场&lt;/p&gt;
&lt;p&gt;和Kong紧密相关的另外一家企业是RapidAPI，2017年，Kong的母公司Mashape将其API市场业务与&lt;a href=&#34;https://rapidapi.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RapidAPI&lt;/a&gt;合并，从而组成了世界上最大的API市场。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczy3s35j30ca09mwet_hu56368930473540e874f5f4f183f291bb_18252_e47a8915228e8ce54c56d91164fd9b6f.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczy3s35j30ca09mwet_hu56368930473540e874f5f4f183f291bb_18252_81362f93f449759f71691d7e1ad3f7ec.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczy3s35j30ca09mwet_hu56368930473540e874f5f4f183f291bb_18252_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczy3s35j30ca09mwet_hu56368930473540e874f5f4f183f291bb_18252_e47a8915228e8ce54c56d91164fd9b6f.webp&#34;
               width=&#34;442&#34;
               height=&#34;346&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;市场研究机构Ovum Research曾经表示，API经济在迅迅猛发展，到2018年将成为产值高达2.2万亿美元的市场。合并后，RapidAPI成为了这个市场的主要提供商之一。&lt;/p&gt;
&lt;p&gt;RapidAPI的首席执行官吉纳在宣布合并的博文中表示，“软件相互连接起来后，其功效就要大得多。不妨想一想。你使用Facebook登录到某个游戏应用程序，就能看到玩游戏的所有朋友。当亚马逊的购买门户网站与仓库存货连接起来后，你就能实时获得发货估计日期。如果你在订购机票呢？已经在你的谷歌日历中预定了航班。”吉诺补充道，API正是让那些连接成为可能的秘诀。“它们让不同的软件得以彼此联系，共享信息，并且简化我们的生活。”&lt;/p&gt;
&lt;p&gt;吉纳在博文中表示这只是开了个头。API正在迅速发展，打开之前紧闭的许多大门。使用API，开发人员就有可能从任何地方来访问服务，比如IBM公司的超级计算机和谷歌的机器学习模型，这就意味着他们能够充分利用比以前处理的任何资源丰富得多的资源。&lt;/p&gt;
&lt;p&gt;吉纳说：“我们想要让广大开发人员更容易寻找、测试和连接API。我们的计划始终未变，那就是将世界上的所有API统统集中到一个地方。将Mashape API市场合并到RapidAPI让我们离实现这个目标比以往更近了一步。现在我们每月总共有370000名开发人员在调用3000亿次API。也就是说，每秒的API调用超过100000次。”&lt;/p&gt;
&lt;p&gt;RapidAPI的市场里包括各种各样类型的API，例如天气、体育、科技、通讯、图像处理等等，例如获取新闻信息、实时体育比赛比分、天气信息，甚至还包括新冠病毒API分类。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd05lhlxj30n30ehta1_hud5dbc430aaab1bfc82093113b2fa41e1_59335_e3260012b4319c4a6f660d0665ce6ff2.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd05lhlxj30n30ehta1_hud5dbc430aaab1bfc82093113b2fa41e1_59335_2ec6f0182b9faa1e099cb568f61b6790.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd05lhlxj30n30ehta1_hud5dbc430aaab1bfc82093113b2fa41e1_59335_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd05lhlxj30n30ehta1_hud5dbc430aaab1bfc82093113b2fa41e1_59335_e3260012b4319c4a6f660d0665ce6ff2.webp&#34;
               width=&#34;760&#34;
               height=&#34;476&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;开发商可以自由的为自己的API接口定价，下图是Twilio SMS接口的报价方案。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczwpo62j30u008e0tk_hu74cf09d76d0a6f69da78961cb7f86041_41213_737b55f231b0670116714b91d438a4fd.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczwpo62j30u008e0tk_hu74cf09d76d0a6f69da78961cb7f86041_41213_5c7a70b1110cfea20d6990aa92767a83.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczwpo62j30u008e0tk_hu74cf09d76d0a6f69da78961cb7f86041_41213_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczwpo62j30u008e0tk_hu74cf09d76d0a6f69da78961cb7f86041_41213_737b55f231b0670116714b91d438a4fd.webp&#34;
               width=&#34;760&#34;
               height=&#34;213&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;2019年，RapidAPI完成了由微软领投、A16Z等跟投的2500万美元B轮融资，历史累计融资达到3750万美元。RapidAPI表示，它将利用这笔新筹集的资金扩大其API市场规模，并推动其新发布的RapidAPI for Teams产品。它是一个自助服务平台，使开发人员能够发布，管理和协调API和微服务，这些是用于构建现代应用程序的常用组件。&lt;/p&gt;
&lt;p&gt;5、Mulesoft：API集成/iPaaS/API管理领头羊&lt;/p&gt;
&lt;p&gt;1）从SOA讲起&lt;/p&gt;
&lt;p&gt;讲API管理之前，我们得先来说说前文提到过的SOA（Service-Oriented Architecture，面向服务的架构）。&lt;/p&gt;
&lt;p&gt;简单地说，一个企业建设了许多业务系统，每个系统都拥有自己的数据，那么如何将这些分散各处的数据打通，从而可以进一步加以利用呢？&lt;/p&gt;
&lt;p&gt;这就涉及到企业应用集成（EAI，Enterprise Application Integration）这个领域了。&lt;/p&gt;
&lt;p&gt;传统上，企业应用集成很多是利用ETL（Extract-Transform-Load，抽取转换加载）工具，把不同系统里的数据经过抽取、过滤、转换，最终导入到一个集中的数据仓库里，然后再做整合应用。但是这种做法也存在很多问题。&lt;/p&gt;
&lt;p&gt;一是只认数据，没有脑子。在数据汇集的过程中，只能针对数据格式本身进行一些处理，很难利用业务系统原有的业务逻辑。&lt;/p&gt;
&lt;p&gt;二是随着各个系统数据体量越来越大，把所有系统的数据都汇到一个数据仓库里就变得越来越困难。&lt;/p&gt;
&lt;p&gt;为了解决这样的问题，SOA应运而生，就是企业中每个系统都对外发布自己的服务，那么系统之间的集成，就可以通过调用对应系统的服务来解决了。&lt;/p&gt;
&lt;p&gt;但是，随着企业拥有的系统越来越多，这种系统之间相互调用服务接口的集成方式又遇到了新麻烦。&lt;/p&gt;
&lt;p&gt;可能每两个系统之间都需要相互调用服务，这最终就会演变成一个复杂的蜘蛛网结构，使得整个集成变得越来越脆弱，难以维护。&lt;/p&gt;
&lt;p&gt;为了解决这个新问题，ESB（Enterprise Service Bus，企业服务总线）的概念被提出来了，就是把每个系统的服务接口都对接到ESB上，这样在系统集成的时候，只需要跟总线打交道，而不再需要直接跟所有其它系统打交道了，从而大大简化了集成的复杂度。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczrjx9cj30u00e03z6_hu15e4ef2af868a22cc0903aed8004e2e9_34907_ba95e5dabeb057a1737b2c65ef5ff6bd.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczrjx9cj30u00e03z6_hu15e4ef2af868a22cc0903aed8004e2e9_34907_205897e08a8d49d19117a91eaf75db58.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczrjx9cj30u00e03z6_hu15e4ef2af868a22cc0903aed8004e2e9_34907_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczrjx9cj30u00e03z6_hu15e4ef2af868a22cc0903aed8004e2e9_34907_ba95e5dabeb057a1737b2c65ef5ff6bd.webp&#34;
               width=&#34;760&#34;
               height=&#34;355&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用ESB前后&lt;/p&gt;
&lt;p&gt;2）Mulesoft&lt;/p&gt;
&lt;p&gt;2018年3月，美国SaaS巨头Salesforce花费65亿美元收购iPaaS代表企业Mulesoft，Mulesoft于2017年在纽交所上市，市值约30亿美元。Mulesoft的核心产品是企业软件集成平台Anypoint Platform（旧称Mule ESB），客户可以在Anypoint上集成所有业务系统的服务，实现本地系统与云、以及云与云服务的集成。Anypoint Platform/Mule ESB是世界上使用最广泛的开源ESB产品，已拥有超过数百万的下载量，以及来自世界各地数十万个开发人员，财富500强中35%的企业、全球10大银行中的5家均使用了该平台。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczs0sxbj30m80bkq3q_hu05eb1aa65c68244a6593a67197cae075_39797_6792dafb4e328c6e64bca703cb7a2255.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczs0sxbj30m80bkq3q_hu05eb1aa65c68244a6593a67197cae075_39797_0187515a6c227691d2a4a21151d08c06.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczs0sxbj30m80bkq3q_hu05eb1aa65c68244a6593a67197cae075_39797_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczs0sxbj30m80bkq3q_hu05eb1aa65c68244a6593a67197cae075_39797_6792dafb4e328c6e64bca703cb7a2255.webp&#34;
               width=&#34;760&#34;
               height=&#34;395&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Mule ESB&lt;/p&gt;
&lt;p&gt;尽管只有一个产品，但从Gartner的划分标准来看，Mulesoft同时踩在了两个领域里：全生命周期API管理和企业集成平台即服务（iPaaS，Enterprise Integration Platform as a Service）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd04q4fyj30i20ivt9b_hu1d7dfa252a8c3ebe6120f071fa0b5428_32639_9e57180ff3fd5a47c00514aedc9fb92d.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd04q4fyj30i20ivt9b_hu1d7dfa252a8c3ebe6120f071fa0b5428_32639_5423126f4a58c255f098fa6993f8634b.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd04q4fyj30i20ivt9b_hu1d7dfa252a8c3ebe6120f071fa0b5428_32639_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd04q4fyj30i20ivt9b_hu1d7dfa252a8c3ebe6120f071fa0b5428_32639_9e57180ff3fd5a47c00514aedc9fb92d.webp&#34;
               width=&#34;650&#34;
               height=&#34;679&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Gartner魔力象限：全生命周期API管理&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd063o41j30h70iowfd_hu57c0862078c4c627f8cb53d97917be9c_28236_0ae5462580bfd490eeb2453dfdd97552.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd063o41j30h70iowfd_hu57c0862078c4c627f8cb53d97917be9c_28236_cd0cd2fed0562707e2e2540b288535d8.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd063o41j30h70iowfd_hu57c0862078c4c627f8cb53d97917be9c_28236_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd063o41j30h70iowfd_hu57c0862078c4c627f8cb53d97917be9c_28236_0ae5462580bfd490eeb2453dfdd97552.webp&#34;
               width=&#34;619&#34;
               height=&#34;672&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Gartner魔力象限：企业集成平台即服务&lt;/p&gt;
&lt;p&gt;Mule ESB同时包括开源和商业版本，在各个技术论坛上遍布其技术教程。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd00gjhhj30jd0gyacl_hud7ae148ceb30964a2c0b1a98281e2b83_103199_1dcbbbeb31cd056b4253fac00fc51d21.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd00gjhhj30jd0gyacl_hud7ae148ceb30964a2c0b1a98281e2b83_103199_f04e95dc54600883afb99e956b689dd1.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd00gjhhj30jd0gyacl_hud7ae148ceb30964a2c0b1a98281e2b83_103199_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd00gjhhj30jd0gyacl_hud7ae148ceb30964a2c0b1a98281e2b83_103199_1dcbbbeb31cd056b4253fac00fc51d21.webp&#34;
               width=&#34;697&#34;
               height=&#34;610&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Mule开源版讨论文章&lt;/p&gt;
&lt;p&gt;Mulesoft的成长历程非常具有参考意义，他们瞄准了一个有7000亿美元空间的市场，目标是解决一个十分困难的IT问题-集成。在摸索过程中Mulesoft不断优化其产品形态和销售方式，例如针对大客户需要的不仅是平台提供的通用功能，还需要更复杂的综合服务。于是MuleSoft把他们的销售方式从出售可靠的集成功能，变成了向高级管理人员出售提升企业连接能力的愿景和相应的解决方案，客单价也从10-30000美元提升到了500万美元。&lt;/p&gt;
&lt;p&gt;3）应用场景与案例&lt;/p&gt;
&lt;p&gt;Mule ESB的常见应用场景例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;旧系统改造，开放系统的服务能力。举个例子，企业有一个电商系统，需要调用SAP ERP的订单接口来创建订单，这个时候需要将SAP的订单服务暴露成流行的Restful API，以方便电商系统调用。使用Mule ESB可以轻松实现。&lt;/li&gt;
&lt;li&gt;系统集成。企业之间的数据交换，竟然有一半以上是文件的形态进行的，这在互联网思维普及的今天，是不容易想象的。在10年前，企业间交换数据采用文件形态的比重占60%，当时普遍认为这个比重会迅速下降，最终以接口服务形态进行交换的比重会占绝大多数。然而10年后直至今天，采用文件形态的依然占51%的比重。其实仔细想想，也不无合理。两个对等企业之间，行业上下游多个企业之间，不同系统之间的进行数据交换，采用文件的形式，可能是最简单便捷的方式。举个例子，很多系统之间数据交互可能还是用FTP目录。尤其是企业跟企业之间的数据交互，比如，A企业丢一个EDI文件到B企业的FTP目录，然后B企业会从FTP目录下载解析并放置到数据库。这个场景用Mule ESB实现也很方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfkr0b0eq5j30e604pdfv_hu9ddcb9f4e64ea968b20c34850ac948c3_8660_dde5f7e103d27055ae399de3fcc267f8.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfkr0b0eq5j30e604pdfv_hu9ddcb9f4e64ea968b20c34850ac948c3_8660_692590ca69e6d05bc50787cf93e9dccd.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfkr0b0eq5j30e604pdfv_hu9ddcb9f4e64ea968b20c34850ac948c3_8660_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfkr0b0eq5j30e604pdfv_hu9ddcb9f4e64ea968b20c34850ac948c3_8660_dde5f7e103d27055ae399de3fcc267f8.webp&#34;
               width=&#34;510&#34;
               height=&#34;169&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;4）Salesforce为什么收购Mulesoft&lt;/p&gt;
&lt;p&gt;Salesforce最初为中小企业提供SaaS的CRM，而随着大客户越来越多，定制化、个性化的需求也越来强烈，所以就需要提供PaaS平台解决个性化、定制化的问题。&lt;/p&gt;
&lt;p&gt;而这个定制化，最开始只是以Salesforce为核心的功能延伸及简单扩展，而随着个性化需求的不断深入，这种定制已经逐步演变为更大规模的多个骨干数据源之间的数据集成与交换，Salesforce可能只是多个数据源之一。&lt;/p&gt;
&lt;p&gt;所以也可以说，数据集成是PaaS平台的上层建筑，Salesforce需要帮助客户解决整合不同数据源所带来的挑战。&lt;/p&gt;
&lt;p&gt;收购之后，Salesforce会将MuleSoft植入进Salesforce Integration Cloud，从而帮助客户连接多个数据源，并计划在之后推出集成云。&lt;/p&gt;
&lt;p&gt;所以，可以看出Salesforce其实更在乎的是集成（Integration）这个词。&lt;/p&gt;
&lt;p&gt;5）iPaaS、API管理与API集成&lt;/p&gt;
&lt;p&gt;iPaaS的集成不光是针对云服务，也包括本地系统，这样就解决了混合云模式下的集成问题。iPaaS集成的范畴，除了API接口之外，一般还会包括更多种类的协议（比如FTP、数据库），也包括对于文件数据的集成。&lt;/p&gt;
&lt;p&gt;从这个角度来理解，API管理更关注API的治理与整合，iPaaS关注更大范畴的集成，包含API集成的概念。&lt;/p&gt;
&lt;p&gt;6）SOA、ESB与微服务的关系&lt;/p&gt;
&lt;p&gt;微服务架构和SOA架构非常类似，微服务是SOA的升华，只不过微服务架构强调的是“业务需要彻底的组件化及服务化”，原单个业务系统会被拆分为多个可以独立开发、设计、部署运行的小应用，这些小应用间通过服务化完成交互和集成。&lt;/p&gt;
&lt;p&gt;ESB是一种集中式服务治理的架构，看上去微服务中不需要ESB，Martin Fowler也不赞同在微服务架构中继续用ESB。&lt;/p&gt;
&lt;p&gt;我们下面要介绍到的下一代微服务架构核心-服务网格*，则可以视为分布式的ESB。*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务2.0：服务网格与Serverless&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、服务网格&lt;/p&gt;
&lt;p&gt;微服务当前遇到的挑战包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术门槛高：开发团队在实施微服务的过程中，除了基础的服务发现、配置中心和鉴权管理之外，团队在服务治理层面面临了诸多的挑战，包括负载均衡、熔断降级、灰度发布、故障切换、分布式跟踪等，这对开发团队提出了非常高的技术要求。&lt;/li&gt;
&lt;li&gt;代码侵入性强：Spring Cloud、Dubbo等主流的微服务框架都对业务代码有一定的侵入性，技术升级替换成本高，导致开发团队配合意愿低，微服务落地困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决上述问题，号称微服务2.0的服务网格（Service Mesh）应运而生。服务网格这个词最早由著名开源服务网格项目Linkerd所在的Buoyant公司CEO William Morgan所提出。按照他的定义，服务网格是一个软件基础设施层，用于控制和监视微服务应用程序中的内部、服务到服务的流量。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd04denmj30u00d8myl_hu607e1a7b445f9b2d7d0c821774f1ddc5_63568_eec77b51757259f55e046254f8d3be58.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd04denmj30u00d8myl_hu607e1a7b445f9b2d7d0c821774f1ddc5_63568_ebefd008da88a5238ce16385d932b44c.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd04denmj30u00d8myl_hu607e1a7b445f9b2d7d0c821774f1ddc5_63568_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd04denmj30u00d8myl_hu607e1a7b445f9b2d7d0c821774f1ddc5_63568_eec77b51757259f55e046254f8d3be58.webp&#34;
               width=&#34;760&#34;
               height=&#34;335&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;服务网格架构&lt;/p&gt;
&lt;p&gt;Sidecar是服务网格中的核心组成部分，可以看到，上图中每一个微服务都配备了一个Sidecar。此时用户只需要关心业务逻辑，而不用关心服务治理等非业务功能，非业务功能都由Sidecar负责，接管对应服务的入流量和出流量，并将微服务架构中的服务订阅、服务发现、熔断、限流等功能从服务中抽离到Sidecar中。&lt;/p&gt;
&lt;p&gt;服务网格和API网关是两个联系非常紧密的概念，它们的用途既不同，但是在某些方面又相互重叠。在某种程度上，我们可以认为服务网格是一个&lt;strong&gt;分布式的、微观层面的API网关&lt;/strong&gt;，解决微服务服务发现、负债均衡、流量控制等需求。在具体用途上，API网关处理的是所谓南北向流量即内外部请求；而服务网格处理的是东西向流量即内部服务相互间的访问。想深入了解两者区别的读者可以仔细阅读《&lt;a href=&#34;https://www.infoq.cn/article/4FJXNTHJMio6g75uSX0h%3Ffrom%3Dtimeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Mesh和API Gateway关系深度探讨&lt;/a&gt;》这篇文章。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczvrqm9j30u00cu3za_hu65d0e89afacc171f5ead05b06c9fa924_39081_a9801c206c504e17e6842ef1305acf77.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczvrqm9j30u00cu3za_hu65d0e89afacc171f5ead05b06c9fa924_39081_91aacff81ace853cff84978d5949b089.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczvrqm9j30u00cu3za_hu65d0e89afacc171f5ead05b06c9fa924_39081_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczvrqm9j30u00cu3za_hu65d0e89afacc171f5ead05b06c9fa924_39081_a9801c206c504e17e6842ef1305acf77.webp&#34;
               width=&#34;760&#34;
               height=&#34;325&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;南北向流量 vs 东西向流量&lt;/p&gt;
&lt;p&gt;服务网格相关的著名项目包括Linkerd、Envoy和最受欢迎的服务网格框架Istio。Kong也于2019年发布了基于Envoy的开源服务网格产品Kuma。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd02bfu3j30ox0etaap_hu10b4ecc3c5eb14e486930a348fd699a7_34222_358ccfb61886cdea552e89a217b843a0.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd02bfu3j30ox0etaap_hu10b4ecc3c5eb14e486930a348fd699a7_34222_9b49e0687990e23d2dc3eb489ad0b841.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd02bfu3j30ox0etaap_hu10b4ecc3c5eb14e486930a348fd699a7_34222_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd02bfu3j30ox0etaap_hu10b4ecc3c5eb14e486930a348fd699a7_34222_358ccfb61886cdea552e89a217b843a0.webp&#34;
               width=&#34;760&#34;
               height=&#34;452&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kong的服务网格产品：Kuma&lt;/p&gt;
&lt;p&gt;下图是CNCF Landscape里服务网格分类所罗列的项目，其中Linkerd正由CNCF进行孵化。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczuu6edj309j0asdgl_hu165ffcd00c05069c0e3365f832266d0b_26201_db58ee6b9dd351a64a970da3f57c149f.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczuu6edj309j0asdgl_hu165ffcd00c05069c0e3365f832266d0b_26201_a1d61a740c8662ff5611930130cb11a8.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczuu6edj309j0asdgl_hu165ffcd00c05069c0e3365f832266d0b_26201_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczuu6edj309j0asdgl_hu165ffcd00c05069c0e3365f832266d0b_26201_db58ee6b9dd351a64a970da3f57c149f.webp&#34;
               width=&#34;343&#34;
               height=&#34;388&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;2、Serverless&lt;/p&gt;
&lt;p&gt;Serverless（无服务器架构）这个概念在2012年时便已经存在，比微服务和服务网格的概念出现都要早，但是直到微服务概念大红大紫之后，Serverless才重新又被人们所关注。&lt;/p&gt;
&lt;p&gt;Serverless是一种构建和管理基于微服务架构的完整流程，它与传统架构的不同之处在于，完全由第三方管理，由事件触发，存在于无状态、暂存的计算容器内。Serverless相关的重要概念包括FaaS（Functions as a Service，函数即服务）。开发者把函数上传到云厂商的FaaS平台，函数只在被请求时才实例化运行，然后被销毁，其它时候不占用任何服务器资源，完全实现按需使用，大幅度降低了服务器占用和成本。&lt;/p&gt;
&lt;p&gt;Serverless通常适用于实时性要求不高、无状态的场景，例如突发事件处理、数据统计分析、视频解码、离线批量计算等等，像AWS FaaS平台Lambda限制用户功能必须在15分钟内完成。&lt;/p&gt;
&lt;p&gt;相较服务网格，Serverless概念更为超前，虽然AWS Lambda、阿里云等许多平台都已经提供对其的支持，但是目前仍处于发展早期，无论是成熟项目数量和企业应用程度都相对有限。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd070ovgj30u00gwdi1_hu4cc77aa4f3c089e6a8df3521ce5b9c55_91485_2e17dc28f923af44b6d3f4d801e97c5f.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd070ovgj30u00gwdi1_hu4cc77aa4f3c089e6a8df3521ce5b9c55_91485_34a26bd59ea703755caf064643de23a5.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd070ovgj30u00gwdi1_hu4cc77aa4f3c089e6a8df3521ce5b9c55_91485_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd070ovgj30u00gwdi1_hu4cc77aa4f3c089e6a8df3521ce5b9c55_91485_2e17dc28f923af44b6d3f4d801e97c5f.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;FaaS Landscape&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhczw88rrj30u00b6jsp_hu104f1946ad715a1004096351451997ff_58860_72e228987c454693cd45388e8ed471cb.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhczw88rrj30u00b6jsp_hu104f1946ad715a1004096351451997ff_58860_a82e9d2a002e30d562329ec20c869bdc.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhczw88rrj30u00b6jsp_hu104f1946ad715a1004096351451997ff_58860_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhczw88rrj30u00b6jsp_hu104f1946ad715a1004096351451997ff_58860_72e228987c454693cd45388e8ed471cb.webp&#34;
               width=&#34;760&#34;
               height=&#34;283&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;CNCF Serverless Landscape&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微服务 vs 宏服务：新的抉择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近，Uber支付体验平台的工程经理Gergely Orosz发布推文表示他们的架构方向已经发生了变化。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd07jalej30kd0epgn0_hu76d4f9b789d574976717d8ab6dd13603_61895_51e0adeb4bf812f41f0fceb0be89b3dc.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd07jalej30kd0epgn0_hu76d4f9b789d574976717d8ab6dd13603_61895_bde6cb31534f5965e47ef6044b8aa2d6.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd07jalej30kd0epgn0_hu76d4f9b789d574976717d8ab6dd13603_61895_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd07jalej30kd0epgn0_hu76d4f9b789d574976717d8ab6dd13603_61895_51e0adeb4bf812f41f0fceb0be89b3dc.webp&#34;
               width=&#34;733&#34;
               height=&#34;529&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“声明一下，在Uber，我们正将许多微服务转移到@copyconstruct所称的Macroservices宏服务（大小适中的服务）。
确切地说，B/C测试和维护成千上万的微服务不仅很难——它可能会带来更多的长期麻烦，而不是解决短期问题。
微服务确实可以帮助团队在早期快速推进。
等你意识到服务越少越好时，已为时已晚。你需要解决很多服务的“困难”部分。
我们在不断增加更多的服务，但也在停止使用服务，并且会更慎重的思考新的服务。“&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全部的上下文可以在&lt;a href=&#34;https://www.sohu.com/a/387618765_683048&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;阅读。有一篇英文文献中这样描述Macroservices宏服务：宏服务应该定义为运行2-20个单独服务的应用程序体系结构，每个服务代表一个中等大小的代码库，可处理业务中定义明确的部分。宏服务的关键是拆分服务，最大程度地从拆分中获得收益，同时最大程度地降低运行多个服务的开销。通俗点讲，宏服务介于单体服务到微服务之间，关注的不再是某一个细节点，而是一个业务点。&lt;/p&gt;
&lt;p&gt;实际上，宏服务目前的定义并不清晰，影响和实践相当有限，也并非比微服务更优的解决方案，本质还是不同企业和团队在架构演进中对于系统复杂性的不同度量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;微服务的理念不同的团队有不同的实践，例如微服务如何拆分、组织架构如何搭建、技术栈如何选择。&lt;/p&gt;
&lt;p&gt;我们理解，微服务是云原生的核心，后面要介绍到的容器（及Docker）和Kubernetes是实现的技术方法和手段，DevOps是配合的文化和研发流程，但是微服务带来的启发，更多是思维方式上的转变。&lt;/p&gt;
&lt;h2 id=&#34;第四部分容器和docker&#34;&gt;第四部分：容器和Docker&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;虚拟化与容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在容器技术之前，业界的网红是虚拟机。虚拟机技术的代表是VMware和OpenStack，我在虚拟化与超融合系列里做过介绍。很多人都用过虚拟机，就是在操作系统里安装一个软件，然后通过这个软件，再模拟一台甚至多台“子电脑”出来。在“子电脑”里，可以和正常电脑一样运行程序，例如微信、Word。“子电脑”和“子电脑”之间，相互隔离互不影响。&lt;/p&gt;
&lt;p&gt;虚拟机虽然可以隔离出很多“子电脑”，但占用空间大，启动慢，虚拟机软件可能还要花钱（例如VMware）。而容器技术恰好没有这些缺点，它不需要虚拟出整个操作系统，只需要虚拟一个小规模的环境（类似“沙箱”），启动时间很快，几秒钟就能完成。而且，它对资源的利用率很高（一台主机可以同时运行几千个Docker容器）。此外它占的空间很小，虚拟机一般要几GB到几十GB的空间，而容器只需要MB级甚至KB级。虚拟机和以Docker为代表的容器都是虚拟化技术，不过容器属于轻量级的虚拟化。下面是两者的主要对比。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1pt1mfj30k20b4wf5_hu35a2e4676e44712051c775898bd87c2b_34772_2a1ba9b5c5df41a0a0ac680fabc21a9d.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1pt1mfj30k20b4wf5_hu35a2e4676e44712051c775898bd87c2b_34772_654e6a534dfd3b3c5f49ef0c36b1beef.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1pt1mfj30k20b4wf5_hu35a2e4676e44712051c775898bd87c2b_34772_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1pt1mfj30k20b4wf5_hu35a2e4676e44712051c775898bd87c2b_34772_2a1ba9b5c5df41a0a0ac680fabc21a9d.webp&#34;
               width=&#34;722&#34;
               height=&#34;400&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker的源起&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们再来看看Docker，Docker本身并不是容器，它是创建容器的工具，是应用容器引擎。虽然Docker 把容器技术推向了巅峰，但容器技术却不是Docker发明的。实际上，容器技术连新技术都算不上，因为它的诞生和使用有些年头了，像最早的容器LXC发布于2008年。&lt;/p&gt;
&lt;p&gt;Docker本来是做PaaS的公司，原来叫做DotCloud，成立于2010年。但比起Pivotal、Red Hat等著名企业，DotCloud运营并不成功。眼看就要失败的时候，2013年DotCloud决定开源自己的容器项目Docker。但是短短几个月，Docker迅速崛起，吸引大量的开发者使用。随着Docker在开发者中越来越流行，2013年10月，DotCloud公司正式更名为Docker，2014年8月，Docker 宣布把PaaS业务出售，开始专心致志做Docker。&lt;/p&gt;
&lt;p&gt;Docker一词意为码头工人，而它的logo则是一个托着许多集装箱的鲸鱼，非常形象：Docker是鲸鱼，而集装箱则是一个个的容器。在Docker的官网上，对于容器有一个一句话的解释“A standardized unit of software”，即“软件的一个标准化单元”。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1q9cxsj308c08caa3_hu289140261801d636d9762c6d3723e565_11610_9867cb5f4af3e91d7b275b1dc5341019.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1q9cxsj308c08caa3_hu289140261801d636d9762c6d3723e565_11610_b5ed37ccbded901588f1464fbee7e4e5.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1q9cxsj308c08caa3_hu289140261801d636d9762c6d3723e565_11610_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1q9cxsj308c08caa3_hu289140261801d636d9762c6d3723e565_11610_9867cb5f4af3e91d7b275b1dc5341019.webp&#34;
               width=&#34;300&#34;
               height=&#34;300&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下面的图片比较了Docker和传统虚拟化的不同之处，容器是在操作系统层面上实现虚拟化，而传统方式是在硬件层面实现，所以导致两者的特性有很大区别，Docker更小更轻。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1rmwc1j30u00chab5_hu739f1a995f927eb49a6a56b6aafb44c6_50589_fa4b041fb5fa84d2973053e8bba1fde2.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1rmwc1j30u00chab5_hu739f1a995f927eb49a6a56b6aafb44c6_50589_eaacada58728d96383c12d896aec5c8e.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1rmwc1j30u00chab5_hu739f1a995f927eb49a6a56b6aafb44c6_50589_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1rmwc1j30u00chab5_hu739f1a995f927eb49a6a56b6aafb44c6_50589_fa4b041fb5fa84d2973053e8bba1fde2.webp&#34;
               width=&#34;760&#34;
               height=&#34;316&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Docker vs 虚拟化&lt;/p&gt;
&lt;p&gt;而Docker与传统的Linux容器也并不完全一致。Docker技术最初是建立在LXC技术之上的，大多数人都把LXC技术与传统的Linux容器联系在一起，尽管后来它已经摆脱了这种依赖性。LXC作为轻量级虚拟化很有用，但它没有很好的开发人员或用户体验。Docker技术带来的不仅仅是运行容器的能力，它还简化了创建和构建容器、加载镜像和镜像版本控制等过程。传统的Linux容器使用可以管理多个进程的init系统，这意味着整个应用可以作为一个整体运行。Docker鼓励将应用程序分解为它们各自的进程，并提供了实现这一点的工具，这种粒度有不少优点。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1t19epj30u00c03zp_hubc46b1672d23e44dbfbfcd95ea3d5d27_54497_ddc05b2db4e11ec0b65ff920deb7e93f.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1t19epj30u00c03zp_hubc46b1672d23e44dbfbfcd95ea3d5d27_54497_0ecd57de34214335984c8d4f4ff4b8a7.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1t19epj30u00c03zp_hubc46b1672d23e44dbfbfcd95ea3d5d27_54497_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1t19epj30u00c03zp_hubc46b1672d23e44dbfbfcd95ea3d5d27_54497_ddc05b2db4e11ec0b65ff920deb7e93f.webp&#34;
               width=&#34;760&#34;
               height=&#34;304&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;传统Linux容器 vs Docker&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker解决的问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;众所周知，Linux上我们不愉快的经历之一就是安装软件。因为系统硬件、操作系统环境不一样，软件包有不同的依赖性，所以必须要安装完软件依赖路径上的所有包，这个链条之长，往往要耗费几小时甚至几天的时间。例如下面的案例，我要安装Docker，系统提示我必须要先安装selinux-policy、selinux-policy-base、selinux-policy-targeted三个相关模块。而我安装selinux-policy的时候，又提示要先安装python；安装python的时候，又提示我要先安装_bz2、_curses、_curses_panel等等模块…&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1vzikgj30n30463zc_hu6b3968b8e7af9fa802c274fc5f1345f7_41110_352b156bd1b3cff3e77265f9d06aa816.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1vzikgj30n30463zc_hu6b3968b8e7af9fa802c274fc5f1345f7_41110_7487cfe6480c47dd184c3fba48b13b83.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1vzikgj30n30463zc_hu6b3968b8e7af9fa802c274fc5f1345f7_41110_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1vzikgj30n30463zc_hu6b3968b8e7af9fa802c274fc5f1345f7_41110_352b156bd1b3cff3e77265f9d06aa816.webp&#34;
               width=&#34;760&#34;
               height=&#34;137&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1wfhauj30n309ewf7_hucfe74d1dfb0794ad40d2ccfd579f1289_36841_28483ef1f0b8c28f7d43d239bb223038.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1wfhauj30n309ewf7_hucfe74d1dfb0794ad40d2ccfd579f1289_36841_339e219f5c26ac5f519b8d7a67daaf67.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1wfhauj30n309ewf7_hucfe74d1dfb0794ad40d2ccfd579f1289_36841_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1wfhauj30n309ewf7_hucfe74d1dfb0794ad40d2ccfd579f1289_36841_28483ef1f0b8c28f7d43d239bb223038.webp&#34;
               width=&#34;760&#34;
               height=&#34;309&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;这就是由于环境不统一带来的巨大问题，每天在世界各地的数千万台机器上都会重复上演无数次。那么，如果服务器环境能够标准化，那我们安装任何软件只需要一个版本就可以解决问题。&lt;/p&gt;
&lt;p&gt;同时，如果所有服务器环境统一、标准化，还能保留上面的配置、安装的软件和应用，对于我们来讲就更加有用。Docker正是在操作系统之上实现了这个标准化、统一化的运行环境，并且把各种不同的配置和应用存储成镜像，供未来使用。这有点类似于我们熟悉的Ghost或者虚拟光驱，把需要的环境和状态保留为镜像，随时恢复、随时使用。不过Ghost基于操作系统，镜像是一个大文件，管理起来并不方便，恢复速度也很慢，同时不支持跨平台的镜像恢复；而虚拟光驱则是基于软件层面，使用范围有限；而Docker正处于两者之间，能完成更多功能的同时，还实现了镜像的快速加载和运行。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1s43n7j30is0cuaay_hua24171135ad0b514d05dd0b82f7a3401_43236_b4bcecca462c9af169c11e33df672176.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1s43n7j30is0cuaay_hua24171135ad0b514d05dd0b82f7a3401_43236_82be0dc37cf7b52b7a97666efda9f018.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1s43n7j30is0cuaay_hua24171135ad0b514d05dd0b82f7a3401_43236_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1s43n7j30is0cuaay_hua24171135ad0b514d05dd0b82f7a3401_43236_b4bcecca462c9af169c11e33df672176.webp&#34;
               width=&#34;676&#34;
               height=&#34;462&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Ghost软件&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1sjye9j30in0cujsb_huc8dc713842aa640e87e5968e913ec827_44711_6d8e78cecbc9b50b5791636a9002a38a.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1sjye9j30in0cujsb_huc8dc713842aa640e87e5968e913ec827_44711_410b2324766bffa17e3206590b6b1d50.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1sjye9j30in0cujsb_huc8dc713842aa640e87e5968e913ec827_44711_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1sjye9j30in0cujsb_huc8dc713842aa640e87e5968e913ec827_44711_6d8e78cecbc9b50b5791636a9002a38a.webp&#34;
               width=&#34;671&#34;
               height=&#34;462&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;虚拟光驱软件&lt;/p&gt;
&lt;p&gt;我们在上一部分讲微服务的时候，将其比喻成装配式建筑。把这个比喻用在Docker上的话，我们只要提前设计好模板（配置环境、部署软件或服务），就能在工厂（Docker）里批量化生产（说复制可能更加合适）出楼板、墙板、楼梯、阳台等构件和配件（容器所装载的、不同的微服务），这些构件在建筑施工现场经过组装拼合（API访问），就能成为各种各样的建筑（各种类型的产品和应用）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1vf0mtj30kc0d8my2_hu765a0d73007fe2899c7be49a23042a77_43718_e904d853d6d62d7c9739b6882afdfd77.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1vf0mtj30kc0d8my2_hu765a0d73007fe2899c7be49a23042a77_43718_4a85b5352a61cf2d92584c3309736823.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1vf0mtj30kc0d8my2_hu765a0d73007fe2899c7be49a23042a77_43718_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1vf0mtj30kc0d8my2_hu765a0d73007fe2899c7be49a23042a77_43718_e904d853d6d62d7c9739b6882afdfd77.webp&#34;
               width=&#34;732&#34;
               height=&#34;476&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;装配式建筑由各种构件组成&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1omhx0j30eo09lq3l_hu7941b9df95420effe664494ec2ba530f_23481_b060ac9236caa9ab3c8c14aa40c7dab8.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1omhx0j30eo09lq3l_hu7941b9df95420effe664494ec2ba530f_23481_e31edfb2e75170c2c1a13fd604a38686.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1omhx0j30eo09lq3l_hu7941b9df95420effe664494ec2ba530f_23481_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1omhx0j30eo09lq3l_hu7941b9df95420effe664494ec2ba530f_23481_b060ac9236caa9ab3c8c14aa40c7dab8.webp&#34;
               width=&#34;528&#34;
               height=&#34;345&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Docker与各种概念的关系&lt;/p&gt;
&lt;p&gt;所以，Docker曾经有一句Slogan叫做“Build once，Run anywhere（搭建一次，随处可用）”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker的核心概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Docker技术的三大核心概念，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像（Image）&lt;/li&gt;
&lt;li&gt;容器（Container）&lt;/li&gt;
&lt;li&gt;仓库（Repository）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的例子里，设计出来的模板就是Docker镜像，生产（复制）出来的构件就是Docker容器，而Docker仓库则是集中放置管理Docker镜像的地方。&lt;/p&gt;
&lt;p&gt;Docker镜像是一个特殊的文件系统。它除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的配置参数（例如环境变量）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。&lt;/p&gt;
&lt;p&gt;每一种模板（镜像）能够创建出一种构件，但是模板可以由不同的设计师来设计，提供不同用途、不同风格，例如斜顶式阳台、嵌入式阳台、包豪斯风格、蒙德里安风格等等，所有人相互之间可以共享，这就形成了大的公共仓库。&lt;/p&gt;
&lt;p&gt;Docker官方提供了&lt;a href=&#34;https://hub.docker.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker Hub&lt;/a&gt;来维护管理所有的镜像，只是对于免费用户而言,只能创建一个私有仓库。Docker Hub里提供了大量高质量的官方镜像，例如Oracle、MySQL、redis、Ubuntu、Nginx、python、Docker（Docker in Docker！）等等，开发人员需要一个环境的时候，可以直接到Docker镜像仓库去查找，减少了大量无谓的环境安装工作。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1r6q52j30c507qjs1_hueb8e4c8d5f02f958e436e1642b389e2e_21677_c76a5ae38bd147487ce9ff8e0fa77971.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1r6q52j30c507qjs1_hueb8e4c8d5f02f958e436e1642b389e2e_21677_2e3770d2c3b3228a6129e233e131bb48.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1r6q52j30c507qjs1_hueb8e4c8d5f02f958e436e1642b389e2e_21677_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1r6q52j30c507qjs1_hueb8e4c8d5f02f958e436e1642b389e2e_21677_c76a5ae38bd147487ce9ff8e0fa77971.webp&#34;
               width=&#34;437&#34;
               height=&#34;278&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Docker Hub&lt;/p&gt;
&lt;p&gt;Docker创始人曾经公布过一个相关数据，Docker Hub里镜像的下载数量从2014年的100万次，3年内猛增到了120亿次。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1pbl3pj30u00hpmy6_hu224907ce8634929190297e6a8f5eab2a_47689_f975862eeb4274e8a8fdd2690da02619.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1pbl3pj30u00hpmy6_hu224907ce8634929190297e6a8f5eab2a_47689_28c0934ca921342a80bca8c79174fb29.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1pbl3pj30u00hpmy6_hu224907ce8634929190297e6a8f5eab2a_47689_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1pbl3pj30u00hpmy6_hu224907ce8634929190297e6a8f5eab2a_47689_f975862eeb4274e8a8fdd2690da02619.webp&#34;
               width=&#34;760&#34;
               height=&#34;448&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下面是我从Docker Hub上拉取一个hello world演示镜像，并且运行的示例。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1qpe32j30lp0g1ac7_hu4c02a8b0ea3718f70520f80ec16b2258_89298_6d7b1d82b0ff6ddd1db4b3cc58b4ea02.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1qpe32j30lp0g1ac7_hu4c02a8b0ea3718f70520f80ec16b2258_89298_4fc7c83e088ad3fedb8e037cacb8b735.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1qpe32j30lp0g1ac7_hu4c02a8b0ea3718f70520f80ec16b2258_89298_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1qpe32j30lp0g1ac7_hu4c02a8b0ea3718f70520f80ec16b2258_89298_6d7b1d82b0ff6ddd1db4b3cc58b4ea02.webp&#34;
               width=&#34;760&#34;
               height=&#34;561&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Docker的好处&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Docker给我们带来的好处非常多，下面简单列举几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更高效的利用系统资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有了Docker，我们可以在一台服务器上运行很多应用，充分利用硬件资源。例如现在我们有一台Linux服务器，可以构建不同版本的Ubuntu镜像启动，并且为不同的用户分配不同的容器。这样用一台服务器就能虚拟出许多运行不同操作系统的虚拟服务器，而对于用户来说，这些都是透明的。许多公有云采用了容器技术为用户提供服务，所以虚拟化与容器共同成为了现代云计算的基石。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更快速的启动时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;传统的虚拟机技术启动应用服务往往需要数分钟，而Docker容器应用，由于直接运行于宿主内核，无须启动完整的操作系统，因此可以做到秒级甚至毫秒级的启动时间，大大的节约了开发、测试、部署的时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证环境一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发过程中常见的问题之一是环境一致性问题，由于开发环境、测试环境、生产环境不一致，导致有些bug并未在开发过程中被发现，而Docker的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，再也不会有在线下开发环境中运行正常，而部署到线上有各种错误的情况了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持续交付和部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于开发和运维人员来说，最希望的是一次创建或配置，可以在任意地方正常运行。开发者可以使用一个标准的镜像来构建一套开发容器，开发完成之后，运维人员可以直接使用这个容器来部署代码，无论在多少台服务器中部署都是如此。Docker可以快速创建容器，快速迭代应用程序，并让整个过程全程可见。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更轻松的迁移&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于Docker确保了执行环境的一致性，使得应用的迁移更加容易，Docker可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，其运行结果是一致的，因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提升复用性，降低耦合性，维护和扩展更轻松&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。安装Docker后，我们可以从Docker Hub上获取各种各样的操作系统镜像，这个操作很简单，只需要拉取相应的镜像到本地然后运行即可。另外我们可以将数据库、Web服务器、缓存服务器运行在不同的容器中，降低了各个服务之间的耦合性、便于扩展，Docker Hub上有各种各样的优秀镜像，我们可以直接拿来使用，不需要自己搭建，应用的部署就像搭积木一样简单。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现沙盒机制，提高了安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于应用运行在容器中，与操作系统隔离开，从而使操作系统基本不可能受到破坏。另外如果应用因为攻击而瘫痪，并不需要重启服务器，直接重启容器或者再启动一个镜像就可以了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器与微服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;容器是微服务和云原生架构的最佳实现载体。微服务与容器几乎是完美的搭配。单体式架构（Monolithic）变成微服务架构（Microservices），相当于一个全能型变成N个专能型，每个专能型分配一个隔离的容器，赋予了最大程度的灵活。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1u6cs4j30ia06t74w_hu069dab0550b12680901eb3ccf33981fc_33048_c6f035ef08ec7133c71e02cba524df0d.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1u6cs4j30ia06t74w_hu069dab0550b12680901eb3ccf33981fc_33048_4e69a8b3197615f3dc9877b9bfab7a08.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1u6cs4j30ia06t74w_hu069dab0550b12680901eb3ccf33981fc_33048_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1u6cs4j30ia06t74w_hu069dab0550b12680901eb3ccf33981fc_33048_c6f035ef08ec7133c71e02cba524df0d.webp&#34;
               width=&#34;658&#34;
               height=&#34;245&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;服务器势必会走上虚拟化的道路，因为虚拟化有太多的优势，例如前文所说的低成本、高利用率、充分灵活、动态调度等等。而采用容器之后，只需要一台服务器，创建十几个容器，用不同的容器，来分别运行不同用途的服务程序。这些容器，随时可以创建，也可以随时销毁。还能够在不停机的情况下，随意变大，随意变小，随意变强，随意变弱，在性能和功耗之间动态平衡。&lt;strong&gt;所以容器化是云计算的终极形态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果把传统IT架构比作传统工厂，容器化比作现代化工厂，那么下一部分我们要讲到的Kubernetes则会将现代化工厂进一步提升为智能化无人工厂。那么当Docker遇到Kubernetes之后将会发生什么有趣的事情？让我们拭目以待。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd1uwnt5j30pu0ejq3q_hu7c09419f845a31b774bcbf97cf9c377f_39646_112cf8ee03af41c5b18d627b5adf7eba.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1uwnt5j30pu0ejq3q_hu7c09419f845a31b774bcbf97cf9c377f_39646_37d7b0d49e0899570e0f26038a2a61aa.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd1uwnt5j30pu0ejq3q_hu7c09419f845a31b774bcbf97cf9c377f_39646_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd1uwnt5j30pu0ejq3q_hu7c09419f845a31b774bcbf97cf9c377f_39646_112cf8ee03af41c5b18d627b5adf7eba.webp&#34;
               width=&#34;760&#34;
               height=&#34;427&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;第五部分kubernetes与容器编排之战&#34;&gt;第五部分：Kubernetes与容器编排之战&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;容器编排与Kubernetes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在单机上运行容器，无法发挥它的最大效能，只有形成集群，才能最大程度发挥容器的良好隔离、资源分配与编排管理的优势。所以企业需要一套管理系统，对Docker及容器进行更高级更灵活的管理，按照用户的意愿和整个系统的规则，完全自动化的处理好容器之间的各种关系，这叫做编排（Orchestration）。&lt;/p&gt;
&lt;p&gt;Orchestration这个词来自于音乐领域，是指一种将不同乐器、音色加以合理的编排等手法营造出一个听感交融、平衡的艺术，它完美地描述了容器编排的含义：为单个应用程序（乐队中的每种乐器）提供协同工作的模式。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd41k6qpj30k00b9q3k_hue8013a9d74dd459310fdc7a32321d94a_33501_8abb099c1ad528a924e00aa10f6728fd.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd41k6qpj30k00b9q3k_hue8013a9d74dd459310fdc7a32321d94a_33501_4ed0e361629468b8df78758b2f90aebc.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd41k6qpj30k00b9q3k_hue8013a9d74dd459310fdc7a32321d94a_33501_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd41k6qpj30k00b9q3k_hue8013a9d74dd459310fdc7a32321d94a_33501_8abb099c1ad528a924e00aa10f6728fd.webp&#34;
               width=&#34;720&#34;
               height=&#34;405&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在IT领域编排可以理解为一种工作流，它能把整个IT系统都串接起来，然后自动化运作。在云原生时代，整体式的应用早已成为过去时，应用一般由单独容器化的组件即微服务组成，而这些组件需要通过相互间的协同合作，才能使既定的应用按照设计运作。&lt;/p&gt;
&lt;p&gt;2014年6月，IT基础设施领域的领先者Google发布了&lt;a href=&#34;https://kubernetes.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes&lt;/a&gt;（简写为K8S）。编排概念并不是由Kubernetes第一个提出的，Kubernetes这个单词来自于希腊语，含义是舵手或领航员。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd42l2yjj30u00goq3l_hu8e2c3baf21bbd9cabc27ce63c23298f3_34579_ea1c5acb7312deea405bc8159ca07b10.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd42l2yjj30u00goq3l_hu8e2c3baf21bbd9cabc27ce63c23298f3_34579_cd5f1e4077ec5a6955197dfc84de3341.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd42l2yjj30u00goq3l_hu8e2c3baf21bbd9cabc27ce63c23298f3_34579_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd42l2yjj30u00goq3l_hu8e2c3baf21bbd9cabc27ce63c23298f3_34579_ea1c5acb7312deea405bc8159ca07b10.webp&#34;
               width=&#34;760&#34;
               height=&#34;422&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kubernetes是基于Docker的开源容器集群管理系统，为容器化的应用提供资源调度、部署运行、服务发现、扩容缩容等整一套功能，因为容器本身可移植，所以Kubernetes容器集群能跑在私有云、公有云或者混合云上。&lt;/p&gt;
&lt;p&gt;Kubernetes属于主从的分布式集群架构，包含Master和Nodes。Master作为控制节点，调度管理整个系统；Nodes是运行节点，负责运行应用。Pod是Kubernetes创建或部署的最小单位。一个Pod封装一个或多个容器（Container）、存储资源（Volume）、一个独立的网络IP以及管理控制容器运行方式的策略选项。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd413an7j30mb0gc3zv_huf6be7d0d3e4d666c9df36b1739de2cea_60478_dd6dc09d5024e9786302c0c9a5e1fde3.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd413an7j30mb0gc3zv_huf6be7d0d3e4d666c9df36b1739de2cea_60478_1ed481b3f14fdeca8d1928a10b6cc46a.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd413an7j30mb0gc3zv_huf6be7d0d3e4d666c9df36b1739de2cea_60478_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd413an7j30mb0gc3zv_huf6be7d0d3e4d666c9df36b1739de2cea_60478_dd6dc09d5024e9786302c0c9a5e1fde3.webp&#34;
               width=&#34;760&#34;
               height=&#34;557&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kubernetes的主要功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源调度：资源调度是一套分布式系统最基本的核心指标&lt;/li&gt;
&lt;li&gt;资源管理：控制Pod对计算资源、网络资源、存储资源的使用&lt;/li&gt;
&lt;li&gt;服务发现：管理外在的程序或者内部的程序如何访问Kubernetes里面的某个Pod&lt;/li&gt;
&lt;li&gt;健康检查：监控检测服务是否正常运行非常重要&lt;/li&gt;
&lt;li&gt;自动伸缩：因为涉及到环境的快速迁移和复制，虚拟机时代之前都非常难实现。容器化时代很自然的解决了这个问题，Kubernetes保证了资源的按需扩容&lt;/li&gt;
&lt;li&gt;更新升级：Kubernetes为服务的滚动和平滑升级提供了很好的机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes使用案例：滚动发布&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们举一个Kubernetes的应用场景，帮助大家更好的理解Kubernetes的用途。&lt;/p&gt;
&lt;p&gt;应用程序升级面临最大挑战是新旧业务切换，将软件从测试的最后阶段带到生产环境，同时要保证系统不间断提供服务。长期以来，业务升级渐渐形成了几个发布策略：蓝绿发布、灰度发布（金丝雀发布）和滚动发布，目的是尽可能避免因发布导致的流量丢失或服务不可用问题。&lt;/p&gt;
&lt;p&gt;在微服务架构盛行的时代，用户希望应用程序时时刻刻可用，为了满足不断变化的新业务，需要不断升级更新应用程序，有时可能需要频繁的发布版本。实现&amp;quot;零停机&amp;quot;、“零感知”的持续集成和持续交付/部署应用程序，一直都是软件升级换代必须面对的难题和追求的理想方式，也是DevOps诞生的目的。&lt;/p&gt;
&lt;p&gt;滚动发布/滚动更新（Rolling Update Deployment）是指每次只升级一个或多个服务，升级完成后加入生产环境，不断执行这个过程，直到集群中的全部旧版本升级成为新版本。在整个滚动发布期间，保证始终有可用的副本在运行，从而平滑的发布新版本，实现零停机、用户零感知，是云原生时代非常主流的发布方式。&lt;/p&gt;
&lt;p&gt;下图是滚动发布的流程示意图，Load Balance是前端的负载均衡器，橙色是正在运行旧版本服务的节点，紫色是正在更新及更新完毕新版本服务的节点。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd44v38lj30u00irgmr_hu5d2db1e8374e17b569194fe183103081_52959_3a3e93012ffeb7c04d5af427a7cf50a6.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd44v38lj30u00irgmr_hu5d2db1e8374e17b569194fe183103081_52959_53e8ec23f86c64a6a4579e5014f78792.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd44v38lj30u00irgmr_hu5d2db1e8374e17b569194fe183103081_52959_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd44v38lj30u00irgmr_hu5d2db1e8374e17b569194fe183103081_52959_3a3e93012ffeb7c04d5af427a7cf50a6.webp&#34;
               width=&#34;760&#34;
               height=&#34;475&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
滚动发布流程示意图&lt;/p&gt;
&lt;p&gt;可以看到，滚动发布开始后（Step 2），负载均衡器将服务器A从集群里摘除，服务器A进行新版本的发布，由服务器B和服务器C对外提供版本1.0的服务；Step 3，服务器A更新完毕，部署验证成功，负载均衡器将其加入集群，开始和服务器C一起对外提供不同版本的服务，同时服务器B开始发布；直至服务器ABC全部发布完成（Step 5），服务都更新到最新的2.0版本。&lt;/p&gt;
&lt;p&gt;滚动发布的优点是用户无感知，平滑过渡，同时不需要冗余服务器，节省资源。不足是部署时间慢，取决于每阶段的更新时间；发布策略较复杂；同时涉及自动化的更新策略、部署验证、回滚机制等等，自动化程度比较高，通常需要复杂的发布工具支撑，而Kubernetes正好可以完美的支持这个任务。&lt;/p&gt;
&lt;p&gt;Kubernetes通用的编排模式是控制循环，用伪代码表示如下：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd3zpj25j30gb05z3yr_hu236ccbde6794af9c72c446c314d44698_19563_c212000c141bad1d30cfe589714be43a.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd3zpj25j30gb05z3yr_hu236ccbde6794af9c72c446c314d44698_19563_fb97525ea98fad5adce9fe2f2cb4f02b.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd3zpj25j30gb05z3yr_hu236ccbde6794af9c72c446c314d44698_19563_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd3zpj25j30gb05z3yr_hu236ccbde6794af9c72c446c314d44698_19563_c212000c141bad1d30cfe589714be43a.webp&#34;
               width=&#34;587&#34;
               height=&#34;215&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;解释一下，Kubernetes集群本身状态就是实际状态，而期望状态来自于用户提交的配置文件。滚动发布的时候，Kubernetes将会根据这个控制循环，使用一个叫做Deployment的控制器，通过创建新的集群（下图中的v2版本ReplicaSet复制集）将其控制的Pod副本从0个逐渐变成3个，与此同时旧的集群（下图中v1版本的ReplicaSet）管理的Pod副本数则从3个逐渐变成0个，以此将一个集群中正在运行的多个Pod交替的逐一升级，实现滚动发布的效果。&lt;/p&gt;
&lt;p&gt;如果在发布刚开始的时候，集群里只有1个新版本的Pod，这个Pod有问题启动不起来，那么滚动发布就会停止，开发和运维可以及时介入解决问题。而应用本身还有旧版本的集群和Pod在线，所以服务不会受到任何影响。关于滚动发布的详细介绍和互动教程可以阅读&lt;a href=&#34;https://kubernetes.io/docs/tutorials/kubernetes-basics/update/update-intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd40nxcyj30cj0e9t95_hu0c9d2eec3e6b4dd25210e0be97bb1d21_17938_e12d82b48a9ec632b57e240e0a01f544.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd40nxcyj30cj0e9t95_hu0c9d2eec3e6b4dd25210e0be97bb1d21_17938_a871fedf2724e2ba10ad718d7dcdd055.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd40nxcyj30cj0e9t95_hu0c9d2eec3e6b4dd25210e0be97bb1d21_17938_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd40nxcyj30cj0e9t95_hu0c9d2eec3e6b4dd25210e0be97bb1d21_17938_e12d82b48a9ec632b57e240e0a01f544.webp&#34;
               width=&#34;451&#34;
               height=&#34;513&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下面这张图展示了使用Kubernetes，配合代码仓库GitLab、Docker镜像仓库Harbor、构建工具Jenkins，实现自动化的CI/CD流程。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd422bxhj30iu0drgmc_huab73e2bd51bd9e5d2f45c05164dc5fbb_37357_755cd5fa0cd7bb2535102924bbb88ee2.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd422bxhj30iu0drgmc_huab73e2bd51bd9e5d2f45c05164dc5fbb_37357_8ca5e92e8fb90d992d9e5f724479b980.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd422bxhj30iu0drgmc_huab73e2bd51bd9e5d2f45c05164dc5fbb_37357_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd422bxhj30iu0drgmc_huab73e2bd51bd9e5d2f45c05164dc5fbb_37357_755cd5fa0cd7bb2535102924bbb88ee2.webp&#34;
               width=&#34;678&#34;
               height=&#34;495&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;上一部分结束时我们提到，传统IT架构好比传统工厂，容器化好比现代化工厂，而Kubernetes则是智能化的无人工厂，让容器和应用能够高效自动、井然有序的被控制和管理；Kubernetes还实现了服务的抽象、解耦、高扩展、统一调度与集中化管理，例如用户可以专注用同样的方式在不同硬件上的应用，比如GPU节点池和低优先级的CPU节点池。Kubernetes不仅解决了容器的编排问题，让容器应用进入大规模工业生产，更进一步对云原生应用提供了定义规范，CNCF整个技术栈都是围绕Kubernetes建立，所以Kubernetes是云原生生态最重要的基石，可以说“Kubernetes是云原生时代的Linux”，即云原生应用的操作系统。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd43148zj30k509rjs6_hub5b21b491f2349647a665380a5fcc0bc_39459_34b2473b7934039ab7ed2677e359440d.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd43148zj30k509rjs6_hub5b21b491f2349647a665380a5fcc0bc_39459_be8de1e29b168937ba9835b66ed3dd28.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd43148zj30k509rjs6_hub5b21b491f2349647a665380a5fcc0bc_39459_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd43148zj30k509rjs6_hub5b21b491f2349647a665380a5fcc0bc_39459_34b2473b7934039ab7ed2677e359440d.webp&#34;
               width=&#34;725&#34;
               height=&#34;351&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;高扩展的Kubernetes：兼容不同的硬件节点&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd407j40j30u00ia775_hu099f15d56d62dcea1869b6aeb733b7f0_115857_e626bc37df719a6290b585d636f6ca73.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd407j40j30u00ia775_hu099f15d56d62dcea1869b6aeb733b7f0_115857_5d6e5be418fbe5e980358fbf12f27298.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd407j40j30u00ia775_hu099f15d56d62dcea1869b6aeb733b7f0_115857_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd407j40j30u00ia775_hu099f15d56d62dcea1869b6aeb733b7f0_115857_e626bc37df719a6290b585d636f6ca73.webp&#34;
               width=&#34;760&#34;
               height=&#34;463&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kubernetes：云原生应用的大规模工业生产&lt;/p&gt;
&lt;p&gt;回到本文第一部分，我们曾经用集装箱革命比喻云原生。现在大家已经理解，货船可以类比操作系统，集装箱类比容器，里面装的货物则是一个个的微服务，吊臂、吊桥、起重机等自动化操作设备是Kubernetes，而一整套集装箱的操作方法和流程则是DevOps。所有这些加起来构成了现代PaaS所具备的能力：操作系统、集群管理、应用编排、应用发布、持续集成等等。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd44ecwrj30f90a9my3_hu98fafc83341b2024ee8c676629bbf21d_44640_00d4f149125996a528c07d85c0af374a.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd44ecwrj30f90a9my3_hu98fafc83341b2024ee8c676629bbf21d_44640_381e3d217ba4a6a229e9aad7c7b657d6.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd44ecwrj30f90a9my3_hu98fafc83341b2024ee8c676629bbf21d_44640_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd44ecwrj30f90a9my3_hu98fafc83341b2024ee8c676629bbf21d_44640_00d4f149125996a528c07d85c0af374a.webp&#34;
               width=&#34;549&#34;
               height=&#34;369&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器编排之战&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;意识到容器编排的重要性，Docker在2014年发布了Docker Swarm（Swarm是蜂群的意思），以一个整体来对外提供集群管理功能，最大的亮点就是全部使用Docker项目原来的容器管理API来完成集群管理。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd43i9u3j30u00h9dgh_hu7f3d56f5a77b01bf9aa508d12cdeb285_34178_37bb48d158f4634595873786a4611dfb.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd43i9u3j30u00h9dgh_hu7f3d56f5a77b01bf9aa508d12cdeb285_34178_bf9fcf602b6419d56370009c5a6c30c8.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd43i9u3j30u00h9dgh_hu7f3d56f5a77b01bf9aa508d12cdeb285_34178_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd43i9u3j30u00h9dgh_hu7f3d56f5a77b01bf9aa508d12cdeb285_34178_37bb48d158f4634595873786a4611dfb.webp&#34;
               width=&#34;760&#34;
               height=&#34;437&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同时从2014年底开始，Docker收购了最先提出容器编排概念的Fig项目，并改名为Compose（Compose是作曲的意思），它可以用来组装多容器的应用，并在Swarm集群中部署分布式应用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd43zdckj30u00fojt2_hu2fe3383f95240911f8466d00db61a63c_72267_695099b586d040f4897c1d5fdb5d6439.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd43zdckj30u00fojt2_hu2fe3383f95240911f8466d00db61a63c_72267_73ab0f37e5e03868e7e9530291f756ce.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd43zdckj30u00fojt2_hu2fe3383f95240911f8466d00db61a63c_72267_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd43zdckj30u00fojt2_hu2fe3383f95240911f8466d00db61a63c_72267_695099b586d040f4897c1d5fdb5d6439.webp&#34;
               width=&#34;760&#34;
               height=&#34;397&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;2014年Kubernetes发布之后，为了与Swarm竞争，在容器编排地位取得绝对的优势，Google、RedHat等开源基础设施公司共同发起了CNCF基金会，希望以Kubernetes为基础，建立一个由开源基础设施领域厂商主导、按照独立基金会方式运营的平台社区，来对抗以Docker公司为核心的容器商业生态。&lt;/p&gt;
&lt;p&gt;一方面Kubernetes脱胎于Google内部久负盛名的大规模集群管理系统Borg，是Google在容器化基础设施领域十余年实践经验的沉淀和升华，Google利用Kubernetes的架构和设计思想成功将其所有应用（搜索、地图、视频、金融、社交、人工智能）运行在超过100万台服务器、超过80个数据中心，每周的20亿个容器上，所以Kubernetes是唯一具有超过10年以上大规模容器生产使用的技术经验和积淀的开源项目。并且Kubernetes采用了非常优雅的软件工程设计和开源开放的态度，使得用户可以根据自己的使用场景、通过灵活插拔的方式，采用自定义的网络、存储、调度、监控、日志等模块，所以在Github上的各项指标一路飙升，将较为简单、并且生态自闭的Swarm项目远远地甩在了后边。CNCF社区也迅速增加了一系列容器生态的知名工具和项目，大量的公司和初创团队将注意力投向CNCF社区而不再是Docker，CNCF本质上成为了以Kubernetes为核心的生态系统。&lt;/p&gt;
&lt;p&gt;企业服务大厂也纷纷加入Kubernetes平台战局，在公有云或者私有PaaS平台上来发展自己的Kubernetes产品。像微软直接找来Kubernetes联合创始人Brendan Burns负责领导Azure容器服务团队，自身的混合云产品Azure Stack也大力支持Kubernetes。IBM同样也靠以Kubernetes为核心的PaaS软件IBM Cloud Private来抢占企业私有云容器平台市场，尤其是微服务的管理需求。很早就支持Kubernetes的Redhat，在2015年推出的OpenShift 3.0版中，不惜放弃自己的容器调度工具，开始支持Kubernetes，现在更成为了支持跨多云、混合云架构，以及裸机、容器和虚拟机的企业级通用应用管理平台。而虚拟化龙头VMware也改为力推主打通吃多家IaaS和Kubernetes集群管理的容器服务软件，甲骨文也在旗下云端服务支持Kubernetes。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd3zfu5hj30u00hagno_hua5aa6e5dab316ba7f8d316587931b1be_86524_e729e991143929e88d0a03ded5b47bef.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd3zfu5hj30u00hagno_hua5aa6e5dab316ba7f8d316587931b1be_86524_82c11fb3c22249ba750ae049cd38acbb.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd3zfu5hj30u00hagno_hua5aa6e5dab316ba7f8d316587931b1be_86524_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd3zfu5hj30u00hagno_hua5aa6e5dab316ba7f8d316587931b1be_86524_e729e991143929e88d0a03ded5b47bef.webp&#34;
               width=&#34;760&#34;
               height=&#34;438&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在用户、社区和大厂的支持中，Kubernetes逐步成为企业基础架构的部署标准和新一代的应用服务层。&lt;/p&gt;
&lt;p&gt;2016年，面对CNCF的竞争优势，Docker公司宣布放弃现有的Swarm项目，将容器编排和集群管理功能转到Docker项目当中。然而这种改变带来的技术复杂度和维护难度，给Docker项目造成了非常不利的局面。不同于Docker，Kubernetes推进的民主化架构从API到容器运行的每一层，都给开发者暴露出了可扩展的插件机制，鼓励用户通过代码的方式介入每一个阶段。Kubernetes的变革非常有效，很快在整个容器社区中催生出了大量的、基于Kubernetes API和扩展接口的二次创新产品，例如前文提到的Istio等等。Docker公司在Kubernetes社区崛起和壮大后，败下阵来。&lt;/p&gt;
&lt;p&gt;2017年，Docker公司将容器运行时部分Containerd捐献给CNCF社区，并在自己主打产品Docker企业版中内置Kubernetes项目，持续了两年的容器编排之争终于落下帷幕，Kubernetes成为了最后的胜利者，而Docker输掉了最关键的一仗，失去了成为云原生时代操作系统的机会。&lt;/p&gt;
&lt;p&gt;Docker在最重要的容器编排之战中失败，带给我们的教训包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开源不等于免费，开源是一种商业模式，一个开源组织和开源项目要想生存下去，最重要的基础就是普遍被使用，不然很快就会被竞争者替代&lt;/li&gt;
&lt;li&gt;开源技术终将走向商业，包括Docker，必然面临企业市场的挑战&lt;/li&gt;
&lt;li&gt;Docker进入企业级市场，有优势也有劣势，优势是挟Docker的大量开发者，劣势是没有做过企业级市场，开发者市场和企业级市场的做法完全不同&lt;/li&gt;
&lt;li&gt;Docker在竞争中失利，看起来是时机和生态构建的问题，但归根结底是基因和能力问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此系列文章的前五部分，我们详细介绍了云原生的各种理念和技术。在最后一部分，我们将展开总结和思考，分析云原生时代的机遇与挑战。&lt;/p&gt;
&lt;h2 id=&#34;第六部分机会与思考&#34;&gt;第六部分：机会与思考&lt;/h2&gt;
&lt;p&gt;上文主要介绍了Kubernetes与容器编排之战，本文的最后一部分将系统性的总结云原生能带给我们什么样的未来，相关的创业和投资机会在哪里。&lt;/p&gt;
&lt;p&gt;每一次IT产业架构的变革都会带来巨大的机遇和行业洗牌的挑战。过去的三四十年间，IT业经历了多次重大的变革，包括20世纪七八十年代从大型机向小型机的转移、九十年代C/S架构的普及，以及21世纪初互联网的兴起，先后造就了IBM、思科、惠普、Oracle、EMC、SAP等巨头企业。&lt;/p&gt;
&lt;p&gt;历次IT技术革命还有个共同特点：无论原有的基础软硬件公司此前有多么牢不可破的垄断地位，一旦不能符合新的IT技术变革的趋势，洗牌在所难免。&lt;/p&gt;
&lt;p&gt;现代云计算的浪潮开始于2000年以后，已经造就了VMware、ServiceNow、Salesforce、Shopify等数百亿美金的明星企业，以及无数的独角兽公司。&lt;/p&gt;
&lt;p&gt;云计算是通过互联网的方式按需交付基础设施（硬件/服务器）、存储、数据库和各种应用服务，通常这些服务是由AWS、Azure等公有云或者私有云平台提供的。&lt;/p&gt;
&lt;p&gt;而云原生是一种理念和架构，用于以针对云环境优化的方式组装上述所有基于云的组件。因此云原生也是一个目的地：对于那些希望实现基础设施和流程现代化，甚至组织文化现代化的企业来说，最终的目标是仔细选择最适合其具体情况的云技术。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd57rbruj30oz0gigme_huca019da239c87effa0c44b9ef9b113c0_27935_d0662d371c3c0b5e78290e2f3e8ee53b.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd57rbruj30oz0gigme_huca019da239c87effa0c44b9ef9b113c0_27935_c8c17e2afcc65bbe4d42d68aa3703c6d.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd57rbruj30oz0gigme_huca019da239c87effa0c44b9ef9b113c0_27935_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd57rbruj30oz0gigme_huca019da239c87effa0c44b9ef9b113c0_27935_d0662d371c3c0b5e78290e2f3e8ee53b.webp&#34;
               width=&#34;760&#34;
               height=&#34;502&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;要从云计算中获得最佳效果，需要使用云原生架构；云原生的普及又会促进云计算的加速发展。&lt;/p&gt;
&lt;p&gt;从统计数据和发展趋势来看，云原生被接受的程度和普及速度正在大大加快，例如下图显示，自从2016年以来容器的使用量每年都在快速上升。IDC预计，到2022年90%的应用程序将采用微服务架构和第三方代码，35%的生产应用程序将诞生于云端。由于容器和敏捷方法的采用，预计2018-2023年间将诞生5亿个新应用程序。由数字化转型，以及接受和采用新技术的需求驱动，云原生将更深入地渗透到大型企业组织中。这意味着云原生技术和方法可能会遵循敏捷和DevOps的模式，越来越多地吸引更多的利益相关者，包括管理者和业务线领导人，在未来几年内覆盖一半或更多的组织。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd58nr5hj30k80ec74x_hud3d5d1b663bf2a8a85608742c4fd2388_33965_cc60d8ab33e4d69d380786f29468f9ae.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd58nr5hj30k80ec74x_hud3d5d1b663bf2a8a85608742c4fd2388_33965_f32b879b17a2631ec677fc5e34059302.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd58nr5hj30k80ec74x_hud3d5d1b663bf2a8a85608742c4fd2388_33965_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd58nr5hj30k80ec74x_hud3d5d1b663bf2a8a85608742c4fd2388_33965_cc60d8ab33e4d69d380786f29468f9ae.webp&#34;
               width=&#34;728&#34;
               height=&#34;516&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;各种场景容器使用量都在逐步上升&lt;/p&gt;
&lt;p&gt;但目前不是所有的云计算技术和产品都能很好的满足云原生架构分布式、自动化、轻量化的要求，传统的IT基础设施正在受到越来越大的冲击，例如传统集中式数据库正在逐渐被分布式数据库所取代，虚拟机技术受到了容器的巨大冲击，分布式监控系统完全替代了传统的监控产品，而传统的安全产品也远远无法满足云原生安全性的要求。&lt;/p&gt;
&lt;p&gt;还需要注意的是，云原生的概念不仅仅只意味着容器、Kubernetes或Serverless，也为下一项技术留下了足够的空间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生投资的分层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于大多数软件开发组织来说，仍然处于采用微服务和容器的早期阶段。新机遇一方面源自于云原生在各行各业的应用，一方面则是云原生相关新的基础设施。&lt;/p&gt;
&lt;p&gt;CNCF全景图呈现了比较完整的云原生项目和分类，我们可以将其简化成如下图所示的几种大的分类：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd51e679j30ka0bywfe_hu3117d383585f332602576a53c15a2ce5_43884_8c23d77ddf6ab72f01cd5b2620dfa81d.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd51e679j30ka0bywfe_hu3117d383585f332602576a53c15a2ce5_43884_3387b67153b906e782e5d9643d75219c.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd51e679j30ka0bywfe_hu3117d383585f332602576a53c15a2ce5_43884_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd51e679j30ka0bywfe_hu3117d383585f332602576a53c15a2ce5_43884_8c23d77ddf6ab72f01cd5b2620dfa81d.webp&#34;
               width=&#34;730&#34;
               height=&#34;430&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一共分为AppDev &amp;amp; DevOps；Management；Runtimes；Infrastructure and Services；Serverless；Observability；Security八个大的模块。&lt;/p&gt;
&lt;p&gt;从广义的角度来讲，云原生应用的设计、开发、管理、运维、分析与传统应用有非常大的不同，生态的每个环节、技术的每个领域都会有许多机会，例如云原生应用的设计、咨询、开发、培训，需要有方案商、供应商、实施商；在基础设施层面，数据库、开发工具、核心中间件、安全产品等等都会有巨大市场需求，例如Service Mesh+安全、Serverless+安全、容器+安全、多云+安全，例如云原生数据的分析处理，例如云原生架构的灾备管理。&lt;/p&gt;
&lt;p&gt;我个人将云原生的生态分为三层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术层包括云原生技术相关的基础设施，主要分为两种类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原有技术的替代品：例如ETCD取代传统的数据库&lt;/li&gt;
&lt;li&gt;全新基础设施：新技术相关产品，例如Istio和OpenFaaS&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用层主要是云原生在各行业的具体应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务层&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包括云原生相关的培训、咨询、认证等相关服务。&lt;/p&gt;
&lt;p&gt;下面我重点讲讲技术层和应用层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生技术层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面的表格里代表性的列举了云原生技术层的几个领域及相关项目。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd56cr01j30lq0e6q49_hubec110aeb5fc51462c1b669e3c9602e5_59022_593a81cbbb5f30266b251d1a025913cd.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd56cr01j30lq0e6q49_hubec110aeb5fc51462c1b669e3c9602e5_59022_7d600e9598533b6a41cfb2a1133dd8c5.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd56cr01j30lq0e6q49_hubec110aeb5fc51462c1b669e3c9602e5_59022_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd56cr01j30lq0e6q49_hubec110aeb5fc51462c1b669e3c9602e5_59022_593a81cbbb5f30266b251d1a025913cd.webp&#34;
               width=&#34;760&#34;
               height=&#34;496&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下图展示了当前这些项目的市场占有率情况。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd54h5y7j30ju0e60te_hu69388e370627fcde5c1dab40ed6e44d4_25115_2ec139e8bb4357c3ddf1d53456346dc3.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd54h5y7j30ju0e60te_hu69388e370627fcde5c1dab40ed6e44d4_25115_9ae1ae8837ca802cc014b8eb7276c25a.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd54h5y7j30ju0e60te_hu69388e370627fcde5c1dab40ed6e44d4_25115_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd54h5y7j30ju0e60te_hu69388e370627fcde5c1dab40ed6e44d4_25115_2ec139e8bb4357c3ddf1d53456346dc3.webp&#34;
               width=&#34;714&#34;
               height=&#34;510&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd532sxaj30jt0dnaax_hu419abc2a4b52f4d46a153fe70e47965c_29231_67dbf24f6572553a97fb7651451696e7.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd532sxaj30jt0dnaax_hu419abc2a4b52f4d46a153fe70e47965c_29231_484e802de930fae25dba1b9a13e24633.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd532sxaj30jt0dnaax_hu419abc2a4b52f4d46a153fe70e47965c_29231_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd532sxaj30jt0dnaax_hu419abc2a4b52f4d46a153fe70e47965c_29231_67dbf24f6572553a97fb7651451696e7.webp&#34;
               width=&#34;713&#34;
               height=&#34;491&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd5amzu8j30lm0fejs6_huc518f1cc80e6e8fc7c90fae1c0b28f76_39657_9eaa2ccce1789a25384de121f074c1c2.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5amzu8j30lm0fejs6_huc518f1cc80e6e8fc7c90fae1c0b28f76_39657_6b754ffc8fa888d8ad4bc2eda5ab9ac4.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5amzu8j30lm0fejs6_huc518f1cc80e6e8fc7c90fae1c0b28f76_39657_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd5amzu8j30lm0fejs6_huc518f1cc80e6e8fc7c90fae1c0b28f76_39657_9eaa2ccce1789a25384de121f074c1c2.webp&#34;
               width=&#34;760&#34;
               height=&#34;541&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;可以看到技术层涉及的范围非常广，机会非常多，本文仅展开介绍其中我比较看好的一个领域-云原生安全。&lt;/p&gt;
&lt;p&gt;据CNCF统计，采用容器技术的挑战中，开发团队面临的文化挑战、安全性、复杂性、就绪性和监控分别排在前五位。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd51n0kyj30kd0g3q3t_huf134ee0c010e6a8191186ffc49593942_42742_9592dc5f62102675f13ac08b774ebfd9.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd51n0kyj30kd0g3q3t_huf134ee0c010e6a8191186ffc49593942_42742_ad79f49682c739ba83c1b7681650624f.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd51n0kyj30kd0g3q3t_huf134ee0c010e6a8191186ffc49593942_42742_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd51n0kyj30kd0g3q3t_huf134ee0c010e6a8191186ffc49593942_42742_9592dc5f62102675f13ac08b774ebfd9.webp&#34;
               width=&#34;733&#34;
               height=&#34;579&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用容器的挑战&lt;/p&gt;
&lt;p&gt;在云原生架构中，安全问题显得尤其突出的原因有以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;快速迁移到云原生架构对企业安全状况和运营产生了深远的影响。在容器、微服务和编排框架的世界中，以持久“状态”运行在“服务器”上的“应用程序”的概念已经过时。现在，该应用程序或服务是一个分布式系统，由多个组件组成，这些组件运行在数量可变的节点上，处于几乎恒定的变化状态。依赖于机器隔离和可预测的系统状态的传统安全控制是无效的。对服务到服务的通信视而不见的安全策略以及缺乏水平可扩展的控件，根本无法跟上当今微服务应用程序的步伐。&lt;/li&gt;
&lt;li&gt;随着企业将工作负载从数据中心转移到AWS、Google Cloud Platform和Microsoft Azure，它们已经改变了购买安全性的方式。他们需要独立于平台的安全工具，这样就不会被绑定到特定的云平台中。&lt;/li&gt;
&lt;li&gt;复杂系统可以创建大量的警报和事件日志，这会是一项惊人的任务。安全项目被堆积如山的繁忙工作所淹没，分析师们疲惫不堪。随着分析师对惊人的数据量变得不敏感，真正的问题就从他们的手指间溜走了。&lt;/li&gt;
&lt;li&gt;DevOps是一种协作方法，它将开发人员和IT操作统一起来，以加快应用程序的构建、测试和部署，它也影响了IT安全。当开发人员可以直接将他们的应用程序部署到生产服务器上，因为业务敏捷性需要它时，他们就不能停下来找出安全问题。DevOps提供了一种完全不同的安全方式，安全自动化有很多机会。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了在云本机环境中保护业务资产，组织必须将安全实践和技术与它们要保护的系统纳入体系结构中。正如DevOps支持持续开发和部署一样，“DevSecOps”也必须支持持续的安全管道。这意味着要建立全新的方法、功能和工具，以确保旨在保护云原生系统的解决方案呈现以下基本特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局的实时可见性：局部的或事后的可见性是不够的。无论位于何处，基础架构层和应用程序都必须可见。&lt;/li&gt;
&lt;li&gt;快速、迭代的反馈循环：反馈循环允许安全措施不断适应快速变化的环境。&lt;/li&gt;
&lt;li&gt;解决安全问题的工程方法：自动化、连续测量和受控实验将是解决整个企业安全问题的主要方法，取代手动分析和控制更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，像Netflix、Lyft和Square等组织已经开始将云原生安全作为工程问题来处理，使用自动化来避免这些陷阱，并使安全团队更加有效。他们还规避了将检测、响应和开发团队分开的烟囱式结构，在构建安全检测机制并将它们与响应编排集成时遵循DevOps的思想。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd53kdrqj30u00g1wgq_hu27418668269fc89b5fbea60ee2ce9bf5_93222_982e2db01d51be60066193d8bfab7e19.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd53kdrqj30u00g1wgq_hu27418668269fc89b5fbea60ee2ce9bf5_93222_2c637a7c0e385a2479964618c9adbef9.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd53kdrqj30u00g1wgq_hu27418668269fc89b5fbea60ee2ce9bf5_93222_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd53kdrqj30u00g1wgq_hu27418668269fc89b5fbea60ee2ce9bf5_93222_982e2db01d51be60066193d8bfab7e19.webp&#34;
               width=&#34;760&#34;
               height=&#34;406&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;来自Netflix的安全检测组件示例&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/security/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;云原生的安全分为4C，即代码、容器、集群、云四个层级。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd55vxnwj30u00hb0to_hu31f0e7c7588a36c15439eb6b5db7ea0a_45092_29957065f9db27c56a9c34a50e699e57.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd55vxnwj30u00hb0to_hu31f0e7c7588a36c15439eb6b5db7ea0a_45092_76f8dd06dbae5b968e166604173f88e8.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd55vxnwj30u00hb0to_hu31f0e7c7588a36c15439eb6b5db7ea0a_45092_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd55vxnwj30u00hb0to_hu31f0e7c7588a36c15439eb6b5db7ea0a_45092_29957065f9db27c56a9c34a50e699e57.webp&#34;
               width=&#34;760&#34;
               height=&#34;438&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;CNCF全景图中安全与合规子分类里包含的项目如下图所示。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd524cl8j30u00codhc_hu65fb18f216a80a0e9356de766ea57c75_65896_6b6248ebc0e173b346b7f2c074c80b8e.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd524cl8j30u00codhc_hu65fb18f216a80a0e9356de766ea57c75_65896_de1a0ab8eed46d6c0c8b2dd79f8059f3.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd524cl8j30u00codhc_hu65fb18f216a80a0e9356de766ea57c75_65896_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd524cl8j30u00codhc_hu65fb18f216a80a0e9356de766ea57c75_65896_6b6248ebc0e173b346b7f2c074c80b8e.webp&#34;
               width=&#34;760&#34;
               height=&#34;321&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;像在我多篇文章里曾经提及的新一代云安全公司，市值189亿美金的CrowdStrike，直接将自己定义为云原生的端点保护平台（Cloud-Native Endpoint Protection Platform），以此同传统的端点保护产品区分开来。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd524cl8j30u00codhc_hu65fb18f216a80a0e9356de766ea57c75_65896_6b6248ebc0e173b346b7f2c074c80b8e.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd524cl8j30u00codhc_hu65fb18f216a80a0e9356de766ea57c75_65896_de1a0ab8eed46d6c0c8b2dd79f8059f3.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd524cl8j30u00codhc_hu65fb18f216a80a0e9356de766ea57c75_65896_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd524cl8j30u00codhc_hu65fb18f216a80a0e9356de766ea57c75_65896_6b6248ebc0e173b346b7f2c074c80b8e.webp&#34;
               width=&#34;760&#34;
               height=&#34;321&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;下面我介绍几家和云原生安全相关的初创企业。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、Capsule8（B轮）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Capsule8是一家由经验丰富的黑客和安全企业家创建的高新科技初创型企业，总部位于纽约布鲁克林，成立于2016年秋季，在2018年8月获得1500万美元的B轮融资。&lt;/p&gt;
&lt;p&gt;Capsule8开发了业界第一个也是唯一一个针对Linux的实时0day攻击检测平台，可主动保护用户的Linux基础设施免受攻击。Capsule8实时0day攻击检测平台可显著改善和简化当今基础架构的安全性，同时为未来的容器化环境提供弹性的支持。&lt;/p&gt;
&lt;p&gt;混合云架构已经成为企业IT基础设施的重要架构，但其复杂性也使企业面临多种攻击的风险，根据Capsule8与ESG Research赞助的一项新研究表明，仅2017一年就有42%的企业报告了混合云环境受到攻击，28%的企业表示0day攻击是这些攻击的起源。&lt;/p&gt;
&lt;p&gt;混合云环境由于存在多云服务商，缺乏中心控制和完整的合规性规划，存在边界模糊，访问策略不一致等问题，加上公有云的暴露面增大，攻击者容易通过攻击薄弱点进入，这也是近年来如软件定义边界SDP、移动目标防护MTD等新方案兴起的原因。&lt;/p&gt;
&lt;p&gt;无论是传统环境，还是混合环境，防护利用0day漏洞的高级威胁需要企业安全团队全方位持续防护资产、获得环境的可视性，检测恶意行为。&lt;/p&gt;
&lt;p&gt;Capsules8平台整体架构图如下所示：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd59mw2tj30ow09lgm7_huc006b793942277fc5a9e7d1e22d5f589_32749_3fc567b20332cfa0a84eb5a8f185f870.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd59mw2tj30ow09lgm7_huc006b793942277fc5a9e7d1e22d5f589_32749_fb8039ed3a094767e824a14d73654863.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd59mw2tj30ow09lgm7_huc006b793942277fc5a9e7d1e22d5f589_32749_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd59mw2tj30ow09lgm7_huc006b793942277fc5a9e7d1e22d5f589_32749_3fc567b20332cfa0a84eb5a8f185f870.webp&#34;
               width=&#34;760&#34;
               height=&#34;293&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;假设客户生产环境是一个混合云环境，服务器部署于客户侧数据中心、公有云AWS和Azure中。Capsule8的整个工作流程主要分为感知、检测、阻断、调查四步。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd57cxruj30kk0arab3_hu2766a9f6ceb6f55a625401c7324cac44_48580_00028c660348fd3e90e51461c0ccc9e9.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd57cxruj30kk0arab3_hu2766a9f6ceb6f55a625401c7324cac44_48580_34806acb16dcb44e9fe5b4f0655d5108.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd57cxruj30kk0arab3_hu2766a9f6ceb6f55a625401c7324cac44_48580_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd57cxruj30kk0arab3_hu2766a9f6ceb6f55a625401c7324cac44_48580_00028c660348fd3e90e51461c0ccc9e9.webp&#34;
               width=&#34;740&#34;
               height=&#34;387&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd56utpsj30m804uaan_hu499598323e3988814025817f198cbf42_20565_86644c99f5637e420bb9cfa441985b8e.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd56utpsj30m804uaan_hu499598323e3988814025817f198cbf42_20565_372d86b67605bdc5337c50c905220cb4.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd56utpsj30m804uaan_hu499598323e3988814025817f198cbf42_20565_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd56utpsj30m804uaan_hu499598323e3988814025817f198cbf42_20565_86644c99f5637e420bb9cfa441985b8e.webp&#34;
               width=&#34;760&#34;
               height=&#34;165&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、Aqua Security（C轮）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Aqua Security成立于2015年，它为基于容器、Serverless和云原生应用提供保护解决方案。2019年，Aqua Security完成了6200万美金的C轮融资，累计融资超过1亿美元。它的客户包括能源、航空航天、互联网、媒体、旅游、零售、制药和酒店业的100多家知名企业。&lt;/p&gt;
&lt;p&gt;Aqua Security的云原生安全平台使用现代化的零接触方法来检测和预防威胁，在整个应用程序生命周期内提供全面的可见性和安全自动化。例如在漏洞管理方面，Aqua可以实现：&lt;/p&gt;
&lt;p&gt;扫描镜像和功能：Aqua几乎与所有CI/CD工具集成在一起，可在构建镜像和功能时主动扫描，及早发现问题并允许快速修复。&lt;/p&gt;
&lt;p&gt;关注应用风险：下一个挑战是大规模提供安全性。这种情况是指可能要扫描成千上万个镜像的漏洞。但是，其中许多镜像实际上并未在生产中部署，因此即使处于脆弱状态风险也不高。Aqua提供了对正在运行的工作负载中易受攻击组件的实例化的可见性，这使安全团队可以集中精力修复最容易遭受利用风险的那些组件。&lt;/p&gt;
&lt;p&gt;提供可行建议：Aqua提供了有关漏洞的具体可行建议，通常是建议升级到特定的版本或者改变配置和环境变量。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd55don4j30rs0eswft_hu03709ef5bf008f3adf52b2afa39198d8_59214_8ed6ee04822dce5a13b738dce8b4e55d.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd55don4j30rs0eswft_hu03709ef5bf008f3adf52b2afa39198d8_59214_b38e3a6b1fd8a2ac2e662185f78defc4.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd55don4j30rs0eswft_hu03709ef5bf008f3adf52b2afa39198d8_59214_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd55don4j30rs0eswft_hu03709ef5bf008f3adf52b2afa39198d8_59214_8ed6ee04822dce5a13b738dce8b4e55d.webp&#34;
               width=&#34;760&#34;
               height=&#34;404&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、Twistlock（被收购）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;位于CNCF全景图里的Twistlock创立于2015年。曾经在以色列著名的网安黄埔8200部队服役，并在微软企业安全部门工作的Ben Bernstein以不到30万美元的种子轮开始起家，定位容器安全。Twistlock自己贴的标签除了容器安全，就是云原生安全。Twistlock的融资节奏很好，2015年5月天使轮280万美元，2016年7月A轮1000万美元，2017年4月B轮1700万美元，2018年8月C轮3300万美元，2019年就被Palo Alto Networks以4.1亿美金的价格收购。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd5a46f4j30n30f8wfg_hu16862d3e65546fca36bf6ac04b1acc87_46059_cdba2f7aac19e1551190dc08a5decabb.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5a46f4j30n30f8wfg_hu16862d3e65546fca36bf6ac04b1acc87_46059_4bd7bec0d311f532b415e6e6b74170d2.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5a46f4j30n30f8wfg_hu16862d3e65546fca36bf6ac04b1acc87_46059_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd5a46f4j30n30f8wfg_hu16862d3e65546fca36bf6ac04b1acc87_46059_cdba2f7aac19e1551190dc08a5decabb.webp&#34;
               width=&#34;760&#34;
               height=&#34;501&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Twistlock产品界面&lt;/p&gt;
&lt;p&gt;现在，Twistlock已经能为Amazon ECS、Azure、Docker、GCP、Pivotal、OpenShift、Istio等多个平台提供安全方案。Twistlock的自己一句话介绍是“领先的全栈，全生命周期容器安全解决方案，保护容器环境及其中运行的应用程序，具有轻量级，可扩展和自动化特性，自动化的策略构建和全开发生命周期内的无缝集成”。&lt;/p&gt;
&lt;p&gt;截至目前，Twistlock总结了6方面的核心能力，分别是漏洞管理、合规、运行时防护、持续集成和持续交付、云原生防火墙和访问控制。像运行时防护包括网络和应用程序防火墙，支持Docker和AWS Fargate运行安全以及主机防护，可以通过机器学习为每个应用程序进行自动建模，保护网络，文件系统，进程和系统调用。云原生防火墙方面，Twistlock包括3层防火墙和7层防火墙，它可以自动学习应用程序的网络拓扑，并为所有微服务提供应用程序的微分段，可以检测和阻止XSS攻击、SQL注入等威胁，还可以自动模拟所有微服务之间的所有流量，并允许安全团队集中查看和实施安全流量，同时自动阻止异常，无需手动创建和管理规则。&lt;/p&gt;
&lt;p&gt;除了云原生安全领域，以及前文介绍过的Kong、RapidAPI之外，我再介绍三家知名的云原生技术层创业企业。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、Rancher（D轮）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在本文第一部分我们提过Rancher（中文意思是放牧人）这家公司，它的创始人梁胜职业生涯贯穿软件开发与云计算的发展历史。作为耶鲁大学计算机博士、Java语言J2SE平台核心组件JNI的作者、JVM的领导设计与开发者，梁胜2000年离开Sun创办了应用防火墙软件公司Teros Networks并担任CTO，2001年公司被Citrix收购。2008年梁胜第二次创业创建了&lt;a href=&#34;http://Cloud.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud.com&lt;/a&gt;，并推出了著名的云计算管理软件CloudStack，他也因此被誉为“CloudStack之父”，2011年&lt;a href=&#34;http://Cloud.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud.com&lt;/a&gt;被Citrix又以2亿美金收购，他成为Citrix首位华人CTO。随后2014年梁胜创立了容器管理公司Rancher Labs。&lt;a href=&#34;https://rancher.com/why-were-building-a-container-infrastructure-platform-at-rancher-labs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这是&lt;/a&gt;他创建公司的初衷。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd5866lfj30n308ngml_hu34905dafea716314200ea7c4877491bc_28035_635567fb1f9081e713317cef6c5997a0.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5866lfj30n308ngml_hu34905dafea716314200ea7c4877491bc_28035_1a78952922989cf47e6d1f2699b84916.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5866lfj30n308ngml_hu34905dafea716314200ea7c4877491bc_28035_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd5866lfj30n308ngml_hu34905dafea716314200ea7c4877491bc_28035_635567fb1f9081e713317cef6c5997a0.webp&#34;
               width=&#34;760&#34;
               height=&#34;284&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Rancher是一个容器管理平台，通过Rancher可以实现Docker和Kubernetes的轻松部署。Rancher由基础设施编排、容器编排与调度、应用商店、企业级权限管理组成。下图展示了Rancher的主要组件和功能。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd52js77j30u00ci401_huc83a89b9c50e3d88a318757804bc864b_66784_c0acefe96f6a75e00c445804d5be4385.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd52js77j30u00ci401_huc83a89b9c50e3d88a318757804bc864b_66784_582a7b9218a01fadcde59f75b1234873.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd52js77j30u00ci401_huc83a89b9c50e3d88a318757804bc864b_66784_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd52js77j30u00ci401_huc83a89b9c50e3d88a318757804bc864b_66784_c0acefe96f6a75e00c445804d5be4385.webp&#34;
               width=&#34;760&#34;
               height=&#34;317&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;今年3月份，Rancher对外公布了4000万美元的D轮融资，由此Rancher累计融资高达9500万美元。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、HashiCorp（E轮）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HashiCorp（简称为Hashi，日语“桥梁”的含义）是我一直非常看好的一家云原生技术企业，不过最近因为禁止中国企业使用其商业产品而被刷屏。它成立于2012年，主要开发DevOps和云管理基础设施相关产品，日裔创始人及CTO Mitchell Hashimoto从12岁就开始创业，目前年仅30岁，公司主要产品都出自于他的手笔。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd5azfe4j30u00k0ta9_hucd735704617cfbeb2ca43ba1b842c313_67361_593da69982ec37f614325e82beeee23d.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5azfe4j30u00k0ta9_hucd735704617cfbeb2ca43ba1b842c313_67361_6a7b6e2b2862b2ef6c069f70381a4642.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5azfe4j30u00k0ta9_hucd735704617cfbeb2ca43ba1b842c313_67361_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd5azfe4j30u00k0ta9_hucd735704617cfbeb2ca43ba1b842c313_67361_593da69982ec37f614325e82beeee23d.webp&#34;
               width=&#34;760&#34;
               height=&#34;507&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;HashiCorp旗下包含多款知名的云原生相关开源产品，我们自上而下的来看：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nomad：程序自动化，集群管理器和调度器，专为微服务和批量处理工作流设计。与Kubernetes相比，Nomad通用性更强。&lt;/li&gt;
&lt;li&gt;Vault：安全自动化，企业级私密信息管理工具。&lt;/li&gt;
&lt;li&gt;Terraform：基础架构自动化，安全有效地构建、更改和版本控制基础设施的工具。&lt;/li&gt;
&lt;li&gt;Packer：镜像工具，旨在通过简易的方式自动化构建镜像。&lt;/li&gt;
&lt;li&gt;Vagrant：用于创建和部署虚拟化开发环境的工具，由Mitchell Hashimoto在23岁时开发，并成为其创建HashiCorp的基石。&lt;/li&gt;
&lt;li&gt;Consul：网络自动化、服务网格解决方案，它提供了一个功能齐全的控制平面，主要功能包括服务发现、健康检查、键值存储、安全服务通信、多数据中心等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年3月HashiCorp对外公布了1.75亿美元的E轮融资，投后估值为51亿美元。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、Snowflake（G轮）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Snowflake成立于2012年，创始人Bob Muglia曾在微软工作23年，拥有丰富的数据库经验。Bob Muglia认为，NoSQL型数据库并不能完全适应业务要求，基于云端的数据仓库省去了相关软硬件的设置需要，降低了使用门槛。Snowflake包括数据引擎在内的几乎所有技术都是自己研发的，在数据库和数据处理方面拥有非常多的专利，它是一个云原生的SQL数据仓库，完全针对云计算特点设计，部署在AWS等云端平台上，可以将用户所有的数据集中在一个地方，用户只需加载数据然后运行查询就可以查找到各种结构化或半结构化的数据。&lt;/p&gt;
&lt;p&gt;为什么要使用云原生数据仓库？&lt;/p&gt;
&lt;p&gt;作为一个类别，云原生的数据仓库提供了许多好处。首先，它们使公司摆脱了对设备和机器的担忧：在过去的物理服务器时代，公司需要操心服务器机房，或者至少是运行软件或存储数据的特定机器。构建这个物理基础设施是启动或扩展软件公司的一个巨大障碍。现在，服务器成本要低得多，只需点击几下鼠标就可以创建云端数据仓库。公司只需要按需处理和存储数据，并为他们使用的东西付费。云的使用还可以为公司提供更多的冗余和支持，因为他们不再需要担心单个服务器的故障和整个操作的崩溃。大型云服务提供商拥有多个备份系统，可以在全球数据中心之间自动扩展，以保持一切正常运行。这对客户公司来说是双赢的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd5429q0j30l109rjs1_hu31476e50b19c5b9b05aeaaa48466a927_34413_7fa8a6e40bca0e423b41940caf16b11a.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5429q0j30l109rjs1_hu31476e50b19c5b9b05aeaaa48466a927_34413_92fd5bb7858902add65729d7272a66ea.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd5429q0j30l109rjs1_hu31476e50b19c5b9b05aeaaa48466a927_34413_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd5429q0j30l109rjs1_hu31476e50b19c5b9b05aeaaa48466a927_34413_7fa8a6e40bca0e423b41940caf16b11a.webp&#34;
               width=&#34;757&#34;
               height=&#34;351&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;作为一个基于云的数据仓库，Snowflake具有很强的灵活性和可伸缩性。Snowflake基于订阅的模型将存储和计算服务分离，允许它们独立运行。当用户构建插入Snowflake的新解决方案时，他们只支付存储数据或根据需要分析数据的费用。此外，该系统还构建了一个相互连接的云服务器阵列，将数据分散，允许组织内的单个用户或组访问他们需要的特定数据，而无需复杂的数据传输，简化了连接和分析。&lt;/p&gt;
&lt;p&gt;对于云原生数据仓库来说，能够在不影响底层的情况下快速查询数据并使用实时数据执行分析是一个强大的功能。由于数据不断地被各种各样的系统所创建，其中许多系统最初都是云端固有的，因此实时分析这些数据的能力对现代公司至关重要。实时分析会根据需要，只对特定实例和项目收费而不产生更高的成本。&lt;/p&gt;
&lt;p&gt;Snowflake在今年2月份完成了4.79亿美元的G轮融资，估值高达124亿美元，投资机构包括Salesforce Ventures，Snowflake还由此宣布了与Salesforce的战略合作伙伴关系。Snowflake在《福布斯》最新的“云100强”榜单中位列第二，仅次于Stripe。&lt;/p&gt;
&lt;p&gt;云原生技术层的机会我还在《&lt;a href=&#34;http://mp.weixin.qq.com/s%3F__biz%3DMzA4MzA4ODY4MA%3D%3D%26mid%3D2656633045%26idx%3D1%26sn%3Dbcf34dc1bffd8de08fba4d64226c5020%26chksm%3D84566492b321ed843bed999a651e0f7275d0fd149e3313e86a961ec5d0c15fdfe330f458d7e2%26scene%3D21%23wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信天研报 | 虚拟化与超融合（一）&lt;/a&gt;》系列里提到过，由于容器技术对于传统虚拟机的冲击，众多创业公司正在解构VMware，这将在该系列详细讨论。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云原生应用层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;云原生能广泛应用在所有的行业，并发挥其快速、灵活、弹性、扩展性强、迁移能力强等多种优势。在这里我仅抛砖引玉，分析下云原生游戏的优点。&lt;/p&gt;
&lt;p&gt;围绕云游戏的许多讨论都集中在其“杀死控制台”的潜力上，从而消除了本地硬件玩游戏的需求。但是，对硬件的持续关注未能抓住云游戏的真正潜力。云游戏的真正创新不仅仅在于我们怎么玩游戏方式，还在于我们玩什么游戏：“云原生”游戏将完全颠覆游戏体验本身，以及这些游戏的销售和销售方式。&lt;/p&gt;
&lt;p&gt;云原生游戏是专门为云开发的游戏，其中客户端和服务器托管在同一架构中，有可能产生全新的游戏体验和商业模式。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;病毒式传播&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;大多数MMO（Massively Multiplayer Online，大型多人在线）游戏具有固有的网络效应，这意味着与更多玩家一起玩游戏会更加有趣。然而，MMO通常会遇到冷启动问题：一开始，没有足够的参与者来创造积极的体验，从而导致新用户的流失。与朋友合作玩耍是最好的招募和留住新用户的方式，但是在此过程中可能会遇到很多障碍。例如，用户可以在不同时间或在不同平台上玩。由于不透明的配对规则和服务器限制，在游戏中寻找朋友可能很麻烦。&lt;/p&gt;
&lt;p&gt;利用云原生开发的MMO游戏本质上是跨平台的，因此可以从任何设备上访问。没有下载、安装，或者加载时间，用户不用再为了补丁或者一个游戏的副本需要等待三个小时。&lt;/p&gt;
&lt;p&gt;为了简化入门过程，云原生游戏可以使用深层链接来无缝地允许新玩家加入朋友的游戏会话。同时，想要获得更轻松体验的用户可以实时选择确切的时点来参加比赛或作为旁观者。&lt;/p&gt;
&lt;p&gt;这些支持云的功能共同加速了多人游戏固有的网络效果。如果成功的话，第一个云原生MMO游戏可能会完全通过玩家主导的招募而快速发展，其病毒增长曲线比传统的MMO更类似于Facebook。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创造视频营销机会&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除了更强大的病毒性之外，云原生游戏还将为AAA（3A大作，高成本、高体量、高质量）游戏提供新的营销形式。传统上AAA游戏依赖于广告牌和展示广告等营销方式。在没有安装时间的情况下，潜在玩家将能够单击链接立即尝试一款游戏—这是一个巨大的进步。&lt;/p&gt;
&lt;p&gt;随着云游戏的普及，视频和有影响力的营销将变得越来越重要。销售佣金和“点击加入”可能会成为云游戏经济中网络大V收入的最大来源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现AI驱动的实时内容生成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于客户端和服务器在同一个网络中，云原生游戏可以方便的跟踪和收集用户旅程中几乎所有的数据，这使得我们可以以开创性的方式在游戏中增强人工智能和机器学习能力。&lt;/p&gt;
&lt;p&gt;例如，游戏长期以来通过出售改变玩家外观或周围世界的化妆品来赚钱。由于云提供无限的数据、处理能力和最小的客户端-服务器延迟，人工智能可以实时生成完全动态的环境。以下是基于Nvidia深度学习系统的剪辑，显示用户在AI的帮助下修改了一个逼真的虚拟环境：&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/cloud-native-era/007S8ZIlly1gfhd59dajrj30sg0ebgnv_hu1cd7f371a5f6b6e49cad8cf770d035fa_93334_5130d7ac679a585643106afa10fb7609.webp 400w,
               /blog/cloud-native-era/007S8ZIlly1gfhd59dajrj30sg0ebgnv_hu1cd7f371a5f6b6e49cad8cf770d035fa_93334_54e7487ffa3282f4a7ea623543c03bd1.webp 760w,
               /blog/cloud-native-era/007S8ZIlly1gfhd59dajrj30sg0ebgnv_hu1cd7f371a5f6b6e49cad8cf770d035fa_93334_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/cloud-native-era/007S8ZIlly1gfhd59dajrj30sg0ebgnv_hu1cd7f371a5f6b6e49cad8cf770d035fa_93334_5130d7ac679a585643106afa10fb7609.webp&#34;
               width=&#34;760&#34;
               height=&#34;382&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;将来，实时内容生成可能会催生新的、沉浸式的故事讲述方法。下一代的“选择你自己的冒险”可能是一个虚拟世界，实时适应你的选择。为了使这些虚拟世界货币化、个性化，自发性的广告可能会出现，类似于《少数派报告》中的生物识别广告。&lt;/p&gt;
&lt;p&gt;更远的未来，AI驱动、程序生成的世界可以为用户提供一个无尽的游乐场，那时距离《头号玩家》里的绿洲世界或者著名的网络世界-元界（Metaverse）已经不远。&lt;/p&gt;
&lt;p&gt;预计我们将在两三年内看到第一款云原生游戏上市，在谷歌、微软、亚马逊和其他许多公司的投资推动下，下一代云原生游戏将有潜力重塑我们所知道的游戏体验。&lt;/p&gt;
&lt;p&gt;在上述认知的推动下，A16Z、腾讯、淡马锡投资了免费沙盒MMO游戏Roblox的1.5亿美金的G轮，相应估值高达40亿美元，他们认为未来游戏将不再只是游戏，甚至将比电影和音乐加在一起的规模还大。游戏的发展也将推动技术革新，而Roblox作为世界上最大的社交平台和多人游戏平台之一，接下来将有望成为未来的Metaverse。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写在最后&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;至此，这篇接近4万字的《云原生时代》已接近尾声。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我们再来梳理下本文的核心观点：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;云原生、中台、微服务、CI/CD、Devops、SaaS背后的理念是一致的&lt;/li&gt;
&lt;li&gt;即更快速、更灵活、更轻量、更自动，从开发开始，不断实现企业的产品目标和业务目标&lt;/li&gt;
&lt;li&gt;类似理念涉及的维度包括开发、产品、运维、销售，从产品、服务到组织结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;如何判断云原生技术层的项目？&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是否拥有核心技术是关键&lt;/li&gt;
&lt;li&gt;单点产品的价值和延展性要足够强。参照Rancher、HashiCorp、Kong&lt;/li&gt;
&lt;li&gt;面向客户提供一整套产品化的解决方案具有更大价值&lt;/li&gt;
&lt;li&gt;在云原生体系里，开源项目比普通商业项目更占优势。开源项目更容易被其它产品支持和集成；云原生架构早期使用者以开发者为主，开源项目更容易快速建立口碑和影响力；在社区支持下，开源项目质量更容易得到保证&lt;/li&gt;
&lt;li&gt;尽量选择成熟和被市场验证的技术和产品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;国内的创业机会是否已经到来？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;国内已经出现了像PingCap、Kylin、SkyWalking、Dubbo、ServiceComb等优秀的开源项目，在云原生技术不断成熟和普及、国内开源文化和社区逐渐兴起、去IOE和自主可控的时代背景下，国内对标海外的创业机会将会不断涌现。不过由于国内企业IT水平参差不齐，像API集成、API管理等领域的创业时机尚早，所以选择合适的产品切入点和行业将成为成败的关键，另外团队对软件本质的理解、销售和客户服务能力也是相当重要的因素。&lt;/p&gt;
&lt;p&gt;最后，我真心希望未来3到5年中国新一代的基础软件企业能够高举国产化的大旗，灯火辉煌。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.anquanke.com/post/id/171987&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;绿盟科技解读2019创新沙盒&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.uedbox.com/post/56424/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;被Palo Alto 4.1亿美元收购的Twistlock是一家什么公司？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raincapital.vc/blog/2020/3/17/detection-engineering-for-cloud-native-security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DETECTION ENGINEERING FOR CLOUD-NATIVE SECURITY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/nulige/articles/10929182.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一文搞懂蓝绿发布、灰度发布和滚动发布&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/luoahong/p/12358346.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入剖析Kubernetes学习笔记：“控制器”模型（16）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sohu.com/a/211846555_617676&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;技术专栏 | 云原生应用之路&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/chenqionghe/p/11454248.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;极简Docker和Kubernetes发展史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/karamos/article/details/80124967&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker生态到底会不会重蹈Hadoop的覆辙&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/apanly/p/8784096.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;金丝雀发布、滚动发布、蓝绿发布到底有什么差别？关键点是什么？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.forbes.com/sites/janakirammsv/2020/03/04/15-most-interesting-cloud-native-trends-from-the-cncf-survey/#5f8d93dd34d5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;15 Most Interesting Cloud Native Trends From The CNCF Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_38987057/article/details/85263234&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10分钟看懂Docker和K8S&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/chenqionghe/p/11454248.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;极简Docker和Kubernetes发展史&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/yellowzf3/article/details/103046573&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“中台不就是微服务吗？有啥区别？”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/cf2SudS8x8F0v/article/details/82836707&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;火热的云原生到底是什么？一文了解云原生四要素！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/009d98e30b2a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大神告诉你如何理解微服务框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/4FJXNTHJMio6g75uSX0h?from=timeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Mesh 和 API Gateway 关系深度探讨&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/skabyy/p/11396571.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一文详解微服务架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/u013970991/article/details/53333921&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Martin Fowler关于微服务的原文翻译（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/8611&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务架构的理论基础 - 康威定律&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.codetd.com/en/article/7965165&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A text interpretation of the cloud native (rpm)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/_1Cx9nNRNqc_P-S91B5LWA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;走访了十几家美国企业服务公司，我们写下了这篇万字文章 | GGV投资笔记第一期&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/d411e8650f92&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从Uber微服务看最佳实践如何炼成？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sohu.com/a/144114294_465914&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mashape 和 RapidAPI 合并，组成全球最大的应用编程接口（API）集市！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://new.qq.com/omn/20200418/20200418A073KV00.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;放弃微服务，改用宏服务，Uber 这波什么操作？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1583992&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;腾讯大牛深入浅出详解云原生&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sohu.com/a/235470843_99984800&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【零壹视界】从Salesforce收购Mulesoft说起，白话讲讲企业数据交换 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/65089ec63e1e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EnjoyingSoft之Mule ESB开发教程第一篇：初识Mule ESB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/imyalost/p/6792724.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/qq_35368183/article/details/84558134&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;持续集成、持续交付、持续部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sohu.com/a/313149935_115128&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么你必须了解云原生？！ &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackify.com/cloud-native/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Cloud-Native? Is It Hype or The Future of Software Development?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本文转载自：蒋宇捷的企业服务投资洞察。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143417185&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生时代（一）云原生及CNCF基金会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143424111&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生时代（二）：DevOps与CI/CD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/143472291&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生时代（三）：微服务、API管理与集成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/144292368&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生时代（四）：容器和Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/144452103&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生时代（五）：Kubernetes与容器编排之战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/145871049&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云原生时代（六）：机会与思考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>利用 OAM 和 Dapr 的云原生应用的未来</title>
      <link>https://cloudnative.to/blog/the-future-of-cloud-native-applications-with-oam-and-dapr/</link>
      <pubDate>Sun, 26 Jan 2020 10:03:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/the-future-of-cloud-native-applications-with-oam-and-dapr/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://hugomsbarona.medium.com/the-future-of-cloud-native-applications-with-oam-and-dapr-ed5766c8d583&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Future of Cloud Native Applications With OAM and Dapr&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在2019年11月4日至8日于佛罗里达州奥兰多举办的&lt;a href=&#34;https://www.microsoft.com/en-us/ignite&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019年微软Ignite大会上&lt;/a&gt;，Azure首席技术官Mark Russinovich介绍了微软开发的两个创新和革命性的项目，旨在解决当今IT专业人士和开发人员在试图构建基于微服务的应用程序时的一系列现有问题。这场会议被命名为《基于开放应用模型（OAM）和分布式应用运行时（Dapr）的云原生应用的未来》。&lt;/p&gt;
&lt;h2 id=&#34;开放式应用模型oam&#34;&gt;开放式应用模型（OAM）&lt;/h2&gt;
&lt;p&gt;因此，其中一个项目与开放应用模型（OAM）有关。它代表了一个开放的标准，允许我们建立云原生应用程序，与平台无关，并遵循关注点分离的原则，通过将应用程序的定义与应用程序的部署和托管基础设施的细节分离，为我们提供一些好处。&lt;/p&gt;
&lt;p&gt;将应用程序的定义与操作细节分开，使应用程序开发人员能够专注于其应用程序的关键要素，并将其从部署地点和方式的操作细节中抽象出来。另外，关注点的分离允许平台架构师开发可重复使用的组件，而应用开发者则专注于将这些组件与他们的代码集成，以快速、轻松地构建可靠的应用。在所有这些方面，OAM在那些有不同角色的场景中特别有用，比如在下面的图片中，构建和管理应用程序，因为它允许你有一个关注点的分离，所以开发和管理你的应用程序的不同角色可以专注于他们任务的关键因素。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-应用程序开发和部署生命周期中的角色&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;应用程序开发和部署生命周期中的角色&#34; srcset=&#34;
               /blog/the-future-of-cloud-native-applications-with-oam-and-dapr/008i3skNly1gx6tisc22aj30vp0hoq5q_hu0d3de83f9f9eac719806e96f1d883145_113475_641573f7fcd730b3f845020843b0c572.webp 400w,
               /blog/the-future-of-cloud-native-applications-with-oam-and-dapr/008i3skNly1gx6tisc22aj30vp0hoq5q_hu0d3de83f9f9eac719806e96f1d883145_113475_651269881847fcb94ada262e6f322dea.webp 760w,
               /blog/the-future-of-cloud-native-applications-with-oam-and-dapr/008i3skNly1gx6tisc22aj30vp0hoq5q_hu0d3de83f9f9eac719806e96f1d883145_113475_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-future-of-cloud-native-applications-with-oam-and-dapr/008i3skNly1gx6tisc22aj30vp0hoq5q_hu0d3de83f9f9eac719806e96f1d883145_113475_641573f7fcd730b3f845020843b0c572.webp&#34;
               width=&#34;760&#34;
               height=&#34;424&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      应用程序开发和部署生命周期中的角色
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;OAM引入了几个概念，组成了你的应用程序。其中一个概念是代表你的应用程序的Component（组件）。这些组件可能是服务，如SQL数据库或带有相应负载均衡器的.NET WebAPI。开发人员可以创建代码，将其打包成一个组件，然后创建清单，描述不同组件和其他应用程序之间的关系。有了这个，你就把组件的实现和这些组件如何在一个完整的分布式应用架构中结合起来的描述分开了。&lt;/p&gt;
&lt;p&gt;为了将这些组件转化为具体的应用程序，应用程序运维使用这些组件的配置来形成一个可以被部署的应用程序的具体实例。配置资源是使应用程序运维能够从开发人员提供的组件中运行一个真正的应用程序。&lt;/p&gt;
&lt;p&gt;最后一个概念是Trait（特征），而你使用它们的集合来描述你的应用环境的特征和它的能力，如自动扩展和入口等等。这些特征允许你根据要求和背景，将你的应用程序部署到具有不同特征的不同环境。然后，这些特征可以由基础设施运维进行配置，以满足其环境的独特操作要求。&lt;/p&gt;
&lt;p&gt;最后但同样重要的是，该规范在设计上是可扩展的。同样，OAM使平台提供者能够通过Trait（特征）系统公开其平台的独特特征，这种方式使应用开发者能够在支持必要特征的地方建立跨平台的应用。&lt;/p&gt;
&lt;h2 id=&#34;分布式应用程序运行时dapr&#34;&gt;分布式应用程序运行时（Dapr）&lt;/h2&gt;
&lt;p&gt;Dapr是一个可移植的、事件驱动的运行时，它使开发人员能够轻松地建立弹性的、无状态和有状态的微服务应用程序，并在云和边缘上运行，并拥抱语言和开发人员框架的多样性。它遵循&lt;strong&gt;Sidecar架构&lt;/strong&gt;，所以它使用一个连接到你的每个组件的Sidecar节点，所以它可以扩展和增强你的应用程序的功能，如服务发现、负载均衡、流量管理等。&lt;/p&gt;
&lt;p&gt;使用这种编程模型，开发人员能够创建微服务应用程序，而不需要携带那么多在构建分布式应用程序过程中引入复杂性的因素，如弹性、可扩展性、服务身份和发现、负载均衡、状态管理等等。Dapr将这些复杂的因素从开发人员那里抽象出来，这样他们就可以专注于他们正在编写的代码。&lt;/p&gt;
&lt;p&gt;Dapr的另一个重要方面是与托管我们应用程序的平台有关。Dapr使我们能够在云端、企业内部、甚至是边缘的多种环境中运行我们的应用程序，包括任何可用于托管应用程序的Kubernetes集群。&lt;/p&gt;
&lt;p&gt;最后，同样重要的是，Dapr允许你利用你最喜欢的编程语言来构建你的分布式应用，并克服你在现今的一些服务中可能面临的编程语言和版本的限制，以构建基于微服务的应用。&lt;/p&gt;
&lt;p&gt;下面的图片提供了一个使用Dapr的微服务应用架构的概述。基本上，你使用你喜欢的编程语言或框架，如Java、Node.js、Python、.NET Core等，构建构成你的应用程序的服务，然后你的服务使用其可用的标准API，并使用HTTP或gRPC协议与Dapr通信。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-使用-dapr-的微服务应用架构&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;使用 Dapr 的微服务应用架构&#34; srcset=&#34;
               /blog/the-future-of-cloud-native-applications-with-oam-and-dapr/008i3skNly1gx6tov7gp1j312w0ie40c_hu9d3847e755d1821c64e7f7bd21768390_78008_f90ba2282b6b06d9c4d479ded35cb01e.webp 400w,
               /blog/the-future-of-cloud-native-applications-with-oam-and-dapr/008i3skNly1gx6tov7gp1j312w0ie40c_hu9d3847e755d1821c64e7f7bd21768390_78008_dcdc56b4ec42f1889bde0bd488189a29.webp 760w,
               /blog/the-future-of-cloud-native-applications-with-oam-and-dapr/008i3skNly1gx6tov7gp1j312w0ie40c_hu9d3847e755d1821c64e7f7bd21768390_78008_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/the-future-of-cloud-native-applications-with-oam-and-dapr/008i3skNly1gx6tov7gp1j312w0ie40c_hu9d3847e755d1821c64e7f7bd21768390_78008_f90ba2282b6b06d9c4d479ded35cb01e.webp&#34;
               width=&#34;760&#34;
               height=&#34;359&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      使用 Dapr 的微服务应用架构
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;因此，我们有OAM，它代表了一种规范，允许你定义和建立跨平台的应用程序，在云和边缘上运行，为你提供关注点的分离，让你的团队专注于他们任务和责任的关键要素。&lt;/p&gt;
&lt;p&gt;然后，我们把Dapr作为一个运行时，通过提供关注点的分离和促进一些影响构建这种应用的复杂性的因素，降低了构建基于微服务的分布式应用的复杂性。此外，Dapr允许应用程序在 &amp;ldquo;云和边缘 &amp;ldquo;计算基础设施之间进行移植，并克服目前开发人员在构建此类应用程序时面临的移植问题。&lt;/p&gt;
&lt;p&gt;如果你想获得与这些项目有关的更多细节，请看以下资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-au/resources/videos/ignite-2019-mark-russinovich-presents-the-future-of-cloud-native-applications-with-oam-and-dapr/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mark Russinovich介绍OAM和Dapr的云原生应用的未来&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开放应用模式（OAM）官方网站 - &lt;a href=&#34;https://oam.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://oam.dev/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分布式应用程序运行时（Dapr）官方网站 - &lt;a href=&#34;https://dapr.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dapr.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
