<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代理 | 云原生社区（中国）</title>
    <link>https://cloudnative.to/tag/%E4%BB%A3%E7%90%86/</link>
      <atom:link href="https://cloudnative.to/tag/%E4%BB%A3%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <description>代理</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 04 Sep 2024 10:56:55 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>代理</title>
      <link>https://cloudnative.to/tag/%E4%BB%A3%E7%90%86/</link>
    </image>
    
    <item>
      <title>Pulse 观测代理：为大规模度量基础设施打造的观测解决方案</title>
      <link>https://cloudnative.to/blog/announcing-pulse-proxy/</link>
      <pubDate>Wed, 04 Sep 2024 10:56:55 +0800</pubDate>
      <guid>https://cloudnative.to/blog/announcing-pulse-proxy/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;编者按：Envoy 作者 Matt Klein 的创业公司 Bitdrift 新推出了可观测性代理开源项目 &lt;a href=&#34;https://github.com/bitdriftlabs/pulse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pulse&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;继&lt;a href=&#34;https://blog.bitdrift.io/post/announcing-source-available-sdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布 Capture SDK 源代码可用&lt;/a&gt;之后，我们非常高兴地再次宣布&lt;a href=&#34;https://github.com/bitdriftlabs/pulse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pulse&lt;/a&gt;的可用性，这是一个为大规模度量基础设施建造的观测代理。请阅读以下内容，了解 Pulse 的概述、其创建的简要历史，以及它如何适应更广泛的服务器端观测生态系统。&lt;/p&gt;
&lt;p&gt;Pulse 是一个为大规模度量基础设施构建的观测代理，从包括&lt;a href=&#34;https://github.com/statsite/statsite&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statsite&lt;/a&gt;和&lt;a href=&#34;https://github.com/lyft/statsrelay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statsrelay&lt;/a&gt;在内的先前项目中汲取思想，同时提供现代 API 驱动的配置和类似于&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;/a&gt;所提供的无损配置重载。&lt;/p&gt;
&lt;p&gt;度量指标已经过时了吗？虽然行业趋势确实是向结构化日志转变，作为所有数据的首选来源，这一点在&lt;a href=&#34;https://bitdrift.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Capture&lt;/a&gt;的移动观测产品中也有体现，但传统的度量指标依然是许多大型组织观测实践的核心。&lt;/p&gt;
&lt;p&gt;尽管&lt;a href=&#34;https://github.com/open-telemetry/opentelemetry-collector&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OTel Collector&lt;/a&gt;、&lt;a href=&#34;https://github.com/fluent/fluent-bit]&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fluent Bit&lt;/a&gt;和&lt;a href=&#34;https://github.com/vectordotdev/vector&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vector&lt;/a&gt;都是优秀的项目，提供一定程度的度量支持，但在处理大规模度量基础设施时尚存在不足，主要体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聚合：例如，去掉 pod 标签以衍生出服务级别的聚合度量。对 Prometheus 度量的聚合尤其棘手，因为跨多个来源聚合绝对计数器（与只报告自上次报告以来的增量计数器相比，单调增加的计数器）并非易事。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集群化：主要用于更复杂的聚合方法，如在聚合层进行一致性哈希和路由。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动阻塞/省略：基于控制平面驱动配置的自动阻塞和度量点省略是许多组织控制度量增长和成本的重要策略。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该项目填补了这些空白，并提供了一系列与脚本编写、基数发现和限制、网络可靠性等相关的强大工具。&lt;/p&gt;
&lt;p&gt;Pulse 也已针对性能进行了大量优化，并已经过严格测试，准备好应对苛刻的工作负载。今天，它已在生产环境中部署，在处理每秒数亿个度量的集群中运行。&lt;/p&gt;
&lt;h2 id=&#34;pulse-的简史&#34;&gt;Pulse 的简史&lt;/h2&gt;
&lt;p&gt;此时，你可能会问自己：“bitdrift 为什么会发布一个服务器端度量代理？我以为 bitdrift 是一家移动观测公司？”Pulse 的由来简史如下。&lt;/p&gt;
&lt;p&gt;正如我们&lt;a href=&#34;https://blog.bitdrift.io/post/honey-i-shrunk-the-telemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在公开发布时所描述&lt;/a&gt;，bitdrift 是从 Lyft 剥离出来的。在剥离之前，bitdrift 团队负责 Lyft 内两个不同的技术部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现称为 Capture 的移动观测产品。&lt;/li&gt;
&lt;li&gt;一组管理 Lyft 大规模度量基础设施的技术，专注于整体性能、可靠性和成本控制。这组技术统称为“MME”（度量管理引擎）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MME 背后的思想将在下文中进一步描述，但 Pulse 代理是所有 Lyft 度量在 Kubernetes pod、聚合层，最终到 TSDB 传输过程中的数据平面。bitdrift 仍然支持在 Lyft 运行 Pulse 及更广泛的 MME 控制平面。&lt;/p&gt;
&lt;p&gt;在完成使 Capture SDK 源代码可用的工作后，我们认为现在是发布 Pulse 代码的好时机，因为我们相信这一领域存在显著的行业功能缺口。&lt;/p&gt;
&lt;h2 id=&#34;驱动控制平面的度量方法&#34;&gt;驱动控制平面的度量方法&lt;/h2&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-架构图&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;架构图&#34; srcset=&#34;
               /blog/announcing-pulse-proxy/f1_hu0dc649bda6000362f7335c075f3a6e02_58040_3c640f319f8e9dc6f37af531a84a60e5.webp 400w,
               /blog/announcing-pulse-proxy/f1_hu0dc649bda6000362f7335c075f3a6e02_58040_a43d133c36a4cbf9371baa0f198a1c37.webp 760w,
               /blog/announcing-pulse-proxy/f1_hu0dc649bda6000362f7335c075f3a6e02_58040_1200x1200_fit_q75_h2_lanczos_2.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/announcing-pulse-proxy/f1_hu0dc649bda6000362f7335c075f3a6e02_58040_3c640f319f8e9dc6f37af531a84a60e5.webp&#34;
               width=&#34;620&#34;
               height=&#34;498&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      架构图
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;作为一个例子，Lyft 度量基础设施的简化版本如上图所示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个基于 Pulse 代理的 daemonset 从应用程序接收度量，这一层执行初步的转换、批处理、基数限制等操作，然后将度量发送到聚合层。&lt;/li&gt;
&lt;li&gt;聚合层接收所有度量，并使用一致性哈希确保度量最终被正确路由到处理聚合的节点。一旦在正确的节点上，会发生几件不同的事情：
&lt;ul&gt;
&lt;li&gt;高级聚合发生（例如，从 pod 度量创建服务级度量）&lt;/li&gt;
&lt;li&gt;观测到的度量样本被发送到控制平面&lt;/li&gt;
&lt;li&gt;控制平面发送明确阻塞的度量列表（详见下文）&lt;/li&gt;
&lt;li&gt;在最终发送数据到 TSDB 的过程中，各种缓冲和重试机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读取代理（未包括在 Pulse 中）位于所有度量用户（仪表盘和临时查询）和度量查询之间，并拦截所有度量查询。它将查询发送到控制平面，以便控制平面了解哪些度量实际上被读取，无论是手动还是通过警告查询。&lt;/li&gt;
&lt;li&gt;控制平面（也未包括在 Pulse 中，但通过明确的 APIs 进行通信）获取来自聚合层的写入端样本，并将其与读取代理数据合并，以确定哪些度量实际被使用。然后，控制平面根据政策动态创建基于自动阻塞未读取但已写入的度量的阻止列表，这在大规模度量基础设施中通常是所有度量的绝大多数。阻止列表被提供给 Pulse 代理，然后执行内联阻塞和省略度量流，从而显著减少发送到 TSDB 的总点数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pulse 允许其所有配置方面都可以动态更新，这与 Envoy 内的可能性类似。这提供了在最终如何使用它方面的大量灵活性。&lt;/p&gt;
&lt;h2 id=&#34;pulse-将如何帮助您&#34;&gt;Pulse 将如何帮助您？&lt;/h2&gt;
&lt;p&gt;通过 Pulse，您现在可以通过复杂的聚合和通过明确规定的 APIs 实时控制阻塞规则和省略实现&lt;em&gt;非常&lt;/em&gt;大的度量节省。Pulse 源代码以这样的方式授权：如果您是最终用户，我们的意图是代码可用并可修改任何目的。拿去构建一些有趣的东西吧！&lt;/p&gt;
&lt;p&gt;对于商业支持或讨论 bitdrift 提供的自动度量发现和阻塞处理的托管控制平面的选项，请通过&lt;a href=&#34;mailto:info@bitdrift.io&#34;&gt;info@bitdrift.io&lt;/a&gt;与我们联系讨论。&lt;/p&gt;
&lt;p&gt;我们非常期待您通过&lt;a href=&#34;https://github.com/bitdriftlabs/pulse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub issues&lt;/a&gt;或在&lt;a href=&#34;https://communityinviter.com/apps/bitdriftpublic/bitdrifters&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bitdrift slack&lt;/a&gt;的#pulse 与我们分享问题和使用故事。祝您度量节省愉快！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>服务网格峰会回顾：服务网格的发展趋势</title>
      <link>https://cloudnative.to/blog/retrospect-service-mesh-summit/</link>
      <pubDate>Sun, 09 Oct 2022 09:00:42 +0800</pubDate>
      <guid>https://cloudnative.to/blog/retrospect-service-mesh-summit/</guid>
      <description>&lt;p&gt;2022 年 9 月 24 日，由云原生社区主办的第一届 Service Mesh Summit 在上海成功举办，这次峰会汇聚了国内几大服务网格落地企业和提供商，他们带来服务网格在实践以及商业化的经验以及对未来的展望，也吸引了大量线上线下服务网格技术的关注者。&lt;/p&gt;
&lt;p&gt;服务网格问世五年多来，业界对服务网格的应用进展以及发展趋势如何，这篇文章为大家来了本地大会内容的盘点，希望能帮助大家把握服务网格发展方向。&lt;/p&gt;
&lt;p&gt;一句话概括：市场趋于理性，设计更加务实，回归价值，产品百花齐放。&lt;/p&gt;
&lt;p&gt;这里总结了服务网格演进的几大方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展性&lt;/li&gt;
&lt;li&gt;连通性&lt;/li&gt;
&lt;li&gt;性能与资源占用&lt;/li&gt;
&lt;li&gt;易用性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从技术选型上来看，有基于流行的 Istio+Envoy 的定制，也有基于其他数据面代理和控制面的新产品出现。&lt;/p&gt;
&lt;h2 id=&#34;演进&#34;&gt;演进&lt;/h2&gt;
&lt;h3 id=&#34;扩展性&#34;&gt;扩展性&lt;/h3&gt;
&lt;p&gt;扩展性几乎是所有分享中都会提及的内容，相信也是已经采用的、或者观望中的用户的首要关注点。作为服务于业务的基础设施一部分的服务网格来说，不管是何种技术实现，其核心还是对业务的支撑。而业务和现有架构的多样性为服务网格的采用造成诸多掣肘，导致了服务网格需求的复杂性。作为服务网格明星的 Istio，其社区功能实际上就很难满足用户的实际需求。&lt;/p&gt;
&lt;p&gt;应对复杂性的一大利器就是扩展性，在社区功能的基础之上，通过扩展来增加业务多样性需求的支持。业界对服务网格扩展性的支持主要在两个方向上：基于 Istio+Envoy 体系的扩展；选择其他数据面代理和控制平面。&lt;/p&gt;
&lt;h4 id=&#34;控制面&#34;&gt;控制面&lt;/h4&gt;
&lt;p&gt;控制面的扩展，在 Istio 体系下多是通过多 configsource + MCP-over-xDS 的方式进行扩展。提供新的 CRD 配合数据面的扩展，提供新的能力。比如全局智能限流、熔断等等。&lt;/p&gt;
&lt;p&gt;对外支持多种注册中心，Istio 系统下如 &lt;a href=&#34;https://github.com/aeraki-mesh/aeraki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aeraki Mesh&lt;/a&gt; 通过进程外的方式将其他注册中心的服务信息同步到 Istio，支持对 Nacos、Zookeeper、Etcd、Consul、Polaris 等注册中心。Flomesh 的 &lt;a href=&#34;https://github.com/flomesh-io/osm-edge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;osm-edge&lt;/a&gt; 提供了 Services/Endpoints &lt;code&gt;Provider&lt;/code&gt; 接口来接入其他注册中心。&lt;/p&gt;
&lt;h4 id=&#34;数据面&#34;&gt;数据面&lt;/h4&gt;
&lt;p&gt;数据面的扩展，我们首先看下 Istio + Envoy 体系下的扩展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WasmPlugin API：Istio 提供的一种通过 Wasm（WebAssembly）过滤器来扩展代理的机制。Wasm 过滤器是 Envoy 的 &lt;strong&gt;实验性&lt;/strong&gt; 功能，利用 Wasm 的特性允许开发人员可以使用熟悉的编程语言来编写过滤器的逻辑，编译成 Wasm 字节码由 runtime 来执行。&lt;/li&gt;
&lt;li&gt;EnvoyFilter API：Istio 提供的一种对生成的 Envoy 配置进行定制化的机制。比如在 &lt;a href=&#34;https://github.com/aeraki-mesh/aeraki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Aeraki Mesh&lt;/a&gt; 通过 EnvoyFilter API 完成 Dubbo、Thrift 等 7 层协议的支持（结合定制的 Envoy 的原生过滤器）。还有衍生出的 &lt;a href=&#34;https://help.aliyun.com/document_detail/383257.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lua + EnvoyFilter 集成&lt;/a&gt;，将 filter chain 中使用 Lua 过滤器。&lt;/li&gt;
&lt;li&gt;EnvoyFilter API 的二次封装 CRD：EnvoyFilter API 虽然强大，但非常复杂并且缺少必要的校验环节，有着很强的破坏性。业界提出了 EnvoyFilter API 的二次封装方案，通过新的 CRD 的来屏蔽 EnvoyFilter API 的复杂性，并降低配置出错导致 sidecar 代理崩溃的风险。如阿里云 ASM 的 Voyage、网易数帆的 &lt;a href=&#34;https://github.com/slime-io/slime/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Slime&lt;/a&gt; 等。&lt;/li&gt;
&lt;li&gt;Envoy 原生过滤器：在 Envoy 中使用 Lua 的另一种实现，以 C++ 的方式实现 Lua 插件来执行 Lua 脚本，俗称 Envoy 的 OpenResty。典型的实现是网易数帆的 &lt;a href=&#34;https://github.com/hango-io/rider&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rider&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;进程外的扩展：这种方案在 Envoy 进程/容器外运行一个独立的进程/容器来实现非侵入式的扩展，二者之间通过共享内存或者 UDS（Unix Domain Socket）等方式进行数据交互。该进程/容器通过 xDS 从 MCP-over-xDS 组件获取配置的更新。虽然说是无侵入的 Envoy 扩展，实际上 Envoy 中还会引入新的扩展过滤器来与另一个进程进行交互。实现有阿里云 ASM 的 Voyage + Envoy Assistant，蚂蚁集团的 MOSN on Envoy 方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了基于 Istio+Envoy 的优化定义以外，还有厂商选择了其他的代理作为数据面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flomesh 的服务网格 &lt;a href=&#34;https://github.com/flomesh-io/osm-edge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;osm-edge&lt;/a&gt; 使用其自研的可编程代理 &lt;a href=&#34;https://github.com/flomesh-io/pipy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pipy&lt;/a&gt; 作为数据面&lt;/li&gt;
&lt;li&gt;API7 的服务网格 &lt;a href=&#34;https://github.com/api7/amesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amesh&lt;/a&gt; 使用高性能云原生网关 &lt;a href=&#34;https://github.com/apache/apisix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache APISIX&lt;/a&gt; 作为数据面&lt;/li&gt;
&lt;li&gt;蚂蚁集团的服务网格使用云原生网络代理平台 &lt;a href=&#34;https://github.com/mosn/mosn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MSON&lt;/a&gt; 作为数据面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择自研或者开源的数据面的优势在于借助代理自身的可扩展特性来满足用户的多样性需求。&lt;/p&gt;
&lt;h3 id=&#34;连通性&#34;&gt;连通性&lt;/h3&gt;
&lt;p&gt;业务、管理、架构的复杂性带来的另一个问题就是连通性问题。异地多机房可用区的容灾、单集群容量限制、敏捷和成本考虑的混合云、多 Kubernetes 版本共存、多租户多主体等导致企业内部存在几个、几十甚至上百的集群，这些彼此独立的集群形成了若干的孤岛，除了带来了管理难度的提升外，首当其冲的便是多集群之间的流量管理。&lt;/p&gt;
&lt;p&gt;解决连通性的问题，也成为服务网格能否在企业内部落地的关键所在。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flomesh 的服务网格通过集成开源的 &lt;a href=&#34;https://github.com/flomesh-io/fsm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fsm&lt;/a&gt; 组件实现跨集群的服务发现，进而完成跨集群的流量管理&lt;/li&gt;
&lt;li&gt;Tetrate 企业版中的 &lt;a href=&#34;https://www.tetrate.io/tetrate-service-bridge/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tetrate Service Bridge&lt;/a&gt;（简称 TSB）实现多个 Istio 集群（多 Istiod）的管理，同时提供了对虚拟机的支持&lt;/li&gt;
&lt;li&gt;蚂蚁集群的 MOSN 通过引入 SOFA Gateway，来解决网络隔离的多实体间的服务 RPC 调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;性能与资源占用&#34;&gt;性能与资源占用&lt;/h3&gt;
&lt;p&gt;服务网格天生特殊“体质”，在引入 sidecar 代理之后原本的单次服务调用基础上又增加了两跳带来了额外的延迟，当请求链路较长时这种延迟则更加严重，尤其是延迟敏感的业务。虽然 sidecar 代理的已经足够快了，但是仍未满足业务对延迟永不满足的追求。由于 sidecar 的引入，额外的资源占用不可避免，尤其是大规模部署的云端以及资源受限的边缘场景。处于成本控制和环境限制的考虑，数据面的资源占用也成为选择服务网格的重要指标。&lt;/p&gt;
&lt;p&gt;在 Envoy 体系下，我们的用户和厂商通过各种手段来提升代理的性能，降低资源占用。&lt;/p&gt;
&lt;p&gt;大量 TLS 连接对网关/sidecar 带来性能的损耗，Intel 从平台、指令集层面对 TLS 性能进行优化，通过 Crypto Acceleration 技术包中的 Multi-Buffer（多缓冲区）和 AVX512 指令集对 Envoy TLS 性能加速，带来了 70-80% 的提升。相比优化前，单机可处理更多的 TLS 连接。&lt;/p&gt;
&lt;p&gt;字节跳动则是在 Envoy 的设计和源码上下手，对模块结构、基础库进行优化：移除虚函数抽象层、Stats（减少 metrics 输出），将使用最多的 HTTP/1 协议的处理从抽象层中移出，替换 HTTP 协议解析器，引入零拷贝缓冲器；优化编译。同时，跨节点通信网络优化的 RDMA 和 DPDK 也进入了实验阶段。&lt;/p&gt;
&lt;p&gt;蚂蚁集团的数据平面 MOSN 在提供优秀的服务治理能力同时，由于使用 Go 开发处理 7 层协议时的性能不够理想。MOSN on Envoy 方案的推出，将流量处理和治理决策分离，兼顾了 MOSN 的功能和 Envoy 处理 7 层流量的性能。&lt;/p&gt;
&lt;p&gt;除了在 Envoy 上的持续优化以外，更多厂商选择其他的数据面来解决 Envoy 的功能膨胀、设计过度抽象等问题。如 Flomesh 的 Pipy、Apache APISIX 成为数据面的新选择，在提供优于 Envoy 性能的同时，有着更低的资源占用。&lt;/p&gt;
&lt;h3 id=&#34;易用性&#34;&gt;易用性&lt;/h3&gt;
&lt;p&gt;易用性是技术选型中的另一考量，易用性关乎这用户学习、使用和维护服务网格产品的成本。服务网格通过将治理功能与应用解耦的方式将治理功能下沉到数据平面代理，Envoy、Pipy、APISIX、MOSN 均是功能强大的网络代理，不管是提供大量开箱即用的功能，还是通过可扩展性灵活管理代理的功能。控制平面经过抽象，隔离了代理的复杂性以 CRD/API 的方式对外提供治理能力，但依然免不了有着不低的学习门槛和维护成本。&lt;/p&gt;
&lt;p&gt;在提升易用性方面，Istio 体系下通过提供新的 CRD 来对原有 CRD 进行封装，通过抽象业务语义简化技术复杂性。比如网易数帆服务网格团队的使用 CRD &lt;code&gt;SmartLimiter&lt;/code&gt; 提供智能限流，CRD &lt;code&gt;EnvoyPlugin&lt;/code&gt; 来封装 &lt;code&gt;EnvoyFilter&lt;/code&gt;；阿里云的 &lt;code&gt;ASMLocalRateLimiter&lt;/code&gt; 简化限流配置。&lt;/p&gt;
&lt;p&gt;另一个方向就是标准化，Flomesh 的服务网格使用 &lt;a href=&#34;https://github.com/openservicemesh/osm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OSM（Open Service Mesh）&lt;/a&gt; 作为控制平面，实现了 &lt;a href=&#34;https://github.com/servicemeshinterface/smi-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SMI（Service Mesh Interface）&lt;/a&gt; 规范。SMI 简单易用，提供了 Kubernetes 服务网格的标准接口、常见服务网格场景的基本功能集、支持服务网格新功能的灵活性、提升互操作性，以及服务网格技术生态的创新空间。SMI 的实现除了 OSM 以外，还有 Linkerd、Traefik Mesh、Meshery 等。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;看了上面这些之后，相信你会发现市场在关注服务网格时更加得理性，而服务网格本身也更加“务实”，以实现快速平稳落地为出发点，解决落地过程中的各种问题，比如性能、资源占用、跨集群、多协议支持、功能扩展等等。解决这些问题，或者坚持在 Istio/Envoy 体系上继续优化；或者转投其他的实现，更换数据面代理，如 MOSN、Pipy、APISIX、Linkerd Proxy；再或者引入其他的技术来解决，如 eBPF、WASM、RDMA、DPDK 等等。&lt;/p&gt;
&lt;p&gt;“好的架构不是设计出来的，而是演进出来的”，相信这话对服务网格一样受用。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
