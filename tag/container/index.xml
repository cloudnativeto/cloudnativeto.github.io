<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Container | 云原生社区（中国）</title>
    <link>https://cloudnative.to/tag/container/</link>
      <atom:link href="https://cloudnative.to/tag/container/index.xml" rel="self" type="application/rss+xml" />
    <description>Container</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 28 Aug 2019 10:42:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>Container</title>
      <link>https://cloudnative.to/tag/container/</link>
    </image>
    
    <item>
      <title>容器化到容器编排之旅</title>
      <link>https://cloudnative.to/blog/journey-from-containerization-to-orchestration-and-beyond/</link>
      <pubDate>Wed, 28 Aug 2019 10:42:00 +0800</pubDate>
      <guid>https://cloudnative.to/blog/journey-from-containerization-to-orchestration-and-beyond/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编者按&#34;&gt;编者按&lt;/h2&gt;
&lt;p&gt;本文是一篇介绍容器运行时和管理工具的文章。文中对主要的容器管理项目和技术做了较为详细的介绍和横向对比，并给出了项目的代码库供读者参考。&lt;/p&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;容器带来了更高级的服务端架构和更复杂的部署技术。目前已经有一堆类似标准的规范（&lt;a href=&#34;https://github.com/opencontainers/runtime-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://github.com/opencontainers/image-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://github.com/containernetworking/cni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4&lt;/a&gt;, ……）描述了容器领域的方方面面。当然，它的底层是 Linux 的基本单元，如 namespace 和 cgroups。容器化软件已经变得非常的庞大，如果没有它自己关注的分离层，几乎是不可能实现的。在这个持续努力的过程中，我尝试引导自己从最底层到最高层尽可能多的实践（代码、安装、配置、集成等等），当然还有尽可能多的获得乐趣。本篇内容会随着时间的推移而改变，并反映出我对这一主题的理解。&lt;/p&gt;
&lt;h2 id=&#34;容器运行时&#34;&gt;容器运行时&lt;/h2&gt;
&lt;p&gt;我想从最底层的非内核原语说起——&lt;strong&gt;容器运行时&lt;/strong&gt;。在容器服务里，运行时这个词是有歧义的。每个项目、公司或社区对术语&lt;strong&gt;容器运行时&lt;/strong&gt;都有自己的、通常是基于上下文的特定理解。大多数情况下，运行时的特征是由一组职责定义的，从最基本的职责（创建 namespace、启动&lt;em&gt;init&lt;/em&gt;进程）到复杂的容器管理，包括（但不限于）镜像操作。&lt;a href=&#34;https://www.ianlewis.org/en/container-runtimes-part-1-introduction-container-r&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇文章&lt;/a&gt;对运行时有一个很好的概述。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://iximiuz.com/journey-from-containerization-to-orchestration-and-beyond/runtime-levels.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;本节专门讨论低阶容器运行时。在&lt;a href=&#34;https://github.com/opencontainers/runtime-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OCI 运行时规范&lt;/a&gt;中，组成&lt;a href=&#34;https://www.opencontainers.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open Container Initiative&lt;/a&gt;的一些重要参与者对底层运行时进行了标准化。长话短说，低阶容器运行时是一个软件，作为一个包含 rootfs 和配置的目录输入，来描述容器参数（如资源限制、挂载点、流程开始等），并作为运行时启动一个独立进程，即容器。&lt;/p&gt;
&lt;p&gt;到 2019 年，使用最广泛的容器运行时是&lt;a href=&#34;https://github.com/opencontainers/runc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;runc&lt;/a&gt;。这个项目最初是 Docker 的一部分（因此它是用 Go 编写的），但最终被提取并转换为一个独立的 CLI 工具。很难高估这个组件的重要性——基本上 runc 是 OCI 运行时规范的一个参考实现。在我们的实践中将大量使用 runc，下面是&lt;a href=&#34;https://iximiuz.com/en/posts/implementing-container-runtime-shim/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一篇介绍性文章&lt;/a&gt;（编者注：页面暂无内容）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://iximiuz.com/journey-from-containerization-to-orchestration-and-beyond/runc.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;一个更值得注意的 OCI 运行时实现是&lt;a href=&#34;https://github.com/containers/crun&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;crun&lt;/a&gt;。它用 C 语言编写，既可以作为可执行文件，也可以作为库使用。&lt;/p&gt;
&lt;h2 id=&#34;容器管理&#34;&gt;容器管理&lt;/h2&gt;
&lt;p&gt;在命令行中可以使用 runc 启动任意数量的容器。但是如果我们需要让这个过程自动化呢？假设我们需要启动数十个容器来跟踪它们的状态，其中一些在失败时需要重启，在终止时需要释放资源，必须从注册中心提取镜像，需要配置容器间网络等等。这是一个稍微高级的任务，并且是“容器管理器”的职责。老实说，我不知道这个词是否常用，但我发现用它来描述很合适。我将以下项目归类为“容器管理器”：&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#containerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd&lt;/a&gt;， &lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#cri-o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cri-o&lt;/a&gt;， &lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#dockerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dockerd&lt;/a&gt; 和 &lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#podman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;podman&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;containerd&#34;&gt;containerd&lt;/h3&gt;
&lt;p&gt;与 runc 一样，我们可以再次看到 Docker 的遗产——&lt;a href=&#34;https://github.com/containerd/containerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd&lt;/a&gt;曾经是 Docker 项目的一部分，现在它是一个独立的软件，自称为容器运行时。但显然，它与运行时 runc 不是同一种类型的运行时。不仅它们的职责不同，其组织形式也不同。runc 只是一个命令行工具，containerd 是一个长活的守护进程。一个 runc 实例不能比底层容器进程活得更久。通常，它在&lt;code&gt;create&lt;/code&gt;调用时启动，然后在&lt;code&gt;start&lt;/code&gt;时从容器的 rootfs 中&lt;a href=&#34;https://linux.die.net/man/3/exec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt;特定文件。另一方面，containerd 可以运行的比成千上万个容器更长久。它更像是一个服务器，侦听传入的请求来启动、停止或报告容器的状态。在幕后，containerd 使用 runc。它不仅仅是一个容器生命周期管理器，还负责镜像管理（从注册表中拉取和提交镜像，本地存储镜像等等），跨容器联网管理和其他一些功能。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://iximiuz.com/journey-from-containerization-to-orchestration-and-beyond/containerd.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;cri-o&#34;&gt;cri-o&lt;/h3&gt;
&lt;p&gt;另一个容器管理器是&lt;a href=&#34;https://github.com/cri-o/cri-o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cri-o&lt;/a&gt;。containerd 是 Docker 重构后的结果，但 cri-o 却源于 Kubernetes 领域。在过去，Kubernetes 使用 Docker 管理容器。然而，随着&lt;a href=&#34;https://github.com/rkt/rkt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rkt&lt;/a&gt;的崛起，一些人增加了在 Kubernetes 中可互换容器运行时的支持，允许 Docker 和/或 rkt 完成容器管理。这种变化导致 Kubernetes 中有大量的条件判断，没有人喜欢代码中有太多的“if”。因此，&lt;a href=&#34;https://kubernetes.io/blog/2016/12/container-runtime-interface-cri-in-kubernetes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器运行时接口（CRI）&lt;/a&gt;被引入到 Kubernetes 中，这使得任何兼容 CRI 的高阶运行时（例如容器管理器）都可以在 Kubernetes 中使用，而无需任何代码的更改。cri-o 是 RedHat 实现的兼容 CRI 的运行时，与 containerd 一样，它也是一个守护进程，通过开放一个 gRPC 服务接口来创建、启动、停止（以及许多其他操作）容器。在底层，cri-o 可以使用任何符合 OCI 标准的低阶运行时和容器工作，默认的运行时仍然是 runc。cri-o 的主要目标是作为 Kubernetes 的容器运行时，版本控制也与 K8S 一致，项目的范围界定的很好，其代码库也比期望的更小（截止 2019 年 7 月大约是 20 个 CLOC，近似于 containerd 的 5 倍）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://iximiuz.com/journey-from-containerization-to-orchestration-and-beyond/cri-o.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;cri-o 架构 (图像来自 cri-o.io)&lt;/p&gt;
&lt;p&gt;规范的好处是所有符合规范的技术都可以互换使用。一旦 CRI 被引入，一个 containerd 的插件就可以在它的功能之上实现 CRI 的 gRPC 服务。这个想法是可行的，所以后来 containerd 获得了原生的 CRI 支持。因此，Kubernetes 可以同时使用 cri-o 和 containerd 作为运行时。&lt;/p&gt;
&lt;h3 id=&#34;dockerd&#34;&gt;dockerd&lt;/h3&gt;
&lt;p&gt;还有一个守护进程是&lt;a href=&#34;https://github.com/moby/moby/tree/master/cmd/dockerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dockerd&lt;/a&gt;，它是个多面手。一方面，它为&lt;a href=&#34;https://github.com/docker/cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker 命令行&lt;/a&gt; 开放了一个 API，为我们提供了所有这些常用的 Docker 命令（&lt;code&gt;Docker pull&lt;/code&gt;、&lt;code&gt;Docker push&lt;/code&gt;、&lt;code&gt;Docker run&lt;/code&gt;、&lt;code&gt;Docker stats&lt;/code&gt;等）。但是我们已经知道这部分功能被提取到了 containerd 中，所以在底层 dockerd 依赖于 containerd 就不足为奇了。但这基本上意味着 dockerd 只是一个前端适配器，它将 containerd 的 API 转换为广泛使用的 docker 引擎的 API。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/moby/moby&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dockerd&lt;/a&gt;（编者注：原文链接是 moby 项目）也提供了&lt;code&gt;compose&lt;/code&gt;和&lt;code&gt;swarm&lt;/code&gt;功能，试图解决容器编配问题，包括容器的多机器集群。正如我们在 Kubernetes 上看到的，这个问题相当难解决。对于一个单 dockerd 守护进程来说，同时承担两大职责并不好。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://iximiuz.com/journey-from-containerization-to-orchestration-and-beyond/dockerd.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;dockerd 是 containerd 前端的一部分（图片来源于 Docker Blog）&lt;/p&gt;
&lt;h3 id=&#34;podman&#34;&gt;podman&lt;/h3&gt;
&lt;p&gt;守护进程中一个有趣的例外是&lt;a href=&#34;https://github.com/containers/libpod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;podman&lt;/a&gt;。这是另一个 Red Hat 项目，目的是提供一个名为&lt;code&gt;libpod&lt;/code&gt;的库（而不是守护进程）来管理镜像、容器生命周期和 pod（容器组）。&lt;code&gt;podman&lt;/code&gt;是一个构建在这个库之上的命令行管理工具。作为一个低阶的容器运行时，这个项目也使用 runc。从代码角度来看，podman 和 cri-o（都是 Red Hat 项目）有很多共同点。例如，它们都在内部使用&lt;a href=&#34;https://github.com/containers/storage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;storage&lt;/a&gt;和&lt;a href=&#34;https://github.com/containers/image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;image&lt;/a&gt;库。另一项正在进行的工作是在 cri-o 中直接使用 libpod 而不是 runc。podman 的另一个有趣的特性是用 drop-in 替换一些（最流行的？）日常工作流程中的&lt;code&gt;docker&lt;/code&gt;命令。该项目声称兼容（在一定程度上）docker CLI API。&lt;/p&gt;
&lt;p&gt;既然我们已经有了 dockerd、containerd 和 cri-o，为什么还要开发这样的项目呢？守护进程作为容器管理器的问题是，它们大多数时候必须使用 root 权限运行。尽管由于守护进程的整体性，系统中没有 root 权限也可以完成其 90% 的功能，但是剩下的 10% 需要以 root 启动守护进程。使用 podman，最终有可能使 Linux 用户的 namespace 拥有无根（rootless）容器。这可能是一个大问题，特别是在广泛的 CI 或多租户环境中，因为即使是没有权限的 Docker 容器实际上也只是系统上的&lt;a href=&#34;https://brauner.github.io/2019/02/12/privileged.containes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一个没有 root 访问权限的内核错误&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;关于这个有趣项目的更多信息可以在 &lt;a href=&#34;http://crunchtools.com/podman-and-cri-o-in-rhel-8-and-openshift-4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt; 和 &lt;a href=&#34;https://www.redhat.com/en/blog/why-red-hat-investing-cri-o-and-podman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;找到。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://iximiuz.com/journey-from-containerization-to-orchestration-and-beyond/podman.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;conman&#34;&gt;conman&lt;/h3&gt;
&lt;p&gt;这是我正在做的&lt;a href=&#34;https://github.com/iximiuz/conman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;项目&lt;/a&gt;，目的是实现一个微型容器管理器。它主要用于教学目的，但是最终的目标是使它兼容 CRI，并作为容器运行时运行在 Kubernetes 集群上。&lt;/p&gt;
&lt;h3 id=&#34;运行时垫片runtime-shims&#34;&gt;运行时垫片（runtime shims）&lt;/h3&gt;
&lt;p&gt;如果你自己尝试一下就会很快发现，以编程方式从容器管理器使用 runc 是一项相当棘手的任务。以下是需要解决的困难清单。&lt;/p&gt;
&lt;h4 id=&#34;在容器管理器重启时保证容器存活&#34;&gt;在容器管理器重启时保证容器存活&lt;/h4&gt;
&lt;p&gt;容器可以长时间运行，而容器管理器可能由于崩溃或更新（或无法预见的原因）而需要重新启动。这意味着我们需要使每个容器实例独立于启动它的容器管理器进程。幸运的是，runc 提供了一种方式通过命令&lt;code&gt;runc run --detach&lt;/code&gt;从正在运行的容器中分离。我们也可能需要能够&lt;a href=&#34;https://iximiuz.com/en/posts/linux-pty-what-powers-docker-attach-functionality/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;附加到一个正在运行的容器上&lt;/a&gt;。为此，runc 可以运行一个由 Linux 伪终端控制的容器。通过 Unix 套接字传递 PTY 主文件描述符，可以将 PTY 的 master 端回传到启动进程（请参阅&lt;code&gt;runc create --console-socket&lt;/code&gt;选项）。这意味着，只要底层容器实例存在，我们就可以保持启动进程的活动状态，以保存 PTY 文件描述符。如果我们决定在容器管理器进程中存储主 PTY 文件描述符，则重新启动该管理器将导致文件描述符的丢失，从而失去重新附着到正在运行的容器的能力。这意味着我们需要一个专用的（轻量级的）包装进程来负责转化和保持运行容器的附属状态。&lt;/p&gt;
&lt;h4 id=&#34;同步容器管理器和包装的-runc-实例&#34;&gt;同步容器管理器和包装的 runc 实例&lt;/h4&gt;
&lt;p&gt;由于我们通过添加包装器进程对 runc 进行了转化，所以需要一个 side-channel（也可能是 Unix 套接字）来将容器的启动传回容器管理器。&lt;/p&gt;
&lt;h4 id=&#34;持续追踪容器退出码exit-code&#34;&gt;持续追踪容器退出码（exit code）&lt;/h4&gt;
&lt;p&gt;分离容器会导致缺少容器状态更新。我们需要有一种方式将状态反馈给管理器。出于这个目的，文件系统听起来也是一个不错的选择。我们可以让包装器进程等待子 runc 进程终止，然后将它的退出码写到磁盘上预定义的位置。&lt;/p&gt;
&lt;p&gt;为了解决所有这些问题（可能还有其他一些问题），通常使用所谓的 runtime shims。shim 是一个轻量级守护进程，控制一个正在运行的容器。shims 的实现有&lt;a href=&#34;https://github.com/containers/conmon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conmon&lt;/a&gt;和 containerd 的 &lt;a href=&#34;https://github.com/containerd/containerd/blob/master/runtime/v2/shim.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;runtime shim&lt;/a&gt;。我花了一些时间实现了自己的 shim 作为&lt;a href=&#34;https://github.com/iximiuz/conman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conman&lt;/a&gt;项目的一部分，可以在文章&lt;a href=&#34;https://iximiuz.com/en/posts/implementing-container-runtime-shim/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;“实现容器运行时 shim”&lt;/a&gt;中找到（编者注：此文章还未撰写）。&lt;/p&gt;
&lt;h3 id=&#34;容器网络接口-cni&#34;&gt;容器网络接口 (CNI)&lt;/h3&gt;
&lt;p&gt;我们有多个责任重叠的容器运行时（或管理器），很明显需要提取网络相关的代码到一个专门的项目来复用它，或者每个运行时都应该有自己的方式来配置 NIC 设备，IP 路由，防火墙和网络的其他方面。例如，cri-o 和 containerd 都必须创建 Linux 网络名称空间，并设置 Linux &lt;code&gt;bridge&lt;/code&gt;和&lt;code&gt;veth&lt;/code&gt;设备来为 Kubernetes pods 创建沙箱。为了解决这个问题，引入了&lt;a href=&#34;https://github.com/containernetworking/cni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器网络接口&lt;/a&gt;项目。&lt;/p&gt;
&lt;p&gt;CNI 项目提供了一个定义 CNI 插件的&lt;a href=&#34;https://github.com/containernetworking/cni/blob/master/SPEC.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;容器网络接口规范&lt;/a&gt;。插件是一个可执行的 sic，容器运行时（或管理器）会调用它来安装（或释放）网络资源。插件可以用来创建网络接口，管理 IP 地址分配，或者对系统进行一些自定义配置。CNI 项目与语言无关，由于插件被定义为可执行的，它可以用于任何编程语言实现的运行时管理系统。CNI 项目还为作为一个名为&lt;a href=&#34;https://github.com/containernetworking/plugins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;plugins&lt;/a&gt;的用于存放最流行的用例的独立的代码库提供了一组参考插件实现。例如&lt;a href=&#34;https://github.com/containernetworking/plugins/tree/master/plugins/main/bridge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bridge&lt;/a&gt;、&lt;a href=&#34;https://github.com/containernetworking/plugins/tree/master/plugins/main/loopback&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;loopback&lt;/a&gt;、&lt;a href=&#34;https://github.com/containernetworking/plugins/tree/master/plugins/meta/flannel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flannel&lt;/a&gt;等。&lt;/p&gt;
&lt;p&gt;一些第三方项目将其网络相关的功能实现为 CNI 插件。一些最著名的项目如&lt;a href=&#34;https://github.com/projectcalico/cni-plugin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Calico&lt;/a&gt;和&lt;a href=&#34;https://github.com/weaveworks/weave&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weave&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;编排&#34;&gt;编排&lt;/h2&gt;
&lt;p&gt;容器的编排是一个非常大的主题。实际上，Kubernetes 代码中最大的部分就是解决编排问题，而不是容器化问题。因此，编排应该有自己单独的文章（或几篇）而不在本文描述。希望他们能很快跟进。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-img&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://iximiuz.com/journey-from-containerization-to-orchestration-and-beyond/orchestration.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      img
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;值得注意的项目&#34;&gt;值得注意的项目&lt;/h2&gt;
&lt;h3 id=&#34;buildahhttpsgithubcomcontainersbuildah&#34;&gt;&lt;a href=&#34;https://github.com/containers/buildah&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;buildah&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Buildah 是一个和&lt;a href=&#34;https://github.com/opencontainers/image-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OCI 容器镜像&lt;/a&gt;一起使用的命令行工具。它是 RedHat 发起的一组项目（podman、skopeo、buildah）的一部分，目的是重新设计 Docker 处理容器的方法（主要是将单体和基于守护进程的方法转换为更细粒度的方法）。&lt;/p&gt;
&lt;h3 id=&#34;cnihttpsgithubcomcontainernetworkingcni&#34;&gt;&lt;a href=&#34;https://github.com/containernetworking/cni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cni&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CNI 项目定义了一个容器网络接口插件规范以及一些 Go 工具。有关更深入的解释，请参见这篇&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#cni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文章&lt;/a&gt;相应的部分。&lt;/p&gt;
&lt;h3 id=&#34;cni-pluginshttpsgithubcomcontainernetworkingplugins&#34;&gt;&lt;a href=&#34;https://github.com/containernetworking/plugins&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cni-plugins&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个最流行的 CNI 插件（如网桥、主机设备、环回、dhcp、防火墙等）的主库。有关更深入的解释，请参见&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#cni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;文章&lt;/a&gt;的相应部分。&lt;/p&gt;
&lt;h3 id=&#34;containerdhttpsgithubcomcontainerdcontainerd&#34;&gt;&lt;a href=&#34;https://github.com/containerd/containerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;高级容器运行时（或容器管理器）作为 Docker 的一部分启动，并提取到了独立的项目中。有关更深入的解释，请参见相应的&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#containerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;部分&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;conmonhttpsgithubcomcontainersconmon&#34;&gt;&lt;a href=&#34;https://github.com/containers/conmon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conmon&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个用 C 语言编写的小型 OCI 运行时 shim，主要由&lt;a href=&#34;https://github.com/cri-o/cri-o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;crio&lt;/a&gt;使用。它提供了父进程（crio）与启动容器之间的同步、容器启动、退出码追踪、PTY 转发和其他一些功能。有关更深入的解释，请参见相应的&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#containerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;部分&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;cri-ohttpsgithubcomcri-ocri-o&#34;&gt;&lt;a href=&#34;https://github.com/cri-o/cri-o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cri-o&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;专注于 Kubernetes 容器管理器，遵循 Kubernetes 容器运行时接口（CRI）规范。版本控制与 k8s 版本控制相同。有关更深入的解释，请参见相应的&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#cri-o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;部分&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;crunhttpsgithubcomcontainerscrun&#34;&gt;&lt;a href=&#34;https://github.com/containers/crun&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;crun&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;另一个 OCI 运行时规范实现。它声称是”快速和低内存占用的 OCI 容器运行时，完全用 C 编写“。但最重要的是，它可以用作任何 C/C++代码（或提供绑定其他语言）的库。它允许避免一些由它的守护进程特性引起的特定的“runc”缺陷。有关更多信息，请参见&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#runtime-shims&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Runtime Shims&lt;/a&gt;一节。&lt;/p&gt;
&lt;h3 id=&#34;imagehttpsgithubcomcontainersimage&#34;&gt;&lt;a href=&#34;https://github.com/containers/image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;image&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个被低估的（主观评价）Go 工具库，为&lt;em&gt;crio&lt;/em&gt;、&lt;em&gt;podman&lt;/em&gt;和&lt;em&gt;skopeo&lt;/em&gt;等知名项目提供了支持。通过它的名字就很容易猜到——其目的是用各种方式来处理容器镜像和镜像注册表。&lt;/p&gt;
&lt;h3 id=&#34;lxchttpsgithubcomlxclxc&#34;&gt;&lt;a href=&#34;https://github.com/lxc/lxc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lxc&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个由 C 编写的可替换的低级容器运行时。&lt;/p&gt;
&lt;h3 id=&#34;lxdhttpsgithubcomlxclxd&#34;&gt;&lt;a href=&#34;https://github.com/lxc/lxd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lxd&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个由 Go 编写的高级容器运行时（或容器管理器）。底层使用 lxc 作为低级运行时。&lt;/p&gt;
&lt;h3 id=&#34;mobyhttpsgithubcommobymoby&#34;&gt;&lt;a href=&#34;https://github.com/moby/moby&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;moby&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;高级容器运行时（或容器管理器），以前称为&lt;code&gt;docker/docker&lt;/code&gt;。提供一个著名的基于&lt;em&gt;containerd&lt;/em&gt;功能的 Docker 引擎 API。有关更深入的解释，请参见相应的&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#dockerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;部分&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;oci-distribution-spechttpsgithubcomopencontainersdistribution-spec&#34;&gt;&lt;a href=&#34;https://github.com/opencontainers/distribution-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OCI distribution spec&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个容器镜像发布规范（开发中）。&lt;/p&gt;
&lt;h3 id=&#34;oci-image-spechttpsgithubcomopencontainersimage-spec&#34;&gt;&lt;a href=&#34;https://github.com/opencontainers/image-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OCI image spec&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个容器镜像规范。&lt;/p&gt;
&lt;h3 id=&#34;oci-runtime-spechttpsgithubcomopencontainersruntime-spec&#34;&gt;&lt;a href=&#34;https://github.com/opencontainers/runtime-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OCI runtime spec&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个低阶容器运行时规范。&lt;/p&gt;
&lt;h3 id=&#34;podmanhttpsgithubcomcontainerslibpod&#34;&gt;&lt;a href=&#34;https://github.com/containers/libpod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;podman&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个无守护进程的 Docker 替代品。Docker 重新设计的 frontman 项目。更多信息参见 &lt;a href=&#34;https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RedHat developers blog&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;rkthttpsgithubcomrktrkt&#34;&gt;&lt;a href=&#34;https://github.com/rkt/rkt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rkt&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;另一个容器管理系统。它提供了一个低阶运行时和一个高阶管理接口。它宣称是 Pod 原生的。向 Kubernetes 添加&lt;em&gt;rkt&lt;/em&gt;支持的想法催生了 CRI 规范。该项目由 CoreOS 团队于 5 年前启动，在被 RedHat 收购后却停滞不前。截止到 2019 年 8 月，该项目的最后一次提交已经是大约两个月前了。&lt;strong&gt;更新&lt;/strong&gt;：8 月 16 日，CNCF&lt;a href=&#34;https://www.cncf.io/blog/2019/08/16/cncf-archives-the-rkt-project/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;宣布&lt;/a&gt;技术监督委员会（TOC）投票决定将 rkt 项目存档。&lt;/p&gt;
&lt;h3 id=&#34;runchttpsgithubcomopencontainersrunc&#34;&gt;&lt;a href=&#34;https://github.com/opencontainers/runc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;runc&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个低阶容器运行时和 OCI 运行时规范的参考实现。一开始作为 Docker 的一部分现在提取到了一个独立的项目中，普及度很高。有关更深入的解释，请参见相应的&lt;a href=&#34;https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/#container-runtimes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;部分&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;skopeohttpsgithubcomcontainersskopeo&#34;&gt;&lt;a href=&#34;https://github.com/containers/skopeo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;skopeo&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Skopeo 是一个命令行工具集，对容器镜像和镜像库执行各种操作。这是 RedHat 重新设计 Docker（参见 podman 和 buildah）工作的一部分，它将自己的职责抽取为专用的和独立的工具。&lt;/p&gt;
&lt;h3 id=&#34;storagehttpsgithubcomcontainersstorage&#34;&gt;&lt;a href=&#34;https://github.com/containers/storage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;storage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一个被低估的 Go 类库，为 crio、podman 和 skopeo 等知名项目提供了支持。其目的是为存储文件系统层、容器镜像和容器（磁盘上的）提供方法。它还管理 bundle 的加载。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless vs Container——开发人员向左，DevOps 向右</title>
      <link>https://cloudnative.to/blog/serverless-vs-containers/</link>
      <pubDate>Sun, 16 Sep 2018 16:49:58 +0800</pubDate>
      <guid>https://cloudnative.to/blog/serverless-vs-containers/</guid>
      <description>&lt;p&gt;本文为翻译文章，&lt;a href=&#34;https://dzone.com/articles/serverless-vs-containers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;点击查看原文&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;让我们来看看 Serverless 与容器的采用率、工具支持以及围绕 Serverless 和容器化的其他争论。&lt;/p&gt;
&lt;p&gt;在 Serverless 和容器中，我们有两种令人惊叹的技术，可以为工程师提供高效的，与机器无关的抽象。然而，两个阵营之间似乎存在着不可逾越的鸿沟。&lt;/p&gt;
&lt;p&gt;如果你读过我在过去两年写的任何内容，你就会知道我坚定地站在 Serverless 阵营。但我也是容器的早期采用者。在 Docker 达到 1.0 里程碑后不久，2015 年初我的第一个容器化项目问世。&lt;/p&gt;
&lt;p&gt;这篇文章不是为了再次引发阵营战争或宣布某个阵营的胜利。相反，我将尝试客观地看待 Serverless 和容器的状态，根据它们提供的利弊权衡，并对未来的情况给出诚实的看法。&lt;/p&gt;
&lt;p&gt;鉴于 Serverless 和 FaaS 函数即服务（FAAS）通常已经可以互换使用，为了本文的目的，我将限制 Serverless 的定义为 FAAS 产品，例如 AWS Lambda。&lt;/p&gt;
&lt;h2 id=&#34;容器状态&#34;&gt;容器状态&lt;/h2&gt;
&lt;p&gt;自从 Docker 早期可用以来已经走过了漫长的道路。随着我们在容器上运行的系统越来越复杂，我们的需求已经催生了丰富的工具生态系统。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92pcoc59j218c0wwtb6_hu99158ba616b1e7d1cfd1cf7e55814481_46739_a40039e7df4e97abf29678e58b40d8bf.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92pcoc59j218c0wwtb6_hu99158ba616b1e7d1cfd1cf7e55814481_46739_9c8630becae95866337cd802e44b4ae8.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92pcoc59j218c0wwtb6_hu99158ba616b1e7d1cfd1cf7e55814481_46739_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/serverless-vs-containers/61411417ly1fv92pcoc59j218c0wwtb6_hu99158ba616b1e7d1cfd1cf7e55814481_46739_a40039e7df4e97abf29678e58b40d8bf.webp&#34;
               width=&#34;760&#34;
               height=&#34;564&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;AWS 还拥有自己的托管容器服务 ECS。这提供了与 AWS 生态系统其他部分更紧密的集成。&lt;/p&gt;
&lt;p&gt;如服务网格也正在获得可见性和被采用。它们将常见的交叉问题（例如跟踪和断路器）移出应用层。通过解决基础架构层中的这些问题，它们为这些挑战提供了语言和运行时无关的解决方案。这使它们非常适合现代 IT 组织，即使用各种不同语言的构建微服务。&lt;/p&gt;
&lt;h2 id=&#34;serverless-现状&#34;&gt;Serverless 现状&lt;/h2&gt;
&lt;p&gt;虽然围绕 Serverless 的炒作并没有和容器一样长。值得记住的是，在 Lamber 达到 1.0 之后仅一个月，AWS Lambda 就在 2014 年发布了。它随附了 CloudWatch 的基本日志记录和监视支持，即使我们现在依赖的许多事件源（例如 API Gateway）都是在之后引入的。&lt;/p&gt;
&lt;p&gt;除了这些托管服务之外，还有一些解决方案可以让您在自己的 Kubernetes 集群上运行 Serverless。其中包括谷歌和合作公司最近宣布的 Knative。虽然这些解决方案试图满足许多开发人员的需求，但我感到他们放弃了 Serverless 的最佳功能——不必担心服务器！&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92pv9fp4j20y60pw43y_hu65ce36d25ebb654078840883fbeece84_120350_79fb924656fd43cd95fae19dfc87993e.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92pv9fp4j20y60pw43y_hu65ce36d25ebb654078840883fbeece84_120350_49c3c94a6d7c25901675fe987b7a44c4.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92pv9fp4j20y60pw43y_hu65ce36d25ebb654078840883fbeece84_120350_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/serverless-vs-containers/61411417ly1fv92pv9fp4j20y60pw43y_hu65ce36d25ebb654078840883fbeece84_120350_79fb924656fd43cd95fae19dfc87993e.webp&#34;
               width=&#34;760&#34;
               height=&#34;576&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;采用趋势&#34;&gt;采用趋势&lt;/h2&gt;
&lt;p&gt;根据一些调查和研究，Serverless 和容器的采用正在快速增长。以下是我认为的一些亮点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Cloudability 发现，2017 年第四季度 AWS 用户的容器采用量增长了 246％，高于第三季度的 206％。同时，同一项研究发现，2017 年第四季度 AWS 用户 Serverless 采用量增长了 667％，高于第三季度的 321％。&lt;/li&gt;
&lt;li&gt;Serverless 公司最近发现，2018 年有 82％的接受调查的人员使用 Serverless，高于 2017 年的 45％。超过 53.2％的人表示他们使用 Serverless 技术对他们的工作至关重要。&lt;/li&gt;
&lt;li&gt;Serverless 公司的调查还报告说，在采用 Serverless 之前，24％的接受调查的人员对公共云的使用经验有限或为零。20.2％的为拥有 1000 多名员工的大型企业工作。&lt;/li&gt;
&lt;li&gt;Logz.io 的 &lt;a href=&#34;https://logz.io/devops-pulse-insights-2018/#pulse_section_ten&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps Pulse&lt;/a&gt; 调查发现，在 2018 年，60.71％的接受调查的人员采用了容器编排，高于 2017 年的 42.11％。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有趣的是，DevOps Pulse 调查显示，Serverless 采用率比其他报告小得多。从 2018 年的 30.55％（2017 年）上升到 42.58％。这可能与其接受调查的人员的分布有关。其中 28.54％认为自己是开发者，而 44.26％认定为 DevOps、DevSecOps、SysAdmin 或 SRE。&lt;/p&gt;
&lt;p&gt;这与我在容器和 Serverless 阵营之间的上述鸿沟的经验一致。那些认为自己是开发人员的人更倾向于 Serverless，而那些被认为是 DevOps 的人更有可能选择容器。&lt;/p&gt;
&lt;h2 id=&#34;控制与责任&#34;&gt;控制与责任&lt;/h2&gt;
&lt;p&gt;关于 Serverless 与容器的争论通常始于控制，或者在 Serverless 的情况下缺乏控制。这不是新的。事实上，我清楚地记得当 AWS 在 2009 年开始获得牵引力时围绕控制的相同辩论。现在 10 年后，尘埃落定于原始辩论，但我们未能吸取教训。&lt;/p&gt;
&lt;p&gt;想要控制是人的本性，但你愿意为此付出多少钱？您知道您将承担的总体拥有成本（TCO）吗？&lt;/p&gt;
&lt;p&gt;控制自己的基础设施的能力带来了很多责任。要承担这些责任，您需要拥有组织中的相关技能。这意味着工资（很容易成为大多数组织的最大开支），代理费以及从工程师和经理那里抽出时间进行招聘和入职。&lt;/p&gt;
&lt;p&gt;考虑到所涉及的 TCO，具有该控制的目标必须是针对某些事物进行优化（例如，为业务关键工作流程实现可预测的性能），并且不为其自身控制。&lt;/p&gt;
&lt;p&gt;构建基于容器的通用计算平台需要大量的工程专业知识和投资，该平台与 AWS Lambda 等 Serverless 产品一样高效，可扩展且具有弹性。大多数组织根本没有能力解决这个问题。尽管有大量的时间和金钱投入，但我知道一些大企业在他们的尝试中惨遭失败。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92q5mvy7j20y01061kx_hu0b2fad8b5e67afb3d8c7fab9fe9c94a7_140319_c628a8ea6eb12675f66a18b9afee780a.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92q5mvy7j20y01061kx_hu0b2fad8b5e67afb3d8c7fab9fe9c94a7_140319_34d468f94fddc8e54b8c443f5bb2d776.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92q5mvy7j20y01061kx_hu0b2fad8b5e67afb3d8c7fab9fe9c94a7_140319_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/serverless-vs-containers/61411417ly1fv92q5mvy7j20y01061kx_hu0b2fad8b5e67afb3d8c7fab9fe9c94a7_140319_c628a8ea6eb12675f66a18b9afee780a.webp&#34;
               width=&#34;714&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;工具支持&#34;&gt;工具支持&lt;/h2&gt;
&lt;p&gt;使用 Serverless，您可以从 box-logging，指标和跟踪中获得基本的可观察性工具。尽管有这些警告，但一开始它们通常就足够了。&lt;/p&gt;
&lt;p&gt;传统上迎合 IAAS 或容器市场的供应商也开始为 Serverless 应用程序提供支持。但是，他们需要调整自己的方法，因为 Serverless 无法再使用基于代理的方法。&lt;/p&gt;
&lt;p&gt;还有越来越多的供应商专注于解决 Serverless 应用程序的可观察性和安全性问题。但是，大多数仍处于开发的早期阶段，尚未准备好进行严肃的生产使用。&lt;/p&gt;
&lt;p&gt;与 Serverless 相比，容器空间具有更成熟和多样化的工具生态系统。事实上，我发现使用容器的挑战之一是处理绝大多数的选择！&lt;/p&gt;
&lt;p&gt;有充足的修补机会，我也发现团队可能会忽略奖品（即为我们的客户建立更好的产品），并陷入过度工程的陷阱。&lt;/p&gt;
&lt;p&gt;Serverless 的工具支持将会越来越好，但至少目前，仍然远远落后于容器。在容器领域工作的人面临的挑战是抵制修补和追求简单的冲动。&lt;/p&gt;
&lt;h2 id=&#34;供应商锁定风险与奖励&#34;&gt;供应商锁定：风险与奖励&lt;/h2&gt;
&lt;p&gt;Serverless 的批评者通常使用供应商锁定作为他们的论据。与此同时，大多数 AWS 客户实际上都在要求更紧密的集成，以便他们可以从平台中获取更多价值。&lt;/p&gt;
&lt;p&gt;可以肯定的是，供应商锁定是一种风险。但正如任何投资者都会告诉你的那样，如果你不承担风险，你就永远不会赚钱。诀窍是采取能够带来最佳回报的计算风险。&lt;/p&gt;
&lt;p&gt;对于它所获得的所有关注，供应商锁定对于少数人来说是一种危险。相反，您更有可能找到过度设计的解决方案来阻止供应商锁定，而不是创建其他形式的锁定，无论是内部团队还是其他私有云供应商。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92qged6ej20y80fijuh_huadcff9ede2816078be4fdaf585e68f84_66814_791d87483c9ffdbf918376eae43b7847.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92qged6ej20y80fijuh_huadcff9ede2816078be4fdaf585e68f84_66814_4d67eedd29936fe44ae76719fba14eff.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92qged6ej20y80fijuh_huadcff9ede2816078be4fdaf585e68f84_66814_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/serverless-vs-containers/61411417ly1fv92qged6ej20y80fijuh_huadcff9ede2816078be4fdaf585e68f84_66814_791d87483c9ffdbf918376eae43b7847.webp&#34;
               width=&#34;760&#34;
               height=&#34;344&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;同样，这不是新的。几年前我们与 ORM 进行了同样的辩论。我们创建了所有这些抽象来防止供应商锁定，除了风险从未实现为我们大多数人的问题。所发生的一切都是我们花费了大量精力和时间，并推迟了我们的产品上市时间，因为这些产品从未成为问题。&lt;/p&gt;
&lt;p&gt;更糟糕的是，ORM 引入了他们自己的问题和复杂性，并持续阻碍了发展。它成为开发团队的一项税收，并在可预见的未来减缓了功能交付。&lt;/p&gt;
&lt;p&gt;对于那些必须进行数据库迁移的人来说，ORM 并没有让事情变得更好。除了其他一切之外，这只是你必须处理的另一个问题。&lt;/p&gt;
&lt;p&gt;看到历史重演，这次，甚至更高的层次可能会影响整个组织，这是痛苦的！&lt;/p&gt;
&lt;p&gt;公司发现 Serverless 团队的工作量越来越多，工程师也越来越多。所以，就像一个明智的投资者一样，我们应该问的问题是：“重要的生产力回报是否值得锁定风险，实现问题的可能性很小？”&lt;/p&gt;
&lt;h2 id=&#34;未来是-serverless-还是容器&#34;&gt;未来是 Serverless 还是容器？&lt;/h2&gt;
&lt;p&gt;Serverless 为您提供了大量的生产力提升，但却以控制基础架构为代价。&lt;/p&gt;
&lt;p&gt;对于我们的许多工作流程 - 网络 API，流处理，cron 作业等 - 实际上我们不需要这些所有的控制，我们应该祝福为我们处理管道的人。&lt;/p&gt;
&lt;p&gt;但总会出现这样的情况：我们需要保持对基础架构的控制，以便优化性能，成本或更高的可用性。或者，我们的工作量可能不利于 Serverless 的当前限制，例如最长执行时间。&lt;/p&gt;
&lt;p&gt;我认为 Serverless 和容器应该混合使用，而不是选择其中一个。实际上，许多公司都成功的采用了混合方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 Serverless 满足其需求的工作负载使用 Serverless&lt;/li&gt;
&lt;li&gt;例如，对于以下工作负载，请使用容器;
&lt;ul&gt;
&lt;li&gt;长期运行&lt;/li&gt;
&lt;li&gt;需要可预测的性能&lt;/li&gt;
&lt;li&gt;需要比 Serverless 更容易实现的弹性&lt;/li&gt;
&lt;li&gt;不断地以大规模运行，并且按次付费定价模型变得过于昂贵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这也是 Netflix 前云架构师兼现任 AWS 云计算副总裁 Adrian Cockcroft 的建议。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/serverless-vs-containers/61411417ly1fv92qojnw5j20yc0ue15k_hua0f152eb3271ecbc6243782daf6eb33d_94241_07cea1b90c4fe50d5c6a60e9a0c95b79.webp 400w,
               /blog/serverless-vs-containers/61411417ly1fv92qojnw5j20yc0ue15k_hua0f152eb3271ecbc6243782daf6eb33d_94241_186e803602e1bfec73c4488b28a5af0f.webp 760w,
               /blog/serverless-vs-containers/61411417ly1fv92qojnw5j20yc0ue15k_hua0f152eb3271ecbc6243782daf6eb33d_94241_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/serverless-vs-containers/61411417ly1fv92qojnw5j20yc0ue15k_hua0f152eb3271ecbc6243782daf6eb33d_94241_07cea1b90c4fe50d5c6a60e9a0c95b79.webp&#34;
               width=&#34;760&#34;
               height=&#34;673&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;我相信我们最终会看到这两种范式的趋同。容器技术最终将成为 Serverless - 想想 Fargate，加上每次调用定价模型和毫秒计费。同时，Serverless 平台将开放并允许您携带自己的容器。高级用户可以通过提供符合 API 的子组件进行日志记录等来保留对其基础架构的一些控制。&lt;/p&gt;
&lt;p&gt;随着容器和 Serverless 之间的界限被打破，我们终于可以废除派系并停止谈论底层技术。我想谈的是如何构建客户想要使用的产品，以及如何更快地构建它们。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
