<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>平台工程 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E7%A8%8B/</link>
      <atom:link href="https://cloudnativecn.com/tag/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <description>平台工程</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Mon, 11 Dec 2023 09:14:00 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>平台工程</title>
      <link>https://cloudnativecn.com/tag/%E5%B9%B3%E5%8F%B0%E5%B7%A5%E7%A8%8B/</link>
    </image>
    
    <item>
      <title>使用 Backstage 开始平台工程之旅</title>
      <link>https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/</link>
      <pubDate>Mon, 11 Dec 2023 09:14:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/</guid>
      <description>&lt;p&gt;本文译自：&lt;a href=&#34;https://www.infracloud.io/blogs/starting-platform-engineering-journey-backstage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.infracloud.io/blogs/starting-platform-engineering-journey-backstage/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：这篇文章介绍了 Backstage 这个开源工具，它可以帮助你创建和管理一个内部开发平台，以提高开发团队的效率和协作。文章还展示了如何使用 Backstage 的模板和插件来构建和部署你的应用和服务。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在不断增长的&lt;a href=&#34;https://www.infracloud.io/blogs/devops-to-platform-engineering-how-we-got-here/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;平台工程领域，它起源于 DevOps 实践&lt;/a&gt;，为软件开发团队提供自助服务功能，内部开发者门户或 IDP（Internal Developer Portals）正发挥着越来越重要的作用。通过提高协作、增加可见性和控制，内部开发者门户帮助组织快速高效地交付优质软件。&lt;/p&gt;
&lt;p&gt;在众多不同的内部开发者门户工具中，Backstage 是一个受欢迎的工具之一。Backstage 旨在通过为开发人员提供一个集中的地方来发现和使用服务，显著增强开发体验。本文探讨了其关键功能和优势，揭示了它如何在开发过程中发挥作用。但首先，让我们简要了解什么是内部开发者门户，以及它们为何在软件行业至关重要。&lt;/p&gt;
&lt;h2 id=&#34;什么是内部开发者门户idp&#34;&gt;什么是内部开发者门户（IDP）？&lt;/h2&gt;
&lt;p&gt;内部开发者门户是一个网站或 Web 应用程序，为正在构建基于公司平台的应用程序的开发人员提供信息和工具。&lt;a href=&#34;https://www.infracloud.io/blogs/platform-engineering-101/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;平台工程&lt;/a&gt;侧重于赋予开发人员快速高效地构建和部署软件的能力。内部开发者门户是实现平台工程目标的重要工具。它们为开发人员提供了访问所有资源的单一入口，包括 API、文档、工具和服务。&lt;/p&gt;
&lt;h3 id=&#34;软件行业需要内部开发者门户&#34;&gt;软件行业需要内部开发者门户&lt;/h3&gt;
&lt;p&gt;在传统软件开发过程中，开发团队通常会面临一些挑战，比如缺乏文档、需要导航到多个仪表板以满足各种需求等，这使得难以理解和实施技术。缺乏集中工具会导致混乱，增加开发时间，并增加错误的可能性。内部开发者门户简化了这个过程，提供了一个集中的文档、API 详细信息和工具的地方。它们弥合了开发人员和技术之间的差距，减少了摩擦，增强了软件开发过程的整体效率。&lt;/p&gt;
&lt;p&gt;由于以下几个原因，内部开发者门户已经成为必需品：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流程的便捷访问性&lt;/strong&gt;：随着 API 和服务的数量增加，开发人员需要一个集中的地方，汇总这些资源，使它们易于访问和搜索。内部开发者门户充当了一个一站式目的地，开发人员可以在其中探索并选择适合其项目的正确工具。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有效的文档&lt;/strong&gt;：清晰而简洁的文档对于无缝的 API 集成和产品开发非常重要。内部开发者门户托管了全面的指南、教程和示例，帮助开发人员理解每个 API 的功能、方法和最佳实践。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强的协作&lt;/strong&gt;：开发人员通常在团队中工作，或者与其他人合作，因此有效的沟通和知识共享很重要。内部开发者门户鼓励社区意识，开发人员可以分享经验、寻求建议，并共同解决问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加速开发&lt;/strong&gt;：将预构建的代码示例和 SDK 集成到内部开发者门户可以加快开发过程。开发人员可以利用这些样板资源来启动他们的项目，节省宝贵的时间和精力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;市场上还有许多其他内部开发者门户可用，例如 Port、Kratix 和 Cortex。这些门户提供了各种功能，如软件目录、文档管理和用户管理。但在本文中，我们将关注 Backstage，这是一个开源的内部开发者门户平台，由 Spotify 和 Netflix 等公司使用。&lt;/p&gt;
&lt;h2 id=&#34;什么是-backstage&#34;&gt;什么是 Backstage？&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/backstage/backstage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backstage&lt;/a&gt; 是由 Spotify 开发的开源平台，随后于 2020 年&lt;a href=&#34;https://backstage.io/blog/2020/09/23/backstage-cncf-sandbox/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;捐赠给了云原生计算基金会（CNCF）&lt;/a&gt;。它旨在作为一个“内部开发者门户”，通过提供一个统一和集中的平台来管理软件开发生命周期的各个方面，从而显著增强开发体验。&lt;/p&gt;
&lt;h3 id=&#34;backstage-的关键组件&#34;&gt;Backstage 的关键组件&lt;/h3&gt;
&lt;p&gt;Backstage 的一些关键组件包括：&lt;/p&gt;
&lt;h4 id=&#34;软件目录&#34;&gt;软件目录&lt;/h4&gt;
&lt;p&gt;软件目录是 Backstage 的基础功能之一。它充当了一个集中的存储库，提供了组织软件生态系统内所有服务、API 和组件的全面概述。目录中的每个服务条目都包括关键信息，如用途、所有者、文档、依赖关系和健康指标。&lt;/p&gt;
&lt;h4 id=&#34;软件模板&#34;&gt;软件模板&lt;/h4&gt;
&lt;p&gt;Backstage 提供了用于加快创建新服务和项目过程的软件模板。这些模板为各种类型的应用程序提供了标准化的起点，确保了从一开始就遵循一致的最佳实践、编码约定和集成。这个功能不仅加速了开发，还强制执行了项目之间的一致性，从而提高了代码质量。&lt;/p&gt;
&lt;h4 id=&#34;cicd-集成&#34;&gt;CI/CD 集成&lt;/h4&gt;
&lt;p&gt;持续集成和持续交付（CI/CD）是现代软件开发中的重要实践。Backstage 与 CI/CD 流水线无缝集成，允许开发人员直接从平台触发构建、运行测试并部署代码。这种集成简化了开发工作流程，减少了手动干预，提高了&lt;a href=&#34;https://www.infracloud.io/progressive-delivery-consulting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;交付软件更新&lt;/a&gt;的速度和可靠性。&lt;/p&gt;
&lt;h4 id=&#34;文档管理&#34;&gt;文档管理&lt;/h4&gt;
&lt;p&gt;高效的文档管理对于有效的软件开发至关重要。Backstage 提供了管理、版本和发布与服务和 API 相关的文档的工具。这确保开发人员始终能够访问最新和相关的文档，减少混乱，促进准确实施。&lt;/p&gt;
&lt;h4 id=&#34;分析和指标&#34;&gt;分析和指标&lt;/h4&gt;
&lt;p&gt;了解服务的性能对于维护健康的软件生态系统至关重要。Backstage 可以扩展以包括与服务健康、性能和使用相关的分析和指标。这些数据使团队能够做出明智的决策，优化资源分配，并主动解决问题。&lt;/p&gt;
&lt;h3 id=&#34;backstage-的好处&#34;&gt;Backstage 的好处&lt;/h3&gt;
&lt;p&gt;使用 Backstage 的一些关键优势包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开源&lt;/strong&gt;：Backstage 是一个开源项目，这意味着它是免费使用和修改的。这为组织提供了更多灵活性和对其内部开发者门户的控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;：由于其庞大的插件生态系统，Backstage 非常可扩展，这意味着它可以轻松集成到组织已经使用的其他工具和服务中。这有助于减少孤立，并创建更流畅的开发体验。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;社区支持&lt;/strong&gt;：Backstage 拥有庞大且活跃的用户和贡献者社区。这意味着在线有大量的信息和支持可用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增强的协作&lt;/strong&gt;：通过提供一个集中平台，Backstage 鼓励开发人员、基础架构团队和其他利益相关者更好地协作。它将不同的团队汇聚在一起，培养了社区感和共同责任感。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高开发人员的生产力&lt;/strong&gt;：Backstage 通过提供一个统一的界面来访问各种工具和资源，简化了开发体验。开发人员花费更少的时间搜索信息，更多时间编码，最终提高了他们的生产力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致的开发实践&lt;/strong&gt;：使用 Backstage，团队可以在项目之间强制执行标准化的开发实践。这种一致性确保了代码质量、安全性和合规性，从而产生更强大和可靠的软件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高效的入职过程&lt;/strong&gt;：入职新团队成员可能具有挑战性，但 Backstage 通过提供清晰和易于访问的文档来简化此过程。新成员可以快速掌握项目的要点并开始有效地贡献。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-backstage-入门&#34;&gt;使用 Backstage 入门&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://backstage.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官方 Backstage 文档&lt;/a&gt;是入门 Backstage 的最佳资源。它全面、及时并易于遵循。文档涵盖了从安装和配置 Backstage 到创建和管理软件组件的所有内容。它还包括教程和示例，以帮助您快速入门。&lt;/p&gt;
&lt;p&gt;Backstage 可以作为独立应用程序在本地或远程服务器上安装和运行，您可以使用其庞大的插件生态系统来自定义和构建门户，以满足您的开发团队的需求。我们将在以下部分安装 Backstage 应用程序。&lt;/p&gt;
&lt;h3 id=&#34;backstage-安装步骤&#34;&gt;Backstage 安装步骤&lt;/h3&gt;
&lt;h4 id=&#34;先决条件&#34;&gt;先决条件&lt;/h4&gt;
&lt;p&gt;在开始使用 Backstage 之前，让我们确保已经具备了&lt;a href=&#34;https://backstage.io/docs/getting-started/#prerequisites&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;必要的先决条件&lt;/a&gt;，以确保顺利完成安装过程。以下是我们需要开始的工具清单：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 Unix 的操作系统（Linux、macOS、WSL）&lt;/li&gt;
&lt;li&gt;带有 NVM 的 Node.js&lt;/li&gt;
&lt;li&gt;Yarn&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;像 curl 或 wget 这样的系统二进制文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安装-backstage-应用程序&#34;&gt;安装 Backstage 应用程序&lt;/h4&gt;
&lt;p&gt;我们使用 &lt;a href=&#34;https://www.npmjs.com/package/npx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npx&lt;/a&gt;，这是一个直接从注册表运行 Node 可执行文件的工具，来安装 Backstage 独立应用程序。这个工具包含在 Node.js 安装中。以下命令将安装 Backstage：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npx @backstage/create-app@latest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;向导将要求输入应用程序的名称，该名称也将是目录的名称&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;需要安装以下包:
  @backstage/create-app@0.5.5
确定要继续吗？(y) y
? 输入应用程序的名称 [required] backstage-blog
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;运行-backstage-应用程序&#34;&gt;运行 Backstage 应用程序&lt;/h4&gt;
&lt;p&gt;安装完成后，将创建一个具有在安装过程中选择的应用程序名称的目录。切换到该目录并启动 Backstage 应用程序。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd backstage-blog
yarn dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;















&lt;figure  id=&#34;figure-backstage-启动&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Backstage 启动&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/backstage-start_hu6564635577999208501.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/backstage-start_hu16314959339997045946.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/backstage-start_hu11812145110490069513.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/backstage-start_hu6564635577999208501.webp&#34;
               width=&#34;760&#34;
               height=&#34;151&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Backstage 启动
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Backstage 应用程序将在端口 3000 上启动。转到本地浏览器并键入 &lt;code&gt;http://localhost:3000&lt;/code&gt; 以打开 Backstage 应用程序。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-backstage-用户界面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Backstage 用户界面&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/backstage-ui_hu12036079190404498875.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/backstage-ui_hu4122200918240372591.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/backstage-ui_hu2540256158998630399.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/backstage-ui_hu12036079190404498875.webp&#34;
               width=&#34;760&#34;
               height=&#34;379&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Backstage 用户界面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;(Backstage 用户界面运行在 localhost 上)&lt;/p&gt;
&lt;h4 id=&#34;创建-configyaml&#34;&gt;创建 config.yaml&lt;/h4&gt;
&lt;p&gt;要将任何服务导入到软件目录中，让我们在 GitHub 存储库的根目录中创建一个名为 &lt;strong&gt;config.yaml&lt;/strong&gt; 的文件，内容如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: boutique-carts
  annotations:
    github.com/project-slug: infracloudio/backstage-msvc-app/src/cartservice     
spec:
  type: service
  lifecycle: production
  owner: user:guest
  dependsOn:
    - component:boutique-frontend
    - component:boutique-products
  providesApis:
    - boutique-carts-api
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的 config.yaml 对应于位于以下 GitHub 位置的 &lt;strong&gt;boutique-carts&lt;/strong&gt; 服务：infracloudio/backstage-msvc-app/src/cartservice &lt;strong&gt;dependsOn&lt;/strong&gt; 和 &lt;strong&gt;providesApi&lt;/strong&gt; 规范有助于可视化各种服务之间的关系。所有在此提到的组件都可以类似于 boutique-carts 服务创建。&lt;/p&gt;
&lt;h4 id=&#34;将-configyaml-导入到软件目录&#34;&gt;将 config.yaml 导入到软件目录&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在浏览器中打开 Backstage 用户界面，转到 &lt;strong&gt;Home&lt;/strong&gt; 并选择 &lt;strong&gt;Create&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-打开-backstage-用户界面&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;打开 Backstage 用户界面&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/catalog-1_hu12255090497990825416.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/catalog-1_hu3619797702182632951.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/catalog-1_hu4823855986739231615.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/catalog-1_hu12255090497990825416.webp&#34;
               width=&#34;760&#34;
               height=&#34;96&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      打开 Backstage 用户界面
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择 &lt;strong&gt;Register existing components&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-选择-register-existing-components&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;选择 Register existing components&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/catalog-2_hu8793610490473915988.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/catalog-2_hu15593114519922352731.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/catalog-2_hu14436460003737065508.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/catalog-2_hu8793610490473915988.webp&#34;
               width=&#34;760&#34;
               height=&#34;89&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      选择 Register existing components
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加服务的 config.yaml 文件的绝对路径。选择 &lt;strong&gt;Analyze&lt;/strong&gt; 并 &lt;strong&gt;Import&lt;/strong&gt; 它到目录中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-添加绝对路径&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;添加绝对路径&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/catalog-3_hu4741945192524947206.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/catalog-3_hu5743687457707553981.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/catalog-3_hu15642152535416448896.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/catalog-3_hu4741945192524947206.webp&#34;
               width=&#34;760&#34;
               height=&#34;548&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      添加绝对路径
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;在软件目录中导航服务&#34;&gt;在软件目录中导航服务&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt; 选项卡下可用的选项&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-overview-选项卡&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Overview 选项卡&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/catalog-4_hu8271576221474625109.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/catalog-4_hu10128226353951553021.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/catalog-4_hu6972960460813746035.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/catalog-4_hu8271576221474625109.webp&#34;
               width=&#34;760&#34;
               height=&#34;368&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Overview 选项卡
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CI/CD&lt;/strong&gt; 选项卡会自动导入导入的存储库中的所有 Github Actions 工作流程&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-cicd-选项卡&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;CI/CD 选项卡&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/catalog-5_hu7008225620153183987.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/catalog-5_hu3047682206157571679.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/catalog-5_hu16153472693712406987.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/catalog-5_hu7008225620153183987.webp&#34;
               width=&#34;760&#34;
               height=&#34;244&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      CI/CD 选项卡
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt; 和 &lt;strong&gt;Dependencies&lt;/strong&gt; 可以在各自的选项卡下可视化&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-提供的-apis&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;提供的 APIs&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/catalog-6_hu8509235994289272094.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/catalog-6_hu809832602027051060.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/catalog-6_hu13378699294117573187.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/catalog-6_hu8509235994289272094.webp&#34;
               width=&#34;760&#34;
               height=&#34;313&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      提供的 APIs
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-dependencies&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Dependencies&#34; srcset=&#34;
               /blog/starting-platform-engineering-journey-backstage/catalog-7_hu5072550377397270251.webp 400w,
               /blog/starting-platform-engineering-journey-backstage/catalog-7_hu6771827569726445720.webp 760w,
               /blog/starting-platform-engineering-journey-backstage/catalog-7_hu16317433123453589413.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/starting-platform-engineering-journey-backstage/catalog-7_hu5072550377397270251.webp&#34;
               width=&#34;760&#34;
               height=&#34;317&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Dependencies
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，在上面的简短演示中，我们学习了如何将服务添加到我们的目录并可视化它们之间的关系。这有助于创建一个高效和用户友好的目录。您可以使用 Backstage 探索许多其他用例，以满足您的开发人员的需求。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;总之，技术的发展和对互连数字服务日益增长的需求突显了内部开发者门户的关键需求。在这个领域，Backstage 提供了一个全面的解决方案，不仅满足了现代软件开发的要求，还提供了许多优势。&lt;/p&gt;
&lt;p&gt;Backstage 将简化的开发体验与丰富的组件和工具相结合，使其成为内部开发者门户生态系统的前沿。它通过提供清晰的文档、API 和自助服务能力，赋予开发人员能力，减少摩擦并加速创新。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何用工作负载规范打造高效的平台工程服务</title>
      <link>https://cloudnativecn.com/blog/decoding-workload-specification/</link>
      <pubDate>Tue, 14 Nov 2023 12:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/decoding-workload-specification/</guid>
      <description>&lt;p&gt;本文译自：&lt;a href=&#34;https://www.infracloud.io/blogs/decoding-workload-specification-for-effective-platform-engineering/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.infracloud.io/blogs/decoding-workload-specification-for-effective-platform-engineering/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘要：这篇文章介绍了工作负载规范的概念和作用，它是一种标准化的方法，可以简化和统一不同环境下的软件部署，减轻开发者的认知负担。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在理想的情况下，开发人员专注于编写应用程序，而运维团队专注于将它们的工作负载无缝部署到不同的环境中。然而，现实远非如此。&lt;/p&gt;
&lt;p&gt;开发人员经常难以理解每个部署目标的细微差别，这增加了他们的认知负担。例如，他们可能在本地开发中使用 Docker Compose，但他们的工作负载可能在 Kubernetes 环境中部署。这种差距可能导致错误和不一致，影响工作负载的开发和部署。&lt;/p&gt;
&lt;p&gt;这就是为什么有迫切需要通过内部开发者平台（IDP）的标准化方法来配置工作负载。平台工程试图通过提供工具来管理工作负载来解决这个问题。&lt;/p&gt;
&lt;p&gt;在这篇博文中，我们将深入探讨工作负载规范的复杂性，这有助于简化代码从一个环境过渡到另一个环境，并减轻开发人员的认知负担。听起来激动人心吗？让我们深入了解。&lt;/p&gt;
&lt;h2 id=&#34;了解工作负载规范&#34;&gt;了解工作负载规范&lt;/h2&gt;
&lt;p&gt;工作负载规范充当软件开发和部署的指南。它是一种结构化的蓝图，概述了工作负载所需的各种配置、应用程序的资源要求、依赖关系和缩放策略等。这通过使部署过程保持一致和准确，促使无错误和高效的工作负载而简化。&lt;/p&gt;
&lt;p&gt;让我们看一些突显对工作负载规范的需求的场景。&lt;/p&gt;
&lt;h3 id=&#34;一致的部署&#34;&gt;一致的部署&lt;/h3&gt;
&lt;p&gt;将工作负载部署到不同的环境意味着每个部署都变成一个独特的挑战。每个部署将具有不同的配置设置、缩放参数和资源要求。这可能导致不一致性和错误，使部署和迁移成为一场噩梦。使用工作负载规范，团队可以拥有遵循最佳实践的标准化模板，这不仅减少了错误，还实现了工作负载的一致部署。&lt;/p&gt;
&lt;h3 id=&#34;减少认知负担&#34;&gt;减少认知负担&lt;/h3&gt;
&lt;p&gt;开发人员处理多个环境，如演示、集成、生产等，他们需要在这些环境的不同配置上保持警惕。在部署到不同环境时，他们必须记住并应用这些变更到他们的工作负载，这会增加配置错误的风险。工作负载规范减轻了开发人员的认知负担，并作为工作负载的单一综合模板。&lt;/p&gt;
&lt;h3 id=&#34;更好的协作&#34;&gt;更好的协作&lt;/h3&gt;
&lt;p&gt;随着部署工作负载的多个环境的存在，开发和运维团队都需要正确满足需求。开发人员可能难以与运维团队沟通其工作负载的确切需求，而运维团队可能难以在不同环境中一致地实施这些配置。工作负载规范充当开发和运维团队的共同语言，促进协作和清晰沟通，从而实现更顺畅的工作流程。&lt;/p&gt;
&lt;p&gt;在了解了工作负载规范是什么以及为什么需要它们之后，我们将在以下部分探讨指定工作负载的各种可用选项。&lt;/p&gt;
&lt;h2 id=&#34;实际中的工作负载规范&#34;&gt;实际中的工作负载规范&lt;/h2&gt;
&lt;p&gt;采用工作负载规范提供了对前面讨论的挑战的实际解决方案。工作负载规范简化了配置、部署和管理工作负载的过程，促进了一致性、减少了错误，并提高了开发和运维团队之间的协作。&lt;/p&gt;
&lt;p&gt;有多种方式和工具可供您指定您的工作负载。在这一部分，我们将探讨三种流行的用于工作负载规范的开源选项以及如何使用它们。&lt;/p&gt;
&lt;h3 id=&#34;score&#34;&gt;Score&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/score-spec/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Score&lt;/a&gt; 是一个基于容器的、平台无关的工作负载规范。使用 Score，您可以为您的工作负载创建一个统一的定义，该定义可以使用 Score CLI 被翻译为其他平台，如 Helm 和 Docker Compose。&lt;/p&gt;
&lt;p&gt;它通过提供一个 &lt;code&gt;score.yaml&lt;/code&gt; 文件简化了工作负载描述，该文件自动化和标准化了配置生成。当与 Score 实现一起执行时，比如 &lt;code&gt;score-compose&lt;/code&gt; 或 &lt;code&gt;score-yaml&lt;/code&gt;，它会生成平台特定的配置文件，如 &lt;code&gt;docker-compose.yaml&lt;/code&gt; 和 Helm 的 &lt;code&gt;values.yaml&lt;/code&gt;。这些文件可以直接在相应的环境中执行，并且还可以进一步定制。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-score-工作负载规范&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Score 工作负载规范&#34; srcset=&#34;
               /blog/decoding-workload-specification/1_hu15981561161080674081.webp 400w,
               /blog/decoding-workload-specification/1_hu13488066546475214001.webp 760w,
               /blog/decoding-workload-specification/1_hu12302428453250903931.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/decoding-workload-specification/1_hu15981561161080674081.webp&#34;
               width=&#34;760&#34;
               height=&#34;320&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Score 工作负载规范
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;（图片来源：&lt;a href=&#34;https://github.com/score-spec/spec/raw/main/docs/images/how-score-works.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Score/GitHub Repo&lt;/a&gt;）&lt;/p&gt;
&lt;h4 id=&#34;score-到-yaml-示例&#34;&gt;Score 到 YAML 示例&lt;/h4&gt;
&lt;p&gt;如前所述，Score 提供了可以用来处理 &lt;code&gt;score.yaml&lt;/code&gt; 文件以生成特定工作负载配置文件的不同实现。我们将看看如何将 &lt;code&gt;score.yaml&lt;/code&gt; 转换为可以与 Helm&lt;/p&gt;
&lt;p&gt;一起使用的 &lt;code&gt;values.yaml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;以下是一个定义工作负载详细信息的示例 score.yaml 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;score.dev/v1b1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hello-world&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;while true; do echo Hello World!; sleep 5; done&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过运行 &lt;code&gt;score-helm run -f ./score.yaml -o ./values.yaml&lt;/code&gt; 命令，Score 会自动将您的 &lt;code&gt;score.yaml&lt;/code&gt; 文件转换为有效的 &lt;code&gt;values.yaml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- -&lt;span class=&#34;l&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;while true; do echo Hello World!; sleep 5; done&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/bin/sh&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;busybox&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以使用 &lt;code&gt;helm install hello --values ./values.yaml&lt;/code&gt; 部署工作负载。&lt;/p&gt;
&lt;p&gt;这样，您可以使用 Score 指定工作负载的单一规范，并将其转换为 Docker Compose、Helm 或自定义规范。&lt;/p&gt;
&lt;h4 id=&#34;使用-score-的好处&#34;&gt;使用 Score 的好处&lt;/h4&gt;
&lt;p&gt;在涉及工作负载规范时，Score 提供了实质性的好处。其中一些是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;声明性的&lt;/strong&gt;: Score 允许开发人员以声明性的方式定义其工作负载所需的资源。您可以声明工作负载所需的“什么”资源，而无需担心这些资源将如何被配置。 “如何”通常是一个特定于环境的实现，Score 会处理这个问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成&lt;/strong&gt;: 使用 Score 实现时，&lt;code&gt;score.yaml&lt;/code&gt; 文件可以被转换为可以无缝在不同环境中使用的规范，并成为您的工作流程的一部分。它为您提供了一个文件更改，Score 可以处理它，而不考虑底层技术栈的任何更改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请参阅 &lt;a href=&#34;https://docs.score.dev/docs/get-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Score 文档&lt;/a&gt; 以了解更多有关 Score 的信息并入门。&lt;/p&gt;
&lt;h3 id=&#34;acorn&#34;&gt;Acorn&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/acorn-io/runtime&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Acorn&lt;/a&gt; 是另一个用于在 Kubernetes 上部署应用程序的开源打包工具。它将 docker 镜像、设置和部署捆绑成一个 Acorn 镜像包。该包可以上传到任何 OCI 容器存储库，适用于在任何 Kubernetes 环境中部署。&lt;/p&gt;
&lt;p&gt;开发人员在 Acornfile 中描述应用程序的设置。该文件涵盖了应用程序的方面，而开发人员无需处理 Kubernetes yaml 文件的复杂性。您可以使用 Acorn CLI 在 Kubernetes 集群上创建、部署和管理 Acorn 镜像，从而简化在 Kubernetes 上部署应用程序的过程。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-acorn-工作流&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Acorn 工作流&#34; srcset=&#34;
               /blog/decoding-workload-specification/2_hu4041114785238639675.webp 400w,
               /blog/decoding-workload-specification/2_hu9896386050209054746.webp 760w,
               /blog/decoding-workload-specification/2_hu17720223673281256383.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/decoding-workload-specification/2_hu4041114785238639675.webp&#34;
               width=&#34;760&#34;
               height=&#34;336&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Acorn 工作流
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;（图片来源：&lt;a href=&#34;https://docs.acorn.io/assets/images/acorn.workflow-0fc70d0200340a9d8adf7c9a983616ab.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Acorn&lt;/a&gt;）&lt;/p&gt;
&lt;h4 id=&#34;acornfile-示例&#34;&gt;Acornfile 示例&lt;/h4&gt;
&lt;p&gt;Acornfile 遵循类似 yaml 的熟悉语法，因此作为开发人员，您无需学习任何新东西。该模板包含不同组件，如容器、卷、密码、作业、服务、权限等组件，&lt;a href=&#34;https://docs.acorn.io/authoring/structure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;定义了工作负载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;以下是一个简单的 Acornfile，其中包含一个 Nginx 容器和一个在屏幕上打印消息的 index.html 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;nginx&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports: publish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;80/http&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;// 简单的 index.html 文件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;/usr/share/nginx/html/index.html&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;My First Acorn!&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以使用 &lt;code&gt;acorn run .&lt;/code&gt; 部署上面的 Acornfile，Acorn 将会将该应用程序部署到目标 Kubernetes 集群，并为您配置网络和存储。因此，即使不了解 Helm，您也可以将应用程序部署到 Kubernetes 集群。&lt;/p&gt;
&lt;h4 id=&#34;使用-acorn-的好处&#34;&gt;使用 Acorn 的好处&lt;/h4&gt;
&lt;p&gt;摘要：Acorn 作为工作负载规范和应用打包工具，为开发人员和 DevOps 团队提供了引人注目的优势。其中一些包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应用级定义&lt;/strong&gt;：开发人员可以使用 Acornfile 不仅定义基础设施级结构，还可以定义应用级配置。从环境变量和秘密到服务地址和端口，Acornfile 允许您从单个文件定义所有所需配置，为应用部署带来结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OCI 兼容镜像&lt;/strong&gt;：在容器领域，OCI 符合性是一个关键标准，确保容器具有互操作性并可在不同容器运行时上运行。包含 Docker 镜像、配置和部署规范的 Acorn 镜像遵循 OCI 标准，简化了部署过程，提高了应用的可移植性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可以阅读更多关于&lt;a href=&#34;https://docs.acorn.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Acorn&lt;/a&gt;的信息。&lt;/p&gt;
&lt;h3 id=&#34;dagger&#34;&gt;Dagger&lt;/h3&gt;
&lt;p&gt;如果您是一位正在构建自定义工具以统一组织内持续交付的平台工程师，那么&lt;a href=&#34;https://github.com/dagger/dagger&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dagger&lt;/a&gt;是一个值得探索的好选择。Dagger 允许您使用与应用程序相同的语言编写工作流，从而使其更容易更快速。它将您的流水线作为标准 OCI 容器运行。&lt;/p&gt;
&lt;p&gt;您可以使用基于您使用的编程语言的 Dagger SDK 来准备以编程方式执行工作流。在撰写本文时，Dagger 具有&lt;a href=&#34;https://docs.dagger.io/sdk/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;/a&gt;、&lt;a href=&#34;https://docs.dagger.io/sdk/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt;和&lt;a href=&#34;https://docs.dagger.io/sdk/nodejs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NodeJS&lt;/a&gt; SDK，可以供使用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-dagger-工作流程&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Dagger 工作流程&#34; srcset=&#34;
               /blog/decoding-workload-specification/3_hu7121501958501870705.webp 400w,
               /blog/decoding-workload-specification/3_hu16049831539834598517.webp 760w,
               /blog/decoding-workload-specification/3_hu6587926371472626340.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/decoding-workload-specification/3_hu7121501958501870705.webp&#34;
               width=&#34;760&#34;
               height=&#34;220&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Dagger 工作流程
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;（图片来源：&lt;a href=&#34;https://docs.dagger.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dagger 的工作原理？&lt;/a&gt;）&lt;/p&gt;
&lt;h4 id=&#34;dagger-流水线示例&#34;&gt;Dagger 流水线示例&lt;/h4&gt;
&lt;p&gt;由于 Dagger 允许您使用自己选择的语言编写流水线，我们将快速了解如何使用&lt;a href=&#34;https://docs.dagger.io/sdk/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dagger Python SDK&lt;/a&gt;。在安装了 SDK 后，您可以创建一个类似下面的 Python 文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;anyio&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;dagger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dagger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dagger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;log_output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;client&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;container&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# 拉取容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;python:3.11-slim-buster&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;c1&#34;&gt;# 获取 Python 版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-V&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello from Dagger and &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;anyio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的文件基本上创建了一个 Dagger 客户端，充当与 Dagger 引擎的接口。它还从一个镜像初始化了一个新的容器（在这种情况下是 Python 3.11 slim），该容器返回一个容器。然后，使用此容器执行指定的命令。&lt;/p&gt;
&lt;p&gt;通过使用 &lt;code&gt;dagger run python test.py&lt;/code&gt; 执行此命令，它将创建一个容器并执行命令，然后返回结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello from Dagger and Python 3.11.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;您可以配置容器以满足工作负载所需的不同配置，Dagger 将为每次创建这些容器，从而提供一致的环境。&lt;/p&gt;
&lt;h4 id=&#34;使用-dagger-的好处&#34;&gt;使用 Dagger 的好处&lt;/h4&gt;
&lt;p&gt;Dagger 使开发人员更容易将流水线作为代码实现，并始终提供一致的环境。以下是使其脱颖而出的一些优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可移植性&lt;/strong&gt;：Dagger 的最大优势在于可移植性。使用 Dagger 创建的工作流可以在本地机器上执行，任何容器托管服务上执行，或者在服务器上执行。这消除了对广泛配置更改的需求，并确保更平稳和一致的部署。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跨语言支持&lt;/strong&gt;：Dagger 支持使用您喜欢的语言构建工作流，从而使团队能够利用彼此的工具和资源，而无需学习新语言。这允许多样化的团队在不学习新技术的情况下一起使用他们喜欢的技术栈，从而加速开发周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;您可以参考&lt;a href=&#34;https://docs.dagger.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dagger 文档&lt;/a&gt;了解有关使用 Dagger 创建工作流的更多信息。&lt;/p&gt;
&lt;p&gt;这些是一些流行的开源工具，可以用来指定工作负载。我们理解并不是每个人都有相同的工作负载要求，但这是否意味着您应该构建自己的工具来定义和管理工作负载呢？&lt;/p&gt;
&lt;h2 id=&#34;工作负载规范的开源工具与自己动手---该选择哪一个&#34;&gt;工作负载规范的开源工具与自己动手 - 该选择哪一个？&lt;/h2&gt;
&lt;p&gt;在本博客文章的前几节中，我们讨论了开源解决方案。但并不总是一切都符合您的需求，这时您可能需要考虑构建一些符合您需求的特定工具。&lt;/p&gt;
&lt;p&gt;然而，在选择开源解决方案和自己动手解决方案之间做出决策可能是关键的。虽然自己动手可能看起来是一个诱人的选择，您可以完全掌控一切，但它可能导致额外的责任。&lt;/p&gt;
&lt;p&gt;例如，构建和维护自定义解决方案可能会降低团队的生产力，使他们的注意力从核心开发任务转移。此外，自己动手的解决方案通常需要持续的维护和更新，未能跟上这些可能导致漏洞和兼容性问题的更新可能会产生问题。&lt;/p&gt;
&lt;p&gt;以下是关于&lt;strong&gt;为什么选择开源解决方案更好&lt;/strong&gt;的一些建议。&lt;/p&gt;
&lt;h3 id=&#34;最佳资源利用&#34;&gt;最佳资源利用&lt;/h3&gt;
&lt;p&gt;如果选择自己构建工作负载规范工具，您很可能会花费大量时间和资源。您不仅需要资源来构建它，还需要资源来维护它。自己动手的解决方案将需要持续的关注以解决错误，实施新功能，并适应不断变化的需求。&lt;/p&gt;
&lt;h3 id=&#34;利用最佳实践&#34;&gt;利用最佳实践&lt;/h3&gt;
&lt;p&gt;创建自己动手的解决方案可能能够提供您所需的内容，但您可能会错过行业最佳实践。由于这些原因，您可能会牺牲提高效率和质量的已建立的实践。这样的工具可能缺乏一些优化，从而导致效率较低的结果。&lt;/p&gt;
&lt;h3 id=&#34;避免重复造轮子&#34;&gt;避免重复造轮子&lt;/h3&gt;
&lt;p&gt;当您已经有一款高效且功能丰富的产品时，为什么要从零开始构建呢？选择开源解决方案使您能够利用一个精心构建的产品，它将为您节省时间和资源，并为您提供行业最佳实践、社区支持和专业知识。仍然想要重新发明轮子吗？&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;随着环境数量的增加，开发人员通常需要学习每个环境的细微差别以部署其应用程序。这就是工作负载规范派上用场的地方。它们定义了一个蓝图，允许开发人员指定一个规范并将其应用程序部署到不同的环境中，而无需额外的认知负担。&lt;/p&gt;
&lt;p&gt;Score、Acorn 和 Dagger 等工具通过提高开发人员的生产力来简化创建工作负载规范的流程。这些开源工具帮助开发人员和 DevOps 团队轻松地将工作负载部署到不同的环境中。&lt;/p&gt;
&lt;p&gt;尽管构建自己的解决方案可能很诱人，但开源解决方案提供了业界领先的功能，同时为您节省了时间和精力。在这方面，我们在&lt;a href=&#34;https://www.infracloud.io/platform-engineering-consulting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InfraCloud 可以提供定制的解决方案&lt;/a&gt;来管理您的工作负载。&lt;/p&gt;
&lt;p&gt;此外，欢迎在此博客文章中与我分享您的想法，以及对平台工程的看法。通过&lt;a href=&#34;https://www.linkedin.com/in/atulpriyasharma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LinkedIn&lt;/a&gt;或&lt;a href=&#34;https://twitter.com/TheTechMaharaj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;与我联系。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
