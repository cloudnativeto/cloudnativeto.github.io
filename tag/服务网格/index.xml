<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服务网格 | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</link>
      <atom:link href="https://cloudnativecn.com/tag/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/index.xml" rel="self" type="application/rss+xml" />
    <description>服务网格</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 28 Aug 2024 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>服务网格</title>
      <link>https://cloudnativecn.com/tag/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC/</link>
    </image>
    
    <item>
      <title>在 Kubernetes 中实现 mTLS：选项与推荐</title>
      <link>https://cloudnativecn.com/blog/mtls-kubernetes/</link>
      <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://cloudnativecn.com/blog/mtls-kubernetes/</guid>
      <description>&lt;p&gt;在与 Kubernetes 用户的对话中，经常会听到这样一句话：“我只想让我的所有流量在 Kubernetes 中实现 mTLS 加密。”有时，这种要求还会加上一些附加条件，比如“……但不要涉及服务网格的复杂性。”&lt;/p&gt;
&lt;p&gt;这是一个合理的需求，市面上有很多解决方案，各自有不同的取舍。在本文中，我将介绍几种选择，并提供一些建议。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么要求是“mTLS”，而不是更广泛的“加密”？原因有很多。有些人可能已经对各种加密机制进行了研究，并决定使用 mTLS，而有些人可能对其他选项不了解。在本文中，我将主要关注 mTLS。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;为什么选择-mtls&#34;&gt;为什么选择 mTLS&lt;/h2&gt;
&lt;p&gt;在深入探讨 mTLS 的最佳方案之前，我们有必要先理解为什么要使用它。&lt;/p&gt;
&lt;p&gt;mTLS 代表双向 TLS，这与互联网上大多数使用的加密（如 &lt;code&gt;https://&lt;/code&gt;）类似，但它是双向的。&lt;/p&gt;
&lt;p&gt;在标准的互联网场景中，浏览器会验证目标网站的 TLS 证书，以确认 &lt;code&gt;bank.com&lt;/code&gt; 确实由 &lt;code&gt;bank.com&lt;/code&gt; 操作，而不是遭遇&lt;a href=&#34;https://en.wikipedia.org/wiki/Man-in-the-middle_attack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中间人攻击（MITM）&lt;/a&gt;。网站也可能会验证用户，但通常是在应用层进行，而不是通过 TLS。&lt;/p&gt;
&lt;p&gt;双向 TLS 则是类似的机制，但&lt;strong&gt;客户端&lt;/strong&gt;也会提供一个证书，该证书需要被服务器验证。浏览器技术上也支持这种方式，但由于操作上的复杂性，实际应用非常少。&lt;/p&gt;
&lt;p&gt;在 Kubernetes 集群（或其他基础设施）内部使用双向 TLS 的好处与在互联网上的应用类似。它提供了&lt;strong&gt;身份验证&lt;/strong&gt;（双方都能证明自己的身份）、&lt;strong&gt;机密性&lt;/strong&gt;（窃听者无法看到交换的数据）、以及&lt;strong&gt;完整性&lt;/strong&gt;（数据在传输中不会被篡改）。&lt;/p&gt;
&lt;p&gt;这些属性是实现[零信任](&lt;a href=&#34;https://www.cloudflare.com/learning/security/glossary/what-is-zero-trust/#:~:text=Zero&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cloudflare.com/learning/security/glossary/what-is-zero-trust/#:~:text=Zero&lt;/a&gt; Trust security is an,outside of the network perimeter.)安全策略的重要一步。此外，它们也是满足各种合规要求（无论是公司内部政策还是政府标准，如&lt;a href=&#34;https://www.nist.gov/standardsgov/compliance-faqs-federal-information-processing-standards-fips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FIPS&lt;/a&gt;）的常见要求。&lt;/p&gt;
&lt;h2 id=&#34;实现-mtls-的选项&#34;&gt;实现 mTLS 的选项&lt;/h2&gt;
&lt;p&gt;一旦你决定要使用 mTLS，你需要选择如何去实现它。这里有几种不同的方法。&lt;/p&gt;
&lt;h3 id=&#34;自行实现&#34;&gt;自行实现&lt;/h3&gt;
&lt;p&gt;传统的方法是为所有应用程序配置证书，并修改应用程序以使用这些证书。这在小规模环境中可能还算简单，但在大规模环境中则极具挑战性。主要问题如下：&lt;/p&gt;
&lt;p&gt;首先，需要管理证书的配置。这包括命名方案的制定、信任根的分发、证书的签发、确保证书的轮换和更新等。工具如 &lt;a href=&#34;https://cert-manager.io/docs/usage/csi-driver/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;cert-manager&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&#34;https://spiffe.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;SPIRE&lt;/code&gt;&lt;/a&gt; 可以帮助解决部分问题。但根据我的经验，许多用户在采用这种方法时，往往需要修改已有的证书基础设施以适应 Kubernetes。&lt;/p&gt;
&lt;p&gt;在管理好证书后，还需要修改应用程序以开始使用 TLS，并正确发送和验证对等证书。对于大型的多语言部署来说，这可能是一个挑战。虽然让一个应用程序开始使用 TLS 通常是相对简单的，但往往会遇到各种棘手的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你无法原子性地更改整个集群。在部分状态下如何处理？&lt;/li&gt;
&lt;li&gt;如何确保所有流量都在使用 TLS，而不仅仅是某些子集？应用程序可能有多个入口和出口点，是否全部覆盖？&lt;/li&gt;
&lt;li&gt;如何验证对等证书？是否有跨应用程序的通用逻辑？是否支持所有使用的语言？是否在所有应用中保持更新？&lt;/li&gt;
&lt;li&gt;所有应用程序是否都支持 TLS？是否支持&lt;strong&gt;双向&lt;/strong&gt; TLS？是否支持你的&lt;a href=&#34;https://spiffe.io/docs/latest/spiffe-about/spiffe-concepts/#spiffe-id&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;证书方案&lt;/a&gt;？&lt;/li&gt;
&lt;li&gt;公司范围内的每个应用程序代码更改的开发和推出需要多长时间？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，常常会使用一些更高层的选项来处理这些问题。&lt;/p&gt;
&lt;h3 id=&#34;基于-sidecar-的服务网格&#34;&gt;基于 Sidecar 的服务网格&lt;/h3&gt;
&lt;p&gt;采用双向 TLS 的最常见方法之一是基于 Sidecar 的服务网格架构。&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt; 和 &lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt; 是其中最受欢迎的两个选项。&lt;/p&gt;
&lt;p&gt;从高层次上来说，与其修改应用程序以在代码中处理 TLS，不如在每个应用程序旁边部署一个小型网络代理。这个代理可以做很多事情（请查看相关项目的文档！），但对于本文而言，重要的是它们可以自动为你处理双向 TLS。这意味着你可以在不更改应用程序的情况下自动为网格中的所有工作负载之间的流量启用双向 TLS。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-istio-sidecar-架构概述&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Istio Sidecar 架构概述&#34;
           src=&#34;https://cloudnativecn.com/blog/mtls-kubernetes/arch.svg&#34;
           loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Istio Sidecar 架构概述
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;至少从我熟悉的 Istio 和 Linkerd 的角度来看，这些解决方案都能处理上面列出的&lt;a href=&#34;https://blog.howardjohn.info/posts/mtls-kubernetes/#do-it-yourself&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;棘手问题&lt;/a&gt;。特别值得注意的是迁移案例。这两个项目都会根据对等方是否支持 TLS，自动支持发送和接受明文和 TLS。完成迁移（如果可能的话）后，可以严格限定只使用双向 TLS。&lt;/p&gt;
&lt;p&gt;这种方法是 Kubernetes 中广泛部署双向 TLS 的最常见选择；我估计在生产环境中的使用率超过95%。&lt;/p&gt;
&lt;p&gt;尽管它成功地解决了很多问题，但也存在一些摩擦点。有时服务网格被认为过于复杂或资源消耗过高（CPU/内存或延迟）。许多这些担忧与服务网格的功能超出 mTLS 的范围有关；如果你只需要 mTLS，这种方法可能会显得大材小用。&lt;/p&gt;
&lt;h3 id=&#34;基于节点的-ambient-模式&#34;&gt;基于节点的 Ambient 模式&lt;/h3&gt;
&lt;p&gt;Sidecar 方法为提供与 mTLS 无关的功能增加了额外的复杂性，这促使了服务网格新架构的开发： &lt;a href=&#34;https://istio.io/latest/docs/ambient/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient 模式&lt;/a&gt;。在这种架构中，部署了一个每节点代理来自动处理双向 TLS。目前，只有 Istio 提供这种方法，所以我将重点介绍它。&lt;/p&gt;
&lt;p&gt;Istio Ambient 专门设计来满足“我只想要 Kubernetes 上的 mTLS”这一用例。几乎每一个设计决策都源于这一初始目标。虽然服务网格的全套功能仍然存在，但它提供了一个从“原始 Kubernetes”到“全局 mTLS”再到“全功能服务网格”的平滑过渡，详细内容可以参阅&lt;a href=&#34;https://blog.howardjohn.info/posts/flattening-curve/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我之前的文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;由于这种模式针对双向 TLS 用例的特殊化设计，Ambient 模式往往更适合并能减轻 Sidecar 方法的一些顾虑。仅使用 Ambient 模式下的 mTLS 功能时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成本大幅降低：在某些部署中，Ambient 方法的 CPU 和内存消耗可能仅为 Sidecar 方法的 1%。&lt;/li&gt;
&lt;li&gt;性能有所提高：尽管这取决于应用程序，但在某些情况下，服务网格的延迟开销可能会&lt;a href=&#34;https://a-cup-of.coffee/blog/istio/#http-benchmark&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;减少约 20 倍&lt;/a&gt;。需要注意的是，这并不意味着你的应用程序会快 20 倍，而只是减少了开销；这可能意味着你的应用程序从 1000ms 应用延迟 + 1ms 网格延迟，变为 1000ms 应用延迟 + 0.05ms 网格延迟。因此，这可能只在你的应用程序已经非常高效时才更为重要。&lt;/li&gt;
&lt;li&gt;兼容性增强：服务网格的主要优势之一是 &lt;a href=&#34;https://istio.io/latest/blog/2021/zero-config-istio/#traffic-management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP 流量管理&lt;/a&gt;。虽然这通常是一个很好的功能，但它也从根本上改变了功能。Ambient 模式默认不执行此操作（但允许用户选择加入）。&lt;/li&gt;
&lt;li&gt;复杂性降低：由于节点代理是为提供 mTLS 而专门设计的，因此不会有其他功能带来的附带复杂性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体而言，Ambient 模式提供了一种简单的方法，可以在不带来太多负面影响的情况下部署全局 mTLS。对于那些只想要 mTLS 的用户来说，这是一个最好的起点，同时也提供了&lt;a href=&#34;https://istio.io/latest/docs/ambient/usage/waypoint/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;逐步采用其他网格功能&lt;/a&gt;的可能性。&lt;/p&gt;
&lt;h3 id=&#34;基于-cni-的方法&#34;&gt;基于 CNI 的方法&lt;/h3&gt;
&lt;p&gt;在这些讨论中偶尔会提到的一种选项是使用基于 CNI（容器网络接口）的方法。问题是：&lt;strong&gt;目前没有 CNI 支持双向 TLS！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么为什么会提到这种方法呢？原因有以下几点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CNI（通常）实现了 &lt;code&gt;NetworkPolicy&lt;/code&gt;。虽然这不提供 TLS 的大部分特性（包括加密、身份验证、完整性和机密性），但它通常是零信任网络架构的一部分，因此经常被提及。我在另一篇文章中也强调了&lt;a href=&#34;https://blog.howardjohn.info/posts/netpol-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NetworkPolicy 的一些问题&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CNI 通常实现其他网络加密机制。例如，&lt;a href=&#34;https://docs.tigera.io/calico/latest/network-policy/encrypt-cluster-pod-traffic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Calico 提供了 WireGuard&lt;/a&gt;，而 Cilium 提供了 &lt;a href=&#34;https://docs.cilium.io/en/latest/security/network/encryption-wireguard/#encryption-wg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WireGuard&lt;/a&gt; 和 &lt;a href=&#34;https://docs.cilium.io/en/latest/security/network/encryption-ipsec/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IPSec&lt;/a&gt;。虽然这些不是双向 TLS，但它们在功能上有一些重叠。虽然我认为这些往往被认为比实际更等同，但这已经超出了本文的范围——或许可以考虑写一篇文章对这些进行逐一比较。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cilium 提供了一项名为&lt;a href=&#34;https://docs.cilium.io/en/latest/network/servicemesh/mutual-authentication/mutual-authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;双向认证&lt;/a&gt;的功能。这通常被称为 mTLS，因为它受到了 mTLS 的启发，并有一些重叠的想法。然而，&lt;strong&gt;这并不是双向 TLS&lt;/strong&gt;。这并不是一个语义上的细微差别：它根本不提供 TLS。因此，它属于上述非 mTLS 的选项，需要进行评估。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你的需求是“Mutual TLS”，这种方法不可行。如果你的需求更灵活，这些选项中的一些可能会满足你的需求。&lt;/p&gt;
&lt;h2 id=&#34;建议&#34;&gt;建议&lt;/h2&gt;
&lt;p&gt;总结一下：“我只想在 Kubernetes 上实现 mTLS”，我该怎么办？&lt;/p&gt;
&lt;p&gt;对于大多数用户，&lt;a href=&#34;https://blog.howardjohn.info/posts/mtls-kubernetes/#node-basedambient-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ambient 模式&lt;/a&gt;可能是最合适的。这是以最小的成本、复杂度和开销，在整个集群上部署 mTLS 的最快方法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.howardjohn.info/posts/mtls-kubernetes/#sidecar-based-service-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Sidecar 的&lt;/a&gt;方法也是一个不错的选择，并且在业界得到了广泛应用。请记住，这些方法提供了大量超出 mTLS 的功能，这取决于你的使用场景，可能会显得大材小用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.howardjohn.info/posts/mtls-kubernetes/#do-it-yourself&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自行实现&lt;/a&gt;极具挑战性。虽然这可能适合拥有非常精确的要求和极其健壮的操作实践的组织，但这是最后的选择。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linkerd 服务网格的发布模式变更： 开源版只提供 Edge 版本，稳定版需付费使用</title>
      <link>https://cloudnativecn.com/blog/linkerd-revise-release-model/</link>
      <pubDate>Tue, 27 Feb 2024 09:05:42 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/linkerd-revise-release-model/</guid>
      <description>&lt;p&gt;Linkerd 是一个开源的服务网格项目，由 Buoyant 公司创建并维护。服务 网格是一种云原生技术，可以为微服务架构提供统一的网络层，实现服务间的安全、可观测和可控的通信。 Linkerd 以其轻量、快速和易用的特点，赢得了许多 开发者和企业的青睐。&lt;/p&gt;
&lt;p&gt;然而，Buoyant 公司最近宣布了一个重大的变化，即从 5 月开始，如果用户想要 下载和运行 Linkerd 的最新 稳定版本，就必须使用 Buoyant 的 商业分发版，即 Buoyant Enterprise for Linkerd（BEL）。&lt;strong&gt;BEL 是一个面向企业的 Linkerd 分发版，对于个人和 50 人以下的 企业免费使用，对于 50 人以上的企业，在生产环境中使用则需要付费。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一变化意味着，Linkerd 的 开源版本将只提供 Edge 版本，即每 10 天左右发布一次的预发布版本，用于测试新功能，但可能存在一些不兼容的变化。而 稳定版本，即经过充分测试和优化的版本，将只在 BEL 中提供。&lt;/p&gt;
&lt;p&gt;Buoyant 公司的 CEO William Morgan 在接受 The New Stack 的采访时解释了这一变化的原因，他表示，这是为了确保 Linkerd 为 企业用户提供顺畅的运行体验。他说，打包发布版本的工作非常耗费资源，甚至比维护和推进核心软件本身还要困难。他将这种做法比作 Red Hat 对 Linux 的运作方式，即提供 Fedora 作为早期发布版，同时维护其 核心 Linux 产品，即 Red Hat Enterprise Linux（RHEL）供 商业客户使用。&lt;/p&gt;
&lt;p&gt;“如果你想要我们投入到稳定版本的工作，这主要是围绕着不仅仅是测试，还有在后续版本中最小化变化的工作，这是非常艰难的工作，需要世界领先的分布式系统专家的投入，”Morgan 说，“那么，这就是黑暗的、专有的一面。”&lt;/p&gt;
&lt;p&gt;除了 Linkerd 的 核心功能外， BEL 还提供了一些额外的 专有工具，如动态的区域感知负载均衡器、用于 Linkerd 安装和升级的 Kubernetes Operator，以及一套用于管理授权策略的工具。BEL 的 企业版价格为每月每集群 2000 美元，不过对于非营利组织、高容量使用场景和其他特殊需求，也有一些折扣。&lt;/p&gt;
&lt;p&gt;Linkerd 的 开源项目由 Cloud Native Computing Foundation（CNCF）管理， 版权由 Linkerd 的作者本身持有。Linkerd 采用 Apache 2.0 许可证。&lt;/p&gt;
&lt;p&gt;Linkerd 的最新版本 2.15，于本周发布，包括了一些新的功能。其中之一是 “ 网格扩展”，它可以让用户将非 Kubernetes 的工作负载，如来自 虚拟机或裸机服务器的工作负载，通过使用基于 Rust 的微代理，纳入到服务 网格中。&lt;/p&gt;
&lt;p&gt;我们将继续关注 Linkerd 的发展，以及它对云原生社区的影响。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>API 网关、Kubernetes 网关和 Service Mesh 综合指南</title>
      <link>https://cloudnativecn.com/blog/gateway-and-mesh/</link>
      <pubDate>Sat, 06 May 2023 14:27:22 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/gateway-and-mesh/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://navendu.me/posts/gateway-and-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Comprehensive Guide to API Gateways, Kubernetes Gateways, and Service Meshes&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;摘要：本文介绍了 API 网关、Kubernetes 网关和服务网格的综合指南。API 网关和 Kubernetes 网关解决了边缘问题和 API 抽象化，而服务网格解决了服务之间的通信挑战。文章还介绍了如何在不同的网关中配置金丝雀部署，并讨论了 Kubernetes Gateway API 的发展和服务网格接口（SMI）规范。最后，文章提供了一些关于何时使用哪种网关的建议。&lt;/p&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;本文将介绍三种技术，它们分别是 API 网关、Kubernetes 网关和 Service Mesh，以及它们之间的区别，以及如何应用它们。&lt;/p&gt;
&lt;h2 id=&#34;api-网关&#34;&gt;API 网关&lt;/h2&gt;
&lt;p&gt;API 网关是一个连接客户端和 API 的中介，它接收所有客户端请求，将它们转发到所需的 API，并将响应返回给客户端。&lt;/p&gt;
&lt;p&gt;它基本上是一个具有许多功能的反向代理。&lt;/p&gt;
&lt;p&gt;除此之外，API 网关还可以具有诸如身份验证、安全性、细粒度流量控制和监控等功能，使 API 开发人员只需专注于业务需求。&lt;/p&gt;
&lt;p&gt;有许多 API 网关解决方案可供选择。一些受欢迎的免费和开源解决方案包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/apache/apisix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache APISIX&lt;/a&gt;&lt;/strong&gt;：一个高性能、可扩展、云原生 API 网关，构建于 Nginx 之上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/solo-io/gloo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gloo Edge&lt;/a&gt;&lt;/strong&gt;：一个基于 Envoy 代理构建的 API 网关。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/kong/kong&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kong&lt;/a&gt;&lt;/strong&gt;：一个可插拔的 API 网关，也是基于 Nginx 构建的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/TykTechnologies/tyk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tyk&lt;/a&gt;&lt;/strong&gt;：一个使用 Go 编写的 API 网关，支持 REST、GraphQL、TCP 和 gRPC 协议。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/envoyproxy/gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy Gateway&lt;/a&gt;&lt;/strong&gt;：一个基于 Envoy 代理构建的 API 网关。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;云平台如 &lt;a href=&#34;https://cloud.google.com/api-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCP&lt;/a&gt;，&lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AWS&lt;/a&gt; 和 &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/api-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure&lt;/a&gt; 也有其自己的专有 API 网关。&lt;/p&gt;
&lt;p&gt;API 网关、Kubernetes 网关和 Service Mesh 支持金丝雀部署，即在向大多数用户推出新软件版本之前，逐渐将其推向一小部分用户。&lt;/p&gt;
&lt;p&gt;以下示例显示如何在 Apache APISIX 中配置金丝雀部署。&lt;/p&gt;
&lt;h3 id=&#34;使用-api-网关进行金丝雀部署&#34;&gt;使用 API 网关进行金丝雀部署&lt;/h3&gt;
&lt;p&gt;您可以使用以下配置向 &lt;a href=&#34;https://apisix.apache.org/docs/apisix/admin-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;APISIX 管理 API&lt;/a&gt; 发送请求：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl &amp;lt;http://127.0.0.1:9180/apisix/admin/routes/1&amp;gt; &lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-H &lt;span class=&#34;s1&#34;&gt;&amp;#39;X-API-KEY: edd1c9f034335f136f87ad84b625c8f1&amp;#39;&lt;/span&gt; -X PUT -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;uri&amp;#34;:&amp;#34;/*&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;plugins&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;traffic-split&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      &amp;#34;rules&amp;#34;:[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;          &amp;#34;weighted_upstreams&amp;#34;:[
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;              &amp;#34;upstream&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                &amp;#34;name&amp;#34;:&amp;#34;api-v1&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                &amp;#34;type&amp;#34;:&amp;#34;roundrobin&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                &amp;#34;nodes&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                  &amp;#34;api-v1:8080&amp;#34;:1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;              },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;              &amp;#34;weight&amp;#34;:95
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;              &amp;#34;weight&amp;#34;:5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;          ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  &amp;#34;upstream&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;type&amp;#34;:&amp;#34;roundrobin&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;nodes&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      &amp;#34;api-v2:8080&amp;#34;:1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;APISIX 将把 95% 的流量路由到 api-v1 服务，5% 的流量路由到 api-v2 服务。&lt;/p&gt;
&lt;h2 id=&#34;kubernetes-gateway&#34;&gt;Kubernetes Gateway&lt;/h2&gt;
&lt;p&gt;在 Kubernetes 中，您的 API 是在集群中部署的 pod 和 service。然后您使用 Kubernetes 网关将外部流量定向到您的集群。&lt;/p&gt;
&lt;p&gt;Kubernetes 为此提供了两个 API，即 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress API&lt;/a&gt; 和 &lt;a href=&#34;https://gateway-api.sigs.k8s.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gateway API&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-kubernetes-网关&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;Kubernetes 网关&#34; srcset=&#34;
               /blog/gateway-and-mesh/kubernetes-gateway_hu_de91dabc1f5c950b.webp 400w,
               /blog/gateway-and-mesh/kubernetes-gateway_hu_650c6b38e203e9f7.webp 760w,
               /blog/gateway-and-mesh/kubernetes-gateway_hu_3ba9f7070373bf54.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gateway-and-mesh/kubernetes-gateway_hu_de91dabc1f5c950b.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      Kubernetes 网关
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-ingress-api&#34;&gt;Kubernetes Ingress API&lt;/h3&gt;
&lt;p&gt;Ingress API 的创建是为了克服默认服务类型（&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NodePort&lt;/a&gt; 和 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LoadBalancer&lt;/a&gt;）的限制，引入了路由和 SSL 终止等功能。它还标准化了如何将 Kubernetes 服务公开给外部流量。&lt;/p&gt;
&lt;p&gt;它由 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress&lt;/a&gt; 和 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress 控制器&lt;/a&gt; 两个组件组成。&lt;/p&gt;
&lt;p&gt;Ingress Kubernetes 本地对象定义了一组规则，用于外部流量访问您的服务。&lt;/p&gt;
&lt;p&gt;以下示例配置演示了如何在 Kubernetes Ingress 对象中基于 URI 路径路由流量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-routes&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingressClassName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apisix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Exact&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Exact&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ingress 控制器实现这些规则，并使用反向代理将流量路由到集群中。&lt;/p&gt;
&lt;p&gt;有超过 &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/#additional-controllers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;20 个 Ingress 控制器实现&lt;/a&gt;。APISIX 有一个 &lt;a href=&#34;https://apisix.apache.org/docs/ingress-controller/next/getting-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ingress 控制器&lt;/a&gt;，它包装在 APISIX API 网关周围，作为 Kubernetes Ingress 工作。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-apisix-ingress&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;APISIX Ingress&#34; srcset=&#34;
               /blog/gateway-and-mesh/1_hu_3ae8070125a27779.webp 400w,
               /blog/gateway-and-mesh/1_hu_4b44615447fce13.webp 760w,
               /blog/gateway-and-mesh/1_hu_fb6f70a15398e488.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gateway-and-mesh/1_hu_3ae8070125a27779.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      APISIX Ingress
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;APISIX Ingress 控制器将 Kubernetes Ingress 对象转换为 APISIX 配置。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-apisix-ingress-控制器翻译配置&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;APISIX Ingress 控制器翻译配置&#34; srcset=&#34;
               /blog/gateway-and-mesh/2_hu_87669392f62971f4.webp 400w,
               /blog/gateway-and-mesh/2_hu_4c524c87686d4666.webp 760w,
               /blog/gateway-and-mesh/2_hu_f53ec54d0d97a9e9.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gateway-and-mesh/2_hu_87669392f62971f4.webp&#34;
               width=&#34;760&#34;
               height=&#34;335&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      APISIX Ingress 控制器翻译配置
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;然后，APISIX 实现此配置。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-使用-kubernetes-ingress-api-的金丝雀发布&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;使用 Kubernetes Ingress API 的金丝雀发布&#34; srcset=&#34;
               /blog/gateway-and-mesh/3_hu_79972800b42f5aab.webp 400w,
               /blog/gateway-and-mesh/3_hu_e603d6cfa44c8418.webp 760w,
               /blog/gateway-and-mesh/3_hu_7f13eb57c720b472.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gateway-and-mesh/3_hu_79972800b42f5aab.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      使用 Kubernetes Ingress API 的金丝雀发布
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;您可以将 APISIX 与任何其他 Ingress 控制器交换，因为 Ingress API 与任何特定实现无关。这种厂商中立性对于简单的配置非常有效。但是，如果您想要进行像金丝雀部署之类的复杂路由，则必须依赖厂商特定的注释。&lt;/p&gt;
&lt;p&gt;以下示例显示了如何使用 &lt;a href=&#34;https://docs.nginx.com/nginx-ingress-controller/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nginx Ingress&lt;/a&gt; 配置金丝雀部署。此处使用的 &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md#canary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义注释&lt;/a&gt; 是特定于 Nginx 的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.k8s.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Ingress&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nginx.ingress.kubernetes.io/canary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nginx.ingress.kubernetes.io/canary-weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-canary&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上配置将 5% 的流量路由到 api-v2 服务。&lt;/p&gt;
&lt;p&gt;除了注释之外，像 APISIX 这样的 Ingress 控制器还具有自定义的 Kubernetes CRD，以克服 Ingress API 的限制。&lt;/p&gt;
&lt;p&gt;以下示例使用 APISIX CRD &lt;a href=&#34;https://apisix.apache.org/docs/ingress-controller/concepts/apisix_route/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ApisixRoute&lt;/a&gt; 配置金丝雀部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;apisix.apache.org/v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ApisixRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-canary&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;/*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backends&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;serviceName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servicePort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些自定义 CRD 使配置 Ingress 更容易，并利用了 API 网关底层的全部功能，但代价是可移植性。&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-gateway-api&#34;&gt;Kubernetes Gateway API&lt;/h3&gt;
&lt;p&gt;Gateway API 是一个新的 Kubernetes 对象，旨在“修复”Ingress API。&lt;/p&gt;
&lt;p&gt;它借鉴了 Ingress 控制器开发的自定义 CRD，以添加基于 HTTP 标头的匹配、加权流量拆分和&lt;a href=&#34;https://gateway-api.sigs.k8s.io/#gateway-api-concepts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;其他功能&lt;/a&gt;，这些功能需要使用 Ingress API 的自定义专有注释。&lt;/p&gt;
&lt;p&gt;以下示例显示了如何使用 Kubernetes Gateway API 配置金丝雀部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1alpha2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-canary&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，任何 Ingress 控制器（实现了 Gateway API）都可以实现此配置。&lt;/p&gt;
&lt;p&gt;Gateway API 还对 Ingress API 进行了&lt;a href=&#34;https://navendu.me/posts/gateway-vs-ingress-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;许多改进&lt;/a&gt;，但它仍处于 alpha 阶段，Gateway API 实现经常会出现问题。&lt;/p&gt;
&lt;h2 id=&#34;服务网格&#34;&gt;服务网格&lt;/h2&gt;
&lt;p&gt;API 网关和 Kubernetes 网关在解决边缘问题并抽象化您的 API 时跨应用程序边界工作。&lt;/p&gt;
&lt;p&gt;服务网格解决了不同的挑战。&lt;/p&gt;
&lt;p&gt;服务网格更关注服务之间的通信（东西流量），而不是服务 - 客户端通信（南北流量）。&lt;/p&gt;
&lt;p&gt;通常，这是通过使用 API/服务的 sidecar 代理来实现的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-服务网格&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;服务网格&#34; srcset=&#34;
               /blog/gateway-and-mesh/4_hu_e85f16a2a9e140.webp 400w,
               /blog/gateway-and-mesh/4_hu_b25a27749a08b1ff.webp 760w,
               /blog/gateway-and-mesh/4_hu_8e17fc1331bcd9c0.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gateway-and-mesh/4_hu_e85f16a2a9e140.webp&#34;
               width=&#34;760&#34;
               height=&#34;383&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      服务网格
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这里，sidecar 代理处理服务之间的通信，而不是开发人员必须将网络逻辑编码到服务中。&lt;/p&gt;
&lt;p&gt;有很多服务网格可用。一些流行的如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;/a&gt;&lt;/strong&gt;：迄今为止最受欢迎的服务网格。它构建在 &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy proxy&lt;/a&gt; 之上，许多服务网格使用它。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://linkerd.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linkerd&lt;/a&gt;&lt;/strong&gt;：一种轻量级的服务网格，使用专门为 Linkerd 编写的 Rust 的 linkerd2-proxy。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://developer.hashicorp.com/consul/docs/connect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Consul Connect&lt;/a&gt;&lt;/strong&gt;：强调安全性和可观察性的服务网格。它可以使用内置代理或 Envoy。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;新的服务网格提供了与通过 &lt;a href=&#34;https://ebpf.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eBPF&lt;/a&gt; 直接使用内核的网络功能的 sidecar-based 服务网格的替代方案，如 &lt;a href=&#34;https://isovalent.com/blog/post/introducing-cilium-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-一个典型的服务网格需要-8-个代理来代表-8-个服务而像-cilium-这样基于-ebpf-的服务网格则不需要&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;一个典型的服务网格需要 8 个代理来代表 8 个服务，而像 Cilium 这样基于 ebpf 的服务网格则不需要。&#34; srcset=&#34;
               /blog/gateway-and-mesh/5_hu_977a5759635e5ba4.webp 400w,
               /blog/gateway-and-mesh/5_hu_fd170ab42ad0db37.webp 760w,
               /blog/gateway-and-mesh/5_hu_86d4cdb43271432b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gateway-and-mesh/5_hu_977a5759635e5ba4.webp&#34;
               width=&#34;760&#34;
               height=&#34;396&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      一个典型的服务网格需要 8 个代理来代表 8 个服务，而像 Cilium 这样基于 ebpf 的服务网格则不需要。
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;服务网格还具有基本的入口/出口网关，用于处理与服务之间的南北流量。入口网关是外部流量进入服务网格的入口点，出口网关允许网格内的服务访问外部服务。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-服务网格的入口和出口网关&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;服务网格的入口和出口网关&#34; srcset=&#34;
               /blog/gateway-and-mesh/6_hu_cbebb579b3440b70.webp 400w,
               /blog/gateway-and-mesh/6_hu_129c9033631b6d26.webp 760w,
               /blog/gateway-and-mesh/6_hu_c4637e281d26cee7.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gateway-and-mesh/6_hu_cbebb579b3440b70.webp&#34;
               width=&#34;760&#34;
               height=&#34;542&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      服务网格的入口和出口网关
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Apache APISIX 也有一个名为 &lt;a href=&#34;https://github.com/api7/Amesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amesh&lt;/a&gt; 的服务网格实现。它与 Istio 的控制平面一起使用 xDS 协议，替换 Sidecar 中的默认 Envoy 代理。&lt;/p&gt;
&lt;p&gt;服务网格使您可以配置金丝雀部署。例如，您可以将来自一个服务的请求拆分为另一个服务的两个版本。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-使用服务网格进行金丝雀部署&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;使用服务网格进行金丝雀部署&#34; srcset=&#34;
               /blog/gateway-and-mesh/7_hu_fb70a9d3bcb9a54d.webp 400w,
               /blog/gateway-and-mesh/7_hu_e141162012a6d99d.webp 760w,
               /blog/gateway-and-mesh/7_hu_308e4bc12140ece4.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/gateway-and-mesh/7_hu_fb70a9d3bcb9a54d.webp&#34;
               width=&#34;760&#34;
               height=&#34;428&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      使用服务网格进行金丝雀部署
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;以下示例显示了如何&lt;a href=&#34;https://istio.io/latest/docs/concepts/traffic-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 Istio 服务网格中配置金丝雀部署&lt;/a&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-virtual-service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-destination-rule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些配置是特定于 Istio 的。要切换到不同的服务网格，您必须创建一个不同但类似于供应商依赖的配置。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://smi-spec.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务网格接口&lt;/a&gt;（SMI）规范是为解决此可移植性问题而创建的。&lt;/p&gt;
&lt;p&gt;SMI &lt;a href=&#34;https://github.com/servicemeshinterface/smi-spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;规范&lt;/a&gt;是一组 Kubernetes CRD，服务网格用户可以使用它来定义应用程序，而无需绑定到服务网格实现。&lt;/p&gt;
&lt;p&gt;标准化尝试只有当所有项目都参与其中时才能起作用。但是，SMI 规范没有发生这种情况，&lt;a href=&#34;https://layer5.io/service-mesh-landscape#smi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;只有少数项目积极参与&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最近，&lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-network&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes SIG Network&lt;/a&gt;一直在发展 Gateway API 以支持服务网格。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gateway-api.sigs.k8s.io/contributing/gamma/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GAMMA（网关 API 用于网格管理和监管）倡议&lt;/a&gt;是一个专门的团队，拥有 Gateway API 项目的目标是“调查，设计和跟踪与服务网格技术和用例相关的网关 API 资源，语义和其他工件。”&lt;/p&gt;
&lt;p&gt;Gateway API 是 Ingress API 的自然下一步，但我们必须等待看看它如何适用于服务网格。Istio &lt;a href=&#34;https://istio.io/latest/blog/2022/gateway-api-beta/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;已宣布&lt;/a&gt;其打算将 Gateway API 用作所有流量管理的默认 API，并继续推动该项目的发展。&lt;/p&gt;
&lt;p&gt;下面的示例显示了&lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/traffic-shifting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何使用 Gateway API 在 Istio 中配置金丝雀部署&lt;/a&gt;。其基本思想是使用&lt;a href=&#34;https://gateway-api.sigs.k8s.io/v1alpha2/references/spec/#gateway.networking.k8s.io%2fv1beta1.ParentReference&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;parentRefs&lt;/a&gt;附加到其他服务而不是网关：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;gateway.networking.k8s.io/v1beta1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPRoute&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-canary&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;parentRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;backendRefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-b-v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;api-b-v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有&lt;a href=&#34;https://thenewstack.io/the-gateway-api-is-in-the-firing-line-of-the-service-mesh-wars/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一些担忧&lt;/a&gt;，即 GAMMA 项目可能会变得偏向于为一个特定项目的需求服务，而不是更大的社区，最终会导致其他项目使用自己的 API，类似于 Kubernetes Ingress API 之后的&lt;a href=&#34;https://navendu.me/posts/gateway-vs-ingress-api/#custom-crds--ingress-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;自定义 CRD 场景&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是，Gateway API 项目是标准化服务网格流量管理的最佳尝试。&lt;a href=&#34;https://smi-spec.io/blog/announcing-smi-gateway-api-gamma/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SMI 项目也加入了 GAMMA 倡议&lt;/a&gt;，具有共享愿景，并将帮助倡导服务网格项目对 Gateway API 的一致实现。&lt;/p&gt;
&lt;p&gt;其他项目，例如&lt;a href=&#34;https://docs.flagger.app/tutorials/gatewayapi-progressive-delivery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flagger&lt;/a&gt;和&lt;a href=&#34;https://github.com/argoproj-labs/rollouts-plugin-trafficrouter-gatewayapi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Argo Rollouts&lt;/a&gt;也已与 Gateway API 集成。&lt;/p&gt;
&lt;h2 id=&#34;应该使用什么&#34;&gt;应该使用什么？&lt;/h2&gt;
&lt;p&gt;这个问题只有一个正确的答案，“看你自己”。&lt;/p&gt;
&lt;p&gt;如果您正在开发 API 并需要身份验证、安全、路由或度量标准，那么最好使用 API 网关，而不是在您的 API 中自己构建。&lt;/p&gt;
&lt;p&gt;如果您想在 Kubernetes 环境中进行类似操作，那么您应该使用 Kubernetes 网关，而不是尝试在 Kubernetes 上使用 API 网关。值得庆幸的是，许多 API 网关也可以使用 Kubernetes 原生配置。&lt;/p&gt;
&lt;p&gt;但有时，API 网关+Ingress 控制器提供的功能可能对于 Kubernetes 环境来说过于复杂，您可能希望切换回简单的流量管理。&lt;/p&gt;
&lt;p&gt;另一方面，服务网格解决了完全不同的一组问题。它们还带有自己的网关来处理南北流量（通常足够），但还可以让您使用具有更多功能的自己的网关。&lt;/p&gt;
&lt;p&gt;通过 Kubernetes Gateway API 将 API 网关和服务网格的融合应该使应用程序开发人员更容易专注于解决问题，而不必担心底层实现。&lt;/p&gt;
&lt;p&gt;像 Apache APISIX 这样的项目使用相同的技术来构建 API 网关和服务网格，与这些规范很好地集成，激励厂商中立选择。&lt;/p&gt;
&lt;p&gt;您也可能不需要这些。您甚至可能&lt;a href=&#34;https://blog.frankel.ch/chopping-monolith/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;不需要微服务&lt;/a&gt;或分布式架构，但是当您需要它们时，网关和网格可以使您的生活变得更加轻松。&lt;/p&gt;
&lt;h2 id=&#34;另请参阅&#34;&gt;另请参阅&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://navendu.me/posts/gateway-vs-ingress-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;比较 Kubernetes 网关和 Ingress API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://navendu.me/posts/custom-plugins-in-apisix-ingress/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;APISIX Ingress 中的自定义插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://navendu.me/posts/kubernetes-gateway-with-apisix/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Gateway API 和 APISIX Ingress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Apache APISIX 借助服务网格实现统一技术栈的全流量管理</title>
      <link>https://cloudnativecn.com/blog/2022-service-mesh-summit-apache-apisix-mesh/</link>
      <pubDate>Tue, 18 Oct 2022 09:00:42 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/2022-service-mesh-summit-apache-apisix-mesh/</guid>
      <description>&lt;p&gt;在云原生快速发展的前提下，服务网格领域也开始逐渐火热。目前阶段，大家所熟知的服务网格解决方案很多，每种产品又各有其优势。因此在面对不同的行业或者业务背景时，每个人的选型想法都各不相同。&lt;/p&gt;
&lt;h2 id=&#34;服务网格现状和痛点&#34;&gt;服务网格现状和痛点&lt;/h2&gt;
&lt;p&gt;服务网格的出现其实跟目前业务架构的演进有很大关系。云原生趋势大涨后，大部分企业都开始转型做微服务。在这种背景之下，大家发现 App 开始变得越来越小，每个 App 里面都会一些通用的东西。所以就开始有一些想法“有没有一种技术可以把这些通用的东西沉淀下来”。于是，就出现了 Sidecar（边车）。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-1_hu_832eaa770d11e18a.webp 400w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-1_hu_ce34ba4c12739aa8.webp 760w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-1_hu_defcbd6aad0fb55b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-1_hu_832eaa770d11e18a.webp&#34;
               width=&#34;760&#34;
               height=&#34;461&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;有了 Sidecar 之后，就可以把一些诸如服务注册发现、流量管理、可观测性和安全防护等功能沉淀到其中，这样业务服务就可以专注于业务逻辑层面的开发。&lt;/p&gt;
&lt;p&gt;但是在出现 Sidecar 模式之后，在实践过程中人们也开始慢慢发现它的一些痛点，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方案众多，一旦选择就难以撤退&lt;/strong&gt;。目前市面上的服务网格方案众多，各种方案中各有差异。一旦确定了其中一个方案，基本就会一直使用下去。但如果在后续使用过程中发现方案无法满足相关业务迭代，再次更换时就会产生巨大的成本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;与基础设施整合成本高&lt;/strong&gt;。服务网格在落地实践中，通常会需要与基础设施进行整合，比如与之前的微服务架构、MQ 或者数据库等基础组件整合。一些遗留问题或者历史技术债务也会对整合过程产生一定的阻力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能损耗与资源的额外消耗&lt;/strong&gt;。目前阶段，不管你选择哪种服务网格方案，它都会存在一定的性能损耗。同时因为 Sidecar 的存在，在配置业务时，就需要为其额外分配资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扩展难度高&lt;/strong&gt;。一些服务网格方案在配置时，现有的配置方式无法进行协议或功能的扩展，同时也无法通过插拔方式进行自定义扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，在这种业务现状和痛点的催生中，我们就开始思考，是否可以有一种理想的服务网格方案，可以解决当前的现状和痛点呢？&lt;/p&gt;
&lt;h2 id=&#34;理想的服务网格应如何&#34;&gt;理想的服务网格应如何？&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-2_hu_bf0810e0877b8aa4.webp 400w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-2_hu_a197ad3e3bf8bc7c.webp 760w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-2_hu_29f751d698e22d3d.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-2_hu_bf0810e0877b8aa4.webp&#34;
               width=&#34;760&#34;
               height=&#34;411&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在面对相关业务场景时，我们对于服务网格的要求大概如上图所示，即从资源、性能、流量管理和扩展方向有多个维度的需求。当然除了这些之外，在其他层面也会有一些更细致的要求。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先&lt;strong&gt;使用体验&lt;/strong&gt;层面，要做到上手成本更低。因为真正用服务网格的不一定都是开发人员，可能运维人员也比较多。因此上手成本的高低，也是大家选择一个方案的因素之一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次在技术层面，&lt;strong&gt;控制面&lt;/strong&gt;的配置一定要易于上手，同时对于相关权限能进行严格且安全的管控，而且配置方式要更贴近大众层面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而在&lt;strong&gt;数据面&lt;/strong&gt;，最好是能原生支持多种协议甚至是自定义协议，因为你需要去考虑一些历史系统迁移所带来的问题。由于 Sidecar 的存在，也需要考虑其资源占用在可控范围内，这样可以有效控制成本。同时需要满足一些自定义需求，因此对扩展能力也提出了新的要求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后是在整个&lt;strong&gt;产品生态&lt;/strong&gt;内，不管是社区还是产品修复等，需要「及时响应」的速度去匹配。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;既然已经有了这么清晰的需求目标，接下来要做的就是去执行和打造这么一个接近理想型的方案了。&lt;/p&gt;
&lt;h2 id=&#34;基于-apisix-的服务网格方案&#34;&gt;基于 APISIX 的服务网格方案&lt;/h2&gt;
&lt;p&gt;Apache APISIX 是一个动态、实时、高性能的云原生 API 网关，提供负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等丰富的流量管理功能。&lt;/p&gt;
&lt;p&gt;目前全球已有数百家企业使用 Apache APISIX 处理关键业务流量，涵盖金融、互联网、制造、零售、运营商等等，比如美国航空航天局（NASA）、欧盟的数字工厂、中国航信、中国移动、腾讯、华为、微博、网易、贝壳找房、360、泰康、奈雪的茶等。因此，基于 APISIX 的服务网格方案将不止在使用程度上，在面向一些行业领域时，也将具有强需求。&lt;/p&gt;
&lt;p&gt;目前这套服务网格方案在架构的选择上，则是采取了控制面 Istio 配合数据面 APISIX 的组成结构。&lt;/p&gt;
&lt;p&gt;首先在控制面上，我们选择了 Istio。因为 Istio 是当下最为流行的服务网格方案，同时它的社区活跃，这使得几乎所有的主流云厂商都对 Istio 进行了支持，这也在一定程度上代表了目前的市场需求和方向。所以在控制面的选择上，我们并没有进行自研模块。而是选择了拥抱 Istio 这个目前更适合也拥有更高接受度的方案。&lt;/p&gt;
&lt;p&gt;而在数据面则是 Apache APISIX 需要发挥优势的部分。作为云原生的 API 网关，APISIX 作为 Istio 的数据面，在这套服务网格方案中究竟进行了哪些动作呢？&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-3_hu_981c4a5799f0b422.webp 400w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-3_hu_dcb9fa6ccf9a5347.webp 760w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-3_hu_b451f72ceb955a66.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-3_hu_981c4a5799f0b422.webp&#34;
               width=&#34;760&#34;
               height=&#34;461&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;熟悉 APISIX 的小伙伴们都知道 APISIX 是使用 etcd 进行数据存储的，但如果我们把 APISIX 作为 Sidecar 使用的话，它的配置从哪里来？这是需要考虑的问题。如果把 etcd 组件也放到 Sidecar 中，会发现整个资源消耗非常大，同时也不够灵活。&lt;/p&gt;
&lt;p&gt;所以在这个过程中，首先在 APISIX 中增加一个名为 xDS 的配置中心，让 APISIX 无需再使用 etcd。然后引入了上图中的 Amesh。Amesh 是一个 Go 编写的程序，编译成一个动态链接库，在 APISIX 启动时进行加载。其使用 xDS 协议与 Istio 进行交互，并将获取到的配置写入到 APISIX 的 xDS 配置中心中，进而生成具体的路由规则，最终使用 APISIX 完成对应请求的路由。&lt;/p&gt;
&lt;p&gt;经过如上架构的配置之后，可以实现如下效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使 Amesh 与 APISIX 保持生命周期一致，两者可以一起开启或关闭。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;得益于 APISIX 原生支持 xDS Discovery，彼此通过 xDS 协议进行转换数据，从而在资源消耗层面实现可控；相比原生 Istio 的 Envoy 方案，可以让资源对象更加轻量化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配合 CRD 对整套方案进行扩展，尤其对 Istio 还未支持的功能，通过 CRD 可以快速方便的扩展。比如对接 APISIX 最为丰富的 plugin 配置，便是通过 CRD 的方式进行配置的；通过将 controller 和 Istio 配合使用，最大发挥了 Istio 与 APISIX 服务网格方案的可扩展性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方案具体表现&#34;&gt;方案具体表现&lt;/h2&gt;
&lt;h3 id=&#34;性能提升明显&#34;&gt;性能提升明显&lt;/h3&gt;
&lt;p&gt;作为技术产品，数据永远是最直观和最有效的呈现方式。我们将 APISIX 和 Envoy 两者分别作为服务网格方案中的数据面，采用最多 5000 条路由的体量对其进行多种场景的压力测试，最终呈现了如下数据对比。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该测试场景为“匹配 5000 条路由中的第 3000 条路由”。由于测试场景较多，以下仅选取了匹配中间部分的路由进行描述，同时还有匹配头部路由和尾部路由的场景。数据太多不便展示，以下数据为 3000 条路由体量下的测试结果）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-4_hu_14387eae37b6dab4.webp 400w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-4_hu_7036ec12edf8319f.webp 760w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-4_hu_f3d937530e9881c5.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-4_hu_14387eae37b6dab4.webp&#34;
               width=&#34;760&#34;
               height=&#34;261&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;从上图数据可以看出，在 QPS 层面，面对同样的压力和相同机器配置时，APISIX 呈现出了 5 倍的性能提升。同时在请求延迟层面，APISIX 比 Envoy 降低了一个数量级，APISIX 的延迟在微秒级，而 Envoy 在毫秒级别。当然也能看到在这种测下，当 Envoy CPU 已经跑满的情况下，APISIX 的 CPU 消耗才仅为 50%。&lt;/p&gt;
&lt;h3 id=&#34;资源占用降低&#34;&gt;资源占用降低&lt;/h3&gt;
&lt;p&gt;在给服务网格方案注入 Sidecar 时，通常会额外消耗资源。而基于 APISIX 的这套方案，可以降低 60% 的资源消耗。为什么能做到这种程度呢？&lt;/p&gt;
&lt;p&gt;首先是配置按需下发。Istio 在面对 Sidecar 进行资源管理时，本身会自带一些按需下发的策略，比如根据 namespace 进行隔离，但这个过程会给用户操作带来额外的心智负担和管理难度。&lt;/p&gt;
&lt;p&gt;其次是配置本身是否精简。在 Envoy 中的路由配置时，可以通过 Dump 查看它的路由信息，你会发现实际可能没有那么多条路由，但是在 Envoy 中已经成千上万了。这就会带来很多影响，比如影响启动速度，造成一些配置的体积庞大，从而增加资源占用。&lt;/p&gt;
&lt;p&gt;而利用 APISIX 就能避免以上这些烦恼，APISIX 配置精简，降低了存储在内存中数据，加之本身的高性能，降低了 CPU 资源消耗。整套方案中的资源消耗降低了 60% 左右。&lt;/p&gt;
&lt;h3 id=&#34;学习成本低定制化能力强&#34;&gt;学习成本低，定制化能力强&lt;/h3&gt;
&lt;p&gt;APISIX 作为 Apache 软件基金会的活跃开源项目，在社区中提供了非常丰富的文档和学习资源，对于想要上手 APISIX 的朋友来说降低了学习成本。&lt;/p&gt;
&lt;p&gt;其次 APISIX 的源码是基于 Lua 实现的，Lua 语言其实比较容易看懂，因其本身属于轻量级脚本语言，查看 APISIX 源码就会更清晰易懂。&lt;/p&gt;
&lt;p&gt;最后就是基于 APISIX 的二次开发非常方便。当你想要定制针对自己业务进行自定义插件时，不止支持原生的 Lua 语言，也可以借助 APISIX 的 Plugin Runner 来实现类似 Python、Java、Go 甚至 Wasm 等更为熟悉的语言进行二次开发。&lt;/p&gt;
&lt;p&gt;而 APISIX 之所以生态强大，其实也跟产品的强扩展性分不开。&lt;/p&gt;
&lt;p&gt;APISIX 本身提供非常多的插件，涉及安全、日志、可观测性等等。这些插件在 APISIX 作为传统网关组件时，可以发挥地淋漓尽致。但是将 APISIX 配合控制面的 Istio 打造服务网格时，很多资源在 Istio 控制面不支持定义。那这个时候怎么办呢？&lt;/p&gt;
&lt;p&gt;所以就有了自定义 CRD 的出现。比如我们想要做一个故障注入的插件，实际上这个插件在 APISIX 早有提供，因此在这里只需额外配置几个参数即可。当然这里只是拿故障注入插件举例，像 APISIX 中还有安全认证、限流限速等常用插件都可以按照这样的方式接入，从而实现精细化管控。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-5_hu_9e1d4262be104ff8.webp 400w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-5_hu_45912bbf182863e3.webp 760w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-5_hu_e05a44ed5e105c82.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-5_hu_9e1d4262be104ff8.webp&#34;
               width=&#34;433&#34;
               height=&#34;760&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;

使用 CRD 这种方式最直接的好处就是它可以让扩展更加原生，使用声明式配置让用户更容易接受，同时不侵入 Istio 的原有配置，实现完美兼容。另一种好处是，对于已经使用 Istio 方案的用户迁移成本比较低。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;综上所述，基于 APISIX 的服务网格方案在上手体验上对于开发者或者使用者而言，更加方便易用同时便于拓展，同时也有着优异的性能表现与丰富的生态支持。得益于 APISIX 产品本身的能力特色，在插件和多协议层面下也拥有很好的功能支持。预计在年底，将为大家带来 APISIX 服务网格下一版本的更新，敬请期待！&lt;/p&gt;
&lt;h2 id=&#34;apisix-服务网格方案的未来展望&#34;&gt;APISIX 服务网格方案的未来展望&lt;/h2&gt;
&lt;p&gt;回过头来看，其实基于 APISIX 服务网格方案已经在朝着前文中提到的痛点进行逐一击破了，APISIX 服务网格也在朝着理想服务网格方案努力中。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-6_hu_3b3a6f51f182513d.webp 400w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-6_hu_da49b84c93beb939.webp 760w,
               /blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-6_hu_17fef2451ec2a85e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/2022-service-mesh-summit-apache-apisix-mesh/apisix-service-6_hu_3b3a6f51f182513d.webp&#34;
               width=&#34;760&#34;
               height=&#34;371&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;使用 APISIX 这套服务网格方案可以看到，流量从外部通过 APISIX Ingress 进来，中间经过 APISIX 进行处理。这个过程中，APISIX Ingress 负责处理南北向的流量，Amesh + Istio 这套方案去处理东西向的流量。&lt;/p&gt;
&lt;p&gt;在这样的一个部署架构下，它能带来一些业务层面的价值。比如&lt;strong&gt;节约成本和统一技术栈&lt;/strong&gt;，你可以把原来在传统网关里面使用的通用能力快速复制到服务网格中。这样在业务层面，就可以进行统一的管理，从而控制成本，将网关、Ingress 与服务网格中的经验高度复用。&lt;/p&gt;
&lt;p&gt;在后续的迭代计划中，基于 APISIX 的服务网格方案还会继续深耕，完成诸如以下的计划方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;结合 APISIX 的功能，打造 xRPC 能力的实现；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进行原生异构的多协议支持；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;覆盖包含 Istio 的各类场景和配置，大幅度降低用户迁移成本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结来说，在当下技术发展趋势中，服务网格势必是未来的流行趋势。虽然现在各种方案都还不太完善，但整体都属于螺旋上升的状态。当然，基于 APISIX 的服务网格也正朝着大家心目中的理想型服务网格解决方案奋进。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>当 Service Mesh 遇见 Event Mesh: Event-Driven 型企业新的架构层</title>
      <link>https://cloudnativecn.com/blog/service-mesh-meet-event-mesh/</link>
      <pubDate>Tue, 27 Nov 2018 19:22:12 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/service-mesh-meet-event-mesh/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.nginx.com/blog/what-is-a-service-mesh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Mesh&lt;/a&gt;被用作微服务的基础设施层，使通信变得更加灵活，可靠和快速。它得到了谷歌、微软、IBM、红帽和 Pivotal 等行业巨头的推动，并且正在推出 Kubernetes、OpenShift 和 Pivotal Container Service（PKS）等平台和服务。&lt;/p&gt;
&lt;p&gt;虽然 Service Mesh（服务网格）可以很好地支持同步 RESTful 和一般的&amp;lt;请求 - 回复&amp;gt;交互，但它不支持异步、事件驱动的交互，不适合将云原生微服务与遗留应用程序连接，也不适用于 IoT。&lt;/p&gt;
&lt;p&gt;现代企业正在将事件驱动架构作为其数字化转型的一部分，每个事件驱动型的企业都需要一个中枢神经系统来快速、可靠和安全地将事件从它们发生的地方发送到它们需要去的地方。&lt;/p&gt;
&lt;p&gt;这个中枢神经系统可以被视为 Event Mesh（事件网格） - 您架构中的一个新层。&lt;/p&gt;
&lt;p&gt;事件网格作为服务网格的补充，可以做为应用程序的连接层，以提供企业实现其数字化转型目标所需的全套应用程序间通信模式。&lt;/p&gt;
&lt;h2 id=&#34;什么是-event-mesh&#34;&gt;什么是 Event Mesh？&lt;/h2&gt;
&lt;p&gt;事件网格对于事件驱动的应用程序，就好比是服务网格对于 RESTful 应用程序：一个架构层，无论在哪里部署这些应用程序（非云、公有云或者私有云），都可以动态路由某个应用程序的事件并使其被其他应用程序所接收。事件网格由内部连通的 Event broker(事件代理) 网络来创建和启用。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/service-mesh-meet-event-mesh/006tNbRwly1fxmu7vq7crj30kh0cajsy_hu_d3b2ae4dc86228e3.webp 400w,
               /blog/service-mesh-meet-event-mesh/006tNbRwly1fxmu7vq7crj30kh0cajsy_hu_a9725e28e5eb6681.webp 760w,
               /blog/service-mesh-meet-event-mesh/006tNbRwly1fxmu7vq7crj30kh0cajsy_hu_aeadeafa1fbfabe6.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/service-mesh-meet-event-mesh/006tNbRwly1fxmu7vq7crj30kh0cajsy_hu_d3b2ae4dc86228e3.webp&#34;
               width=&#34;737&#34;
               height=&#34;442&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;event-mesh-vs-service-mesh&#34;&gt;Event Mesh vs. Service Mesh&lt;/h2&gt;
&lt;p&gt;事件网格可以做为服务网格的补充。事件网格和服务网格类似，它们可以在应用程序之间实现更好的通信，并允许应用程序通过将某些功能放在网络层和应用程序层之间，这样我们可以更多地关注业务逻辑。但是，相比之下，也有一些重要的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务网格连接云环境中的微服务，例如 Kubernetes，Amazon ECS、Google Kubernetes Engine、IBM Cloud 和 Alibaba；&lt;/li&gt;
&lt;li&gt;事件网格不仅连接微服务（容器化或其他），还连接遗留的应用程序、云原生服务以及可在云和非云环境中运行的各种设备和数据源/接收端。事件网格可以将任何事件源连接到任何事件处理程序，无论它们在何处部署。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;event-mesh-的特点&#34;&gt;Event Mesh 的特点&lt;/h2&gt;
&lt;p&gt;事件网格的定义有三个显著特征。事件网格是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由内部连通的 Event Broker 形成的组合&lt;/li&gt;
&lt;li&gt;与环境无关&lt;/li&gt;
&lt;li&gt;动态的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事件网格由 Event Broker（1）网络创建和启用的事实意味着其本质上是事件驱动的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“我相信事件将成为现代企业的生命线。”&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;与环境无关（2），我的意思是事件网格可以部署在任何公共云、私有云、PaaS 或非云环境中，并且它将在所有环境中以统一的方式运行。&lt;/p&gt;
&lt;p&gt;事件网格的动态特性（3）可能是其最重要的属性。所谓动态，我指的是它能够动态地了解哪些事件将被路由到哪些消费者应用程序，然后在事件发生时实时路由这些事件，无论生产者和消费者在哪里被附加到网格，而且无需配置事件路由。我们应该让事件网格负责这些，而不是开发人员。&lt;/p&gt;
&lt;h2 id=&#34;为什么企业需要-event-mesh&#34;&gt;为什么企业需要 Event Mesh?&lt;/h2&gt;
&lt;p&gt;简而言之，事件网格支持以下使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接和编排微服务&lt;/li&gt;
&lt;li&gt;将事件从内部部署推送到云应用程序或服务（混合云）&lt;/li&gt;
&lt;li&gt;跨 LOB(line-of-business) 启用“数据即服务”&lt;/li&gt;
&lt;li&gt;实现与后端系统的物联网连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是更长的答案：&lt;/p&gt;
&lt;p&gt;事件网格使企业能够支持事件驱动的体系结构，从最小的微服务部署，到以易管理、健壮、安全和架构良好的方式将应用程序扩展到混合云。它提供了动态和全部实时地集成遗留应用程序、数据存储、现代微服务、SaaS、物联网和移动设备的能力。事件网格为应用程序开发人员和架构师提供了构建和部署分布式事件驱动应用程序的基础，无论他们需要在何处构建和部署。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;事件网格概念旨在实现和支持企业数字化转型。在 2018 年，那些不完全采用事件驱动架构的企业正在向全面拥抱事件驱动架构转型。但根据我的经验，许多人正在针对特定用例进行此操作，并且通常采用零碎的方法，而不是采用企业范围内事件分发的明确愿景。&lt;/p&gt;
&lt;p&gt;我相信事件将成为现代企业的生命线。为此，他们需要让事件在数字企业越来越分散的环境和组件中自由轻松地流动。&lt;/p&gt;
&lt;p&gt;事件网格就是实现此功能的架构层。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
