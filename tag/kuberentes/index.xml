<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kuberentes | 云原生社区（中国）</title>
    <link>https://cloudnativecn.com/tag/kuberentes/</link>
      <atom:link href="https://cloudnativecn.com/tag/kuberentes/index.xml" rel="self" type="application/rss+xml" />
    <description>Kuberentes</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Tue, 08 Apr 2025 14:35:56 +0800</lastBuildDate>
    <image>
      <url>https://cloudnativecn.com/media/sharing.png</url>
      <title>Kuberentes</title>
      <link>https://cloudnativecn.com/tag/kuberentes/</link>
    </image>
    
    <item>
      <title>kube-scheduler-simulator：让调度器可观察、可调试、可扩展</title>
      <link>https://cloudnativecn.com/blog/introducing-kube-scheduler-simulator/</link>
      <pubDate>Tue, 08 Apr 2025 14:35:56 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/introducing-kube-scheduler-simulator/</guid>
      <description>&lt;p&gt;Kubernetes Scheduler 是控制面中的核心组件之一，负责决定每个 Pod 运行在哪个节点上。换句话说，所有使用 Kubernetes 的用户，其 Pod 的命运都掌握在调度器手中。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kube-scheduler-simulator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kube-scheduler-simulator&lt;/a&gt; 是一个 Kubernetes 调度器的“模拟器”，最初是我（Kensei Nakada）在 &lt;a href=&#34;https://summerofcode.withgoogle.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Summer of Code 2021&lt;/a&gt; 中启动的项目，后续得到了众多贡献者的支持。这个工具的目标是帮助用户深入观察调度器的行为和决策逻辑。&lt;/p&gt;
&lt;p&gt;无论你是使用诸如 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pod 亲和性&lt;/a&gt; 等调度约束的普通用户，还是开发自定义调度插件的调度器专家，这款模拟器都将成为你理解和测试调度策略的重要助手。&lt;/p&gt;
&lt;h2 id=&#34;为什么我们需要一个调度器模拟器&#34;&gt;为什么我们需要一个调度器模拟器？&lt;/h2&gt;
&lt;p&gt;Kubernetes Scheduler 本质上是一个插件驱动的“黑盒”，每个插件从不同的角度参与调度决策，理解它的行为并不容易。&lt;/p&gt;
&lt;p&gt;即使你在测试集群中看到 Pod 正常调度，也不能保证它是按你预期的逻辑调度的。这种“表面正常，实则偏差”的问题，往往会在生产环境中带来意想不到的调度后果。&lt;/p&gt;
&lt;p&gt;此外，调度器的测试也非常具有挑战性。真实集群中的调度场景复杂多样，无法通过有限的测试用例全面覆盖。即使是 Kubernetes 官方的 upstream 调度器，也经常是在发布后才被用户发现问题。&lt;/p&gt;
&lt;p&gt;虽然开发环境或沙箱集群是常用的测试手段，但这类环境通常规模较小、工作负载有限，与实际生产集群的行为存在巨大差异。因此，仅靠传统方法，很难预知调度器在真实环境中的表现。&lt;/p&gt;
&lt;p&gt;kube-scheduler-simulator 诞生正是为了填补这一空白：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户可以验证调度约束、调度器配置、自定义插件的行为；&lt;/li&gt;
&lt;li&gt;可以在模拟环境中测试调度效果，而不影响实际的工作负载；&lt;/li&gt;
&lt;li&gt;还能观察调度过程中的每一个决策细节，真正“把调度器变成白盒”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模拟器具有什么能力&#34;&gt;模拟器具有什么能力？&lt;/h2&gt;
&lt;p&gt;kube-scheduler-simulator 的核心能力是：&lt;strong&gt;揭示调度器内部的决策过程&lt;/strong&gt;。Kubernetes Scheduler 是基于 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/scheduling-framework/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;调度框架（Scheduling Framework）&lt;/a&gt; 实现的，整个调度流程分为多个扩展点，如 Filter、Score、Bind 等，每个阶段会调用对应插件进行判断和打分。&lt;/p&gt;
&lt;p&gt;模拟器提供了图形化界面，用户可以在其中创建 Pod、Node、Deployment 等 Kubernetes 资源，并清晰地看到调度器每个插件的执行结果和得分情况。&lt;/p&gt;
&lt;p&gt;















&lt;figure  id=&#34;figure-调度器模拟器-web-ui&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;调度器模拟器 Web UI&#34; srcset=&#34;
               /blog/introducing-kube-scheduler-simulator/simulator_hu_1197737eabcff498.webp 400w,
               /blog/introducing-kube-scheduler-simulator/simulator_hu_fcb3f1e7a798b9b9.webp 760w,
               /blog/introducing-kube-scheduler-simulator/simulator_hu_78c3b9eb211a498b.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/introducing-kube-scheduler-simulator/simulator_hu_1197737eabcff498.webp&#34;
               width=&#34;760&#34;
               height=&#34;505&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      调度器模拟器 Web UI
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;在这个模拟器中，我们运行的是一个 &lt;strong&gt;可调试版本的调度器&lt;/strong&gt;，它会将各插件在不同阶段的执行结果写入 Pod 的注解中，前端界面再将这些信息进行可视化展示。&lt;/p&gt;
&lt;p&gt;例如，你可以查看调度器在 Filter 阶段如何判断某个节点是否可用，在 Score 阶段各插件打了多少分，最终选择了哪个节点作为目标节点。这些信息都能在 Pod 的注解中查阅：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The JSONs within these annotations are manually formatted for clarity in the blog post. &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/bind-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;DefaultBinder&amp;#34;:&amp;#34;success&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/filter-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;node-jjfg5&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeName&amp;#34;:&amp;#34;passed&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesFit&amp;#34;:&amp;#34;passed&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeUnschedulable&amp;#34;:&amp;#34;passed&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;TaintToleration&amp;#34;:&amp;#34;passed&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;node-mtb5x&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeName&amp;#34;:&amp;#34;passed&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesFit&amp;#34;:&amp;#34;passed&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeUnschedulable&amp;#34;:&amp;#34;passed&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;TaintToleration&amp;#34;:&amp;#34;passed&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      }      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/finalscore-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;node-jjfg5&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;ImageLocality&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeAffinity&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesBalancedAllocation&amp;#34;:&amp;#34;52&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesFit&amp;#34;:&amp;#34;47&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;TaintToleration&amp;#34;:&amp;#34;300&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;VolumeBinding&amp;#34;:&amp;#34;0&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;node-mtb5x&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;ImageLocality&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeAffinity&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesBalancedAllocation&amp;#34;:&amp;#34;76&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesFit&amp;#34;:&amp;#34;73&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;TaintToleration&amp;#34;:&amp;#34;300&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;VolumeBinding&amp;#34;:&amp;#34;0&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      }       &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/permit-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/permit-result-timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/postfilter-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/prebind-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;VolumeBinding&amp;#34;:&amp;#34;success&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/prefilter-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/prefilter-result-status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;AzureDiskLimits&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;EBSLimits&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;GCEPDLimits&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;InterPodAffinity&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;NodeAffinity&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;NodePorts&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;NodeResourcesFit&amp;#34;:&amp;#34;success&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;NodeVolumeLimits&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;PodTopologySpread&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;VolumeBinding&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;VolumeRestrictions&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;VolumeZone&amp;#34;:&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      }      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/prescore-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;InterPodAffinity&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;NodeAffinity&amp;#34;:&amp;#34;success&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;NodeResourcesBalancedAllocation&amp;#34;:&amp;#34;success&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;NodeResourcesFit&amp;#34;:&amp;#34;success&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;PodTopologySpread&amp;#34;:&amp;#34;&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;TaintToleration&amp;#34;:&amp;#34;success&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      }      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/reserve-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;VolumeBinding&amp;#34;:&amp;#34;success&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/result-history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/bind-result&amp;#34;:&amp;#34;{\&amp;#34;DefaultBinder\&amp;#34;:\&amp;#34;success\&amp;#34;}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/filter-result&amp;#34;:&amp;#34;{\&amp;#34;node-jjfg5\&amp;#34;:{\&amp;#34;NodeName\&amp;#34;:\&amp;#34;passed\&amp;#34;,\&amp;#34;NodeResourcesFit\&amp;#34;:\&amp;#34;passed\&amp;#34;,\&amp;#34;NodeUnschedulable\&amp;#34;:\&amp;#34;passed\&amp;#34;,\&amp;#34;TaintToleration\&amp;#34;:\&amp;#34;passed\&amp;#34;},\&amp;#34;node-mtb5x\&amp;#34;:{\&amp;#34;NodeName\&amp;#34;:\&amp;#34;passed\&amp;#34;,\&amp;#34;NodeResourcesFit\&amp;#34;:\&amp;#34;passed\&amp;#34;,\&amp;#34;NodeUnschedulable\&amp;#34;:\&amp;#34;passed\&amp;#34;,\&amp;#34;TaintToleration\&amp;#34;:\&amp;#34;passed\&amp;#34;}}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/finalscore-result&amp;#34;:&amp;#34;{\&amp;#34;node-jjfg5\&amp;#34;:{\&amp;#34;ImageLocality\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;NodeAffinity\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;NodeResourcesBalancedAllocation\&amp;#34;:\&amp;#34;52\&amp;#34;,\&amp;#34;NodeResourcesFit\&amp;#34;:\&amp;#34;47\&amp;#34;,\&amp;#34;TaintToleration\&amp;#34;:\&amp;#34;300\&amp;#34;,\&amp;#34;VolumeBinding\&amp;#34;:\&amp;#34;0\&amp;#34;},\&amp;#34;node-mtb5x\&amp;#34;:{\&amp;#34;ImageLocality\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;NodeAffinity\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;NodeResourcesBalancedAllocation\&amp;#34;:\&amp;#34;76\&amp;#34;,\&amp;#34;NodeResourcesFit\&amp;#34;:\&amp;#34;73\&amp;#34;,\&amp;#34;TaintToleration\&amp;#34;:\&amp;#34;300\&amp;#34;,\&amp;#34;VolumeBinding\&amp;#34;:\&amp;#34;0\&amp;#34;}}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/permit-result&amp;#34;:&amp;#34;{}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/permit-result-timeout&amp;#34;:&amp;#34;{}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/postfilter-result&amp;#34;:&amp;#34;{}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/prebind-result&amp;#34;:&amp;#34;{\&amp;#34;VolumeBinding\&amp;#34;:\&amp;#34;success\&amp;#34;}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/prefilter-result&amp;#34;:&amp;#34;{}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/prefilter-result-status&amp;#34;:&amp;#34;{\&amp;#34;AzureDiskLimits\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;EBSLimits\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;GCEPDLimits\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;InterPodAffinity\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;NodeAffinity\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;NodePorts\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;NodeResourcesFit\&amp;#34;:\&amp;#34;success\&amp;#34;,\&amp;#34;NodeVolumeLimits\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;PodTopologySpread\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;VolumeBinding\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;VolumeRestrictions\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;VolumeZone\&amp;#34;:\&amp;#34;\&amp;#34;}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/prescore-result&amp;#34;:&amp;#34;{\&amp;#34;InterPodAffinity\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;NodeAffinity\&amp;#34;:\&amp;#34;success\&amp;#34;,\&amp;#34;NodeResourcesBalancedAllocation\&amp;#34;:\&amp;#34;success\&amp;#34;,\&amp;#34;NodeResourcesFit\&amp;#34;:\&amp;#34;success\&amp;#34;,\&amp;#34;PodTopologySpread\&amp;#34;:\&amp;#34;\&amp;#34;,\&amp;#34;TaintToleration\&amp;#34;:\&amp;#34;success\&amp;#34;}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/reserve-result&amp;#34;:&amp;#34;{\&amp;#34;VolumeBinding\&amp;#34;:\&amp;#34;success\&amp;#34;}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/score-result&amp;#34;:&amp;#34;{\&amp;#34;node-jjfg5\&amp;#34;:{\&amp;#34;ImageLocality\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;NodeAffinity\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;NodeResourcesBalancedAllocation\&amp;#34;:\&amp;#34;52\&amp;#34;,\&amp;#34;NodeResourcesFit\&amp;#34;:\&amp;#34;47\&amp;#34;,\&amp;#34;TaintToleration\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;VolumeBinding\&amp;#34;:\&amp;#34;0\&amp;#34;},\&amp;#34;node-mtb5x\&amp;#34;:{\&amp;#34;ImageLocality\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;NodeAffinity\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;NodeResourcesBalancedAllocation\&amp;#34;:\&amp;#34;76\&amp;#34;,\&amp;#34;NodeResourcesFit\&amp;#34;:\&amp;#34;73\&amp;#34;,\&amp;#34;TaintToleration\&amp;#34;:\&amp;#34;0\&amp;#34;,\&amp;#34;VolumeBinding\&amp;#34;:\&amp;#34;0\&amp;#34;}}&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;kube-scheduler-simulator.sigs.k8s.io/selected-node&amp;#34;:&amp;#34;node-mtb5x&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      ]      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/score-result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;node-jjfg5&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;ImageLocality&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeAffinity&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesBalancedAllocation&amp;#34;:&amp;#34;52&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesFit&amp;#34;:&amp;#34;47&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;TaintToleration&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;VolumeBinding&amp;#34;:&amp;#34;0&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        &amp;#34;node-mtb5x&amp;#34;:{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;ImageLocality&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeAffinity&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesBalancedAllocation&amp;#34;:&amp;#34;76&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;NodeResourcesFit&amp;#34;:&amp;#34;73&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;TaintToleration&amp;#34;:&amp;#34;0&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;            &amp;#34;VolumeBinding&amp;#34;:&amp;#34;0&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      }      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kube-scheduler-simulator.sigs.k8s.io/selected-node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;node-mtb5x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不仅如此，用户还可以集成自己开发的 &lt;a href=&#34;https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/scheduling-framework/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;调度插件&lt;/a&gt; 或 &lt;a href=&#34;https://github.com/kubernetes/design-proposals-archive/blob/main/scheduling/scheduler_extender.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;调度扩展器（Extender）&lt;/a&gt;，并在模拟器中观察其行为，调试效果显著提升。&lt;/p&gt;
&lt;p&gt;该可调试调度器还可以脱离模拟器独立运行，用于集成测试、自定义调度器的开发或真实集群中的调试分析。&lt;/p&gt;
&lt;h2 id=&#34;模拟器--更好的开发环境&#34;&gt;模拟器 = 更好的开发环境？&lt;/h2&gt;
&lt;p&gt;如前所述，真实调度场景复杂多样，单靠开发集群无法覆盖全部可能性。模拟器提供了一个更强大的方案：&lt;/p&gt;
&lt;p&gt;通过使用 &lt;a href=&#34;https://github.com/kubernetes-sigs/kube-scheduler-simulator/blob/master/simulator/docs/import-cluster-resources.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;集群资源导入功能&lt;/a&gt;，用户可以将生产集群的资源同步到模拟器中，&lt;strong&gt;在不影响实际业务的前提下测试新版本调度器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可以在模拟器中验证 Pod 的调度行为是否符合预期，再将调度器部署到生产集群，极大降低了调度相关的变更风险。&lt;/p&gt;
&lt;h2 id=&#34;使用场景总结&#34;&gt;使用场景总结&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;集群用户&lt;/strong&gt;：验证调度约束（如 PodAffinity、TopologySpread）是否按预期工作；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集群管理员&lt;/strong&gt;：评估调度器配置变更对调度结果的影响；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度器插件开发者&lt;/strong&gt;：在模拟器中测试自定义插件、使用同步功能进行更真实的验证。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何上手&#34;&gt;如何上手？&lt;/h2&gt;
&lt;p&gt;这个项目无需 Kubernetes 集群，只需要本地安装 Docker 即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone git@github.com:kubernetes-sigs/kube-scheduler-simulator.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; kube-scheduler-simulator
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make docker_up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，Web 界面将运行在 &lt;code&gt;http://localhost:3000&lt;/code&gt;，即可开始你的调度实验！&lt;/p&gt;
&lt;p&gt;👉 项目地址：https://github.com/kubernetes-sigs/kube-scheduler-simulator&lt;/p&gt;
&lt;h2 id=&#34;如何参与贡献&#34;&gt;如何参与贡献？&lt;/h2&gt;
&lt;p&gt;该项目由 &lt;a href=&#34;https://github.com/kubernetes/community/blob/master/sig-scheduling/README.md#kube-scheduler-simulator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes SIG Scheduling&lt;/a&gt; 维护。欢迎你提出 Issues、提交 PR，也欢迎加入社区参与讨论。&lt;/p&gt;
&lt;p&gt;Slack 频道：&lt;a href=&#34;https://kubernetes.slack.com/messages/sig-scheduling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#sig-scheduling&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;鸣谢&#34;&gt;鸣谢&lt;/h2&gt;
&lt;p&gt;这个模拟器的发展离不开众多志愿者工程师的坚持和贡献，感谢所有为之付出心力的 &lt;a href=&#34;https://github.com/kubernetes-sigs/kube-scheduler-simulator/graphs/contributors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;贡献者们&lt;/a&gt;！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用 Cilium 和 BGP 为 Kubernetes 服务进行负载均衡</title>
      <link>https://cloudnativecn.com/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/</link>
      <pubDate>Tue, 30 Jan 2024 08:00:00 +0800</pubDate>
      <guid>https://cloudnativecn.com/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/</guid>
      <description>&lt;p&gt;本文译自 &lt;a href=&#34;https://sue.eu/blogs/expose-loadbalanced-kubernetes-services-with-bgp-cilium/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Exposing Load-Balanced Kubernetes Services with Cilium&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Cilium 是一个开源项目，旨在为云原生环境提供网络、安全和可观测性，例如 Kubernetes 集群和其他容器编排平台。本博客展示了如何使用 Cilium 和 BGP 将您的 Kubernetes 服务暴露给外部世界。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP&lt;/strong&gt;
边界网关协议（BGP）是一种标准化的外部网关协议，旨在在互联网上的自治系统（AS）之间交换路由和可达性信息。该协议被分类为路径矢量协议，因此它根据由网络管理员配置的路径、网络策略或规则集来做出路由决策。它参与制定核心路由决策，这使得它对互联网的正常运行至关重要。&lt;/p&gt;
&lt;p&gt;BGP 专为健壮性和可扩展性而开发，用于在大型网络之间路由数据，包括 ISP 和其他大型组织。它确保了无环的域间路由，并有助于维护稳定的网络结构。BGP 可以处理数千个路由，并以其随着网络增长而扩展的能力而脱颖而出。由于其灵活性和对路由策略的控制，它被广泛使用，使其能够快速响应网络变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cilium 和 BGP&lt;/strong&gt;
在版本 1.10 中，Cilium 集成了对 MetalLB 的 BGP 支持，从而使其能够宣布 Kubernetes 服务的 IP 地址类型为&lt;a href=&#34;https://sue.eu/insights/bgp-load-balancing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 BGP 的 LoadBalancer&lt;/a&gt;。其结果是，服务可以从 Kubernetes 网络外部访问，无需额外的组件，例如 Ingress 路由器。特别是“无需额外组件”的部分是令人振奋的消息，因为每个组件都会增加延迟，因此没有额外组件会减少延迟。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_hu_c90084cc71b9f310.webp 400w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_hu_949699ed36a46eaf.webp 760w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_hu_b28ed5481d705e36.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f1_hu_c90084cc71b9f310.webp&#34;
               width=&#34;760&#34;
               height=&#34;664&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;此示例中显示的网络配置代表了具有用于服务负载均衡的 BGP 集成的基于 Kubernetes 的环境。以下是配置的详细信息：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端网络（LAN 网络）：&lt;/strong&gt; 存在一个具有 IP 范围 192.168.10.0/24 的本地区域网络（LAN），连接了多个客户端。该网络包含了设置的用户端，用户和其他设备可以在其中访问托管在 Kubernetes 集群上的服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes 网络：&lt;/strong&gt; Kubernetes 集群具有自己的网络空间，由子网 192.168.1.0/24 指定。该网络包括 Kubernetes 主节点（k8s-master1）和多个工作节点（从 k8s-worker1 到 k8s-worker5）。这些节点托管了 Kubernetes 集群的实际容器和工作负载。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管理网络：&lt;/strong&gt; 一个独立的管理网络，至少有一个设备（k8s-control）用于控制和管理 Kubernetes 集群。这与 Kubernetes 数据平面分开，以确保安全性和管理效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BGP 路由器：&lt;/strong&gt; bgp-router1 桥接了外部网络/互联网和 Kubernetes 网络。它负责使用 BGP 来广播路由将流量路由到 Kubernetes 集群中的适当服务。IP 范围 172.16.10.0/24 保留供 Kubernetes 集群内的 LoadBalancer 服务使用。当将 Kubernetes 服务公开为 LoadBalancer 时，它会分配一个来自此池的 IP 地址。然后，BGP 路由器将此 IP 广播到外部网络，从而使流量路由到 LoadBalancer 服务。&lt;/p&gt;
&lt;p&gt;此网络配置允许通过利用 BGP 进行 IP 地址管理和路由来实现运行在 Kubernetes 集群上的服务的可扩展和灵活的负载均衡。它将客户端访问、集群管理和服务流量分别分隔到不同的网络中，以进行组织和安全性目的。&lt;/p&gt;
&lt;h2 id=&#34;暴露服务&#34;&gt;暴露服务&lt;/h2&gt;
&lt;p&gt;一旦构建了上述基础架构，就可以创建一个部署并使用 BGP 将其暴露给网络。让我们从一个部署开始，其中包含一个简单的 NGINX Web 服务器，提供默认的 Web 页面。我们还添加了一个类型为 LoadBalancer 的 Service。这将导致使用 BGP 向我们的路由器宣布外部 IP 地址。&lt;/p&gt;
&lt;p&gt;一旦构建完成，命令 &lt;code&gt;kubectl get svc&lt;/code&gt; 显示我们的服务具有外部 IP 地址：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NAME          TYPE           CLUSTER-IP       EXTERNAL-IP       PORT(S)         AGE
kubernetes    ClusterIP      10.96.0.1        &amp;lt;none&amp;gt;            443/TCP         7d3h
web1-lb       LoadBalancer   10.106.236.120   172.16.10.0       80:30256/TCP    7d2h
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;172.16.10.0 这个地址看起来很奇怪，但没问题。通常会跳过.0 地址，而使用.1 地址作为第一个地址。其中一个原因是在早期，.0 地址用于广播，后来改为.255。由于.0 仍然是一个有效的地址，负责地址池的 MetalLB 会将其分配为第一个地址。在路由器 bgp-router1 上运行的命令 &lt;code&gt;vtysh -c &#39;show bgp summary&#39;&lt;/code&gt; 显示它已接收到一个前缀：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;IPv4 Unicast Summary:
BGP router identifier 192.168.1.1, local AS number 64512 vrf-id 0
BGP table version 17
RIB entries 1, using 192 bytes of memory
Peers 6, using 128 KiB of memoryNeighbour V AS MsgRcvd MsgSent TblVer InQ OutQ Up/Down State/PfxRcd PfxSnt
192.168.1.10 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.21 4 64512 446 435 0 0 0 03:36:54 1 0
192.168.1.22 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.23 4 64512 445 435 0 0 0 03:36:56 1 0
192.168.1.24 4 64512 446 435 0 0 0 03:36:56 1 0
192.168.1.25 4 64512 445 435 0 0 0 03:36:56 1 0

Total number of neighbors 6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;路由表的以下片段（ip route）告诉我们，对于特定的 IP 地址 172.16.10.0，存在 6 个可能的路由/目标。换句话说，所有 Kubernetes 节点都宣布它们正在处理该地址的流量。太棒了！！&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;172.16.10.0 proto bgp metric 20
nexthop via 192.168.1.10 dev enp7s0 weight 1
nexthop via 192.168.1.21 dev enp7s0 weight 1
nexthop via 192.168.1.22 dev enp7s0 weight 1
nexthop via 192.168.1.23 dev enp7s0 weight 1
nexthop via 192.168.1.24 dev enp7s0 weight 1
nexthop via 192.168.1.25 dev enp7s0 weight 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实际上，现在从我们的路由器上可以看到 Web 页面。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -s -v http://172.16.10.0/ -o /dev/null

* Trying 172.16.10.0…
* TCP_NODELAY set
* Connected to 172.16.10.0 (172.16.10.0) port 80 (#0)
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: 172.16.10.0
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Accept: */*
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Server: nginx/1.21.3
&amp;lt; Date: Sun, 31 Oct 2023 14:19:17 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: 615
&amp;lt; Last-Modified: Tue, 07 Sep 2023 15:21:03 GMT
&amp;lt; Connection: keep-alive
&amp;lt; ETag: “6137835f-267”
&amp;lt; Accept-Ranges: bytes&amp;gt;
{ [615 bytes data]}
* Connection #0 to host 172.16.10.0 left intact
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而且，位于我们客户端网络中的客户端也可以访问相同的页面，因为它使用 bgp-router1 作为默认路由。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hu_8dca7188346418a4.webp 400w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hu_332ba01b4bfc8c6b.webp 760w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hu_1155b82e2e46de23.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f2_hu_8dca7188346418a4.webp&#34;
               width=&#34;598&#34;
               height=&#34;345&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;更多细节&#34;&gt;更多细节&lt;/h2&gt;
&lt;p&gt;现在一切都运作正常，大多数工程师都想看到更多细节，所以我不会让你失望。&lt;/p&gt;
&lt;h3 id=&#34;ping&#34;&gt;Ping&lt;/h3&gt;
&lt;p&gt;你将注意到的第一件事是，LoadBalancer 的 IP 地址无法通过 ping 访问。深入挖掘一下可以揭示原因。我们创建了源端口 80 和目标端口 80 之间的映射。此映射在接口上使用 eBPF 逻辑执行，并存在于所有节点上。此映射确保只有端口 80 的流量被均衡。所有其他流量，包括 ping，都不被接收。这就是为什么你可以看到 icmp 数据包到达节点，但从未发送响应的原因。&lt;/p&gt;
&lt;h3 id=&#34;观察流量&#34;&gt;观察流量&lt;/h3&gt;
&lt;p&gt;Hubble 是建立在 eBPF 和 Cilium 之上的网络和安全性可观测平台。通过命令行和图形 Web GUI，可以查看当前和历史流量。在这个示例中，Hubble 放置在 k8s-control 节点上，该节点直接访问 Hubble Relay 的 API。Hubble Relay 是从 Cilium 节点获取所需信息的组件。请注意，Hubble 命令也存在于每个 Cilium 代理 Pod 中，但那个命令只会显示特定代理的信息！以下输出显示了从路由器上执行 curl http://172.16.10.0/ 命令后的观察者信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ hubble observe –namespace default –follow

Oct 31 15:43:41.382: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: SYN)
Oct 31 15:43:41.384: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.384: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:43:41.385: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.385: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
Oct 31 15:43:41.386: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:43:41.386: 192.168.1.1:36946 &amp;lt;&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-overlay FORWARDED (TCP Flags: ACK)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之前，我警告过不要在 Cilium 代理 Pod 内使用 hubble 命令，但在特定节点流量中看到具体的情况也可以非常有信息价值。在这种情况下，每个 Cilium 代理 Pod 中都执行了 &lt;code&gt;hubble observe –namespace default –follow&lt;/code&gt;，并且路由器的 curl 执行了一次。&lt;/p&gt;
&lt;p&gt;在托管 Pod 的节点（k8s-worker2）上，我们看到与上面的输出相同的输出。但是，在另一个 Pod（k8s-worker1）上，我们看到以下输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Oct 31 15:56:05.220: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: SYN)
Oct 31 15:56:05.220: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: SYN, ACK)
Oct 31 15:56:05.220: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:05.221: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:05.221: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:05.222: 10.0.3.103:48278 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:05.222: 10.0.3.103:48278 &amp;lt;- default/web1-696bfbbbc4-jnxbc:80 to-stack FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:05.222: 10.0.3.103:48278 -&amp;gt; default/web1

-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:12.739: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: SYN)
Oct 31 15:56:12.739: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: SYN, ACK)
Oct 31 15:56:12.742: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK)
Oct 31 15:56:12.742: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:12.745: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: ACK, PSH)
Oct 31 15:56:12.749: 10.0.4.105:36956 -&amp;gt; default/web1-696bfbbbc4-jnxbc:80 to-endpoint FORWARDED (TCP Flags: ACK, FIN)
Oct 31 15:56:12.749: default/web1-696bfbbbc4-jnxbc:80 &amp;lt;&amp;gt; 10.0.4.105:36956 to-overlay FORWARDED (TCP Flags: ACK, FIN)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们在这里看到的是，我们的路由器将 IP 地址 172.16.10.0 的流量发送到 k8s-worker1，但该工作节点不托管我们的 web1 容器，因此它将流量转发到处理流量的 k8s-worker2。所有的转发逻辑都使用 eBPF 处理 - 附加到接口的一个小的 BPF 程序将在需要时发送流量和路由到另一个工作节点。这也是为什么在 k8s-worker1 上运行 tcpdump，初始接收到流量的地方，不会显示任何流量的原因。它已经在进入 k8s-worker1 的 IP 堆栈之前被重定向到 k8s-worker2。&lt;/p&gt;
&lt;p&gt;我们的合作伙伴 &lt;a href=&#34;https://docs.cilium.io/en/stable/network/ebpf/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Isovalent&lt;/a&gt; 有很多关于 eBPF 和内部工作原理的信息。如果你还没有听说过 eBPF，而且你对 Linux 和/或网络感兴趣，请务必探索一下基础知识。在我看来，eBPF 将在不久的将来彻底改变 Linux 的网络，特别是对于云原生环境！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cilium.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cilium.io &lt;/a&gt;上有很多关于 eBPF 和内部工作原理的信息。如果你还没有听说过 eBPF，而且你对 Linux 和/或网络感兴趣，请务必了解至少基础知识。在我看来，eBPF 将在不久的将来彻底改变 Linux 的网络，特别是对于云原生环境！&lt;/p&gt;
&lt;h3 id=&#34;hubble-web-gui&#34;&gt;Hubble Web GUI&lt;/h3&gt;
&lt;p&gt;通过一个工作正常的 BGP 设置，使 Hubble Web GUI 对外界也很简单。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu_2bc19879b089656f.webp 400w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu_9822941cc7e754e9.webp 760w,
               /blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu_bbd37471d1115f7e.webp 1200w&#34;
               src=&#34;https://cloudnativecn.com/blog/expose-loadbalanced-kubernetes-services-with-bgp-cilium/f3_hu_2bc19879b089656f.webp&#34;
               width=&#34;760&#34;
               height=&#34;419&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;最后的话&#34;&gt;最后的话&lt;/h2&gt;
&lt;p&gt;通过 MetalLB 的集成，使用 BGP 设置 Cilium 变得非常简单，消除了昂贵的网络硬件的需求。Cilium/BGP 的这种组合，特别是与停用 kube-proxy 结合使用，显著降低了到云端服务的延迟。它还通过仅宣布 LoadBalancer 的 IP 地址来增强安全性和透明性。虽然这种设置不需要 Ingress Controller，但对于大多数 HTTP 服务仍然建议使用一个。像 NGINX 或 Traefik 这样的控制器，通过 BGP 公开，提供协议级别的重写和请求速率限制等重大优势。&lt;/p&gt;
&lt;p&gt;这种云原生和基于 Linux 的网络的进步确实是一个飞跃，标志着网络技术的激动人心的时代！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
