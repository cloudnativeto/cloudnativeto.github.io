<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NFV | 云原生社区</title>
    <link>https://cloudnative.to/tag/nfv/</link>
      <atom:link href="https://cloudnative.to/tag/nfv/index.xml" rel="self" type="application/rss+xml" />
    <description>NFV</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><lastBuildDate>Wed, 19 Dec 2018 17:55:08 +0800</lastBuildDate>
    <image>
      <url>https://cloudnative.to/media/sharing.png</url>
      <title>NFV</title>
      <link>https://cloudnative.to/tag/nfv/</link>
    </image>
    
    <item>
      <title>拥抱NFV，Istio 1.1 将支持多网络平面</title>
      <link>https://cloudnative.to/blog/multi-network-interfaces-for-istio/</link>
      <pubDate>Wed, 19 Dec 2018 17:55:08 +0800</pubDate>
      <guid>https://cloudnative.to/blog/multi-network-interfaces-for-istio/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文转载自&lt;a href=&#34;https://zhaohuabing.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;赵化冰的博客&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Istio 1.0版本只支持在单个网络，即Mesh中的服务只能连接在一个网络上。虽然在架构设计上是开放的，但从目前的代码来看，Istio的内部实现还是和Kubernetes高度集成的。由于Kubernetes集群中Pod缺省只支持一个网络接口，因此Istio也存在该限制并不让人意外。&lt;/p&gt;
&lt;p&gt;随着Kubernetes在NFV（网络功能虚拟化）领域中的逐渐应用，已经出现多个Kubernetes的多网络平面解决方案，Istio也需要考虑支持多网络平面，以为5G的微服务化架构提供服务通讯和管控的基础设施。&lt;/p&gt;
&lt;h2 id=&#34;什么是多网络平面&#34;&gt;什么是多网络平面？&lt;/h2&gt;
&lt;p&gt;多网络平面是一个电信行业的常用术语，即将一个电信设备或者系统同时连接到多个网络上。简而言之，就是一个主机上有多个物理或者虚拟的网络接口，这些接口分别连接到不同的网络,这些网络之间一般是相互独立的。由于电信系统对可靠性的要求非常高，因此系统会通过配置多网络平面来避免不同网络流量的相互影响，提高系统的健壮性。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要多网络平面&#34;&gt;为什么需要多网络平面？&lt;/h2&gt;
&lt;p&gt;但在一些应用场景下，多网络平面是一个必须支持的重要特性。例如在电信系统中，一般都是有多个网络平面的，电信系统中使用多个网络平面的原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按功能对不同网络进行隔离，以避免相互影响。例如管理流量，控制流量和数据流量分别采用不同的网络平面。&lt;/li&gt;
&lt;li&gt;通过多个网络的汇聚/绑定，提供网络设计冗余，增强系统的网络健壮性。&lt;/li&gt;
&lt;li&gt;支持按照不同的网络提供不同的SLA（服务等级），例如语音(低延迟)和视频流量（高带宽）具有不同的特点，需要分别对待。&lt;/li&gt;
&lt;li&gt;通过网络隔离提高系统的安全性，例如为不同的租户分配不同的网络。&lt;/li&gt;
&lt;li&gt;在单个网络带宽有限的情况下，通过多个网络接口增加网络的系统带宽。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在电信的NFV（网络功能虚拟化）领域中，已经有多个针对Kubernetes的多网络平面解决方案。其中一个&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/networking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes推荐的方案&lt;/a&gt;是中兴通讯提供的&lt;a href=&#34;https://github.com/ZTE/Knitter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knitter&lt;/a&gt;开源实现。下图展示了Knitter是如何实现Kubernetes的多网络平面支持的。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7fxczghj30zz0gu0vc_hu3f10115380f3d9a90eec48f1b4bf2ddd_72737_b6788324afb78efb1e1dc96cc3cdf0cf.webp 400w,
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7fxczghj30zz0gu0vc_hu3f10115380f3d9a90eec48f1b4bf2ddd_72737_b10e7ff9ca85221df2a81d7da77e8da9.webp 760w,
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7fxczghj30zz0gu0vc_hu3f10115380f3d9a90eec48f1b4bf2ddd_72737_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7fxczghj30zz0gu0vc_hu3f10115380f3d9a90eec48f1b4bf2ddd_72737_b6788324afb78efb1e1dc96cc3cdf0cf.webp&#34;
               width=&#34;760&#34;
               height=&#34;356&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kubernetes多网络平面开源项目&lt;a href=&#34;https://github.com/ZTE/Knitter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除了NFV的应用场景，Istio也支持除Kubernetes之外的其他部署环境，例如虚机和裸金属部署。在这些场景下，一个Host具有多个网络接口的场景也是很常见的，例如同时需要被内部和外部网络访问的Host就会有两个网络接口。&lt;/p&gt;
&lt;h2 id=&#34;istio在多网络平面下的问题&#34;&gt;Istio在多网络平面下的问题&lt;/h2&gt;
&lt;p&gt;在1.0版本中，Pilot在创建Inbound listener时未考虑多网络平面的情况，因此在Envoy所在节点存在多个IP时的处理逻辑存在问题。&lt;/p&gt;
&lt;p&gt;下图描述了在多网络平面场景下 Istio 1.1存在的问题。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7gf6gcaj30m809zgnf_hu459e56a35d3aff945864de05da8b8271_52049_54ccf48b87fa719feacfae1535336bf0.webp 400w,
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7gf6gcaj30m809zgnf_hu459e56a35d3aff945864de05da8b8271_52049_9c1465f4c46e73b486b2ba73905d21b2.webp 760w,
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7gf6gcaj30m809zgnf_hu459e56a35d3aff945864de05da8b8271_52049_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7gf6gcaj30m809zgnf_hu459e56a35d3aff945864de05da8b8271_52049_54ccf48b87fa719feacfae1535336bf0.webp&#34;
               width=&#34;760&#34;
               height=&#34;341&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Istio在多网络平面场景下的问题&lt;/p&gt;
&lt;h2 id=&#34;服务注册&#34;&gt;服务注册&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Envoy所在节点存在两个网络接口，分别连接到10.75.8.0/24和192.168.10.0/24两个网络上。&lt;/li&gt;
&lt;li&gt;Service A被注册到Service Registry中，使用的是第二个网络接口的IP，即10.75.8.101。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;envoy初始化&#34;&gt;Envoy初始化&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Envoy通过xDS接口向Pilot获取配置信息。&lt;/li&gt;
&lt;li&gt;Envoy在xDS请求中携带了第一个网络接口的IP，即192.168.10.63。&lt;/li&gt;
&lt;li&gt;Pilot从xDS请求中解析出Envoy所在节点的IP，即192.168.10.63。&lt;/li&gt;
&lt;li&gt;Pilot用Envoy节点IP来和Service Registry中所有Service Instance的IP进行对比。&lt;/li&gt;
&lt;li&gt;由于Service A的注册IP10.75.8.101和节点IP192.168.10.63不一致，Pilot错误判断该节点上没有Service A的Instance，为Service A创建了一个Outbound Listener。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;服务请求&#34;&gt;服务请求&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;节点的网络接口10.75.8.101上收到一个来自downstream的请求，被重定向到Envoy。&lt;/li&gt;
&lt;li&gt;Envoy在15001端口上收到该请求，要求访问Service A&lt;/li&gt;
&lt;li&gt;Envoy根据Pilot下发的配置将该请求交由在Service A端口的Outbound Listener，该Listener将请求分发到Service A的Outbound Cluster上，对应IP地址为10.75.8.101。&lt;/li&gt;
&lt;li&gt;Envoy将请求发送到10.75.8.101，经过TCP/IP协议栈处理后，进入第二个网络接口，被Iptable拦截，再次被作为入向请求转发到Envoy的15001端口。 上述流程形成了一个死循环，最终导致Envoy由于文件描述符被用光 而crash。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何支持多网络平面&#34;&gt;如何支持多网络平面&lt;/h2&gt;
&lt;p&gt;从上面的描述可以看到，要支持多网络平面，Istio需要修改Pilot生成Outbound Listener的代码实现，下图描述了修改后的处理逻辑。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;&#34; srcset=&#34;
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7gnvm1vj30m80ac760_hu2ecd5199efe2170d04bffdb9c0c7269d_49162_abe37bd1058a0c854a36438763b6ad1a.webp 400w,
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7gnvm1vj30m80ac760_hu2ecd5199efe2170d04bffdb9c0c7269d_49162_6ee671f1d82247c61ff2444b6feaedd5.webp 760w,
               /blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7gnvm1vj30m80ac760_hu2ecd5199efe2170d04bffdb9c0c7269d_49162_1200x1200_fit_q75_h2_lanczos.webp 1200w&#34;
               src=&#34;https://cloudnative.to/blog/multi-network-interfaces-for-istio/006tNbRwgy1fyc7gnvm1vj30m80ac760_hu2ecd5199efe2170d04bffdb9c0c7269d_49162_abe37bd1058a0c854a36438763b6ad1a.webp&#34;
               width=&#34;760&#34;
               height=&#34;353&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Istio多网络平面解决方案&lt;/p&gt;
&lt;h2 id=&#34;服务注册流程不变&#34;&gt;服务注册（流程不变）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Envoy所在节点存在两个网络接口，分别连接到10.75.8.0/24和192.168.10.0/24两个网络上。&lt;/li&gt;
&lt;li&gt;Service A被注册到Service Registry中，使用的是第二个网络接口的IP，即10.75.8.101。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;envoy初始化增加多网络平面处理逻辑&#34;&gt;Envoy初始化（增加多网络平面处理逻辑）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Envoy通过xDS接口向Pilot获取配置信息。&lt;/li&gt;
&lt;li&gt;Envoy在xDS请求中携带所在节点上的所有网络接口的IP，在本例中即192.168.10.63和10.75.8.101。&lt;/li&gt;
&lt;li&gt;Pilot从xDS请求中解析出Envoy所在节点的所有IP，在本例中即192.168.10.63和10.75.8.101。&lt;/li&gt;
&lt;li&gt;Pilot用Envoy节点IP来和Service Registry中所有Service Instance的IP进行对比。&lt;/li&gt;
&lt;li&gt;由于Service A的注册IP 10.75.8.101和节点的两个IP之一相同，Pilot判断该节点上存在Service A的Instance，为Service A创建了一个Inbound Listener。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;服务请求-1&#34;&gt;服务请求&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;节点的网络接口10.75.8.101上收到一个来自downstream的请求，被重定向到Envoy。&lt;/li&gt;
&lt;li&gt;Envoy在15001端口上收到该请求，要求访问Service A&lt;/li&gt;
&lt;li&gt;Envoy根据Pilot下发的配置将该请求交由在Service A端口的Inbound Listener，该Listener将请求分发到Service A的Inbound Cluster上，对应IP地址为127.0.0。1。&lt;/li&gt;
&lt;li&gt;Envoy将请求发送到127.0.0.1的Service A进程的服务端口上进行处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该修改方案已实现并提交PR合入到Istio 代码中，在1月份发布的Istio 1.1 Release中将会正式支持。&lt;/p&gt;
&lt;p&gt;RP: &lt;a href=&#34;https://github.com/istio/istio/pull/9688&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/istio/istio/pull/9688&lt;/a&gt;
Issue: &lt;a href=&#34;https://github.com/istio/istio/issues/9441&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/istio/istio/issues/9441&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/networking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://kubernetes.io/docs/concepts/cluster-administration/networking/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ZTE/Knitter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ZTE/Knitter/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
